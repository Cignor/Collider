
================================================================================
FILE: juce\Source\audio\graph\ModularSynthProcessor.h
================================================================================


#pragma once

#include <juce_audio_processors/juce_audio_processors.h>
#include <atomic>
#include <vector>
#include <memory>
#include "../modules/ModuleProcessor.h"
#include "../modules/InputDebugModuleProcessor.h"

class ModularSynthProcessor : public juce::AudioProcessor
{
public:
    ModularSynthProcessor();
    ~ModularSynthProcessor() override;

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    const juce::String getName() const override { return "Modular Synth"; }
    bool acceptsMidi() const override { return true; }
    bool producesMidi() const override { return true; }
    double getTailLengthSeconds() const override { return 0.0; }
    juce::AudioProcessorEditor* createEditor() override { return nullptr; }
    bool hasEditor() const override { return false; }
    int getNumPrograms() override { return 1; }
    int getCurrentProgram() override { return 0; }
    void setCurrentProgram (int) override {}
    const juce::String getProgramName (int) override { return {}; }
    void changeProgramName (int, const juce::String&) override {}
    void getStateInformation (juce::MemoryBlock&) override;
    void setStateInformation (const void*, int) override;

    // Public API (initial)
public:
    using Node = juce::AudioProcessorGraph::Node;
    using NodeID = juce::AudioProcessorGraph::NodeID;

    NodeID addModule(const juce::String& moduleType, bool commit = true);
    NodeID addVstModule(juce::AudioPluginFormatManager& formatManager, const juce::PluginDescription& vstDesc);
    NodeID addVstModule(juce::AudioPluginFormatManager& formatManager, const juce::PluginDescription& vstDesc, juce::uint32 logicalIdToAssign);
    void removeModule(const NodeID& nodeID);
    void clearAll(); // Add this line
    void clearAllConnections(); // Add this line
    void clearOutputConnections(); // <<< ADD THIS LINE
    void clearConnectionsForNode(const NodeID& nodeID); // <<< ADD THIS LINE
    bool connect(const NodeID& sourceNodeID, int sourceChannel, const NodeID& destNodeID, int destChannel);
    
    // Set the hardware input channel mapping for an Audio Input module
    void setAudioInputChannelMapping(const NodeID& audioInputNodeId, const std::vector<int>& channelMap);
    
    void commitChanges();
    NodeID getOutputNodeID() const { return audioOutputNode ? audioOutputNode->nodeID : NodeID{}; }
    // Introspection for editor
    std::vector<std::pair<juce::uint32, juce::String>> getModulesInfo() const;
    juce::AudioProcessorGraph::NodeID getNodeIdForLogical (juce::uint32 logicalId) const;
    juce::uint32 getLogicalIdForNode (const NodeID& nodeId) const;
    juce::String getModuleTypeForLogical(juce::uint32 logicalId) const;
    bool disconnect (const NodeID& sourceNodeID, int sourceChannel, const NodeID& destNodeID, int destChannel);
    struct ConnectionInfo
    {
        juce::uint32 srcLogicalId { 0 };
        int srcChan { 0 };
        juce::uint32 dstLogicalId { 0 }; // 0 means audio output
        int dstChan { 0 };
        bool dstIsOutput { false };
    };
    std::vector<ConnectionInfo> getConnectionsInfo() const;
    // Access a module processor for UI parameter editing
    ModuleProcessor* getModuleForLogical (juce::uint32 logicalId) const;
    
    // === GLOBAL TRANSPORT & TIMING ===
    // (TransportState struct is defined in ModuleProcessor.h)
    
    TransportState getTransportState() const { return m_transportState; }
    void setPlaying(bool playing) { m_transportState.isPlaying = playing; }
    void setBPM(double bpm) { m_transportState.bpm = juce::jlimit(20.0, 999.0, bpm); }
    void setGlobalDivisionIndex(int idx) { m_transportState.globalDivisionIndex = idx; }
    
    // MIDI activity indicator
    bool hasMidiActivity() const { return m_midiActivityFlag.exchange(false); }
    void resetTransportPosition() { m_samplePosition = 0; m_transportState.songPositionBeats = 0.0; m_transportState.songPositionSeconds = 0.0; }
    
    // === VOICE MANAGEMENT FOR POLYPHONY ===
    struct Voice {
        bool isActive = false;
        int noteNumber = -1;
        float velocity = 0.0f;
        juce::uint32 age = 0;  // Used for note stealing (oldest voice)
        juce::uint32 targetModuleLogicalId = 0;  // Which PolyVCO this voice is assigned to
    };
    
    void setVoiceManagerEnabled(bool enabled) { m_voiceManagerEnabled = enabled; }
    bool isVoiceManagerEnabled() const { return m_voiceManagerEnabled; }
    void setMaxVoices(int numVoices) { m_voices.resize(numVoices); }
    int getMaxVoices() const { return static_cast<int>(m_voices.size()); }
    const std::vector<Voice>& getVoices() const { return m_voices; }
    
    // === COMPREHENSIVE DIAGNOSTICS SYSTEM ===
    
    // Get system-wide diagnostics
    juce::String getSystemDiagnostics() const;
    
    // Get diagnostics for a specific module
    juce::String getModuleDiagnostics(juce::uint32 logicalId) const;
    
    // Get parameter routing diagnostics for a specific module
    juce::String getModuleParameterRoutingDiagnostics(juce::uint32 logicalId) const;
    
    // Get all connection diagnostics
    juce::String getConnectionDiagnostics() const;
    
    // Check if any recorder module is currently recording (prevents spacebar from stopping audio)
    bool isAnyModuleRecording() const;
    
    // Pause/Resume all active recorders (used by spacebar during audition)
    void pauseAllRecorders();
    void resumeAllRecorders();
    
    // Global start/stop all recorders (used by menu bar)
    void startAllRecorders();
    void stopAllRecorders();
    
    // Plugin format manager for VST support (optional, set by application)
    void setPluginFormatManager(juce::AudioPluginFormatManager* manager) { pluginFormatManager = manager; }
    void setKnownPluginList(juce::KnownPluginList* list) { knownPluginList = list; }
    
    // === PROBE TOOL API ===
    // Probe system for instant signal debugging without manual patching
    void setProbeConnection(const NodeID& sourceNodeID, int sourceChannel);
    void clearProbeConnection();
    ModuleProcessor* getProbeScopeProcessor() const;

private:
    // The internal graph that represents the modular patch
    std::unique_ptr<juce::AudioProcessorGraph> internalGraph;

    // Special nodes for handling I/O within the internal graph
    Node::Ptr audioInputNode;
    Node::Ptr audioOutputNode;
    Node::Ptr midiInputNode;
    
    // MIDI activity indicator (mutable because hasMidiActivity() is const)
    mutable std::atomic<bool> m_midiActivityFlag{false};

    // The APVTS that will expose proxy parameters to the host/AudioEngine
    juce::AudioProcessorValueTreeState apvts;

    // Thread-safe module access for audio thread
    mutable juce::CriticalSection moduleLock;
    std::atomic<std::shared_ptr<const std::vector<std::shared_ptr<ModuleProcessor>>>> activeAudioProcessors;

    // Manage module nodes (legacy map by NodeID.uid)
    std::map<juce::uint32, Node::Ptr> modules; // keyed by NodeID.uid
    // Logical ID mapping for preset save/load
    struct LogicalModule
    {
        juce::AudioProcessorGraph::NodeID nodeID;
        juce::String type;
    };
    std::map<juce::uint32, LogicalModule> logicalIdToModule; // logicalId -> module
    juce::uint32 nextLogicalId { 1 };
    
    // Optional pointers for VST support
    juce::AudioPluginFormatManager* pluginFormatManager { nullptr };
    juce::KnownPluginList* knownPluginList { nullptr };
    
    // Probe scope for instant signal debugging (hidden from user, not saved in presets)
    Node::Ptr probeScopeNode;
    NodeID probeScopeNodeId;
    
    // Transport state
    TransportState m_transportState;
    juce::uint64 m_samplePosition { 0 };
    
    // Voice management state
    std::vector<Voice> m_voices;
    bool m_voiceManagerEnabled { false };
    juce::uint32 m_globalVoiceAge { 0 };  // Incremented for each note-on
    
    // Voice management helper methods
    int findFreeVoice();
    int findOldestVoice();
    void assignNoteToVoice(int voiceIndex, const juce::MidiMessage& noteOn);
    void releaseVoice(const juce::MidiMessage& noteOff);

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ModularSynthProcessor)
};

================================================================================
FILE: juce\Source\audio\graph\ModularSynthProcessor.cpp
================================================================================


#include "ModularSynthProcessor.h"
#include "../modules/AudioInputModuleProcessor.h"
#include "../modules/RecordModuleProcessor.h"
#include "../modules/VCOModuleProcessor.h"
#include "../modules/VCFModuleProcessor.h"
#include "../modules/VCAModuleProcessor.h"
#include "../modules/NoiseModuleProcessor.h"
#include "../modules/LFOModuleProcessor.h"
#include "../modules/ADSRModuleProcessor.h"
#include "../modules/MixerModuleProcessor.h"
#include "../modules/DelayModuleProcessor.h"
#include "../modules/ReverbModuleProcessor.h"
#include "../modules/AttenuverterModuleProcessor.h"
#include "../modules/ScopeModuleProcessor.h"
#include "../modules/SAndHModuleProcessor.h"
#include "../modules/StepSequencerModuleProcessor.h"
#include "../modules/MathModuleProcessor.h"
#include "../modules/MapRangeModuleProcessor.h"
#include "../modules/RandomModuleProcessor.h"
#include "../modules/RateModuleProcessor.h"
#include "../modules/QuantizerModuleProcessor.h"
#include "../modules/SequentialSwitchModuleProcessor.h"
#include "../modules/LogicModuleProcessor.h"
#include "../modules/ValueModuleProcessor.h"
#include "../modules/ClockDividerModuleProcessor.h"
#include "../modules/WaveshaperModuleProcessor.h"
#include "../modules/MultiBandShaperModuleProcessor.h"
#include "../modules/GranulatorModuleProcessor.h"
#include "../modules/HarmonicShaperModuleProcessor.h"
#include "../modules/TrackMixerModuleProcessor.h"
#include "../modules/TTSPerformerModuleProcessor.h"
#include "../modules/ComparatorModuleProcessor.h"
#include "../modules/VocalTractFilterModuleProcessor.h"
#include "../modules/VstHostModuleProcessor.h"
#include "../modules/SampleLoaderModuleProcessor.h"
#include "../modules/FunctionGeneratorModuleProcessor.h"
#include "../modules/TimePitchModuleProcessor.h"
#include "../modules/DebugModuleProcessor.h"
#include "../modules/CommentModuleProcessor.h"
#include "../modules/MIDIPlayerModuleProcessor.h"
#include "../modules/PolyVCOModuleProcessor.h"
#include "../modules/BestPracticeNodeProcessor.h"
#include "../modules/ShapingOscillatorModuleProcessor.h"
#include "../modules/MultiSequencerModuleProcessor.h"
#include "../modules/LagProcessorModuleProcessor.h"
#include "../modules/DeCrackleModuleProcessor.h"
#include "../modules/CVMixerModuleProcessor.h"
#include "../modules/GraphicEQModuleProcessor.h"
#include "../modules/FrequencyGraphModuleProcessor.h"
#include "../modules/ChorusModuleProcessor.h"
#include "../modules/PhaserModuleProcessor.h"
#include "../modules/CompressorModuleProcessor.h"
#include "../modules/RecordModuleProcessor.h"
#include "../modules/LimiterModuleProcessor.h"
#include "../modules/GateModuleProcessor.h"
#include "../modules/DriveModuleProcessor.h"
#include "../modules/SnapshotSequencerModuleProcessor.h"
#include "../modules/MIDICVModuleProcessor.h"
#include "../modules/MIDIFadersModuleProcessor.h"
#include "../modules/MIDIKnobsModuleProcessor.h"
#include "../modules/MIDIButtonsModuleProcessor.h"
#include "../modules/MIDIJogWheelModuleProcessor.h"
#include "../modules/TempoClockModuleProcessor.h"
#include "../modules/InletModuleProcessor.h"
#include "../modules/OutletModuleProcessor.h"
#include "../modules/MetaModuleProcessor.h"

ModularSynthProcessor::ModularSynthProcessor()
    : juce::AudioProcessor(BusesProperties()
                            .withInput("Input", juce::AudioChannelSet::stereo(), true)
                            .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "ModularSynthParams", {})
{
    internalGraph = std::make_unique<juce::AudioProcessorGraph>();

    using IOProcessor = juce::AudioProcessorGraph::AudioGraphIOProcessor;
    audioInputNode = internalGraph->addNode(std::make_unique<IOProcessor>(IOProcessor::audioInputNode));
    audioOutputNode = internalGraph->addNode(std::make_unique<IOProcessor>(IOProcessor::audioOutputNode));
    midiInputNode  = internalGraph->addNode(std::make_unique<IOProcessor>(IOProcessor::midiInputNode));

    internalGraph->addConnection({ { midiInputNode->nodeID, juce::AudioProcessorGraph::midiChannelIndex },
                                   { audioOutputNode->nodeID, juce::AudioProcessorGraph::midiChannelIndex } });
    
    probeScopeNode = internalGraph->addNode(std::make_unique<ScopeModuleProcessor>());
    probeScopeNodeId = probeScopeNode->nodeID;
    juce::Logger::writeToLog("[ModularSynth] Initialized probe scope with nodeID: " + juce::String(probeScopeNodeId.uid));
    
    activeAudioProcessors.store(std::make_shared<const std::vector<std::shared_ptr<ModuleProcessor>>>());
    
    m_voices.resize(8);
    for (auto& voice : m_voices)
    {
        voice.isActive = false;
        voice.noteNumber = -1;
        voice.velocity = 0.0f;
        voice.age = 0;
        voice.targetModuleLogicalId = 0;
    }
}

ModularSynthProcessor::~ModularSynthProcessor() {}

void ModularSynthProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    internalGraph->setPlayConfigDetails(getTotalNumInputChannels(), getTotalNumOutputChannels(), sampleRate, samplesPerBlock);
    internalGraph->prepareToPlay(sampleRate, samplesPerBlock);
}

void ModularSynthProcessor::releaseResources()
{
    internalGraph->releaseResources();
}

void ModularSynthProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    try {
        // --- ADD THIS LOGGING BLOCK ---
        if (!midiMessages.isEmpty())
        {
            // If we get this message, it means MIDI is successfully reaching the synth.
            juce::Logger::writeToLog("[SynthCore] Received " + juce::String(midiMessages.getNumEvents()) + " MIDI events this block.");
            m_midiActivityFlag.store(true);
        }
        // --- END OF BLOCK ---
        
        if (m_transportState.isPlaying)
        {
            m_samplePosition += buffer.getNumSamples();
            m_transportState.songPositionSeconds = m_samplePosition / getSampleRate();
            m_transportState.songPositionBeats = (m_transportState.songPositionSeconds / 60.0) * m_transportState.bpm;
        }

        // --- FINAL THREAD-SAFE FIX ---
        auto currentProcessors = activeAudioProcessors.load();
        if (currentProcessors)
        {
            // Iterate over the safe, shared list.
            for (const auto& modulePtr : *currentProcessors)
            {
                // SAFETY NET + GRANULAR LOGGING
                if (modulePtr != nullptr)
                {
                    // Log the memory address before calling the function
                    // juce::Logger::writeToLog("[AudioThread] Ticking module at 0x" + juce::String::toHexString((juce::pointer_sized_int)modulePtr.get()));
                    modulePtr->setTimingInfo(m_transportState);
                }
                else
                {
                    // This should never happen with the shared_ptr fix, but if it does, it's critical info.
                    juce::Logger::writeToLog("[AudioThread] CRITICAL WARNING: Encountered nullptr in active processor list!");
                }
            }
        }
        // --- END OF FIX ---
        
        if (m_voiceManagerEnabled && !m_voices.empty())
        {
            juce::MidiBuffer processedMidi;
            for (const auto metadata : midiMessages)
            {
                const auto msg = metadata.getMessage();
                if (msg.isNoteOn())
                {
                    int voiceIndex = findFreeVoice();
                    if (voiceIndex < 0) voiceIndex = findOldestVoice();
                    if (voiceIndex >= 0)
                    {
                        assignNoteToVoice(voiceIndex, msg);
                        processedMidi.addEvent(msg, metadata.samplePosition);
                    }
                }
                else if (msg.isNoteOff())
                {
                    releaseVoice(msg);
                    processedMidi.addEvent(msg, metadata.samplePosition);
                }
                else
                {
                    processedMidi.addEvent(msg, metadata.samplePosition);
                }
            }
            midiMessages.swapWith(processedMidi);
        }
        
        internalGraph->processBlock(buffer, midiMessages);
        static int silentCtr = 0;
        if (buffer.getMagnitude(0, buffer.getNumSamples()) < 1.0e-6f)
        {
            if ((++silentCtr % 600) == 0)
                juce::Logger::writeToLog("[ModularSynthProcessor] silent block from internal graph");
        }
        else
        {
            silentCtr = 0;
        }
    } catch (const std::exception& e) {
        juce::Logger::writeToLog(juce::String("[ModSynth][FATAL] Exception in processBlock: ") + e.what());
        buffer.clear();
        return;
    } catch (...) {
        juce::Logger::writeToLog("[ModSynth][FATAL] Unknown exception in processBlock");
        buffer.clear();
        return;
    }
}

void ModularSynthProcessor::getStateInformation(juce::MemoryBlock& destData)
{
    const juce::ScopedLock lock (moduleLock);
    juce::ValueTree root("ModularSynthPreset");
    root.setProperty("version", 1, nullptr);
    root.setProperty("bpm", m_transportState.bpm, nullptr);

    juce::ValueTree modsVT("modules");
    std::map<juce::uint32, juce::uint32> nodeUidToLogical;
    for (const auto& kv : logicalIdToModule)
    {
        const juce::uint32 logicalId = kv.first;
        const auto nodeUID = (juce::uint32) kv.second.nodeID.uid;
        nodeUidToLogical[nodeUID] = logicalId;

        juce::ValueTree mv("module");
        mv.setProperty("logicalId", (int) logicalId, nullptr);
        mv.setProperty("type", kv.second.type, nullptr);
        auto itNode = modules.find(nodeUID);
        if (itNode != modules.end())
        {
            if (auto* modProc = dynamic_cast<ModuleProcessor*>(itNode->second->getProcessor()))
            {
                if (auto* vstHost = dynamic_cast<VstHostModuleProcessor*>(modProc))
                {
                    if (auto extra = vstHost->getExtraStateTree(); extra.isValid())
                    {
                        juce::ValueTree extraWrapper("extra");
                        extraWrapper.addChild(extra, -1, nullptr);
                        mv.addChild(extraWrapper, -1, nullptr);
                    }
                }
                else
                {
                    juce::ValueTree params = modProc->getAPVTS().copyState();
                    juce::ValueTree paramsWrapper("params");
                    paramsWrapper.addChild(params, -1, nullptr);
                    mv.addChild(paramsWrapper, -1, nullptr);

                    if (auto extra = modProc->getExtraStateTree(); extra.isValid())
                    {
                        juce::ValueTree extraWrapper("extra");
                        extraWrapper.addChild(extra, -1, nullptr);
                        mv.addChild(extraWrapper, -1, nullptr);
                    }
                }
            }
        }
        modsVT.addChild(mv, -1, nullptr);
    }
    root.addChild(modsVT, -1, nullptr);

    juce::ValueTree connsVT("connections");
    for (const auto& c : internalGraph->getConnections())
    {
        const juce::uint32 srcUID = (juce::uint32) c.source.nodeID.uid;
        const juce::uint32 dstUID = (juce::uint32) c.destination.nodeID.uid;
        juce::ValueTree cv("connection");
        auto srcIt = nodeUidToLogical.find(srcUID);
        auto dstIt = nodeUidToLogical.find(dstUID);
        if (srcIt != nodeUidToLogical.end() && dstIt != nodeUidToLogical.end())
        {
            cv.setProperty("srcId", (int) srcIt->second, nullptr);
            cv.setProperty("srcChan", (int) c.source.channelIndex, nullptr);
            cv.setProperty("dstId", (int) dstIt->second, nullptr);
            cv.setProperty("dstChan", (int) c.destination.channelIndex, nullptr);
        }
        else if (srcIt != nodeUidToLogical.end() && c.destination.nodeID == audioOutputNode->nodeID)
        {
            cv.setProperty("srcId", (int) srcIt->second, nullptr);
            cv.setProperty("srcChan", (int) c.source.channelIndex, nullptr);
            cv.setProperty("dstId", juce::String("output"), nullptr);
            cv.setProperty("dstChan", (int) c.destination.channelIndex, nullptr);
        }
        else
        {
            continue;
        }
        connsVT.addChild(cv, -1, nullptr);
    }
    root.addChild(connsVT, -1, nullptr);

    if (auto xml = root.createXml())
    {
        juce::MemoryOutputStream mos(destData, false);
        xml->writeTo(mos);
    }
}

void ModularSynthProcessor::setStateInformation(const void* data, int sizeInBytes)
{
    juce::Logger::writeToLog("--- Restoring Snapshot ---");
    std::unique_ptr<juce::XmlElement> xml (juce::XmlDocument::parse(juce::String::fromUTF8((const char*)data, (size_t)sizeInBytes)));
    if (!xml || !xml->hasTagName("ModularSynthPreset"))
    {
        juce::Logger::writeToLog("[STATE] ERROR: Invalid XML or wrong root tag. Aborting restore.");
        return;
    }

    clearAll();
    juce::Logger::writeToLog("[STATE] Cleared existing state.");

    juce::ValueTree root = juce::ValueTree::fromXml(*xml);
    
    // Restore global transport settings
    m_transportState.bpm = root.getProperty("bpm", 120.0);
    juce::Logger::writeToLog("[STATE] Restored BPM to " + juce::String(m_transportState.bpm));
    
    auto modsVT = root.getChildWithName("modules");
    if (!modsVT.isValid())
    {
        juce::Logger::writeToLog("[STATE] WARNING: No <modules> block found in preset.");
        return;
    }
    
    juce::Logger::writeToLog("[STATE] Found <modules> block with " + juce::String(modsVT.getNumChildren()) + " children.");
    juce::uint32 maxId = 0;
    for (int i = 0; i < modsVT.getNumChildren(); ++i)
    {
        auto mv = modsVT.getChild(i);
        if (mv.hasType("module"))
        {
            maxId = juce::jmax(maxId, (juce::uint32)(int)mv.getProperty("logicalId", 0));
        }
    }
    nextLogicalId = maxId + 1;

    std::map<juce::uint32, NodeID> logicalToNodeId;
    juce::Logger::writeToLog("[STATE] Starting module recreation pass...");
    
    for (int i = 0; i < modsVT.getNumChildren(); ++i)
    {
        auto mv = modsVT.getChild(i);
        if (!mv.hasType("module"))
        {
            juce::Logger::writeToLog("[STATE] Skipping non-module child at index " + juce::String(i));
            continue;
        }

        const juce::uint32 logicalId = (juce::uint32)(int)mv.getProperty("logicalId", 0);
        const juce::String type = mv.getProperty("type").toString();

        juce::Logger::writeToLog("[STATE] Processing module " + juce::String(i) + ": logicalId=" + juce::String(logicalId) + " type='" + type + "'");

        if (logicalId > 0 && type.isNotEmpty())
        {
            NodeID nodeId;
            
            auto extraWrapper = mv.getChildWithName("extra");
            bool isVstModule = false;
            
            if (extraWrapper.isValid() && extraWrapper.getNumChildren() > 0)
            {
                auto extraState = extraWrapper.getChild(0);
                if (extraState.hasType("VstHostState"))
                {
                    isVstModule = true;
                    juce::Logger::writeToLog("[STATE]   Loading VST module...");
                    
                    juce::String identifier = extraState.getProperty("fileOrIdentifier", "").toString();
                    
                    if (identifier.isNotEmpty() && pluginFormatManager != nullptr && knownPluginList != nullptr)
                    {
                        bool found = false;
                        for (const auto& desc : knownPluginList->getTypes())
                        {
                            if (desc.fileOrIdentifier == identifier)
                            {
                                juce::Logger::writeToLog("[STATE]   Found VST to load: " + desc.name);
                                nodeId = addVstModule(*pluginFormatManager, desc, logicalId);
                                found = true;
                                break;
                            }
                        }
                        
                        if (!found)
                        {
                            juce::Logger::writeToLog("[STATE]   ERROR: VST plugin not found: " + identifier);
                        }
                    }
                    else
                    {
                        juce::Logger::writeToLog("[STATE]   ERROR: No plugin identifier or format manager/list not available");
                    }
                    
                    if (nodeId.uid == 0)
                    {
                        juce::Logger::writeToLog("[STATE]   ERROR: Failed to create VST module, skipping...");
                        continue;
                    }
                }
            }
            
            if (!isVstModule)
            {
                juce::Logger::writeToLog("[STATE]   Calling addModule('" + type + "')...");
                nodeId = addModule(type, false);
                juce::Logger::writeToLog("[STATE]   addModule returned nodeId.uid=" + juce::String(nodeId.uid));
            }
            
            auto* node = internalGraph->getNodeForId(nodeId);
            
            if (node)
            {
                juce::Logger::writeToLog("[STATE]   Node created successfully.");
                
                if (!isVstModule)
                {
                    for (auto it = logicalIdToModule.begin(); it != logicalIdToModule.end(); )
                    {
                        if (it->second.nodeID == nodeId)
                            it = logicalIdToModule.erase(it);
                        else
                            ++it;
                    }
                    logicalIdToModule[logicalId] = LogicalModule{ nodeId, type };
                }
                
                logicalToNodeId[logicalId] = nodeId;
                juce::Logger::writeToLog("[STATE]   Mapped logicalId " + juce::String(logicalId) + " to nodeId.uid " + juce::String(nodeId.uid));

                // --- FIX: Restore extra state FIRST ---
                // This will load the clip and reset trim sliders to defaults.
                auto extraWrapper = mv.getChildWithName("extra");
                if (extraWrapper.isValid() && extraWrapper.getNumChildren() > 0)
                {
                    auto extra = extraWrapper.getChild(0);
                    if (auto* mp = dynamic_cast<ModuleProcessor*>(node->getProcessor()))
                    {
                        mp->setExtraStateTree(extra);
                        juce::Logger::writeToLog("[STATE]   Restored extra state.");
                    }
                }

                // Now restore parameters SECOND.
                // This will overwrite the temporary default trim values with the correct saved values.
                auto paramsWrapper = mv.getChildWithName("params");
                if (paramsWrapper.isValid() && paramsWrapper.getNumChildren() > 0)
                {
                    auto params = paramsWrapper.getChild(0);
                    if (auto* mp = dynamic_cast<ModuleProcessor*>(node->getProcessor()))
                    {
                        mp->getAPVTS().replaceState(params);
                        juce::Logger::writeToLog("[STATE]   Restored parameters.");
                    }
                }
            }
            else
            {
                juce::Logger::writeToLog("[STATE]   ERROR: Node creation failed! nodeId.uid was " + juce::String(nodeId.uid) + " but getNodeForId returned nullptr.");
            }
        }
        else
        {
            juce::Logger::writeToLog("[STATE]   Skipping module: logicalId=" + juce::String(logicalId) + " (valid=" + juce::String(logicalId > 0 ? "yes" : "no") + ") type='" + type + "' (empty=" + juce::String(type.isEmpty() ? "yes" : "no") + ")");
        }
    }
    
    juce::Logger::writeToLog("[STATE] Module recreation complete. Created " + juce::String(logicalToNodeId.size()) + " modules.");

    auto connsVT = root.getChildWithName("connections");
    if (connsVT.isValid())
    {
        juce::Logger::writeToLog("[STATE] Restoring " + juce::String(connsVT.getNumChildren()) + " connections...");
        int connectedCount = 0;
        int skippedCount = 0;
        
        for (int i = 0; i < connsVT.getNumChildren(); ++i)
        {
            auto cv = connsVT.getChild(i);
            if (!cv.hasType("connection")) continue;

            const juce::uint32 srcId = (juce::uint32)(int)cv.getProperty("srcId");
            const int srcChan = (int)cv.getProperty("srcChan", 0);
            const bool dstIsOutput = cv.getProperty("dstId").toString() == "output";
            const juce::uint32 dstId = dstIsOutput ? 0 : (juce::uint32)(int)cv.getProperty("dstId");
            const int dstChan = (int)cv.getProperty("dstChan", 0);

            NodeID srcNodeId = logicalToNodeId[srcId];
            NodeID dstNodeId = dstIsOutput ? audioOutputNode->nodeID : logicalToNodeId[dstId];

            if (srcNodeId.uid != 0 && dstNodeId.uid != 0)
            {
                connect(srcNodeId, srcChan, dstNodeId, dstChan);
                connectedCount++;
            }
            else
            {
                juce::Logger::writeToLog("[STATE]   WARNING: Skipping connection " + juce::String(i) + 
                                        ": srcId=" + juce::String(srcId) + " (uid=" + juce::String(srcNodeId.uid) + 
                                        ") → dstId=" + (dstIsOutput ? "output" : juce::String(dstId)) + 
                                        " (uid=" + juce::String(dstNodeId.uid) + ")");
                skippedCount++;
            }
        }
        
        juce::Logger::writeToLog("[STATE] Connection restore complete: " + juce::String(connectedCount) + 
                                " connected, " + juce::String(skippedCount) + " skipped.");
    }
    else
    {
        juce::Logger::writeToLog("[STATE] WARNING: No <connections> block found in preset.");
    }


    juce::Logger::writeToLog("[STATE] Calling commitChanges()...");
    commitChanges();
    juce::Logger::writeToLog("[STATE] Restore complete.");
}

namespace {
    static juce::String toLowerId (const juce::String& s)
    {
        return s.toLowerCase();
    }

    using Creator = std::function<std::unique_ptr<juce::AudioProcessor>()>;

    static std::map<juce::String, Creator>& getModuleFactory()
    {
        static std::map<juce::String, Creator> factory;
        static bool initialised = false;
        if (!initialised)
        {
            auto reg = [&](const juce::String& key, Creator c) { factory.emplace(toLowerId(key), std::move(c)); };

            reg("vco", []{ return std::make_unique<VCOModuleProcessor>(); });
            reg("audio input", []{ return std::make_unique<AudioInputModuleProcessor>(); });
            reg("vcf", []{ return std::make_unique<VCFModuleProcessor>(); });
            reg("vca", []{ return std::make_unique<VCAModuleProcessor>(); });
            reg("noise", []{ return std::make_unique<NoiseModuleProcessor>(); });
            reg("lfo", []{ return std::make_unique<LFOModuleProcessor>(); });
            reg("adsr", []{ return std::make_unique<ADSRModuleProcessor>(); });
            reg("mixer", []{ return std::make_unique<MixerModuleProcessor>(); });
            reg("cvmixer", []{ return std::make_unique<CVMixerModuleProcessor>(); });
            reg("cv mixer", []{ return std::make_unique<CVMixerModuleProcessor>(); });
            reg("trackmixer", []{ return std::make_unique<TrackMixerModuleProcessor>(); });
            reg("delay", []{ return std::make_unique<DelayModuleProcessor>(); });
            reg("reverb", []{ return std::make_unique<ReverbModuleProcessor>(); });
            reg("attenuverter", []{ return std::make_unique<AttenuverterModuleProcessor>(); });
            reg("scope", []{ return std::make_unique<ScopeModuleProcessor>(); });
            reg("frequency graph", []{ return std::make_unique<FrequencyGraphModuleProcessor>(); });
            reg("s&h", []{ return std::make_unique<SAndHModuleProcessor>(); });
            reg("sequencer", []{ return std::make_unique<StepSequencerModuleProcessor>(); });
            reg("stepsequencer", []{ return std::make_unique<StepSequencerModuleProcessor>(); });
            reg("math", []{ return std::make_unique<MathModuleProcessor>(); });
            reg("maprange", []{ return std::make_unique<MapRangeModuleProcessor>(); });
            reg("comparator", []{ return std::make_unique<ComparatorModuleProcessor>(); });
            reg("random", []{ return std::make_unique<RandomModuleProcessor>(); });
            reg("rate", []{ return std::make_unique<RateModuleProcessor>(); });
            reg("quantizer", []{ return std::make_unique<QuantizerModuleProcessor>(); });
            reg("sequentialswitch", []{ return std::make_unique<SequentialSwitchModuleProcessor>(); });
            reg("logic", []{ return std::make_unique<LogicModuleProcessor>(); });
            reg("clockdivider", []{ return std::make_unique<ClockDividerModuleProcessor>(); });
            reg("waveshaper", []{ return std::make_unique<WaveshaperModuleProcessor>(); });
            reg("8bandshaper", []{ return std::make_unique<MultiBandShaperModuleProcessor>(); });
            reg("granulator", []{ return std::make_unique<GranulatorModuleProcessor>(); });
            reg("harmonic shaper", []{ return std::make_unique<HarmonicShaperModuleProcessor>(); });
            reg("debug", []{ return std::make_unique<DebugModuleProcessor>(); });
            reg("input debug", []{ return std::make_unique<InputDebugModuleProcessor>(); });
            reg("vocal tract filter", []{ return std::make_unique<VocalTractFilterModuleProcessor>(); });
            reg("value", []{ return std::make_unique<ValueModuleProcessor>(); });
            reg("tts performer", []{ return std::make_unique<TTSPerformerModuleProcessor>(); });
            reg("sample loader", []{ return std::make_unique<SampleLoaderModuleProcessor>(); });
            reg("function generator", []{ return std::make_unique<FunctionGeneratorModuleProcessor>(); });
            reg("timepitch", []{ return std::make_unique<TimePitchModuleProcessor>(); });
            reg("midi player", []{ return std::make_unique<MIDIPlayerModuleProcessor>(); });
            reg("polyvco", []{ return std::make_unique<PolyVCOModuleProcessor>(); });
            reg("best practice", []{ return std::make_unique<BestPracticeNodeProcessor>(); });
            reg("shaping oscillator", []{ return std::make_unique<ShapingOscillatorModuleProcessor>(); });
            reg("multi sequencer", []{ return std::make_unique<MultiSequencerModuleProcessor>(); });
            reg("lag processor", []{ return std::make_unique<LagProcessorModuleProcessor>(); });
            reg("decrackle", []{ return std::make_unique<DeCrackleModuleProcessor>(); });
            reg("de-crackle", []{ return std::make_unique<DeCrackleModuleProcessor>(); });
            reg("graphic eq", []{ return std::make_unique<GraphicEQModuleProcessor>(); });
            reg("chorus", []{ return std::make_unique<ChorusModuleProcessor>(); });
            reg("phaser", []{ return std::make_unique<PhaserModuleProcessor>(); });
            reg("compressor", []{ return std::make_unique<CompressorModuleProcessor>(); });
            reg("recorder", []{ return std::make_unique<RecordModuleProcessor>(); });
            reg("limiter", []{ return std::make_unique<LimiterModuleProcessor>(); });
            reg("gate", []{ return std::make_unique<GateModuleProcessor>(); });
            reg("drive", []{ return std::make_unique<DriveModuleProcessor>(); });
            reg("comment", []{ return std::make_unique<CommentModuleProcessor>(); });
            reg("snapshot sequencer", []{ return std::make_unique<SnapshotSequencerModuleProcessor>(); });
            reg("snapshotsequencer", []{ return std::make_unique<SnapshotSequencerModuleProcessor>(); });
            reg("midi cv", []{ return std::make_unique<MIDICVModuleProcessor>(); });
            reg("midicv", []{ return std::make_unique<MIDICVModuleProcessor>(); });
            reg("midi faders", []{ return std::make_unique<MIDIFadersModuleProcessor>(); });
            reg("midi knobs", []{ return std::make_unique<MIDIKnobsModuleProcessor>(); });
            reg("midi buttons", []{ return std::make_unique<MIDIButtonsModuleProcessor>(); });
            reg("midi jog wheel", []{ return std::make_unique<MIDIJogWheelModuleProcessor>(); });
            reg("tempo clock", []{ return std::make_unique<TempoClockModuleProcessor>(); });
            
            reg("meta module", []{ return std::make_unique<MetaModuleProcessor>(); });
            reg("metamodule", []{ return std::make_unique<MetaModuleProcessor>(); });
            reg("inlet", []{ return std::make_unique<InletModuleProcessor>(); });
            reg("outlet", []{ return std::make_unique<OutletModuleProcessor>(); });

            initialised = true;
        }
        return factory;
    }
}

ModularSynthProcessor::NodeID ModularSynthProcessor::addModule(const juce::String& moduleType, bool commit)
{
    const juce::ScopedLock lock (moduleLock);
    auto& factory = getModuleFactory();
    const juce::String key = moduleType.toLowerCase();
    std::unique_ptr<juce::AudioProcessor> processor;

    if (auto it = factory.find(key); it != factory.end())
        processor = it->second();

    if (! processor)
    {
        for (const auto& kv : factory)
            if (moduleType.equalsIgnoreCase(kv.first)) { processor = kv.second(); break; }
    }

    if (processor)
    {
        auto node = internalGraph->addNode(std::move(processor), {}, juce::AudioProcessorGraph::UpdateKind::none);
        if (auto* mp = dynamic_cast<ModuleProcessor*>(node->getProcessor()))
            mp->setParent(this);
        modules[(juce::uint32) node->nodeID.uid] = node;
        const juce::uint32 logicalId = nextLogicalId++;
        logicalIdToModule[logicalId] = LogicalModule{ node->nodeID, moduleType };
        if (auto* mp = dynamic_cast<ModuleProcessor*>(node->getProcessor()))
            mp->setLogicalId(logicalId);
        
        if (moduleType.equalsIgnoreCase("audio input"))
        {
            std::vector<int> defaultMapping = {0, 1};
            setAudioInputChannelMapping(node->nodeID, defaultMapping);
        }
        
        if (commit)
        {
            // Ensure the new module is immediately active
            commitChanges();
        }
        
        return node->nodeID;
    }

    juce::Logger::writeToLog("[ModSynth][WARN] Unknown module type: " + moduleType);
    return {};
}

ModularSynthProcessor::NodeID ModularSynthProcessor::addVstModule(
    juce::AudioPluginFormatManager& formatManager,
    const juce::PluginDescription& vstDesc,
    juce::uint32 logicalIdToAssign)
{
    juce::String errorMessage;
    std::unique_ptr<juce::AudioPluginInstance> instance = 
        formatManager.createPluginInstance(vstDesc, getSampleRate(), getBlockSize(), errorMessage);

    if (instance == nullptr)
    {
        juce::Logger::writeToLog("[ModSynth][ERROR] Could not create VST instance: " + errorMessage);
        return {};
    }

    auto wrapper = std::make_unique<VstHostModuleProcessor>(std::move(instance), vstDesc);
    
    auto node = internalGraph->addNode(std::move(wrapper), {}, juce::AudioProcessorGraph::UpdateKind::none);

    if (auto* mp = dynamic_cast<ModuleProcessor*>(node->getProcessor()))
        mp->setParent(this);
    
    modules[(juce::uint32) node->nodeID.uid] = node;
    
    logicalIdToModule[logicalIdToAssign] = LogicalModule{ node->nodeID, vstDesc.name };
    
    if (auto* mp = dynamic_cast<ModuleProcessor*>(node->getProcessor()))
        mp->setLogicalId(logicalIdToAssign);
    
    juce::Logger::writeToLog("[ModSynth] Added VST module: " + vstDesc.name + " with logical ID " + juce::String(logicalIdToAssign));
    return node->nodeID;
}

ModularSynthProcessor::NodeID ModularSynthProcessor::addVstModule(
    juce::AudioPluginFormatManager& formatManager,
    const juce::PluginDescription& vstDesc)
{
    const juce::uint32 logicalId = nextLogicalId++;
    auto nodeId = addVstModule(formatManager, vstDesc, logicalId);
    
    if (nodeId.uid != 0)
        commitChanges();
    
    return nodeId;
}

void ModularSynthProcessor::removeModule(const NodeID& nodeID)
{
    if (nodeID.uid == 0) return;
    const juce::ScopedLock lock(moduleLock); // Ensure thread-safe access

    // --- LOGGING ---
    if (auto* node = internalGraph->getNodeForId(nodeID))
    {
        if (auto* proc = node->getProcessor())
        {
            juce::Logger::writeToLog("[GraphSync] Deleting module L-ID " + juce::String(getLogicalIdForNode(nodeID)) + 
                                   " (ptr: 0x" + juce::String::toHexString((int64_t)proc) + ")");
        }
    }
    // --- END LOGGING ---

    const juce::uint32 logicalId = getLogicalIdForNode(nodeID);

    internalGraph->removeNode(nodeID, juce::AudioProcessorGraph::UpdateKind::none);
    
    modules.erase((juce::uint32) nodeID.uid);
    if (logicalId != 0)
    {
        logicalIdToModule.erase(logicalId);
    }
}

bool ModularSynthProcessor::connect(const NodeID& sourceNodeID, int sourceChannel, const NodeID& destNodeID, int destChannel)
{
    juce::AudioProcessorGraph::Connection connection {
        { sourceNodeID, sourceChannel },
        { destNodeID, destChannel }
    };

    for (const auto& existing : internalGraph->getConnections())
    {
        if (existing.source.nodeID == sourceNodeID &&
            existing.source.channelIndex == sourceChannel &&
            existing.destination.nodeID == destNodeID &&
            existing.destination.channelIndex == destChannel)
        {
            juce::Logger::writeToLog("[ModSynth][INFO] Skipping duplicate connection [" + juce::String(sourceNodeID.uid) + ":" + juce::String(sourceChannel)
                                     + "] -> [" + juce::String(destNodeID.uid) + ":" + juce::String(destChannel) + "]");
            return true;
        }
    }

    const bool ok = internalGraph->addConnection(connection, juce::AudioProcessorGraph::UpdateKind::none);
    if (! ok)
    {
        juce::Logger::writeToLog("[ModSynth][WARN] Failed to connect [" + juce::String(sourceNodeID.uid) + ":" + juce::String(sourceChannel)
                                 + "] -> [" + juce::String(destNodeID.uid) + ":" + juce::String(destChannel) + "]");
    }
    return ok;
}

void ModularSynthProcessor::commitChanges()
{
    internalGraph->rebuild();
    
    if (getSampleRate() > 0 && getBlockSize() > 0)
    {
        internalGraph->prepareToPlay(getSampleRate(), getBlockSize());
    }

    juce::Logger::writeToLog("--- Modular Synth Internal Patch State ---");
    juce::Logger::writeToLog("Num Nodes: " + juce::String(internalGraph->getNodes().size()));
    juce::Logger::writeToLog("Num Connections: " + juce::String(internalGraph->getConnections().size()));
    for (const auto& node : internalGraph->getNodes())
    {
        auto* p = node->getProcessor();
        juce::String name = p ? p->getName() : juce::String("<null>");
        const int ins  = p ? p->getTotalNumInputChannels()  : -1;
        const int outs = p ? p->getTotalNumOutputChannels() : -1;
        juce::Logger::writeToLog("  Node: id=" + juce::String(node->nodeID.uid) + " name='" + name + "' ins=" + juce::String(ins) + " outs=" + juce::String(outs));
    }
    for (const auto& conn : internalGraph->getConnections())
    {
        juce::Logger::writeToLog("  Connection: [" + juce::String(conn.source.nodeID.uid) + ":" + juce::String(conn.source.channelIndex)
            + "] -> [" + juce::String(conn.destination.nodeID.uid) + ":" + juce::String(conn.destination.channelIndex) + "]");
    }
    juce::Logger::writeToLog("-----------------------------------------");
    
    for (const auto& kv : logicalIdToModule)
    {
        if (ModuleProcessor* mp = getModuleForLogical(kv.first))
        {
            mp->setLogicalId(kv.first);
        }
    }
    
    // --- FINAL THREAD-SAFE FIX: Rebuild the list of active processors for the audio thread ---
    auto newProcessors = std::make_shared<std::vector<std::shared_ptr<ModuleProcessor>>>();
    {
        const juce::ScopedLock lock(moduleLock);
        newProcessors->reserve(logicalIdToModule.size());
        juce::Logger::writeToLog("[GraphSync] Building new processor list...");
        for (const auto& pair : logicalIdToModule)
        {
            // Find the Node::Ptr from the modules map
            auto modIt = modules.find((juce::uint32)pair.second.nodeID.uid);
            if (modIt != modules.end())
            {
                auto nodePtr = modIt->second; // This is a Node::Ptr (shared_ptr<Node>)
                if (auto* proc = dynamic_cast<ModuleProcessor*>(nodePtr->getProcessor()))
                {
                    // Create a shared_ptr to the processor with a custom deleter that keeps the Node alive
                    auto processor = std::shared_ptr<ModuleProcessor>(proc, [nodePtr](ModuleProcessor*) {
                        // Custom deleter: just hold the nodePtr, don't actually delete the processor
                        // When this shared_ptr is destroyed, the nodePtr will be released
                    });
                    newProcessors->push_back(processor);
                    juce::Logger::writeToLog("  [+] Adding module L-ID " + juce::String(pair.first) + 
                                           " (ptr: 0x" + juce::String::toHexString((int64_t)proc) + ")");
                }
            }
        }
    }
    activeAudioProcessors.store(newProcessors);
    juce::Logger::writeToLog("[GraphSync] Updated active processor list for audio thread with " + juce::String(newProcessors->size()) + " modules.");
}

void ModularSynthProcessor::clearAll()
{
    const juce::ScopedLock lock (moduleLock);
    
    // --- LOGGING ---
    juce::Logger::writeToLog("[GraphSync] clearAll() initiated - removing " + juce::String(logicalIdToModule.size()) + " modules");
    // --- END LOGGING ---
    
    for (const auto& kv : logicalIdToModule)
    {
        internalGraph->removeNode(kv.second.nodeID, juce::AudioProcessorGraph::UpdateKind::none);
    }

    modules.clear();
    logicalIdToModule.clear();
    nextLogicalId = 1;

    commitChanges();
}

void ModularSynthProcessor::clearAllConnections()
{
    auto connections = internalGraph->getConnections();
    for (const auto& conn : connections)
    {
        if (conn.source.channelIndex != juce::AudioProcessorGraph::midiChannelIndex && 
            conn.destination.channelIndex != juce::AudioProcessorGraph::midiChannelIndex)
        {
            internalGraph->removeConnection(conn, juce::AudioProcessorGraph::UpdateKind::none);
        }
    }
    commitChanges();
}

void ModularSynthProcessor::clearOutputConnections()
{
    if (audioOutputNode == nullptr)
        return;

    auto connections = internalGraph->getConnections();
    for (const auto& conn : connections)
    {
        if (conn.destination.nodeID == audioOutputNode->nodeID)
        {
            internalGraph->removeConnection(conn, juce::AudioProcessorGraph::UpdateKind::none);
        }
    }
    commitChanges();
}

void ModularSynthProcessor::clearConnectionsForNode(const NodeID& nodeID)
{
    if (nodeID.uid == 0) return;

    auto connections = internalGraph->getConnections();
    for (const auto& conn : connections)
    {
        if (conn.source.nodeID == nodeID || conn.destination.nodeID == nodeID)
        {
            if (conn.source.channelIndex != juce::AudioProcessorGraph::midiChannelIndex)
            {
                internalGraph->removeConnection(conn, juce::AudioProcessorGraph::UpdateKind::none);
            }
        }
    }

    const juce::uint32 logicalId = getLogicalIdForNode(nodeID);

    commitChanges();
}

void ModularSynthProcessor::setAudioInputChannelMapping(const NodeID& audioInputNodeId, const std::vector<int>& channelMap)
{
    if (audioInputNode == nullptr)
    {
        juce::Logger::writeToLog("[ModSynth][ERROR] setAudioInputChannelMapping called but main audioInputNode is null.");
        return;
    }

    juce::String mapStr;
    for (int i = 0; i < (int)channelMap.size(); ++i)
    {
        if (i > 0) mapStr += ", ";
        mapStr += juce::String(channelMap[i]);
    }
    juce::Logger::writeToLog("[ModSynth] Remapping Audio Input Module " + juce::String(audioInputNodeId.uid) +
                             " to channels: [" + mapStr + "]");

    auto connections = internalGraph->getConnections();
    for (const auto& conn : connections)
    {
        if (conn.source.nodeID == audioInputNode->nodeID && conn.destination.nodeID == audioInputNodeId)
        {
            internalGraph->removeConnection(conn, juce::AudioProcessorGraph::UpdateKind::none);
        }
    }

    for (int moduleChannel = 0; moduleChannel < (int)channelMap.size(); ++moduleChannel)
    {
        int hardwareChannel = channelMap[moduleChannel];
        internalGraph->addConnection({ { audioInputNode->nodeID, hardwareChannel }, { audioInputNodeId, moduleChannel } }, 
                                     juce::AudioProcessorGraph::UpdateKind::none);
    }

    commitChanges();
}

std::vector<std::pair<juce::uint32, juce::String>> ModularSynthProcessor::getModulesInfo() const
{
    const juce::ScopedLock lock (moduleLock);
    std::vector<std::pair<juce::uint32, juce::String>> out;
    out.reserve(logicalIdToModule.size());
    for (const auto& kv : logicalIdToModule)
        out.emplace_back(kv.first, kv.second.type);
    return out;
}

juce::AudioProcessorGraph::NodeID ModularSynthProcessor::getNodeIdForLogical (juce::uint32 logicalId) const
{
    const juce::ScopedLock lock (moduleLock);
    auto it = logicalIdToModule.find(logicalId);
    if (it == logicalIdToModule.end()) return {};
    return it->second.nodeID;
}

juce::uint32 ModularSynthProcessor::getLogicalIdForNode (const NodeID& nodeId) const
{
    const juce::ScopedLock lock (moduleLock);
    for (const auto& kv : logicalIdToModule)
        if (kv.second.nodeID == nodeId)
            return kv.first;
    return 0;
}

bool ModularSynthProcessor::disconnect (const NodeID& sourceNodeID, int sourceChannel, const NodeID& destNodeID, int destChannel)
{
    juce::AudioProcessorGraph::Connection connection {
        { sourceNodeID, sourceChannel },
        { destNodeID, destChannel }
    };
    return internalGraph->removeConnection(connection, juce::AudioProcessorGraph::UpdateKind::none);
}

std::vector<ModularSynthProcessor::ConnectionInfo> ModularSynthProcessor::getConnectionsInfo() const
{
    std::vector<ConnectionInfo> out;
    for (const auto& c : internalGraph->getConnections())
    {
        ConnectionInfo info;
        info.srcLogicalId = getLogicalIdForNode(c.source.nodeID);
        info.srcChan = c.source.channelIndex;
        info.dstLogicalId = getLogicalIdForNode(c.destination.nodeID);
        info.dstChan = c.destination.channelIndex;
        info.dstIsOutput = (c.destination.nodeID == audioOutputNode->nodeID);
        if (info.srcLogicalId != 0 && (info.dstLogicalId != 0 || info.dstIsOutput))
            out.push_back(info);
    }
    return out;
}


ModuleProcessor* ModularSynthProcessor::getModuleForLogical (juce::uint32 logicalId) const
{
    const juce::ScopedLock lock (moduleLock);
    auto it = logicalIdToModule.find(logicalId);
    if (it == logicalIdToModule.end()) return nullptr;
    if (auto* node = internalGraph->getNodeForId(it->second.nodeID))
        return dynamic_cast<ModuleProcessor*>(node->getProcessor());
    return nullptr;
}

juce::String ModularSynthProcessor::getModuleTypeForLogical(juce::uint32 logicalId) const
{
    auto it = logicalIdToModule.find(logicalId);
    if (it != logicalIdToModule.end())
    {
        return it->second.type;
    }
    return {};
}

// === COMPREHENSIVE DIAGNOSTICS SYSTEM ===

juce::String ModularSynthProcessor::getSystemDiagnostics() const
{
    juce::String result = "=== MODULAR SYNTH SYSTEM DIAGNOSTICS ===\n\n";
    
    result += "Total Modules: " + juce::String((int)logicalIdToModule.size()) + "\n";
    result += "Next Logical ID: " + juce::String((int)nextLogicalId) + "\n\n";
    
    result += "=== MODULES ===\n";
    for (const auto& pair : logicalIdToModule)
    {
        result += "Logical ID " + juce::String((int)pair.first) + ": " + pair.second.type + 
                 " (Node ID: " + juce::String((int)pair.second.nodeID.uid) + ")\n";
    }
    result += "\n";
    
    result += getConnectionDiagnostics() + "\n";
    
    result += "=== GRAPH STATE ===\n";
    result += "Total Nodes: " + juce::String(internalGraph->getNumNodes()) + "\n";
    result += "Total Connections: (not available)\n";
    
    return result;
}

juce::String ModularSynthProcessor::getModuleDiagnostics(juce::uint32 logicalId) const
{
    auto* module = getModuleForLogical(logicalId);
    if (module)
    {
        return module->getAllDiagnostics();
    }
    else
    {
        return "Module with Logical ID " + juce::String((int)logicalId) + " not found!";
    }
}

juce::String ModularSynthProcessor::getModuleParameterRoutingDiagnostics(juce::uint32 logicalId) const
{
    auto* module = getModuleForLogical(logicalId);
    if (!module)
    {
        return "Module with Logical ID " + juce::String((int)logicalId) + " not found!";
    }
    
    juce::String result = "=== PARAMETER ROUTING DIAGNOSTICS ===\n";
    result += "Module: " + module->getName() + "\n\n";
    
    auto params = module->getParameters();
    
    for (int i = 0; i < params.size(); ++i)
    {
        auto* param = params[i];
        if (auto* paramWithId = dynamic_cast<juce::AudioProcessorParameterWithID*>(param))
        {
            int busIndex, channelIndex;
            if (module->getParamRouting(paramWithId->paramID, busIndex, channelIndex))
            {
                int absoluteChannel = module->getChannelIndexInProcessBlockBuffer(true, busIndex, channelIndex);
                result += "  \"" + paramWithId->paramID + "\" -> Bus " + juce::String(busIndex) + 
                         ", Channel " + juce::String(channelIndex) + " (Absolute: " + juce::String(absoluteChannel) + ")\n";
            }
            else
            {
                result += "  \"" + paramWithId->paramID + "\" -> NO ROUTING\n";
            }
        }
    }
    
    return result;
}

juce::String ModularSynthProcessor::getConnectionDiagnostics() const
{
    juce::String result = "=== CONNECTIONS ===\n";
    
    auto connections = getConnectionsInfo();
    for (const auto& conn : connections)
    {
        result += "Logical " + juce::String((int)conn.srcLogicalId) + ":" + juce::String(conn.srcChan) + 
                 " -> ";
        
        if (conn.dstIsOutput)
        {
            result += "OUTPUT:" + juce::String(conn.dstChan);
        }
        else
        {
            result += "Logical " + juce::String((int)conn.dstLogicalId) + ":" + juce::String(conn.dstChan);
        }
        result += "\n";
    }
    
    if (connections.empty())
    {
        result += "No connections found.\n";
    }
    
    return result;
}

bool ModularSynthProcessor::isAnyModuleRecording() const
{
    for (const auto& kv : modules)
    {
        if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(kv.second->getProcessor()))
        {
            if (recorder->getIsRecording())
                return true;
        }
    }
    return false;
}

void ModularSynthProcessor::pauseAllRecorders()
{
    for (const auto& kv : modules)
    {
        if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(kv.second->getProcessor()))
        {
            recorder->pauseRecording();
        }
    }
}

void ModularSynthProcessor::resumeAllRecorders()
{
    for (const auto& kv : modules)
    {
        if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(kv.second->getProcessor()))
        {
            recorder->resumeRecording();
        }
    }
}

void ModularSynthProcessor::startAllRecorders()
{
    for (const auto& kv : modules)
    {
        if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(kv.second->getProcessor()))
        {
            recorder->programmaticStartRecording();
        }
    }
}

void ModularSynthProcessor::stopAllRecorders()
{
    for (const auto& kv : modules)
    {
        if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(kv.second->getProcessor()))
        {
            recorder->programmaticStopRecording();
        }
    }
}

// === VOICE MANAGEMENT IMPLEMENTATION ===

int ModularSynthProcessor::findFreeVoice()
{
    for (int i = 0; i < static_cast<int>(m_voices.size()); ++i)
    {
        if (!m_voices[i].isActive)
            return i;
    }
    return -1;
}

int ModularSynthProcessor::findOldestVoice()
{
    if (m_voices.empty())
        return -1;
    
    int oldestIndex = 0;
    juce::uint32 oldestAge = m_voices[0].age;
    
    for (int i = 1; i < static_cast<int>(m_voices.size()); ++i)
    {
        if (m_voices[i].age < oldestAge)
        {
            oldestAge = m_voices[i].age;
            oldestIndex = i;
        }
    }
    
    return oldestIndex;
}

void ModularSynthProcessor::assignNoteToVoice(int voiceIndex, const juce::MidiMessage& noteOn)
{
    if (voiceIndex < 0 || voiceIndex >= static_cast<int>(m_voices.size()))
        return;
    
    Voice& voice = m_voices[voiceIndex];
    voice.isActive = true;
    voice.noteNumber = noteOn.getNoteNumber();
    voice.velocity = noteOn.getFloatVelocity();
    voice.age = m_globalVoiceAge++;
    
    juce::Logger::writeToLog("[VoiceManager] Assigned note " + juce::String(voice.noteNumber) + 
                            " to voice " + juce::String(voiceIndex));
}

void ModularSynthProcessor::releaseVoice(const juce::MidiMessage& noteOff)
{
    int noteNumber = noteOff.getNoteNumber();
    
    for (auto& voice : m_voices)
    {
        if (voice.isActive && voice.noteNumber == noteNumber)
        {
            voice.isActive = false;
            voice.noteNumber = -1;
            juce::Logger::writeToLog("[VoiceManager] Released note " + juce::String(noteNumber));
            return;
        }
    }
}

// === PROBE TOOL IMPLEMENTATION ===

void ModularSynthProcessor::setProbeConnection(const NodeID& sourceNodeID, int sourceChannel)
{
    if (!probeScopeNode || probeScopeNodeId.uid == 0)
    {
        juce::Logger::writeToLog("[PROBE] ERROR: Probe scope not initialized!");
        return;
    }
    
    juce::Logger::writeToLog("[PROBE] setProbeConnection called. Source NodeID: " + juce::String(sourceNodeID.uid) + ", Channel: " + juce::String(sourceChannel));
    
    auto connections = internalGraph->getConnections();
    for (const auto& conn : connections)
    {
        if (conn.destination.nodeID == probeScopeNodeId)
        {
            internalGraph->removeConnection(conn, juce::AudioProcessorGraph::UpdateKind::none);
            juce::Logger::writeToLog("[PROBE] Cleared old probe connection.");
        }
    }
    
    bool success = connect(sourceNodeID, sourceChannel, probeScopeNodeId, 0);
    juce::Logger::writeToLog("[PROBE] New connection attempt " + juce::String(success ? "succeeded." : "FAILED."));
    if (success)
    {
        juce::Logger::writeToLog("[Probe] Successfully connected to probe scope");
    }
    else
    {
        juce::Logger::writeToLog("[Probe] ERROR: Failed to connect to probe scope");
    }
    
    commitChanges();
}

void ModularSynthProcessor::clearProbeConnection()
{
    if (!probeScopeNode || probeScopeNodeId.uid == 0)
        return;
    
    juce::Logger::writeToLog("[PROBE] clearProbeConnection called.");
    bool cleared = false;
    
    auto connections = internalGraph->getConnections();
    for (const auto& conn : connections)
    {
        if (conn.destination.nodeID == probeScopeNodeId)
        {
            internalGraph->removeConnection(conn, juce::AudioProcessorGraph::UpdateKind::none);
            cleared = true;
        }
    }
    
    if (cleared) {
        juce::Logger::writeToLog("[PROBE] Cleared active probe connection.");
        commitChanges();
    } else {
        juce::Logger::writeToLog("[PROBE] No active probe connection to clear.");
    }
}

ModuleProcessor* ModularSynthProcessor::getProbeScopeProcessor() const
{
    if (!probeScopeNode)
        return nullptr;
    
    return dynamic_cast<ModuleProcessor*>(probeScopeNode->getProcessor());
}

================================================================================
FILE: juce\Source\audio\graph\VoiceProcessor.cpp
================================================================================


#include "VoiceProcessor.h"

VoiceProcessor::VoiceProcessor()
    : AudioProcessor(BusesProperties()
        .withInput("Input", juce::AudioChannelSet::stereo(), true)
        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "Parameters", createParameterLayout())
{}

void VoiceProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 2 };
    currentSampleRate = sampleRate;
    filter.reset();
    filter.prepare (spec);
    filter.setType (juce::dsp::StateVariableTPTFilterType::lowpass);
    chorus.reset();
    chorus.prepare (spec);
    phaser.reset();
    phaser.prepare (spec);
    reverb.reset();
    reverb.prepare (spec);
    compressor.reset();
    compressor.prepare (spec);
    limiter.reset();
    limiter.prepare (spec);
    waveshaper.reset();
    delayL.reset(); delayR.reset();
    {
        juce::dsp::ProcessSpec specMono { sampleRate, (juce::uint32) samplesPerBlock, 1 };
        delayL.prepare (specMono);
        delayR.prepare (specMono);
    }
    fxPrepared = true;
    preparedChannels = spec.numChannels;
}

void VoiceProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    // Generate raw sound directly into the provided buffer.
    buffer.clear();
    renderBlock(buffer, midi);

    // No logging on audio thread

    // Load all parameters at the top
    const float cutoff        = apvts.getRawParameterValue("filterCutoff")    ? apvts.getRawParameterValue("filterCutoff")->load()    : 20000.0f;
    const float resonance     = apvts.getRawParameterValue("filterResonance") ? apvts.getRawParameterValue("filterResonance")->load() : 1.0f;
    const float chorusRate    = apvts.getRawParameterValue("chorusRate")      ? apvts.getRawParameterValue("chorusRate")->load()      : 1.0f;
    const float chorusDepth   = apvts.getRawParameterValue("chorusDepth")     ? apvts.getRawParameterValue("chorusDepth")->load()     : 0.25f;
    const float chorusMix     = apvts.getRawParameterValue("chorusMix")       ? apvts.getRawParameterValue("chorusMix")->load()       : 0.5f;
    const float phaserRate    = apvts.getRawParameterValue("phaserRate")      ? apvts.getRawParameterValue("phaserRate")->load()      : 0.5f;
    const float phaserDepth   = apvts.getRawParameterValue("phaserDepth")     ? apvts.getRawParameterValue("phaserDepth")->load()     : 0.5f;
    const float phaserCentre  = apvts.getRawParameterValue("phaserCentre")    ? apvts.getRawParameterValue("phaserCentre")->load()    : 1000.0f;
    const float phaserFB      = apvts.getRawParameterValue("phaserFeedback")  ? apvts.getRawParameterValue("phaserFeedback")->load()  : 0.0f;
    const float phaserMix     = apvts.getRawParameterValue("phaserMix")       ? apvts.getRawParameterValue("phaserMix")->load()       : 0.0f;
    const float revRoom       = apvts.getRawParameterValue("reverbRoom")      ? apvts.getRawParameterValue("reverbRoom")->load()      : 0.0f;
    const float revDamp       = apvts.getRawParameterValue("reverbDamp")      ? apvts.getRawParameterValue("reverbDamp")->load()      : 0.5f;
    const float revWidth      = apvts.getRawParameterValue("reverbWidth")     ? apvts.getRawParameterValue("reverbWidth")->load()     : 1.0f;
    const float revMix        = apvts.getRawParameterValue("reverbMix")       ? apvts.getRawParameterValue("reverbMix")->load()       : 0.0f;
    const float delayMs       = apvts.getRawParameterValue("delayTimeMs")     ? apvts.getRawParameterValue("delayTimeMs")->load()     : 0.0f;
    const float delayFB       = apvts.getRawParameterValue("delayFeedback")   ? apvts.getRawParameterValue("delayFeedback")->load()   : 0.0f;
    const float delayMix      = apvts.getRawParameterValue("delayMix")        ? apvts.getRawParameterValue("delayMix")->load()        : 0.0f;
    const float compThresh    = apvts.getRawParameterValue("compThreshold")   ? apvts.getRawParameterValue("compThreshold")->load()   : 0.0f;
    const float compRatio     = apvts.getRawParameterValue("compRatio")       ? apvts.getRawParameterValue("compRatio")->load()       : 1.0f;
    const float compAttack    = apvts.getRawParameterValue("compAttackMs")    ? apvts.getRawParameterValue("compAttackMs")->load()    : 10.0f;
    const float compRelease   = apvts.getRawParameterValue("compReleaseMs")   ? apvts.getRawParameterValue("compReleaseMs")->load()   : 100.0f;
    const float compMakeup    = apvts.getRawParameterValue("compMakeup")      ? apvts.getRawParameterValue("compMakeup")->load()      : 0.0f;
    const float limitThresh   = apvts.getRawParameterValue("limitThreshold")  ? apvts.getRawParameterValue("limitThreshold")->load()  : 0.0f;
    const float limitRelease  = apvts.getRawParameterValue("limitReleaseMs")  ? apvts.getRawParameterValue("limitReleaseMs")->load()  : 10.0f;
    const float drive         = apvts.getRawParameterValue("driveAmount")     ? apvts.getRawParameterValue("driveAmount")->load()     : 0.0f;
    const float driveMix      = apvts.getRawParameterValue("driveMix")        ? apvts.getRawParameterValue("driveMix")->load()        : 0.0f;
    const float gateThresh    = apvts.getRawParameterValue("gateThreshold")   ? apvts.getRawParameterValue("gateThreshold")->load()   : -100.0f;
    const float gateAttack    = apvts.getRawParameterValue("gateAttackMs")    ? apvts.getRawParameterValue("gateAttackMs")->load()    : 1.0f;
    const float gateRelease   = apvts.getRawParameterValue("gateReleaseMs")   ? apvts.getRawParameterValue("gateReleaseMs")->load()   : 50.0f;

    // --- 2. Process FX: Filter then Chorus ---
    // Guard against unprepared FX or channel mismatch
    juce::dsp::AudioBlock<float> block (buffer);
    if (fxPrepared && preparedChannels > 0 && block.getNumChannels() > 0 && block.getNumChannels() == preparedChannels)
    {
        juce::dsp::ProcessContextReplacing<float> context (block);

        // Apply Filter only if non-neutral
        if (cutoff < 19900.0f || resonance > 1.0f)
        {
            filter.setCutoffFrequency (juce::jlimit (20.0f, 20000.0f, cutoff));
            filter.setResonance       (juce::jlimit (0.1f, 20.0f,   resonance));
            filter.process (context);
        }

        // Apply Chorus only if it has depth
        if (chorusDepth > 0.001f)
        {
            chorus.setRate  (juce::jlimit (0.05f, 5.0f, chorusRate));
            chorus.setDepth (juce::jlimit (0.0f, 1.0f,  chorusDepth));
            chorus.setMix   (juce::jlimit (0.0f, 1.0f,  chorusMix));
            chorus.process (context);
        }

        // Phaser
        if (phaserDepth > 0.001f || std::abs (phaserFB) > 0.001f)
        {
            phaser.setRate (juce::jlimit (0.01f, 10.0f, phaserRate));
            phaser.setDepth (juce::jlimit (0.0f, 1.0f, phaserDepth));
            phaser.setCentreFrequency (juce::jlimit (20.0f, 20000.0f, phaserCentre));
            phaser.setFeedback (juce::jlimit (-0.99f, 0.99f, phaserFB));
            if (phaserMix > 0.0f)
            {
                tempBuffer.makeCopyOf (buffer, true);
                juce::dsp::AudioBlock<float> tmp (tempBuffer);
                juce::dsp::ProcessContextReplacing<float> ctx (tmp);
                phaser.process (ctx);
                const float dry = 1.0f - phaserMix;
                const float wet = phaserMix;
                for (int ch = 0; ch < buffer.getNumChannels(); ++ch)
                    buffer.addFrom (ch, 0, tempBuffer, ch, 0, buffer.getNumSamples(), wet - dry);
                buffer.applyGain (dry);
            }
            else
            {
                phaser.process (context);
            }
        }

        // Delay (simple stereo): process using dsp::DelayLine processSample to avoid state issues
        if (delayMix > 0.0f && delayMs > 0.0f)
        {
            const float maxDelaySamples = 4.0f * (float) currentSampleRate; // 4s safety
            const float delaySamples = juce::jlimit (1.0f, maxDelaySamples, delayMs * (float) currentSampleRate * 0.001f);
            const float fb = juce::jlimit (0.0f, 0.95f, delayFB);

            delayL.setDelay (delaySamples);
            delayR.setDelay (delaySamples);
            auto* l = buffer.getWritePointer (0);
            auto* r = buffer.getNumChannels() > 1 ? buffer.getWritePointer (1) : l;

            const float dry = 1.0f - delayMix;
            const float wet = delayMix;
            for (int i = 0; i < buffer.getNumSamples(); ++i)
            {
                const float yl = delayL.popSample (0);
                const float yr = delayR.popSample (0);
                const float dlIn = juce::jlimit (-1.0f, 1.0f, l[i] + yl * fb);
                const float drIn = juce::jlimit (-1.0f, 1.0f, r[i] + yr * fb);
                delayL.pushSample (0, dlIn);
                delayR.pushSample (0, drIn);
                l[i] = l[i] * dry + yl * wet;
                r[i] = r[i] * dry + yr * wet;
            }
        }

        // Reverb
        if (revMix > 0.0f)
        {
            juce::dsp::Reverb::Parameters rp;
            rp.roomSize = juce::jlimit (0.0f, 1.0f, revRoom);
            rp.damping  = juce::jlimit (0.0f, 1.0f, revDamp);
            rp.width    = juce::jlimit (0.0f, 1.0f, revWidth);
            rp.wetLevel = juce::jlimit (0.0f, 1.0f, revMix);
            rp.dryLevel = 1.0f - rp.wetLevel;
            reverb.setParameters (rp);
            reverb.process (context);
        }

        // Drive (tanh) with dry/wet
        if (drive > 0.001f)
        {
            const float k = juce::jlimit (0.0f, 10.0f, drive) * 5.0f;
            tempBuffer.makeCopyOf (buffer, true);
            for (int ch = 0; ch < tempBuffer.getNumChannels(); ++ch)
            {
                auto* d = tempBuffer.getWritePointer (ch);
                for (int i = 0; i < tempBuffer.getNumSamples(); ++i)
                    d[i] = std::tanh (k * d[i]);
            }
            const float dry = juce::jlimit (0.0f, 1.0f, 1.0f - driveMix);
            const float wet = juce::jlimit (0.0f, 1.0f, driveMix);
            buffer.applyGain (dry);
            for (int ch = 0; ch < buffer.getNumChannels(); ++ch)
                buffer.addFrom (ch, 0, tempBuffer, ch, 0, buffer.getNumSamples(), wet);
        }

        // Compressor
        if (compRatio > 1.0f)
        {
            compressor.setThreshold (juce::jlimit (-60.0f, 0.0f, compThresh));
            compressor.setRatio (juce::jmax (1.0f, compRatio));
            compressor.setAttack (juce::jlimit (0.1f, 200.0f, compAttack));
            compressor.setRelease (juce::jlimit (5.0f, 1000.0f, compRelease));
            juce::dsp::AudioBlock<float> b (buffer);
            juce::dsp::ProcessContextReplacing<float> c (b);
            compressor.process (c);
            if (std::abs (compMakeup) > 0.001f)
                buffer.applyGain (juce::Decibels::decibelsToGain (compMakeup));
        }

        // Limiter
        if (limitThresh < 0.0f)
        {
            limiter.setThreshold (juce::jlimit (-20.0f, 0.0f, limitThresh));
            limiter.setRelease (juce::jlimit (1.0f, 200.0f, limitRelease));
            juce::dsp::AudioBlock<float> b (buffer);
            juce::dsp::ProcessContextReplacing<float> c (b);
            limiter.process (c);
        }

        // Simple noise gate (post FX, pre gain) using envelope follower against dB threshold
        if (gateThresh > -90.0f)
        {
            const float thrLin = juce::Decibels::decibelsToGain (gateThresh);
            const float atk = juce::jlimit (0.001f, 0.5f, gateAttack * 0.001f);
            const float rel = juce::jlimit (0.001f, 2.0f, gateRelease * 0.001f);
            auto* l = buffer.getWritePointer (0);
            auto* r = buffer.getNumChannels() > 1 ? buffer.getWritePointer (1) : l;
            for (int i = 0; i < buffer.getNumSamples(); ++i)
            {
                const float mag = std::max (std::abs (l[i]), std::abs (r[i]));
                const float target = (mag >= thrLin) ? 1.0f : 0.0f;
                gateEnvL += (target - gateEnvL) * (target > gateEnvL ? atk : rel);
                gateEnvR = gateEnvL;
                l[i] *= gateEnvL;
                r[i] *= gateEnvR;
            }
        }
    }

    // --- Apply final Gain and Pan. ---
    const float gain = apvts.getRawParameterValue("gain") ? apvts.getRawParameterValue("gain")->load() : 0.7f;
    const float pan  = apvts.getRawParameterValue("pan")  ? apvts.getRawParameterValue("pan")->load()  : 0.0f;

    // Calculate left and right channel multipliers based on pan law
    const float panL = std::cos((pan + 1.0f) * juce::MathConstants<float>::pi * 0.25f);
    const float panR = std::sin((pan + 1.0f) * juce::MathConstants<float>::pi * 0.25f);

    // Apply the master gain and the pan law separately for clarity and correctness.
    // First, apply the overall gain to all channels.
    buffer.applyGain(gain);

    // Then, apply the panning multipliers to their respective channels.
    buffer.applyGain(0, 0, buffer.getNumSamples(), panL);
    if (buffer.getNumChannels() > 1)
        buffer.applyGain(1, 0, buffer.getNumSamples(), panR);

    // Release diagnostics: append once in a while when silent
    {
        static int diagCounter = 0;
        if ((++diagCounter % 600) == 0)
        {
            const float mag = buffer.getMagnitude (0, buffer.getNumSamples());
            if (mag < 1.0e-6f)
            {
                juce::Logger::writeToLog ("[VoiceProcessor] silent block, gain=" + juce::String (gain) +
                                          " pan=" + juce::String (pan) +
                                          " ch=" + juce::String (buffer.getNumChannels()));
            }
        }
    }
}

juce::AudioProcessorValueTreeState::ParameterLayout VoiceProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    // Core Voice Params
    params.push_back(std::make_unique<juce::AudioParameterFloat>("gain", "Gain", 0.0f, 1.0f, 0.7f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("pan", "Pan", -1.0f, 1.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("frequency", "Frequency", 20.0f, 20000.0f, 440.0f));

    // --- FX PARAMS ---
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "filterCutoff", "Filter Cutoff",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 20000.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "filterResonance", "Filter Resonance",
        1.0f, 20.0f, 1.0f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "chorusRate", "Chorus Rate",
        0.1f, 10.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "chorusDepth", "Chorus Depth",
        0.0f, 1.0f, 0.25f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "chorusMix", "Chorus Mix",
        0.0f, 1.0f, 0.5f));

    // Phaser
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "phaserRate", "Phaser Rate",
        0.01f, 10.0f, 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "phaserDepth", "Phaser Depth",
        0.0f, 1.0f, 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "phaserCentre", "Phaser Centre",
        20.0f, 20000.0f, 1000.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "phaserFeedback", "Phaser Feedback",
        -0.99f, 0.99f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "phaserMix", "Phaser Mix",
        0.0f, 1.0f, 0.0f));

    // Reverb
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "reverbRoom", "Reverb Room",
        0.0f, 1.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "reverbDamp", "Reverb Damping",
        0.0f, 1.0f, 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "reverbWidth", "Reverb Width",
        0.0f, 1.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "reverbMix", "Reverb Mix",
        0.0f, 1.0f, 0.0f));

    // Delay
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "delayTimeMs", "Delay Time (ms)",
        1.0f, 2000.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "delayFeedback", "Delay Feedback",
        0.0f, 0.95f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "delayMix", "Delay Mix",
        0.0f, 1.0f, 0.0f));

    // Compressor
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "compThreshold", "Comp Threshold (dB)",
        -60.0f, 0.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "compRatio", "Comp Ratio",
        1.0f, 20.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "compAttackMs", "Comp Attack (ms)",
        0.1f, 200.0f, 10.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "compReleaseMs", "Comp Release (ms)",
        5.0f, 1000.0f, 100.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "compMakeup", "Comp Makeup (dB)",
        -12.0f, 12.0f, 0.0f));

    // Limiter
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "limitThreshold", "Limiter Threshold (dB)",
        -20.0f, 0.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "limitReleaseMs", "Limiter Release (ms)",
        1.0f, 200.0f, 10.0f));

    // Distortion / Drive
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "driveAmount", "Drive Amount",
        0.0f, 2.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "driveMix", "Drive Mix",
        0.0f, 1.0f, 0.0f));

    // Time/Pitch
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "timeStretchRatio", "Time Stretch Ratio",
        0.25f, 6.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "pitchSemitones", "Pitch Shift (Semitones)",
        -24.0f, 24.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "pitchRatio", "Pitch Ratio",
        0.5f, 2.0f, 1.0f));

    // Noise Gate
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gateThreshold", "Gate Threshold (dB)",
        -80.0f, -20.0f, -100.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gateAttackMs", "Gate Attack (ms)",
        0.1f, 50.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gateReleaseMs", "Gate Release (ms)",
        5.0f, 500.0f, 50.0f));

    return { params.begin(), params.end() };
}

================================================================================
FILE: juce\Source\audio\graph\VoiceProcessor.h
================================================================================


#pragma once
#include <juce_audio_processors/juce_audio_processors.h>
#include <juce_dsp/juce_dsp.h>

class VoiceProcessor : public juce::AudioProcessor
{
public:
    VoiceProcessor();
    ~VoiceProcessor() override = default;

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override final; // Final - cannot be overridden
    void releaseResources() override {}

    // Pure virtual method for subclasses to implement sound generation
    virtual void renderBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) = 0;

    const juce::String getName() const override { return "VoiceProcessor"; }
    bool isBusesLayoutSupported (const BusesLayout& layouts) const override
    {
        // Allow layouts where the input and output channel sets match (common for effects)
        // or where there is no input (for pure generators).
        if (layouts.getMainInputChannelSet() == layouts.getMainOutputChannelSet())
            return true;
            
        if (layouts.getMainInputChannelSet().isDisabled() && (layouts.getMainOutputChannelSet().size() == 1 || layouts.getMainOutputChannelSet().size() == 2))
            return true;
            
        return false;
    }
    // Implement all other necessary pure virtuals with empty bodies
    bool acceptsMidi() const override { return false; }
    bool producesMidi() const override { return false; }
    double getTailLengthSeconds() const override { return 0.0; }
    juce::AudioProcessorEditor* createEditor() override { return nullptr; }
    bool hasEditor() const override { return false; }
    int getNumPrograms() override { return 1; }
    int getCurrentProgram() override { return 0; }
    void setCurrentProgram(int) override {}
    const juce::String getProgramName(int) override { return ""; }
    void changeProgramName(int, const juce::String&) override {}
    void getStateInformation(juce::MemoryBlock&) override {}
    void setStateInformation(const void*, int) override {}

    juce::AudioProcessorValueTreeState& getAPVTS() { return apvts; }
    juce::uint64 uniqueId { 0 };

protected:
    juce::AudioProcessorValueTreeState apvts;

private:
    juce::dsp::StateVariableTPTFilter<float> filter;
    juce::dsp::Chorus<float>                 chorus;
    juce::dsp::Phaser<float>                 phaser;
    juce::dsp::Reverb                        reverb;
    juce::dsp::Compressor<float>             compressor;
    juce::dsp::Limiter<float>                limiter;
    juce::dsp::WaveShaper<float>             waveshaper;

    using DelayLine = juce::dsp::DelayLine<float, juce::dsp::DelayLineInterpolationTypes::Linear>;
    DelayLine                                   delayL { 192000 }, delayR { 192000 }; // up to ~2s @96k

    float gateEnvL { 1.0f }, gateEnvR { 1.0f };
    double currentSampleRate { 48000.0 };
    bool fxPrepared { false };
    juce::uint32 preparedChannels { 0 };
    juce::AudioBuffer<float>                 tempBuffer;
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(VoiceProcessor)
};


================================================================================
FILE: juce\Source\audio\AudioEngine.h
================================================================================


#pragma once

#include <juce_audio_processors/juce_audio_processors.h>
#include <juce_audio_utils/juce_audio_utils.h>
#include <juce_core/juce_core.h>
#include "assets/SampleBank.h"
#include "graph/VoiceProcessor.h"
#include "fx/GainProcessor.h"
#include "voices/SampleVoiceProcessor.h"
#include "../ipc/CommandBus.h"
#include "../ipc/IpcServer.h"
#include "../ipc/OscClient.h"
#include "../ui/DebugInfo.h"

class AudioEngine : public juce::AudioSource, private juce::Timer
{
public:
    AudioEngine(juce::AudioDeviceManager& adm);
    ~AudioEngine() override;

    void prepareToPlay (int samplesPerBlockExpected, double sampleRate) override;
    void getNextAudioBlock (const juce::AudioSourceChannelInfo& bufferToFill) override;
    void releaseResources() override;

    VisualiserState getVisualiserState() const;
    void setMasterGain (float newGain);
    void dumpCurrentStateToLog();
    
    // Access to command bus for UI communication
    CommandBus& getCommandBus() { return commandBus; }
    
    // Get active voices info for UI
    struct VoiceInfo {
        juce::uint64 voiceId;
        juce::String voiceType;
        juce::String displayName;
    };
    juce::Array<VoiceInfo> getActiveVoicesInfo() const;
    float getVoiceParameterValue(juce::uint64 voiceId, const juce::String& paramName) const;
    
    // Get available audio input channel names from the current device
    juce::StringArray getAvailableInputChannelNames() const;
    
    // Get the name of the current input device
    juce::String getCurrentInputDeviceName() const;
    
    // Get list of all available input devices
    juce::StringArray getAvailableInputDeviceNames() const;
    
    // Change the global input device for the application
    void setInputDevice(const juce::String& deviceName);

    // --- Test-harness direct control API (bypasses OSC/CommandBus) ---
    // Create a voice directly and wire it to the master gain node. Returns new voiceId (or 0 on failure).
    juce::uint64 test_createVoice (const juce::String& voiceType);
    // Update an APVTS-mapped parameter on a specific voice (e.g., "gain", "pan").
    void test_updateVoiceParameter (juce::uint64 voiceId, const juce::String& paramId, float value);
    // Destroy a voice immediately.
    void test_destroyVoice (juce::uint64 voiceId);

private:
    void timerCallback() override;

    void handleCreateVoice (const Command& cmd);
    void handleDestroyVoice (juce::uint64 voiceId);
    void handleUpdateParam (const Command& cmd);
    void handleListenerUpdate (float x, float y, float radius, float nearRatio);
    void sendFullInfoSnapshot();
    void resetVoiceParamsToDefaults (VoiceProcessor* v);

    juce::AudioProcessorGraph::Node::Ptr connectAndAddVoice (std::unique_ptr<juce::AudioProcessor> processor);

    juce::AudioDeviceManager& deviceManager;
    CommandBus commandBus;
    IpcServer oscServer;
    OscClient oscClient;
    SampleBank sampleBank;

    using Node = juce::AudioProcessorGraph::Node;
    std::unique_ptr<juce::AudioProcessorGraph> mainGraph;
    Node::Ptr audioOutputNode;
    Node::Ptr masterGainNode;
    std::map<juce::uint64, Node::Ptr> activeVoices;
    std::map<juce::uint64, std::shared_ptr<SampleBank::Sample>> activeSampleRefs;

    // Runtime format
    double lastSampleRate { 0.0 };
    int lastBlockSize { 0 };
    bool chaosModeEnabled { false };

    // Lightweight logger and stats for the harness UI
    mutable juce::CriticalSection logLock;
    juce::StringArray logQueue;
    std::atomic<float> lastOutputPeak { 0.0f };

    // Reusable realtime scratch buffers to avoid per-callback allocations
    juce::AudioBuffer<float> tmpGraphBuffer;
    juce::AudioBuffer<float> tmpVoiceBuffer;

public:
    void appendLog (const juce::String& msg)
    {
        const juce::ScopedLock sl (logLock);
        logQueue.add ("[" + juce::Time::getCurrentTime().toString (true, true) + "] " + msg);
    }

    juce::StringArray drainLogs()
    {
        const juce::ScopedLock sl (logLock);
        juce::StringArray out;
        out.swapWith (logQueue);
        return out;
    }

    struct RuntimeStats { double sampleRate; int blockSize; int nodeCount; float masterGain; float lastPeak; int voiceCount; };
    RuntimeStats getRuntimeStats() const
    {
        RuntimeStats rs{};
        rs.sampleRate = lastSampleRate;
        rs.blockSize = lastBlockSize;
        rs.nodeCount = (int) (mainGraph ? mainGraph->getNodes().size() : 0);
        rs.lastPeak = lastOutputPeak.load();
        rs.voiceCount = (int) activeVoices.size();
        float g = 1.0f;
        if (masterGainNode != nullptr)
        {
            if (auto* gp = dynamic_cast<GainProcessor*> (masterGainNode->getProcessor()))
            {
                if (auto* p = gp->getAPVTS().getRawParameterValue ("gain"))
                    g = p->load();
            }
        }
        rs.masterGain = g;
        return rs;
    }

    float listenerX { 0.0f }, listenerY { 0.0f }, listenerRadius { 300.0f }, listenerNear { 0.12f };
    double clockOffsetMs { 0.0 };
    bool clockSynced { false };

    mutable juce::CriticalSection visualiserLock;
    VisualiserState visualiserState;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (AudioEngine)
}; 


================================================================================
FILE: juce\Source\audio\AudioEngine.cpp
================================================================================


#include "AudioEngine.h"
#include "voices/SampleVoiceProcessor.h"
#include "voices/SynthVoiceProcessor.h"
#include "voices/NoiseVoiceProcessor.h"
#include "graph/ModularSynthProcessor.h"
#include "voices/ModularVoice.h"
#include "fx/GainProcessor.h"
#include "../ipc/OscConfig.h"

AudioEngine::AudioEngine(juce::AudioDeviceManager& adm)
    : deviceManager(adm), oscServer(commandBus)
{
    mainGraph = std::make_unique<juce::AudioProcessorGraph>();

    // Ensure the main graph is configured for stereo in/out
    {
        juce::AudioProcessor::BusesLayout layout {
            juce::AudioChannelSet::stereo(),
            juce::AudioChannelSet::stereo()
        };
        if (! mainGraph->setBusesLayout (layout))
        {
            // Fallback to play-config details if layout setting is rejected
            mainGraph->setPlayConfigDetails (2, 2, 48000.0, 512);
        }
    }
    audioOutputNode = mainGraph->addNode (std::make_unique<juce::AudioProcessorGraph::AudioGraphIOProcessor>(juce::AudioProcessorGraph::AudioGraphIOProcessor::audioOutputNode));
    
    // Insert master gain node and route graph: Voices -> MasterGain -> Output
    auto master = std::make_unique<GainProcessor>();
    masterGainNode = mainGraph->addNode (std::move (master));
    {
        using NodeAndChannel = juce::AudioProcessorGraph::NodeAndChannel;
        juce::AudioProcessorGraph::Connection cL { NodeAndChannel{ masterGainNode->nodeID, 0 }, NodeAndChannel{ audioOutputNode->nodeID, 0 } };
        juce::AudioProcessorGraph::Connection cR { NodeAndChannel{ masterGainNode->nodeID, 1 }, NodeAndChannel{ audioOutputNode->nodeID, 1 } };
        mainGraph->addConnection (cL);
        mainGraph->addConnection (cR);

        // Constant tone removed
    }

    // Bind OSC server (Python -> JUCE)
    oscServer.bind (OscConfig::kJuceServerPort);
    // Connect OSC client (JUCE -> Python)
    oscClient.connect (OscConfig::kPythonHost, OscConfig::kPythonPort);

    // Kick main logic loop
    startTimerHz (120);
}
static void logGraphTopology (juce::AudioProcessorGraph* g)
{
    if (g == nullptr) return;
    juce::Logger::writeToLog ("--- MAIN GRAPH TOPOLOGY ---");
    auto nodes = g->getNodes();
    for (auto* n : nodes)
    {
        if (n == nullptr) continue;
        auto* p = n->getProcessor();
        const int ins  = p ? p->getTotalNumInputChannels()  : 0;
        const int outs = p ? p->getTotalNumOutputChannels() : 0;
        juce::Logger::writeToLog ("  Node: id=" + juce::String ((int) n->nodeID.uid)
            + " name='" + (p ? p->getName() : juce::String("<null>")) + "' ins=" + juce::String (ins)
            + " outs=" + juce::String (outs));
    }
    auto conns = g->getConnections();
    for (auto& c : conns)
    {
        juce::Logger::writeToLog ("  Conn: [" + juce::String ((int)c.source.nodeID.uid) + ":" + juce::String (c.source.channelIndex)
            + "] -> [" + juce::String ((int)c.destination.nodeID.uid) + ":" + juce::String (c.destination.channelIndex) + "]");
    }
    juce::Logger::writeToLog ("---------------------------");
}

AudioEngine::~AudioEngine()
{
    stopTimer();
}

void AudioEngine::prepareToPlay (int samplesPerBlockExpected, double sampleRate)
{
    lastSampleRate = sampleRate;
    lastBlockSize = samplesPerBlockExpected;
    // Ensure the graph I/O configuration matches the device: 2 inputs, 2 outputs
    if (mainGraph)
    {
        mainGraph->setPlayConfigDetails (2, 2, sampleRate, samplesPerBlockExpected);
        // Do NOT override individual node play configs here; the graph manages node formats.
    }
    mainGraph->prepareToPlay (sampleRate, samplesPerBlockExpected);
    appendLog ("Engine prepared: sr=" + juce::String (sampleRate) + " block=" + juce::String (samplesPerBlockExpected));

    // DIAGNOSTIC: dump current output device and master gain
    auto* dev = deviceManager.getCurrentAudioDevice();
    appendLog ("Device: out='" + (dev ? dev->getName() : juce::String("<none>")) + "' sr="
               + juce::String (dev ? dev->getCurrentSampleRate() : 0.0)
               + " bs=" + juce::String (dev ? dev->getCurrentBufferSizeSamples() : 0));
}

void AudioEngine::sendFullInfoSnapshot()
{
    // Enumerate devices and send info to Python
    juce::AudioDeviceManager::AudioDeviceSetup setup;
    deviceManager.getAudioDeviceSetup(setup);
    juce::StringArray ins, outs;
    if (auto* t = deviceManager.getAvailableDeviceTypes().getFirst())
    {
        t->scanForDevices();
        ins = t->getDeviceNames(true);
        outs = t->getDeviceNames(false);
    }
    DBG ("AudioEngine::sendFullInfoSnapshot - sending devices and settings");
    oscClient.sendDeviceList ("input", ins);
    oscClient.sendDeviceList ("output", outs);
    // MIDI inputs
    {
        juce::StringArray midiIns;
        auto midiDevs = juce::MidiInput::getAvailableDevices();
        for (auto& d : midiDevs) midiIns.add (d.name);
        oscClient.sendMidiDeviceList (midiIns);
    }
    const float sr = (float) (deviceManager.getCurrentAudioDevice() ? deviceManager.getCurrentAudioDevice()->getCurrentSampleRate() : 0.0f);
    const int bs  = (deviceManager.getCurrentAudioDevice() ? deviceManager.getCurrentAudioDevice()->getCurrentBufferSizeSamples() : 0);
    oscClient.sendCurrentSettings (setup.inputDeviceName, setup.outputDeviceName, sr, bs);
    // Send latest master gain if available
    if (masterGainNode != nullptr)
    {
        float g = 1.0f;
        if (auto* gp = dynamic_cast<GainProcessor*> (masterGainNode->getProcessor()))
        {
            if (auto* p = gp->getAPVTS().getRawParameterValue ("gain"))
                g = p->load();
        }
        oscClient.sendMasterGain (g);
    }
}

void AudioEngine::releaseResources()
{
    if (mainGraph) mainGraph->releaseResources();
}

juce::AudioProcessorGraph::Node::Ptr AudioEngine::connectAndAddVoice (std::unique_ptr<juce::AudioProcessor> processor)
{
    if (! mainGraph)
        return {};

    auto node = mainGraph->addNode (std::move (processor));
    using NodeAndChannel = juce::AudioProcessorGraph::NodeAndChannel;
    
    // Ensure bus layout on the voice processor is active and matches the graph's 0-in/2-out
    if (auto* vp = node->getProcessor())
    {
        const double sr = lastSampleRate > 0.0 ? lastSampleRate : 48000.0;
        const int    bs = lastBlockSize  > 0   ? lastBlockSize  : 512;
        vp->enableAllBuses();
        vp->setPlayConfigDetails (0, 2, sr, bs);
        vp->prepareToPlay (sr, bs);
    }

    // Connect the voice's audio output to the master gain, with diagnostics on failure
    juce::AudioProcessorGraph::Connection cL { NodeAndChannel{ node->nodeID, 0 }, NodeAndChannel{ masterGainNode->nodeID, 0 } };
    juce::AudioProcessorGraph::Connection cR { NodeAndChannel{ node->nodeID, 1 }, NodeAndChannel{ masterGainNode->nodeID, 1 } };
    const bool okL = mainGraph->addConnection (cL);
    const bool okR = mainGraph->addConnection (cR);
    if (!okL || !okR)
    {
        auto* src = node->getProcessor();
        auto* dst = masterGainNode ? masterGainNode->getProcessor() : nullptr;
        appendLog ("[ERR] Failed to connect voice->master: okL=" + juce::String (okL ? 1 : 0) +
                   " okR=" + juce::String (okR ? 1 : 0) +
                   " srcOutCh=" + juce::String (src ? src->getTotalNumOutputChannels() : -1) +
                   " dstInCh=" + juce::String (dst ? dst->getTotalNumInputChannels() : -1));
    }

    // Ensure the processing topology is updated after adding a node and connections
    mainGraph->rebuild();

    // Dump and also append summary for diagnostics
    logGraphTopology (mainGraph.get());
    appendLog ("Graph after add: nodes=" + juce::String ((int) mainGraph->getNodes().size()) +
               " conns=" + juce::String ((int) mainGraph->getConnections().size()));
    
    return node;
}

void AudioEngine::getNextAudioBlock (const juce::AudioSourceChannelInfo& bufferToFill)
{
    if (bufferToFill.buffer == nullptr)
        return;

    const int numCh = bufferToFill.buffer->getNumChannels();
    const int start = bufferToFill.startSample;
    const int num   = bufferToFill.numSamples;
    if (numCh <= 0 || num <= 0)
        return;

    // Clear just the region we're responsible for and process
    bufferToFill.buffer->clear (start, num);
    // Render graph into scratch buffer and copy back into the requested region
    // Build a zero-copy view into the requested region and process directly
    juce::HeapBlock<float*> chans (numCh);
    for (int ch = 0; ch < numCh; ++ch)
        chans[ch] = bufferToFill.buffer->getWritePointer (ch) + start;
    juce::AudioBuffer<float> view (chans.getData(), numCh, num);
    juce::MidiBuffer midi;
    mainGraph->processBlock (view, midi);
    // Per-callback quick peek at level before master output
    if (masterGainNode)
    {
        auto* proc = masterGainNode->getProcessor();
        juce::ignoreUnused (proc); // reserved for future deeper probes
    }

    // DIAGNOSTIC: if silent, log once per second-ish (no safety tone injection)
    const float pk = bufferToFill.buffer->getMagnitude (start, num);
    lastOutputPeak.store (pk);
    static int silentCounter = 0;
    if (pk < 1.0e-6f && (++silentCounter % 120) == 0)
        appendLog ("WARN: Output magnitude near zero for recent callbacks");
}

void AudioEngine::timerCallback()
{
    // Drain commands
    for (int i = 0; i < 4096; ++i)
    {
        Command c; if (! commandBus.tryDequeue (c)) break;
        if (c.type == Command::Type::Create)          handleCreateVoice (c);
        else if (c.type == Command::Type::Destroy)    handleDestroyVoice (c.voiceId);
        else if (c.type == Command::Type::Update)     handleUpdateParam (c);
        else if (c.type == Command::Type::DebugDump)  dumpCurrentStateToLog();
        // ADD THIS ENTIRE NEW BLOCK:
        else if (c.type == Command::Type::LoadPreset)
        {
            // a. Find the target voice by its unique ID
            auto it = activeVoices.find(c.voiceId);
            if (it != activeVoices.end())
            {
                // b. Safely check if this voice is a ModularVoice wrapper
                if (auto* mv = dynamic_cast<ModularVoice*>(it->second->getProcessor()))
                {
                    if (auto* msp = mv->getModularSynth()) // Get the internal synth
                    {
                        // c. Convert the XML string to a MemoryBlock and load the state
                        juce::MemoryBlock mb(c.presetData.toRawUTF8(), c.presetData.getNumBytesAsUTF8());
                        msp->setStateInformation(mb.getData(), (int)mb.getSize());
                        appendLog("Loaded preset onto Modular Synth voice ID: " + juce::String((juce::int64)c.voiceId));
                    }
                }
            }
        }
        else if (c.type == Command::Type::LoadPatchState)
        {
            // Load a snapshot from the Snapshot Sequencer
            auto it = activeVoices.find(c.voiceId);
            if (it != activeVoices.end())
            {
                if (auto* mv = dynamic_cast<ModularVoice*>(it->second->getProcessor()))
                {
                    if (auto* msp = mv->getModularSynth())
                    {
                        // The patchState is already a MemoryBlock, ready to load
                        msp->setStateInformation(c.patchState.getData(), (int)c.patchState.getSize());
                        appendLog("[SnapshotSeq] Loaded patch state for voice ID: " + juce::String((juce::int64)c.voiceId) +
                                " (size: " + juce::String((int)c.patchState.getSize()) + " bytes)");
                    }
                }
            }
        }
        else if (c.type == Command::Type::ResetFx)
        {
            auto it = activeVoices.find(c.voiceId);
            if (it != activeVoices.end())
            {
                if (auto* vp = dynamic_cast<VoiceProcessor*>(it->second->getProcessor()))
                {
                    resetVoiceParamsToDefaults(vp);
                    appendLog("Reset FX for voice ID: " + juce::String((juce::int64)c.voiceId));
                }
            }
        }
        else if (c.type == Command::Type::RandomizePitch)
        {
            auto it = activeVoices.find(c.voiceId);
            if (it != activeVoices.end())
            {
                if (auto* vp = dynamic_cast<VoiceProcessor*>(it->second->getProcessor()))
                {
                    if (auto* p = vp->getAPVTS().getParameter("pitchSemitones"))
                    {
                        if (auto* r = dynamic_cast<juce::RangedAudioParameter*>(p))
                        {
                            float randomPitch = juce::Random::getSystemRandom().nextFloat() * 24.0f - 12.0f; // -12 to +12 semitones
                            r->setValueNotifyingHost(r->getNormalisableRange().convertTo0to1(randomPitch));
                            appendLog("Randomized pitch for voice ID: " + juce::String((juce::int64)c.voiceId) + " to " + juce::String(randomPitch) + " semitones");
                        }
                    }
                }
            }
        }
        else if (c.type == Command::Type::RandomizeTime)
        {
            auto it = activeVoices.find(c.voiceId);
            if (it != activeVoices.end())
            {
                if (auto* vp = dynamic_cast<VoiceProcessor*>(it->second->getProcessor()))
                {
                    if (auto* p = vp->getAPVTS().getParameter("timeStretchRatio"))
                    {
                        if (auto* r = dynamic_cast<juce::RangedAudioParameter*>(p))
                        {
                            float randomRatio = juce::Random::getSystemRandom().nextFloat() * 4.0f + 0.25f; // 0.25 to 4.25 ratio
                            r->setValueNotifyingHost(r->getNormalisableRange().convertTo0to1(randomRatio));
                            appendLog("Randomized time stretch for voice ID: " + juce::String((juce::int64)c.voiceId) + " to " + juce::String(randomRatio) + " ratio");
                        }
                    }
                }
            }
        }
        else if (c.type == Command::Type::SetChaosMode)
        {
            chaosModeEnabled = c.chaosModeEnabled;
            appendLog("Chaos mode " + juce::String(chaosModeEnabled ? "enabled" : "disabled"));
        }
    }

    // Chaos Mode: Periodically randomize parameters if enabled
    static int chaosCounter = 0;
    if (chaosModeEnabled && ++chaosCounter % 100 == 0) // Every 100 timer calls
    {
        if (!activeVoices.empty())
        {
            auto& rng = juce::Random::getSystemRandom();
            auto it = activeVoices.begin();
            std::advance(it, rng.nextInt((int)activeVoices.size()));
            
            if (auto* vp = dynamic_cast<VoiceProcessor*>(it->second->getProcessor()))
            {
                // Random parameter list
                juce::StringArray params = {"filterCutoff", "filterResonance", "chorusRate", "chorusDepth", 
                                           "phaserRate", "phaserDepth", "reverbRoom", "reverbDamp", 
                                           "delayTimeMs", "delayFeedback", "driveAmount"};
                
                juce::String paramName = params[rng.nextInt(params.size())];
                if (auto* p = vp->getAPVTS().getParameter(paramName))
                {
                    if (auto* r = dynamic_cast<juce::RangedAudioParameter*>(p))
                    {
                        float randomValue = rng.nextFloat(); // 0.0 to 1.0
                        r->setValueNotifyingHost(randomValue);
                    }
                }
            }
        }
    }

    // Bridge diagnostics to UI (minimal: just listener; voices left empty)
    {
        const juce::ScopedLock sl (visualiserLock);
        visualiserState.voices.clearQuick();
        visualiserState.listenerPosition = { listenerX, listenerY };
    }

    // CPU load reporting disabled to avoid repeated device manager init cost.
}

void AudioEngine::dumpCurrentStateToLog()
{
    juce::Logger::writeToLog ("--- JUCE STATE DUMP TRIGGERED ---");
    // Current audio device settings
    juce::AudioDeviceManager::AudioDeviceSetup setup;
    deviceManager.getAudioDeviceSetup(setup);
    auto* dev = deviceManager.getCurrentAudioDevice();
    const juce::String inName = setup.inputDeviceName;
    const juce::String outName = setup.outputDeviceName;
    const double sr = dev ? dev->getCurrentSampleRate() : 0.0;
    const int bs = dev ? dev->getCurrentBufferSizeSamples() : 0;
    juce::Logger::writeToLog ("[AUDIO] input='" + inName + "' output='" + outName + "' sr=" + juce::String (sr) + " bs=" + juce::String (bs));

    // Graph stats
    const int numNodes = (int) (mainGraph ? mainGraph->getNodes().size() : 0);
    juce::Logger::writeToLog ("[GRAPH] nodes=" + juce::String (numNodes));

    // Master gain param
    float masterGain = -1.0f;
    if (masterGainNode != nullptr)
    {
        if (auto* gp = dynamic_cast<GainProcessor*> (masterGainNode->getProcessor()))
        {
            if (auto* p = gp->getAPVTS().getRawParameterValue ("gain"))
                masterGain = p->load();
        }
    }
    juce::Logger::writeToLog ("[GRAPH] masterGainParam=" + juce::String (masterGain));

    // Voices (log minimal APVTS values)
    juce::Logger::writeToLog ("[VOICES] count=" + juce::String ((int) activeVoices.size()));
    for (auto& kv : activeVoices)
    {
        const juce::uint64 vid = kv.first;
        auto* proc = kv.second ? kv.second->getProcessor() : nullptr;
        float apGain = -1.0f, apPan = 0.0f, apFreq = 0.0f;
        if (auto* vp = dynamic_cast<VoiceProcessor*> (proc))
        {
            if (auto* pG = vp->getAPVTS().getRawParameterValue ("gain")) apGain = pG->load();
            if (auto* pP = vp->getAPVTS().getRawParameterValue ("pan"))  apPan  = pP->load();
            if (auto* pF = vp->getAPVTS().getRawParameterValue ("frequency")) apFreq = pF->load();
        }
        juce::Logger::writeToLog ("[VOICE] id=" + juce::String ((juce::int64) vid) +
                                   " gain=" + juce::String (apGain) +
                                   " pan=" + juce::String (apPan) +
                                   " freq=" + juce::String (apFreq));
    }
}

juce::Array<AudioEngine::VoiceInfo> AudioEngine::getActiveVoicesInfo() const
{
    juce::Array<VoiceInfo> result;
    
    for (auto& kv : activeVoices)
    {
        const juce::uint64 voiceId = kv.first;
        auto node = kv.second;
        if (!node) continue;
        
        auto* proc = node->getProcessor();
        if (!proc) continue;
        
        VoiceInfo info;
        info.voiceId = voiceId;
        
        // Determine voice type and display name
        if (dynamic_cast<SynthVoiceProcessor*>(proc))
        {
            info.voiceType = "Synth";
            info.displayName = "Synth Voice " + juce::String((juce::int64)voiceId);
        }
        else if (dynamic_cast<NoiseVoiceProcessor*>(proc))
        {
            info.voiceType = "Noise";
            info.displayName = "Noise Voice " + juce::String((juce::int64)voiceId);
        }
        else if (auto* sampleProc = dynamic_cast<SampleVoiceProcessor*>(proc))
        {
            info.voiceType = "Sample";
            info.displayName = "Sample: " + sampleProc->getSourceName();
        }
        else if (dynamic_cast<ModularVoice*>(proc))
        {
            info.voiceType = "Modular";
            info.displayName = "Modular Synth " + juce::String((juce::int64)voiceId);
        }
        else
        {
            info.voiceType = "Unknown";
            info.displayName = "Unknown Voice " + juce::String((juce::int64)voiceId);
        }
        
        result.add(info);
    }
    
    return result;
}

float AudioEngine::getVoiceParameterValue(juce::uint64 voiceId, const juce::String& paramName) const
{
    auto it = activeVoices.find(voiceId);
    if (it != activeVoices.end())
    {
        if (auto* vp = dynamic_cast<VoiceProcessor*>(it->second->getProcessor()))
        {
            if (auto* p = vp->getAPVTS().getParameter(paramName))
            {
                if (auto* r = dynamic_cast<juce::RangedAudioParameter*>(p))
                {
                    return r->getNormalisableRange().convertFrom0to1(p->getValue());
                }
            }
        }
    }
    return 0.0f; // Default value if parameter not found
}

juce::StringArray AudioEngine::getAvailableInputChannelNames() const
{
    if (auto* currentDevice = deviceManager.getCurrentAudioDevice())
    {
        return currentDevice->getInputChannelNames();
    }

    return {}; // Return empty array if no device
}

juce::String AudioEngine::getCurrentInputDeviceName() const
{
    if (auto* currentDevice = deviceManager.getCurrentAudioDevice())
    {
        return currentDevice->getName();
    }
    return "No Device";
}

juce::StringArray AudioEngine::getAvailableInputDeviceNames() const
{
    juce::StringArray names;
    // Get the first available device type (e.g., ASIO, CoreAudio, WASAPI)
    if (auto* deviceType = deviceManager.getAvailableDeviceTypes().getFirst())
    {
        deviceType->scanForDevices(); // Rescan to get the most up-to-date list
        names = deviceType->getDeviceNames(true); // 'true' for input devices
    }

    return names;
}

void AudioEngine::setInputDevice(const juce::String& deviceName)
{
    juce::AudioDeviceManager::AudioDeviceSetup setup;
    deviceManager.getAudioDeviceSetup(setup);

    if (setup.inputDeviceName != deviceName)
    {
        setup.inputDeviceName = deviceName;
        // This will restart the audio device with the new settings
        deviceManager.setAudioDeviceSetup(setup, true);
        appendLog("[AudioEngine] Changed input device to: " + deviceName);
    }
}

void AudioEngine::handleCreateVoice (const Command& cmd)
{
    if (!mainGraph) return;

    std::unique_ptr<VoiceProcessor> proc;
    // --- 1. Create the processor based on type ---
    if (cmd.voiceType.equalsIgnoreCase("synth")) {
        proc = std::make_unique<SynthVoiceProcessor>();
    } else if (cmd.voiceType.equalsIgnoreCase("noise")) {
        proc = std::make_unique<NoiseVoiceProcessor>();
    } else if (cmd.voiceType.equalsIgnoreCase("modular")) {
        proc = std::make_unique<ModularVoice>();
    } else if (cmd.voiceType.equalsIgnoreCase("sample")) {
        juce::File f(cmd.resourceName);
        auto smp = sampleBank.getOrLoad(f);
        if (!smp) {
            // FAILSAFE: Generate a 1-second sine wave if sample not found
            appendLog("WARNING: Sample not found: " + cmd.resourceName + " - generating sine wave failsafe");
            smp = sampleBank.generateSineWaveFailsafe(44100, 1.0); // 1 second at 44.1kHz
            if (!smp) {
                appendLog("ERROR: Failed to generate failsafe sample");
                return;
            }
        }
        auto sampleProc = std::make_unique<SampleVoiceProcessor>(smp);
        sampleProc->setSourceName(f.getFileName());
        sampleProc->setLooping(true); // Set looping by default
        activeSampleRefs[cmd.voiceId] = smp;
        proc = std::move(sampleProc);
    }

    if (proc == nullptr) {
        appendLog("ERROR: Unknown voice type for create command: " + cmd.voiceType);
        return;
    }

    // --- 2. Perform ALL necessary initialization steps BEFORE adding to the graph ---
    proc->uniqueId = cmd.voiceId;
    resetVoiceParamsToDefaults(proc.get());

    // CRITICAL FIX for "no sound": Set a non-zero default gain and centered pan.
    if (auto* p = proc->getAPVTS().getParameter("gain"))
        if (auto* r = dynamic_cast<juce::RangedAudioParameter*>(p))
            r->setValueNotifyingHost(r->getNormalisableRange().convertTo0to1(0.7f));
    
    if (auto* p = proc->getAPVTS().getParameter("pan"))
        if (auto* r = dynamic_cast<juce::RangedAudioParameter*>(p))
            r->setValueNotifyingHost(r->getNormalisableRange().convertTo0to1(0.0f));
    
    // --- 3. Add the fully prepared processor to the graph and connect it ---
    auto node = connectAndAddVoice(std::move(proc));
    // After the node is in the graph, prepare it with current runtime format
    if (node && node->getProcessor())
    {
        const double sr = lastSampleRate > 0.0 ? lastSampleRate : 48000.0;
        const int    bs = lastBlockSize  > 0   ? lastBlockSize  : 512;
        node->getProcessor()->setPlayConfigDetails (0, 2, sr, bs);
        node->getProcessor()->prepareToPlay (sr, bs);
    }
    activeVoices[cmd.voiceId] = node;

    // --- 4. MIDI connection is handled automatically in connectAndAddVoice ---
    
    // --- 5. Perform type-specific post-creation setup ---
    if (auto* mv = dynamic_cast<ModularVoice*>(node->getProcessor())) {
        if (auto* msp = mv->getModularSynth()) {
            auto vco = msp->addModule("VCO");
            auto out = msp->getOutputNodeID();
            
            // SIMPLER, BETTER DEFAULT PATCH: VCO directly to output (no VCA needed for basic sound)
            msp->connect(vco, 0, out, 0); // VCO -> Left Out
            msp->connect(vco, 0, out, 1); // VCO -> Right Out
            msp->commitChanges();
            
            appendLog("Created default modular patch: VCO -> Output (stereo)");
        }
    }

    appendLog("Successfully created voice '" + cmd.voiceType + "' with ID: " + juce::String((juce::int64)cmd.voiceId));
}

void AudioEngine::handleDestroyVoice (juce::uint64 voiceId)
{
    if (! mainGraph) return;
    auto it = activeVoices.find (voiceId);
    if (it == activeVoices.end()) return;
    auto node = it->second;
    mainGraph->removeNode (node->nodeID);
    activeVoices.erase (it);
    activeSampleRefs.erase (voiceId);
}

void AudioEngine::handleUpdateParam (const Command& cmd)
{
    // ADD THIS LINE:
    appendLog("[ENGINE LOG] Received UPDATE command for '" + cmd.paramName + "'.");
    
    if (cmd.voiceId == 0)
    {
        if (cmd.paramName == "listener.posX") listenerX = cmd.paramValue;
        else if (cmd.paramName == "listener.posY") listenerY = cmd.paramValue;
        else if (cmd.paramName == "listener.radius") listenerRadius = juce::jmax (0.0f, cmd.paramValue);
        else if (cmd.paramName == "listener.near") listenerNear = juce::jlimit (0.0f, 1.0f, cmd.paramValue);
        else if (cmd.paramName == "master.gain") setMasterGain (cmd.paramValue);
        else if (cmd.paramName == "device.set")
        {
            // cmd.voiceType packed as "type\nname"
            auto parts = juce::StringArray::fromLines (cmd.voiceType);
            if (parts.size() >= 2)
            {
                const juce::String kind = parts[0];
                const juce::String name = parts[1];
                juce::AudioDeviceManager::AudioDeviceSetup setup;
                deviceManager.getAudioDeviceSetup(setup);
                if (kind.equalsIgnoreCase ("input")) setup.inputDeviceName = name; else setup.outputDeviceName = name;
                deviceManager.setAudioDeviceSetup(setup, true);
                static OscClient client; client.connect ("127.0.0.1", 9002);
                const float sr = (float) (deviceManager.getCurrentAudioDevice() ? deviceManager.getCurrentAudioDevice()->getCurrentSampleRate() : 0.0);
                const int bs = (deviceManager.getCurrentAudioDevice() ? deviceManager.getCurrentAudioDevice()->getCurrentBufferSizeSamples() : 0);
                client.sendCurrentSettings (setup.inputDeviceName, setup.outputDeviceName, sr, bs);
            }
        }
        else if (cmd.paramName == "device.bufferSize")
        {
            const int newBS = juce::jmax (16, (int) std::round (cmd.paramValue));
            juce::AudioDeviceManager::AudioDeviceSetup setup;
            deviceManager.getAudioDeviceSetup(setup);
            setup.bufferSize = newBS;
            deviceManager.setAudioDeviceSetup(setup, true);
            static OscClient client; client.connect ("127.0.0.1", 9002);
            const float sr = (float) (deviceManager.getCurrentAudioDevice() ? deviceManager.getCurrentAudioDevice()->getCurrentSampleRate() : 0.0);
            const int bs  = (deviceManager.getCurrentAudioDevice() ? deviceManager.getCurrentAudioDevice()->getCurrentBufferSizeSamples() : 0);
            client.sendCurrentSettings (setup.inputDeviceName, setup.outputDeviceName, sr, bs);
        }
        else if (cmd.paramName == "engine.requestInfo")
        {
            sendFullInfoSnapshot();
        }
        return;
    }

    auto it = activeVoices.find (cmd.voiceId);
    if (it == activeVoices.end()) return;
    if (auto* vp = dynamic_cast<VoiceProcessor*> (it->second->getProcessor()))
    {
        // Fast-path engine switches for SampleVoiceProcessor (bypass APVTS latency)
        if (auto* svp = dynamic_cast<SampleVoiceProcessor*>(vp))
        {
            if (cmd.paramName == "engine")
            {
                const bool useNaive = (cmd.paramValue >= 0.5f);
                svp->setEngine(useNaive ? SampleVoiceProcessor::Engine::Naive
                                        : SampleVoiceProcessor::Engine::RubberBand);
                return;
            }
        }
        // APVTS-based updates only
        auto setParam = [vp] (const juce::String& id, float val)
        {
            if (auto* p = vp->getAPVTS().getParameter (id))
                if (auto* r = dynamic_cast<juce::RangedAudioParameter*> (p))
                    r->setValueNotifyingHost (juce::jlimit (0.0f, 1.0f, r->getNormalisableRange().convertTo0to1 (val)));
        };
        // Generic parameter update - handle any valid parameter ID
        setParam (cmd.paramName, cmd.paramValue);
    }
}

void AudioEngine::handleListenerUpdate (float x, float y, float radius, float nearRatio)
{
    listenerX = x; listenerY = y; listenerRadius = radius; listenerNear = nearRatio;
}

VisualiserState AudioEngine::getVisualiserState() const
{
    const juce::ScopedLock sl (visualiserLock);
    return visualiserState;
}

void AudioEngine::setMasterGain (float newGain)
{
    if (masterGainNode != nullptr)
    {
        if (auto* gp = dynamic_cast<GainProcessor*> (masterGainNode->getProcessor()))
            gp->setLinearGain (newGain);
    }
}

juce::uint64 AudioEngine::test_createVoice (const juce::String& voiceType)
{
    if (! mainGraph)
        return 0;

    juce::uint64 newId = (juce::uint64) juce::Time::getMillisecondCounterHiRes();

    std::unique_ptr<juce::AudioProcessor> proc;
    if (voiceType.equalsIgnoreCase ("sample"))
    {
        // Try to load any available audio file from ./audio/samples or ./assets
        std::shared_ptr<SampleBank::Sample> smp;
        {
            juce::File cwd = juce::File::getCurrentWorkingDirectory();
            juce::File candidates[] = {
                cwd.getChildFile ("audio").getChildFile ("samples").getChildFile ("test.wav"),
                cwd.getChildFile ("assets").getChildFile ("test.wav")
            };
            for (auto& f : candidates)
            {
                if (f.existsAsFile()) { smp = sampleBank.getOrLoad (f); break; }
            }
        }
        if (! smp)
        {
            // Failsafe: synthesize a 1s sine tone into a temp buffer
            auto sample = std::make_shared<SampleBank::Sample>();
            const double sr = lastSampleRate > 0.0 ? lastSampleRate : 48000.0;
            const int n = (int) (sr);
            sample->stereo.setSize (2, n);
            for (int i = 0; i < n; ++i)
            {
                const float s = std::sin (2.0 * juce::MathConstants<double>::pi * 440.0 * (double) i / sr);
                sample->stereo.setSample (0, i, s);
                sample->stereo.setSample (1, i, s);
            }
            sample->buffer.makeCopyOf (sample->stereo, true);
            sample->sampleRate = sr;
            smp = sample;
        }
        auto p = std::make_unique<SampleVoiceProcessor> (smp);
        proc = std::move (p);
        activeSampleRefs[newId] = smp;
    }
    else if (voiceType.equalsIgnoreCase ("synth"))
    {
        auto p = std::make_unique<SynthVoiceProcessor>();
        proc = std::move (p);
    }
    else if (voiceType.equalsIgnoreCase ("noise"))
    {
        proc = std::make_unique<NoiseVoiceProcessor>();
    }
    else
    {
        return 0;
    }

    auto node = mainGraph->addNode (std::move (proc));
    using NodeAndChannel = juce::AudioProcessorGraph::NodeAndChannel;
    juce::AudioProcessorGraph::Connection cL { NodeAndChannel{ node->nodeID, 0 }, NodeAndChannel{ masterGainNode->nodeID, 0 } };
    juce::AudioProcessorGraph::Connection cR { NodeAndChannel{ node->nodeID, 1 }, NodeAndChannel{ masterGainNode->nodeID, 1 } };
    mainGraph->addConnection (cL);
    mainGraph->addConnection (cR);

    // Prepare the processor with current runtime format, then mark prepared
    if (auto* ap = node->getProcessor())
        ap->prepareToPlay (lastSampleRate > 0.0 ? lastSampleRate : 48000.0, lastBlockSize > 0 ? lastBlockSize : 512);
    if (auto* vp = dynamic_cast<VoiceProcessor*> (node->getProcessor()))
    {
        // Reasonable defaults via APVTS
        if (auto* p = vp->getAPVTS().getParameter ("gain"))
            if (auto* r = dynamic_cast<juce::RangedAudioParameter*> (p)) r->setValueNotifyingHost (r->getNormalisableRange().convertTo0to1 (0.7f));
        if (auto* p2 = vp->getAPVTS().getParameter ("pan"))
            if (auto* r2 = dynamic_cast<juce::RangedAudioParameter*> (p2)) r2->setValueNotifyingHost (r2->getNormalisableRange().convertTo0to1 (0.0f));
    }

    activeVoices[newId] = node;
    appendLog ("Created voice '" + voiceType + "' id=" + juce::String ((juce::int64) newId));
    return newId;
}

void AudioEngine::test_updateVoiceParameter (juce::uint64 voiceId, const juce::String& paramId, float value)
{
    auto it = activeVoices.find (voiceId);
    if (it == activeVoices.end()) return;
    auto* proc = it->second->getProcessor();
    if (! proc) return;
    // Update APVTS parameter by ID
    const int numParams = proc->getNumParameters();
    for (int i = 0; i < numParams; ++i)
    {
        if (auto* p = dynamic_cast<juce::AudioProcessorParameterWithID*> (proc->getParameters()[i]))
        {
            if (p->paramID.equalsIgnoreCase (paramId))
            {
                // Map linear value to normalized
                auto* ranged = dynamic_cast<juce::RangedAudioParameter*> (p);
                if (ranged != nullptr)
                {
                    const float norm = ranged->getNormalisableRange().convertTo0to1 (value);
                    ranged->beginChangeGesture();
                    ranged->setValueNotifyingHost (juce::jlimit (0.0f, 1.0f, norm));
                    ranged->endChangeGesture();
                    appendLog ("Set param '" + paramId + "'=" + juce::String (value) + " on voiceId=" + juce::String ((juce::int64) voiceId));
                }
                return;
            }
        }
    }
}

void AudioEngine::test_destroyVoice (juce::uint64 voiceId)
{
    handleDestroyVoice (voiceId);
}

void AudioEngine::resetVoiceParamsToDefaults (VoiceProcessor* v)
{
    if (v == nullptr) return;
    auto set = [v] (const char* id, float val)
    {
        if (auto* p = v->getAPVTS().getParameter (id))
            if (auto* r = dynamic_cast<juce::RangedAudioParameter*> (p))
                r->setValueNotifyingHost (juce::jlimit (0.0f, 1.0f, r->getNormalisableRange().convertTo0to1 (val)));
    };
    set ("filterCutoff", 20000.0f);
    set ("filterResonance", 1.0f);
    set ("chorusRate", 1.0f);
    set ("chorusDepth", 0.0f);
    set ("chorusMix", 0.0f);
    set ("phaserRate", 0.5f);
    set ("phaserDepth", 0.0f);
    set ("phaserCentre", 1000.0f);
    set ("phaserFeedback", 0.0f);
    set ("phaserMix", 0.0f);
    set ("reverbRoom", 0.0f);
    set ("reverbDamp", 0.5f);
    set ("reverbWidth", 1.0f);
    set ("reverbMix", 0.0f);
    set ("delayTimeMs", 0.0f);
    set ("delayFeedback", 0.0f);
    set ("delayMix", 0.0f);
    set ("compThreshold", 0.0f);
    set ("compRatio", 1.0f);
    set ("compAttackMs", 10.0f);
    set ("compReleaseMs", 100.0f);
    set ("compMakeup", 0.0f);
    set ("limitThreshold", 0.0f);
    set ("limitReleaseMs", 10.0f);
    set ("driveAmount", 0.0f);
    set ("driveMix", 0.0f);
    set ("gateThreshold", -100.0f);
    set ("gateAttackMs", 1.0f);
    set ("gateReleaseMs", 50.0f);
    set ("timeStretchRatio", 1.0f);
    set ("pitchSemitones", 0.0f);
    set ("pitchRatio", 1.0f);
}


================================================================================
FILE: juce\Source\audio\modules\ADSRModuleProcessor.cpp
================================================================================


#include "ADSRModuleProcessor.h"

ADSRModuleProcessor::ADSRModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(6), true) // ch0 Gate, ch1 Trigger, ch2-5 mods
                        .withOutput("Output", juce::AudioChannelSet::quadraphonic(), true)),
      apvts (*this, nullptr, "ADSRParams", createParameterLayout())
{
    attackParam  = apvts.getRawParameterValue (paramIdAttack);
    decayParam   = apvts.getRawParameterValue (paramIdDecay);
    sustainParam = apvts.getRawParameterValue (paramIdSustain);
    releaseParam = apvts.getRawParameterValue (paramIdRelease);
    attackModParam  = apvts.getRawParameterValue (paramIdAttackMod);
    decayModParam   = apvts.getRawParameterValue (paramIdDecayMod);
    sustainModParam = apvts.getRawParameterValue (paramIdSustainMod);
    releaseModParam = apvts.getRawParameterValue (paramIdReleaseMod);
    
    // CORRECTED INITIALIZATION:
    // Create unique_ptrs to heap-allocated atomics for each output channel.
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Channel 0
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Channel 1
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Channel 2
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Channel 3
}

juce::AudioProcessorValueTreeState::ParameterLayout ADSRModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdAttack,  "Attack",  juce::NormalisableRange<float> (0.001f, 5.0f, 0.01f, 0.4f), 0.01f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdDecay,   "Decay",   juce::NormalisableRange<float> (0.001f, 5.0f, 0.01f, 0.4f), 0.1f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdSustain, "Sustain", juce::NormalisableRange<float> (0.0f, 1.0f), 0.7f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdRelease, "Release", juce::NormalisableRange<float> (0.001f, 5.0f, 0.01f, 0.4f), 0.2f));
    
    // Add modulation parameters
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdAttackMod,  "Attack Mod",  0.0f, 1.0f, 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdDecayMod,   "Decay Mod",   0.0f, 1.0f, 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdSustainMod, "Sustain Mod", 0.0f, 1.0f, 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdReleaseMod, "Release Mod", 0.0f, 1.0f, 0.0f));
    return { p.begin(), p.end() };
}

void ADSRModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sr = sampleRate > 0.0 ? sampleRate : 44100.0;
    eorPending = eocPending = 0; envLevel = 0.0f; lastGate = false; lastTrigger = false; stage = Stage::Idle;
}

void ADSRModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    // Read CV from input buses (if connected)
    float attackModCV = 0.5f;   // Default to neutral (0.5)
    float decayModCV = 0.5f;    // Default to neutral (0.5)
    float sustainModCV = 0.5f;  // Default to neutral (0.5)
    float releaseModCV = 0.5f;  // Default to neutral (0.5)
    
    // Get single bus for all modulation inputs
    auto inBus = getBusBuffer(buffer, true, 0);
    
    // Check if attack mod is connected and read CV (channel 2)
    if (isParamInputConnected(paramIdAttackMod) && inBus.getNumChannels() > 2)
        attackModCV = inBus.getReadPointer(2)[0]; // Read first sample
    
    // Check if decay mod is connected and read CV (channel 3)
    if (isParamInputConnected(paramIdDecayMod) && inBus.getNumChannels() > 3)
        decayModCV = inBus.getReadPointer(3)[0]; // Read first sample
    
    // Check if sustain mod is connected and read CV (channel 4)
    if (isParamInputConnected(paramIdSustainMod) && inBus.getNumChannels() > 4)
        sustainModCV = inBus.getReadPointer(4)[0]; // Read first sample
    
    // Check if release mod is connected and read CV (channel 5)
    if (isParamInputConnected(paramIdReleaseMod) && inBus.getNumChannels() > 5)
        releaseModCV = inBus.getReadPointer(5)[0]; // Read first sample

    const float aBase = attackParam  ? attackParam->load()  : 0.01f;
    const float dBase = decayParam   ? decayParam->load()   : 0.10f;
    const float sBase = sustainParam ? sustainParam->load() : 0.70f;
    const float rBase = releaseParam ? releaseParam->load() : 0.20f;

    // Relative modulation: 0.5 = neutral. Times scaled roughly 0.25x..4x; sustain +/-0.5.
    auto timeScale = [](float norm){ return juce::jlimit(0.25f, 4.0f, std::pow(2.0f, (norm - 0.5f) * 2.0f)); }; // 0.25..4.0
    auto sustDelta = [](float norm){ return juce::jlimit(-0.5f, 0.5f, norm - 0.5f); };

    // Apply CV modulation or fallback to parameter values
    const float aEff = juce::jlimit(0.001f, 5.0f, aBase * (isParamInputConnected(paramIdAttackMod) ? timeScale(attackModCV) : 1.0f));
    const float dEff = juce::jlimit(0.001f, 5.0f, dBase * (isParamInputConnected(paramIdDecayMod) ? timeScale(decayModCV) : 1.0f));
    const float sEff = juce::jlimit(0.0f,   1.0f, sBase + (isParamInputConnected(paramIdSustainMod) ? sustDelta(sustainModCV) : 0.0f));
    const float rEff = juce::jlimit(0.001f, 5.0f, rBase * (isParamInputConnected(paramIdReleaseMod) ? timeScale(releaseModCV) : 1.0f));

    // Ensure UI reflects effective modulation in tooltips (optional debug)

    const float atkSec = aEff;
    const float decSec = dEff;
    const float susLvl = sEff;
    const float relSec = rEff;

    // Gate input from bus 0 channel 0; Trigger from bus 0 channel 1
    const float* gateIn = inBus.getNumChannels() > 0 ? inBus.getReadPointer (0) : nullptr;
    const float* trigIn = inBus.getNumChannels() > 1 ? inBus.getReadPointer (1) : nullptr;

    // Clear only our output bus before writing envelope
    auto out = getBusBuffer (buffer, false, 0);
    float* envOut = out.getWritePointer (0);
    float* invOut = out.getNumChannels() > 1 ? out.getWritePointer (1) : envOut;
    float* eorGate = out.getNumChannels() > 2 ? out.getWritePointer (2) : nullptr;
    float* eocGate = out.getNumChannels() > 3 ? out.getWritePointer (3) : nullptr;
    const int n = buffer.getNumSamples();

    for (int i = 0; i < n; ++i)
    {
        const bool trigHigh = trigIn != nullptr ? (trigIn[i] > 0.5f) : false;
        const bool gateHigh = gateIn != nullptr ? (gateIn[i] > 0.5f) : false;
        const bool trigRise = (trigHigh && ! lastTrigger);
        lastTrigger = trigHigh;

        if (trigRise) { stage = Stage::Attack; }
        else {
            if (gateHigh && ! lastGate) stage = Stage::Attack;
            else if (! gateHigh && lastGate && stage != Stage::Idle) stage = Stage::Release;
        }
        lastGate = gateHigh;
        const bool wasActive = (stage != Stage::Idle);

        // advance envelope one sample
        const float dt = 1.0f / (float) sr;
        switch (stage)
        {
            case Stage::Idle: envLevel = 0.0f; break;
            case Stage::Attack: {
                const float rate = (atkSec <= 0.0005f) ? 1.0f : dt / atkSec;
                envLevel += rate;
                if (envLevel >= 1.0f) { envLevel = 1.0f; stage = Stage::Decay; }
            } break;
            case Stage::Decay: {
                const float target = susLvl;
                const float rate = (decSec <= 0.0005f) ? 1.0f : dt / decSec;
                envLevel += (target - envLevel) * rate;
                if (std::abs(envLevel - target) < 0.0005f) { envLevel = target; stage = Stage::Sustain; }
            } break;
            case Stage::Sustain: {
                envLevel = susLvl;
                if (!gateHigh) stage = Stage::Release;
            } break;
            case Stage::Release: {
                const float rate = (relSec <= 0.0005f) ? 1.0f : dt / relSec;
                envLevel += (0.0f - envLevel) * rate;
                if (envLevel <= 0.0005f) { envLevel = 0.0f; stage = Stage::Idle; }
            } break;
        }
        const bool isActive = (stage != Stage::Idle);
        
        // EOR/EOC pulses
        if (wasActive && !isActive) { eorPending = (int) std::round (0.001f * (float)sr); }
        // EOC when we arrive at sustain level (end of attack/decay) OR when we return to Idle
        static bool atSustainPrev = false;
        const bool atSustainNow = (stage == Stage::Sustain);
        if (atSustainNow && !atSustainPrev) { eocPending = (int) std::round (0.001f * (float)sr); }
        if (!isActive && stage == Stage::Idle && wasActive) { eocPending = (int) std::round (0.001f * (float)sr); }
        atSustainPrev = atSustainNow;
        const float eorValue = (eorPending > 0 ? 1.0f : 0.0f);
        const float eocValue = (eocPending > 0 ? 1.0f : 0.0f);
        if (eorPending > 0) --eorPending;
        if (eocPending > 0) --eocPending;
        
        envOut[i] = envLevel;
        invOut[i] = 1.0f - envLevel;
        if (eorGate != nullptr) eorGate[i] = eorValue;
        if (eocGate != nullptr) eocGate[i] = eocValue;
    }

    // Inspector values: use block peak magnitude to capture fast changes
    if (lastOutputValues.size() >= 4)
    {
        auto peakAbs = [&](int ch){ if (ch >= out.getNumChannels()) return 0.0f; const float* p = out.getReadPointer(ch); float m=0.0f; for (int i=0;i<n;++i) m = juce::jmax(m, std::abs(p[i])); return m; };
        if (lastOutputValues[0]) lastOutputValues[0]->store(peakAbs(0));
        if (lastOutputValues[1]) lastOutputValues[1]->store(peakAbs(1));
        if (lastOutputValues[2]) lastOutputValues[2]->store(peakAbs(2));
        if (lastOutputValues[3]) lastOutputValues[3]->store(peakAbs(3));
    }

    // Store live modulated values for UI display
    setLiveParamValue("attack_live", aEff);
    setLiveParamValue("decay_live", dEff);
    setLiveParamValue("sustain_live", sEff);
    setLiveParamValue("release_live", rEff);
}

// Parameter bus contract implementation
bool ADSRModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All inputs are on bus 0
    if (paramId == paramIdAttackMod)  { outChannelIndexInBus = 2; return true; }  // Attack Mod
    if (paramId == paramIdDecayMod)   { outChannelIndexInBus = 3; return true; }  // Decay Mod
    if (paramId == paramIdSustainMod) { outChannelIndexInBus = 4; return true; }  // Sustain Mod
    if (paramId == paramIdReleaseMod) { outChannelIndexInBus = 5; return true; }  // Release Mod
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\ADSRModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_audio_basics/juce_audio_basics.h>

class ADSRModuleProcessor : public ModuleProcessor
{
public:
    // Parameter ID constants
    static constexpr auto paramIdAttack = "attack";
    static constexpr auto paramIdDecay = "decay";
    static constexpr auto paramIdSustain = "sustain";
    static constexpr auto paramIdRelease = "release";
    static constexpr auto paramIdAttackMod = "attack_mod";
    static constexpr auto paramIdDecayMod = "decay_mod";
    static constexpr auto paramIdSustainMod = "sustain_mod";
    static constexpr auto paramIdReleaseMod = "release_mod";

    ADSRModuleProcessor();
    ~ADSRModuleProcessor() override = default;

    const juce::String getName() const override { return "adsr"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        // Get live modulated values for display
        bool isAttackModulated = isParamModulated(paramIdAttackMod);
        bool isDecayModulated = isParamModulated(paramIdDecayMod);
        bool isSustainModulated = isParamModulated(paramIdSustainMod);
        bool isReleaseModulated = isParamModulated(paramIdReleaseMod);
        
        float a = isAttackModulated ? getLiveParamValueFor("attack_mod", "attack_live", attackParam->load()) : (attackParam != nullptr ? attackParam->load() : 0.01f);
        float d = isDecayModulated ? getLiveParamValueFor("decay_mod", "decay_live", decayParam->load()) : (decayParam != nullptr ? decayParam->load() : 0.1f);
        float s = isSustainModulated ? getLiveParamValueFor("sustain_mod", "sustain_live", sustainParam->load()) : (sustainParam != nullptr ? sustainParam->load() : 0.7f);
        float r = isReleaseModulated ? getLiveParamValueFor("release_mod", "release_live", releaseParam->load()) : (releaseParam != nullptr ? releaseParam->load() : 0.2f);
        
        ImGui::PushItemWidth (itemWidth);
        
        // Attack
        if (isAttackModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Attack (s)",  &a, 0.001f, 5.0f, "%.3f", ImGuiSliderFlags_Logarithmic)) if (!isAttackModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdAttack)))  *p = a;
        if (!isAttackModulated) adjustParamOnWheel (ap.getParameter(paramIdAttack), "attack", a);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isAttackModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Decay
        if (isDecayModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Decay (s)",   &d, 0.001f, 5.0f, "%.3f", ImGuiSliderFlags_Logarithmic)) if (!isDecayModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDecay)))   *p = d;
        if (!isDecayModulated) adjustParamOnWheel (ap.getParameter(paramIdDecay), "decay", d);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isDecayModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Sustain
        if (isSustainModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Sustain", &s, 0.0f, 1.0f)) if (!isSustainModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdSustain))) *p = s;
        if (!isSustainModulated) adjustParamOnWheel (ap.getParameter(paramIdSustain), "sustain", s);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isSustainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Release
        if (isReleaseModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Release (s)", &r, 0.001f, 5.0f, "%.3f", ImGuiSliderFlags_Logarithmic)) if (!isReleaseModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRelease))) *p = r;
        if (!isReleaseModulated) adjustParamOnWheel (ap.getParameter(paramIdRelease), "release", r);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isReleaseModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("Gate In", 0);
        helpers.drawAudioInputPin("Trigger In", 1);
        
        helpers.drawAudioInputPin("Attack Mod", 2);
        helpers.drawAudioInputPin("Decay Mod", 3);
        helpers.drawAudioInputPin("Sustain Mod", 4);
        helpers.drawAudioInputPin("Release Mod", 5);
        helpers.drawAudioOutputPin("Env Out", 0);
        helpers.drawAudioOutputPin("Inv Out", 1);
        helpers.drawAudioOutputPin("EOR Gate", 2);
        helpers.drawAudioOutputPin("EOC Gate", 3);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Gate In";
            case 1: return "Trigger In";
            case 2: return "Attack Mod";
            case 3: return "Decay Mod";
            case 4: return "Sustain Mod";
            case 5: return "Release Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Env Out";
            case 1: return "Inv Out";
            case 2: return "EOR Gate";
            case 3: return "EOC Gate";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* attackParam { nullptr };
    std::atomic<float>* decayParam { nullptr };
    std::atomic<float>* sustainParam { nullptr };
    std::atomic<float>* releaseParam { nullptr };
    std::atomic<float>* attackModParam { nullptr };
    std::atomic<float>* decayModParam { nullptr };
    std::atomic<float>* sustainModParam { nullptr };
    std::atomic<float>* releaseModParam { nullptr };
    // Simple RT-safe envelope state (custom, replaces juce::ADSR to avoid surprises)
    enum class Stage { Idle, Attack, Decay, Sustain, Release };
    Stage stage { Stage::Idle };
    float envLevel { 0.0f };
    bool lastGate { false };
    bool lastTrigger { false };
    int eorPending { 0 };
    int eocPending { 0 };
    double sr { 44100.0 };
};




================================================================================
FILE: juce\Source\audio\modules\AttenuverterModuleProcessor.cpp
================================================================================


#include "AttenuverterModuleProcessor.h"

AttenuverterModuleProcessor::AttenuverterModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // 0-1: Audio In, 2: Amount Mod
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "AttenuverterParams", createParameterLayout())
{
    amountParam = apvts.getRawParameterValue ("amount");
    rectifyParam = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("rectify"));
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout AttenuverterModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("amount", "Amount", juce::NormalisableRange<float> (-10.0f, 10.0f), 1.0f));
    // Add a non-automatable, hidden parameter for rectification mode
    params.push_back (std::make_unique<juce::AudioParameterBool> ("rectify", "Rectify", false));
    return { params.begin(), params.end() };
}

void AttenuverterModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (sampleRate, samplesPerBlock);
}

void AttenuverterModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    auto in  = getBusBuffer (buffer, true, 0);
    auto out = getBusBuffer (buffer, false, 0);
    
    const float baseGain = amountParam != nullptr ? amountParam->load() : 1.0f;
    const bool shouldRectify = rectifyParam != nullptr ? rectifyParam->get() : false;
    const int nSamps = buffer.getNumSamples();
    
    // Check if amount is modulated and get from unified input bus
    const bool isAmountModulated = isParamInputConnected("amount");
    const float* modSignal = isAmountModulated && in.getNumChannels() > 2 ? in.getReadPointer(2) : nullptr;
    
    for (int ch = 0; ch < out.getNumChannels(); ++ch)
    {
        const float* s = in.getReadPointer (juce::jmin(ch, in.getNumChannels()-1));
        float* d = out.getWritePointer (ch);
        for (int i = 0; i < nSamps; ++i)
        {
            float sample = s[i];
            if (shouldRectify)
                sample = std::abs(sample);
            
            // Apply modulation if connected
            float currentGain = baseGain;
            if (isAmountModulated && modSignal)
                currentGain = juce::jmap(modSignal[i], 0.0f, 1.0f, -10.0f, 10.0f);
            
            // Update telemetry for live UI feedback (throttled to every 64 samples)
            if ((i & 0x3F) == 0) {
                setLiveParamValue("amount_live", currentGain);
            }
                
            d[i] = sample * currentGain;
        }
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(out.getSample(0, nSamps - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(out.getSample(1, nSamps - 1));
    }
}

bool AttenuverterModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "amount")
    {
        outChannelIndexInBus = 2;
        return true;
    }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\AttenuverterModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class AttenuverterModuleProcessor : public ModuleProcessor
{
public:
    AttenuverterModuleProcessor();
    ~AttenuverterModuleProcessor() override = default;

    const juce::String getName() const override { return "attenuverter"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float amt = amountParam != nullptr ? amountParam->load() : 1.0f;
        ImGui::PushItemWidth (itemWidth);
        
        bool isAmountModulated = isParamModulated("amount");
        if (isAmountModulated) {
            amt = getLiveParamValueFor("amount", "amount_live", amt);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Amount", &amt, -10.0f, 10.0f)) {
            if (!isAmountModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("amount"))) *p = amt;
            }
        }
        if (!isAmountModulated) adjustParamOnWheel (ap.getParameter ("amount"), "amount", amt);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isAmountModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);
        helpers.drawAudioInputPin("Amount Mod", 2);
        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* amountParam { nullptr }; // -1..1
    juce::AudioParameterBool* rectifyParam { nullptr }; // Rectify mode for Audio-to-CV conversion
};




================================================================================
FILE: juce\Source\audio\modules\AudioInputModuleProcessor.cpp
================================================================================


#include "AudioInputModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout AudioInputModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterInt>(paramIdNumChannels, "Channels", 1, MAX_CHANNELS, 2));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdGateThreshold, "Gate Threshold", 0.0f, 1.0f, 0.1f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdTriggerThreshold, "Trigger Threshold", 0.0f, 1.0f, 0.5f));

    // Create a parameter for each potential channel mapping
    for (int i = 0; i < MAX_CHANNELS; ++i)
    {
        params.push_back(std::make_unique<juce::AudioParameterInt>("channelMap" + juce::String(i), "Channel " + juce::String(i + 1) + " Source", 0, 255, i));
    }
    return { params.begin(), params.end() };
}

AudioInputModuleProcessor::AudioInputModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("In", juce::AudioChannelSet::discreteChannels(MAX_CHANNELS), true)
                        .withOutput("Out", juce::AudioChannelSet::discreteChannels(MAX_CHANNELS + 3), true)), // +3 for Gate, Trig, EOP
      apvts(*this, nullptr, "AudioInputParams", createParameterLayout())
{
    numChannelsParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter(paramIdNumChannels));
    
    gateThresholdParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdGateThreshold));
    triggerThresholdParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdTriggerThreshold));

    channelMappingParams.resize(MAX_CHANNELS);
    for (int i = 0; i < MAX_CHANNELS; ++i)
    {
        channelMappingParams[i] = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("channelMap" + juce::String(i)));
    }

    lastOutputValues.resize(MAX_CHANNELS + 3); // +3 for new outputs
    channelLevels.resize(MAX_CHANNELS);
    for (int i = 0; i < MAX_CHANNELS + 3; ++i)
    {
        if (i < (int)channelLevels.size()) channelLevels[i] = std::make_unique<std::atomic<float>>(0.0f);
        lastOutputValues[i] = std::make_unique<std::atomic<float>>(0.0f);
    }
    
    peakState.resize(MAX_CHANNELS, PeakState::SILENT);
    lastTriggerState.resize(MAX_CHANNELS, false);
    silenceCounter.resize(MAX_CHANNELS, 0);
    eopPulseRemaining.resize(MAX_CHANNELS, 0);
    trigPulseRemaining.resize(MAX_CHANNELS, 0);
}

void AudioInputModuleProcessor::prepareToPlay(double, int)
{
    // Reset all state variables
    std::fill(peakState.begin(), peakState.end(), PeakState::SILENT);
    std::fill(lastTriggerState.begin(), lastTriggerState.end(), false);
    std::fill(silenceCounter.begin(), silenceCounter.end(), 0);
    std::fill(eopPulseRemaining.begin(), eopPulseRemaining.end(), 0);
    std::fill(trigPulseRemaining.begin(), trigPulseRemaining.end(), 0);
}

void AudioInputModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int activeChannels = numChannelsParam ? numChannelsParam->get() : 2;
    const int numSamples = buffer.getNumSamples();
    const double sampleRate = getSampleRate();
    
    const float gateThresh = gateThresholdParam ? gateThresholdParam->get() : 0.1f;
    const float trigThresh = triggerThresholdParam ? triggerThresholdParam->get() : 0.5f;

    const int gateOutChannel = MAX_CHANNELS + 0;
    const int trigOutChannel = MAX_CHANNELS + 1;
    const int eopOutChannel  = MAX_CHANNELS + 2;

    auto* gateOut = outBus.getNumChannels() > gateOutChannel ? outBus.getWritePointer(gateOutChannel) : nullptr;
    auto* trigOut = outBus.getNumChannels() > trigOutChannel ? outBus.getWritePointer(trigOutChannel) : nullptr;
    auto* eopOut  = outBus.getNumChannels() > eopOutChannel  ? outBus.getWritePointer(eopOutChannel)  : nullptr;
    
    // Perform CV analysis on Channel 0 only, BEFORE the main loop
    if (activeChannels > 0 && inBus.getNumChannels() > 0)
    {
        const float* inData = inBus.getReadPointer(0); // Always use the first channel for analysis

        for (int s = 0; s < numSamples; ++s)
        {
            const float sampleAbs = std::abs(inData[s]);

            // GATE LOGIC
            if (gateOut) gateOut[s] = (sampleAbs > gateThresh) ? 1.0f : 0.0f;

            // TRIGGER LOGIC
            bool isAboveTrig = sampleAbs > trigThresh;
            if (isAboveTrig && !lastTriggerState[0]) {
                trigPulseRemaining[0] = (int)(0.001 * sampleRate); // 1ms pulse
            }
            lastTriggerState[0] = isAboveTrig;

            if (trigOut) {
                trigOut[s] = (trigPulseRemaining[0] > 0) ? 1.0f : 0.0f;
                if (trigPulseRemaining[0] > 0) --trigPulseRemaining[0];
            }

            // EOP LOGIC
            if (peakState[0] == PeakState::PEAK) {
                if (sampleAbs < gateThresh) {
                    silenceCounter[0]++;
                    if (silenceCounter[0] >= MIN_SILENCE_SAMPLES) {
                        peakState[0] = PeakState::SILENT;
                        eopPulseRemaining[0] = (int)(0.001 * sampleRate); // Fire 1ms pulse
                    }
                } else {
                    silenceCounter[0] = 0;
                }
            } else { // PeakState::SILENT
                if (sampleAbs > gateThresh) {
                    peakState[0] = PeakState::PEAK;
                    silenceCounter[0] = 0;
                }
            }

            if (eopOut) {
                eopOut[s] = (eopPulseRemaining[0] > 0) ? 1.0f : 0.0f;
                if (eopPulseRemaining[0] > 0) --eopPulseRemaining[0];
            }
        }
    }

    // Now, loop through the active channels for pass-through and metering
    for (int i = 0; i < activeChannels; ++i)
    {
        if (i < inBus.getNumChannels() && i < outBus.getNumChannels())
        {
            outBus.copyFrom(i, 0, inBus, i, 0, numSamples);
            
            float peakForMeter = inBus.getMagnitude(i, 0, numSamples);
            if (i < (int)channelLevels.size() && channelLevels[i]) {
                channelLevels[i]->store(peakForMeter);
            }
            
            if (i < (int)lastOutputValues.size() && lastOutputValues[i] && numSamples > 0)
                lastOutputValues[i]->store(outBus.getSample(i, numSamples - 1));
        }
    }
    
    // Clear any unused audio output channels (but NOT the CV channels)
    for (int i = activeChannels; i < MAX_CHANNELS; ++i)
    {
        if (i < outBus.getNumChannels())
            outBus.clear(i, 0, numSamples);
        if (i < (int)channelLevels.size() && channelLevels[i])
            channelLevels[i]->store(0.0f);
    }
    
    // Update the inspector values for the new CV outs
    if (numSamples > 0)
    {
        if (gateOut && lastOutputValues[gateOutChannel]) lastOutputValues[gateOutChannel]->store(gateOut[numSamples-1]);
        if (trigOut && lastOutputValues[trigOutChannel]) lastOutputValues[trigOutChannel]->store(trigOut[numSamples-1]);
        if (eopOut && lastOutputValues[eopOutChannel]) lastOutputValues[eopOutChannel]->store(eopOut[numSamples-1]);
    }
}

juce::ValueTree AudioInputModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("AudioInputState");
    vt.setProperty("deviceName", selectedDeviceName, nullptr);
    vt.addChild(apvts.state.createCopy(), -1, nullptr);
    return vt;
}

void AudioInputModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("AudioInputState"))
    {
        selectedDeviceName = vt.getProperty("deviceName", "").toString();
        auto params = vt.getChildWithName(apvts.state.getType());
        if (params.isValid())
        {
            apvts.replaceState(params);
        }
    }
}

juce::String AudioInputModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel < MAX_CHANNELS)
        return "HW In " + juce::String(channel + 1);
    return {};
}

juce::String AudioInputModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == MAX_CHANNELS + 0) return "Gate";
    if (channel == MAX_CHANNELS + 1) return "Trigger";
    if (channel == MAX_CHANNELS + 2) return "EOP";

    if (channel < MAX_CHANNELS)
        return "Out " + juce::String(channel + 1);
    return {};
}

#if defined(PRESET_CREATOR_UI)
// The actual UI drawing will be handled by a special case in ImGuiNodeEditorComponent,
// so this can remain empty.
void AudioInputModuleProcessor::drawParametersInNode(float, const std::function<bool(const juce::String&)>&, const std::function<void()>&)
{
    // UI is custom-drawn in ImGuiNodeEditorComponent.cpp
}

void AudioInputModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Dynamically draw output pins based on the number of active channels
    int numChannels = numChannelsParam ? numChannelsParam->get() : 2;
    for (int i = 0; i < numChannels; ++i)
    {
        helpers.drawAudioOutputPin(("Out " + juce::String(i + 1)).toRawUTF8(), i);
    }
    
    // Draw CV outputs
    helpers.drawAudioOutputPin("Gate", MAX_CHANNELS + 0);
    helpers.drawAudioOutputPin("Trigger", MAX_CHANNELS + 1);
    helpers.drawAudioOutputPin("EOP", MAX_CHANNELS + 2);
}
#endif


================================================================================
FILE: juce\Source\audio\modules\AudioInputModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <vector>

class AudioInputModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_CHANNELS = 16;
    
    // Parameter ID constants
    static constexpr auto paramIdNumChannels = "numChannels";
    static constexpr auto paramIdGateThreshold = "gateThreshold";
    static constexpr auto paramIdTriggerThreshold = "triggerThreshold";

    AudioInputModuleProcessor();
    ~AudioInputModuleProcessor() override = default;

    const juce::String getName() const override { return "audio input"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Override labels for better pin naming
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

    // Extra state for device name and parameters
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    // Device name access for UI
    juce::String getSelectedDeviceName() const { return selectedDeviceName; }
    void setSelectedDeviceName(const juce::String& name) { selectedDeviceName = name; }

    // Real-time level metering for UI (one per channel)
    std::vector<std::unique_ptr<std::atomic<float>>> channelLevels;
    
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    // Parameter pointers
    juce::AudioParameterInt* numChannelsParam { nullptr };
    std::vector<juce::AudioParameterInt*> channelMappingParams;
    juce::String selectedDeviceName;
    
    juce::AudioParameterFloat* gateThresholdParam { nullptr };
    juce::AudioParameterFloat* triggerThresholdParam { nullptr };

    // State for signal analysis
    enum class PeakState { SILENT, PEAK };
    std::vector<PeakState> peakState;
    std::vector<bool> lastTriggerState;
    std::vector<int> silenceCounter;
    std::vector<int> eopPulseRemaining;
    std::vector<int> trigPulseRemaining;

    static constexpr int MIN_SILENCE_SAMPLES = 480; // ~10ms at 48kHz
};



================================================================================
FILE: juce\Source\audio\modules\BestPracticeNodeProcessor.cpp
================================================================================


#include "BestPracticeNodeProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout BestPracticeNodeProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdFrequency, "Frequency",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdWaveform, "Waveform",
        juce::StringArray { "Sine", "Saw", "Square" }, 0));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdDrive, "Drive",
        juce::NormalisableRange<float>(1.0f, 50.0f, 0.01f, 0.5f), 1.0f));

    return { params.begin(), params.end() };
}

BestPracticeNodeProcessor::BestPracticeNodeProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(5), true)
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "BestPracticeParams", createParameterLayout())
{
    frequencyParam = apvts.getRawParameterValue(paramIdFrequency);
    waveformParam  = apvts.getRawParameterValue(paramIdWaveform);
    driveParam     = apvts.getRawParameterValue(paramIdDrive);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));

    oscillator.initialise([](float x){ return std::sin(x); }, 128);
}

void BestPracticeNodeProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 1 };
    oscillator.prepare(spec);

    smoothedFrequency.reset(sampleRate, 0.01);
    smoothedDrive.reset(sampleRate, 0.01);
}

void BestPracticeNodeProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto inBus  = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const bool isFreqMod  = isParamInputConnected(paramIdFrequencyMod);
    const bool isWaveMod  = isParamInputConnected(paramIdWaveformMod);
    const bool isDriveMod = isParamInputConnected(paramIdDriveMod);

    const float* audioInL = inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* audioInR = inBus.getNumChannels() > 1 ? inBus.getReadPointer(1) : nullptr;
    const float* freqCV   = isFreqMod  && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* waveCV   = isWaveMod  && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* driveCV  = isDriveMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    auto* outL = outBus.getNumChannels() > 0 ? outBus.getWritePointer(0) : nullptr;
    auto* outR = outBus.getNumChannels() > 1 ? outBus.getWritePointer(1) : outL;

    const float baseFrequency = frequencyParam != nullptr ? frequencyParam->load() : 440.0f;
    const int   baseWaveform  = waveformParam  != nullptr ? (int) waveformParam->load()  : 0;
    const float baseDrive     = driveParam     != nullptr ? driveParam->load()     : 1.0f;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float currentFreq = baseFrequency;
        if (isFreqMod && freqCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, freqCV[i]);
            constexpr float fMin = 20.0f;
            constexpr float fMax = 20000.0f;
            const float spanOct = std::log2(fMax / fMin);
            currentFreq = fMin * std::pow(2.0f, cv * spanOct);
        }

        int currentWave = baseWaveform;
        if (isWaveMod && waveCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, waveCV[i]);
            currentWave = (int) (cv * 2.99f);
        }

        float currentDrive = baseDrive;
        if (isDriveMod && driveCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, driveCV[i]);
            currentDrive = juce::jmap(cv, 1.0f, 50.0f);
        }

        smoothedFrequency.setTargetValue(currentFreq);
        smoothedDrive.setTargetValue(currentDrive);

        if (currentWaveform != currentWave)
        {
            if (currentWave == 0)      oscillator.initialise([](float x){ return std::sin(x); }, 128);
            else if (currentWave == 1) oscillator.initialise([](float x){ return (x / juce::MathConstants<float>::pi); }, 128);
            else                       oscillator.initialise([](float x){ return x < 0.0f ? -1.0f : 1.0f; }, 128);
            currentWaveform = currentWave;
        }

        oscillator.setFrequency(smoothedFrequency.getNextValue(), false);
        const float osc = oscillator.processSample(0.0f);
        const float shaped = std::tanh(osc * smoothedDrive.getNextValue());

        const float inL = audioInL ? audioInL[i] : 1.0f;
        const float inR = audioInR ? audioInR[i] : inL;

        const float outSampleL = shaped * inL;
        const float outSampleR = shaped * inR;

        if (outL) outL[i] = outSampleL;
        if (outR) outR[i] = outSampleR;

        if ((i & 0x3F) == 0)
        {
            setLiveParamValue("frequency_live", smoothedFrequency.getCurrentValue());
            setLiveParamValue("waveform_live", (float) currentWave);
            setLiveParamValue("drive_live", smoothedDrive.getCurrentValue());
        }
    }

    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getNumChannels() > 0 ? outBus.getSample(0, buffer.getNumSamples() - 1) : 0.0f);
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getNumChannels() > 1 ? outBus.getSample(1, buffer.getNumSamples() - 1) : 0.0f);
    }
}

#if defined(PRESET_CREATOR_UI)
void BestPracticeNodeProcessor::drawParametersInNode (float itemWidth,
                                                      const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                      const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    const bool freqIsMod = isParamModulated(paramIdFrequencyMod);
    float freq = freqIsMod ? getLiveParamValueFor(paramIdFrequencyMod, "frequency_live", frequencyParam ? frequencyParam->load() : 440.0f)
                           : (frequencyParam ? frequencyParam->load() : 440.0f);

    int wave = (int) (waveformParam ? waveformParam->load() : 0.0f);
    if (isParamModulated(paramIdWaveformMod))
        wave = (int) getLiveParamValueFor(paramIdWaveformMod, "waveform_live", (float) wave);

    const bool driveIsMod = isParamModulated(paramIdDriveMod);
    float drive = driveIsMod ? getLiveParamValueFor(paramIdDriveMod, "drive_live", driveParam ? driveParam->load() : 1.0f)
                             : (driveParam ? driveParam->load() : 1.0f);

    ImGui::PushItemWidth(itemWidth);

    if (freqIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Frequency", &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic))
    {
        if (!freqIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = freq;
    }
    if (!freqIsMod) adjustParamOnWheel(ap.getParameter(paramIdFrequency), "frequencyHz", freq);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (freqIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    const bool waveIsMod = isParamModulated(paramIdWaveformMod);
    if (waveIsMod) ImGui::BeginDisabled();
    if (ImGui::Combo("Waveform", &wave, "Sine\0Saw\0Square\0\0"))
    {
        if (!waveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWaveform))) *p = wave;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (waveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (driveIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Drive", &drive, 1.0f, 50.0f, "%.2f", ImGuiSliderFlags_Logarithmic))
    {
        if (!driveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDrive))) *p = drive;
    }
    if (!driveIsMod) adjustParamOnWheel(ap.getParameter(paramIdDrive), "drive", drive);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (driveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void BestPracticeNodeProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Freq Mod", 2);
    helpers.drawAudioInputPin("Wave Mod", 3);
    helpers.drawAudioInputPin("Drive Mod", 4);

    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}

juce::String BestPracticeNodeProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "In L";
        case 1: return "In R";
        case 2: return "Freq Mod";
        case 3: return "Wave Mod";
        case 4: return "Drive Mod";
        default: return {};
    }
}

juce::String BestPracticeNodeProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out L";
        case 1: return "Out R";
        default: return {};
    }
}
#endif

bool BestPracticeNodeProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0;
    if (paramId == paramIdFrequencyMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdWaveformMod)  { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdDriveMod)     { outChannelIndexInBus = 4; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\BestPracticeNodeProcessor.h
================================================================================


#pragma once

/**
 * @file BestPracticeNodeProcessor.h
 * @brief Reference implementation demonstrating proper module naming conventions
 *
 * ## IMPORTANT: Module Naming Convention Standard
 *
 * This file serves as the definitive reference for the correct module naming convention
 * used throughout the Collider modular synthesizer system.
 *
 * ### The Problem We Solved
 * Previously, the system had inconsistent naming conventions:
 * - Module factory registered modules with lowercase names (e.g., "polyvco", "compressor")
 * - Module getName() methods returned PascalCase names (e.g., "PolyVCO", "Compressor")
 * - Module pin database used a mix of lowercase and PascalCase keys
 *
 * This caused pin color-coding failures because the UI couldn't find modules in the database.
 *
 * ### The Solution: Unified Lowercase Convention
 * We standardized on a **lowercase with spaces** naming convention:
 *
 * 1. **Module Factory Registration**: All modules registered as lowercase (e.g., "polyvco")
 * 2. **getName() Return Values**: All modules return lowercase names (e.g., "polyvco")
 * 3. **Pin Database Keys**: All keys are lowercase (e.g., "polyvco")
 * 4. **No Aliases Needed**: Single source of truth eliminates ambiguity
 *
 * ### Pattern for New Modules
 * When creating new modules, follow this exact pattern:
 *
 * ```cpp
 * class NewModuleProcessor : public ModuleProcessor
 * {
 * public:
 *     const juce::String getName() const override { return "new module"; }
 *     // ... rest of implementation
 * };
 * ```
 *
 * Register in ModularSynthProcessor.cpp:
 * ```cpp
 * reg("new module", []{ return std::make_unique<NewModuleProcessor>(); });
 * ```
 *
 * Add to pin database in ImGuiNodeEditorComponent.cpp:
 * ```cpp
 * modulePinDatabase["new module"] = ModulePinInfo(...);
 * ```
 *
 * ### Why This Works
 * - Module factory uses lowercase names as the canonical "type"
 * - getName() returns the same lowercase name for consistency
 * - UI looks up modules by their lowercase type in the pin database
 * - All lookups succeed because keys are standardized
 * - Pin colors display correctly (green for audio, blue for CV, yellow for gate)
 *
 * This pattern ensures robust, maintainable code and eliminates naming-related bugs.
 */

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <cmath>

class BestPracticeNodeProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdFrequency    = "frequency";
    static constexpr auto paramIdWaveform     = "waveform";
    static constexpr auto paramIdDrive        = "drive";
    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdFrequencyMod = "frequency_mod";
    static constexpr auto paramIdWaveformMod  = "waveform_mod";
    static constexpr auto paramIdDriveMod     = "drive_mod";

    BestPracticeNodeProcessor();
    ~BestPracticeNodeProcessor() override = default;

    const juce::String getName() const override { return "best practice"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Oscillator<float> oscillator;

    // Cached parameter pointers
    std::atomic<float>* frequencyParam { nullptr };
    std::atomic<float>* waveformParam  { nullptr };
    std::atomic<float>* driveParam     { nullptr };

    // Smoothed values to prevent zipper noise
    juce::SmoothedValue<float> smoothedFrequency;
    juce::SmoothedValue<float> smoothedDrive;

    int currentWaveform = -1;
};




================================================================================
FILE: juce\Source\audio\modules\BestPracticeNodeProcessor.md
================================================================================




## Guide to Creating a "Best Practice" Module

This document outlines the best practices for creating a new `ModuleProcessor` in this modular synthesizer environment. The `BestPracticeNodeProcessor` serves as a live, working example of these principles. Following this guide ensures that new modules are robust, efficient, and integrate correctly with the UI, modulation system, and audio engine.

-----

### **1. Core Functionality of the Example Node**

[cite\_start]The `BestPracticeNodeProcessor` is a shaping oscillator that can also function as a ring modulator[cite: 148].

  * [cite\_start]**As an Oscillator**: It generates a standard waveform (Sine, Saw, or Square)[cite: 144].
  * [cite\_start]**As a Shaper**: It applies a `tanh` distortion function, controlled by a "Drive" parameter, to the generated waveform[cite: 148].
  * **As a Ring Modulator**: It multiplies its output with an incoming audio signal. [cite\_start]If no audio is connected, the input defaults to `1.0`, and it functions as a simple oscillator[cite: 148].

-----

### **2. The Modulation Input System**

This is the most critical pattern to follow. It ensures that UI parameters can be overridden by CV inputs in a thread-safe and predictable way.

#### **Step 1: Define Parameter and Modulation IDs (`.h`)**

For every parameter that can be modulated, you must define two `constexpr` string IDs in the header file: one for the parameter itself and one "virtual" ID for its modulation input.

  * [cite\_start]The **parameter ID** (e.g., `"frequency"`) is used for the `juce::AudioProcessorValueTreeState` (APVTS)[cite: 153].
  * The **virtual modulation ID** (e.g., `"frequency_mod"`) is used *only* for routing and UI checks. [cite\_start]It **must not** have a corresponding parameter in the APVTS[cite: 153].

**Example from `BestPracticeNodeProcessor.h`:**

```cpp
// Parameter IDs for APVTS
static constexpr auto paramIdFrequency    = "frequency"; [cite_start]// [cite: 153]
static constexpr auto paramIdWaveform     = "waveform"; [cite_start]// [cite: 153]
static constexpr auto paramIdDrive        = "drive"; [cite_start]// [cite: 153]

// Virtual modulation target IDs (no APVTS parameters required)
static constexpr auto paramIdFrequencyMod = "frequency_mod"; [cite_start]// [cite: 153]
static constexpr auto paramIdWaveformMod  = "waveform_mod"; [cite_start]// [cite: 153]
static constexpr auto paramIdDriveMod     = "drive_mod"; [cite_start]// [cite: 153]
```

-----

#### **Step 2: Use a Single, Unified Input Bus (`.cpp`)**

All inputs for a module, both audio and CV, should be defined on a single discrete input bus in the constructor. This simplifies the routing logic significantly.

**Example from `BestPracticeNodeProcessor.cpp`:**

```cpp
BestPracticeNodeProcessor::BestPracticeNodeProcessor()
    : ModuleProcessor(BusesProperties()
                        [cite_start].withInput("Inputs", juce::AudioChannelSet::discreteChannels(5), true) // [cite: 143]
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      // ...
```

[cite\_start]Here, the 5 channels are for Audio In L/R, Freq Mod, Wave Mod, and Drive Mod[cite: 143, 150].

-----

#### **Step 3: Implement `getParamRouting()` (`.cpp`)**

[cite\_start]This function is the bridge between the virtual modulation IDs and their physical channel indices on the input bus [cite: 157-158].

**Example from `BestPracticeNodeProcessor.cpp`:**

```cpp
bool BestPracticeNodeProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus.
    if (paramId == paramIdFrequencyMod) { outChannelIndexInBus = 2; return true; [cite_start]} // [cite: 150]
    if (paramId == paramIdWaveformMod)  { outChannelIndexInBus = 3; return true; [cite_start]} // [cite: 150]
    if (paramId == paramIdDriveMod)     { outChannelIndexInBus = 4; return true; [cite_start]} // [cite: 150]
    return false;
}
```

-----

#### **Step 4: Use Modulation in `processBlock()` (`.cpp`)**

The audio processing logic must follow this pattern:

1.  [cite\_start]Check if a modulation input is connected using `isParamInputConnected()` with the **virtual `_mod` ID**[cite: 143].
2.  [cite\_start]If connected, get a pointer to the CV signal from the correct channel index on the input bus [cite: 143-144].
3.  In the per-sample loop, read the CV value and apply it. [cite\_start]If not connected, use the base value from the APVTS parameter[cite: 144].
4.  Update "live" telemetry values for the UI using `setLiveParamValue()`. [cite\_start]This is crucial for visual feedback[cite: 147].

**Example from `ShapingOscillatorModuleProcessor.cpp`:**

```cpp
// 1. Check for connection
const bool isFreqMod  = isParamInputConnected(paramIdFrequencyMod); [cite_start]// [cite: 708]

// 2. Get CV pointer
const float* freqCV   = isFreqMod  && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr; [cite_start]// [cite: 709]

const float baseFrequency = frequencyParam->load();

for (int i = 0; i < buffer.getNumSamples(); ++i)
{
    // 3. Apply CV if connected
    float currentFreq = baseFrequency;
    if (isFreqMod && freqCV)
    {
        const float cv = juce::jlimit(0.0f, 1.0f, freqCV[i]); [cite_start]// [cite: 710]
        // ... logic to apply CV ...
        currentFreq = fMin * std::pow(2.0f, cv * spanOct); [cite_start]// [cite: 710]
    }

    // ... use 'currentFreq' in DSP ...

    // 4. Update telemetry (throttled)
    [cite_start]if ((i & 0x3F) == 0) // [cite: 712]
    {
        setLiveParamValue("frequency_live", smoothedFrequency.getCurrentValue()); [cite_start]// [cite: 712]
    }
}
```

-----

#### **Step 5: Implement UI Feedback in `drawParametersInNode()` (`.h`)**

The UI code must use the `isParamModulated` lambda (which is passed into the function) with the **virtual `_mod` ID** to determine the UI state.

1.  [cite\_start]Check if the parameter is modulated[cite: 148].
2.  If it is, get the live value from the audio thread using `getLiveParamValueFor()`. [cite\_start]This function takes both the virtual `_mod` ID (to re-verify the connection) and the `_live` telemetry key[cite: 148].
3.  [cite\_start]Disable the slider and show an `(mod)` indicator[cite: 148].
4.  [cite\_start]If not modulated, the slider should be active and control the APVTS parameter directly [cite: 148-149].

**Example from `BestPracticeNodeProcessor.h`:**

```cpp
// 1. Check for modulation
const bool freqIsMod = isParamModulated(paramIdFrequencyMod); [cite_start]// [cite: 148]

// 2. Get live or base value
float freq = freqIsMod ? getLiveParamValueFor(paramIdFrequencyMod, "frequency_live", frequencyParam->load())
                       : frequencyParam->load(); [cite_start]// [cite: 148]

// 3. Disable UI and show indicator
if (freqIsMod) ImGui::BeginDisabled(); [cite_start]// [cite: 148]

if (ImGui::SliderFloat("Frequency", &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic))
{
    if (!freqIsMod) // 4. Only update parameter if not modulated
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = freq; [cite_start]// [cite: 148-149]
}

if (freqIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); [cite_start]} // [cite: 149]
```

-----

### **3. Audio Processing Best Practices**

  * [cite\_start]**Prevent Zipper Noise**: For parameters that change rapidly (especially under modulation), use `juce::SmoothedValue` to interpolate values over time and prevent audible clicks[cite: 145]. [cite\_start]Initialize it in `prepareToPlay()` and update its target value inside the `processBlock()` loop[cite: 145].
  * **Safe State Changes**: Avoid expensive operations like memory allocation on the audio thread. [cite\_start]For waveform switching, the `BestPracticeNodeProcessor` uses a clean pattern: it only calls `oscillator.initialise()` when the integer `waveform` choice has actually changed from the previous sample [cite: 145-146].
  * **Avoid In-Place Processing Bugs 🐛**: A common mistake is to clear an output buffer before you have finished reading from the input buffer. In JUCE's `AudioProcessorGraph`, the input and output buffers can be the **same piece of memory**. Clearing the output can instantly wipe out your input signal.
      * **Incorrect Pattern**:
        ```cpp
        auto inBus = getBusBuffer(buffer, true, 0);
        auto outBus = getBusBuffer(buffer, false, 0);
        outBus.clear(); // DANGER: This might have just erased inBus!
        process(inBus); // Now processing silence.
        ```
      * **Correct Pattern**: Always perform your analysis or read your inputs *before* you modify or clear the output buffer.
        ```cpp
        auto inBus = getBusBuffer(buffer, true, 0);
        auto outBus = getBusBuffer(buffer, false, 0);

        // 1. Analyze or process the input first.
        analyze(inBus);

        // 2. Now it's safe to handle the output.
        // For passthrough, copy the original input.
        outBus.copyFrom(0, 0, inBus, 0, 0, numSamples); 
        ```
      * [cite\_start]This exact bug was found and fixed in the `FrequencyGraphModuleProcessor`[cite: 313, 314, 317].
  * [cite\_start]**Clear Pin Definitions**: Provide clear, human-readable labels for all input and output pins by overriding `getAudioInputLabel()` and `getAudioOutputLabel()`[cite: 150]. This information is used by the UI for tooltips and the pin database.

================================================================================
FILE: juce\Source\audio\modules\ChorusModuleProcessor.cpp
================================================================================


#include "ChorusModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout ChorusModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRate, "Rate", 0.05f, 5.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDepth, "Depth", 0.0f, 1.0f, 0.25f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMix, "Mix", 0.0f, 1.0f, 0.5f));
    
    return { params.begin(), params.end() };
}

ChorusModuleProcessor::ChorusModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(5), true) // 0-1: Audio In, 2: Rate Mod, 3: Depth Mod, 4: Mix Mod
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "ChorusParams", createParameterLayout())
{
    rateParam = apvts.getRawParameterValue(paramIdRate);
    depthParam = apvts.getRawParameterValue(paramIdDepth);
    mixParam = apvts.getRawParameterValue(paramIdMix);

    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void ChorusModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2; // Process in stereo

    chorus.prepare(spec);
    chorus.reset();
}

void ChorusModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // Get handles to the input and output buses
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    // The Chorus DSP object works in-place, so we first copy the dry input to the output.
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }

    // --- Get Modulation CVs from unified input bus ---
    const bool isRateMod = isParamInputConnected(paramIdRateMod);
    const bool isDepthMod = isParamInputConnected(paramIdDepthMod);
    const bool isMixMod = isParamInputConnected(paramIdMixMod);

    const float* rateCV = isRateMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* depthCV = isDepthMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* mixCV = isMixMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    // --- Get Base Parameter Values ---
    const float baseRate = rateParam->load();
    const float baseDepth = depthParam->load();
    const float baseMix = mixParam->load();

    // We can process per-block if not modulated, or per-sample if modulated.
    // For simplicity and responsiveness, we'll just update the parameters once per block
    // using the first sample of the CV input. A per-sample loop could be used for audio-rate modulation.
    
    float finalRate = baseRate;
    if (isRateMod && rateCV) {
        // Map CV (0..1) to the full rate range, applied as an offset
        finalRate += juce::jmap(rateCV[0], 0.0f, 1.0f, -baseRate, 5.0f - baseRate);
    }

    float finalDepth = baseDepth;
    if (isDepthMod && depthCV) {
        finalDepth = juce::jlimit(0.0f, 1.0f, depthCV[0]); // Absolute control
    }

    float finalMix = baseMix;
    if (isMixMod && mixCV) {
        finalMix = juce::jlimit(0.0f, 1.0f, mixCV[0]); // Absolute control
    }
    
    // --- Update the DSP Object ---
    chorus.setRate(juce::jlimit(0.05f, 5.0f, finalRate));
    chorus.setDepth(juce::jlimit(0.0f, 1.0f, finalDepth));
    chorus.setMix(juce::jlimit(0.0f, 1.0f, finalMix));

    // --- Process the Audio ---
    // The context works on the output buffer, which now contains the dry signal.
    juce::dsp::AudioBlock<float> block(outBus);
    juce::dsp::ProcessContextReplacing<float> context(block);
    chorus.process(context);

    // --- Update UI Telemetry ---
    setLiveParamValue("rate_live", finalRate);
    setLiveParamValue("depth_live", finalDepth);
    setLiveParamValue("mix_live", finalMix);
    
    // --- Update Tooltips ---
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool ChorusModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdRateMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdDepthMod) { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdMixMod) { outChannelIndexInBus = 4; return true; }
    return false;
}

juce::String ChorusModuleProcessor::getAudioInputLabel(int channel) const
{
    // Bus 0 (Stereo Audio In)
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    // Bus 1-3 (Mono Mod In) - We need to calculate the absolute channel index
    if (channel == 2) return "Rate Mod";
    if (channel == 3) return "Depth Mod";
    if (channel == 4) return "Mix Mod";
    return {};
}

juce::String ChorusModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void ChorusModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    // Rate Slider
    bool isRateMod = isParamModulated(paramIdRateMod);
    float rate = isRateMod ? getLiveParamValueFor(paramIdRateMod, "rate_live", rateParam->load()) : rateParam->load();
    if (isRateMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Rate", &rate, 0.05f, 5.0f, "%.2f Hz"))
        if (!isRateMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRate)) = rate;
    if (!isRateMod) adjustParamOnWheel(ap.getParameter(paramIdRate), "rate", rate);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isRateMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Depth Slider
    bool isDepthMod = isParamModulated(paramIdDepthMod);
    float depth = isDepthMod ? getLiveParamValueFor(paramIdDepthMod, "depth_live", depthParam->load()) : depthParam->load();
    if (isDepthMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Depth", &depth, 0.0f, 1.0f, "%.2f"))
        if (!isDepthMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDepth)) = depth;
    if (!isDepthMod) adjustParamOnWheel(ap.getParameter(paramIdDepth), "depth", depth);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isDepthMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Mix Slider
    bool isMixMod = isParamModulated(paramIdMixMod);
    float mix = isMixMod ? getLiveParamValueFor(paramIdMixMod, "mix_live", mixParam->load()) : mixParam->load();
    if (isMixMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Mix", &mix, 0.0f, 1.0f, "%.2f"))
        if (!isMixMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMix)) = mix;
    if (!isMixMod) adjustParamOnWheel(ap.getParameter(paramIdMix), "mix", mix);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isMixMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void ChorusModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Rate Mod", 2);
    helpers.drawAudioInputPin("Depth Mod", 3);
    helpers.drawAudioInputPin("Mix Mod", 4);

    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\ChorusModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class ChorusModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs for APVTS and modulation routing
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdDepth = "depth";
    static constexpr auto paramIdMix = "mix";
    // Virtual IDs for modulation inputs
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdDepthMod = "depth_mod";
    static constexpr auto paramIdMixMod = "mix_mod";

    ChorusModuleProcessor();
    ~ChorusModuleProcessor() override = default;

    const juce::String getName() const override { return "chorus"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // The core JUCE DSP chorus object
    juce::dsp::Chorus<float> chorus;

    // Cached atomic pointers to parameters for real-time access
    std::atomic<float>* rateParam { nullptr };
    std::atomic<float>* depthParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\ClockDividerModuleProcessor.cpp
================================================================================


#include "ClockDividerModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout ClockDividerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gateThreshold", "Gate Threshold", juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f), 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "hysteresis", "Hysteresis", juce::NormalisableRange<float>(0.0f, 0.5f, 0.0001f), 0.05f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "pulseWidth", "Pulse Width", juce::NormalisableRange<float>(0.01f, 1.0f, 0.0001f), 0.5f));
    return { params.begin(), params.end() };
}

ClockDividerModuleProcessor::ClockDividerModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Clock In", juce::AudioChannelSet::mono(), true)
                        .withInput("Reset", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::discreteChannels(6), true)),
      apvts(*this, nullptr, "ClockDivParams", createParameterLayout())
{
    gateThresholdParam = apvts.getRawParameterValue("gateThreshold");
    hysteresisParam    = apvts.getRawParameterValue("hysteresis");
    pulseWidthParam    = apvts.getRawParameterValue("pulseWidth");
    // ADD THIS BLOCK:
    for (int i = 0; i < 6; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void ClockDividerModuleProcessor::prepareToPlay(double sr, int)
{
    sampleRate = sr;
    clockCount = 0;
    div2State = div4State = div8State = false;
    currentClockInterval = sampleRate; // Default to 1 second
    samplesSinceLastClock = 0;
    multiplierPhase[0] = multiplierPhase[1] = multiplierPhase[2] = 0.0;
    lastInputState = false;
    schmittStateClock = false;
    schmittStateReset = false;
    for (int i = 0; i < 6; ++i) pulseSamplesRemaining[i] = 0;
}

void ClockDividerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto inClock = getBusBuffer(buffer, true, 0);
    auto inReset = getBusBuffer(buffer, true, 1);
    auto out = getBusBuffer(buffer, false, 0);

    const float* clockIn = inClock.getReadPointer(0);
    const float* resetIn = inReset.getNumChannels() > 0 ? inReset.getReadPointer(0) : nullptr;
    float* div2Out = out.getWritePointer(0);
    float* div4Out = out.getWritePointer(1);
    float* div8Out = out.getWritePointer(2);
    float* mul2Out = out.getWritePointer(3);
    float* mul3Out = out.getWritePointer(4);
    float* mul4Out = out.getWritePointer(5);

    const float gateThresh = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
    const float hyst = hysteresisParam != nullptr ? hysteresisParam->load() : 0.05f;
    const float highThresh = juce::jlimit(0.0f, 1.0f, gateThresh + hyst);
    const float lowThresh  = juce::jlimit(0.0f, 1.0f, gateThresh - hyst);
    const float pulseWidth = pulseWidthParam != nullptr ? pulseWidthParam->load() : 0.5f;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        // Schmitt trigger for clock
        const float vin = clockIn[i];
        if (!schmittStateClock && vin >= highThresh) schmittStateClock = true;
        else if (schmittStateClock && vin <= lowThresh) schmittStateClock = false;

        // Optional reset
        bool doReset = false;
        if (resetIn != nullptr)
        {
            const float vr = resetIn[i];
            if (!schmittStateReset && vr >= highThresh) { schmittStateReset = true; doReset = true; }
            else if (schmittStateReset && vr <= lowThresh) schmittStateReset = false;
        }

        if (doReset)
        {
            clockCount = 0;
            div2State = div4State = div8State = false;
            samplesSinceLastClock = 0;
            multiplierPhase[0] = multiplierPhase[1] = multiplierPhase[2] = 0.0;
            for (int k = 0; k < 6; ++k) pulseSamplesRemaining[k] = 0;
        }

        samplesSinceLastClock++;

        // --- Division on rising edge ---
        if (schmittStateClock && !lastInputState)
        {
            currentClockInterval = samplesSinceLastClock;
            samplesSinceLastClock = 0;
            
            clockCount++;
            if (clockCount % 2 == 0) { div2State = !div2State; pulseSamplesRemaining[0] = (int) juce::jmax(1.0, currentClockInterval * 0.5 * pulseWidth); }
            if (clockCount % 4 == 0) { div4State = !div4State; pulseSamplesRemaining[1] = (int) juce::jmax(1.0, currentClockInterval * 1.0 * pulseWidth); }
            if (clockCount % 8 == 0) { div8State = !div8State; pulseSamplesRemaining[2] = (int) juce::jmax(1.0, currentClockInterval * 2.0 * pulseWidth); }
        }
        lastInputState = schmittStateClock;

        // Gate/trigger shaping using pulse width
        div2Out[i] = pulseSamplesRemaining[0]-- > 0 ? 1.0f : 0.0f;
        div4Out[i] = pulseSamplesRemaining[1]-- > 0 ? 1.0f : 0.0f;
        div8Out[i] = pulseSamplesRemaining[2]-- > 0 ? 1.0f : 0.0f;

        // --- Multiplication via phase ---
        if (currentClockInterval > 0)
        {
            double phaseInc = 1.0 / currentClockInterval;
            
            // x2
            multiplierPhase[0] += phaseInc * 2.0;
            if (multiplierPhase[0] >= 1.0) multiplierPhase[0] -= 1.0;
            mul2Out[i] = (multiplierPhase[0] < pulseWidth) ? 1.0f : 0.0f;

            // x3
            multiplierPhase[1] += phaseInc * 3.0;
            if (multiplierPhase[1] >= 1.0) multiplierPhase[1] -= 1.0;
            mul3Out[i] = (multiplierPhase[1] < pulseWidth) ? 1.0f : 0.0f;

            // x4
            multiplierPhase[2] += phaseInc * 4.0;
            if (multiplierPhase[2] >= 1.0) multiplierPhase[2] -= 1.0;
            mul4Out[i] = (multiplierPhase[2] < pulseWidth) ? 1.0f : 0.0f;
        }
    }
    
    // ADD THIS BLOCK:
    if (lastOutputValues.size() >= 6)
    {
        for (int i = 0; i < 6; ++i)
            if (lastOutputValues[i])
                lastOutputValues[i]->store(out.getSample(i, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void ClockDividerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated);
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);
    float gateThresh = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
    if (ImGui::SliderFloat("Gate Thresh", &gateThresh, 0.0f, 1.0f, "%.3f")) { if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gateThreshold"))) *p = gateThresh; onModificationEnded(); }
    float hyst = hysteresisParam != nullptr ? hysteresisParam->load() : 0.05f;
    if (ImGui::SliderFloat("Hysteresis", &hyst, 0.0f, 0.5f, "%.4f")) { if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("hysteresis"))) *p = hyst; onModificationEnded(); }
    float pw = pulseWidthParam != nullptr ? pulseWidthParam->load() : 0.5f;
    if (ImGui::SliderFloat("Pulse Width", &pw, 0.01f, 1.0f, "%.3f")) { if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("pulseWidth"))) *p = pw; onModificationEnded(); }
    double bpm = (currentClockInterval > 0.0) ? (60.0 * sampleRate / currentClockInterval) : 0.0;
    ImGui::Text("Clock: %.1f BPM", bpm);
    ImGui::PopItemWidth();
}

void ClockDividerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Clock In", 0);
    helpers.drawAudioInputPin("Reset", 1);
    helpers.drawAudioOutputPin("/2", 0);
    helpers.drawAudioOutputPin("/4", 1);
    helpers.drawAudioOutputPin("/8", 2);
    helpers.drawAudioOutputPin("x2", 3);
    helpers.drawAudioOutputPin("x3", 4);
    helpers.drawAudioOutputPin("x4", 5);
}
#endif


================================================================================
FILE: juce\Source\audio\modules\ClockDividerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class ClockDividerModuleProcessor : public ModuleProcessor
{
public:
    ClockDividerModuleProcessor();
    ~ClockDividerModuleProcessor() override = default;

    const juce::String getName() const override { return "clockdivider"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Clock In";
            case 1: return "Reset";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "/2";
            case 1: return "/4";
            case 2: return "/8";
            case 3: return "x2";
            case 4: return "x3";
            case 5: return "x4";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;

    // Parameters
    std::atomic<float>* gateThresholdParam { nullptr };
    std::atomic<float>* hysteresisParam { nullptr };
    std::atomic<float>* pulseWidthParam { nullptr }; // fraction of base period [0..1]

    // Division state
    int clockCount { 0 };
    bool div2State { false }, div4State { false }, div8State { false };

    // Multiplication state
    double sampleRate { 48000.0 };
    double currentClockInterval { 0.0 };
    int samplesSinceLastClock { 0 };
    double multiplierPhase[3] { 0.0, 0.0, 0.0 }; // For x2, x3, x4

    bool lastInputState { false };

    // Pulse generation state (samples remaining high)
    int pulseSamplesRemaining[6] { 0, 0, 0, 0, 0, 0 };
    
    // Schmitt trigger state for clock and reset
    bool schmittStateClock { false };
    bool schmittStateReset { false };
};


================================================================================
FILE: juce\Source\audio\modules\CommentModuleProcessor.cpp
================================================================================


#include "CommentModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#include <imnodes.h>
#endif

CommentModuleProcessor::CommentModuleProcessor()
    : ModuleProcessor(BusesProperties()), // No audio inputs or outputs
      apvts(*this, nullptr, "CommentParams", createParameterLayout())
{
    // Initialize text buffers
    snprintf(titleBuffer, sizeof(titleBuffer), "Comment");
    textBuffer[0] = '\0';
}

juce::AudioProcessorValueTreeState::ParameterLayout CommentModuleProcessor::createParameterLayout() {
    return {}; // No audio parameters are needed
}

void CommentModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&) {
    buffer.clear(); // This module produces no sound
}

// Save the comment's content and dimensions to the preset file
juce::ValueTree CommentModuleProcessor::getExtraStateTree() const {
    juce::ValueTree vt("CommentState");
    vt.setProperty("title", juce::String(titleBuffer), nullptr);
    vt.setProperty("text", juce::String(textBuffer), nullptr);
    vt.setProperty("width", nodeWidth, nullptr);
    vt.setProperty("height", nodeHeight, nullptr);
    return vt;
}

// Load the comment's content and dimensions from a preset file
void CommentModuleProcessor::setExtraStateTree(const juce::ValueTree& vt) {
    if (vt.hasType("CommentState")) {
        strncpy(titleBuffer, vt.getProperty("title", "Comment").toString().toRawUTF8(), sizeof(titleBuffer) - 1);
        strncpy(textBuffer, vt.getProperty("text", "").toString().toRawUTF8(), sizeof(textBuffer) - 1);
        nodeWidth = (float)vt.getProperty("width", 250.0);
        nodeHeight = (float)vt.getProperty("height", 150.0);
        // Note: Node dimensions will be applied in drawParametersInNode when the UI is rendered
    }
}

#if defined(PRESET_CREATOR_UI)
void CommentModuleProcessor::drawParametersInNode(float, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    // Clamp to reasonable bounds (defensive)
    nodeWidth = juce::jlimit(150.0f, 800.0f, nodeWidth);
    nodeHeight = juce::jlimit(100.0f, 600.0f, nodeHeight);

    // Draw content in a child with our exact size
    ImGui::BeginChild("CommentContent", ImVec2(nodeWidth, nodeHeight), true,
                      ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoScrollWithMouse);

    // Title Input - ensure null termination
    titleBuffer[sizeof(titleBuffer) - 1] = '\0';
    if (ImGui::InputText("##title", titleBuffer, sizeof(titleBuffer)))
    {
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    }

    // Body Input - ensure null termination and use our exact size
    textBuffer[sizeof(textBuffer) - 1] = '\0';
    const ImVec2 textAreaSize(nodeWidth - 16.0f, nodeHeight - 70.0f);
    if (ImGui::InputTextMultiline("##text", textBuffer, sizeof(textBuffer), textAreaSize))
    {
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    }

    // Draw resize handle in bottom-right corner
    const ImVec2 resizeHandleSize(16.0f, 16.0f);
    ImVec2 crMax = ImGui::GetWindowContentRegionMax();
    ImVec2 winPos = ImGui::GetWindowPos();
    ImVec2 handleScreenPos = ImVec2(winPos.x + crMax.x - resizeHandleSize.x, winPos.y + crMax.y - resizeHandleSize.y);
    
    ImGui::SetCursorScreenPos(handleScreenPos); // <<< THIS IS THE PROBLEMATIC CALL
    ImGui::InvisibleButton("##resize", resizeHandleSize);
    const bool isResizing = ImGui::IsItemActive() && ImGui::IsMouseDragging(ImGuiMouseButton_Left);

    if (isResizing)
    {
        const ImVec2 delta = ImGui::GetMouseDragDelta(ImGuiMouseButton_Left);
        nodeWidth = juce::jlimit(150.0f, 800.0f, nodeWidth + delta.x);
        nodeHeight = juce::jlimit(100.0f, 600.0f, nodeHeight + delta.y);
        ImGui::ResetMouseDragDelta(ImGuiMouseButton_Left);
        wasBeingResizedLastFrame = true;
    }
    else if (wasBeingResizedLastFrame)
    {
        // Just finished resizing, trigger undo snapshot
        wasBeingResizedLastFrame = false;
        onModificationEnded();
    }

    // Draw resize handle indicator
    const ImVec2 handleStart(handleScreenPos.x + 4, handleScreenPos.y + 4);
    const ImVec2 handleEnd(handleScreenPos.x + resizeHandleSize.x - 4, handleScreenPos.y + resizeHandleSize.y - 4);
    ImGui::GetWindowDrawList()->AddTriangleFilled(
        ImVec2(handleStart.x, handleEnd.y),
        ImVec2(handleEnd.x, handleEnd.y),
        ImVec2(handleEnd.x, handleStart.y),
        ImGui::GetColorU32(ImGuiCol_ResizeGrip));

    // <<< FIX 1: Satisfy the assertion by forcing ImGui to update its boundaries >>>
    ImGui::Dummy(ImVec2(1.0f, 1.0f));

    // <<< FIX 2: Correctly end the child window we started >>>
    ImGui::EndChild();
}
#endif


================================================================================
FILE: juce\Source\audio\modules\CommentModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class CommentModuleProcessor : public ModuleProcessor
{
public:
    CommentModuleProcessor();
    ~CommentModuleProcessor() override = default;

    const juce::String getName() const override { return "comment"; }

    void prepareToPlay(double, int) override {}
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers&) override {} // This node has no pins
#endif

    // Public buffers for UI interaction
    char titleBuffer[64];
    char textBuffer[2048];
    float nodeWidth = 250.0f;  // A more standard default width
    float nodeHeight = 150.0f; // A more standard default height

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

#if defined(PRESET_CREATOR_UI)
    bool wasBeingResizedLastFrame = false;
#endif
};


================================================================================
FILE: juce\Source\audio\modules\ComparatorModuleProcessor.cpp
================================================================================


#include "ComparatorModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout ComparatorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>("threshold", "Threshold", 0.0f, 1.0f, 0.5f));
    return { p.begin(), p.end() };
}

ComparatorModuleProcessor::ComparatorModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("In", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "ComparatorParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue("threshold");
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void ComparatorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto* in = buffer.getReadPointer(0);
    auto* out = buffer.getWritePointer(0);
    const float threshold = thresholdParam->load();

    for (int i = 0; i < buffer.getNumSamples(); ++i)
        out[i] = (in[i] >= threshold) ? 1.0f : 0.0f;

    if (!lastOutputValues.empty())
        lastOutputValues[0]->store(out[buffer.getNumSamples() - 1]);
}

#if defined(PRESET_CREATOR_UI)
void ComparatorModuleProcessor::drawParametersInNode(float itemWidth,
                                                    const std::function<bool(const juce::String& /*paramId*/)>&,
                                                    const std::function<void()>& onModificationEnded)
{
    float t = thresholdParam->load();
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderFloat("Threshold", &t, 0.0f, 1.0f))
        *thresholdParam = t;
    if (ImGui::IsItemDeactivatedAfterEdit())
        onModificationEnded();
    ImGui::PopItemWidth();
}

void ComparatorModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In", 0);
    helpers.drawAudioOutputPin("Out", 0);
}
#endif




================================================================================
FILE: juce\Source\audio\modules\ComparatorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class ComparatorModuleProcessor : public ModuleProcessor
{
public:
    ComparatorModuleProcessor();
    ~ComparatorModuleProcessor() override = default;

    const juce::String getName() const override { return "comparator"; }
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void prepareToPlay(double, int) override {}
    void releaseResources() override {}

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth,
                              const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* thresholdParam { nullptr };
};

================================================================================
FILE: juce\Source\audio\modules\CompressorModuleProcessor.cpp
================================================================================


#include "CompressorModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout CompressorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdThreshold, "Threshold", -60.0f, 0.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRatio, "Ratio", 1.0f, 20.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdAttack, "Attack", 0.1f, 200.0f, 10.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRelease, "Release", 5.0f, 1000.0f, 100.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMakeup, "Makeup Gain", -12.0f, 12.0f, 0.0f));
    
    return { params.begin(), params.end() };
}

CompressorModuleProcessor::CompressorModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(7), true) // 0-1: Audio In, 2-6: Threshold/Ratio/Attack/Release/Makeup Mods
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "CompressorParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue(paramIdThreshold);
    ratioParam = apvts.getRawParameterValue(paramIdRatio);
    attackParam = apvts.getRawParameterValue(paramIdAttack);
    releaseParam = apvts.getRawParameterValue(paramIdRelease);
    makeupParam = apvts.getRawParameterValue(paramIdMakeup);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void CompressorModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2;

    compressor.prepare(spec);
    compressor.reset();
}

void CompressorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    // Copy input to output for in-place processing
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }

    // --- Update DSP Parameters from unified input bus (once per block) ---
    float finalThreshold = thresholdParam->load();
    if (isParamInputConnected(paramIdThresholdMod) && inBus.getNumChannels() > 2)
        finalThreshold = juce::jmap(inBus.getSample(2, 0), 0.0f, 1.0f, -60.0f, 0.0f);
        
    float finalRatio = ratioParam->load();
    if (isParamInputConnected(paramIdRatioMod) && inBus.getNumChannels() > 3)
        finalRatio = juce::jmap(inBus.getSample(3, 0), 0.0f, 1.0f, 1.0f, 20.0f);

    float finalAttack = attackParam->load();
    if (isParamInputConnected(paramIdAttackMod) && inBus.getNumChannels() > 4)
        finalAttack = juce::jmap(inBus.getSample(4, 0), 0.0f, 1.0f, 0.1f, 200.0f);

    float finalRelease = releaseParam->load();
    if (isParamInputConnected(paramIdReleaseMod) && inBus.getNumChannels() > 5)
        finalRelease = juce::jmap(inBus.getSample(5, 0), 0.0f, 1.0f, 5.0f, 1000.0f);
        
    float finalMakeup = makeupParam->load();
    if (isParamInputConnected(paramIdMakeupMod) && inBus.getNumChannels() > 6)
        finalMakeup = juce::jmap(inBus.getSample(6, 0), 0.0f, 1.0f, -12.0f, 12.0f);

    compressor.setThreshold(finalThreshold);
    compressor.setRatio(finalRatio);
    compressor.setAttack(finalAttack);
    compressor.setRelease(finalRelease);
    
    // --- Process the Audio ---
    juce::dsp::AudioBlock<float> block(outBus);
    juce::dsp::ProcessContextReplacing<float> context(block);
    compressor.process(context);

    // Apply makeup gain
    outBus.applyGain(juce::Decibels::decibelsToGain(finalMakeup));

    // --- Update UI Telemetry & Tooltips ---
    setLiveParamValue("threshold_live", finalThreshold);
    setLiveParamValue("ratio_live", finalRatio);
    setLiveParamValue("attack_live", finalAttack);
    setLiveParamValue("release_live", finalRelease);
    setLiveParamValue("makeup_live", finalMakeup);
    
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool CompressorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdThresholdMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdRatioMod)     { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdAttackMod)    { outChannelIndexInBus = 4; return true; }
    if (paramId == paramIdReleaseMod)   { outChannelIndexInBus = 5; return true; }
    if (paramId == paramIdMakeupMod)    { outChannelIndexInBus = 6; return true; }
    return false;
}

juce::String CompressorModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    // Modulation bus starts at channel 2
    if (channel == 2) return "Thresh Mod";
    if (channel == 3) return "Ratio Mod";
    if (channel == 4) return "Attack Mod";
    if (channel == 5) return "Release Mod";
    if (channel == 6) return "Makeup Mod";
    return {};
}

juce::String CompressorModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void CompressorModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    // Lambda that correctly handles modulation
    auto drawSlider = [&](const char* label, const juce::String& paramId, const juce::String& modId, float min, float max, const char* format) {
        bool isMod = isParamModulated(modId);
        float value = isMod ? getLiveParamValueFor(modId, paramId + juce::String("_live"), ap.getRawParameterValue(paramId)->load())
                            : ap.getRawParameterValue(paramId)->load();
        
        if (isMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(label, &value, min, max, format))
            if (!isMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        if (!isMod) adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    };

    drawSlider("Threshold", paramIdThreshold, paramIdThresholdMod, -60.0f, 0.0f, "%.1f dB");
    drawSlider("Ratio", paramIdRatio, paramIdRatioMod, 1.0f, 20.0f, "%.1f : 1");
    drawSlider("Attack", paramIdAttack, paramIdAttackMod, 0.1f, 200.0f, "%.1f ms");
    drawSlider("Release", paramIdRelease, paramIdReleaseMod, 5.0f, 1000.0f, "%.0f ms");
    drawSlider("Makeup", paramIdMakeup, paramIdMakeupMod, -12.0f, 12.0f, "%.1f dB");

    ImGui::PopItemWidth();
}

void CompressorModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Thresh Mod", 2);
    helpers.drawAudioInputPin("Ratio Mod", 3);
    helpers.drawAudioInputPin("Attack Mod", 4);
    helpers.drawAudioInputPin("Release Mod", 5);
    helpers.drawAudioInputPin("Makeup Mod", 6);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\CompressorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class CompressorModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdThreshold = "threshold";
    static constexpr auto paramIdRatio = "ratio";
    static constexpr auto paramIdAttack = "attack";
    static constexpr auto paramIdRelease = "release";
    static constexpr auto paramIdMakeup = "makeup";

    // Virtual IDs for modulation inputs
    static constexpr auto paramIdThresholdMod = "threshold_mod";
    static constexpr auto paramIdRatioMod = "ratio_mod";
    static constexpr auto paramIdAttackMod = "attack_mod";
    static constexpr auto paramIdReleaseMod = "release_mod";
    static constexpr auto paramIdMakeupMod = "makeup_mod";

    CompressorModuleProcessor();
    ~CompressorModuleProcessor() override = default;

    const juce::String getName() const override { return "compressor"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // The core JUCE DSP Compressor object
    juce::dsp::Compressor<float> compressor;

    // Cached atomic pointers to parameters
    std::atomic<float>* thresholdParam { nullptr };
    std::atomic<float>* ratioParam { nullptr };
    std::atomic<float>* attackParam { nullptr };
    std::atomic<float>* releaseParam { nullptr };
    std::atomic<float>* makeupParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\CVMixerModuleProcessor.cpp
================================================================================


#include "CVMixerModuleProcessor.h"

CVMixerModuleProcessor::CVMixerModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("CV Inputs", juce::AudioChannelSet::discreteChannels(4), true)  // Bus 0: A, B, C, D
        .withInput ("Crossfade Mod", juce::AudioChannelSet::mono(), true)           // Bus 1
        .withInput ("Level A Mod", juce::AudioChannelSet::mono(), true)             // Bus 2
        .withInput ("Level C Mod", juce::AudioChannelSet::mono(), true)             // Bus 3
        .withInput ("Level D Mod", juce::AudioChannelSet::mono(), true)             // Bus 4
        .withOutput("Outputs", juce::AudioChannelSet::discreteChannels(2), true)),  // Bus 0: Mix Out, Inv Out
      apvts (*this, nullptr, "CVMixerParams", createParameterLayout())
{
    crossfadeParam = apvts.getRawParameterValue ("crossfade");
    levelAParam    = apvts.getRawParameterValue ("levelA");
    levelCParam    = apvts.getRawParameterValue ("levelC");
    levelDParam    = apvts.getRawParameterValue ("levelD");

    // Initialize value tooltips for the two outputs
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Mix Out
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Inv Out
}

juce::AudioProcessorValueTreeState::ParameterLayout CVMixerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    
    // Crossfade: -1 = full A, 0 = equal mix, +1 = full B
    p.push_back (std::make_unique<juce::AudioParameterFloat> (
        "crossfade", "Crossfade A/B", 
        juce::NormalisableRange<float> (-1.0f, 1.0f, 0.001f), 0.0f));
    
    // Level A: master level for the A/B crossfade section (0..1)
    p.push_back (std::make_unique<juce::AudioParameterFloat> (
        "levelA", "Level A/B", 
        juce::NormalisableRange<float> (0.0f, 1.0f, 0.001f), 1.0f));
    
    // Level C: bipolar for adding/subtracting input C
    p.push_back (std::make_unique<juce::AudioParameterFloat> (
        "levelC", "Level C", 
        juce::NormalisableRange<float> (-1.0f, 1.0f, 0.001f), 0.0f));
    
    // Level D: bipolar for adding/subtracting input D
    p.push_back (std::make_unique<juce::AudioParameterFloat> (
        "levelD", "Level D", 
        juce::NormalisableRange<float> (-1.0f, 1.0f, 0.001f), 0.0f));
    
    return { p.begin(), p.end() };
}

void CVMixerModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (sampleRate, samplesPerBlock);
}

void CVMixerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    // Get input and output buses
    auto cvInputs = getBusBuffer(buffer, true, 0);  // 4 discrete channels: A, B, C, D
    auto outputs = getBusBuffer(buffer, false, 0);  // 2 discrete channels: Mix Out, Inv Out
    
    const int numSamples = buffer.getNumSamples();
    
    // Read modulation CV values (first sample of each mod bus)
    float crossfadeMod = 0.0f;
    float levelAMod = 0.0f;
    float levelCMod = 0.0f;
    float levelDMod = 0.0f;
    
    if (isParamInputConnected("crossfade"))
    {
        const auto& modBus = getBusBuffer(buffer, true, 1);
        if (modBus.getNumChannels() > 0)
            crossfadeMod = modBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("levelA"))
    {
        const auto& modBus = getBusBuffer(buffer, true, 2);
        if (modBus.getNumChannels() > 0)
            levelAMod = modBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("levelC"))
    {
        const auto& modBus = getBusBuffer(buffer, true, 3);
        if (modBus.getNumChannels() > 0)
            levelCMod = modBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("levelD"))
    {
        const auto& modBus = getBusBuffer(buffer, true, 4);
        if (modBus.getNumChannels() > 0)
            levelDMod = modBus.getReadPointer(0)[0];
    }
    
    // Determine final parameter values (modulated or from parameters)
    float crossfade = 0.0f;
    if (isParamInputConnected("crossfade"))
    {
        // Map CV [0,1] to crossfade [-1, 1]
        crossfade = -1.0f + crossfadeMod * 2.0f;
    }
    else
    {
        crossfade = crossfadeParam != nullptr ? crossfadeParam->load() : 0.0f;
    }
    
    float levelA = 0.0f;
    if (isParamInputConnected("levelA"))
    {
        // Map CV [0,1] to levelA [0, 1]
        levelA = levelAMod;
    }
    else
    {
        levelA = levelAParam != nullptr ? levelAParam->load() : 1.0f;
    }
    
    float levelC = 0.0f;
    if (isParamInputConnected("levelC"))
    {
        // Map CV [0,1] to levelC [-1, 1]
        levelC = -1.0f + levelCMod * 2.0f;
    }
    else
    {
        levelC = levelCParam != nullptr ? levelCParam->load() : 0.0f;
    }
    
    float levelD = 0.0f;
    if (isParamInputConnected("levelD"))
    {
        // Map CV [0,1] to levelD [-1, 1]
        levelD = -1.0f + levelDMod * 2.0f;
    }
    else
    {
        levelD = levelDParam != nullptr ? levelDParam->load() : 0.0f;
    }
    
    // Get read pointers for all inputs (may be null if not connected)
    const float* inA = cvInputs.getNumChannels() > 0 ? cvInputs.getReadPointer(0) : nullptr;
    const float* inB = cvInputs.getNumChannels() > 1 ? cvInputs.getReadPointer(1) : nullptr;
    const float* inC = cvInputs.getNumChannels() > 2 ? cvInputs.getReadPointer(2) : nullptr;
    const float* inD = cvInputs.getNumChannels() > 3 ? cvInputs.getReadPointer(3) : nullptr;
    
    // Get write pointers for outputs
    float* mixOut = outputs.getNumChannels() > 0 ? outputs.getWritePointer(0) : nullptr;
    float* invOut = outputs.getNumChannels() > 1 ? outputs.getWritePointer(1) : nullptr;
    
    // Process each sample
    for (int i = 0; i < numSamples; ++i)
    {
        // Read input samples (0.0 if not connected)
        const float a = inA ? inA[i] : 0.0f;
        const float b = inB ? inB[i] : 0.0f;
        const float c = inC ? inC[i] : 0.0f;
        const float d = inD ? inD[i] : 0.0f;
        
        // 1. Linear crossfade between A and B
        // Convert crossfade from [-1, 1] to mix amount [0, 1]
        const float mixAmount = (crossfade + 1.0f) * 0.5f;
        const float crossfaded_AB = (a * (1.0f - mixAmount)) + (b * mixAmount);
        
        // 2. Apply master level for the A/B section
        const float final_AB = crossfaded_AB * levelA;
        
        // 3. Sum all inputs with their respective levels
        const float finalMix = final_AB + (c * levelC) + (d * levelD);
        
        // 4. Write to outputs
        if (mixOut) mixOut[i] = finalMix;
        if (invOut) invOut[i] = -finalMix;
    }
    
    // Store live modulated values for UI display
    setLiveParamValue("crossfade_live", crossfade);
    setLiveParamValue("levelA_live", levelA);
    setLiveParamValue("levelC_live", levelC);
    setLiveParamValue("levelD_live", levelD);
    
    // Update tooltips with last sample values
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0] && mixOut) lastOutputValues[0]->store(mixOut[numSamples - 1]);
        if (lastOutputValues[1] && invOut) lastOutputValues[1]->store(invOut[numSamples - 1]);
    }
}

#if defined(PRESET_CREATOR_UI)
void CVMixerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float crossfade = crossfadeParam != nullptr ? crossfadeParam->load() : 0.0f;
    float levelA = levelAParam != nullptr ? levelAParam->load() : 1.0f;
    float levelC = levelCParam != nullptr ? levelCParam->load() : 0.0f;
    float levelD = levelDParam != nullptr ? levelDParam->load() : 0.0f;

    ImGui::PushItemWidth (itemWidth);

    // Crossfade A/B (horizontal slider)
    bool isCrossfadeModulated = isParamModulated("crossfade");
    if (isCrossfadeModulated) {
        crossfade = getLiveParamValueFor("crossfade", "crossfade_live", crossfade);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("A <-> B", &crossfade, -1.0f, 1.0f)) {
        if (!isCrossfadeModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("crossfade"))) *p = crossfade;
        }
    }
    if (!isCrossfadeModulated) adjustParamOnWheel (ap.getParameter ("crossfade"), "crossfade", crossfade);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isCrossfadeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::Spacing();

    // Level A (master level for A/B section)
    bool isLevelAModulated = isParamModulated("levelA");
    if (isLevelAModulated) {
        levelA = getLiveParamValueFor("levelA", "levelA_live", levelA);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Level A/B", &levelA, 0.0f, 1.0f)) {
        if (!isLevelAModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("levelA"))) *p = levelA;
        }
    }
    if (!isLevelAModulated) adjustParamOnWheel (ap.getParameter ("levelA"), "levelA", levelA);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isLevelAModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Level C (bipolar)
    bool isLevelCModulated = isParamModulated("levelC");
    if (isLevelCModulated) {
        levelC = getLiveParamValueFor("levelC", "levelC_live", levelC);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Level C", &levelC, -1.0f, 1.0f)) {
        if (!isLevelCModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("levelC"))) *p = levelC;
        }
    }
    if (!isLevelCModulated) adjustParamOnWheel (ap.getParameter ("levelC"), "levelC", levelC);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isLevelCModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Level D (bipolar)
    bool isLevelDModulated = isParamModulated("levelD");
    if (isLevelDModulated) {
        levelD = getLiveParamValueFor("levelD", "levelD_live", levelD);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Level D", &levelD, -1.0f, 1.0f)) {
        if (!isLevelDModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("levelD"))) *p = levelD;
        }
    }
    if (!isLevelDModulated) adjustParamOnWheel (ap.getParameter ("levelD"), "levelD", levelD);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isLevelDModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}
#endif

void CVMixerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Audio inputs
    helpers.drawAudioInputPin("In A", 0);
    helpers.drawAudioInputPin("In B", 1);
    helpers.drawAudioInputPin("In C", 2);
    helpers.drawAudioInputPin("In D", 3);

    // Modulation inputs
    int busIdx, chanInBus;
    if (getParamRouting("crossfade", busIdx, chanInBus))
        helpers.drawAudioInputPin("Crossfade Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("levelA", busIdx, chanInBus))
        helpers.drawAudioInputPin("Level A Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("levelC", busIdx, chanInBus))
        helpers.drawAudioInputPin("Level C Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("levelD", busIdx, chanInBus))
        helpers.drawAudioInputPin("Level D Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

    // Outputs
    helpers.drawAudioOutputPin("Mix Out", 0);
    helpers.drawAudioOutputPin("Inv Out", 1);
}

bool CVMixerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outChannelIndexInBus = 0;
    if (paramId == "crossfade") { outBusIndex = 1; return true; }
    if (paramId == "levelA")    { outBusIndex = 2; return true; }
    if (paramId == "levelC")    { outBusIndex = 3; return true; }
    if (paramId == "levelD")    { outBusIndex = 4; return true; }
    return false;
}



================================================================================
FILE: juce\Source\audio\modules\CVMixerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

/**
 * CVMixerModuleProcessor - A dedicated mixer for control voltages (CV/modulation signals).
 * 
 * Features:
 * - Linear crossfading between two inputs (A and B) for precise morphing
 * - Additional summing inputs (C and D) with bipolar level controls
 * - Inverted output for signal polarity flipping
 * - Designed for CV signals with mathematically predictable linear operations
 */
class CVMixerModuleProcessor : public ModuleProcessor
{
public:
    CVMixerModuleProcessor();
    ~CVMixerModuleProcessor() override = default;

    const juce::String getName() const override { return "cv mixer"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In A";
            case 1: return "In B";
            case 2: return "In C";
            case 3: return "In D";
            case 4: return "Crossfade Mod";
            case 5: return "Level A Mod";
            case 6: return "Level C Mod";
            case 7: return "Level D Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Mix Out";
            case 1: return "Inv Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* crossfadeParam { nullptr };  // -1..1 (A to B)
    std::atomic<float>* levelAParam { nullptr };     // 0..1 (master level for A/B crossfade)
    std::atomic<float>* levelCParam { nullptr };     // -1..1 (bipolar for C)
    std::atomic<float>* levelDParam { nullptr };     // -1..1 (bipolar for D)
};



================================================================================
FILE: juce\Source\audio\modules\DebugModuleProcessor.cpp
================================================================================


#include "DebugModuleProcessor.h"
#include "../../utils/RtLogger.h"
#include "../graph/ModularSynthProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#include "../../preset_creator/PinDatabase.h"
#endif

juce::AudioProcessorValueTreeState::ParameterLayout DebugModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    return { params.begin(), params.end() };
}

DebugModuleProcessor::DebugModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("In", juce::AudioChannelSet::discreteChannels(8), true)),
      apvts(*this, nullptr, "DebugParams", createParameterLayout())
{
    fifoBuffer.resize(2048);
}

void DebugModuleProcessor::prepareToPlay(double sampleRate, int /*samplesPerBlock*/)
{
    currentSampleRate = (sampleRate > 0.0 ? sampleRate : 44100.0);
    totalSamples = 0;
    for (auto& v : lastReported) v = 0.0f;
    droppedEvents.store(0);
    for (auto& s : stats) { s.last = 0.0f; s.min = 1e9f; s.max = -1e9f; s.rmsAcc = 0.0f; s.rmsCount = 0; }
}

void DebugModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    const int numSamples = buffer.getNumSamples();
    const int channels = juce::jmin(getTotalNumInputChannels(), 8);

    int eventsThisBlock = 0;

    for (int ch = 0; ch < channels; ++ch)
    {
        if (! pinEnabled[(size_t) ch])
            continue;

        auto in = getBusBuffer(buffer, true, 0); // single bus, multi-channel
        const float value = in.getMagnitude(ch, 0, numSamples);

        const float delta = std::abs(value - lastReported[(size_t) ch]);
        if (delta >= threshold && eventsThisBlock < maxEventsPerBlock)
        {
            int start1, size1, start2, size2;
            fifo.prepareToWrite(1, start1, size1, start2, size2);
            if (size1 > 0)
            {
                fifoBuffer[(size_t) start1] = DebugEvent{ (juce::uint8) ch, value, totalSamples };
                fifo.finishedWrite(1);
                lastReported[(size_t) ch] = value;
                ++eventsThisBlock;
            }
            else
            {
                droppedEvents.fetch_add(1);
            }
        }
    }

    totalSamples += (juce::uint64) numSamples;
}

#if defined(PRESET_CREATOR_UI)
void DebugModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)> & /*isParamModulated*/, const std::function<void()> & /*onModificationEnded*/)
{
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::Checkbox("Pause", &uiPaused)) {}
    ImGui::SameLine(); ImGui::Text("Dropped: %u", droppedEvents.load());
    ImGui::SliderFloat("Threshold", &threshold, 0.0f, 0.05f, "%.4f");
    ImGui::SliderInt("Max events/block", &maxEventsPerBlock, 1, 512);
    if (ImGui::Button("Clear")) { uiEvents.clear(); for (auto& s : stats) { s.min = 1e9f; s.max = -1e9f; s.rmsAcc = 0.0f; s.rmsCount = 0; } }
    ImGui::SameLine();
    if (ImGui::Button("Copy CSV"))
    {
        // Build connection map from parent synth (src module/channel for each Debug input channel)
        juce::String csv;
        csv << "time_seconds,src_logical_id,src_module,src_channel,src_label,dst_logical_id,dst_module,dst_channel,dst_label,value\n";

        auto* synth = getParent();
        juce::uint32 selfLid = 0;
        std::array<std::vector<std::pair<juce::uint32,int>>, 8> chanSources; // per dst channel: list of (srcLid, srcChan)
        std::map<juce::uint32, juce::String> lidToType;
        if (synth != nullptr)
        {
            for (const auto& p : synth->getModulesInfo())
            {
                if (synth->getModuleForLogical(p.first) == this) { selfLid = p.first; break; }
            }
            for (const auto& p : synth->getModulesInfo()) lidToType[p.first] = p.second;
            if (selfLid != 0)
            {
                for (const auto& c : synth->getConnectionsInfo())
                {
                    if (!c.dstIsOutput && c.dstLogicalId == selfLid && c.dstChan >= 0 && c.dstChan < 8)
                        chanSources[(size_t) c.dstChan].push_back({ c.srcLogicalId, c.srcChan });
                }
            }
        }

        auto outputLabelFor = [&](const juce::String& moduleType, int channel, ModuleProcessor* mp) -> juce::String
        {
#if defined(PRESET_CREATOR_UI)
            auto it = getModulePinDatabase().find(moduleType);
            if (it != getModulePinDatabase().end())
            {
                for (const auto& ap : it->second.audioOuts)
                    if (ap.channel == channel) return ap.name;
            }
#endif
            return mp ? mp->getAudioOutputLabel(channel) : juce::String();
        };

        for (const auto& ev : uiEvents)
        {
            const double tSec = (currentSampleRate > 0.0 ? (double) ev.sampleCounter / currentSampleRate : 0.0);
            const int dstChan = (int) ev.pinIndex; // 0-based
            const juce::String dstModule = "Debug";
            if (synth != nullptr && selfLid != 0 && !chanSources[(size_t) dstChan].empty())
            {
                for (const auto& src : chanSources[(size_t) dstChan])
                {
                    ModuleProcessor* srcMp = synth->getModuleForLogical(src.first);
                    const juce::String srcName = lidToType.count(src.first) ? lidToType[src.first] : (srcMp ? srcMp->getName() : juce::String("<unknown>"));
                    const juce::String srcLabel = outputLabelFor(srcName, src.second, srcMp);
                    const juce::String dstLabel = getAudioInputLabel(dstChan);
                    csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcName << "," << juce::String(src.second) << "," << srcLabel
                        << "," << juce::String((int) selfLid) << "," << dstModule << "," << juce::String(dstChan) << "," << dstLabel << "," << juce::String(ev.value, 6) << "\n";
                }
            }
            else
            {
                const juce::String dstLabel = getAudioInputLabel(dstChan);
                csv << juce::String(tSec, 6) << ",,,,,," << juce::String((int) selfLid) << "," << dstModule << "," << juce::String(dstChan) << "," << dstLabel << "," << juce::String(ev.value, 6) << "\n";
            }
        }
        const juce::String copy = std::move(csv);
        std::string utf8 = copy.toStdString();
        ImGui::SetClipboardText(utf8.c_str());
    }
    ImGui::SameLine();
    if (ImGui::Button("Export CSV"))
    {
        static juce::String lastExportPath;
        juce::File dir = juce::File::getSpecialLocation(juce::File::userDocumentsDirectory)
                              .getChildFile("ColliderDebugLogs");
        if (! dir.exists()) (void) dir.createDirectory();
        juce::File file = dir.getNonexistentChildFile("debug_log", ".csv");
        juce::FileOutputStream out (file);
        if (out.openedOk())
        {
            // Build mapping like in Copy CSV
            juce::String csv;
            csv << "time_seconds,src_logical_id,src_module,src_channel,src_label,dst_logical_id,dst_module,dst_channel,dst_label,value\n";
            auto* synth = getParent();
            juce::uint32 selfLid = 0;
            std::array<std::vector<std::pair<juce::uint32,int>>, 8> chanSources;
            std::map<juce::uint32, juce::String> lidToType;
            if (synth != nullptr)
            {
                for (const auto& p : synth->getModulesInfo())
                {
                    if (synth->getModuleForLogical(p.first) == this) { selfLid = p.first; break; }
                }
                for (const auto& p : synth->getModulesInfo()) lidToType[p.first] = p.second;
                if (selfLid != 0)
                {
                    for (const auto& c : synth->getConnectionsInfo())
                    {
                    if (!c.dstIsOutput && c.dstLogicalId == selfLid && c.dstChan >= 0 && c.dstChan < 8)
                        chanSources[(size_t) c.dstChan].push_back({ c.srcLogicalId, c.srcChan });
                    }
                }
            }

            auto outputLabelFor = [&](const juce::String& moduleType, int channel, ModuleProcessor* mp) -> juce::String
            {
#if defined(PRESET_CREATOR_UI)
                auto it = getModulePinDatabase().find(moduleType);
                if (it != getModulePinDatabase().end())
                {
                    for (const auto& ap : it->second.audioOuts)
                        if (ap.channel == channel) return ap.name;
                }
#endif
                return mp ? mp->getAudioOutputLabel(channel) : juce::String();
            };

            for (const auto& ev : uiEvents)
            {
                const double tSec = (currentSampleRate > 0.0 ? (double) ev.sampleCounter / currentSampleRate : 0.0);
                const int dstChan = (int) ev.pinIndex;
                const juce::String dstModule = "Debug";
                if (synth != nullptr && selfLid != 0 && !chanSources[(size_t) dstChan].empty())
                {
                    for (const auto& src : chanSources[(size_t) dstChan])
                    {
                        ModuleProcessor* srcMp = synth->getModuleForLogical(src.first);
                        const juce::String srcName = lidToType.count(src.first) ? lidToType[src.first] : (srcMp ? srcMp->getName() : juce::String("<unknown>"));
                        const juce::String srcLabel = outputLabelFor(srcName, src.second, srcMp);
                        const juce::String dstLabel = getAudioInputLabel(dstChan);
                        csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcName << "," << juce::String(src.second) << "," << srcLabel
                            << "," << juce::String((int) selfLid) << "," << dstModule << "," << juce::String(dstChan) << "," << dstLabel << "," << juce::String(ev.value, 6) << "\n";
                    }
                }
                else
                {
                    const juce::String dstLabel = getAudioInputLabel(dstChan);
                    csv << juce::String(tSec, 6) << ",,,,,," << juce::String((int) selfLid) << "," << dstModule << "," << juce::String(dstChan) << "," << dstLabel << "," << juce::String(ev.value, 6) << "\n";
                }
            }
            out.writeText (csv, false, false, "\n");
            out.flush();
            lastExportPath = file.getFullPathName();
        }
        if (lastExportPath.isNotEmpty())
        {
            ImGui::SameLine();
            ImGui::TextUnformatted(lastExportPath.toRawUTF8());
        }
    }
    ImGui::PopItemWidth();

    // Drain FIFO
    int ready = fifo.getNumReady();
    while (ready > 0)
    {
        int start1, size1, start2, size2;
        fifo.prepareToRead(ready, start1, size1, start2, size2);
        auto consume = [&](int start, int size)
        {
            for (int i = 0; i < size; ++i)
            {
                const auto& ev = fifoBuffer[(size_t) (start + i)];
                // update stats
                auto& s = stats[(size_t) ev.pinIndex];
                s.last = ev.value;
                s.min = std::min(s.min, ev.value);
                s.max = std::max(s.max, ev.value);
                s.rmsAcc += ev.value * ev.value;
                s.rmsCount += 1;
                if (! uiPaused)
                    uiEvents.push_back(ev);
            }
        };
        if (size1 > 0) consume(start1, size1);
        if (size2 > 0) consume(start2, size2);
        fifo.finishedRead(size1 + size2);
        ready -= (size1 + size2);
    }

    // Bound UI list
    constexpr size_t kMaxUiEvents = 1000;
    if (uiEvents.size() > kMaxUiEvents)
        uiEvents.erase(uiEvents.begin(), uiEvents.begin() + (uiEvents.size() - kMaxUiEvents));

    // Live per-pin row
    if (ImGui::BeginTable("dbg_stats", 8, ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_RowBg))
    {
        for (int ch = 0; ch < 8; ++ch)
        {
            ImGui::TableNextColumn();
            const auto& s = stats[(size_t) ch];
            const float rms = s.rmsCount > 0 ? std::sqrt(s.rmsAcc / (float) s.rmsCount) : 0.0f;
            ImGui::Text("%d: %.3f\nmin %.3f\nmax %.3f\nrms %.3f", ch+1, s.last, s.min, s.max, rms);
        }
        ImGui::EndTable();
    }

    // Log view
    ImGui::Text("Events (newest first):");
    ImGui::BeginChild("##dbg_log", ImVec2(itemWidth, 160), true, ImGuiWindowFlags_HorizontalScrollbar);
    for (auto it = uiEvents.rbegin(); it != uiEvents.rend(); ++it)
    {
        // Convert sampleCounter to time in seconds for quick reference
        const double tSec = (currentSampleRate > 0.0 ? (double) it->sampleCounter / currentSampleRate : 0.0);
        ImGui::Text("t=%.3fs pin=%u val=%.4f", tSec, (unsigned) it->pinIndex + 1u, it->value);
    }
    ImGui::EndChild();
}

void DebugModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // One bus with 8 channels, editor pins refer to channel indices 0..7
    helpers.drawAudioInputPin("In 1", 0);
    helpers.drawAudioInputPin("In 2", 1);
    helpers.drawAudioInputPin("In 3", 2);
    helpers.drawAudioInputPin("In 4", 3);
    helpers.drawAudioInputPin("In 5", 4);
    helpers.drawAudioInputPin("In 6", 5);
    helpers.drawAudioInputPin("In 7", 6);
    helpers.drawAudioInputPin("In 8", 7);
}
#endif





================================================================================
FILE: juce\Source\audio\modules\DebugModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_core/juce_core.h>
#include <array>

struct DebugEvent
{
    juce::uint8 pinIndex;       // 0..7
    float value;                // captured value (e.g., peak)
    juce::uint64 sampleCounter; // sample-accurate timestamp
};

class DebugModuleProcessor : public ModuleProcessor
{
public:
    DebugModuleProcessor();
    ~DebugModuleProcessor() override = default;

    const juce::String getName() const override { return "debug"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    // Audio-thread state
    double currentSampleRate { 44100.0 };
    juce::uint64 totalSamples { 0 };
    std::array<float, 8> lastReported { { 0,0,0,0,0,0,0,0 } };
    std::array<uint8_t, 8> pinEnabled { { 1,1,1,1,1,1,1,1 } };
    float threshold { 0.001f };
    int maxEventsPerBlock { 64 };

    // Lock-free SPSC queue
    juce::AbstractFifo fifo { 2048 };
    std::vector<DebugEvent> fifoBuffer; // size == fifo.getTotalSize()
    std::atomic<uint32_t> droppedEvents { 0 };

    // UI-thread state
    struct PinStats { float last { 0.0f }; float min { 1e9f }; float max { -1e9f }; float rmsAcc { 0.0f }; int rmsCount { 0 }; };
    std::array<PinStats, 8> stats;
    std::vector<DebugEvent> uiEvents; // bounded list
    bool uiPaused { false };
};




================================================================================
FILE: juce\Source\audio\modules\DeCrackleModuleProcessor.cpp
================================================================================


#include "DeCrackleModuleProcessor.h"

DeCrackleModuleProcessor::DeCrackleModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Input", juce::AudioChannelSet::stereo(), true)
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "DeCrackleParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue("threshold");
    smoothingTimeMsParam = apvts.getRawParameterValue("smoothing_time");
    amountParam = apvts.getRawParameterValue("amount");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout DeCrackleModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    // Threshold: 0.01 to 1.0
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "threshold", "Threshold",
        juce::NormalisableRange<float>(0.01f, 1.0f),
        0.1f));
    
    // Smoothing time: 0.1ms to 20.0ms (logarithmic)
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "smoothing_time", "Smoothing Time",
        juce::NormalisableRange<float>(0.1f, 20.0f, 0.0f, 0.3f),
        5.0f));
    
    // Amount (dry/wet): 0.0 to 1.0
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "amount", "Amount",
        juce::NormalisableRange<float>(0.0f, 1.0f),
        1.0f));
    
    return { params.begin(), params.end() };
}

void DeCrackleModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(samplesPerBlock);
    currentSampleRate = sampleRate;
    
    // Reset state
    for (int ch = 0; ch < 2; ++ch)
    {
        lastInputSample[ch] = 0.0f;
        lastOutputSample[ch] = 0.0f;
        smoothingSamplesRemaining[ch] = 0;
    }
}

void DeCrackleModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto in = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);
    
    const int nSamps = buffer.getNumSamples();
    const int numChannels = juce::jmin(out.getNumChannels(), 2);
    
    // Get parameter values
    const float threshold = thresholdParam != nullptr ? thresholdParam->load() : 0.1f;
    const float smoothingMs = smoothingTimeMsParam != nullptr ? smoothingTimeMsParam->load() : 5.0f;
    const float wet = amountParam != nullptr ? amountParam->load() : 1.0f;
    const float dry = 1.0f - wet;
    
    // Calculate smoothing coefficient
    // Use a fixed, fast coefficient for the smoothing
    const float smoothingCoeff = 0.1f;
    
    for (int ch = 0; ch < numChannels; ++ch)
    {
        const float* input = in.getReadPointer(juce::jmin(ch, in.getNumChannels() - 1));
        float* output = out.getWritePointer(ch);
        
        for (int i = 0; i < nSamps; ++i)
        {
            float inputSample = input[i];
            
            // 1. Detect Crackle (discontinuity)
            float delta = std::abs(inputSample - lastInputSample[ch]);
            if (delta > threshold)
            {
                // A crackle is detected. Activate smoothing for a short period.
                smoothingSamplesRemaining[ch] = static_cast<int>(smoothingMs * 0.001f * currentSampleRate);
            }
            
            // 2. Apply Smoothing if Active
            float processedSample;
            if (smoothingSamplesRemaining[ch] > 0)
            {
                // Apply fast slew to smooth the transition
                lastOutputSample[ch] += (inputSample - lastOutputSample[ch]) * smoothingCoeff;
                processedSample = lastOutputSample[ch];
                smoothingSamplesRemaining[ch]--;
            }
            else
            {
                // No smoothing needed, output is the same as input
                processedSample = inputSample;
                lastOutputSample[ch] = inputSample;
            }
            
            // 3. Apply Dry/Wet Mix
            output[i] = (inputSample * dry) + (processedSample * wet);
            
            // 4. Store last input sample for the next iteration's delta calculation
            lastInputSample[ch] = inputSample;
        }
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(out.getSample(0, nSamps - 1));
        if (lastOutputValues[1] && numChannels > 1) lastOutputValues[1]->store(out.getSample(1, nSamps - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
bool DeCrackleModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    juce::ignoreUnused(paramId, outBusIndex, outChannelIndexInBus);
    // No modulation inputs for this module
    return false;
}
#endif



================================================================================
FILE: juce\Source\audio\modules\DeCrackleModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class DeCrackleModuleProcessor : public ModuleProcessor
{
public:
    DeCrackleModuleProcessor();
    ~DeCrackleModuleProcessor() override = default;

    const juce::String getName() const override { return "de-crackle"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        float threshold = thresholdParam != nullptr ? thresholdParam->load() : 0.1f;
        float smoothingMs = smoothingTimeMsParam != nullptr ? smoothingTimeMsParam->load() : 5.0f;
        float amount = amountParam != nullptr ? amountParam->load() : 1.0f;
        
        ImGui::PushItemWidth(itemWidth);
        
        // Threshold slider
        if (ImGui::SliderFloat("Threshold", &threshold, 0.01f, 1.0f, "%.3f")) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("threshold"))) *p = threshold;
        }
        adjustParamOnWheel(ap.getParameter("threshold"), "threshold", threshold);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        // Smoothing time slider
        if (ImGui::SliderFloat("Smoothing (ms)", &smoothingMs, 0.1f, 20.0f, "%.2f", ImGuiSliderFlags_Logarithmic)) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("smoothing_time"))) *p = smoothingMs;
        }
        adjustParamOnWheel(ap.getParameter("smoothing_time"), "smoothing_time", smoothingMs);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        // Amount (dry/wet) slider
        if (ImGui::SliderFloat("Amount", &amount, 0.0f, 1.0f, "%.2f")) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("amount"))) *p = amount;
        }
        adjustParamOnWheel(ap.getParameter("amount"), "amount", amount);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);
        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* thresholdParam { nullptr };
    std::atomic<float>* smoothingTimeMsParam { nullptr };
    std::atomic<float>* amountParam { nullptr };
    
    // State variables for discontinuity detection (per channel)
    float lastInputSample[2] { 0.0f, 0.0f };
    float lastOutputSample[2] { 0.0f, 0.0f };
    int smoothingSamplesRemaining[2] { 0, 0 };
    
    double currentSampleRate { 44100.0 };
};



================================================================================
FILE: juce\Source\audio\modules\DelayModuleProcessor.cpp
================================================================================


#include "DelayModuleProcessor.h"

DelayModuleProcessor::DelayModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("In", juce::AudioChannelSet::stereo(), true)
        .withInput ("Time Mod", juce::AudioChannelSet::mono(), true)
        .withInput ("Feedback Mod", juce::AudioChannelSet::mono(), true)
        .withInput ("Mix Mod", juce::AudioChannelSet::mono(), true)
        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "DelayParams", createParameterLayout())
{
    timeMsParam   = apvts.getRawParameterValue ("timeMs");
    feedbackParam = apvts.getRawParameterValue ("feedback");
    mixParam      = apvts.getRawParameterValue ("mix");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
    
    // Initialize smoothed values
    timeSm.reset(400.0f);
    feedbackSm.reset(0.4f);
    mixSm.reset(0.3f);
}

juce::AudioProcessorValueTreeState::ParameterLayout DelayModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("timeMs",  "Time (ms)", juce::NormalisableRange<float> (1.0f, 2000.0f, 0.01f, 0.4f), 400.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("feedback","Feedback",  juce::NormalisableRange<float> (0.0f, 0.95f), 0.4f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("mix",     "Mix",       juce::NormalisableRange<float> (0.0f, 1.0f), 0.3f));
    return { p.begin(), p.end() };
}

void DelayModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sr = sampleRate;
    maxDelaySamples = (int) std::ceil (2.0 * sr); // allow up to 2s safely
    dlL.setMaximumDelayInSamples (maxDelaySamples);
    dlR.setMaximumDelayInSamples (maxDelaySamples);
    juce::dsp::ProcessSpec spec { sr, (juce::uint32) samplesPerBlock, 1 };
    dlL.prepare (spec);
    dlR.prepare (spec);
    dlL.reset(); dlR.reset();
    
    // Set smoothing time for parameters (20ms for delay time, 10ms for others)
    timeSm.reset(sampleRate, 0.02);
    feedbackSm.reset(sampleRate, 0.01);
    mixSm.reset(sampleRate, 0.01);
    
    juce::Logger::writeToLog ("[Delay] prepare sr=" + juce::String (sr) + " maxSamps=" + juce::String (maxDelaySamples));
}

void DelayModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    // PER-SAMPLE FIX: Get pointers to modulation CV inputs, if they are connected
    const bool isTimeMod = isParamInputConnected("timeMs");
    const bool isFeedbackMod = isParamInputConnected("feedback");
    const bool isMixMod = isParamInputConnected("mix");

    const float* timeCV = isTimeMod ? getBusBuffer(buffer, true, 1).getReadPointer(0) : nullptr;
    const float* feedbackCV = isFeedbackMod ? getBusBuffer(buffer, true, 2).getReadPointer(0) : nullptr;
    const float* mixCV = isMixMod ? getBusBuffer(buffer, true, 3).getReadPointer(0) : nullptr;

    // Get base parameter values ONCE
    const float baseTimeMs = timeMsParam != nullptr ? timeMsParam->load() : 400.0f;
    const float baseFeedback = feedbackParam != nullptr ? feedbackParam->load() : 0.4f;
    const float baseMix = mixParam != nullptr ? mixParam->load() : 0.3f;

    // Variables to store last calculated values for UI feedback
    float lastTimeMs = baseTimeMs;
    float lastFeedback = baseFeedback;
    float lastMix = baseMix;

    auto processChannel = [&] (int ch)
    {
        float* d = buffer.getWritePointer (ch);
        for (int i = 0; i < buffer.getNumSamples(); ++i)
        {
            // PER-SAMPLE FIX: Calculate effective parameters FOR THIS SAMPLE
            float timeMs = baseTimeMs;
            if (isTimeMod && timeCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, timeCV[i]);
                // ADDITIVE MODULATION FIX: Add CV offset to base delay time
                const float octaveRange = 3.0f; // CV can modulate +/- 3 octaves of delay time
                const float octaveOffset = (cv - 0.5f) * octaveRange; // Center around 0, range [-1.5, +1.5] octaves
                timeMs = baseTimeMs * std::pow(2.0f, octaveOffset);
                timeMs = juce::jlimit(1.0f, 2000.0f, timeMs);
            }
            
            // Apply smoothing to delay time to prevent clicks
            timeSm.setTargetValue(timeMs);
            timeMs = timeSm.getNextValue();
            
            // Store for UI feedback
            lastTimeMs = timeMs;
            
            float fb = baseFeedback;
            if (isFeedbackMod && feedbackCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, feedbackCV[i]);
                // ADDITIVE MODULATION FIX: Add CV offset to base feedback
                const float feedbackRange = 0.3f; // CV can modulate feedback by +/- 0.3
                const float feedbackOffset = (cv - 0.5f) * feedbackRange; // Center around 0
                fb = baseFeedback + feedbackOffset;
                fb = juce::jlimit(0.0f, 0.95f, fb);
            }
            
            // Apply smoothing to feedback to prevent zipper noise
            feedbackSm.setTargetValue(fb);
            fb = feedbackSm.getNextValue();
            
            // Store for UI feedback
            lastFeedback = fb;
            
            float mix = baseMix;
            if (isMixMod && mixCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, mixCV[i]);
                // ADDITIVE MODULATION FIX: Add CV offset to base mix
                const float mixRange = 0.5f; // CV can modulate mix by +/- 0.5
                const float mixOffset = (cv - 0.5f) * mixRange; // Center around 0
                mix = baseMix + mixOffset;
                mix = juce::jlimit(0.0f, 1.0f, mix);
            }
            
            // Apply smoothing to mix to prevent zipper noise
            mixSm.setTargetValue(mix);
            mix = mixSm.getNextValue();
            
            // Store for UI feedback
            lastMix = mix;
            
            // Calculate delay samples for this sample
            float delaySamps = (timeMs / 1000.0f) * (float) sr;
            delaySamps = juce::jlimit (1.0f, (float) (maxDelaySamples - 1), delaySamps);
            
            // Set delay for this sample
            dlL.setDelay (delaySamps); dlR.setDelay (delaySamps);
            
            // Process this sample
            const float in = d[i];
            const float delayed = (ch == 0 ? dlL.popSample (0, delaySamps) : dlR.popSample (0, delaySamps));
            if (ch == 0) dlL.pushSample (0, in + delayed * fb); else dlR.pushSample (0, in + delayed * fb);
            d[i] = in * (1.0f - mix) + delayed * mix;
        }
    };
    processChannel (0);
    if (buffer.getNumChannels() > 1) processChannel (1);
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(buffer.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(buffer.getSample(1, buffer.getNumSamples() - 1));
    }

    // Store live modulated values for UI display
    setLiveParamValue("timeMs_live", lastTimeMs);
    setLiveParamValue("feedback_live", lastFeedback);
    setLiveParamValue("mix_live", lastMix);
}

// Parameter bus contract implementation
bool DelayModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outChannelIndexInBus = 0;
    if (paramId == "timeMs")   { outBusIndex = 1; return true; }
    if (paramId == "feedback") { outBusIndex = 2; return true; }
    if (paramId == "mix")      { outBusIndex = 3; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\DelayModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class DelayModuleProcessor : public ModuleProcessor
{
public:
    DelayModuleProcessor();
    ~DelayModuleProcessor() override = default;

    const juce::String getName() const override { return "delay"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        // Get live modulated values for display
        bool isTimeModulated = isParamModulated("timeMs");
        bool isFbModulated = isParamModulated("feedback");
        bool isMixModulated = isParamModulated("mix");
        
        // Use correct mod param IDs (same as parameter IDs)
        float timeMs = isTimeModulated ? getLiveParamValueFor("timeMs", "timeMs_live", timeMsParam->load()) : (timeMsParam != nullptr ? timeMsParam->load() : 400.0f);
        float fb = isFbModulated ? getLiveParamValueFor("feedback", "feedback_live", feedbackParam->load()) : (feedbackParam != nullptr ? feedbackParam->load() : 0.4f);
        float mix = isMixModulated ? getLiveParamValueFor("mix", "mix_live", mixParam->load()) : (mixParam != nullptr ? mixParam->load() : 0.3f);
        ImGui::PushItemWidth (itemWidth);

        // Time
        if (isTimeModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Time (ms)", &timeMs, 1.0f, 2000.0f, "%.1f")) if (!isTimeModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("timeMs"))) *p = timeMs;
        if (!isTimeModulated) adjustParamOnWheel (ap.getParameter ("timeMs"), "timeMs", timeMs);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isTimeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Feedback
        if (isFbModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Feedback", &fb, 0.0f, 0.95f)) if (!isFbModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("feedback"))) *p = fb;
        if (!isFbModulated) adjustParamOnWheel (ap.getParameter ("feedback"), "feedback", fb);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isFbModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Mix
        if (isMixModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Mix", &mix, 0.0f, 1.0f)) if (!isMixModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("mix"))) *p = mix;
        if (!isMixModulated) adjustParamOnWheel (ap.getParameter ("mix"), "mix", mix);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMixModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);

        // CORRECTED MODULATION PINS - Use absolute channel indices
        int busIdx, chanInBus;
        if (getParamRouting("timeMs", busIdx, chanInBus))
            helpers.drawAudioInputPin("Time Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("feedback", busIdx, chanInBus))
            helpers.drawAudioInputPin("Feedback Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("mix", busIdx, chanInBus))
            helpers.drawAudioInputPin("Mix Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Time Mod";
            case 3: return "Feedback Mod";
            case 4: return "Mix Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::DelayLine<float, juce::dsp::DelayLineInterpolationTypes::Lagrange3rd> dlL { 48000 }, dlR { 48000 };
    std::atomic<float>* timeMsParam { nullptr };
    std::atomic<float>* feedbackParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
    double sr { 48000.0 };
    int maxDelaySamples { 48000 };
    
    // Smoothed values to prevent clicks and zipper noise
    juce::SmoothedValue<float> timeSm;
    juce::SmoothedValue<float> feedbackSm;
    juce::SmoothedValue<float> mixSm;
};




================================================================================
FILE: juce\Source\audio\modules\DriveModuleProcessor.cpp
================================================================================


#include "DriveModuleProcessor.h"
#include <cmath> // For std::tanh

juce::AudioProcessorValueTreeState::ParameterLayout DriveModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDrive, "Drive", 0.0f, 2.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMix, "Mix", 0.0f, 1.0f, 1.0f));
    
    return { params.begin(), params.end() };
}

DriveModuleProcessor::DriveModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Audio In", juce::AudioChannelSet::stereo(), true)
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "DriveParams", createParameterLayout())
{
    driveParam = apvts.getRawParameterValue(paramIdDrive);
    mixParam = apvts.getRawParameterValue(paramIdMix);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void DriveModuleProcessor::prepareToPlay(double /*sampleRate*/, int samplesPerBlock)
{
    tempBuffer.setSize(2, samplesPerBlock);
}

void DriveModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);
    
    const float driveAmount = driveParam->load();
    const float mixAmount = mixParam->load();

    // Copy input to output
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }
    
    const int numChannels = juce::jmin(numInputChannels, numOutputChannels);

    // If drive is zero and mix is fully dry, we can skip processing entirely.
    if (driveAmount <= 0.001f && mixAmount <= 0.001f)
    {
        // Update output values for tooltips
        if (lastOutputValues.size() >= 2)
        {
            if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
            if (lastOutputValues[1] && numChannels > 1) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
        }
        return;
    }

    // --- Dry/Wet Mix Implementation (inspired by VoiceProcessor.cpp) ---
    // 1. Make a copy of the original (dry) signal.
    tempBuffer.makeCopyOf(outBus);

    // 2. Apply the distortion to the temporary buffer to create the wet signal.
    const float k = juce::jlimit(0.0f, 10.0f, driveAmount) * 5.0f;
    for (int ch = 0; ch < tempBuffer.getNumChannels(); ++ch)
    {
        auto* data = tempBuffer.getWritePointer(ch);
        for (int i = 0; i < tempBuffer.getNumSamples(); ++i)
        {
            data[i] = std::tanh(k * data[i]);
        }
    }

    // 3. Blend the dry and wet signals in the main output buffer.
    const float dryLevel = 1.0f - mixAmount;
    const float wetLevel = mixAmount;

    for (int ch = 0; ch < numChannels; ++ch)
    {
        // First, scale the original (dry) signal down.
        outBus.applyGain(ch, 0, buffer.getNumSamples(), dryLevel);
        // Then, add the scaled wet signal from our temporary buffer.
        outBus.addFrom(ch, 0, tempBuffer, ch, 0, buffer.getNumSamples(), wetLevel);
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1] && numChannels > 1) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool DriveModuleProcessor::getParamRouting(const juce::String& /*paramId*/, int& /*outBusIndex*/, int& /*outChannelIndexInBus*/) const
{
    // No modulation inputs in this version
    return false;
}

juce::String DriveModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    return {};
}

juce::String DriveModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void DriveModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, float min, float max, const char* format) {
        float value = ap.getRawParameterValue(paramId)->load();
        if (ImGui::SliderFloat(label, &value, min, max, format))
            *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    };

    drawSlider("Drive", paramIdDrive, 0.0f, 2.0f, "%.2f");
    drawSlider("Mix", paramIdMix, 0.0f, 1.0f, "%.2f");

    ImGui::PopItemWidth();
}

void DriveModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\DriveModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class DriveModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdDrive = "drive";
    static constexpr auto paramIdMix = "mix";

    DriveModuleProcessor();
    ~DriveModuleProcessor() override = default;

    const juce::String getName() const override { return "drive"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // A temporary buffer is needed to properly implement the dry/wet mix
    juce::AudioBuffer<float> tempBuffer;

    // Cached atomic pointers to parameters
    std::atomic<float>* driveParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\FunctionGeneratorModuleProcessor.cpp
================================================================================


#include "FunctionGeneratorModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#endif

// <<< FIX: Removed all "_mod" parameters. They should NOT be part of the APVTS.
juce::AudioProcessorValueTreeState::ParameterLayout FunctionGeneratorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdRate, "Rate",
        juce::NormalisableRange<float>(0.1f, 100.0f, 0.01f, 0.25f), 1.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdMode, "Mode",
        juce::StringArray{"Free (Hz)", "Sync"}, 0));

    params.push_back(std::make_unique<juce::AudioParameterBool>(
        paramIdLoop, "Loop", true)); // <<< FIX: Changed default to true for more immediate sound

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdSlew, "Slew",
        juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.0f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdGateThresh, "Gate Thresh",
        juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.5f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdTrigThresh, "Trig Thresh",
        juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.5f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdPitchBase, "Pitch Base (st)",
        juce::NormalisableRange<float>(-24.0f, 24.0f, 0.01f), 0.0f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdValueMult, "Value Mult",
        juce::NormalisableRange<float>(0.0f, 10.0f, 0.01f, 0.5f), 1.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdCurveSelect, "Curve Select",
        juce::StringArray{"Blue", "Red", "Green"}, 0));

    return { params.begin(), params.end() };
}

FunctionGeneratorModuleProcessor::FunctionGeneratorModuleProcessor()
    : ModuleProcessor(BusesProperties()
                          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(10), true)
                          .withOutput("Outputs", juce::AudioChannelSet::discreteChannels(13), true)),
      apvts(*this, nullptr, "FunctionGeneratorParams", createParameterLayout())
{
    // Initialize all three curves to default shapes
    for (int curveIndex = 0; curveIndex < 3; ++curveIndex)
    {
        curves[curveIndex].resize(CURVE_RESOLUTION);
        for (int i = 0; i < CURVE_RESOLUTION; ++i)
        {
            float x = (float)i / (float)(CURVE_RESOLUTION - 1);
            switch (curveIndex)
            {
                case 0: curves[curveIndex][i] = x; break; // Blue curve - ramp up
                case 1: curves[curveIndex][i] = 1.0f - x; break; // Red curve - ramp down
                case 2: curves[curveIndex][i] = 0.5f + 0.5f * std::sin(x * juce::MathConstants<float>::twoPi); break; // Green curve - sine wave
            }
        }
    }

    // Cache parameter pointers
    rateParam = apvts.getRawParameterValue(paramIdRate);
    modeParam = apvts.getRawParameterValue(paramIdMode);
    loopParam = apvts.getRawParameterValue(paramIdLoop);
    slewParam = apvts.getRawParameterValue(paramIdSlew);
    gateThreshParam = apvts.getRawParameterValue(paramIdGateThresh);
    trigThreshParam = apvts.getRawParameterValue(paramIdTrigThresh);
    pitchBaseParam = apvts.getRawParameterValue(paramIdPitchBase);
    valueMultParam = apvts.getRawParameterValue(paramIdValueMult);
    curveSelectParam = apvts.getRawParameterValue(paramIdCurveSelect);

    for (int i = 0; i < 13; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void FunctionGeneratorModuleProcessor::prepareToPlay(double sr, int)
{
    sampleRate = sr;
    phase = 0.0;
    lastPhase = 0.0;
    
    smoothedSlew.reset(sampleRate, 0.01);
    smoothedRate.reset(sampleRate, 0.01);
    smoothedGateThresh.reset(sampleRate, 0.001);
    smoothedTrigThresh.reset(sampleRate, 0.001);
    smoothedPitchBase.reset(sampleRate, 0.01);
    smoothedValueMult.reset(sampleRate, 0.01);
}

void FunctionGeneratorModuleProcessor::setTimingInfo(const TransportState& state)
{
    m_currentTransport = state;
}

void FunctionGeneratorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const bool isRateMod = isParamInputConnected(paramIdRateMod);
    const bool isSlewMod = isParamInputConnected(paramIdSlewMod);
    const bool isGateThreshMod = isParamInputConnected(paramIdGateThreshMod);
    const bool isGateConnected = isParamInputConnected(paramIdGateIn);
    const bool isTrigThreshMod = isParamInputConnected(paramIdTrigThreshMod);
    const bool isPitchBaseMod = isParamInputConnected(paramIdPitchBaseMod);
    const bool isValueMultMod = isParamInputConnected(paramIdValueMultMod);
    const bool isCurveSelectMod = isParamInputConnected(paramIdCurveSelectMod);

    const float* gateIn = inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* triggerIn = inBus.getNumChannels() > 1 ? inBus.getReadPointer(1) : nullptr;
    const float* syncIn = inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* rateCV = isRateMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* slewCV = isSlewMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;
    const float* gateThreshCV = isGateThreshMod && inBus.getNumChannels() > 5 ? inBus.getReadPointer(5) : nullptr;
    const float* trigThreshCV = isTrigThreshMod && inBus.getNumChannels() > 6 ? inBus.getReadPointer(6) : nullptr;
    const float* pitchBaseCV = isPitchBaseMod && inBus.getNumChannels() > 7 ? inBus.getReadPointer(7) : nullptr;
    const float* valueMultCV = isValueMultMod && inBus.getNumChannels() > 8 ? inBus.getReadPointer(8) : nullptr;
    const float* curveSelectCV = isCurveSelectMod && inBus.getNumChannels() > 9 ? inBus.getReadPointer(9) : nullptr;

    const float baseRate = rateParam->load();
    const int baseMode = static_cast<int>(modeParam->load());
    const bool baseLoop = loopParam->load() > 0.5f;
    const float baseSlew = slewParam->load();
    const float baseGateThresh = gateThreshParam->load();
    const float baseTrigThresh = trigThreshParam->load();
    const float basePitchBase = pitchBaseParam->load();
    const float baseValueMult = valueMultParam->load();
    const int baseCurveSelect = static_cast<int>(curveSelectParam->load());

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float effectiveRate = baseRate;
        if (isRateMod && rateCV) {
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            effectiveRate = juce::jmap(cv, 0.1f, 100.0f);
        }

        float effectiveSlew = baseSlew;
        if (isSlewMod && slewCV) effectiveSlew = juce::jlimit(0.0f, 1.0f, slewCV[i]);

        float effectiveGateThresh = baseGateThresh;
        if (isGateThreshMod && gateThreshCV) effectiveGateThresh = juce::jlimit(0.0f, 1.0f, gateThreshCV[i]);

        float effectiveTrigThresh = baseTrigThresh;
        if (isTrigThreshMod && trigThreshCV) effectiveTrigThresh = juce::jlimit(0.0f, 1.0f, trigThreshCV[i]);

        float effectivePitchBase = basePitchBase;
        if (isPitchBaseMod && pitchBaseCV) effectivePitchBase = juce::jlimit(-24.0f, 24.0f, pitchBaseCV[i] * 48.0f - 24.0f);

        float effectiveValueMult = baseValueMult;
        if (isValueMultMod && valueMultCV) effectiveValueMult = juce::jlimit(0.0f, 10.0f, valueMultCV[i] * 10.0f);

        int effectiveCurveSelect = baseCurveSelect;
        if (isCurveSelectMod && curveSelectCV) {
            const float cv = juce::jlimit(0.0f, 1.0f, curveSelectCV[i]);
            effectiveCurveSelect = static_cast<int>(cv * 2.99f);
        }

        smoothedRate.setTargetValue(effectiveRate);
        smoothedSlew.setTargetValue(effectiveSlew);
        smoothedGateThresh.setTargetValue(effectiveGateThresh);
        smoothedTrigThresh.setTargetValue(effectiveTrigThresh);
        smoothedPitchBase.setTargetValue(effectivePitchBase);
        smoothedValueMult.setTargetValue(effectiveValueMult);

        // Get the NEXT smoothed value for all parameters that need it. THIS IS THE FIX.
        const float smoothedRateValue = smoothedRate.getNextValue();
        const float smoothedSlewValue = smoothedSlew.getNextValue();
        const float smoothedGateThreshValue = smoothedGateThresh.getNextValue();
        const float smoothedTrigThreshValue = smoothedTrigThresh.getNextValue();
        const float smoothedPitchBaseValue = smoothedPitchBase.getNextValue();
        const float smoothedValueMultValue = smoothedValueMult.getNextValue();

        bool currentGateState = true; // Default to 'true' (always running)
        if (isGateConnected && gateIn)
        {
            // If a cable is connected, let it take control
            currentGateState = (gateIn[i] > smoothedTrigThreshValue);
        }
        bool triggerRising = triggerIn && (triggerIn[i] > smoothedTrigThreshValue) && !lastTriggerState;
        bool syncRising = syncIn && (syncIn[i] > 0.5f) && !lastSyncState;
        
        bool endOfCycle = false;

        if (baseMode == 1 && m_currentTransport.isPlaying) // Sync mode
        {
            const int divisionIndex = 3; // Fixed to 1/4 note for now (you can add a parameter later)
            static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
            const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];
            
            double currentBeat = m_currentTransport.songPositionBeats + (i / sampleRate / 60.0 * m_currentTransport.bpm);
            phase = std::fmod(currentBeat * beatDivision, 1.0);
            
            if (phase < lastPhase) // Loop point
            {
                endOfCycle = true;
            }
            lastPhase = phase;
        }
        else // Free (Hz) mode or not playing
        {
            if (currentGateState) {
                phase += smoothedRateValue / sampleRate;
            }
            if (syncRising) {
                phase = 0.0;
            }
            if (phase >= 1.0) {
                if (baseLoop) {
                    phase = std::fmod(phase, 1.0);
                    endOfCycle = true;
                } else {
                    phase = 1.0;
                }
            }
        }
        
        // Look up all three curves, plus the selected one for slewing
        float blueValue = interpolateCurve(0, static_cast<float>(phase));
        float redValue = interpolateCurve(1, static_cast<float>(phase));
        float greenValue = interpolateCurve(2, static_cast<float>(phase));

        targetValue = interpolateCurve(effectiveCurveSelect, static_cast<float>(phase));

        // Apply slew using a simplified, standard one-pole filter logic
        float slewCoeff = 1.0f - std::exp(-1.0f / (0.001f + smoothedSlewValue * smoothedSlewValue * (float)sampleRate));
        currentValue += (targetValue - currentValue) * slewCoeff;
        
        float outputs[13];
        generateOutputs(currentValue, blueValue, redValue, greenValue, endOfCycle, outputs, smoothedGateThreshValue, smoothedPitchBaseValue, smoothedValueMultValue);

        for (int ch = 0; ch < 13 && ch < outBus.getNumChannels(); ++ch) {
            outBus.getWritePointer(ch)[i] = outputs[ch];
        }

        lastTriggerState = triggerIn && (triggerIn[i] > smoothedTrigThreshValue);
        lastGateState = currentGateState;
        lastSyncState = syncIn && (syncIn[i] > 0.5f);

        if ((i & 63) == 0) {
            setLiveParamValue("rate_live", smoothedRate.getCurrentValue());
            setLiveParamValue("slew_live", smoothedSlew.getCurrentValue());
            setLiveParamValue("gateThresh_live", smoothedGateThresh.getCurrentValue());
            setLiveParamValue("trigThresh_live", smoothedTrigThresh.getCurrentValue());
            setLiveParamValue("pitchBase_live", smoothedPitchBase.getCurrentValue());
            setLiveParamValue("valueMult_live", smoothedValueMult.getCurrentValue());
            setLiveParamValue("curveSelect_live", static_cast<float>(effectiveCurveSelect));
        }
    }

    if (lastOutputValues.size() >= 13) {
        for (int ch = 0; ch < 13 && ch < outBus.getNumChannels(); ++ch) {
            if (lastOutputValues[ch]) {
                lastOutputValues[ch]->store(outBus.getSample(ch, buffer.getNumSamples() - 1));
            }
        }
    }
}

float FunctionGeneratorModuleProcessor::interpolateCurve(int curveIndex, float p)
{
    if (curveIndex < 0 || curveIndex >= 3) return 0.0f;
    const auto& curve = curves[curveIndex];
    float scaledPhase = p * (CURVE_RESOLUTION - 1);
    int index = static_cast<int>(scaledPhase);
    float fraction = scaledPhase - index;
    if (index >= CURVE_RESOLUTION - 1) return curve[CURVE_RESOLUTION - 1];
    float y1 = curve[index];
    float y2 = curve[index + 1];
    return y1 + fraction * (y2 - y1);
}

void FunctionGeneratorModuleProcessor::generateOutputs(float selectedValue, float blueValue, float redValue, float greenValue, bool eoc, float* outs, float gateThresh, float pitchBase, float valueMult)
{
    // --- Existing Outputs (based on selected curve) ---
    outs[0] = selectedValue; // Value
    outs[1] = 1.0f - selectedValue; // Inverted
    outs[2] = selectedValue * 2.0f - 1.0f; // Bipolar
    
    float pitchBaseOffset = pitchBase / 12.0f;
    outs[3] = pitchBaseOffset + selectedValue * valueMult; // Pitch
    
    bool gateHigh = selectedValue > gateThresh;
    outs[4] = gateHigh ? 1.0f : 0.0f; // Gate
    
    if (gateHigh && !lastGateOut) outs[5] = 1.0f; // Trigger
    else outs[5] = 0.0f;
    lastGateOut = gateHigh;
    
    if (eoc) { // End of Cycle
        eocPulseRemaining = static_cast<int>(sampleRate * 0.001); // 1ms pulse
    }
    outs[6] = (eocPulseRemaining > 0) ? 1.0f : 0.0f;
    if (eocPulseRemaining > 0) --eocPulseRemaining;

    // --- New Dedicated Curve Outputs ---
    outs[7] = blueValue;
    outs[8] = pitchBaseOffset + blueValue * valueMult;

    outs[9] = redValue;
    outs[10] = pitchBaseOffset + redValue * valueMult;

    outs[11] = greenValue;
    outs[12] = pitchBaseOffset + greenValue * valueMult;
}

#if defined(PRESET_CREATOR_UI)
void FunctionGeneratorModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue(paramIdMode)->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdMode)))
            *p = sync ? 1 : 0;
        onModificationEnded();
    }
    
    if (sync)
    {
        // NOTE: We haven't added a "rate_division" parameter to this module yet.
        // For now, it will be fixed at 1/4 note. This UI is a placeholder.
        ImGui::BeginDisabled();
        ImGui::TextUnformatted("Division: 1/4 Note (fixed)");
        ImGui::EndDisabled();
    }
    else
    {
        // Rate slider (only show in free-running mode)
        const bool rateIsMod = isParamModulated(paramIdRateMod);
        float rate = rateIsMod ? getLiveParamValueFor(paramIdRateMod, "rate_live", rateParam->load()) : rateParam->load();
        if (rateIsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Rate", &rate, 0.1f, 100.0f, "%.2f Hz", ImGuiSliderFlags_Logarithmic)) {
            if (!rateIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRate)) = rate;
        }
        if (!rateIsMod) adjustParamOnWheel(ap.getParameter(paramIdRate), "rate", rate);
        if (ImGui::IsItemDeactivatedAfterEdit() && !rateIsMod) onModificationEnded();
        if (rateIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }
    
    // Loop (No modulation for this parameter)
    bool loop = loopParam->load() > 0.5f;
    if (ImGui::Checkbox("Loop", &loop)) {
        *dynamic_cast<juce::AudioParameterBool*>(ap.getParameter(paramIdLoop)) = loop;
        onModificationEnded();
    }
    
    // Slew
    const bool slewIsMod = isParamModulated(paramIdSlewMod);
    float slew = slewIsMod ? getLiveParamValueFor(paramIdSlewMod, "slew_live", slewParam->load()) : slewParam->load();
    if (slewIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Slew", &slew, 0.0f, 1.0f, "%.3f")) {
        if (!slewIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdSlew)) = slew;
    }
    if (!slewIsMod) adjustParamOnWheel(ap.getParameter(paramIdSlew), "slew", slew);
    if (ImGui::IsItemDeactivatedAfterEdit() && !slewIsMod) onModificationEnded();
    if (slewIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Gate Thresh
    const bool gateThreshIsMod = isParamModulated(paramIdGateThreshMod);
    float gateThresh = gateThreshIsMod ? getLiveParamValueFor(paramIdGateThreshMod, "gateThresh_live", gateThreshParam->load()) : gateThreshParam->load();
    if (gateThreshIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Gate Thr", &gateThresh, 0.0f, 1.0f, "%.2f")) {
        if (!gateThreshIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdGateThresh)) = gateThresh;
    }
    if (!gateThreshIsMod) adjustParamOnWheel(ap.getParameter(paramIdGateThresh), "gateThresh", gateThresh);
    if (ImGui::IsItemDeactivatedAfterEdit() && !gateThreshIsMod) onModificationEnded();
    if (gateThreshIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Trig Thresh
    const bool trigThreshIsMod = isParamModulated(paramIdTrigThreshMod);
    float trigThresh = trigThreshIsMod ? getLiveParamValueFor(paramIdTrigThreshMod, "trigThresh_live", trigThreshParam->load()) : trigThreshParam->load();
    if (trigThreshIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Trig Thr", &trigThresh, 0.0f, 1.0f, "%.2f")) {
        if (!trigThreshIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdTrigThresh)) = trigThresh;
    }
    if (!trigThreshIsMod) adjustParamOnWheel(ap.getParameter(paramIdTrigThresh), "trigThresh", trigThresh);
    if (ImGui::IsItemDeactivatedAfterEdit() && !trigThreshIsMod) onModificationEnded();
    if (trigThreshIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Pitch Base
    const bool pitchBaseIsMod = isParamModulated(paramIdPitchBaseMod);
    float pitchBase = pitchBaseIsMod ? getLiveParamValueFor(paramIdPitchBaseMod, "pitchBase_live", pitchBaseParam->load()) : pitchBaseParam->load();
    if (pitchBaseIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Pitch Base", &pitchBase, -24.0f, 24.0f, "%.1f st")) {
        if (!pitchBaseIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdPitchBase)) = pitchBase;
    }
    if (!pitchBaseIsMod) adjustParamOnWheel(ap.getParameter(paramIdPitchBase), "pitchBase", pitchBase);
    if (ImGui::IsItemDeactivatedAfterEdit() && !pitchBaseIsMod) onModificationEnded();
    if (pitchBaseIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Value Mult
    const bool valueMultIsMod = isParamModulated(paramIdValueMultMod);
    float valueMult = valueMultIsMod ? getLiveParamValueFor(paramIdValueMultMod, "valueMult_live", valueMultParam->load()) : valueMultParam->load();
    if (valueMultIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Value Mult", &valueMult, 0.0f, 10.0f, "%.2f")) {
        if (!valueMultIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdValueMult)) = valueMult;
    }
    if (!valueMultIsMod) adjustParamOnWheel(ap.getParameter(paramIdValueMult), "valueMult", valueMult);
    if (ImGui::IsItemDeactivatedAfterEdit() && !valueMultIsMod) onModificationEnded();
    if (valueMultIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // --- CURVE CANVAS LOGIC (Moved to the end to fix UI interaction) ---

    // Curve Selection
    int activeEditorCurve = static_cast<int>(curveSelectParam->load());
    if (isParamInputConnected(paramIdCurveSelectMod)) {
        activeEditorCurve = static_cast<int>(getLiveParamValueFor(paramIdCurveSelectMod, "curveSelect_live", (float)activeEditorCurve));
    }
    if (ImGui::Button("Blue")) { if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdCurveSelect))) *p = 0; onModificationEnded(); }
    ImGui::SameLine();
    if (ImGui::Button("Red")) { if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdCurveSelect))) *p = 1; onModificationEnded(); }
    ImGui::SameLine();
    if (ImGui::Button("Green")) { if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdCurveSelect))) *p = 2; onModificationEnded(); }
    
    // Canvas Setup
    ImGui::Dummy(ImVec2(0.0f, 5.0f));
    ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();
    ImVec2 canvas_sz = ImVec2(itemWidth, 150.0f);
    ImVec2 canvas_p1 = ImVec2(canvas_p0.x + canvas_sz.x, canvas_p0.y + canvas_sz.y);
    ImDrawList* draw_list = ImGui::GetWindowDrawList();
    draw_list->AddRectFilled(canvas_p0, canvas_p1, IM_COL32(30, 30, 30, 255));
    draw_list->AddRect(canvas_p0, canvas_p1, IM_COL32(150, 150, 150, 255));
    
    // Mouse interaction for drawing on the canvas
    ImGui::InvisibleButton("canvas", canvas_sz, ImGuiButtonFlags_MouseButtonLeft);
    const bool is_hovered = ImGui::IsItemHovered();
    const bool is_active = ImGui::IsItemActive();
    if (is_hovered && ImGui::IsMouseClicked(ImGuiMouseButton_Left)) {
        isDragging = true;
        lastMousePosInCanvas = ImVec2(ImGui::GetIO().MousePos.x - canvas_p0.x, ImGui::GetIO().MousePos.y - canvas_p0.y);
    }
    if (ImGui::IsMouseReleased(ImGuiMouseButton_Left)) {
        if (isDragging) onModificationEnded();
        isDragging = false;
        lastMousePosInCanvas = ImVec2(-1, -1);
    }
    if (isDragging && is_active) {
        ImVec2 current_pos = ImVec2(ImGui::GetIO().MousePos.x - canvas_p0.x, ImGui::GetIO().MousePos.y - canvas_p0.y);
        int idx0 = static_cast<int>((lastMousePosInCanvas.x / canvas_sz.x) * CURVE_RESOLUTION);
        int idx1 = static_cast<int>((current_pos.x / canvas_sz.x) * CURVE_RESOLUTION);
        idx0 = juce::jlimit(0, CURVE_RESOLUTION - 1, idx0);
        idx1 = juce::jlimit(0, CURVE_RESOLUTION - 1, idx1);
        if (idx0 > idx1) std::swap(idx0, idx1);
        for (int i = idx0; i <= idx1; ++i) {
            float t = (idx1 == idx0) ? 1.0f : (float)(i - idx0) / (float)(idx1 - idx0);
            float y_pos = juce::jmap(t, lastMousePosInCanvas.y, current_pos.y);
            curves[activeEditorCurve][i] = 1.0f - juce::jlimit(0.0f, 1.0f, y_pos / canvas_sz.y);
        }
        lastMousePosInCanvas = current_pos;
    }
    
    // Draw curves
    const ImU32 colors[] = { IM_COL32(100, 150, 255, 255), IM_COL32(255, 100, 100, 255), IM_COL32(100, 255, 150, 255) };
    for (int c = 0; c < 3; ++c) {
        ImU32 color = colors[c];
        if (c != activeEditorCurve) color = (color & 0x00FFFFFF) | (100 << 24);
        for (int i = 0; i < CURVE_RESOLUTION - 1; ++i) {
            ImVec2 p1 = ImVec2(canvas_p0.x + ((float)i / (CURVE_RESOLUTION - 1)) * canvas_sz.x, canvas_p0.y + (1.0f - curves[c][i]) * canvas_sz.y);
            ImVec2 p2 = ImVec2(canvas_p0.x + ((float)(i + 1) / (CURVE_RESOLUTION - 1)) * canvas_sz.x, canvas_p0.y + (1.0f - curves[c][i+1]) * canvas_sz.y);
            draw_list->AddLine(p1, p2, color, 2.0f);
        }
    }
    
    // Draw Gate Threshold line (Yellow)
    const float gate_line_y = canvas_p0.y + (1.0f - gateThresh) * canvas_sz.y;
    draw_list->AddLine(ImVec2(canvas_p0.x, gate_line_y), ImVec2(canvas_p1.x, gate_line_y), IM_COL32(255, 255, 0, 200), 2.0f);

    // Draw Trigger Threshold line (Red)
    const float trig_line_y = canvas_p0.y + (1.0f - trigThresh) * canvas_sz.y;
    draw_list->AddLine(ImVec2(canvas_p0.x, trig_line_y), ImVec2(canvas_p1.x, trig_line_y), IM_COL32(255, 0, 0, 200), 2.0f);
    
    // Draw playhead
    float playhead_x = canvas_p0.x + phase * canvas_sz.x;
    draw_list->AddLine(ImVec2(playhead_x, canvas_p0.y), ImVec2(playhead_x, canvas_p1.y), IM_COL32(255, 255, 0, 200));

    ImGui::Dummy(canvas_sz);
    
    ImGui::PopItemWidth(); // <<< FIX: Added to match the PushItemWidth at the top.
}



juce::String FunctionGeneratorModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Gate In";
        case 1: return "Trigger In";
        case 2: return "Sync In";
        case 3: return "Rate Mod";
        case 4: return "Slew Mod";
        case 5: return "Gate Thresh Mod";
        case 6: return "Trig Thresh Mod";
        case 7: return "Pitch Base Mod";
        case 8: return "Value Mult Mod";
        case 9: return "Curve Select Mod";
        default: return {};
    }
}

juce::String FunctionGeneratorModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Value";
        case 1: return "Inverted";
        case 2: return "Bipolar";
        case 3: return "Pitch";
        case 4: return "Gate";
        case 5: return "Trigger";
        case 6: return "End of Cycle";
        case 7: return "Blue Value";
        case 8: return "Blue Pitch";
        case 9: return "Red Value";
        case 10: return "Red Pitch";
        case 11: return "Green Value";
        case 12: return "Green Pitch";
        default: return {};
    }
}

#endif

bool FunctionGeneratorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdGateIn) { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdRateMod) { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdSlewMod) { outChannelIndexInBus = 4; return true; }
    if (paramId == paramIdGateThreshMod) { outChannelIndexInBus = 5; return true; }
    if (paramId == paramIdTrigThreshMod) { outChannelIndexInBus = 6; return true; }
    if (paramId == paramIdPitchBaseMod) { outChannelIndexInBus = 7; return true; }
    if (paramId == paramIdValueMultMod) { outChannelIndexInBus = 8; return true; }
    if (paramId == paramIdCurveSelectMod) { outChannelIndexInBus = 9; return true; }
    
    return false;
}

// --- State management functions for saving/loading ---
juce::ValueTree FunctionGeneratorModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("FunctionGeneratorState");
    // Save the mode parameter
    vt.setProperty("mode", apvts.getRawParameterValue("mode")->load(), nullptr);
    // Save the curve points
    for (int c = 0; c < curves.size(); ++c)
    {
        juce::ValueTree points("CurvePoints_" + juce::String(c));
        for (int i = 0; i < curves[c].size(); ++i)
        {
            points.setProperty("p" + juce::String(i), curves[c][i], nullptr);
        }
        vt.addChild(points, -1, nullptr);
    }
    return vt;
}

void FunctionGeneratorModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("FunctionGeneratorState"))
    {
        // Restore the mode parameter
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("mode")))
            *p = (bool)vt.getProperty("mode", false);
        // Restore the curve points
        for (int c = 0; c < curves.size(); ++c)
        {
            auto points = vt.getChildWithName("CurvePoints_" + juce::String(c));
            if (points.isValid())
            {
                curves[c].resize(CURVE_RESOLUTION);
                for (int i = 0; i < CURVE_RESOLUTION; ++i)
                {
                    curves[c][i] = (float)points.getProperty("p" + juce::String(i), 0.0);
                }
            }
        }
    }
}

================================================================================
FILE: juce\Source\audio\modules\FunctionGeneratorModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>
#include <vector>

class FunctionGeneratorModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdMode = "mode";
    static constexpr auto paramIdLoop = "loop";
    static constexpr auto paramIdSlew = "slew";
    static constexpr auto paramIdGateThresh = "gateThresh";
    static constexpr auto paramIdTrigThresh = "trigThresh";
    static constexpr auto paramIdPitchBase = "pitchBase";
    static constexpr auto paramIdValueMult = "valueMult";
    static constexpr auto paramIdCurveSelect = "curveSelect";

    // Virtual ID for direct input connection checking
    static constexpr auto paramIdGateIn = "gate_in";

    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdSlewMod = "slew_mod";
    static constexpr auto paramIdGateThreshMod = "gateThresh_mod";
    static constexpr auto paramIdTrigThreshMod = "trigThresh_mod";
    static constexpr auto paramIdPitchBaseMod = "pitchBase_mod";
    static constexpr auto paramIdValueMultMod = "valueMult_mod";
    static constexpr auto paramIdCurveSelectMod = "curveSelect_mod";

    FunctionGeneratorModuleProcessor();
    ~FunctionGeneratorModuleProcessor() override = default;

    const juce::String getName() const override { return "function generator"; }

    // --- Core functions ---
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    
    void setTimingInfo(const TransportState& state) override;
    
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // --- State management for saving/loading the drawn curves ---
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

    // --- UI drawing functions ---
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    
    // --- REFACTORED drawIoPins ---
    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Group global inputs with primary outputs
        helpers.drawParallelPins("Gate In", 0, "Value", 0);
        helpers.drawParallelPins("Trigger In", 1, "Inverted", 1);
        helpers.drawParallelPins("Sync In", 2, "Bipolar", 2);
        helpers.drawParallelPins("Rate Mod", 3, "Pitch", 3);
        helpers.drawParallelPins("Slew Mod", 4, "Gate", 4);
        helpers.drawParallelPins("Gate Thresh Mod", 5, "Trigger", 5);
        helpers.drawParallelPins("Trig Thresh Mod", 6, "End of Cycle", 6);
        
        // Remaining global inputs
        helpers.drawAudioInputPin("Pitch Base Mod", 7);
        helpers.drawAudioInputPin("Value Mult Mod", 8);
        helpers.drawAudioInputPin("Curve Select Mod", 9);

        ImGui::Spacing(); // Add a visual separator

        // Dedicated curve outputs
        helpers.drawAudioOutputPin("Blue Value", 7);
        helpers.drawAudioOutputPin("Blue Pitch", 8);
        helpers.drawAudioOutputPin("Red Value", 9);
        helpers.drawAudioOutputPin("Red Pitch", 10);
        helpers.drawAudioOutputPin("Green Value", 11);
        helpers.drawAudioOutputPin("Green Pitch", 12);
    }

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    // --- Core state for the curves ---
    std::array<std::vector<float>, 3> curves;
    static constexpr int CURVE_RESOLUTION = 256;

    // --- DSP State ---
    double phase{ 0.0 };
    double lastPhase{ 0.0 };
    double sampleRate{ 44100.0 };
    bool lastTriggerState{ false };
    bool lastGateState{ false };
    bool lastSyncState{ false };
    float currentValue{ 0.0f };
    float targetValue{ 0.0f };
    bool isRunning{ false };
    bool lastGateOut{ false };
    int eocPulseRemaining{ 0 };

    TransportState m_currentTransport;
    
    // --- Smoothed values ---
    juce::SmoothedValue<float> smoothedSlew;
    juce::SmoothedValue<float> smoothedRate;
    juce::SmoothedValue<float> smoothedGateThresh;
    juce::SmoothedValue<float> smoothedTrigThresh;
    juce::SmoothedValue<float> smoothedPitchBase;
    juce::SmoothedValue<float> smoothedValueMult;

    // --- Parameter Pointers ---
    std::atomic<float>* rateParam{ nullptr };
    std::atomic<float>* modeParam{ nullptr };
    std::atomic<float>* loopParam{ nullptr };
    std::atomic<float>* slewParam{ nullptr };
    std::atomic<float>* gateThreshParam{ nullptr };
    std::atomic<float>* trigThreshParam{ nullptr };
    std::atomic<float>* pitchBaseParam{ nullptr };
    std::atomic<float>* valueMultParam{ nullptr };
    std::atomic<float>* curveSelectParam{ nullptr };

    // --- Helper functions ---
    float interpolateCurve(int curveIndex, float phase);
    void generateOutputs(float selectedValue, float blueValue, float redValue, float greenValue, bool endOfCycle, float* outputs, float gateThresh, float pitchBase, float valueMult);

#if defined(PRESET_CREATOR_UI)
    // State for the interactive drawing canvas
    bool isDragging{ false };
    ImVec2 lastMousePosInCanvas{ -1, -1 };
#endif
};

================================================================================
FILE: juce\Source\audio\modules\GateModuleProcessor.cpp
================================================================================


#include "GateModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout GateModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdThreshold, "Threshold", -80.0f, 0.0f, -40.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdAttack, "Attack", 0.1f, 100.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRelease, "Release", 5.0f, 1000.0f, 50.0f));
    
    return { params.begin(), params.end() };
}

GateModuleProcessor::GateModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Audio In", juce::AudioChannelSet::stereo(), true)
          // For now, no modulation inputs. Can be added later if desired.
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "GateParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue(paramIdThreshold);
    attackParam = apvts.getRawParameterValue(paramIdAttack);
    releaseParam = apvts.getRawParameterValue(paramIdRelease);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void GateModuleProcessor::prepareToPlay(double newSampleRate, int /*samplesPerBlock*/)
{
    currentSampleRate = newSampleRate;
    envelope = 0.0f;
}

void GateModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // Copy input to output
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }
    
    const int numChannels = juce::jmin(numInputChannels, numOutputChannels);

    // Get parameters
    const float thresholdLinear = juce::Decibels::decibelsToGain(thresholdParam->load());
    // Convert attack/release times from ms to a per-sample coefficient
    const float attackCoeff = 1.0f - std::exp(-1.0f / (attackParam->load() * 0.001f * (float)currentSampleRate));
    const float releaseCoeff = 1.0f - std::exp(-1.0f / (releaseParam->load() * 0.001f * (float)currentSampleRate));

    auto* leftData = outBus.getWritePointer(0);
    auto* rightData = numChannels > 1 ? outBus.getWritePointer(1) : nullptr;

    for (int i = 0; i < numSamples; ++i)
    {
        // Get the magnitude of the input signal (mono or stereo)
        float magnitude = std::abs(leftData[i]);
        if (rightData)
            magnitude = std::max(magnitude, std::abs(rightData[i]));

        // Determine if the gate should be open or closed
        float target = (magnitude >= thresholdLinear) ? 1.0f : 0.0f;

        // Move the envelope towards the target using the appropriate attack or release time
        if (target > envelope)
            envelope += (target - envelope) * attackCoeff;
        else
            envelope += (target - envelope) * releaseCoeff;
        
        // Apply the envelope as a gain to the signal
        leftData[i] *= envelope;
        if (rightData)
            rightData[i] *= envelope;
    }

    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(leftData[numSamples - 1]);
        if (lastOutputValues[1] && rightData) lastOutputValues[1]->store(rightData[numSamples - 1]);
    }
}

bool GateModuleProcessor::getParamRouting(const juce::String& /*paramId*/, int& /*outBusIndex*/, int& /*outChannelIndexInBus*/) const
{
    // No modulation inputs in this version
    return false;
}

juce::String GateModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    return {};
}

juce::String GateModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void GateModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, float min, float max, const char* format) {
        float value = ap.getRawParameterValue(paramId)->load();
        if (ImGui::SliderFloat(label, &value, min, max, format))
            *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    };

    drawSlider("Threshold", paramIdThreshold, -80.0f, 0.0f, "%.1f dB");
    drawSlider("Attack", paramIdAttack, 0.1f, 100.0f, "%.1f ms");
    drawSlider("Release", paramIdRelease, 5.0f, 1000.0f, "%.0f ms");

    ImGui::PopItemWidth();
}

void GateModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\GateModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class GateModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdThreshold = "threshold";
    static constexpr auto paramIdAttack = "attack";
    static constexpr auto paramIdRelease = "release";

    GateModuleProcessor();
    ~GateModuleProcessor() override = default;

    const juce::String getName() const override { return "gate"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // Cached atomic pointers to parameters
    std::atomic<float>* thresholdParam { nullptr };
    std::atomic<float>* attackParam { nullptr };
    std::atomic<float>* releaseParam { nullptr };

    // DSP state for the envelope follower
    float envelope { 0.0f };
    double currentSampleRate { 48000.0 };
};



================================================================================
FILE: juce\Source\audio\modules\GranulatorModuleProcessor.cpp
================================================================================


#include "GranulatorModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout GranulatorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDensity, "Density (Hz)", juce::NormalisableRange<float>(0.1f, 100.0f, 0.01f, 0.3f), 10.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdSize, "Size (ms)", juce::NormalisableRange<float>(5.0f, 500.0f, 0.01f, 0.4f), 100.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdPosition, "Position", 0.0f, 1.0f, 0.5f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdSpread, "Spread", 0.0f, 1.0f, 0.1f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdPitch, "Pitch (st)", -24.0f, 24.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdPitchRandom, "Pitch Rand", 0.0f, 12.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdPanRandom, "Pan Rand", 0.0f, 1.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdGate, "Gate", 0.0f, 1.0f, 1.0f));
    return { p.begin(), p.end() };
}

GranulatorModuleProcessor::GranulatorModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(8), true) // Audio L/R, Trig, Density, Size, Position, Pitch, Gate
          .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "GranulatorParams", createParameterLayout())
{
    densityParam      = apvts.getRawParameterValue(paramIdDensity);
    sizeParam         = apvts.getRawParameterValue(paramIdSize);
    positionParam     = apvts.getRawParameterValue(paramIdPosition);
    spreadParam       = apvts.getRawParameterValue(paramIdSpread);
    pitchParam        = apvts.getRawParameterValue(paramIdPitch);
    pitchRandomParam  = apvts.getRawParameterValue(paramIdPitchRandom);
    panRandomParam    = apvts.getRawParameterValue(paramIdPanRandom);
    gateParam         = apvts.getRawParameterValue(paramIdGate);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void GranulatorModuleProcessor::prepareToPlay(double sampleRate, int)
{
    const int bufferSeconds = 2;
    sourceBuffer.setSize(2, (int)(sampleRate * bufferSeconds));
    sourceBuffer.clear();
    sourceWritePos = 0;

    smoothedDensity.reset(sampleRate, 0.05);
    smoothedSize.reset(sampleRate, 0.05);
    smoothedPosition.reset(sampleRate, 0.05);
    smoothedPitch.reset(sampleRate, 0.05);
    smoothedGate.reset(sampleRate, 0.002);

    for (auto& grain : grainPool)
        grain.isActive = false;
}

void GranulatorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    const double sr = getSampleRate();

    // Get modulation CVs
    const bool isTriggerConnected = isParamInputConnected(paramIdTriggerIn);
    const float* trigCV = inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* densityCV = isParamInputConnected(paramIdDensityMod) && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* sizeCV = isParamInputConnected(paramIdSizeMod) && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;
    const float* posCV = isParamInputConnected(paramIdPositionMod) && inBus.getNumChannels() > 5 ? inBus.getReadPointer(5) : nullptr;
    const float* pitchCV = isParamInputConnected(paramIdPitchMod) && inBus.getNumChannels() > 6 ? inBus.getReadPointer(6) : nullptr;
    const float* gateCV = isParamInputConnected(paramIdGateMod) && inBus.getNumChannels() > 7 ? inBus.getReadPointer(7) : nullptr;

    // Get base parameters
    const float baseDensity = densityParam->load();
    const float baseSize = sizeParam->load();
    const float basePos = positionParam->load();
    const float basePitch = pitchParam->load();
    const float baseGate = gateParam->load();

    for (int i = 0; i < numSamples; ++i)
    {
        // 1. Record incoming audio to circular buffer
        sourceBuffer.setSample(0, sourceWritePos, inBus.getSample(0, i));
        sourceBuffer.setSample(1, sourceWritePos, inBus.getSample(1, i));

        // 2. Handle triggers
        // Default to ON if the trigger input is not connected.
        bool isGenerating = !isTriggerConnected;
        if (isTriggerConnected && trigCV != nullptr) {
            // If connected, follow the gate signal.
            isGenerating = trigCV[i] > 0.5f;
        }
        
        // 3. Update smoothed parameters
        float density = baseDensity * (densityCV ? juce::jmap(densityCV[i], 0.0f, 1.0f, 0.5f, 2.0f) : 1.0f);
        float sizeMs = baseSize * (sizeCV ? juce::jmap(sizeCV[i], 0.0f, 1.0f, 0.1f, 2.0f) : 1.0f);
        float position = basePos + (posCV ? posCV[i] - 0.5f : 0.0f);
        float pitch = basePitch + (pitchCV ? juce::jmap(pitchCV[i], 0.0f, 1.0f, -12.0f, 12.0f) : 0.0f);
        float gate = gateCV ? juce::jlimit(0.0f, 1.0f, gateCV[i]) : baseGate;
        
        smoothedDensity.setTargetValue(density);
        smoothedSize.setTargetValue(sizeMs);
        smoothedPosition.setTargetValue(position);
        smoothedPitch.setTargetValue(pitch);
        smoothedGate.setTargetValue(gate);

        // 4. Spawn new grains
        if (isGenerating && --samplesUntilNextGrain <= 0) {
            for (int j = 0; j < (int)grainPool.size(); ++j) {
                if (!grainPool[j].isActive) {
                    launchGrain(j, smoothedDensity.getNextValue(), smoothedSize.getNextValue(),
                                smoothedPosition.getNextValue(), spreadParam->load(),
                                smoothedPitch.getNextValue(), pitchRandomParam->load(), panRandomParam->load());
                    break;
                }
            }
            float currentDensity = smoothedDensity.getCurrentValue();
            samplesUntilNextGrain = (currentDensity > 0.1f) ? (int)(sr / currentDensity) : (int)sr;
        }

        // 5. Process active grains
        float sampleL = 0.0f, sampleR = 0.0f;
        for (auto& grain : grainPool) {
            if (grain.isActive) {
                int readPosInt = (int)grain.readPosition;
                float fraction = (float)(grain.readPosition - readPosInt);
                
                // Linear interpolation
                float sL = sourceBuffer.getSample(0, readPosInt) * (1.0f - fraction) + sourceBuffer.getSample(0, (readPosInt + 1) % sourceBuffer.getNumSamples()) * fraction;
                float sR = sourceBuffer.getSample(1, readPosInt) * (1.0f - fraction) + sourceBuffer.getSample(1, (readPosInt + 1) % sourceBuffer.getNumSamples()) * fraction;

                // Hann window envelope
                float envelope = 0.5f * (1.0f - std::cos(2.0f * juce::MathConstants<float>::pi * (float)(grain.totalLifetime - grain.samplesRemaining) / (float)grain.totalLifetime));
                
                sampleL += sL * envelope * grain.panL;
                sampleR += sR * envelope * grain.panR;

                grain.readPosition += grain.increment;
                if (grain.readPosition >= sourceBuffer.getNumSamples())
                    grain.readPosition -= sourceBuffer.getNumSamples();
                
                if (--grain.samplesRemaining <= 0)
                    grain.isActive = false;
            }
        }
        
        // 6. Apply gate and write to output
        float gateValue = smoothedGate.getNextValue();
        outBus.setSample(0, i, sampleL * gateValue);
        outBus.setSample(1, i, sampleR * gateValue);

        sourceWritePos = (sourceWritePos + 1) % sourceBuffer.getNumSamples();
    }
    
    // Update telemetry
    setLiveParamValue("density_live", smoothedDensity.getCurrentValue());
    setLiveParamValue("size_live", smoothedSize.getCurrentValue());
    setLiveParamValue("position_live", smoothedPosition.getCurrentValue());
    setLiveParamValue("pitch_live", smoothedPitch.getCurrentValue());
    setLiveParamValue("gate_live", smoothedGate.getCurrentValue());
    
    if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, numSamples - 1));
    if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, numSamples - 1));
}

void GranulatorModuleProcessor::launchGrain(int grainIndex, float density, float size, float position, float spread, float pitch, float pitchRandom, float panRandom)
{
    auto& grain = grainPool[grainIndex];
    const double sr = getSampleRate();

    grain.totalLifetime = grain.samplesRemaining = (int)((size / 1000.0f) * sr);
    if (grain.samplesRemaining == 0) return;

    float posOffset = (random.nextFloat() - 0.5f) * spread;
    grain.readPosition = (sourceWritePos - (int)(juce::jlimit(0.0f, 1.0f, position + posOffset) * sourceBuffer.getNumSamples()) + sourceBuffer.getNumSamples()) % sourceBuffer.getNumSamples();

    float pitchOffset = (random.nextFloat() - 0.5f) * pitchRandom;
    grain.increment = std::pow(2.0, (pitch + pitchOffset) / 12.0);

    float pan = (random.nextFloat() - 0.5f) * panRandom;
    grain.panL = std::cos((pan + 1.0f) * juce::MathConstants<float>::pi * 0.25f);
    grain.panR = std::sin((pan + 1.0f) * juce::MathConstants<float>::pi * 0.25f);

    grain.isActive = true;
}

#if defined(PRESET_CREATOR_UI)
void GranulatorModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, const juce::String& modId, float min, float max, const char* format, int flags = 0) {
        bool isMod = isParamModulated(modId);
        float value = isMod ? getLiveParamValueFor(modId, paramId + "_live", ap.getRawParameterValue(paramId)->load())
                            : ap.getRawParameterValue(paramId)->load();
        
        if (isMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(label, &value, min, max, format, flags))
            if (!isMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        if (!isMod) adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    };

    drawSlider("Density", paramIdDensity, paramIdDensityMod, 0.1f, 100.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic);
    drawSlider("Size", paramIdSize, paramIdSizeMod, 5.0f, 500.0f, "%.0f ms", ImGuiSliderFlags_Logarithmic);
    drawSlider("Position", paramIdPosition, paramIdPositionMod, 0.0f, 1.0f, "%.2f");
    drawSlider("Spread", paramIdSpread, "", 0.0f, 1.0f, "%.2f");
    drawSlider("Pitch", paramIdPitch, paramIdPitchMod, -24.0f, 24.0f, "%.1f st");
    drawSlider("Pitch Rand", paramIdPitchRandom, "", 0.0f, 12.0f, "%.1f st");
    drawSlider("Pan Rand", paramIdPanRandom, "", 0.0f, 1.0f, "%.2f");
    drawSlider("Gate", paramIdGate, paramIdGateMod, 0.0f, 1.0f, "%.2f");

    ImGui::PopItemWidth();
}

void GranulatorModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Trigger In", 2);
    helpers.drawAudioInputPin("Density Mod", 3);
    helpers.drawAudioInputPin("Size Mod", 4);
    helpers.drawAudioInputPin("Position Mod", 5);
    helpers.drawAudioInputPin("Pitch Mod", 6);
    helpers.drawAudioInputPin("Gate Mod", 7);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif

bool GranulatorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus.
    if (paramId == paramIdTriggerIn)    { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdDensityMod)   { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdSizeMod)      { outChannelIndexInBus = 4; return true; }
    if (paramId == paramIdPositionMod)  { outChannelIndexInBus = 5; return true; }
    if (paramId == paramIdPitchMod)     { outChannelIndexInBus = 6; return true; }
    if (paramId == paramIdGateMod)      { outChannelIndexInBus = 7; return true; }
    return false;
}

juce::String GranulatorModuleProcessor::getAudioInputLabel(int channel) const
{
    switch(channel) {
        case 0: return "In L";
        case 1: return "In R";
        case 2: return "Trigger In";
        case 3: return "Density Mod";
        case 4: return "Size Mod";
        case 5: return "Position Mod";
        case 6: return "Pitch Mod";
        case 7: return "Gate Mod";
        default: return {};
    }
}

================================================================================
FILE: juce\Source\audio\modules\GranulatorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class GranulatorModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs for APVTS
    static constexpr auto paramIdDensity      = "density";
    static constexpr auto paramIdSize         = "size";
    static constexpr auto paramIdPosition     = "position";
    static constexpr auto paramIdSpread       = "spread";
    static constexpr auto paramIdPitch        = "pitch";
    static constexpr auto paramIdPitchRandom  = "pitchRandom";
    static constexpr auto paramIdPanRandom    = "panRandom";
    static constexpr auto paramIdGate         = "gate";

    // Virtual IDs for modulation inputs, used for routing
    static constexpr auto paramIdTriggerIn    = "trigger_in_mod";
    static constexpr auto paramIdDensityMod   = "density_mod";
    static constexpr auto paramIdSizeMod      = "size_mod";
    static constexpr auto paramIdPositionMod  = "position_mod";
    static constexpr auto paramIdPitchMod     = "pitch_mod";
    static constexpr auto paramIdGateMod      = "gate_mod";

    GranulatorModuleProcessor();
    ~GranulatorModuleProcessor() override = default;

    const juce::String getName() const override { return "granulator"; }

    // --- JUCE AudioProcessor Overrides ---
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // --- UI & Routing Overrides ---
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;

private:
    // --- Internal Implementation ---
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    void launchGrain(int grainIndex, float density, float size, float position, float spread, float pitch, float pitchRandom, float panRandom);

    // --- APVTS & Parameters ---
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* densityParam      { nullptr };
    std::atomic<float>* sizeParam         { nullptr };
    std::atomic<float>* positionParam     { nullptr };
    std::atomic<float>* spreadParam       { nullptr };
    std::atomic<float>* pitchParam        { nullptr };
    std::atomic<float>* pitchRandomParam  { nullptr };
    std::atomic<float>* panRandomParam    { nullptr };
    std::atomic<float>* gateParam         { nullptr };

    // --- Grain State ---
    struct Grain
    {
        bool isActive { false };
        double readPosition { 0.0 };
        double increment { 1.0 };
        int samplesRemaining { 0 };
        int totalLifetime { 0 };
        float panL { 0.707f };
        float panR { 0.707f };
    };
    std::array<Grain, 64> grainPool;
    juce::Random random;

    // --- Audio Buffering ---
    juce::AudioBuffer<float> sourceBuffer;
    int sourceWritePos { 0 };
    int samplesUntilNextGrain { 0 };

    // --- Parameter Smoothing ---
    juce::SmoothedValue<float> smoothedDensity, smoothedSize, smoothedPosition, smoothedPitch, smoothedGate;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(GranulatorModuleProcessor)
};


================================================================================
FILE: juce\Source\audio\modules\GraphicEQModuleProcessor.cpp
================================================================================


#include "GraphicEQModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout GraphicEQModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    // Create a gain parameter for each of the 8 bands
    // FIX: Expand the range to allow for a more effective mute.
    // JUCE's decibelsToGain handles large negative numbers gracefully.
    for (int i = 0; i < 8; ++i)
    {
        juce::String paramID = "gainBand" + juce::String(i + 1);
        juce::String paramName = "Gain " + juce::String(centerFrequencies[i], 0) + " Hz";
        // Change the range from -12.0f to -60.0f. The default remains 0.0f.
        params.push_back(std::make_unique<juce::AudioParameterFloat>(paramID, paramName, -60.0f, 12.0f, 0.0f));
    }

    // FIX: Ensure correct default values are set for all parameters.
    params.push_back(std::make_unique<juce::AudioParameterFloat>("outputLevel", "Output Level", -24.0f, 24.0f, 0.0f));

    // --- NEW PARAMETERS ---
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gateThreshold", "Gate Threshold",
        juce::NormalisableRange<float>(-60.0f, 0.0f, 0.1f), -30.0f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "triggerThreshold", "Trigger Threshold",
        juce::NormalisableRange<float>(-60.0f, 0.0f, 0.1f), -6.0f));
    // --- END OF NEW PARAMETERS ---

    return { params.begin(), params.end() };
}

GraphicEQModuleProcessor::GraphicEQModuleProcessor()
    : ModuleProcessor(BusesProperties()
          // Single unified input bus: Channels 0-1 (Audio In L/R), 2-9 (Band Mods), 10-11 (Gate/Trig Thresh Mods)
          .withInput("Audio In", juce::AudioChannelSet::discreteChannels(12), true)
          // --- THE FIX: Define TWO separate output busses ---
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)
          .withOutput("CV Out", juce::AudioChannelSet::discreteChannels(TotalCVOutputs), true)),
      apvts(*this, nullptr, "GraphicEQParams", createParameterLayout())
{
    for (int i = 0; i < 8; ++i)
    {
        bandGainParams[i] = apvts.getRawParameterValue("gainBand" + juce::String(i + 1));
    }
    outputLevelParam = apvts.getRawParameterValue("outputLevel");
    gateThresholdParam = apvts.getRawParameterValue("gateThreshold");
    triggerThresholdParam = apvts.getRawParameterValue("triggerThreshold");

    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void GraphicEQModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2; // Process in stereo

    processorChain.prepare(spec);
    processorChain.reset();

    // CRITICAL: Initialize all filter coefficients with unity gain (0 dB) to prevent uninitialized state
    const float q = 1.414f;
    *processorChain.get<0>().state = *juce::dsp::IIR::Coefficients<float>::makeLowShelf(sampleRate, centerFrequencies[0], q, 1.0f);
    *processorChain.get<1>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[1], q, 1.0f);
    *processorChain.get<2>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[2], q, 1.0f);
    *processorChain.get<3>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[3], q, 1.0f);
    *processorChain.get<4>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[4], q, 1.0f);
    *processorChain.get<5>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[5], q, 1.0f);
    *processorChain.get<6>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[6], q, 1.0f);
    *processorChain.get<7>().state = *juce::dsp::IIR::Coefficients<float>::makeHighShelf(sampleRate, centerFrequencies[7], q, 1.0f);

    // Reset gate/trigger state
    lastTriggerState = false;
    triggerPulseSamplesRemaining = 0;
}

void GraphicEQModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    juce::ScopedNoDenormals noDenormals;

    auto inBus = getBusBuffer(buffer, true, 0);
    auto audioOutBus = getBusBuffer(buffer, false, 0); // Audio is on bus 0
    auto cvOutBus = getBusBuffer(buffer, false, 1);    // CV is on bus 1

    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // --- Logging Setup ---
    // Log only once every 100 blocks to avoid spamming the log file.
    static int debugCounter = 0;
    const bool shouldLog = ((debugCounter++ % 100) == 0);

    // LOG POINT 1: Check input signal at entry
    if (shouldLog && inBus.getNumChannels() > 0)
    {
        float inputRms = inBus.getRMSLevel(0, 0, numSamples);
        juce::Logger::writeToLog("[GraphicEQ Debug] At Entry - Input RMS: " + juce::String(inputRms, 6));
    }

    // --- CRITICAL FIX: Capture input audio BEFORE any write operations ---
    // Create a temporary buffer to hold a copy of the stereo input (true stereo path)
    juce::AudioBuffer<float> inputCopy(2, numSamples);
    if (inBus.getNumChannels() > 0)
    {
        inputCopy.copyFrom(0, 0, inBus, 0, 0, numSamples);
        if (inBus.getNumChannels() > 1)
            inputCopy.copyFrom(1, 0, inBus, 1, 0, numSamples);
        else
            inputCopy.copyFrom(1, 0, inBus, 0, 0, numSamples); // duplicate mono to R
    }
    else
    {
        inputCopy.clear();
    }
    // --- END OF CRITICAL FIX ---

    // --- 1. Gate/Trigger Analysis (now on the SAFE captured input signal) ---
    // Read threshold parameters and check for modulation CVs
    float gateThreshDb = gateThresholdParam->load();
    float trigThreshDb = triggerThresholdParam->load();

    // Check for modulation on gate threshold (channel 10)
    if (isParamInputConnected("gateThreshold") && inBus.getNumChannels() > 10)
    {
        float modCV = inBus.getSample(10, 0);
        gateThreshDb = juce::jmap(modCV, 0.0f, 1.0f, -60.0f, 0.0f);
        setLiveParamValue("gateThreshold_live", gateThreshDb);
    }

    // Check for modulation on trigger threshold (channel 11)
    if (isParamInputConnected("triggerThreshold") && inBus.getNumChannels() > 11)
    {
        float modCV = inBus.getSample(11, 0);
        trigThreshDb = juce::jmap(modCV, 0.0f, 1.0f, -60.0f, 0.0f);
        setLiveParamValue("triggerThreshold_live", trigThreshDb);
    }

    const float gateThreshLin = juce::Decibels::decibelsToGain(gateThreshDb);
    const float trigThreshLin = juce::Decibels::decibelsToGain(trigThreshDb);

    // --- 2. Write Gate/Trigger CVs (using a mono sum of the captured stereo input) ---
    if (cvOutBus.getNumChannels() >= 2)
    {
        float* gateOut = cvOutBus.getWritePointer(GateOut);
        float* trigOut = cvOutBus.getWritePointer(TrigOut);

        for (int i = 0; i < numSamples; ++i)
        {
            float monoSample = 0.5f * (inputCopy.getSample(0, i) + inputCopy.getSample(1, i));
            float sampleAbs = std::abs(monoSample);

            // Gate output
            gateOut[i] = sampleAbs > gateThreshLin ? 1.0f : 0.0f;

            // Trigger output (edge detection with pulse)
            bool isAboveTrig = sampleAbs > trigThreshLin;
            if (isAboveTrig && !lastTriggerState) {
                triggerPulseSamplesRemaining = (int)(getSampleRate() * 0.001); // 1ms pulse
            }
            lastTriggerState = isAboveTrig;

            trigOut[i] = (triggerPulseSamplesRemaining > 0) ? 1.0f : 0.0f;
            if (triggerPulseSamplesRemaining > 0) triggerPulseSamplesRemaining--;
        }
    }

    // --- 3. Copy Captured Input to AUDIO Output Bus (true stereo) ---
    if (audioOutBus.getNumChannels() >= 2)
    {
        audioOutBus.copyFrom(0, 0, inputCopy, 0, 0, numSamples);
        audioOutBus.copyFrom(1, 0, inputCopy, 1, 0, numSamples);
    }
    else if (audioOutBus.getNumChannels() == 1)
    {
        audioOutBus.copyFrom(0, 0, inputCopy, 0, 0, numSamples);
    }
    else
    {
        audioOutBus.clear();
    }

    // LOG POINT 2: Check signal after copying to output bus
    if (shouldLog && audioOutBus.getNumChannels() > 0)
    {
        float afterCopyRms = audioOutBus.getRMSLevel(0, 0, numSamples);
        juce::Logger::writeToLog("[GraphicEQ Debug] After Copy - Audio Out RMS: " + juce::String(afterCopyRms, 6));
    }

    // --- 4. Update Filter Coefficients ---
    double sampleRate = getSampleRate();
    const float q = 1.414f;

    for (int bandIndex = 0; bandIndex < 8; ++bandIndex)
    {
        float gainDb = bandGainParams[bandIndex]->load();
        juce::String paramId = "gainBand" + juce::String(bandIndex + 1);

        // Check for modulation CV on this band (channels 2-9)
        int modChannel = 2 + bandIndex;
        if (isParamInputConnected(paramId) && inBus.getNumChannels() > modChannel)
        {
            float modCV = inBus.getSample(modChannel, 0);
            gainDb = juce::jmap(modCV, 0.0f, 1.0f, -60.0f, 12.0f);
            setLiveParamValue(paramId + "_live", gainDb);
        }

        float gainLinear = juce::Decibels::decibelsToGain(gainDb);

        // LOG POINT 3: Log filter parameters for Band 1 as a sample
        if (shouldLog && bandIndex == 0)
        {
            juce::Logger::writeToLog("[GraphicEQ Debug] Band 1 - Gain (dB): " + juce::String(gainDb, 2) + 
                                   ", Gain (Linear): " + juce::String(gainLinear, 6));
        }

        // CRITICAL FIX: ProcessorDuplicator needs the shared_ptr, not dereferenced coefficients
        if (bandIndex == 0)
        {
            *processorChain.get<0>().state = *juce::dsp::IIR::Coefficients<float>::makeLowShelf(sampleRate, centerFrequencies[bandIndex], q, gainLinear);
        }
        else if (bandIndex == 7)
        {
            *processorChain.get<7>().state = *juce::dsp::IIR::Coefficients<float>::makeHighShelf(sampleRate, centerFrequencies[bandIndex], q, gainLinear);
        }
        else if (bandIndex >= 1 && bandIndex <= 6) // Peak filters for bands 1-6
        {
            auto newCoefficients = juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[bandIndex], q, gainLinear);
            switch (bandIndex)
            {
                case 1: *processorChain.get<1>().state = *newCoefficients; break;
                case 2: *processorChain.get<2>().state = *newCoefficients; break;
                case 3: *processorChain.get<3>().state = *newCoefficients; break;
                case 4: *processorChain.get<4>().state = *newCoefficients; break;
                case 5: *processorChain.get<5>().state = *newCoefficients; break;
                case 6: *processorChain.get<6>().state = *newCoefficients; break;
            }
        }
    }

    // --- 5. Process Entire Chain in Series (in-place on audioOutBus) ---
    if (audioOutBus.getNumChannels() > 0)
    {
        juce::dsp::AudioBlock<float> audioBlock(audioOutBus.getArrayOfWritePointers(), 
                                                 std::min(2, audioOutBus.getNumChannels()), 
                                                 numSamples);
        juce::dsp::ProcessContextReplacing<float> context(audioBlock);
        processorChain.process(context);

        // LOG POINT 4: Check signal after processing through filter chain
        if (shouldLog)
        {
            float afterChainRms = audioOutBus.getRMSLevel(0, 0, numSamples);
            juce::Logger::writeToLog("[GraphicEQ Debug] After Filter Chain - Audio Out RMS: " + juce::String(afterChainRms, 6));
        }

        // --- 6. Apply Output Gain ---
        float outputGain = juce::Decibels::decibelsToGain(outputLevelParam->load());
        audioOutBus.applyGain(0, 0, numSamples, outputGain);
        if (audioOutBus.getNumChannels() > 1)
            audioOutBus.applyGain(1, 0, numSamples, outputGain);

        // LOG POINT 5: Check final signal after output gain
        if (shouldLog)
        {
            float finalRms = audioOutBus.getRMSLevel(0, 0, numSamples);
            float outputGainDb = outputLevelParam->load();
            juce::Logger::writeToLog("[GraphicEQ Debug] After Output Gain - Audio Out RMS: " + juce::String(finalRms, 6) + 
                                   ", Output Gain (dB): " + juce::String(outputGainDb, 2));
        }
    }
}

bool GraphicEQModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // All inputs are now on Bus 0 with the following layout:
    // Channels 0-1: Audio In L/R
    // Channels 2-9: Band 1-8 Gain Mods
    // Channel 10: Gate Threshold Mod
    // Channel 11: Trigger Threshold Mod

    if (paramId.startsWith("gainBand"))
    {
        int bandIndex = paramId.substring(8).getIntValue() - 1;
        if (bandIndex >= 0 && bandIndex < 8)
        {
            outBusIndex = 0;
            outChannelIndexInBus = 2 + bandIndex; // Start at channel 2
            return true;
        }
    }

    if (paramId == "gateThreshold") { outBusIndex = 0; outChannelIndexInBus = 10; return true; }
    if (paramId == "triggerThreshold") { outBusIndex = 0; outChannelIndexInBus = 11; return true; }

    return false;
}

juce::String GraphicEQModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    if (channel >= 2 && channel < 10) return "Band " + juce::String(channel - 1) + " Mod";
    // --- NEW ---
    if (channel == 10) return "Gate Thr Mod";
    if (channel == 11) return "Trig Thr Mod";
    return {};
}

juce::String GraphicEQModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    // --- NEW ---
    if (channel == 2) return "Gate Out";
    if (channel == 3) return "Trig Out";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void GraphicEQModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    // --- 1. Draw EQ Band Sliders ---
    const int numBands = 8;
    const float sliderWidth = itemWidth / (float)numBands * 0.9f;
    const float sliderHeight = 100.0f;

    ImGui::PushItemWidth(sliderWidth);
    for (int i = 0; i < numBands; ++i)
    {
        if (i > 0) ImGui::SameLine();
        ImGui::PushID(i);
        ImGui::BeginGroup();

        juce::String paramId = "gainBand" + juce::String(i + 1);
        const bool isMod = isParamModulated(paramId);
        float gainDb = isMod ? getLiveParamValueFor(paramId, "gainBand" + juce::String(i + 1) + "_live", bandGainParams[i]->load())
                             : bandGainParams[i]->load();

        if (isMod) ImGui::BeginDisabled();
        if (ImGui::VSliderFloat("##eq", ImVec2(sliderWidth, sliderHeight), &gainDb, -60.0f, 12.0f, ""))
        {
            if (!isMod)
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)))
                {
                    *p = gainDb;
                }
            }
        }
        if (!isMod) adjustParamOnWheel(apvts.getParameter(paramId), paramId, gainDb);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) ImGui::EndDisabled();

        juce::String label = (centerFrequencies[i] < 1000) ? juce::String(centerFrequencies[i], 0) : juce::String(centerFrequencies[i] / 1000.0f, 1) + "k";
        float labelWidth = ImGui::CalcTextSize(label.toRawUTF8()).x;
        float offset = (sliderWidth - labelWidth) * 0.5f;
        if (offset > 0) ImGui::SetCursorPosX(ImGui::GetCursorPosX() + offset);
        ImGui::TextUnformatted(label.toRawUTF8());

        ImGui::EndGroup();
        ImGui::PopID();
    }
    ImGui::PopItemWidth();

    // --- 2. Draw Control Parameters ---
    ImGui::PushItemWidth(itemWidth);

    // Gate Threshold (modulatable)
    const bool isGateMod = isParamModulated("gateThreshold");
    float gateThresh = isGateMod ? getLiveParamValueFor("gateThreshold", "gateThreshold_live", gateThresholdParam->load())
                                 : gateThresholdParam->load();
    if (isGateMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Gate Threshold", &gateThresh, -60.0f, 0.0f, "%.1f dB")) {
        if (!isGateMod) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gateThreshold")))
            {
                *p = gateThresh;
            }
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isGateMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Trigger Threshold (modulatable)
    const bool isTrigMod = isParamModulated("triggerThreshold");
    float trigThresh = isTrigMod ? getLiveParamValueFor("triggerThreshold", "triggerThreshold_live", triggerThresholdParam->load())
                                 : triggerThresholdParam->load();
    if (isTrigMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Trigger Threshold", &trigThresh, -60.0f, 0.0f, "%.1f dB")) {
        if (!isTrigMod) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("triggerThreshold")))
            {
                *p = trigThresh;
            }
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isTrigMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Output Level
    float outLevel = outputLevelParam->load();
    if (ImGui::SliderFloat("Output Level", &outLevel, -24.0f, 24.0f, "%.1f dB"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outputLevel")))
        {
            *p = outLevel;
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }

    ImGui::PopItemWidth();
}

void GraphicEQModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // All inputs on Bus 0 (channels 0-11)
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);

    // Band gain modulation inputs (channels 2-9)
    for (int i = 0; i < 8; ++i)
    {
        helpers.drawAudioInputPin(("Band " + juce::String(i + 1) + " Mod").toRawUTF8(), 2 + i);
    }

    // Threshold modulation inputs (channels 10-11)
    helpers.drawAudioInputPin("Gate Thr Mod", 10);
    helpers.drawAudioInputPin("Trig Thr Mod", 11);

    // Output pins
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
    helpers.drawAudioOutputPin("Gate Out", 2);
    helpers.drawAudioOutputPin("Trig Out", 3);
}
#endif

void GraphicEQModuleProcessor::getStateInformation(juce::MemoryBlock& destData)
{
    // Get the current state of all parameters from the APVTS.
    auto state = apvts.copyState();
    // Create an XML representation of the state.
    std::unique_ptr<juce::XmlElement> xml(state.createXml());
    // Copy the XML data to the destination memory block.
    copyXmlToBinary(*xml, destData);
}

void GraphicEQModuleProcessor::setStateInformation(const void* data, int sizeInBytes)
{
    // Try to get an XML representation from the raw data.
    std::unique_ptr<juce::XmlElement> xmlState(getXmlFromBinary(data, sizeInBytes));

    // If the XML is valid and has the correct tag...
    if (xmlState != nullptr)
        if (xmlState->hasTagName(apvts.state.getType()))
            // ...replace the current APVTS state with the new one.
            apvts.replaceState(juce::ValueTree::fromXml(*xmlState));
}



================================================================================
FILE: juce\Source\audio\modules\GraphicEQModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class GraphicEQModuleProcessor : public ModuleProcessor
{
public:
    enum CVOutputChannel
    {
        GateOut = 0,
        TrigOut,
        TotalCVOutputs // = 2
    };

    GraphicEQModuleProcessor();
    ~GraphicEQModuleProcessor() override = default;

    const juce::String getName() const override { return "graphic eq"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    void getStateInformation(juce::MemoryBlock& destData) override;
    void setStateInformation(const void* data, int sizeInBytes) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // A chain of 8 stereo IIR filters, one for each band.
    using FilterBand = juce::dsp::ProcessorDuplicator<juce::dsp::IIR::Filter<float>, juce::dsp::IIR::Coefficients<float>>;
    using EQChain = juce::dsp::ProcessorChain<FilterBand, FilterBand, FilterBand, FilterBand, FilterBand, FilterBand, FilterBand, FilterBand>;
    EQChain processorChain;

    // Store atomic pointers to all 8 band gain parameters and the output level
    std::array<std::atomic<float>*, 8> bandGainParams;
    std::atomic<float>* outputLevelParam { nullptr };
    std::atomic<float>* gateThresholdParam { nullptr };
    std::atomic<float>* triggerThresholdParam { nullptr };

    // Define the fixed center frequencies for our 8 bands
    static constexpr std::array<float, 8> centerFrequencies = { 63.0f, 125.0f, 250.0f, 500.0f, 1000.0f, 2000.0f, 4000.0f, 8000.0f };

    // Gate/Trigger state tracking (audio-thread only)
    bool lastTriggerState = false;
    int triggerPulseSamplesRemaining = 0;
};



================================================================================
FILE: juce\Source\audio\modules\FrequencyGraphModuleProcessor.cpp
================================================================================


#include "FrequencyGraphModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#endif

juce::AudioProcessorValueTreeState::ParameterLayout FrequencyGraphModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDecay, "Decay Time", 0.90f, 0.999f, 0.98f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdSubThreshold, "Sub Threshold", -96.0f, 0.0f, -24.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdBassThreshold, "Bass Threshold", -96.0f, 0.0f, -24.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMidThreshold, "Mid Threshold", -96.0f, 0.0f, -24.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdHighThreshold, "High Threshold", -96.0f, 0.0f, -24.0f));
    return { params.begin(), params.end() };
}

FrequencyGraphModuleProcessor::FrequencyGraphModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("In", juce::AudioChannelSet::mono(), true)
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)
          .withOutput("CV Out", juce::AudioChannelSet::discreteChannels(TotalCVOutputs), true)),
      apvts(*this, nullptr, "FreqGraphParams", createParameterLayout()),
      fft(fftOrder),
      window(fftSize, juce::dsp::WindowingFunction<float>::hann),
      abstractFifo(128)
{
    fftInputBuffer.resize(fftSize, 0.0f);
    fftData.resize(fftSize * 2, 0.0f);

    fifoBuffer.resize(128);
    for (auto& frame : fifoBuffer) { frame.resize(fftSize / 2 + 1, 0.0f); }
    latestFftData.resize(fftSize / 2 + 1, -100.0f);
    peakHoldData.resize(fftSize / 2 + 1, -100.0f);

    decayParam = apvts.getRawParameterValue(paramIdDecay);
    subThresholdParam = apvts.getRawParameterValue(paramIdSubThreshold);
    bassThresholdParam = apvts.getRawParameterValue(paramIdBassThreshold);
    midThresholdParam = apvts.getRawParameterValue(paramIdMidThreshold);
    highThresholdParam = apvts.getRawParameterValue(paramIdHighThreshold);
    
    juce::Logger::writeToLog("[FrequencyGraph] Constructor: Instance created.");
}

void FrequencyGraphModuleProcessor::prepareToPlay(double sampleRate, int /*samplesPerBlock*/)
{
    samplesAccumulated = 0;
    abstractFifo.reset();
    std::fill(latestFftData.begin(), latestFftData.end(), -100.0f);
    std::fill(peakHoldData.begin(), peakHoldData.end(), -100.0f);
    for(auto& analyser : bandAnalysers)
    {
        analyser.lastGateState = false;
        analyser.triggerSamplesRemaining = 0;
    }
    juce::Logger::writeToLog("[FrequencyGraph] prepareToPlay: State reset for sample rate " + juce::String(sampleRate));
}

void FrequencyGraphModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& /*midi*/)
{
    juce::ScopedNoDenormals noDenormals;

    auto inBus = getBusBuffer(buffer, true, 0);
    auto audioOutBus = getBusBuffer(buffer, false, 0); // Audio is on bus 0
    auto cvOutBus = getBusBuffer(buffer, false, 1);    // CV is on bus 1

    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // --- Logging Setup ---
    static int debugCounter = 0;
    const bool shouldLog = ((debugCounter++ % 100) == 0);

    if (shouldLog && inBus.getNumChannels() > 0)
    {
        float inputRms = inBus.getRMSLevel(0, 0, numSamples);
        juce::Logger::writeToLog("[GraphicEQ Debug] At Entry - Input RMS: " + juce::String(inputRms, 6));
    }

    // --- CRITICAL FIX: Capture input audio BEFORE any write operations ---
    juce::AudioBuffer<float> inputCopy(2, numSamples);
    if (inBus.getNumChannels() > 0)
    {
        inputCopy.copyFrom(0, 0, inBus, 0, 0, numSamples);
        if (inBus.getNumChannels() > 1)
            inputCopy.copyFrom(1, 0, inBus, 1, 0, numSamples);
        else
            inputCopy.copyFrom(1, 0, inBus, 0, 0, numSamples); // duplicate mono to R
    }
    else
    {
        inputCopy.clear();
    }
    // --- END OF CRITICAL FIX ---

    // --- FFT Processing (uses its own safe buffer) ---
    const double sampleRate = getSampleRate();
    const float* inputData = inputCopy.getReadPointer(0); // Analyze the mono sum from our safe copy
    if (inputData)
    {
        bandAnalysers[0].thresholdDb = subThresholdParam->load();
        bandAnalysers[1].thresholdDb = bassThresholdParam->load();
        bandAnalysers[2].thresholdDb = midThresholdParam->load();
        bandAnalysers[3].thresholdDb = highThresholdParam->load();
        
        int inputSamplesConsumed = 0;
        
        while (inputSamplesConsumed < numSamples)
        {
            const int samplesToCopy = std::min(numSamples - inputSamplesConsumed, fftSize - samplesAccumulated);
            
            std::copy(inputData + inputSamplesConsumed,
                      inputData + inputSamplesConsumed + samplesToCopy,
                      fftInputBuffer.begin() + samplesAccumulated);
            
            samplesAccumulated += samplesToCopy;
            inputSamplesConsumed += samplesToCopy;

            if (samplesAccumulated >= fftSize)
            {
                std::fill(fftData.begin(), fftData.end(), 0.0f);
                std::copy(fftInputBuffer.begin(), fftInputBuffer.end(), fftData.begin());
                window.multiplyWithWindowingTable(fftData.data(), fftSize);
                fft.performFrequencyOnlyForwardTransform(fftData.data());

                float bandEnergyDb[4] = { -100.0f, -100.0f, -100.0f, -100.0f };
                const float bandRanges[] = { 60, 250, 2000, 8000, 22000 };
                int currentBand = 0;
                float maxInBand = 0.0f;

                for (int bin = 1; bin < fftSize / 2 + 1; ++bin)
                {
                    float freq = (float)bin * (float)sampleRate / (float)fftSize;
                    if (freq > bandRanges[currentBand])
                    {
                        float normalizedMagnitude = maxInBand / (float)fftSize;
                        bandEnergyDb[currentBand] = juce::Decibels::gainToDecibels(normalizedMagnitude, -100.0f);
                        currentBand++;
                        maxInBand = 0.0f;
                        if (currentBand >= 4) break;
                    }
                    maxInBand = std::max(maxInBand, fftData[bin]);
                }

                for (int band = 0; band < 4; ++band)
                {
                    bool gateState = bandEnergyDb[band] > bandAnalysers[band].thresholdDb;
                    if (gateState && !bandAnalysers[band].lastGateState)
                    {
                        bandAnalysers[band].triggerSamplesRemaining = (int)(sampleRate * 0.001);
                    }
                    bandAnalysers[band].lastGateState = gateState;
                }

                int start1, size1, start2, size2;
                abstractFifo.prepareToWrite(1, start1, size1, start2, size2);
                if (size1 > 0)
                {
                    for (int bin = 0; bin < fftSize / 2 + 1; ++bin)
                    {
                        float magnitude = fftData[bin] / (float)fftSize;
                        fifoBuffer[start1][bin] = juce::Decibels::gainToDecibels(magnitude, -100.0f);
                    }
                    abstractFifo.finishedWrite(1);
                }

                std::move(fftInputBuffer.begin() + hopSize, fftInputBuffer.end(), fftInputBuffer.begin());
                samplesAccumulated -= hopSize;
            }
        }
    }
    
    // --- Copy Captured Input to AUDIO Output Bus for Passthrough ---
    if (audioOutBus.getNumChannels() > 0)
    {
        audioOutBus.copyFrom(0, 0, inputCopy, 0, 0, numSamples);
        if (audioOutBus.getNumChannels() > 1)
            audioOutBus.copyFrom(1, 0, inputCopy, 1, 0, numSamples);
    }
    else
    {
        audioOutBus.clear();
    }
    
    // --- WRITE CV/GATE OUTPUTS ---
    cvOutBus.clear();
    for (int i = 0; i < numSamples; ++i)
    {
        for (int band = 0; band < 4; ++band)
        {
            if (cvOutBus.getNumChannels() > (1 + band * 2))
            {
                float* gateOut = cvOutBus.getWritePointer(band * 2);
                float* trigOut = cvOutBus.getWritePointer(band * 2 + 1);
                gateOut[i] = bandAnalysers[band].lastGateState ? 1.0f : 0.0f;
                trigOut[i] = (bandAnalysers[band].triggerSamplesRemaining > 0) ? 1.0f : 0.0f;
            }
        }
        
        for (auto& analyser : bandAnalysers)
        {
            if (analyser.triggerSamplesRemaining > 0)
            {
                analyser.triggerSamplesRemaining--;
            }
        }
    }
}

#if defined(PRESET_CREATOR_UI)

void FrequencyGraphModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    if (!isFrozen && abstractFifo.getNumReady() > 0)
    {
        int start1, size1, start2, size2;
        abstractFifo.prepareToRead(1, start1, size1, start2, size2);
        if (size1 > 0) { latestFftData = fifoBuffer[start1]; }
        abstractFifo.finishedRead(1);
    }
    
    float decayFactor = decayParam->load();
    for (size_t i = 0; i < latestFftData.size(); ++i)
    {
        if (latestFftData[i] > peakHoldData[i])
        {
            peakHoldData[i] = latestFftData[i];
        }
        else
        {
            peakHoldData[i] = peakHoldData[i] * decayFactor + (1.0f - decayFactor) * -100.0f;
        }
        peakHoldData[i] = juce::jmax(-100.0f, peakHoldData[i]);
    }

    const float graphWidth = 400.0f;
    const float graphHeight = 200.0f;
    ImGui::Dummy(ImVec2(graphWidth, graphHeight));
    ImVec2 p0 = ImGui::GetItemRectMin();
    ImVec2 p1 = ImGui::GetItemRectMax();
    auto* drawList = ImGui::GetWindowDrawList();
    
    // --- Define the dB range with more headroom ---
    const float minDb = -96.0f;
    const float maxDb = 24.0f;

    // --- FIX 1: Add a clipping rectangle WITHOUT intersecting with parent ---
    // The 'false' parameter means don't intersect with current clip rect
    drawList->PushClipRect(p0, p1, false);

    // Draw background and grid lines
    drawList->AddRectFilled(p0, p1, IM_COL32(20, 22, 24, 255));
    
    // --- Adjust grid lines for the new range ---
    for (int db = 12; db >= (int)minDb; db -= 12)
    {
        float y = juce::jmap((float)db, minDb, maxDb, p1.y, p0.y);
        drawList->AddLine(ImVec2(p0.x, y), ImVec2(p1.x, y), IM_COL32(50, 55, 60, 255));
        if (db <= 12) // Only draw labels within the old visible range to avoid clutter
        {
            drawList->AddText(ImGui::GetFont(), ImGui::GetFontSize() * 0.8f, ImVec2(p0.x + 4, y - 14), IM_COL32(150, 150, 150, 255), juce::String(db).toRawUTF8());
        }
    }
    const float freqs[] = { 30, 100, 300, 1000, 3000, 10000, 20000 };
    for (float freq : freqs)
    {
        float x = juce::jmap(std::log10(freq), std::log10(20.0f), std::log10(22000.0f), p0.x, p1.x);
        drawList->AddLine(ImVec2(x, p0.y), ImVec2(x, p1.y), IM_COL32(50, 55, 60, 255));
    }
    
    // --- FIX 2: Draw two separate lines instead of a filled polygon ---
    // Helper lambda to draw a line graph from a data vector
    auto drawLineGraph = [&](const std::vector<float>& data, ImU32 color, float thickness) {
        if (data.size() < 2) return;
        for (size_t i = 1; i < data.size(); ++i)
        {
            float freq_prev = (float)(i - 1) * (float)getSampleRate() / (float)fftSize;
            float freq_curr = (float)i * (float)getSampleRate() / (float)fftSize;

            if (freq_curr < 20.0f) continue;
            if (freq_prev > 22000.0f) break;

            float x_prev = p0.x + (std::log10(freq_prev) - std::log10(20.0f)) / (std::log10(22000.0f) - std::log10(20.0f)) * graphWidth;
            // Use new dB range for data plotting
            float y_prev = p1.y + (data[i - 1] - minDb) / (maxDb - minDb) * (p0.y - p1.y);

            float x_curr = p0.x + (std::log10(freq_curr) - std::log10(20.0f)) / (std::log10(22000.0f) - std::log10(20.0f)) * graphWidth;
            float y_curr = p1.y + (data[i] - minDb) / (maxDb - minDb) * (p0.y - p1.y);
            
            drawList->AddLine(ImVec2(x_prev, y_prev), ImVec2(x_curr, y_curr), color, thickness);
        }
    };

    // Draw the peak-hold line (dimmer, in the background)
    drawLineGraph(peakHoldData, IM_COL32(255, 150, 80, 150), 1.5f);

    // Draw the live FFT data line (brighter, on top)
    drawLineGraph(latestFftData, IM_COL32(120, 170, 255, 220), 2.0f);
    
    // Border and clip cleanup
    drawList->AddRect(p0, p1, IM_COL32(80, 80, 80, 255));
    drawList->PopClipRect(); // Pop the clipping rectangle

    ImGui::PushItemWidth(itemWidth);
    
    ImGui::Checkbox("Freeze", &isFrozen);
    
    auto& ap = getAPVTS();
    float decay = decayParam->load();
    if (ImGui::SliderFloat("Decay", &decay, 0.90f, 0.999f, "%.3f", ImGuiSliderFlags_Logarithmic)) {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(FrequencyGraphModuleProcessor::paramIdDecay)))
        {
            *p = decay;
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();

    auto drawThresholdSlider = [&](const char* label, std::atomic<float>* param, const char* paramId) {
        float val = param->load();
        if (ImGui::SliderFloat(label, &val, -96.0f, 0.0f, "%.1f dB")) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)))
            {
                *p = val;
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        // Use new dB range for threshold line plotting
        float y = juce::jmap(val, minDb, maxDb, p1.y, p0.y);
        drawList->AddLine(ImVec2(p0.x, y), ImVec2(p1.x, y), IM_COL32(255, 100, 100, 150), 1.5f);
    };

    drawThresholdSlider("Sub Thr", subThresholdParam, FrequencyGraphModuleProcessor::paramIdSubThreshold);
    drawThresholdSlider("Bass Thr", bassThresholdParam, FrequencyGraphModuleProcessor::paramIdBassThreshold);
    drawThresholdSlider("Mid Thr", midThresholdParam, FrequencyGraphModuleProcessor::paramIdMidThreshold);
    drawThresholdSlider("High Thr", highThresholdParam, FrequencyGraphModuleProcessor::paramIdHighThreshold);

    ImGui::PopItemWidth();

    if (ImGui::IsItemHovered(ImGuiHoveredFlags_RectOnly))
    {
        ImVec2 mousePos = ImGui::GetMousePos();
        if (ImGui::IsMousePosValid(&mousePos) && mousePos.x >= p0.x && mousePos.x <= p1.x && mousePos.y >= p0.y && mousePos.y <= p1.y)
        {
            float mouseFreq = std::pow(10.0f, juce::jmap(mousePos.x, p0.x, p1.x, std::log10(20.0f), std::log10(22000.0f)));
            // Use new dB range for tooltip calculation
            float mouseDb = juce::jmap(mousePos.y, p1.y, p0.y, minDb, maxDb);
            ImGui::BeginTooltip();
            ImGui::Text("%.1f Hz", mouseFreq);
            ImGui::Text("%.1f dB", mouseDb);
            ImGui::EndTooltip();
        }
    }
}

void FrequencyGraphModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawParallelPins("In", 0, "Out L", 0);
    helpers.drawParallelPins(nullptr, -1, "Out R", 1);
    ImGui::Spacing();
    helpers.drawParallelPins(nullptr, -1, "Sub Gate", 2);
    helpers.drawParallelPins(nullptr, -1, "Sub Trig", 3);
    helpers.drawParallelPins(nullptr, -1, "Bass Gate", 4);
    helpers.drawParallelPins(nullptr, -1, "Bass Trig", 5);
    helpers.drawParallelPins(nullptr, -1, "Mid Gate", 6);
    helpers.drawParallelPins(nullptr, -1, "Mid Trig", 7);
    helpers.drawParallelPins(nullptr, -1, "High Gate", 8);
    helpers.drawParallelPins(nullptr, -1, "High Trig", 9);
}

#endif

juce::String FrequencyGraphModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In";
    return {};
}

juce::String FrequencyGraphModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    
    int cvChannel = channel - 2;
    if (cvChannel >= 0)
    {
        switch (cvChannel)
        {
            case SubGate: return "Sub Gate";
            case SubTrig: return "Sub Trig";
            case BassGate: return "Bass Gate";
            case BassTrig: return "Bass Trig";
            case MidGate: return "Mid Gate";
            case MidTrig: return "Mid Trig";
            case HighGate: return "High Gate";
            case HighTrig: return "High Trig";
            default: return {};
        }
    }
    return {};
}

bool FrequencyGraphModuleProcessor::getParamRouting(const juce::String&, int&, int&) const
{
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\FrequencyGraphModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <vector>

class FrequencyGraphModuleProcessor : public ModuleProcessor
{
public:
    static constexpr auto paramIdDecay = "decay";
    static constexpr auto paramIdSubThreshold = "subThreshold";
    static constexpr auto paramIdBassThreshold = "bassThreshold";
    static constexpr auto paramIdMidThreshold = "midThreshold";
    static constexpr auto paramIdHighThreshold = "highThreshold";
    
    // CV Output channels are on Bus 1
    enum CVOutputChannel
    {
        SubGate = 0, SubTrig,
        BassGate, BassTrig,
        MidGate, MidTrig,
        HighGate, HighTrig,
        TotalCVOutputs // This will be 8
    };

    FrequencyGraphModuleProcessor();
    ~FrequencyGraphModuleProcessor() override = default;

    const juce::String getName() const override { return "frequency graph"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    static constexpr int fftOrder = 11;
    static constexpr int fftSize = 1 << fftOrder;
    static constexpr int hopSize = fftSize / 4;

    juce::dsp::FFT fft;
    juce::dsp::WindowingFunction<float> window;
    
    std::vector<float> fftInputBuffer;
    std::vector<float> fftData;
    int samplesAccumulated = 0;

    juce::AbstractFifo abstractFifo;
    std::vector<std::vector<float>> fifoBuffer;

    std::vector<float> latestFftData;
    std::vector<float> peakHoldData;
    bool isFrozen = false;

    struct BandAnalyser
    {
        float thresholdDb = -24.0f;
        bool lastGateState = false;
        int triggerSamplesRemaining = 0;
    };
    std::array<BandAnalyser, 4> bandAnalysers;

    std::atomic<float>* decayParam { nullptr };
    std::atomic<float>* subThresholdParam { nullptr };
    std::atomic<float>* bassThresholdParam { nullptr };
    std::atomic<float>* midThresholdParam { nullptr };
    std::atomic<float>* highThresholdParam { nullptr };
};


================================================================================
FILE: juce\Source\audio\modules\HarmonicShaperModuleProcessor.cpp
================================================================================


#include "HarmonicShaperModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout HarmonicShaperModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    // --- Global Parameters ---
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMasterFreq, "Master Frequency",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMasterDrive, "Master Drive", 0.0f, 1.0f, 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdOutputGain, "Output Gain",
        juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.5f));

    // --- Per-Oscillator Parameters ---
    for (int i = 0; i < NUM_OSCILLATORS; ++i)
    {
        auto idx = juce::String(i + 1);
        params.push_back(std::make_unique<juce::AudioParameterFloat>("ratio_" + idx, "Ratio " + idx,
            juce::NormalisableRange<float>(0.125f, 16.0f, 0.001f, 0.25f), (float)(i + 1)));
        params.push_back(std::make_unique<juce::AudioParameterFloat>("detune_" + idx, "Detune " + idx, -100.0f, 100.0f, 0.0f));
        params.push_back(std::make_unique<juce::AudioParameterChoice>("waveform_" + idx, "Waveform " + idx,
            juce::StringArray{ "Sine", "Saw", "Square", "Triangle" }, 0));
        params.push_back(std::make_unique<juce::AudioParameterFloat>("drive_" + idx, "Drive " + idx, 0.0f, 1.0f, 0.5f));
        params.push_back(std::make_unique<juce::AudioParameterFloat>("level_" + idx, "Level " + idx, 0.0f, 1.0f, i == 0 ? 1.0f : 0.0f));
    }

    return { params.begin(), params.end() };
}

HarmonicShaperModuleProcessor::HarmonicShaperModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withInput("Audio In", juce::AudioChannelSet::stereo(), true)
        .withInput("Modulation", juce::AudioChannelSet::discreteChannels(2), true) // Freq, Drive
        .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "HarmonicShaperParams", createParameterLayout())
{
    // Cache global parameter pointers
    masterFreqParam = apvts.getRawParameterValue(paramIdMasterFreq);
    masterDriveParam = apvts.getRawParameterValue(paramIdMasterDrive);
    outputGainParam = apvts.getRawParameterValue(paramIdOutputGain);

    // Initialize oscillators and cache per-oscillator parameter pointers
    for (int i = 0; i < NUM_OSCILLATORS; ++i)
    {
        oscillators[i].initialise([](float x) { return std::sin(x); }, 128);
        currentWaveforms[i] = -1; // Force initial waveform setup

        auto idx = juce::String(i + 1);
        ratioParams[i] = apvts.getRawParameterValue("ratio_" + idx);
        detuneParams[i] = apvts.getRawParameterValue("detune_" + idx);
        waveformParams[i] = apvts.getRawParameterValue("waveform_" + idx);
        driveParams[i] = apvts.getRawParameterValue("drive_" + idx);
        levelParams[i] = apvts.getRawParameterValue("level_" + idx);
    }
}

void HarmonicShaperModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec{ sampleRate, (juce::uint32)samplesPerBlock, 1 };
    for (auto& osc : oscillators)
    {
        osc.prepare(spec);
    }
    smoothedMasterFreq.reset(sampleRate, 0.02);
    smoothedMasterDrive.reset(sampleRate, 0.02);
}

void HarmonicShaperModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto audioInBus = getBusBuffer(buffer, true, 0);
    auto modInBus = getBusBuffer(buffer, true, 1);
    auto outBus = getBusBuffer(buffer, false, 0);

    const bool isFreqMod = isParamInputConnected(paramIdMasterFreqMod);
    const bool isDriveMod = isParamInputConnected(paramIdMasterDriveMod);

    const float* freqCV = isFreqMod && modInBus.getNumChannels() > 0 ? modInBus.getReadPointer(0) : nullptr;
    const float* driveCV = isDriveMod && modInBus.getNumChannels() > 1 ? modInBus.getReadPointer(1) : nullptr;

    const float baseFrequency = masterFreqParam->load();
    const float baseMasterDrive = masterDriveParam->load();
    const float outputGain = outputGainParam->load();
    
    auto* outL = outBus.getWritePointer(0);
    auto* outR = outBus.getNumChannels() > 1 ? outBus.getWritePointer(1) : outL;
    
    const float* inL = audioInBus.getReadPointer(0);
    const float* inR = audioInBus.getNumChannels() > 1 ? audioInBus.getReadPointer(1) : inL;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        // === 1. Calculate Global Modulated Parameters (per-sample) ===
        float currentMasterFreq = baseFrequency;
        if (freqCV) {
            const float cv = juce::jlimit(0.0f, 1.0f, freqCV[i]);
            const float spanOct = std::log2(20000.0f / 20.0f);
            currentMasterFreq = 20.0f * std::pow(2.0f, cv * spanOct);
        }
        smoothedMasterFreq.setTargetValue(currentMasterFreq);

        float currentMasterDrive = baseMasterDrive;
        if (driveCV) {
            currentMasterDrive = juce::jlimit(0.0f, 1.0f, driveCV[i]);
        }
        smoothedMasterDrive.setTargetValue(currentMasterDrive);
        
        // === 2. Generate and Sum the 8 Oscillators ===
        float carrierSample = 0.0f;
        const float smoothedFreq = smoothedMasterFreq.getNextValue();
        const float smoothedDrive = smoothedMasterDrive.getNextValue();

        for (int osc = 0; osc < NUM_OSCILLATORS; ++osc)
        {
            const float level = levelParams[osc]->load();
            if (level <= 0.001f) continue; // Skip silent oscillators

            const int waveform = (int)waveformParams[osc]->load();
            if (currentWaveforms[osc] != waveform)
            {
                if (waveform == 0)      oscillators[osc].initialise([](float x) { return std::sin(x); });
                else if (waveform == 1) oscillators[osc].initialise([](float x) { return x / juce::MathConstants<float>::pi; });
                else if (waveform == 2) oscillators[osc].initialise([](float x) { return x < 0.0f ? -1.0f : 1.0f; });
                else                    oscillators[osc].initialise([](float x) { return 2.0f / juce::MathConstants<float>::pi * std::asin(std::sin(x)); });
                currentWaveforms[osc] = waveform;
            }

            const float frequency = smoothedFreq * ratioParams[osc]->load() + detuneParams[osc]->load();
            oscillators[osc].setFrequency(juce::jlimit(1.0f, (float)getSampleRate() * 0.5f, frequency), true);

            const float oscSample = oscillators[osc].processSample(0.0f);
            const float drive = driveParams[osc]->load() * smoothedDrive;
            const float shapedSample = std::tanh(oscSample * (1.0f + drive * 9.0f));
            carrierSample += shapedSample * level;
        }

        // Soft-clip the summed carrier signal to prevent extreme levels while preserving harmonic richness
        carrierSample = std::tanh(carrierSample);
        
        // === 3. Modulate Input with Carrier and Apply Gain ===
        outL[i] = inL[i] * carrierSample * outputGain;
        outR[i] = inR[i] * carrierSample * outputGain;

        // === 4. Update UI Telemetry (Throttled) ===
        if ((i & 63) == 0) {
            setLiveParamValue("masterFrequency_live", smoothedFreq);
            setLiveParamValue("masterDrive_live", smoothedDrive);
        }
    }
}

#if defined(PRESET_CREATOR_UI)

void HarmonicShaperModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    // --- Global Controls ---
    const bool freqIsMod = isParamModulated(paramIdMasterFreqMod);
    float freq = freqIsMod ? getLiveParamValueFor(paramIdMasterFreqMod, "masterFrequency_live", masterFreqParam->load()) : masterFreqParam->load();

    const bool driveIsMod = isParamModulated(paramIdMasterDriveMod);
    float drive = driveIsMod ? getLiveParamValueFor(paramIdMasterDriveMod, "masterDrive_live", masterDriveParam->load()) : masterDriveParam->load();

    float gain = outputGainParam->load();

    ImGui::PushItemWidth(itemWidth);

    if (freqIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Master Freq", &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic)) {
        if (!freqIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMasterFreq))) *p = freq;
    }
    if (!freqIsMod) adjustParamOnWheel(ap.getParameter(paramIdMasterFreq), "masterFreqHz", freq);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (freqIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (driveIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Master Drive", &drive, 0.0f, 1.0f, "%.2f")) {
        if (!driveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMasterDrive))) *p = drive;
    }
    if (!driveIsMod) adjustParamOnWheel(ap.getParameter(paramIdMasterDrive), "masterDrive", drive);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (driveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (ImGui::SliderFloat("Output Gain", &gain, 0.0f, 1.0f, "%.2f")) {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdOutputGain))) *p = gain;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    ImGui::PopItemWidth(); // Pop width for global controls

    // --- Per-Oscillator Controls ---
    ImGui::Text("Oscillators");
    
    for (int i = 0; i < NUM_OSCILLATORS; ++i)
    {
        auto idx = juce::String(i + 1);
        ImGui::PushID(i);
        ImGui::Text("Oscillator %d", i + 1);
        
        // --- START OF THE ACTUAL FIX: Manual Layout for each control ---
        // Define an alignment position for the sliders
        const float label_width = 80.0f;
        const float control_width = itemWidth - label_width - ImGui::GetStyle().ItemSpacing.x;

        // Level
        float level = levelParams[i]->load();
        ImGui::Text("Level"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::SliderFloat("##level", &level, 0.0f, 1.0f, "%.2f"))
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("level_" + idx))) *p = level;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();

        // Ratio
        float ratio = ratioParams[i]->load();
        ImGui::Text("Ratio"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::SliderFloat("##ratio", &ratio, 0.125f, 16.0f, "%.3fx", ImGuiSliderFlags_Logarithmic))
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("ratio_" + idx))) *p = ratio;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();

        // Detune
        float detune = detuneParams[i]->load();
        ImGui::Text("Detune"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::SliderFloat("##detune", &detune, -100.0f, 100.0f, "%.2f cents"))
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("detune_" + idx))) *p = detune;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();

        // Waveform
        int wave = (int)waveformParams[i]->load();
        ImGui::Text("Waveform"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::Combo("##wave", &wave, "Sine\0Saw\0Square\0Triangle\0\0"))
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("waveform_" + idx))) *p = wave;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();
        
        // Drive
        float oscDrive = driveParams[i]->load();
        ImGui::Text("Drive"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::SliderFloat("##drive", &oscDrive, 0.0f, 1.0f, "%.2f"))
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("drive_" + idx))) *p = oscDrive;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();

        ImGui::PopID();
    }
}

void HarmonicShaperModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Freq Mod", 2);
    helpers.drawAudioInputPin("Drive Mod", 3);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}

juce::String HarmonicShaperModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel) {
        case 0: return "In L";
        case 1: return "In R";
        case 2: return "Freq Mod";
        case 3: return "Drive Mod";
        default: return {};
    }
}

juce::String HarmonicShaperModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel) {
        case 0: return "Out L";
        case 1: return "Out R";
        default: return {};
    }
}

#endif // PRESET_CREATOR_UI

bool HarmonicShaperModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // Modulation inputs are on bus 1
    outBusIndex = 1; 
    if (paramId == paramIdMasterFreqMod) { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdMasterDriveMod) { outChannelIndexInBus = 1; return true; }
    return false;
}



================================================================================
FILE: juce\Source\audio\modules\HarmonicShaperModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class HarmonicShaperModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int NUM_OSCILLATORS = 8;

    // --- Parameter IDs ---
    static constexpr auto paramIdMasterFreq   = "masterFrequency";
    static constexpr auto paramIdMasterDrive  = "masterDrive";
    static constexpr auto paramIdOutputGain   = "outputGain";
    // Modulation targets
    static constexpr auto paramIdMasterFreqMod = "masterFrequency_mod";
    static constexpr auto paramIdMasterDriveMod = "masterDrive_mod";

    HarmonicShaperModuleProcessor();
    ~HarmonicShaperModuleProcessor() override = default;

    const juce::String getName() const override { return "harmonic shaper"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    std::array<juce::dsp::Oscillator<float>, NUM_OSCILLATORS> oscillators;
    std::array<int, NUM_OSCILLATORS> currentWaveforms;

    // --- Cached Parameter Pointers ---
    std::atomic<float>* masterFreqParam { nullptr };
    std::atomic<float>* masterDriveParam { nullptr };
    std::atomic<float>* outputGainParam { nullptr };
    std::array<std::atomic<float>*, NUM_OSCILLATORS> ratioParams;
    std::array<std::atomic<float>*, NUM_OSCILLATORS> detuneParams;
    std::array<std::atomic<float>*, NUM_OSCILLATORS> waveformParams;
    std::array<std::atomic<float>*, NUM_OSCILLATORS> driveParams;
    std::array<std::atomic<float>*, NUM_OSCILLATORS> levelParams;

    // --- Smoothed Values for Zipper-Free Modulation ---
    juce::SmoothedValue<float> smoothedMasterFreq;
    juce::SmoothedValue<float> smoothedMasterDrive;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(HarmonicShaperModuleProcessor);
};



================================================================================
FILE: juce\Source\audio\modules\InletModuleProcessor.cpp
================================================================================


#include "InletModuleProcessor.h"

InletModuleProcessor::InletModuleProcessor()
    : ModuleProcessor(BusesProperties()
                      .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "InletParams", createParameterLayout()),
      customLabel("Inlet")
{
    // Initialize output value tracking
    lastOutputValues.clear();
    for (int i = 0; i < 2; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout InletModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    
    layout.add(std::make_unique<juce::AudioParameterInt>(
        paramIdChannelCount,
        "Channel Count",
        1, 16, 2
    ));
    
    return layout;
}

void InletModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void InletModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // If we have an incoming buffer from the parent MetaModule, copy it
    if (incomingBuffer != nullptr && incomingBuffer->getNumSamples() > 0)
    {
        const int numChannelsToCopy = juce::jmin(buffer.getNumChannels(), incomingBuffer->getNumChannels());
        const int numSamplesToCopy = juce::jmin(buffer.getNumSamples(), incomingBuffer->getNumSamples());
        
        for (int ch = 0; ch < numChannelsToCopy; ++ch)
        {
            buffer.copyFrom(ch, 0, *incomingBuffer, ch, 0, numSamplesToCopy);
        }
        
        // Update output telemetry
        if (lastOutputValues.size() >= 2)
        {
            lastOutputValues[0]->store(buffer.getMagnitude(0, 0, buffer.getNumSamples()));
            if (buffer.getNumChannels() > 1)
                lastOutputValues[1]->store(buffer.getMagnitude(1, 0, buffer.getNumSamples()));
        }
    }
    else
    {
        // No incoming buffer - output silence
        buffer.clear();
    }
}

juce::ValueTree InletModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("InletState");
    vt.setProperty("customLabel", customLabel, nullptr);
    return vt;
}

void InletModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("InletState"))
    {
        customLabel = vt.getProperty("customLabel", "Inlet").toString();
    }
}

#if defined(PRESET_CREATOR_UI)
void InletModuleProcessor::drawParametersInNode(float itemWidth,
                                                const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated, onModificationEnded);
    
    auto& ap = getAPVTS();
    
    ImGui::PushItemWidth(itemWidth);
    
    // Label editor
    char labelBuf[64];
    strncpy(labelBuf, customLabel.toRawUTF8(), sizeof(labelBuf) - 1);
    labelBuf[sizeof(labelBuf) - 1] = '\0';
    
    if (ImGui::InputText("Label", labelBuf, sizeof(labelBuf)))
    {
        customLabel = juce::String(labelBuf);
    }
    
    // Channel count
    int channelCount = 2;
    if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
        channelCount = p->get();
    
    if (ImGui::SliderInt("Channels", &channelCount, 1, 16))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
            *p = channelCount;
    }
    
    ImGui::PopItemWidth();
}
#endif



================================================================================
FILE: juce\Source\audio\modules\InletModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

/**
    InletModuleProcessor - Acts as a signal inlet for Meta Modules
    
    This module has no inputs (inside the meta module) and provides outputs
    that represent signals coming from outside the meta module.
    
    From the outside perspective, the MetaModule will have input pins that
    correspond to these Inlet modules inside.
*/
class InletModuleProcessor : public ModuleProcessor
{
public:
    static constexpr auto paramIdLabel = "label";
    static constexpr auto paramIdChannelCount = "channelCount";
    
    InletModuleProcessor();
    ~InletModuleProcessor() override = default;

    const juce::String getName() const override { return "Inlet"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Store the buffer passed from the parent MetaModule
    void setIncomingBuffer(const juce::AudioBuffer<float>* buffer) { incomingBuffer = buffer; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth,
                              const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Inlets have no inputs, only outputs
        auto& ap = getAPVTS();
        int channelCount = 2;
        if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
            channelCount = p->get();
            
        for (int i = 0; i < channelCount; ++i)
            helpers.drawAudioOutputPin(juce::String("Out " + juce::String(i + 1)).toRawUTF8(), i);
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        return juce::String("Out ") + juce::String(channel + 1);
    }
#endif

    // Extra state for label
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    const juce::AudioBuffer<float>* incomingBuffer { nullptr };
    juce::String customLabel;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(InletModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\InputDebugModuleProcessor.cpp
================================================================================


#include "InputDebugModuleProcessor.h"
#include "../graph/ModularSynthProcessor.h"

static juce::AudioProcessorValueTreeState::ParameterLayout makeLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    // No parameters for now; could add per-pin enables later
    return { params.begin(), params.end() };
}

juce::AudioProcessorValueTreeState::ParameterLayout InputDebugModuleProcessor::createParameterLayout()
{
    return makeLayout();
}

InputDebugModuleProcessor::InputDebugModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput ("Tap In",  juce::AudioChannelSet::discreteChannels(8), true)
                        .withOutput("Tap Out", juce::AudioChannelSet::discreteChannels(8), true)),
      apvts(*this, nullptr, "InputDebugParams", createParameterLayout()),
      abstractFifo(4096)
{
    fifoBackingStore.resize(4096);
    for (auto& v : lastValues) v = 0.0f;
    for (auto& v : lastReportedValues) v = 0.0f;
}

void InputDebugModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(samplesPerBlock);
    currentSampleRate = (sampleRate > 0.0 ? sampleRate : 44100.0);
    totalSamplesProcessed = 0;
    droppedEvents.store(0, std::memory_order_relaxed);
}

void InputDebugModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto in  = getBusBuffer(buffer, true,  0);
    auto out = getBusBuffer(buffer, false, 0);
    const int numChannels = juce::jmin(in.getNumChannels(), out.getNumChannels());
    const int numSamples = buffer.getNumSamples();

    // Transparent pass-through
    for (int ch = 0; ch < numChannels; ++ch)
        out.copyFrom(ch, 0, in, ch, 0, numSamples);

    // Log changes with threshold + hysteresis
    for (int ch = 0; ch < numChannels; ++ch)
    {
        const float v = in.getMagnitude(ch, 0, numSamples);
        const float last = lastReportedValues[(size_t) ch];
        const float delta = std::abs(v - last);

        if (delta > CHANGE_THRESHOLD || (delta > HYSTERESIS && v != lastValues[(size_t) ch]))
        {
            int start1, size1, start2, size2;
            abstractFifo.prepareToWrite(1, start1, size1, start2, size2);
            if (size1 > 0)
            {
                fifoBackingStore[(size_t) start1] = InputDebugEvent{ totalSamplesProcessed, ch, v };
                abstractFifo.finishedWrite(1);
                lastReportedValues[(size_t) ch] = v;
            }
            else
            {
                droppedEvents.fetch_add(1, std::memory_order_relaxed);
            }
        }
        lastValues[(size_t) ch] = v;
    }

    totalSamplesProcessed += (juce::uint64) numSamples;
}

#if defined(PRESET_CREATOR_UI)
void InputDebugModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)> & /*isParamModulated*/, const std::function<void()> & /*onModificationEnded*/)
{
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::Checkbox("Pause", &isPaused)) {}
    ImGui::SameLine(); ImGui::Text("Dropped: %u", droppedEvents.load());

    if (ImGui::Button("Copy CSV"))
    {
        juce::String csv;
        csv << "time_seconds,src_logical_id,src_module,src_channel,src_label,src_value,tap_module,tap_input,tap_output,dst_logical_id,dst_module,dst_channel,dst_label,tap_value,delta\n";

        auto* synth = getParent();
        juce::uint32 selfLid = 0;
        std::map<juce::uint32, juce::String> lidToType;
        if (synth != nullptr)
        {
            for (const auto& p : synth->getModulesInfo())
            {
                lidToType[p.first] = p.second;
                if (synth->getModuleForLogical(p.first) == this) selfLid = p.first;
            }
        }

        // Build upstream/downstream maps for each tap channel
        std::array<std::vector<std::pair<juce::uint32,int>>, 8> upstream;   // for each ch, sources feeding Tap In ch
        std::array<std::vector<std::pair<juce::uint32,int>>, 8> downstream; // for each ch, destinations fed by Tap Out ch
        if (synth != nullptr && selfLid != 0)
        {
            for (const auto& c : synth->getConnectionsInfo())
            {
                if (!c.dstIsOutput && c.dstLogicalId == selfLid)
                    upstream[(size_t) c.dstChan].push_back({ c.srcLogicalId, c.srcChan });
                if (c.srcLogicalId == selfLid)
                    downstream[(size_t) c.srcChan].push_back({ c.dstLogicalId, c.dstChan });
            }
        }

        auto outLabelFor = [&](juce::uint32 lid, int ch) -> juce::String
        {
            if (synth == nullptr || lid == 0) return {};
            if (auto* mp = synth->getModuleForLogical(lid)) return mp->getAudioOutputLabel(ch);
            return {};
        };
        auto inLabelFor = [&](juce::uint32 lid, int ch) -> juce::String
        {
            if (synth == nullptr || lid == 0) return {};
            if (auto* mp = synth->getModuleForLogical(lid)) return mp->getAudioInputLabel(ch);
            return {};
        };

        for (const auto& ev : displayedEvents)
        {
            const double tSec = (currentSampleRate > 0.0 ? (double) ev.sampleCounter / currentSampleRate : 0.0);
            const int ch = ev.pinIndex;
            const juce::String tapInLabel = getAudioInputLabel(ch);
            const juce::String tapOutLabel = getAudioOutputLabel(ch);

            if (synth != nullptr && selfLid != 0)
            {
                if (!upstream[(size_t) ch].empty())
                {
                    for (const auto& src : upstream[(size_t) ch])
                    {
                        const juce::String srcType = lidToType.count(src.first) ? lidToType[src.first] : juce::String("<unknown>");
                        const juce::String srcLabel = outLabelFor(src.first, src.second);
                        float srcVal = 0.0f; if (auto* srcMp = synth->getModuleForLogical(src.first)) srcVal = srcMp->getOutputChannelValue(src.second);
                        const float tapVal = ev.value;
                        const float delta = tapVal - srcVal;
                        if (!downstream[(size_t) ch].empty())
                        {
                            for (const auto& dst : downstream[(size_t) ch])
                            {
                                const juce::String dstType = lidToType.count(dst.first) ? lidToType[dst.first] : juce::String("<unknown>");
                                const juce::String dstLabel = inLabelFor(dst.first, dst.second);
                                csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcType << "," << juce::String(src.second) << "," << srcLabel << "," << juce::String(srcVal, 6)
                                    << ",Input Debug," << tapInLabel << "," << tapOutLabel << "," << juce::String((int) dst.first) << "," << dstType << "," << juce::String(dst.second) << "," << dstLabel << "," << juce::String(tapVal, 6) << "," << juce::String(delta, 6) << "\n";
                            }
                        }
                        else
                        {
                            csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcType << "," << juce::String(src.second) << "," << srcLabel << "," << juce::String(srcVal, 6)
                                << ",Input Debug," << tapInLabel << "," << tapOutLabel << ",,,,," << juce::String(tapVal, 6) << "," << juce::String(tapVal - srcVal, 6) << "\n";
                        }
                    }
                }
                else
                {
                    // No upstream
                    if (!downstream[(size_t) ch].empty())
                    {
                        for (const auto& dst : downstream[(size_t) ch])
                        {
                            const juce::String dstType = lidToType.count(dst.first) ? lidToType[dst.first] : juce::String("<unknown>");
                            const juce::String dstLabel = inLabelFor(dst.first, dst.second);
                            csv << juce::String(tSec, 6) << ",,,,,,Input Debug," << tapInLabel << "," << tapOutLabel << "," << juce::String((int) dst.first) << "," << dstType << "," << juce::String(dst.second) << "," << dstLabel << "," << juce::String(ev.value, 6) << "," << juce::String() << "\n";
                        }
                    }
                    else
                    {
                        csv << juce::String(tSec, 6) << ",,,,,,Input Debug," << tapInLabel << "," << tapOutLabel << ",,,," << juce::String(ev.value, 6) << "," << juce::String() << "\n";
                    }
                }
            }
        }

        std::string utf8 = csv.toStdString();
        ImGui::SetClipboardText(utf8.c_str());
    }
    ImGui::SameLine();
    if (ImGui::Button("Export CSV"))
    {
        juce::File dir = juce::File::getSpecialLocation(juce::File::userDocumentsDirectory).getChildFile("ColliderDebugLogs");
        if (!dir.exists()) (void) dir.createDirectory();
        juce::File file = dir.getNonexistentChildFile("input_debug_log", ".csv");
        juce::FileOutputStream out(file);
        if (out.openedOk())
        {
            juce::String csv;
            csv << "time_seconds,src_logical_id,src_module,src_channel,src_label,src_value,tap_module,tap_input,tap_output,dst_logical_id,dst_module,dst_channel,dst_label,tap_value,delta\n";

            auto* synth = getParent();
            juce::uint32 selfLid = 0;
            std::map<juce::uint32, juce::String> lidToType;
            if (synth != nullptr)
            {
                for (const auto& p : synth->getModulesInfo())
                {
                    lidToType[p.first] = p.second;
                    if (synth->getModuleForLogical(p.first) == this) selfLid = p.first;
                }
            }

            std::array<std::vector<std::pair<juce::uint32,int>>, 8> upstream;
            std::array<std::vector<std::pair<juce::uint32,int>>, 8> downstream;
            if (synth != nullptr && selfLid != 0)
            {
                for (const auto& c : synth->getConnectionsInfo())
                {
                    if (!c.dstIsOutput && c.dstLogicalId == selfLid)
                        upstream[(size_t) c.dstChan].push_back({ c.srcLogicalId, c.srcChan });
                    if (c.srcLogicalId == selfLid)
                        downstream[(size_t) c.srcChan].push_back({ c.dstLogicalId, c.dstChan });
                }
            }

            auto outLabelFor = [&](juce::uint32 lid, int ch) -> juce::String
            {
                if (synth == nullptr || lid == 0) return {};
                if (auto* mp = synth->getModuleForLogical(lid)) return mp->getAudioOutputLabel(ch);
                return {};
            };
            auto inLabelFor = [&](juce::uint32 lid, int ch) -> juce::String
            {
                if (synth == nullptr || lid == 0) return {};
                if (auto* mp = synth->getModuleForLogical(lid)) return mp->getAudioInputLabel(ch);
                return {};
            };

            for (const auto& ev : displayedEvents)
            {
                const double tSec = (currentSampleRate > 0.0 ? (double) ev.sampleCounter / currentSampleRate : 0.0);
                const int ch = ev.pinIndex;
                const juce::String tapInLabel = getAudioInputLabel(ch);
                const juce::String tapOutLabel = getAudioOutputLabel(ch);

                if (synth != nullptr && selfLid != 0)
                {
                    if (!upstream[(size_t) ch].empty())
                    {
                        for (const auto& src : upstream[(size_t) ch])
                        {
                            const juce::String srcType = lidToType.count(src.first) ? lidToType[src.first] : juce::String("<unknown>");
                            const juce::String srcLabel = outLabelFor(src.first, src.second);
                            float srcVal = 0.0f; if (auto* srcMp = synth->getModuleForLogical(src.first)) srcVal = srcMp->getOutputChannelValue(src.second);
                            const float tapVal = ev.value;
                            const float delta = tapVal - srcVal;
                            if (!downstream[(size_t) ch].empty())
                            {
                                for (const auto& dst : downstream[(size_t) ch])
                                {
                                    const juce::String dstType = lidToType.count(dst.first) ? lidToType[dst.first] : juce::String("<unknown>");
                                    const juce::String dstLabel = inLabelFor(dst.first, dst.second);
                                    csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcType << "," << juce::String(src.second) << "," << srcLabel << "," << juce::String(srcVal, 6)
                                        << ",Input Debug," << tapInLabel << "," << tapOutLabel << "," << juce::String((int) dst.first) << "," << dstType << "," << juce::String(dst.second) << "," << dstLabel << "," << juce::String(tapVal, 6) << "," << juce::String(delta, 6) << "\n";
                                }
                            }
                            else
                            {
                                csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcType << "," << juce::String(src.second) << "," << srcLabel << "," << juce::String(srcVal, 6)
                                    << ",Input Debug," << tapInLabel << "," << tapOutLabel << ",,,,," << juce::String(tapVal, 6) << "," << juce::String(tapVal - srcVal, 6) << "\n";
                            }
                        }
                    }
                    else
                    {
                        if (!downstream[(size_t) ch].empty())
                        {
                            for (const auto& dst : downstream[(size_t) ch])
                            {
                                const juce::String dstType = lidToType.count(dst.first) ? lidToType[dst.first] : juce::String("<unknown>");
                                const juce::String dstLabel = inLabelFor(dst.first, dst.second);
                                csv << juce::String(tSec, 6) << ",,,,,,Input Debug," << tapInLabel << "," << tapOutLabel << "," << juce::String((int) dst.first) << "," << dstType << "," << juce::String(dst.second) << "," << dstLabel << "," << juce::String(ev.value, 6) << "," << juce::String() << "\n";
                            }
                        }
                        else
                        {
                            csv << juce::String(tSec, 6) << ",,,,,,Input Debug," << tapInLabel << "," << tapOutLabel << ",,,," << juce::String(ev.value, 6) << "," << juce::String() << "\n";
                        }
                    }
                }
            }

            out.writeText(csv, false, false, "\n");
            out.flush();
        }
    }
    ImGui::PopItemWidth();

    // Drain FIFO into displayedEvents
    int available = abstractFifo.getNumReady();
    while (available > 0)
    {
        int start1, size1, start2, size2;
        abstractFifo.prepareToRead(available, start1, size1, start2, size2);
        auto consume = [&](int start, int size)
        {
            for (int i = 0; i < size; ++i)
            {
                const auto& ev = fifoBackingStore[(size_t) (start + i)];
                if (!isPaused)
                    displayedEvents.push_back(ev);
            }
        };
        if (size1 > 0) consume(start1, size1);
        if (size2 > 0) consume(start2, size2);
        abstractFifo.finishedRead(size1 + size2);
        available -= (size1 + size2);
    }

    if (displayedEvents.size() > MAX_DISPLAYED_EVENTS)
        displayedEvents.erase(displayedEvents.begin(), displayedEvents.begin() + (displayedEvents.size() - MAX_DISPLAYED_EVENTS));
}

void InputDebugModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // 8-channel pass-through
    for (int ch = 0; ch < 8; ++ch)
    {
        helpers.drawAudioInputPin((juce::String("Tap In ") + juce::String(ch + 1)).toRawUTF8(), ch);
    }
    for (int ch = 0; ch < 8; ++ch)
    {
        helpers.drawAudioOutputPin((juce::String("Tap Out ") + juce::String(ch + 1)).toRawUTF8(), ch);
    }
}
#endif




================================================================================
FILE: juce\Source\audio\modules\InputDebugModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_core/juce_core.h>
#include <array>
#include <vector>
#include <atomic>

struct InputDebugEvent
{
    juce::uint64 sampleCounter; // Sample-accurate timestamp
    int pinIndex;               // Which input pin (0-indexed)
    float value;                // The signal's value (magnitude)
};

class InputDebugModuleProcessor : public ModuleProcessor
{
public:
    InputDebugModuleProcessor();
    ~InputDebugModuleProcessor() override = default;

    const juce::String getName() const override { return "input debug"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    // Labels for pins for Debug CSV enrichment
    juce::String getAudioInputLabel(int channel) const override
    {
        return juce::String("Tap In ") + juce::String(channel + 1);
    }
    juce::String getAudioOutputLabel(int channel) const override
    {
        return juce::String("Tap Out ") + juce::String(channel + 1);
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    // --- Thread-safe communication ---
    juce::AbstractFifo abstractFifo;
    std::vector<InputDebugEvent> fifoBackingStore;
    std::atomic<uint32_t> droppedEvents { 0 };

    // --- State for the audio thread ---
    double currentSampleRate { 44100.0 };
    juce::uint64 totalSamplesProcessed { 0 };
    std::array<float, 8> lastValues{};          // Last measured per input
    std::array<float, 8> lastReportedValues{};  // Last reported/logged
    static constexpr float CHANGE_THRESHOLD = 0.001f;
    static constexpr float HYSTERESIS = 0.0001f;

    // --- State for the UI thread ---
    std::vector<InputDebugEvent> displayedEvents;
    static constexpr size_t MAX_DISPLAYED_EVENTS = 500;
    bool isPaused { false };
};




================================================================================
FILE: juce\Source\audio\modules\LagProcessorModuleProcessor.cpp
================================================================================


#include "LagProcessorModuleProcessor.h"

LagProcessorModuleProcessor::LagProcessorModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Signal In", juce::AudioChannelSet::mono(), true)
                        .withInput ("Rise Mod", juce::AudioChannelSet::mono(), true)
                        .withInput ("Fall Mod", juce::AudioChannelSet::mono(), true)
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts (*this, nullptr, "LagProcessorParams", createParameterLayout())
{
    riseTimeParam = apvts.getRawParameterValue("rise_time");
    fallTimeParam = apvts.getRawParameterValue("fall_time");
    modeParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("mode"));
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout LagProcessorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    // Rise time: 0.1ms to 4000ms (logarithmic)
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rise_time", "Rise Time",
        juce::NormalisableRange<float>(0.1f, 4000.0f, 0.0f, 0.3f),
        10.0f));
    
    // Fall time: 0.1ms to 4000ms (logarithmic)
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "fall_time", "Fall Time",
        juce::NormalisableRange<float>(0.1f, 4000.0f, 0.0f, 0.3f),
        10.0f));
    
    // Mode: Slew Limiter or Envelope Follower
    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        "mode", "Mode",
        juce::StringArray{"Slew Limiter", "Envelope Follower"},
        0));
    
    return { params.begin(), params.end() };
}

void LagProcessorModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(samplesPerBlock);
    currentSampleRate = sampleRate;
    currentOutput = 0.0f;
}

void LagProcessorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto signalIn = getBusBuffer(buffer, true, 0);
    auto riseModIn = getBusBuffer(buffer, true, 1);
    auto fallModIn = getBusBuffer(buffer, true, 2);
    auto out = getBusBuffer(buffer, false, 0);
    
    const int nSamps = buffer.getNumSamples();
    
    // Get base parameter values
    float baseRiseMs = riseTimeParam != nullptr ? riseTimeParam->load() : 10.0f;
    float baseFallMs = fallTimeParam != nullptr ? fallTimeParam->load() : 10.0f;
    const int mode = modeParam != nullptr ? modeParam->getIndex() : 0;
    
    // Check for modulation
    const bool isRiseModulated = isParamInputConnected("rise_time_mod");
    const bool isFallModulated = isParamInputConnected("fall_time_mod");
    
    const float* riseModSignal = isRiseModulated ? riseModIn.getReadPointer(0) : nullptr;
    const float* fallModSignal = isFallModulated ? fallModIn.getReadPointer(0) : nullptr;
    
    const float* input = signalIn.getReadPointer(0);
    float* output = out.getWritePointer(0);
    
    for (int i = 0; i < nSamps; ++i)
    {
        // Get modulated rise/fall times if connected
        float riseMs = baseRiseMs;
        float fallMs = baseFallMs;
        
        if (isRiseModulated && riseModSignal) {
            // Map CV (0..1) to time range (0.1..4000ms) logarithmically
            riseMs = 0.1f * std::pow(40000.0f, riseModSignal[i]);
            riseMs = juce::jlimit(0.1f, 4000.0f, riseMs);
        }
        
        if (isFallModulated && fallModSignal) {
            fallMs = 0.1f * std::pow(40000.0f, fallModSignal[i]);
            fallMs = juce::jlimit(0.1f, 4000.0f, fallMs);
        }
        
        // Update telemetry (throttled)
        if ((i & 0x3F) == 0) {
            setLiveParamValue("rise_time_live", riseMs);
            setLiveParamValue("fall_time_live", fallMs);
        }
        
        // Calculate smoothing coefficients
        // Formula: coeff = 1.0 - exp(-1.0 / (time_in_seconds * sampleRate))
        float riseCoeff = 1.0f - std::exp(-1.0f / (riseMs * 0.001f * static_cast<float>(currentSampleRate)));
        float fallCoeff = 1.0f - std::exp(-1.0f / (fallMs * 0.001f * static_cast<float>(currentSampleRate)));
        
        // Get target value based on mode
        float inputSample = input[i];
        float targetValue = inputSample;
        
        if (mode == 1) // Envelope Follower
        {
            // Rectify the signal to extract amplitude envelope
            targetValue = std::abs(inputSample);
        }
        
        // Apply smoothing
        if (targetValue > currentOutput) // Rising
        {
            currentOutput += (targetValue - currentOutput) * riseCoeff;
        }
        else // Falling
        {
            currentOutput += (targetValue - currentOutput) * fallCoeff;
        }
        
        output[i] = currentOutput;
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 1 && lastOutputValues[0]) {
        lastOutputValues[0]->store(currentOutput);
    }
}

#if defined(PRESET_CREATOR_UI)
bool LagProcessorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "rise_time_mod")
    {
        outBusIndex = 1; // "Rise Mod" is Bus 1
        outChannelIndexInBus = 0;
        return true;
    }
    else if (paramId == "fall_time_mod")
    {
        outBusIndex = 2; // "Fall Mod" is Bus 2
        outChannelIndexInBus = 0;
        return true;
    }
    return false;
}
#endif



================================================================================
FILE: juce\Source\audio\modules\LagProcessorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class LagProcessorModuleProcessor : public ModuleProcessor
{
public:
    LagProcessorModuleProcessor();
    ~LagProcessorModuleProcessor() override = default;

    const juce::String getName() const override { return "lag processor"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        // Get current parameter values
        float riseMs = riseTimeParam != nullptr ? riseTimeParam->load() : 10.0f;
        float fallMs = fallTimeParam != nullptr ? fallTimeParam->load() : 10.0f;
        int modeIdx = modeParam != nullptr ? modeParam->getIndex() : 0;
        
        // Check for modulation
        bool isRiseModulated = isParamModulated("rise_time_mod");
        bool isFallModulated = isParamModulated("fall_time_mod");
        
        if (isRiseModulated) {
            riseMs = getLiveParamValueFor("rise_time_mod", "rise_time_live", riseMs);
        }
        if (isFallModulated) {
            fallMs = getLiveParamValueFor("fall_time_mod", "fall_time_live", fallMs);
        }
        
        ImGui::PushItemWidth(itemWidth);
        
        // Mode selector
        const char* modeNames[] = { "Slew Limiter", "Envelope Follower" };
        if (ImGui::Combo("Mode", &modeIdx, modeNames, 2)) {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("mode"))) {
                *p = modeIdx;
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        // Rise Time (or Attack in Envelope Follower mode)
        const char* riseLabel = (modeIdx == 0) ? "Rise Time (ms)" : "Attack (ms)";
        if (isRiseModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(riseLabel, &riseMs, 0.1f, 4000.0f, "%.2f", ImGuiSliderFlags_Logarithmic)) {
            if (!isRiseModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("rise_time"))) *p = riseMs;
            }
        }
        if (!isRiseModulated) adjustParamOnWheel(ap.getParameter("rise_time"), "rise_time", riseMs);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isRiseModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        // Fall Time (or Release in Envelope Follower mode)
        const char* fallLabel = (modeIdx == 0) ? "Fall Time (ms)" : "Release (ms)";
        if (isFallModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(fallLabel, &fallMs, 0.1f, 4000.0f, "%.2f", ImGuiSliderFlags_Logarithmic)) {
            if (!isFallModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("fall_time"))) *p = fallMs;
            }
        }
        if (!isFallModulated) adjustParamOnWheel(ap.getParameter("fall_time"), "fall_time", fallMs);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isFallModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("Signal In", 0);
        helpers.drawAudioInputPin("Rise Mod", 1);
        helpers.drawAudioInputPin("Fall Mod", 2);
        helpers.drawAudioOutputPin("Smoothed Out", 0);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Signal In";
            case 1: return "Rise Mod";
            case 2: return "Fall Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        if (channel == 0) return "Smoothed Out";
        return juce::String("Out ") + juce::String(channel + 1);
    }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* riseTimeParam { nullptr };  // milliseconds
    std::atomic<float>* fallTimeParam { nullptr };  // milliseconds
    juce::AudioParameterChoice* modeParam { nullptr };
    
    // State variables for smoothing algorithm
    float currentOutput { 0.0f };
    double currentSampleRate { 44100.0 };
};



================================================================================
FILE: juce\Source\audio\modules\LFOModuleProcessor.cpp
================================================================================


#include "LFOModuleProcessor.h"

LFOModuleProcessor::LFOModuleProcessor()
    // CORRECTED: Use a single input bus with 3 discrete channels
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // ch0:Rate, ch1:Depth, ch2:Wave
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "LFOParams", createParameterLayout())
{
    rateParam = apvts.getRawParameterValue(paramIdRate);
    depthParam = apvts.getRawParameterValue(paramIdDepth);
    bipolarParam = apvts.getRawParameterValue(paramIdBipolar);
    waveParam = apvts.getRawParameterValue(paramIdWave);
    syncParam = apvts.getRawParameterValue(paramIdSync);
    rateDivisionParam = apvts.getRawParameterValue(paramIdRateDivision);
    
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    
    osc.initialise([](float x) { return std::sin(x); }, 128);
}

juce::AudioProcessorValueTreeState::ParameterLayout LFOModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRate, "Rate", juce::NormalisableRange<float>(0.05f, 20.0f, 0.01f, 0.3f), 1.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDepth, "Depth", juce::NormalisableRange<float>(0.0f, 1.0f), 0.5f));
    p.push_back(std::make_unique<juce::AudioParameterBool>(paramIdBipolar, "Bipolar", true));
    p.push_back(std::make_unique<juce::AudioParameterChoice>(paramIdWave, "Wave", juce::StringArray{ "Sine", "Tri", "Saw" }, 0));
    p.push_back(std::make_unique<juce::AudioParameterBool>(paramIdSync, "Sync", false));
    p.push_back(std::make_unique<juce::AudioParameterChoice>(paramIdRateDivision, "Division", 
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3)); // Default: 1/4 note
    return { p.begin(), p.end() };
}

void LFOModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec{ sampleRate, (juce::uint32)samplesPerBlock, 2 };
    osc.prepare(spec);
}

void LFOModuleProcessor::setTimingInfo(const TransportState& state)
{
    m_currentTransport = state;
}

void LFOModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto out = getBusBuffer(buffer, false, 0);

    // CORRECTED: All inputs are on a single bus at index 0
    auto inBus = getBusBuffer(buffer, true, 0);
    
    // CORRECTED: Use the _mod IDs to check for connections
    const bool isRateMod = isParamInputConnected(paramIdRateMod);
    const bool isDepthMod = isParamInputConnected(paramIdDepthMod);
    const bool isWaveMod = isParamInputConnected(paramIdWaveMod);

    // CORRECTED: Read CVs from the correct channels on the single input bus
    const float* rateCV = isRateMod && inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* depthCV = isDepthMod && inBus.getNumChannels() > 1 ? inBus.getReadPointer(1) : nullptr;
    const float* waveCV = isWaveMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;

    const float baseRate = rateParam->load();
    const float baseDepth = depthParam->load();
    const int baseWave = static_cast<int>(waveParam->load());
    const bool bipolar = bipolarParam->load() > 0.5f;
    const bool syncEnabled = syncParam->load() > 0.5f;
    int rateDivisionIndex = static_cast<int>(rateDivisionParam->load());
    // If a global division is broadcast by a master clock, adopt it when sync is enabled
    if (syncEnabled && m_currentTransport.globalDivisionIndex >= 0)
        rateDivisionIndex = m_currentTransport.globalDivisionIndex;

    // Rate division map: 1/32, 1/16, 1/8, 1/4, 1/2, 1, 2, 4, 8
    static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
    const double beatDivision = divisions[juce::jlimit(0, 8, rateDivisionIndex)];

    float lastRate = baseRate, lastDepth = baseDepth;
    int lastWave = baseWave;

    for (int i = 0; i < out.getNumSamples(); ++i)
    {
        float finalRate = baseRate;
        if (isRateMod && rateCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            finalRate = baseRate * std::pow(4.0f, cv - 0.5f); // Modulate by +/- 2 octaves
        }
        
        float depth = baseDepth;
        if (isDepthMod && depthCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, depthCV[i]);
            depth = juce::jlimit(0.0f, 1.0f, baseDepth + (cv - 0.5f)); // Additive modulation
        }
        
        int w = baseWave;
        if (isWaveMod && waveCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, waveCV[i]);
            w = static_cast<int>(cv * 2.99f); // Absolute control
        }

        lastRate = finalRate;
        lastDepth = depth;
        lastWave = w;
        
        if (currentWaveform != w) {
            if (w == 0)      osc.initialise ([](float x){ return std::sin(x); }, 128);
            else if (w == 1) osc.initialise ([](float x){ return 2.0f / juce::MathConstants<float>::pi * std::asin(std::sin(x)); }, 128);
            else             osc.initialise ([](float x){ return (x / juce::MathConstants<float>::pi); }, 128);
            currentWaveform = w;
        }
        
        float lfoSample = 0.0f;
        
        if (syncEnabled && m_currentTransport.isPlaying)
        {
            // Transport-synced mode: calculate phase directly from song position
            double phase = std::fmod(m_currentTransport.songPositionBeats * beatDivision, 1.0);
            double phaseRadians = phase * juce::MathConstants<double>::twoPi;
            
            // Generate waveform based on phase
            if (w == 0) // Sine
                lfoSample = std::sin(phaseRadians);
            else if (w == 1) // Triangle
                lfoSample = 2.0f / juce::MathConstants<float>::pi * std::asin(std::sin(phaseRadians));
            else // Saw
                lfoSample = (phaseRadians / juce::MathConstants<float>::pi);
        }
        else
        {
            // Free-running mode: use internal oscillator
            osc.setFrequency(finalRate);
            lfoSample = osc.processSample(0.0f);
        }
        
        const float finalSample = (bipolar ? lfoSample : (lfoSample * 0.5f + 0.5f)) * depth;

        out.setSample(0, i, finalSample);
    }
    
    // Update inspector values
    updateOutputTelemetry(out);

    // Store live modulated values for UI display
    setLiveParamValue("rate_live", lastRate);
    setLiveParamValue("depth_live", lastDepth);
    setLiveParamValue("wave_live", (float)lastWave);
}

// CORRECTED: Clean, unambiguous routing for a single multi-channel input bus
bool LFOModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus.
    if (paramId == paramIdRateMod) { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdDepthMod) { outChannelIndexInBus = 1; return true; }
    if (paramId == paramIdWaveMod) { outChannelIndexInBus = 2; return true; }
    return false;
}

#if defined(PRESET_CREATOR_UI)

void LFOModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    
    bool isRateModulated = isParamInputConnected(paramIdRateMod);
    bool isDepthModulated = isParamInputConnected(paramIdDepthMod);
    bool isWaveModulated = isParamInputConnected(paramIdWaveMod);
    
    float rate = isRateModulated ? getLiveParamValueFor(paramIdRateMod, "rate_live", rateParam->load()) : rateParam->load();
    float depth = isDepthModulated ? getLiveParamValueFor(paramIdDepthMod, "depth_live", depthParam->load()) : depthParam->load();
    int wave = isWaveModulated ? (int)getLiveParamValueFor(paramIdWaveMod, "wave_live", (float)static_cast<int>(waveParam->load())) : static_cast<int>(waveParam->load());
    bool bipolar = bipolarParam->load() > 0.5f;
    
    ImGui::PushItemWidth(itemWidth);

    if (isRateModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Rate", &rate, 0.05f, 20.0f, "%.2f Hz", ImGuiSliderFlags_Logarithmic)) if (!isRateModulated) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRate)) = rate;
    if (ImGui::IsItemDeactivatedAfterEdit() && !isRateModulated) onModificationEnded();
    if (isRateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    if (isDepthModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Depth", &depth, 0.0f, 1.0f)) if (!isDepthModulated) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDepth)) = depth;
    if (ImGui::IsItemDeactivatedAfterEdit() && !isDepthModulated) onModificationEnded();
    if (isDepthModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (isWaveModulated) ImGui::BeginDisabled();
    if (ImGui::Combo("Wave", &wave, "Sine\0Tri\0Saw\0\0")) if (!isWaveModulated) *dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWave)) = wave;
    if (ImGui::IsItemDeactivatedAfterEdit() && !isWaveModulated) onModificationEnded();
    if (isWaveModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (ImGui::Checkbox("Bipolar", &bipolar)) *dynamic_cast<juce::AudioParameterBool*>(ap.getParameter(paramIdBipolar)) = bipolar;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();

    // Transport sync controls
    bool sync = syncParam->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync)) *dynamic_cast<juce::AudioParameterBool*>(ap.getParameter(paramIdSync)) = sync;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    
    if (sync)
    {
        int division = static_cast<int>(rateDivisionParam->load());
        const char* items[] = { "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" };
        if (ImGui::Combo("Division", &division, items, (int)(sizeof(items)/sizeof(items[0]))))
            *dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdRateDivision)) = division;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    }

    ImGui::PopItemWidth();
}

void LFOModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Rate Mod", 0);
    helpers.drawAudioInputPin("Depth Mod", 1);
    helpers.drawAudioInputPin("Wave Mod", 2);
    helpers.drawAudioOutputPin("Out", 0);
}

juce::String LFOModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Rate Mod";
        case 1: return "Depth Mod";
        case 2: return "Wave Mod";
        default: return {};
    }
}

juce::String LFOModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out";
        default: return {};
    }
}
#endif

================================================================================
FILE: juce\Source\audio\modules\LFOModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class LFOModuleProcessor : public ModuleProcessor
{
public:
    // Parameter ID constants
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdDepth = "depth";
    static constexpr auto paramIdWave = "wave";
    static constexpr auto paramIdBipolar = "bipolar";
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdDepthMod = "depth_mod";
    static constexpr auto paramIdWaveMod = "wave_mod";
    static constexpr auto paramIdSync = "sync";
    static constexpr auto paramIdRateDivision = "rate_division";

    LFOModuleProcessor();
    ~LFOModuleProcessor() override = default;

    const juce::String getName() const override { return "lfo"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    // Transport sync support
    void setTimingInfo(const TransportState& state) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Oscillator<float> osc;
    
    // Cached parameter pointers
    std::atomic<float>* rateParam{ nullptr };
    std::atomic<float>* depthParam{ nullptr };
    std::atomic<float>* bipolarParam{ nullptr };
    std::atomic<float>* waveParam{ nullptr };
    std::atomic<float>* syncParam{ nullptr };
    std::atomic<float>* rateDivisionParam{ nullptr };
    
    int currentWaveform = -1;
    TransportState m_currentTransport;
};

================================================================================
FILE: juce\Source\audio\modules\LimiterModuleProcessor.cpp
================================================================================


#include "LimiterModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout LimiterModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdThreshold, "Threshold", -20.0f, 0.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRelease, "Release", 1.0f, 200.0f, 10.0f));
    
    return { params.begin(), params.end() };
}

LimiterModuleProcessor::LimiterModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(4), true) // 0-1: Audio In, 2: Threshold Mod, 3: Release Mod
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "LimiterParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue(paramIdThreshold);
    releaseParam = apvts.getRawParameterValue(paramIdRelease);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void LimiterModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2;

    limiter.prepare(spec);
    limiter.reset();
}

void LimiterModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    // Copy input to output for in-place processing
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }

    // --- Update DSP Parameters from unified input bus (once per block) ---
    float finalThreshold = thresholdParam->load();
    if (isParamInputConnected(paramIdThresholdMod) && inBus.getNumChannels() > 2)
        finalThreshold = juce::jmap(inBus.getSample(2, 0), 0.0f, 1.0f, -20.0f, 0.0f);
        
    float finalRelease = releaseParam->load();
    if (isParamInputConnected(paramIdReleaseMod) && inBus.getNumChannels() > 3)
        finalRelease = juce::jmap(inBus.getSample(3, 0), 0.0f, 1.0f, 1.0f, 200.0f);

    limiter.setThreshold(finalThreshold);
    limiter.setRelease(finalRelease);
    
    // --- Process the Audio ---
    juce::dsp::AudioBlock<float> block(outBus);
    juce::dsp::ProcessContextReplacing<float> context(block);
    limiter.process(context);

    // --- Update UI Telemetry & Tooltips ---
    setLiveParamValue("threshold_live", finalThreshold);
    setLiveParamValue("release_live", finalRelease);
    
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool LimiterModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdThresholdMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdReleaseMod)   { outChannelIndexInBus = 3; return true; }
    return false;
}

juce::String LimiterModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    if (channel == 2) return "Thresh Mod";
    if (channel == 3) return "Release Mod";
    return {};
}

juce::String LimiterModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void LimiterModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, const juce::String& modId, float min, float max, const char* format) {
        bool isMod = isParamModulated(modId);
        float value = isMod ? getLiveParamValueFor(modId, paramId + "_live", ap.getRawParameterValue(paramId)->load())
                            : ap.getRawParameterValue(paramId)->load();
        
        if (isMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(label, &value, min, max, format))
            if (!isMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        if (!isMod) adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    };

    drawSlider("Threshold", paramIdThreshold, paramIdThresholdMod, -20.0f, 0.0f, "%.1f dB");
    drawSlider("Release", paramIdRelease, paramIdReleaseMod, 1.0f, 200.0f, "%.0f ms");

    ImGui::PopItemWidth();
}

void LimiterModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Thresh Mod", 2);
    helpers.drawAudioInputPin("Release Mod", 3);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\LimiterModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class LimiterModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdThreshold = "threshold";
    static constexpr auto paramIdRelease = "release";

    // Virtual IDs for modulation inputs
    static constexpr auto paramIdThresholdMod = "threshold_mod";
    static constexpr auto paramIdReleaseMod = "release_mod";

    LimiterModuleProcessor();
    ~LimiterModuleProcessor() override = default;

    const juce::String getName() const override { return "limiter"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // The core JUCE DSP Limiter object
    juce::dsp::Limiter<float> limiter;

    // Cached atomic pointers to parameters
    std::atomic<float>* thresholdParam { nullptr };
    std::atomic<float>* releaseParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\LogicModuleProcessor.cpp
================================================================================


#include "LogicModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout LogicModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    // Operation selector: 0=AND, 1=OR, 2=XOR, 3=NOT A
    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        "operation", "Operation", juce::StringArray({"AND", "OR", "XOR", "NOT A"}), 0));

    // Gate threshold for interpreting gates
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gateThreshold", "Gate Threshold", juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f), 0.5f));

    return {params.begin(), params.end()};
}

LogicModuleProcessor::LogicModuleProcessor()
    : ModuleProcessor(BusesProperties()
                          .withInput("In A", juce::AudioChannelSet::mono(), true)
                          .withInput("In B", juce::AudioChannelSet::mono(), true)
                          .withOutput("AND", juce::AudioChannelSet::mono(), true)
                          .withOutput("OR", juce::AudioChannelSet::mono(), true)
                          .withOutput("XOR", juce::AudioChannelSet::mono(), true)
                          .withOutput("NOT A", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "LogicParams", createParameterLayout())
{
    operationParam = apvts.getRawParameterValue("operation");
    gateThresholdParam = apvts.getRawParameterValue("gateThreshold");
    
    // Initialize lastOutputValues for cable inspector (4 outputs)
    for (int i = 0; i < 4; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void LogicModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void LogicModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto inA = getBusBuffer(buffer, true, 0);  // Input A
    auto inB = getBusBuffer(buffer, true, 1);  // Input B
    auto outAND = getBusBuffer(buffer, false, 0);  // AND output
    auto outOR = getBusBuffer(buffer, false, 1);   // OR output
    auto outXOR = getBusBuffer(buffer, false, 2);  // XOR output
    auto outNOTA = getBusBuffer(buffer, false, 3); // NOT A output

    const int numSamples = buffer.getNumSamples();
    const float gateThresh = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
    const float* aData = inA.getReadPointer(0);
    const float* bData = inB.getReadPointer(0);

    float* andData = outAND.getWritePointer(0);
    float* orData = outOR.getWritePointer(0);
    float* xorData = outXOR.getWritePointer(0);
    float* notAData = outNOTA.getWritePointer(0);

    // Process each sample
    for (int i = 0; i < numSamples; ++i)
    {
        const float a = aData[i] > gateThresh ? 1.0f : 0.0f;  // Gate threshold
        const float b = bData[i] > gateThresh ? 1.0f : 0.0f;  // Gate threshold

        // Perform all logical operations
        andData[i] = (a > 0.5f && b > 0.5f) ? 1.0f : 0.0f;   // A AND B
        orData[i] = (a > 0.5f || b > 0.5f) ? 1.0f : 0.0f;    // A OR B
        xorData[i] = ((a > 0.5f) != (b > 0.5f)) ? 1.0f : 0.0f; // A XOR B
        notAData[i] = (a > 0.5f) ? 0.0f : 1.0f;              // NOT A
    }
}

void LogicModuleProcessor::getStateInformation(juce::MemoryBlock& destData)
{
    auto state = apvts.copyState();
    std::unique_ptr<juce::XmlElement> xml(state.createXml());
    copyXmlToBinary(*xml, destData);
}

void LogicModuleProcessor::setStateInformation(const void* data, int sizeInBytes)
{
    std::unique_ptr<juce::XmlElement> xmlState(getXmlFromBinary(data, sizeInBytes));
    if (xmlState.get() != nullptr)
        if (xmlState->hasTagName(apvts.state.getType()))
            apvts.replaceState(juce::ValueTree::fromXml(*xmlState));
}

bool LogicModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "operation") { outBusIndex = 2; outChannelIndexInBus = 0; return true; }
    return false;
}

#if defined(PRESET_CREATOR_UI)
void LogicModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    
    int operation = static_cast<int>(operationParam->load());
    const char* operationNames[] = {"AND", "OR", "XOR", "NOT A"};
    
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::Combo("Operation", &operation, operationNames, 4))
    {
        *operationParam = static_cast<float>(operation);
        onModificationEnded();
    }
    float gateThresh = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
    if (ImGui::SliderFloat("Gate Thresh", &gateThresh, 0.0f, 1.0f, "%.3f"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gateThreshold"))) *p = gateThresh;
        onModificationEnded();
    }
    ImGui::PopItemWidth();
}

void LogicModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In A", 0);
    helpers.drawAudioInputPin("In B", 1);
    helpers.drawAudioOutputPin("AND", 0);
    helpers.drawAudioOutputPin("OR", 1);
    helpers.drawAudioOutputPin("XOR", 2);
    helpers.drawAudioOutputPin("NOT A", 3);
}
#endif

================================================================================
FILE: juce\Source\audio\modules\LogicModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

/**
    A logic utility module that performs boolean operations on Gate signals.

    This module takes two Gate inputs and provides outputs for various logical
    operations: AND, OR, XOR, and NOT. Useful for creating complex gate patterns
    and conditional triggers in modular patches.
*/
class LogicModuleProcessor : public ModuleProcessor
{
public:
    LogicModuleProcessor();
    ~LogicModuleProcessor() override = default;

    const juce::String getName() const override { return "logic"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi) override;

    void getStateInformation(juce::MemoryBlock& destData) override;
    void setStateInformation(const void* data, int sizeInBytes) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    /**
        Maps parameter IDs to their corresponding modulation bus and channel indices.
        
        @param paramId              The parameter ID to query.
        @param outBusIndex          Receives the bus index for modulation.
        @param outChannelIndexInBus Receives the channel index within the bus.
        @returns                    True if the parameter supports modulation.
    */
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // Parameters
    std::atomic<float>* operationParam { nullptr };
    std::atomic<float>* gateThresholdParam { nullptr };
};

================================================================================
FILE: juce\Source\audio\modules\MapRangeModuleProcessor.cpp
================================================================================


#include "MapRangeModuleProcessor.h"

MapRangeModuleProcessor::MapRangeModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("In", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::discreteChannels(3), true)),
      apvts(*this, nullptr, "MapRangeParams", createParameterLayout())
{
    inMinParam  = apvts.getRawParameterValue("inMin");
    inMaxParam  = apvts.getRawParameterValue("inMax");
    outMinParam = apvts.getRawParameterValue("outMin");
    outMaxParam = apvts.getRawParameterValue("outMax");
    normMinParam = apvts.getRawParameterValue("normMin");
    normMaxParam = apvts.getRawParameterValue("normMax");
    
    // Cache new CV parameters
    cvMinParam = apvts.getRawParameterValue("cvMin");
    cvMaxParam = apvts.getRawParameterValue("cvMax");
    
    // Initialize storage for the three output pins (Norm Out, Raw Out, CV Out)
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout MapRangeModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>("inMin", "Input Min", juce::NormalisableRange<float>(-100.0f, 100.0f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("inMax", "Input Max", juce::NormalisableRange<float>(-100.0f, 100.0f), 1.0f));
    // Bipolar Norm Out range [-1, 1]
    params.push_back(std::make_unique<juce::AudioParameterFloat>("normMin", "Norm Min", juce::NormalisableRange<float>(-1.0f, 1.0f, 0.0001f), -1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("normMax", "Norm Max", juce::NormalisableRange<float>(-1.0f, 1.0f, 0.0001f), 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("outMin", "Output Min", juce::NormalisableRange<float>(-10000.0f, 10000.0f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("outMax", "Output Max", juce::NormalisableRange<float>(-10000.0f, 10000.0f), 1.0f));
    
    // Add new CV parameters
    params.push_back(std::make_unique<juce::AudioParameterFloat>("cvMin", "CV Min", juce::NormalisableRange<float>(0.0f, 1.0f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("cvMax", "CV Max", juce::NormalisableRange<float>(0.0f, 1.0f), 1.0f));
    
    return { params.begin(), params.end() };
}

void MapRangeModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void MapRangeModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto in = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);
    // Ensure we present audio on a conventional stereo bus for downstream audio nodes.
    // Norm Out (0) is intended for CV; Raw Out (1) is wide-range audio.
    // Duplicate Raw Out into both L/R when the main graph expects stereo.
    
    const float inMin = inMinParam->load();
    const float inMax = inMaxParam->load();
    const float normMin = normMinParam->load();
    const float normMax = normMaxParam->load();
    const float outMin = outMinParam->load();
    const float outMax = outMaxParam->load();
    const float cvMin = cvMinParam->load();
    const float cvMax = cvMaxParam->load();
    
    const float inRange = inMax - inMin;
    const float outRange = outMax - outMin;
    
    // Get pointers to all three output channels: 0 for Norm (CV), 1 for Raw (audio), 2 for CV
    float* normDst = out.getWritePointer(0);
    float* rawDst = out.getNumChannels() > 1 ? out.getWritePointer(1) : nullptr;
    float* cvDst = out.getNumChannels() > 2 ? out.getWritePointer(2) : nullptr;

    if (std::abs(inRange) < 0.0001f)
    {
        // Handle division by zero: output the middle of the output range.
        const float rawVal = (outMin + outMax) * 0.5f;
        const float normVal = 0.5f;
        const float cvVal = (cvMin + cvMax) * 0.5f;
        for (int i = 0; i < buffer.getNumSamples(); ++i) {
            normDst[i] = normVal;
            if (rawDst) rawDst[i] = rawVal;
            if (cvDst) cvDst[i] = cvVal;
        }
        lastInputValue.store(inMin);
        lastOutputValue.store(rawVal);
        lastCvOutputValue.store(cvVal);
    }
    else
    {
        const float* src = in.getReadPointer(0);
        float sumInput = 0.0f;
        float sumOutput = 0.0f;
        float sumCvOutput = 0.0f;
        
        for (int i = 0; i < buffer.getNumSamples(); ++i)
        {
            // 1. Clamp and normalize the input signal (0..1 range)
            float clampedInput = juce::jlimit(inMin, inMax, src[i]);
            float normalizedInput = 0.0f;
            if (std::abs(inRange) > 1e-9f)
                normalizedInput = (clampedInput - inMin) / inRange;
            
            // 2. Calculate the three separate outputs from the normalized value
            float rawOutputVal = juce::jmap(normalizedInput, outMin, outMax);
            float cvOutputVal = juce::jmap(normalizedInput, cvMin, cvMax);
            
            // 3. Write to the respective output channels
            const float norm01 = juce::jlimit(0.0f, 1.0f, normalizedInput);
            const float normVal = juce::jmap(norm01, normMin, normMax);
            normDst[i] = normVal;              // Norm Out (bipolar CV)
            if (rawDst) rawDst[i] = rawOutputVal; // Raw Out (audio)
            if (cvDst)  cvDst[i]  = cvOutputVal;  // CV Out
            
            sumInput += clampedInput;
            sumOutput += rawOutputVal;
            sumCvOutput += cvOutputVal;
        }
        
    lastInputValue.store(sumInput / (float) buffer.getNumSamples());
    lastOutputValue.store(sumOutput / (float) buffer.getNumSamples());
    lastCvOutputValue.store(sumCvOutput / (float) buffer.getNumSamples());

    // Store live parameter values for UI display (currently no modulation, so store parameter values)
    setLiveParamValue("inMin_live", inMin);
    setLiveParamValue("inMax_live", inMax);
    setLiveParamValue("normMin_live", normMin);
    setLiveParamValue("normMax_live", normMax);
    setLiveParamValue("outMin_live", outMin);
    setLiveParamValue("outMax_live", outMax);
    setLiveParamValue("cvMin_live", cvMin);
    setLiveParamValue("cvMax_live", cvMax);
    }

    // Update the hover-value display for all three output pins
    if (lastOutputValues.size() >= 3)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(out.getSample(0, buffer.getNumSamples() - 1));
        if (out.getNumChannels() > 1 && lastOutputValues[1]) lastOutputValues[1]->store(out.getSample(1, buffer.getNumSamples() - 1));
        if (out.getNumChannels() > 2 && lastOutputValues[2]) lastOutputValues[2]->store(out.getSample(2, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void MapRangeModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float inMin = inMinParam->load();
    float inMax = inMaxParam->load();
    float normMin = normMinParam->load();
    float normMax = normMaxParam->load();
    float outMin = outMinParam->load();
    float outMax = outMaxParam->load();
    float cvMin = cvMinParam->load();
    float cvMax = cvMaxParam->load();

    ImGui::PushItemWidth(itemWidth);
    
    // Input Range Sliders
    if (ImGui::SliderFloat("Input Min", &inMin, -100.0f, 100.0f))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("inMin"))) *p = inMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("inMin"), "inMin", inMin);
    
    if (ImGui::SliderFloat("Input Max", &inMax, -100.0f, 100.0f))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("inMax"))) *p = inMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("inMax"), "inMax", inMax);
    

    // Norm Out precise bipolar range [-1, 1]
    if (ImGui::SliderFloat("Norm Min", &normMin, -1.0f, 1.0f, "%.4f"))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("normMin"))) *p = normMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("normMin"), "normMin", normMin);

    if (ImGui::SliderFloat("Norm Max", &normMax, -1.0f, 1.0f, "%.4f"))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("normMax"))) *p = normMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("normMax"), "normMax", normMax);

    // CV Output Range Sliders (0.0-1.0 range)
    if (ImGui::SliderFloat("CV Min", &cvMin, 0.0f, 1.0f))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("cvMin"))) *p = cvMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("cvMin"), "cvMin", cvMin);
    
    if (ImGui::SliderFloat("CV Max", &cvMax, 0.0f, 1.0f))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("cvMax"))) *p = cvMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("cvMax"), "cvMax", cvMax);


    // Raw Output Range Sliders (wide range)
    if (ImGui::SliderFloat("Output Min", &outMin, -10000.0f, 10000.0f, "%.1f", ImGuiSliderFlags_Logarithmic))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMin"))) *p = outMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("outMin"), "outMin", outMin);
    
    if (ImGui::SliderFloat("Output Max", &outMax, -10000.0f, 10000.0f, "%.1f", ImGuiSliderFlags_Logarithmic))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMax"))) *p = outMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("outMax"), "outMax", outMax);


    // Output value displays
    ImGui::Text("Input:     %.2f", getLastInputValue());
    ImGui::Text("Raw Out:   %.2f", getLastOutputValue());
    ImGui::Text("CV Out:    %.2f", getLastCvOutputValue());

    ImGui::PopItemWidth();
}

void MapRangeModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Input", 0);
    helpers.drawAudioOutputPin("Norm Out", 0);
    helpers.drawAudioOutputPin("Raw Out", 1);
    helpers.drawAudioOutputPin("CV Out", 2);
}
#endif

float MapRangeModuleProcessor::getLastInputValue() const
{
    return lastInputValue.load();
}

float MapRangeModuleProcessor::getLastOutputValue() const
{
    return lastOutputValue.load();
}

float MapRangeModuleProcessor::getLastCvOutputValue() const
{
    return lastCvOutputValue.load();
}


================================================================================
FILE: juce\Source\audio\modules\MapRangeModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class MapRangeModuleProcessor : public ModuleProcessor
{
public:
    MapRangeModuleProcessor();
    ~MapRangeModuleProcessor() override = default;

    const juce::String getName() const override { return "maprange"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    float getLastInputValue() const;
    float getLastOutputValue() const;
    float getLastCvOutputValue() const;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Input";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Norm Out";
            case 1: return "Raw Out";
            case 2: return "CV Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* inMinParam { nullptr };
    std::atomic<float>* inMaxParam { nullptr };
    std::atomic<float>* outMinParam { nullptr };
    std::atomic<float>* outMaxParam { nullptr };
    // Norm Out bipolar range [-1, 1]
    std::atomic<float>* normMinParam { nullptr };
    std::atomic<float>* normMaxParam { nullptr };
    
    // New CV parameters
    std::atomic<float>* cvMinParam { nullptr };
    std::atomic<float>* cvMaxParam { nullptr };

    std::atomic<float> lastInputValue { 0.0f };
    std::atomic<float> lastOutputValue { 0.0f };
    std::atomic<float> lastCvOutputValue { 0.0f };
};


================================================================================
FILE: juce\Source\audio\modules\MathModuleProcessor.cpp
================================================================================


#include "MathModuleProcessor.h"

MathModuleProcessor::MathModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("In A", juce::AudioChannelSet::mono(), true)
                        .withInput ("In B", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::mono(), true)),
      apvts (*this, nullptr, "MathParams", createParameterLayout())
{
    valueAParam    = apvts.getRawParameterValue ("valueA");
    valueBParam    = apvts.getRawParameterValue ("valueB");
    operationParam = apvts.getRawParameterValue ("operation");
    
    // ADD THIS:
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout MathModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    // Enhanced operation list with 17 mathematical functions
    p.push_back (std::make_unique<juce::AudioParameterChoice> ("operation", "Operation", 
        juce::StringArray { 
            "Add", "Subtract", "Multiply", "Divide",
            "Min", "Max", "Power", "Sqrt(A)",
            "Sin(A)", "Cos(A)", "Tan(A)",
            "Abs(A)", "Modulo", "Fract(A)", "Int(A)",
            "A > B", "A < B"
        }, 0));
    // New Value A slider default
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("valueA", "Value A", juce::NormalisableRange<float> (-100.0f, 100.0f), 0.0f));
    // Expanded Value B range from -100 to 100 for more creative possibilities
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("valueB", "Value B", juce::NormalisableRange<float> (-100.0f, 100.0f), 0.0f));
    return { p.begin(), p.end() };
}

void MathModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (sampleRate, samplesPerBlock);
}

void MathModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);

    auto inA = getBusBuffer (buffer, true, 0);
    auto out = getBusBuffer (buffer, false, 0);

    // CORRECTED LOGIC:
    auto inB = getBusBuffer(buffer, true, 1);
    // Use robust connection detection
    const bool inAConnected = isParamInputConnected("valueA");
    const bool inBConnected = isParamInputConnected("valueB");

    const float valueA = valueAParam != nullptr ? valueAParam->load() : 0.0f;
    const float valueB = valueBParam->load();
    const int operation = static_cast<int>(operationParam->load());
    
    const float* srcA = inA.getNumChannels() > 0 ? inA.getReadPointer (0) : nullptr;
    const float* srcB = inBConnected ? inB.getReadPointer (0) : nullptr;
    float* dst = out.getWritePointer (0);

    float sum = 0.0f;
    float sumA = 0.0f;
    float sumB = 0.0f;
    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float valA = inAConnected && srcA != nullptr ? srcA[i] : valueA;
        float valB = inBConnected ? srcB[i] : valueB;

        // Enhanced mathematical operations with 17 different functions
        switch (operation)
        {
            case 0:  dst[i] = valA + valB; break; // Add
            case 1:  dst[i] = valA - valB; break; // Subtract
            case 2:  dst[i] = valA * valB; break; // Multiply
            case 3:  dst[i] = (std::abs(valB) < 1e-9f) ? 0.0f : (valA / valB); break; // Divide (safe)
            case 4:  dst[i] = std::min(valA, valB); break; // Min
            case 5:  dst[i] = std::max(valA, valB); break; // Max
            case 6:  dst[i] = std::pow(valA, valB); break; // Power
            case 7:  dst[i] = std::sqrt(std::abs(valA)); break; // Sqrt(A) - only on A
            case 8:  dst[i] = std::sin(valA * juce::MathConstants<float>::twoPi); break; // Sin(A) - only on A
            case 9:  dst[i] = std::cos(valA * juce::MathConstants<float>::twoPi); break; // Cos(A) - only on A
            case 10: dst[i] = std::tan(valA * juce::MathConstants<float>::pi); break; // Tan(A) - only on A
            case 11: dst[i] = std::abs(valA); break; // Abs(A) - only on A
            case 12: dst[i] = (std::abs(valB) < 1e-9f) ? 0.0f : std::fmod(valA, valB); break; // Modulo (safe)
            case 13: dst[i] = valA - std::trunc(valA); break; // Fract(A) - only on A
            case 14: dst[i] = std::trunc(valA); break; // Int(A) - only on A
            case 15: dst[i] = (valA > valB) ? 1.0f : 0.0f; break; // A > B
            case 16: dst[i] = (valA < valB) ? 1.0f : 0.0f; break; // A < B
        }
        sum += dst[i];
        sumA += valA;
        sumB += valB;
        
        // Update telemetry for live UI feedback (throttled to every 64 samples)
        if ((i & 0x3F) == 0) {
            setLiveParamValue("valueA_live", valA);
            setLiveParamValue("valueB_live", valB);
            setLiveParamValue("operation_live", static_cast<float>(operation));
        }
    }
    lastValue.store(sum / (float) buffer.getNumSamples());
    lastValueA.store(sumA / (float) buffer.getNumSamples());
    lastValueB.store(sumB / (float) buffer.getNumSamples());
    
    // ADD THIS BLOCK:
    if (!lastOutputValues.empty() && lastOutputValues[0])
    {
        lastOutputValues[0]->store(out.getSample(0, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void MathModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    int op = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("operation"))) op = p->getIndex();
    float valA = valueAParam != nullptr ? valueAParam->load() : 0.0f;
    float valB = valueBParam != nullptr ? valueBParam->load() : 0.0f;
    
    ImGui::PushItemWidth (itemWidth);
    
    // Operation combo box (no modulation input, so no live feedback needed)
    if (ImGui::Combo ("Operation", &op, 
        "Add\0Subtract\0Multiply\0Divide\0"
        "Min\0Max\0Power\0Sqrt(A)\0"
        "Sin(A)\0Cos(A)\0Tan(A)\0"
        "Abs(A)\0Modulo\0Fract(A)\0Int(A)\0"
        "A > B\0A < B\0\0"))
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("operation"))) *p = op;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();

    // Value A slider with live modulation feedback
    bool isValueAModulated = isParamModulated("valueA");
    if (isValueAModulated) {
        valA = getLiveParamValueFor("valueA", "valueA_live", valA);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Value A", &valA, -100.0f, 100.0f)) {
        if (!isValueAModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("valueA"))) *p = valA;
        }
    }
    if (!isValueAModulated) adjustParamOnWheel (ap.getParameter("valueA"), "valueA", valA);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isValueAModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Value B slider with live modulation feedback
    bool isValueBModulated = isParamModulated("valueB");
    if (isValueBModulated) {
        valB = getLiveParamValueFor("valueB", "valueB_live", valB);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Value B", &valB, -100.0f, 100.0f)) {
        if (!isValueBModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("valueB"))) *p = valB;
        }
    }
    if (!isValueBModulated) adjustParamOnWheel (ap.getParameter("valueB"), "valueB", valB);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isValueBModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::Text("In A: %.2f", getLastValueA());
    ImGui::Text("In B: %.2f", getLastValueB());
    ImGui::Text("Out: %.2f", getLastValue());

    ImGui::PopItemWidth();
}

void MathModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In A", 0);
    helpers.drawAudioInputPin("In B", 1);
    helpers.drawAudioOutputPin("Out", 0);
}
#endif

float MathModuleProcessor::getLastValue() const
{
    return lastValue.load();
}

float MathModuleProcessor::getLastValueA() const
{
    return lastValueA.load();
}

float MathModuleProcessor::getLastValueB() const
{
    return lastValueB.load();
}

bool MathModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "valueA") { outBusIndex = 0; outChannelIndexInBus = 0; return true; }
    if (paramId == "valueB") { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    return false;
}

================================================================================
FILE: juce\Source\audio\modules\MathModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class MathModuleProcessor : public ModuleProcessor
{
public:
    MathModuleProcessor();
    ~MathModuleProcessor() override = default;

    const juce::String getName() const override { return "math"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In A";
            case 1: return "In B";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

    float getLastValue() const;
    float getLastValueA() const;
    float getLastValueB() const;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* valueAParam { nullptr };
    std::atomic<float>* valueBParam { nullptr };
    std::atomic<float>* operationParam { nullptr };

    std::atomic<float> lastValue { 0.0f };
    std::atomic<float> lastValueA { 0.0f };
    std::atomic<float> lastValueB { 0.0f };
};


================================================================================
FILE: juce\Source\audio\modules\MetaModuleProcessor.cpp
================================================================================


#include "MetaModuleProcessor.h"

MetaModuleProcessor::MetaModuleProcessor()
    : ModuleProcessor(BusesProperties()
                      .withInput("Input", juce::AudioChannelSet::stereo(), true)
                      .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "MetaModuleParams", createParameterLayout()),
      metaModuleLabel("Meta Module")
{
    // Create the internal graph
    internalGraph = std::make_unique<ModularSynthProcessor>();
    
    // Initialize output value tracking (default 2 channels)
    lastOutputValues.clear();
    for (int i = 0; i < 2; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout MetaModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    
    // Initially empty - parameters will be added dynamically when exposing internal parameters
    // For now, just have a bypass parameter
    layout.add(std::make_unique<juce::AudioParameterBool>(
        "bypass",
        "Bypass",
        false
    ));
    
    return layout;
}

void MetaModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    if (internalGraph)
    {
        internalGraph->prepareToPlay(sampleRate, samplesPerBlock);
    }
    
    // Prepare inlet/outlet buffers
    updateInletOutletCache();
    
    inletBuffers.clear();
    outletBuffers.clear();
    
    for (int i = 0; i < cachedInletCount; ++i)
    {
        inletBuffers.emplace_back(2, samplesPerBlock);
    }
    
    for (int i = 0; i < cachedOutletCount; ++i)
    {
        outletBuffers.emplace_back(2, samplesPerBlock);
    }
}

void MetaModuleProcessor::releaseResources()
{
    if (internalGraph)
    {
        internalGraph->releaseResources();
    }
}

void MetaModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    if (!internalGraph)
    {
        buffer.clear();
        return;
    }
    
    // Logging example (throttled to avoid spam)
    static int frameCounter = 0;
    if ((frameCounter++ % 100) == 0) {
        juce::Logger::writeToLog("[META_PROC] Processing block for Meta Module " + juce::String((int)getLogicalId()));
        juce::Logger::writeToLog("  - Copying " + juce::String(buffer.getNumChannels()) + " channels to internal inlets.");
    }
    
    // Check bypass
    if (auto* bypassParam = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("bypass")))
    {
        if (*bypassParam)
        {
            // Bypass: just pass through input to output
            return;
        }
    }
    
    // 1. Get all inlet nodes and feed them with our input buffer
    auto inlets = getInletNodes();
    for (size_t i = 0; i < inlets.size() && i < inletBuffers.size(); ++i)
    {
        if (inlets[i])
        {
            // Copy relevant channels from main input to this inlet's buffer
            const int startChannel = (int)i * 2; // Each inlet gets 2 channels
            const int numChannels = juce::jmin(2, buffer.getNumChannels() - startChannel);
            
            if (numChannels > 0 && startChannel < buffer.getNumChannels())
            {
                inletBuffers[i].setSize(numChannels, buffer.getNumSamples(), false, false, true);
                
                for (int ch = 0; ch < numChannels; ++ch)
                {
                    inletBuffers[i].copyFrom(ch, 0, buffer, startChannel + ch, 0, buffer.getNumSamples());
                }
                
                inlets[i]->setIncomingBuffer(&inletBuffers[i]);
            }
        }
    }
    
    // 2. Process the internal graph
    juce::AudioBuffer<float> internalBuffer(buffer.getNumChannels(), buffer.getNumSamples());
    internalBuffer.clear();
    
    internalGraph->processBlock(internalBuffer, midi);
    
    if ((frameCounter % 100) == 0) {
        juce::Logger::writeToLog("  - Copying audio from internal outlets to main output buffer.");
    }
    
    // 3. Collect outputs from outlet nodes
    auto outlets = getOutletNodes();
    buffer.clear(); // Clear before accumulating
    
    for (size_t i = 0; i < outlets.size(); ++i)
    {
        if (outlets[i])
        {
            const auto& outletBuffer = outlets[i]->getOutputBuffer();
            const int startChannel = (int)i * 2; // Each outlet provides 2 channels
            const int numChannels = juce::jmin(outletBuffer.getNumChannels(), buffer.getNumChannels() - startChannel);
            
            if (numChannels > 0 && startChannel < buffer.getNumChannels())
            {
                for (int ch = 0; ch < numChannels; ++ch)
                {
                    buffer.addFrom(startChannel + ch, 0, outletBuffer, ch, 0, 
                                  juce::jmin(buffer.getNumSamples(), outletBuffer.getNumSamples()));
                }
            }
        }
    }
    
    // 4. Update output telemetry
    if (lastOutputValues.size() >= 2)
    {
        lastOutputValues[0]->store(buffer.getMagnitude(0, 0, buffer.getNumSamples()));
        if (buffer.getNumChannels() > 1)
            lastOutputValues[1]->store(buffer.getMagnitude(1, 0, buffer.getNumSamples()));
    }
}

void MetaModuleProcessor::updateInletOutletCache()
{
    cachedInletCount = 0;
    cachedOutletCount = 0;
    
    if (internalGraph)
    {
        auto modules = internalGraph->getModulesInfo();
        for (const auto& [logicalId, typeName] : modules)
        {
            if (typeName.equalsIgnoreCase("inlet"))
                cachedInletCount++;
            else if (typeName.equalsIgnoreCase("outlet"))
                cachedOutletCount++;
        }
    }
}

std::vector<InletModuleProcessor*> MetaModuleProcessor::getInletNodes() const
{
    std::vector<InletModuleProcessor*> inlets;
    
    if (internalGraph)
    {
        auto modules = internalGraph->getModulesInfo();
        for (const auto& [logicalId, typeName] : modules)
        {
            if (typeName.equalsIgnoreCase("inlet"))
            {
                if (auto* module = internalGraph->getModuleForLogical(logicalId))
                {
                    if (auto* inlet = dynamic_cast<InletModuleProcessor*>(module))
                    {
                        inlets.push_back(inlet);
                    }
                }
            }
        }
    }
    
    return inlets;
}

std::vector<OutletModuleProcessor*> MetaModuleProcessor::getOutletNodes() const
{
    std::vector<OutletModuleProcessor*> outlets;
    
    if (internalGraph)
    {
        auto modules = internalGraph->getModulesInfo();
        for (const auto& [logicalId, typeName] : modules)
        {
            if (typeName.equalsIgnoreCase("outlet"))
            {
                if (auto* module = internalGraph->getModuleForLogical(logicalId))
                {
                    if (auto* outlet = dynamic_cast<OutletModuleProcessor*>(module))
                    {
                        outlets.push_back(outlet);
                    }
                }
            }
        }
    }
    
    return outlets;
}

juce::ValueTree MetaModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("MetaModuleState");
    vt.setProperty("label", metaModuleLabel, nullptr);
    
    // Save the complete state of the internal graph
    if (internalGraph)
    {
        juce::MemoryBlock graphState;
        internalGraph->getStateInformation(graphState);
        
        // Convert to base64 for safe storage in ValueTree
        juce::MemoryOutputStream mos;
        juce::Base64::convertToBase64(mos, graphState.getData(), graphState.getSize());
        vt.setProperty("internalGraphState", mos.toString(), nullptr);
    }
    
    return vt;
}

void MetaModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("MetaModuleState"))
    {
        metaModuleLabel = vt.getProperty("label", "Meta Module").toString();
        
        // Restore the internal graph state
        juce::String base64State = vt.getProperty("internalGraphState", "").toString();
        if (base64State.isNotEmpty() && internalGraph)
        {
            juce::MemoryOutputStream mos;
            if (juce::Base64::convertFromBase64(mos, base64State))
            {
                const auto* data = static_cast<const void*>(mos.getData());
                const int size = (int)mos.getDataSize();
                
                internalGraph->setStateInformation(data, size);
                
                // Update our cached info
                updateInletOutletCache();
                
                // Rebuild bus layout if needed
                rebuildBusLayout();
            }
        }
    }
}

void MetaModuleProcessor::rebuildBusLayout()
{
    // This is a simplified version - in a full implementation, you would
    // dynamically rebuild the AudioProcessor's bus layout based on inlet/outlet counts
    // For now, we use a fixed stereo bus layout
}

#if defined(PRESET_CREATOR_UI)
void MetaModuleProcessor::drawParametersInNode(float itemWidth,
                                               const std::function<bool(const juce::String& paramId)>&,
                                               const std::function<void()>& onModificationEnded)
{
    // FIX #1: Constrain widget widths to prevent infinite scaling
    ImGui::PushItemWidth(itemWidth);
    
    // Label editor
    char labelBuf[64];
    strncpy(labelBuf, metaModuleLabel.toRawUTF8(), sizeof(labelBuf) - 1);
    labelBuf[sizeof(labelBuf) - 1] = '\0';
    
    if (ImGui::InputText("Label", labelBuf, sizeof(labelBuf)))
    {
        metaModuleLabel = juce::String(labelBuf);
        if (ImGui::IsItemDeactivatedAfterEdit())
            onModificationEnded();
    }
    
    // Bypass
    bool bypass = false;
    if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("bypass")))
        bypass = *p;
    
    if (ImGui::Checkbox("Bypass", &bypass))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("bypass")))
            *p = bypass;
        onModificationEnded();
    }
    
    ImGui::Separator();
    
    // Get stats from the internal graph
    int numModules = 0, numInlets = 0, numOutlets = 0;
    if (internalGraph)
    {
        for (const auto& modInfo : internalGraph->getModulesInfo())
        {
            if (modInfo.second.equalsIgnoreCase("inlet"))
                numInlets++;
            else if (modInfo.second.equalsIgnoreCase("outlet"))
                numOutlets++;
            else
                numModules++;
        }
    }
    
    // Info display
    ImGui::Text("Internal Graph:");
    ImGui::Text("  Modules: %d", numModules);
    ImGui::Text("  Inlets: %d", numInlets);
    ImGui::Text("  Outlets: %d", numOutlets);
    
    // FIX #2: Set atomic flag when button is clicked
    if (ImGui::Button("Edit Internal Patch", ImVec2(itemWidth, 0)))
    {
        juce::Logger::writeToLog("[MetaModule] Edit button clicked for L-ID " + juce::String((int)getLogicalId()));
        editRequested = true;
    }
    
    ImGui::PopItemWidth();
}

void MetaModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Draw input pins for each inlet
    auto inlets = getInletNodes();
    int inChannel = 0;
    for (size_t i = 0; i < inlets.size(); ++i)
    {
        if (inlets[i])
        {
            juce::String label = "In " + juce::String(i + 1);
            helpers.drawAudioInputPin(label.toRawUTF8(), inChannel++);
        }
    }
    
    // Draw output pins for each outlet
    auto outlets = getOutletNodes();
    int outChannel = 0;
    for (size_t i = 0; i < outlets.size(); ++i)
    {
        if (outlets[i])
        {
            juce::String label = "Out " + juce::String(i + 1);
            helpers.drawAudioOutputPin(label.toRawUTF8(), outChannel++);
        }
    }
}

juce::String MetaModuleProcessor::getAudioInputLabel(int channel) const
{
    auto inlets = getInletNodes();
    if (juce::isPositiveAndBelow(channel, (int)inlets.size()) && inlets[channel])
    {
        // Use the inlet's custom label if available
        return juce::String("In ") + juce::String(channel + 1);
    }
    return juce::String("In ") + juce::String(channel + 1);
}

juce::String MetaModuleProcessor::getAudioOutputLabel(int channel) const
{
    auto outlets = getOutletNodes();
    if (juce::isPositiveAndBelow(channel, (int)outlets.size()) && outlets[channel])
    {
        // Use the outlet's custom label if available
        return juce::String("Out ") + juce::String(channel + 1);
    }
    return juce::String("Out ") + juce::String(channel + 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\MetaModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include "../graph/ModularSynthProcessor.h"
#include "InletModuleProcessor.h"
#include "OutletModuleProcessor.h"
#include <memory>

/**
    MetaModuleProcessor - A recursive container module for sub-patching
    
    This module contains a complete ModularSynthProcessor instance internally,
    allowing users to create complex patches and collapse them into single,
    reusable modules.
    
    Architecture:
    - Contains an internal ModularSynthProcessor graph
    - Uses InletModuleProcessor nodes inside to represent external inputs
    - Uses OutletModuleProcessor nodes inside to represent external outputs
    - Can expose selected internal parameters as its own parameters
*/
class MetaModuleProcessor : public ModuleProcessor
{
public:
    MetaModuleProcessor();
    ~MetaModuleProcessor() override = default;

    const juce::String getName() const override { return "Meta Module"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Access to the internal graph for UI editing
    ModularSynthProcessor* getInternalGraph() const { return internalGraph.get(); }
    
    // State management for the internal graph
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    // UI interaction flag - set when user clicks "Edit Internal Patch" button
    std::atomic<bool> editRequested { false };

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth,
                              const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override;

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    // Helper to get inlet/outlet nodes
    std::vector<InletModuleProcessor*> getInletNodes() const;
    std::vector<OutletModuleProcessor*> getOutletNodes() const;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::unique_ptr<ModularSynthProcessor> internalGraph;
    
    // Temporary buffers for inlet/outlet communication
    std::vector<juce::AudioBuffer<float>> inletBuffers;
    std::vector<juce::AudioBuffer<float>> outletBuffers;
    
    // Cached inlet/outlet counts (updated when internal graph changes)
    int cachedInletCount { 0 };
    int cachedOutletCount { 0 };
    
    // Label for this meta module
    juce::String metaModuleLabel;
    
    // Rebuild bus layout based on inlets/outlets
    void rebuildBusLayout();
    
    // Update cached inlet/outlet information
    void updateInletOutletCache();

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(MetaModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\MIDIPlayerModuleProcessor.cpp
================================================================================


#include "MIDIPlayerModuleProcessor.h"

MIDIPlayerModuleProcessor::MIDIPlayerModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withInput("Speed Mod", juce::AudioChannelSet::mono(), true)
        .withInput("Pitch Mod", juce::AudioChannelSet::mono(), true)
        .withInput("Velocity Mod", juce::AudioChannelSet::mono(), true)
        .withInput("Reset Mod", juce::AudioChannelSet::mono(), true)
        .withInput("Loop Mod", juce::AudioChannelSet::mono(), true)
        .withOutput("Output", juce::AudioChannelSet::discreteChannels(kTotalOutputs), true))
    , apvts(*this, nullptr, "MIDIPlayerParameters", createParameterLayout())
{
    // Initialize parameter pointers
    speedParam = apvts.getRawParameterValue(SPEED_PARAM);
    pitchParam = apvts.getRawParameterValue(PITCH_PARAM);
    tempoParam = apvts.getRawParameterValue(TEMPO_PARAM);
    trackParam = apvts.getRawParameterValue(TRACK_PARAM);
    loopParam = apvts.getRawParameterValue(LOOP_PARAM);
    speedModParam = apvts.getRawParameterValue(SPEED_MOD_PARAM);
    pitchModParam = apvts.getRawParameterValue(PITCH_MOD_PARAM);
    velocityModParam = apvts.getRawParameterValue(VELOCITY_MOD_PARAM);
    
    // Initialize output values
    lastOutputValues.resize(kTotalOutputs);
    for (auto& value : lastOutputValues)
        value = std::make_unique<std::atomic<float>>(0.0f);
}

juce::AudioProcessorValueTreeState::ParameterLayout MIDIPlayerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> parameters;
    
    // Playback Controls
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        SPEED_PARAM, "Speed", 0.25f, 4.0f, 1.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        PITCH_PARAM, "Pitch", -24.0f, 24.0f, 0.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        TEMPO_PARAM, "Tempo", 60.0f, 200.0f, 120.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterInt>(
        TRACK_PARAM, "Track", 0, 31, 0));
    parameters.push_back(std::make_unique<juce::AudioParameterBool>(
        LOOP_PARAM, "Loop", true));
    
    // Modulation Inputs
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        SPEED_MOD_PARAM, "Speed Mod", 0.0f, 1.0f, 0.5f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        PITCH_MOD_PARAM, "Pitch Mod", 0.0f, 1.0f, 0.5f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        VELOCITY_MOD_PARAM, "Velocity Mod", 0.0f, 1.0f, 0.5f));
    
    return { parameters.begin(), parameters.end() };
}

void MIDIPlayerModuleProcessor::prepareToPlay(double sampleRate, int maximumExpectedSamplesPerBlock)
{
    juce::Logger::writeToLog("[MIDI Player] prepareToPlay sr=" + juce::String(sampleRate) + ", block=" + juce::String(maximumExpectedSamplesPerBlock));
}

void MIDIPlayerModuleProcessor::releaseResources()
{
    // Nothing to release for MIDI Player
}

void MIDIPlayerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    const juce::ScopedLock lock (midiDataLock);
    // Get a dedicated view of the multi-channel output bus
    auto outBus = getBusBuffer(buffer, false, 0);
    outBus.clear(); // Start with a clean slate

    if (!hasMIDIFileLoaded()) {
        return; // Exit if no MIDI file is loaded
    }
    
    const int numSamples = outBus.getNumSamples();
    const double sampleRate = getSampleRate();
    const double deltaTime = numSamples / sampleRate;

    // --- 1. Update Playback Time ---
    float speed = speedParam->load();
    if (isParamInputConnected("speed"))
        speed *= juce::jmap(getBusBuffer(buffer, true, 0).getReadPointer(0)[0], 0.0f, 1.0f, 0.25f, 4.0f);
    
    // Store live speed value for UI
    setLiveParamValue("speed_live", speed);
    
    if (double seek = pendingSeekTime.load(); seek >= 0.0) {
        currentPlaybackTime = juce::jlimit(0.0, totalDuration, seek);
        pendingSeekTime.store(-1.0);
    }
    currentPlaybackTime += deltaTime * speed;

    // Handle Reset and Loop modulation
    bool shouldReset = false;
    bool shouldLoop = loopParam->load() > 0.5f;
    
    if (isParamInputConnected("reset")) {
        const auto& resetModBus = getBusBuffer(buffer, true, 3);
        if (resetModBus.getNumChannels() > 0) {
            float resetCV = resetModBus.getReadPointer(0)[0];
            if (resetCV > 0.5f && lastResetCV <= 0.5f) { // Rising edge
                shouldReset = true;
            }
            lastResetCV = resetCV;
        }
    }
    
    if (isParamInputConnected("loop")) {
        const auto& loopModBus = getBusBuffer(buffer, true, 4);
        if (loopModBus.getNumChannels() > 0) {
            float loopCV = loopModBus.getReadPointer(0)[0];
            shouldLoop = loopCV > 0.5f;
        }
    }
    
    // Apply reset
    if (shouldReset) {
        currentPlaybackTime = 0.0;
    }
    
    // Apply loop behavior
    if (currentPlaybackTime >= totalDuration && shouldLoop) {
        currentPlaybackTime = std::fmod(currentPlaybackTime, totalDuration);
    }

    // --- RESET SEARCH HINTS on loop or seek ---
    if (currentPlaybackTime < previousPlaybackTime)
    {
        std::fill(lastNoteIndexHint.begin(), lastNoteIndexHint.end(), 0);
    }
    previousPlaybackTime = currentPlaybackTime;

    // --- 2. Generate Outputs for Each Active MIDI Track ---
    const int tracksToProcess = std::min((int)activeTrackIndices.size(), kMaxTracks);
    if (tracksToProcess == 0)
    {
        // Debug in Collider: no active tracks, nothing to output
        static int ctr = 0; if ((ctr++ & 0x3F) == 0)
            juce::Logger::writeToLog("[MIDI Player] No active tracks; check preset load and activeTrackIndices");
    }
    for (int i = 0; i < tracksToProcess; ++i)
    {
        const int sourceTrackIndex = activeTrackIndices[i];
        
        // --- REPLACED with EFFICIENT SEARCH ---
        const NoteData* activeNote = nullptr;
        if (sourceTrackIndex < (int)notesByTrack.size())
        {
            auto& trackNotes = notesByTrack[sourceTrackIndex];
            int& searchIndex = lastNoteIndexHint[sourceTrackIndex];

            // Fast-forward past notes that have already ended
            while (searchIndex < (int)trackNotes.size() && trackNotes[searchIndex].endTime < currentPlaybackTime)
            {
                searchIndex++;
            }

            // Now, search from the hint to find the active note (last-note priority)
            double latestStart = -1.0;
            for (int j = searchIndex; j < (int)trackNotes.size(); ++j)
            {
                const auto& note = trackNotes[j];
                if (note.startTime > currentPlaybackTime) break; // Notes are sorted, so we can stop early

                if (currentPlaybackTime >= note.startTime && currentPlaybackTime <= note.endTime) {
                    if (note.startTime > latestStart) {
                        latestStart = note.startTime;
                        activeNote = &note;
                    }
                }
            }
        }
        // --- END OF EFFICIENT SEARCH ---

        // Calculate the four CV values for this track
        float pitchOut = 0.0f, gateOut = 0.0f, velOut = 0.0f, trigOut = 0.0f;
        if (activeNote) {
            pitchOut = (float)noteNumberToCV(activeNote->noteNumber);
            gateOut = 1.0f;
            velOut = activeNote->velocity / 127.0f;
            // Generate a 10ms trigger at the start of the note
            if (std::abs(currentPlaybackTime - activeNote->startTime) < 0.01) {
                trigOut = 1.0f;
            }
        }
        
        // Apply global pitch modulation
        float pitchOffset = pitchParam->load();
        if (isParamInputConnected("pitch"))
            pitchOffset += juce::jmap(getBusBuffer(buffer, true, 1).getReadPointer(0)[0], 0.0f, 1.0f, -24.0f, 24.0f);
        pitchOut = juce::jlimit(0.0f, 1.0f, pitchOut + (pitchOffset / 60.0f));
        
        // Store live pitch value for UI
        setLiveParamValue("pitch_live", pitchOffset);
    
    // Store live loop value for UI
    setLiveParamValue("loop_live", shouldLoop ? 1.0f : 0.0f);

    // --- 3. Ensure tooltip storage capacity ---
    const int requiredChannels = outBus.getNumChannels();
    if ((int) lastOutputValues.size() < requiredChannels)
    {
        const size_t oldSize = lastOutputValues.size();
        lastOutputValues.resize((size_t) requiredChannels);
        for (size_t i = oldSize; i < lastOutputValues.size(); ++i)
            lastOutputValues[i] = std::make_unique<std::atomic<float>>(0.0f);
    }

    // --- 4. Write to the Correct Output Channels ---
        const int pitchChan = i * kOutputsPerTrack + 0;
        const int gateChan  = i * kOutputsPerTrack + 1;
        const int velChan   = i * kOutputsPerTrack + 2;
        const int trigChan  = i * kOutputsPerTrack + 3;

        // This is the reliable way to write: check if channel exists, get pointer, then fill.
        if (pitchChan < outBus.getNumChannels())
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(pitchChan), pitchOut, numSamples);
        if (pitchChan < (int) lastOutputValues.size() && lastOutputValues[(size_t) pitchChan])
            lastOutputValues[(size_t) pitchChan]->store(pitchOut);
    }
        if (gateChan < outBus.getNumChannels())
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(gateChan), gateOut, numSamples);
        if (gateChan < (int) lastOutputValues.size() && lastOutputValues[(size_t) gateChan])
            lastOutputValues[(size_t) gateChan]->store(gateOut);
    }
        if (velChan < outBus.getNumChannels())
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(velChan), velOut, numSamples);
        if (velChan < (int) lastOutputValues.size() && lastOutputValues[(size_t) velChan])
            lastOutputValues[(size_t) velChan]->store(velOut);
    }
        if (trigChan < outBus.getNumChannels())
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(trigChan), trigOut, numSamples);
        if (trigChan < (int) lastOutputValues.size() && lastOutputValues[(size_t) trigChan])
            lastOutputValues[(size_t) trigChan]->store(trigOut);
    }
    }
    
    // --- 5. Write Global Outputs ---
    if (kClockChannelIndex < outBus.getNumChannels()) {
        float tempo = tempoParam->load();
        double beatTime = 60.0 / tempo;
        double clockPhase = std::fmod(currentPlaybackTime, beatTime) / beatTime;
        float clockValue = (clockPhase < 0.1f) ? 1.0f : 0.0f;
        juce::FloatVectorOperations::fill(outBus.getWritePointer(kClockChannelIndex), clockValue, numSamples);
        if (kClockChannelIndex < (int) lastOutputValues.size() && lastOutputValues[(size_t) kClockChannelIndex])
            lastOutputValues[(size_t) kClockChannelIndex]->store(clockValue);
    }

    // --- NEWLY ADDED BLOCK TO FIX THE "NUM TRACKS" OUTPUT ---
    if (kNumTracksChannelIndex < outBus.getNumChannels()) {
        // The value is the number of tracks with notes, normalized over the max possible tracks.
        const float numTracksValue = (float)activeTrackIndices.size() / (float)kMaxTracks;
        juce::FloatVectorOperations::fill(outBus.getWritePointer(kNumTracksChannelIndex), numTracksValue, numSamples);
        
        if (kNumTracksChannelIndex < (int)lastOutputValues.size() && lastOutputValues[(size_t)kNumTracksChannelIndex])
            lastOutputValues[(size_t)kNumTracksChannelIndex]->store(numTracksValue);
    }
    
    // --- RAW NUM TRACKS OUTPUT ---
    if (kRawNumTracksChannelIndex < outBus.getNumChannels()) {
        const float rawNumTracksValue = (float)activeTrackIndices.size();
        juce::FloatVectorOperations::fill(outBus.getWritePointer(kRawNumTracksChannelIndex), rawNumTracksValue, numSamples);
        
        if (kRawNumTracksChannelIndex < (int)lastOutputValues.size() && lastOutputValues[(size_t)kRawNumTracksChannelIndex])
            lastOutputValues[(size_t)kRawNumTracksChannelIndex]->store(rawNumTracksValue);
    }
    // --- END OF FIX ---
}

void MIDIPlayerModuleProcessor::updatePlaybackTime(double deltaTime)
{
    currentPlaybackTime += deltaTime;
    
    // Handle looping
    if (currentPlaybackTime >= totalDuration && isLooping)
    {
        currentPlaybackTime = std::fmod(currentPlaybackTime, totalDuration);
    }
    else if (currentPlaybackTime >= totalDuration)
    {
        currentPlaybackTime = totalDuration;
    }
}

void MIDIPlayerModuleProcessor::generateCVOutputs()
{
    // Reset outputs
    // Keep last pitchCV to avoid dropping to zero between notes
    gateLevel = 0.0f;
    velocityLevel = 0.0f;
    triggerPulse = false;
    
    // Debug logging (only every 1000 samples to avoid spam)
    static int debugCounter = 0;
    if (++debugCounter % 1000 == 0)
    {
        juce::Logger::writeToLog("[MIDI Player] Debug - Time: " + juce::String(currentPlaybackTime, 3) + 
                                "s, Track: " + juce::String(currentTrackIndex) + 
                                ", Total notes: " + juce::String(getTotalNoteCount()));
    }
    
    // Find active note(s) at current time and apply mono priority: last note on
    int activeNotes = 0;
    const NoteData* chosenNote = nullptr;
    double latestStart = -1.0;
    
    // Use efficient search for the current track
    if (currentTrackIndex < (int)notesByTrack.size())
    {
        const auto& trackNotes = notesByTrack[currentTrackIndex];
        for (const auto& note : trackNotes)
        {
            if (currentPlaybackTime >= note.startTime && currentPlaybackTime <= note.endTime)
            {
                activeNotes++;
                // Prefer the most recent onset; tie-breaker by higher velocity
                if (note.startTime > latestStart || (std::abs(note.startTime - latestStart) < 1e-6 && chosenNote != nullptr && note.velocity > chosenNote->velocity))
                {
                    latestStart = note.startTime;
                    chosenNote = &note;
                }
            }
        }
    }
    
    if (chosenNote != nullptr)
    {
        pitchCV = (float) noteNumberToCV(chosenNote->noteNumber);
        gateLevel = 1.0f;
        velocityLevel = chosenNote->velocity / 127.0f;
        
        if (debugCounter % 1000 == 0)
        {
            juce::Logger::writeToLog("[MIDI Player] Active note - MIDI Note: " + juce::String(chosenNote->noteNumber) +
                                    ", Velocity: " + juce::String(chosenNote->velocity) +
                                    ", CV: " + juce::String(pitchCV, 3));
        }
        
        if (std::abs(currentPlaybackTime - chosenNote->startTime) < 0.01)
        {
            triggerPulse = true;
        }
    }
    
    // Fallback: if selected track has zero notes at all, try track 0
    if (activeNotes == 0 && currentTrackIndex != 0 && currentTrackIndex < (int) trackInfos.size() && trackInfos[(size_t) currentTrackIndex].noteCount == 0)
    {
        if (0 < (int)notesByTrack.size())
        {
            const auto& track0Notes = notesByTrack[0];
            for (const auto& note : track0Notes)
            {
                if (currentPlaybackTime >= note.startTime && currentPlaybackTime <= note.endTime)
                {
                    // Note is active
                    pitchCV = (float) noteNumberToCV(note.noteNumber);
                    gateLevel = 1.0f;
                    velocityLevel = note.velocity / 127.0f;
                    
                    if (debugCounter % 1000 == 0)
                    {
                        juce::Logger::writeToLog("[MIDI Player] FALLBACK to track 0 - MIDI Note: " + juce::String(note.noteNumber));
                    }
                    break;
                }
            }
        }
    }
    
    // Debug track information
    if (debugCounter % 1000 == 0)
    {
        juce::Logger::writeToLog("[MIDI Player] Current track: " + juce::String(currentTrackIndex) + 
                                ", Total tracks: " + juce::String(getNumTracks()));
        
        for (int t = 0; t < getNumTracks(); ++t)
        {
            int notesInTrack = 0;
            if (t < (int)notesByTrack.size())
            {
                notesInTrack = (int)notesByTrack[t].size();
            }
            if (notesInTrack > 0)
            {
                juce::String trackName = (t < trackInfos.size()) ? trackInfos[t].name : "Track " + juce::String(t);
                juce::Logger::writeToLog("[MIDI Player] " + trackName + ": " + juce::String(notesInTrack) + " notes");
            }
        }
        
        if (activeNotes == 0 && currentTrackIndex < trackInfos.size())
        {
            const auto& info = trackInfos[currentTrackIndex];
            juce::Logger::writeToLog("[MIDI Player] WARNING: No active notes in " + info.name + 
                                    " (has " + juce::String(info.noteCount) + " total notes)");
        }
    }
    
    // Generate clock output (quarter note pulses)
    float tempo = tempoParam->load();
    double beatTime = 60.0 / tempo;
    double clockPhase = std::fmod(currentPlaybackTime, beatTime) / beatTime;
    clockOutput = (clockPhase < 0.1f) ? 1.0f : 0.0f; // 10% duty cycle
}

double MIDIPlayerModuleProcessor::noteNumberToCV(int noteNumber) const
{
    // Map MIDI note range C2..C7 (36..96) to 0..1 linearly
    // Notes below C2 clamp to 0, above C7 clamp to 1
    const double minNote = 36.0; // C2
    const double maxNote = 96.0; // C7
    if (noteNumber <= minNote) return 0.0;
    if (noteNumber >= maxNote) return 1.0;
    return (noteNumber - minNote) / (maxNote - minNote);
}

int MIDIPlayerModuleProcessor::getTotalNoteCount() const
{
    int totalNotes = 0;
    for (const auto& trackNotes : notesByTrack) {
        totalNotes += (int)trackNotes.size();
    }
    return totalNotes;
}

void MIDIPlayerModuleProcessor::parseMIDIFile()
{
    if (!midiFile)
        return;
    
    // Build new state off-thread, then swap under lock
    std::vector<std::vector<NoteData>> newNotesByTrack;
    std::vector<TrackInfo> newTrackInfos;
    std::vector<int> newActiveTrackIndices;
    double newTotalDuration = 0.0;

    newNotesByTrack.clear();
    newNotesByTrack.resize (midiFile->getNumTracks());
    
    for (int track = 0; track < midiFile->getNumTracks(); ++track)
    {
        const auto* sequence = midiFile->getTrack (track);
        if (! sequence) continue;
        
        for (int event = 0; event < sequence->getNumEvents(); ++event)
        {
            const auto& message = sequence->getEventPointer(event)->message;
            if (message.isNoteOn() && message.getVelocity() > 0)
            {
                double startTime = message.getTimeStamp();
                double endTime = startTime + 1.0;
                for (int searchEvent = event + 1; searchEvent < sequence->getNumEvents(); ++searchEvent)
                {
                    const auto& searchMessage = sequence->getEventPointer(searchEvent)->message;
                    if ((searchMessage.isNoteOff() || (searchMessage.isNoteOn() && searchMessage.getVelocity() == 0)) &&
                        searchMessage.getNoteNumber() == message.getNoteNumber())
                    {
                        endTime = searchMessage.getTimeStamp();
                        break;
                    }
                }
                if (endTime - startTime < 0.05)
                    endTime = startTime + 0.05;

                NoteData note;
                const double ticksPerQuarter = midiFile->getTimeFormat();
                const double tempo = tempoParam ? (double) tempoParam->load() : 120.0;
                const double secondsPerTick = (60.0 / tempo) / ticksPerQuarter;
                note.startTime = startTime * secondsPerTick;
                note.endTime   = endTime   * secondsPerTick;
                note.noteNumber = message.getNoteNumber();
                note.velocity   = message.getVelocity();
                note.trackIndex = track;
                newNotesByTrack[track].push_back (note);
                newTotalDuration = std::max (newTotalDuration, note.endTime);
            }
        }
    }

    newTrackInfos.clear();
    newTrackInfos.resize (midiFile->getNumTracks());
    newActiveTrackIndices.clear();
    int newNumActiveTracks = 0;
    
    for (int track = 0; track < midiFile->getNumTracks(); ++track)
    {
        TrackInfo info;
        info.name = "Track " + juce::String (track + 1);
        info.noteCount = (int) newNotesByTrack[track].size();
        info.hasNotes = (info.noteCount > 0);
        if (const auto* sequence = midiFile->getTrack (track))
        {
            for (int i = 0; i < sequence->getNumEvents(); ++i)
            {
                const auto& msg = sequence->getEventPointer(i)->message;
                if (msg.isTrackNameEvent()) { info.name = msg.getTextFromTextMetaEvent(); break; }
            }
        }
        newTrackInfos[track] = info;
        if (info.hasNotes)
        {
            ++newNumActiveTracks;
            if ((int) newActiveTrackIndices.size() < kMaxTracks)
                newActiveTrackIndices.push_back (track);
        }
    }

    {
        const juce::ScopedLock lock (midiDataLock);
        notesByTrack.swap (newNotesByTrack);
        trackInfos.swap (newTrackInfos);
        activeTrackIndices.swap (newActiveTrackIndices);
        totalDuration = newTotalDuration;
        lastNoteIndexHint.assign (midiFile->getNumTracks(), 0);
        previousPlaybackTime = -1.0;
        numActiveTracks = newNumActiveTracks;
    }

    int totalNotes = 0;
    for (const auto& tn : notesByTrack) totalNotes += (int) tn.size();
    juce::Logger::writeToLog ("[MIDI Player] Parsed " + juce::String (totalNotes) +
                              " notes from " + juce::String (midiFile->getNumTracks()) + " tracks");
    juce::Logger::writeToLog ("[MIDI Player] Time format: " + juce::String (midiFile->getTimeFormat()) +
                              " ticks/quarter, Total duration: " + juce::String (totalDuration, 3) + "s");
}

void MIDIPlayerModuleProcessor::loadMIDIFile(const juce::File& file)
{
    auto newMidiFile = std::make_unique<juce::MidiFile>();
    
    juce::FileInputStream inputStream(file);
    if (inputStream.openedOk() && newMidiFile->readFrom(inputStream))
    {
        {
            const juce::ScopedLock lock (midiDataLock);
            midiFile = std::move(newMidiFile);
            currentMIDIFileName = file.getFileName();
            currentMIDIFilePath = file.getFullPathName();
            currentPlaybackTime = 0.0;
            previousPlaybackTime = -1.0;
            lastNoteIndexHint.clear();
        }
        parseMIDIFile();
        
        juce::Logger::writeToLog("[MIDI Player] Loaded MIDI file: " + currentMIDIFileName);
        
        // --- ADD THIS LINE ---
        // If a new file is loaded, signal to the UI that connections may need to be updated.
        connectionUpdateRequested = true;
    }
    else
    {
        juce::Logger::writeToLog("[MIDI Player] Failed to load MIDI file: " + file.getFullPathName());
    }
}

#if defined(PRESET_CREATOR_UI)

// Helper function for tooltip with help marker
static void HelpMarkerPlayer(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

void MIDIPlayerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);
    
    // === MIDI FILE SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "MIDI File");
    ImGui::Spacing();
    
    if (hasMIDIFileLoaded())
    {
        // Show file info with better formatting
        ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.5f, 1.0f, 0.7f, 1.0f)); // Green
        ImGui::Text("📄 %s", currentMIDIFileName.toRawUTF8());
        ImGui::PopStyleColor();
        ImGui::Text("Tracks: %d | Notes: %d", getNumTracks(), getTotalNoteCount());
        ImGui::Text("Duration: %.1fs", totalDuration);
    }
    else
    {
        // If NO MIDI file is loaded, draw a dedicated, colored dropzone.
        ImVec2 dropZoneSize = ImVec2(itemWidth, 60.0f);
        
        // Use a purple color to match the MIDI browser theme
        ImGui::PushStyleColor(ImGuiCol_Button, IM_COL32(180, 120, 255, 100));
        ImGui::Button("##dropzone_midi", dropZoneSize);
        ImGui::PopStyleColor();
        
        // Draw text centered on top of the button
        const char* text = "Drop MIDI File Here";
        ImVec2 textSize = ImGui::CalcTextSize(text);
        ImVec2 textPos = ImGui::GetItemRectMin();
        textPos.x += (dropZoneSize.x - textSize.x) * 0.5f;
        textPos.y += (dropZoneSize.y - textSize.y) * 0.5f;
        ImGui::GetWindowDrawList()->AddText(textPos, IM_COL32_WHITE, text);

        // Make THIS BUTTON the drop target
        if (ImGui::BeginDragDropTarget())
        {
            if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_MIDI_PATH"))
            {
                const char* path = (const char*)payload->Data;
                loadMIDIFile(juce::File(path));
                onModificationEnded(); // Create an undo state
            }
            ImGui::EndDragDropTarget();
        }
    }
    
    // Load MIDI File Button with tooltip
    if (ImGui::Button("Load MIDI", ImVec2(itemWidth, 0)))
    {
        juce::File startDir;
        {
            // Look for the project root (where juce folder is)
            auto appFile = juce::File::getSpecialLocation(juce::File::currentApplicationFile);
            auto dir = appFile.getParentDirectory();
            for (int i = 0; i < 10 && dir.exists(); ++i)
            {
                // Look for the juce folder, then go up one level to find audio/MIDI
                if (dir.getChildFile("juce").isDirectory())
                {
                    auto candidate = dir.getChildFile("audio").getChildFile("MIDI");
                    if (candidate.exists() && candidate.isDirectory())
                    {
                        startDir = candidate;
                        break;
                    }
                }
                dir = dir.getParentDirectory();
            }
        }
        if (!startDir.exists()) startDir = juce::File();
        
        fileChooser = std::make_unique<juce::FileChooser>("Select MIDI File", startDir, "*.mid;*.midi");
        auto chooserFlags = juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectFiles;
        fileChooser->launchAsync(chooserFlags, [this](const juce::FileChooser& fc)
        {
            try {
                auto file = fc.getResult();
                if (file != juce::File{})
                {
                    juce::Logger::writeToLog("[MIDI Player] User selected file: " + file.getFullPathName());
                    loadMIDIFile(file);
                }
            } catch (...) {
                juce::Logger::writeToLog("[MIDI Player][FATAL] Exception during file chooser callback");
            }
        });
    }
    ImGui::SameLine();
    HelpMarkerPlayer("Load a MIDI file (.mid, .midi)\nSupports multi-track MIDI sequences");
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === PLAYBACK CONTROLS SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Playback");
    ImGui::Spacing();
    
    // Speed control with modulation indicator
    bool speedModulated = isParamModulated("speed");
    float speed = speedParam->load();
    if (speedModulated) {
        speed = getLiveParamValueFor("speed", "speed_live", speed);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Speed", &speed, 0.25f, 4.0f, "%.2fx"))
    {
        if (!speedModulated) {
            apvts.getParameter(SPEED_PARAM)->setValueNotifyingHost(apvts.getParameterRange(SPEED_PARAM).convertTo0to1(speed));
            onModificationEnded();
        }
    }
    if (speedModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::SameLine();
    HelpMarkerPlayer("Playback speed multiplier\n0.25x = quarter speed, 4x = quad speed");
    
    // Pitch control with modulation indicator
    bool pitchModulated = isParamModulated("pitch");
    float pitch = pitchParam->load();
    if (pitchModulated) {
        pitch = getLiveParamValueFor("pitch", "pitch_live", pitch);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Pitch", &pitch, -24.0f, 24.0f, "%.1f st"))
    {
        if (!pitchModulated) {
            apvts.getParameter(PITCH_PARAM)->setValueNotifyingHost(apvts.getParameterRange(PITCH_PARAM).convertTo0to1(pitch));
            onModificationEnded();
        }
    }
    if (pitchModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::SameLine();
    HelpMarkerPlayer("Pitch shift in semitones\n-12 = octave down, +12 = octave up");
    
    // Tempo control
    float tempo = tempoParam->load();
    if (ImGui::SliderFloat("Tempo", &tempo, 60.0f, 200.0f, "%.0f BPM"))
    {
        apvts.getParameter(TEMPO_PARAM)->setValueNotifyingHost(apvts.getParameterRange(TEMPO_PARAM).convertTo0to1(tempo));
        onModificationEnded();
    }
    ImGui::SameLine();
    HelpMarkerPlayer("MIDI file tempo in beats per minute");
    
    // Loop checkbox
    bool loopModulated = isParamModulated("loop");
    bool loop = loopParam->load() > 0.5f;
    if (loopModulated) {
        loop = getLiveParamValueFor("loop", "loop_live", loop ? 1.0f : 0.0f) > 0.5f;
        ImGui::BeginDisabled();
    }
    if (ImGui::Checkbox("Loop", &loop))
    {
        if (!loopModulated) {
            apvts.getParameter(LOOP_PARAM)->setValueNotifyingHost(loop ? 1.0f : 0.0f);
            isLooping = loop;
            onModificationEnded();
        }
    }
    if (loopModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::SameLine();
    HelpMarkerPlayer("Enable looping playback");
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === TRACK SELECTION SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Track Selection");
    ImGui::Spacing();
    
    int track = (int)trackParam->load();
    int maxTrack = std::max(0, getNumTracks() - 1);
    
    // Clamp track to valid range and normalize parameter if out of range
    if (track > maxTrack) {
        track = 0;
        auto normZero = apvts.getParameterRange(TRACK_PARAM).convertTo0to1(0.0f);
        apvts.getParameter(TRACK_PARAM)->setValueNotifyingHost(normZero);
        currentTrackIndex = 0;
    }
    
    if (getNumTracks() > 0)
    {
        // Keep preview label alive during BeginCombo call
        juce::String previewLabel;
        if (track >= 0 && track < (int) trackInfos.size())
        {
            const auto& info = trackInfos[(size_t) track];
            previewLabel = info.name + " (" + juce::String(info.noteCount) + " notes)";
        }
        const char* previewText = previewLabel.isNotEmpty() ? previewLabel.toRawUTF8() : "No Track";
        
        if (ImGui::BeginCombo("Track", previewText))
        {
            for (int i = 0; i < getNumTracks(); ++i)
            {
                if (i < (int) trackInfos.size())
                {
                    const auto& info = trackInfos[(size_t) i];
                    juce::String label = info.name + " (" + juce::String(info.noteCount) + " notes)";
                    bool isSelected = (track == i);
                    
                    if (ImGui::Selectable(label.toRawUTF8(), isSelected))
                    {
                        track = i;
                        float norm = apvts.getParameterRange(TRACK_PARAM).convertTo0to1((float) track);
                        apvts.getParameter(TRACK_PARAM)->setValueNotifyingHost(norm);
                        currentTrackIndex = track;
                        onModificationEnded();
                        juce::Logger::writeToLog("[MIDI Player] Selected track " + juce::String(track) + ": " + info.name + " (" + juce::String(info.noteCount) + " notes)");
                    }
                    
                    if (isSelected)
                        ImGui::SetItemDefaultFocus();
                }
            }
            ImGui::EndCombo();
        }
        ImGui::SameLine();
        HelpMarkerPlayer("Select which MIDI track to play\nShows track name and note count");
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    // === TIMELINE SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Timeline");
    ImGui::Spacing();
    
    if (totalDuration > 0.0)
    {
        // Playhead slider
        float t = (float) currentPlaybackTime;
        if (ImGui::SliderFloat("Time", &t, 0.0f, (float) totalDuration, "%.2fs"))
        {
            pendingSeekTime.store((double) t);
            juce::Logger::writeToLog("[MIDI Player] Seek requested: " + juce::String(t, 2) + "s");
            onModificationEnded();
        }
        ImGui::SameLine();
        HelpMarkerPlayer("Drag to seek, or click Reset button below");
        
        // Progress bar visualization
        float progress = (float)(currentPlaybackTime / totalDuration);
        ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.6f, 0.7f, 0.8f).Value);
        ImGui::ProgressBar(progress, ImVec2(itemWidth, 0), "");
        ImGui::PopStyleColor();
    }
    
    // Reset button
    if (ImGui::Button("Reset", ImVec2(itemWidth, 0)))
    {
        pendingSeekTime.store(0.0);
        juce::Logger::writeToLog("[MIDI Player] Playback reset to start");
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === QUICK ROUTING SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Quick Routing");
    ImGui::Spacing();
    
    // Connect to Samplers
    if (ImGui::Button("→ Samplers", ImVec2(itemWidth * 0.48f, 0)))
    {
        autoConnectTriggered = true;
    }
    if (ImGui::IsItemHovered())
        ImGui::SetTooltip("Auto-connect each track to a Sample Loader module");
    
    ImGui::SameLine();
    
    // Connect to PolyVCO
    if (ImGui::Button("→ PolyVCO", ImVec2(itemWidth * 0.48f, 0)))
    {
        autoConnectVCOTriggered = true;
    }
    if (ImGui::IsItemHovered())
        ImGui::SetTooltip("Auto-connect to a Polyphonic VCO for synthesis");
    
    // Hybrid mode (full width)
    if (ImGui::Button("→ Hybrid", ImVec2(itemWidth, 0)))
    {
        autoConnectHybridTriggered = true;
    }
    if (ImGui::IsItemHovered())
        ImGui::SetTooltip("Connect to both PolyVCO and Sample Loaders");
    
    // Add visible drop target area when MIDI is loaded (for hot-swapping)
    if (hasMIDIFileLoaded())
    {
        ImGui::Spacing();
        ImGui::Separator();
        
        // Draw a colored button as a visible drop zone for hot-swapping
        ImVec2 swapZoneSize = ImVec2(itemWidth, 50.0f);
        ImGui::PushStyleColor(ImGuiCol_Button, IM_COL32(180, 120, 255, 60));
        ImGui::Button("##dropzone_midi_swap", swapZoneSize);
        ImGui::PopStyleColor();
        
        // Draw text centered on the button
        const char* text = "Drop to Swap MIDI";
        ImVec2 textSize = ImGui::CalcTextSize(text);
        ImVec2 textPos = ImGui::GetItemRectMin();
        textPos.x += (swapZoneSize.x - textSize.x) * 0.5f;
        textPos.y += (swapZoneSize.y - textSize.y) * 0.5f;
        ImGui::GetWindowDrawList()->AddText(textPos, IM_COL32(200, 200, 200, 255), text);
        
        // Make THIS BUTTON the drop target for hot-swapping MIDI files
        if (ImGui::BeginDragDropTarget())
        {
            if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_MIDI_PATH"))
            {
                const char* path = (const char*)payload->Data;
                loadMIDIFile(juce::File(path));
                onModificationEnded();
            }
            ImGui::EndDragDropTarget();
        }
    }
    
    ImGui::PopItemWidth();
}
#endif

void MIDIPlayerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // --- Global Inputs & Outputs (In Parallel) ---
    helpers.drawParallelPins("Speed Mod", 0, "Clock", kClockChannelIndex);
    helpers.drawParallelPins("Pitch Mod", 1, "Num Tracks", kNumTracksChannelIndex);
    helpers.drawParallelPins("Velocity Mod", 2, "Raw Num Tracks", kRawNumTracksChannelIndex);
    helpers.drawParallelPins("Reset Mod", 3, nullptr, 0);
    helpers.drawParallelPins("Loop Mod", 4, nullptr, 0);
    
    // --- Per-Track Outputs (Inputs side will be blank) ---
    int outIndex = 0;
    const int tracksToShow = std::min((int) activeTrackIndices.size(), kMaxTracks);

    for (int t = 0; t < tracksToShow; ++t)
    {
        const int srcTrack = activeTrackIndices[(size_t) t];
        juce::String base = (srcTrack < (int) trackInfos.size() && trackInfos[(size_t) srcTrack].name.isNotEmpty())
            ? trackInfos[(size_t) srcTrack].name : (juce::String("Track ") + juce::String(srcTrack+1));
        
        // Draw each track output on its own line, but on the right side of the node
        helpers.drawParallelPins(nullptr, 0, (base + " Pitch").toRawUTF8(),    outIndex++);
        helpers.drawParallelPins(nullptr, 0, (base + " Gate").toRawUTF8(),     outIndex++);
        helpers.drawParallelPins(nullptr, 0, (base + " Velocity").toRawUTF8(), outIndex++);
        helpers.drawParallelPins(nullptr, 0, (base + " Trigger").toRawUTF8(),  outIndex++);
    }
}

juce::String MIDIPlayerModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Speed Mod";
        case 1: return "Pitch Mod";
        case 2: return "Velocity Mod";
        case 3: return "Reset Mod";
        case 4: return "Loop Mod";
        default: return juce::String("In ") + juce::String(channel + 1);
    }
}

juce::String MIDIPlayerModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == kClockChannelIndex) return "Clock";
    if (channel == kNumTracksChannelIndex) return "Num Tracks";
    if (channel == kRawNumTracksChannelIndex) return "Raw Num Tracks";
    
    // Per-track outputs (Pitch/Gate/Velocity/Trigger)
    const int trackIndex = channel / kOutputsPerTrack;
    const int outputType = channel % kOutputsPerTrack;
    
    if (trackIndex < (int)activeTrackIndices.size())
    {
        const int srcTrack = activeTrackIndices[(size_t)trackIndex];
        juce::String base = (srcTrack < (int)trackInfos.size() && trackInfos[(size_t)srcTrack].name.isNotEmpty())
            ? trackInfos[(size_t)srcTrack].name : (juce::String("Track ") + juce::String(srcTrack+1));
        
        switch (outputType)
        {
            case 0: return base + " Pitch";
            case 1: return base + " Gate";
            case 2: return base + " Velocity";
            case 3: return base + " Trigger";
        }
    }
    
    return "Out " + juce::String(channel + 1);
}

// Parameter bus contract implementation
bool MIDIPlayerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "speed") { outBusIndex = 0; outChannelIndexInBus = 0; return true; }
    if (paramId == "pitch") { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    if (paramId == "velocity") { outBusIndex = 2; outChannelIndexInBus = 0; return true; }
    if (paramId == "reset") { outBusIndex = 3; outChannelIndexInBus = 0; return true; }
    if (paramId == "loop") { outBusIndex = 4; outChannelIndexInBus = 0; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\MIDIPlayerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_audio_basics/juce_audio_basics.h>

class MIDIPlayerModuleProcessor : public ModuleProcessor
{
public:
    // ADD THIS ENUM
    enum class AutoConnectState { None, Samplers, PolyVCO, Hybrid };
    
    static constexpr int kMaxTracks = 24;          // hard cap for output channels
    static constexpr int kOutputsPerTrack = 4;     // Pitch, Gate, Velocity, Trigger
    static constexpr int kClockChannelIndex = kMaxTracks * kOutputsPerTrack;        // 96
    static constexpr int kNumTracksChannelIndex = kClockChannelIndex + 1;           // 97
    static constexpr int kRawNumTracksChannelIndex = kNumTracksChannelIndex + 1;    // 98
    static constexpr int kTotalOutputs = kRawNumTracksChannelIndex + 1;             // 99
    static constexpr const char* SPEED_PARAM = "speed";
    static constexpr const char* PITCH_PARAM = "pitch";
    static constexpr const char* TEMPO_PARAM = "tempo";
    static constexpr const char* TRACK_PARAM = "track";
    static constexpr const char* LOOP_PARAM = "loop";
    static constexpr const char* SPEED_MOD_PARAM = "speed_mod";
    static constexpr const char* PITCH_MOD_PARAM = "pitch_mod";
    static constexpr const char* VELOCITY_MOD_PARAM = "velocity_mod";

    MIDIPlayerModuleProcessor();
    ~MIDIPlayerModuleProcessor() override = default;

    const juce::String getName() const override { return "midi player"; }
    
    // Auto-connect trigger flags
    std::atomic<bool> autoConnectTriggered { false };
    std::atomic<bool> autoConnectVCOTriggered { false };
    std::atomic<bool> autoConnectHybridTriggered { false };

    // ADD THESE TWO LINES
    std::atomic<AutoConnectState> lastAutoConnectState { AutoConnectState::None };
    std::atomic<bool> connectionUpdateRequested { false };

    void prepareToPlay(double sampleRate, int maximumExpectedSamplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

    // UI Methods
    #if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    #endif

    // Pin labeling
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

    // MIDI File Management
    void loadMIDIFile(const juce::File& file);
    bool hasMIDIFileLoaded() const { return midiFile != nullptr && midiFile->getNumTracks() > 0; }
    juce::String getCurrentMIDIFileName() const { return currentMIDIFileName; }
    juce::String getCurrentMIDIFileFullPath() const { return currentMIDIFilePath; }

    // Piano Roll Data Access
    struct NoteData
    {
        double startTime;
        double endTime;
        int noteNumber;
        int velocity;
        int trackIndex;
    };
    
    struct TrackInfo
    {
        juce::String name;
        int noteCount;
        bool hasNotes;
    };
    
    const std::vector<std::vector<NoteData>>& getNotesByTrack() const { return notesByTrack; }
    const std::vector<TrackInfo>& getTrackInfos() const { return trackInfos; }
    const std::vector<int>& getActiveTrackIndices() const { return activeTrackIndices; }
    double getTotalDuration() const { return totalDuration; }
    int getNumTracks() const { return midiFile ? midiFile->getNumTracks() : 0; }
    int getTotalNoteCount() const;

private:
    // Protects cross-thread access to MIDI data structures
    juce::CriticalSection midiDataLock;

    juce::AudioProcessorValueTreeState apvts;
    
    // MIDI File Data
    std::unique_ptr<juce::MidiFile> midiFile;
    juce::String currentMIDIFileName;
    juce::String currentMIDIFilePath;
    
    // --- MODIFIED DATA STRUCTURES ---
    // Replace the single flat vector of notes with a per-track structure
    std::vector<std::vector<NoteData>> notesByTrack;
    std::vector<TrackInfo> trackInfos;
    double totalDuration { 0.0 };
    int numActiveTracks { 0 };
    std::vector<int> activeTrackIndices; // map active output group -> source track index
    
    // Playback State
    double currentPlaybackTime { 0.0 };
    double playbackSpeed { 1.0 };
    int currentTrackIndex { 0 };
    bool isLooping { true };
    
    // --- ADD NEW STATE VARIABLES FOR EFFICIENT SEARCH ---
    std::vector<int> lastNoteIndexHint; // Remembers the last search position for each track
    double previousPlaybackTime { -1.0 }; // Used to detect when playback loops or seeks
    
    // Output Values (legacy single-track summary retained for diagnostics, not routed)
    float pitchCV { 0.0f };
    float gateLevel { 0.0f };
    float velocityLevel { 0.0f };
    bool triggerPulse { false };
    float clockOutput { 0.0f };
    float numTracksOutput { 0.0f };
    std::atomic<double> pendingSeekTime { -1.0 };
    float lastResetCV { 0.0f }; // For reset modulation edge detection
    
    // Parameter Pointers
    std::atomic<float>* speedParam { nullptr };
    std::atomic<float>* pitchParam { nullptr };
    std::atomic<float>* tempoParam { nullptr };
    std::atomic<float>* trackParam { nullptr };
    std::atomic<float>* loopParam { nullptr };
    std::atomic<float>* speedModParam { nullptr };
    std::atomic<float>* pitchModParam { nullptr };
    std::atomic<float>* velocityModParam { nullptr };
    
    // File Chooser
    std::unique_ptr<juce::FileChooser> fileChooser;
    
    // Internal Methods
    void parseMIDIFile();
    void updatePlaybackTime(double deltaTime);
    void generateCVOutputs();
    double noteNumberToCV(int noteNumber) const;
    juce::ValueTree getExtraStateTree() const override
    {
        juce::ValueTree vt ("MIDIPlayerExtra");
        vt.setProperty ("fileName", currentMIDIFileName, nullptr);
        vt.setProperty ("filePath", currentMIDIFilePath, nullptr);
        vt.setProperty ("track", currentTrackIndex, nullptr);
        return vt;
    }
    void setExtraStateTree(const juce::ValueTree& vt) override
    {
        if (! vt.isValid() || ! vt.hasType ("MIDIPlayerExtra")) return;
        currentMIDIFileName = vt.getProperty ("fileName").toString();
        currentMIDIFilePath = vt.getProperty ("filePath").toString();
        currentTrackIndex = (int) vt.getProperty ("track", 0);
        if (currentMIDIFilePath.isNotEmpty())
        {
            juce::File f (currentMIDIFilePath);
            if (f.existsAsFile())
                loadMIDIFile (f);
        }
        if (auto* p = apvts.getParameter(TRACK_PARAM))
        {
            float norm = apvts.getParameterRange(TRACK_PARAM).convertTo0to1((float) currentTrackIndex);
            p->setValueNotifyingHost(norm);
        }
    }
    
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
};


================================================================================
FILE: juce\Source\audio\modules\MIDICVModuleProcessor.cpp
================================================================================


#include "MIDICVModuleProcessor.h"

MIDICVModuleProcessor::MIDICVModuleProcessor()
    : ModuleProcessor(
        juce::AudioProcessor::BusesProperties()
            .withOutput("Main", juce::AudioChannelSet::discreteChannels(6), true)
            .withOutput("Mod", juce::AudioChannelSet::discreteChannels(64), true)
    ),
      dummyApvts(*this, nullptr, "DummyParams", createParameterLayout())
{
    // No parameters needed - this module is purely MIDI->CV conversion
    
    // Initialize last output values for telemetry
    lastOutputValues.resize(6);
    for (auto& val : lastOutputValues)
        val = std::make_unique<std::atomic<float>>(0.0f);
}

void MIDICVModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    // Reset MIDI state
    midiState = MIDIState();
    
    juce::Logger::writeToLog("[MIDI CV] Prepared to play at " + juce::String(sampleRate) + " Hz");
}

void MIDICVModuleProcessor::releaseResources()
{
}

void MIDICVModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    if (buffer.getNumChannels() < 6)
    {
        buffer.clear();
        return;
    }
    
    // --- NEW, MORE DETAILED LOGGING ---
    if (!midiMessages.isEmpty())
    {
        juce::Logger::writeToLog("[MIDI CV] Processing " + juce::String(midiMessages.getNumEvents()) + " incoming MIDI events.");
    }
    // --- END OF NEW LOGGING ---

    for (const auto metadata : midiMessages)
    {
        const auto msg = metadata.getMessage();
        
        // Use getDescription() for a detailed, human-readable log
        juce::Logger::writeToLog("[MIDI CV] Received: " + msg.getDescription());

        if (msg.isNoteOn())
        {
            midiState.currentNote = msg.getNoteNumber();
            midiState.currentVelocity = msg.getVelocity() / 127.0f;
            midiState.gateHigh = true;
        }
        else if (msg.isNoteOff())
        {
            if (msg.getNoteNumber() == midiState.currentNote)
            {
                midiState.gateHigh = false;
            }
        }
        else if (msg.isController())
        {
            if (msg.getControllerNumber() == 1) // Mod Wheel
            {
                midiState.modWheel = msg.getControllerValue() / 127.0f;
            }
        }
        else if (msg.isPitchWheel())
        {
            midiState.pitchBend = (msg.getPitchWheelValue() - 8192) / 8192.0f;
        }
        else if (msg.isAftertouch())
        {
            midiState.aftertouch = msg.getAfterTouchValue() / 127.0f;
        }
    }
    
    // Generate CV outputs for the entire block
    // Channel 0: Pitch CV (1V/octave)
    // Channel 1: Gate (0 or 1)
    // Channel 2: Velocity (0-1)
    // Channel 3: Mod Wheel (0-1)
    // Channel 4: Pitch Bend (-1 to +1)
    // Channel 5: Aftertouch (0-1)
    
    const int numSamples = buffer.getNumSamples();
    
    // Pitch CV
    const float pitchCv = midiState.currentNote >= 0 ? midiNoteToCv(midiState.currentNote) : 0.0f;
    buffer.getWritePointer(0)[0] = pitchCv;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(0)[i] = pitchCv;
    
    // Gate
    const float gateValue = midiState.gateHigh ? 1.0f : 0.0f;
    buffer.getWritePointer(1)[0] = gateValue;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(1)[i] = gateValue;
    
    // Velocity
    buffer.getWritePointer(2)[0] = midiState.currentVelocity;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(2)[i] = midiState.currentVelocity;
    
    // Mod Wheel
    buffer.getWritePointer(3)[0] = midiState.modWheel;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(3)[i] = midiState.modWheel;
    
    // Pitch Bend
    buffer.getWritePointer(4)[0] = midiState.pitchBend;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(4)[i] = midiState.pitchBend;
    
    // Aftertouch
    buffer.getWritePointer(5)[0] = midiState.aftertouch;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(5)[i] = midiState.aftertouch;
    
    // Update telemetry
    if (lastOutputValues.size() >= 6)
    {
        lastOutputValues[0]->store(pitchCv);
        lastOutputValues[1]->store(gateValue);
        lastOutputValues[2]->store(midiState.currentVelocity);
        lastOutputValues[3]->store(midiState.modWheel);
        lastOutputValues[4]->store(midiState.pitchBend);
        lastOutputValues[5]->store(midiState.aftertouch);
    }
}

float MIDICVModuleProcessor::midiNoteToCv(int noteNumber) const
{
    // 1V/octave standard: C4 (MIDI note 60) = 0V
    // Each semitone = 1/12 V
    return (noteNumber - 60) / 12.0f;
}

#if defined(PRESET_CREATOR_UI)

// Helper function for tooltip with help marker
static void HelpMarkerCV(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

void MIDICVModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&)
{
    ImGui::PushItemWidth(itemWidth);
    
    // === MIDI INPUT STATUS ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "MIDI Input Status");
    ImGui::Spacing();
    
    // Get current values from telemetry
    float pitchCV = lastOutputValues.size() > 0 ? lastOutputValues[0]->load() : 0.0f;
    float gateValue = lastOutputValues.size() > 1 ? lastOutputValues[1]->load() : 0.0f;
    float velocity = lastOutputValues.size() > 2 ? lastOutputValues[2]->load() : 0.0f;
    float modWheel = lastOutputValues.size() > 3 ? lastOutputValues[3]->load() : 0.0f;
    float pitchBend = lastOutputValues.size() > 4 ? lastOutputValues[4]->load() : 0.0f;
    float aftertouch = lastOutputValues.size() > 5 ? lastOutputValues[5]->load() : 0.0f;
    
    // Convert pitch CV back to MIDI note for display
    int midiNote = midiState.currentNote;
    bool hasNote = (midiNote >= 0);
    
    // === NOTE DISPLAY ===
    ImGui::Text("Note:");
    ImGui::SameLine();
    if (hasNote)
    {
        // Note name conversion (C4 = 60)
        static const char* noteNames[] = { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B" };
        int octave = (midiNote / 12) - 1;
        const char* noteName = noteNames[midiNote % 12];
        
        ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.2f, 1.0f, 0.5f, 1.0f)); // Bright green
        ImGui::Text("%s%d (#%d)", noteName, octave, midiNote);
        ImGui::PopStyleColor();
    }
    else
    {
        ImGui::TextDisabled("---");
    }
    
    // === GATE INDICATOR ===
    ImGui::Text("Gate:");
    ImGui::SameLine();
    if (gateValue > 0.5f)
    {
        // Animated gate indicator
        float phase = (float)std::fmod(ImGui::GetTime() * 2.0, 1.0);
        float brightness = 0.6f + 0.4f * std::sin(phase * 6.28318f);
        ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f * brightness, 0.3f * brightness, 0.3f * brightness, 1.0f));
        ImGui::Text("ON");
        ImGui::PopStyleColor();
    }
    else
    {
        ImGui::TextDisabled("OFF");
    }
    
    ImGui::Spacing();
    
    // === LIVE VALUE DISPLAYS ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Live Values");
    ImGui::Spacing();
    
    // Velocity with progress bar
    ImGui::Text("Vel");
    ImGui::SameLine();
    ImGui::SetNextItemWidth(100);
    ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.55f, 0.7f, velocity).Value);
    ImGui::ProgressBar(velocity, ImVec2(0, 0), juce::String(velocity, 2).toRawUTF8());
    ImGui::PopStyleColor();
    ImGui::SameLine();
    HelpMarkerCV("MIDI Note Velocity (0-1)");
    
    // Mod Wheel with progress bar
    ImGui::Text("Mod");
    ImGui::SameLine();
    ImGui::SetNextItemWidth(100);
    ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.15f, 0.7f, modWheel).Value);
    ImGui::ProgressBar(modWheel, ImVec2(0, 0), juce::String(modWheel, 2).toRawUTF8());
    ImGui::PopStyleColor();
    ImGui::SameLine();
    HelpMarkerCV("Mod Wheel (CC#1, 0-1)");
    
    // Pitch Bend with centered bar
    ImGui::Text("Bend");
    ImGui::SameLine();
    ImGui::SetNextItemWidth(100);
    float normalizedBend = (pitchBend + 1.0f) / 2.0f; // -1..1 -> 0..1
    ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.0f, 0.7f, std::abs(pitchBend)).Value);
    ImGui::ProgressBar(normalizedBend, ImVec2(0, 0), juce::String(pitchBend, 2).toRawUTF8());
    ImGui::PopStyleColor();
    ImGui::SameLine();
    HelpMarkerCV("Pitch Bend (-1 to +1)");
    
    // Aftertouch with progress bar
    ImGui::Text("AT");
    ImGui::SameLine();
    ImGui::SetNextItemWidth(100);
    ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.85f, 0.7f, aftertouch).Value);
    ImGui::ProgressBar(aftertouch, ImVec2(0, 0), juce::String(aftertouch, 2).toRawUTF8());
    ImGui::PopStyleColor();
    ImGui::SameLine();
    HelpMarkerCV("Channel Aftertouch (0-1)");
    
    ImGui::Spacing();
    
    // === CV OUTPUT INFO ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "CV Output");
    ImGui::Spacing();
    
    ImGui::Text("Pitch CV: %.3f V", pitchCV);
    ImGui::SameLine();
    HelpMarkerCV("1V/octave standard\nC4 (MIDI note 60) = 0V");
    
    ImGui::PopItemWidth();
}

void MIDICVModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioOutputPin("Pitch", 0);
    helpers.drawAudioOutputPin("Gate", 1);
    helpers.drawAudioOutputPin("Velocity", 2);
    helpers.drawAudioOutputPin("Mod Wheel", 3);
    helpers.drawAudioOutputPin("Pitch Bend", 4);
    helpers.drawAudioOutputPin("Aftertouch", 5);
}
#endif

================================================================================
FILE: juce\Source\audio\modules\MIDICVModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <juce_audio_basics/juce_audio_basics.h>

/**
 * @brief MIDI to CV/Gate Converter Module
 * * Converts incoming MIDI messages to CV and Gate signals:
 * - Pitch: MIDI note number converted to 1V/octave standard
 * - Gate: High when note is held, low when released
 * - Velocity: MIDI velocity normalized to 0-1
 * - Mod Wheel: CC#1 normalized to 0-1
 * - Pitch Bend: Pitch bend wheel normalized to -1 to +1
 * - Aftertouch: Channel pressure normalized to 0-1
 * * This module allows MIDI keyboards and controllers to drive the modular synth.
 */
class MIDICVModuleProcessor : public ModuleProcessor
{
public:
    MIDICVModuleProcessor();
    ~MIDICVModuleProcessor() override = default;

    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages) override;
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    const juce::String getName() const override { return "MIDI CV"; }
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return dummyApvts; }

#if defined(PRESET_CREATOR_UI)
    // ADD THESE TWO FUNCTION DECLARATIONS
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    // Current MIDI state
    struct MIDIState
    {
        int currentNote = -1;        // -1 = no note playing
        float currentVelocity = 0.0f;
        float modWheel = 0.0f;
        float pitchBend = 0.0f;      // -1 to +1
        float aftertouch = 0.0f;
        bool gateHigh = false;
    } midiState;

    // Dummy APVTS to satisfy base class requirement
    juce::AudioProcessorValueTreeState dummyApvts;
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout() { return {}; }

    // Convert MIDI note number to CV (1V/octave, where C4 = 60 = 0V)
    float midiNoteToCv(int noteNumber) const;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(MIDICVModuleProcessor)
};

================================================================================
FILE: juce\Source\audio\modules\MixerModuleProcessor.cpp
================================================================================


#include "MixerModuleProcessor.h"

// Corrected constructor with two separate stereo inputs
MixerModuleProcessor::MixerModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("In A", juce::AudioChannelSet::stereo(), true)  // Bus 0
        .withInput ("In B", juce::AudioChannelSet::stereo(), true)  // Bus 1
        .withInput ("Gain Mod", juce::AudioChannelSet::mono(), true)
        .withInput ("Pan Mod", juce::AudioChannelSet::mono(), true)
        .withInput ("X-Fade Mod", juce::AudioChannelSet::mono(), true)
        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "MixerParams", createParameterLayout())
{
    gainParam      = apvts.getRawParameterValue ("gain");
    panParam       = apvts.getRawParameterValue ("pan");
    crossfadeParam = apvts.getRawParameterValue ("crossfade"); // Get the new parameter

    // Initialize value tooltips for the stereo output
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

// Updated parameter layout with the new crossfade slider
juce::AudioProcessorValueTreeState::ParameterLayout MixerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("gain", "Gain", juce::NormalisableRange<float> (-60.0f, 6.0f, 0.01f), 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("pan",  "Pan",  juce::NormalisableRange<float> (-1.0f, 1.0f), 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("crossfade",  "Crossfade",  juce::NormalisableRange<float> (-1.0f, 1.0f), 0.0f)); // A <-> B
    return { p.begin(), p.end() };
}

void MixerModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (sampleRate, samplesPerBlock);
}

// Completely rewritten processBlock for crossfading
void MixerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    auto inA = getBusBuffer(buffer, true, 0);
    auto inB = getBusBuffer(buffer, true, 1);
    auto out = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    const int numChannels = out.getNumChannels();

    // Read CV from input buses (if connected)
    float gainModCV = 0.0f;
    float panModCV = 0.0f;
    float crossfadeModCV = 0.0f;
    
    // Check if gain mod bus is connected and read CV
    if (isParamInputConnected("gain"))
    {
        const auto& gainModBus = getBusBuffer(buffer, true, 2);
        if (gainModBus.getNumChannels() > 0)
            gainModCV = gainModBus.getReadPointer(0)[0]; // Read first sample
    }
    
    // Check if pan mod bus is connected and read CV
    if (isParamInputConnected("pan"))
    {
        const auto& panModBus = getBusBuffer(buffer, true, 3);
        if (panModBus.getNumChannels() > 0)
            panModCV = panModBus.getReadPointer(0)[0]; // Read first sample
    }
    
    // Check if crossfade mod bus is connected and read CV
    if (isParamInputConnected("x-fade"))
    {
        const auto& crossfadeModBus = getBusBuffer(buffer, true, 4);
        if (crossfadeModBus.getNumChannels() > 0)
            crossfadeModCV = crossfadeModBus.getReadPointer(0)[0]; // Read first sample
    }

    // Apply modulation or use parameter values
    float crossfade = 0.0f;
    if (isParamInputConnected("x-fade"))
    {
        // Map CV [0,1] to crossfade [-1, 1]
        crossfade = -1.0f + crossfadeModCV * (1.0f - (-1.0f));
    }
    else
    {
        crossfade = crossfadeParam != nullptr ? crossfadeParam->load() : 0.0f;
    }

    // Use a constant power law for a smooth crossfade without volume dips
    const float mixAngle = (crossfade * 0.5f + 0.5f) * juce::MathConstants<float>::halfPi;
    const float gainA = std::cos(mixAngle);
    const float gainB = std::sin(mixAngle);

    // Perform the crossfade into the output buffer
    for (int ch = 0; ch < numChannels; ++ch)
    {
        const float* srcA = (ch < inA.getNumChannels()) ? inA.getReadPointer(ch) : nullptr;
        const float* srcB = (ch < inB.getNumChannels()) ? inB.getReadPointer(ch) : nullptr;
        float* dst = out.getWritePointer(ch);
        
        for (int i = 0; i < numSamples; ++i)
        {
            const float a = srcA ? srcA[i] : 0.0f;
            const float b = srcB ? srcB[i] : 0.0f;
            dst[i] = a * gainA + b * gainB;
        }
    }

    // Now, apply the master gain and pan to the mixed signal in the output buffer
    float masterGain = 0.0f;
    if (isParamInputConnected("gain"))
    {
        // Map CV [0,1] to gain [-60, 6] dB
        float gainDb = -60.0f + gainModCV * (6.0f - (-60.0f));
        masterGain = juce::Decibels::decibelsToGain(gainDb);
    }
    else
    {
        masterGain = juce::Decibels::decibelsToGain(gainParam != nullptr ? gainParam->load() : 0.0f);
    }
    
    float pan = 0.0f;
    if (isParamInputConnected("pan"))
    {
        // Map CV [0,1] to pan [-1, 1]
        pan = -1.0f + panModCV * (1.0f - (-1.0f));
    }
    else
    {
        pan = panParam != nullptr ? panParam->load() : 0.0f;
    }
    const float panAngleMaster = (pan * 0.5f + 0.5f) * juce::MathConstants<float>::halfPi;
    const float lGain = masterGain * std::cos(panAngleMaster);
    const float rGain = masterGain * std::sin(panAngleMaster);

    out.applyGain(0, 0, numSamples, lGain);
    if (numChannels > 1)
        out.applyGain(1, 0, numSamples, rGain);

    // Store live modulated values for UI display
    setLiveParamValue("crossfade_live", crossfade);
    setLiveParamValue("gain_live", isParamInputConnected("gain") ? (-60.0f + gainModCV * 66.0f) : (gainParam != nullptr ? gainParam->load() : 0.0f));
    setLiveParamValue("pan_live", pan);

    // Update tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(out.getSample(0, numSamples - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(out.getSample(1, numSamples - 1));
    }
}

// Updated UI drawing code
#if defined(PRESET_CREATOR_UI)
void MixerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float gainDb = gainParam != nullptr ? gainParam->load() : 0.0f;
    float pan = panParam != nullptr ? panParam->load() : 0.0f;
    float crossfade = crossfadeParam != nullptr ? crossfadeParam->load() : 0.0f;

    ImGui::PushItemWidth (itemWidth);

    // New Crossfade Slider
    bool isXfModulated = isParamModulated("x-fade");
    if (isXfModulated) {
        crossfade = getLiveParamValueFor("x-fade", "crossfade_live", crossfade);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("A <-> B", &crossfade, -1.0f, 1.0f)) if (!isXfModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("crossfade"))) *p = crossfade;
    if (!isXfModulated) adjustParamOnWheel (ap.getParameter ("crossfade"), "crossfade", crossfade);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isXfModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }


    // Existing Gain and Pan Sliders
    bool isGainModulated = isParamModulated("gain");
    if (isGainModulated) {
        gainDb = getLiveParamValueFor("gain", "gain_live", gainDb);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Gain dB", &gainDb, -60.0f, 6.0f)) if (!isGainModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gain"))) *p = gainDb;
    if (!isGainModulated) adjustParamOnWheel (ap.getParameter ("gain"), "gainDb", gainDb);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isGainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    bool isPanModulated = isParamModulated("pan");
    if (isPanModulated) {
        pan = getLiveParamValueFor("pan", "pan_live", pan);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Pan", &pan, -1.0f, 1.0f)) if (!isPanModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("pan")))  *p = pan;
    if (!isPanModulated) adjustParamOnWheel (ap.getParameter ("pan"), "pan", pan);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isPanModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}
#endif

void MixerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In A L", 0);
    helpers.drawAudioInputPin("In A R", 1);
    helpers.drawAudioInputPin("In B L", 2);
    helpers.drawAudioInputPin("In B R", 3);

    int busIdx, chanInBus;
    if (getParamRouting("gain", busIdx, chanInBus))
        helpers.drawAudioInputPin("Gain Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("pan", busIdx, chanInBus))
        helpers.drawAudioInputPin("Pan Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("crossfade", busIdx, chanInBus))
        helpers.drawAudioInputPin("X-Fade Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}

bool MixerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outChannelIndexInBus = 0;
    if (paramId == "gain")      { outBusIndex = 2; return true; }
    if (paramId == "pan")       { outBusIndex = 3; return true; }
    if (paramId == "crossfade" || paramId == "x-fade") { outBusIndex = 4; return true; }
    return false;
}

================================================================================
FILE: juce\Source\audio\modules\MixerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class MixerModuleProcessor : public ModuleProcessor
{
public:
    MixerModuleProcessor();
    ~MixerModuleProcessor() override = default;

    const juce::String getName() const override { return "mixer"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In A L";
            case 1: return "In A R";
            case 2: return "In B L";
            case 3: return "In B R";
            case 4: return "Gain Mod";
            case 5: return "Pan Mod";
            case 6: return "X-Fade Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
    
    // Parameter bus contract implementation

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* gainParam { nullptr };       // dB
    std::atomic<float>* panParam { nullptr };        // -1..1
    std::atomic<float>* crossfadeParam { nullptr };  // <<< ADD THIS LINE
};

================================================================================
FILE: juce\Source\audio\modules\ModuleProcessor.cpp
================================================================================


#include "ModuleProcessor.h"
#include "../graph/ModularSynthProcessor.h"
#include <unordered_set>


bool ModuleProcessor::getParamRouting(const juce::String& /*paramId*/, int& /*outBusIndex*/, int& /*outChannelIndexInBus*/) const
{
    return false;
}

bool ModuleProcessor::isParamInputConnected(const juce::String& paramId) const
{
    auto* synth = parentSynth;
    if (synth == nullptr)
        return false;

    juce::uint32 myLogicalId = storedLogicalId;
    if (myLogicalId == 0)
    {
        for (const auto& info : synth->getModulesInfo())
        {
            if (synth->getModuleForLogical (info.first) == this)
            {
                myLogicalId = info.first;
                break;
            }
        }
        if (myLogicalId == 0)
            return false;
    }

    int busIndex = -1;
    int chanInBus = -1;
    if (!getParamRouting(paramId, busIndex, chanInBus))
        return false;

    int absoluteChannel = chanInBus;
    if (busIndex > 0)
    {
        int sum = 0;
        const int numInputBuses = getBusCount(true);
        for (int b = 0; b < numInputBuses && b < busIndex; ++b)
            sum += getChannelCountOfBus(true, b);
        absoluteChannel = sum + chanInBus;
    }

    for (const auto& c : synth->getConnectionsInfo())
        if (c.dstLogicalId == myLogicalId && c.dstChan == absoluteChannel)
            return true;

    // Fallback: if stored logicalId yields no match, re-resolve by pointer and retry once.
    {
        juce::uint32 ptrResolvedId = 0;
        for (const auto& info : synth->getModulesInfo())
        {
            if (synth->getModuleForLogical(info.first) == this)
            {
                ptrResolvedId = info.first;
                break;
            }
        }
        if (ptrResolvedId != 0 && ptrResolvedId != myLogicalId)
        {
            for (const auto& c : synth->getConnectionsInfo())
            {
                if (c.dstLogicalId == ptrResolvedId && c.dstChan == absoluteChannel)
                {
                    const_cast<ModuleProcessor*>(this)->setLogicalId(ptrResolvedId);
                    return true;
                }
            }
        }
    }

    return false;
}


================================================================================
FILE: juce\Source\audio\modules\ModuleProcessor.h
================================================================================


#pragma once

#include <juce_audio_processors/juce_audio_processors.h>
#include <functional> // Required for std::function
#include <vector>
#include <map>
#include <unordered_map>
#include <atomic>

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#include <cmath>
#endif

// <<< TRANSPORT STATE FOR GLOBAL CLOCK >>>
// Transport state struct shared by all modules
struct TransportState {
    bool isPlaying = false;
    double bpm = 120.0;
    double songPositionBeats = 0.0;
    double songPositionSeconds = 0.0;
    // Optional global division broadcast from a master tempo/clock (-1 means inactive)
    int globalDivisionIndex = -1;
};

// <<< ALL PIN-RELATED DEFINITIONS ARE NOW CENTRALIZED HERE >>>

// Defines the data type of a modulation or audio signal
enum class PinDataType { CV, Audio, Gate, Raw };

// Describes a single audio/CV input or output pin
struct AudioPin
{
    juce::String name;
    int channel;
    PinDataType type;
    
    AudioPin(const juce::String& n, int ch, PinDataType t) : name(n), channel(ch), type(t) {}
};

// Renamed to avoid conflict with ImGuiNodeEditorComponent's PinInfo
struct DynamicPinInfo {
    juce::String name;
    int channel;
    PinDataType type;

    // Constructor to allow brace-initialization
    DynamicPinInfo(const juce::String& n, int c, PinDataType t) : name(n), channel(c), type(t) {}
};

// Describes a single modulation input pin targeting a parameter
struct ModPin
{
    juce::String name;
    juce::String paramId;
    PinDataType type;
    
    ModPin(const juce::String& n, const juce::String& p, PinDataType t) : name(n), paramId(p), type(t) {}
};

// A collection of all pins for a given module type
struct ModulePinInfo
{
    std::vector<AudioPin> audioIns;
    std::vector<AudioPin> audioOuts;
    std::vector<ModPin> modIns;
    ModulePinInfo() = default;
    ModulePinInfo(std::initializer_list<AudioPin> ins,
                  std::initializer_list<AudioPin> outs,
                  std::initializer_list<ModPin> mods)
        : audioIns(ins), audioOuts(outs), modIns(mods) {}
};

// Forward declaration for NodePinHelpers
class ModuleProcessor;

// Helper struct passed to modules for drawing their pins
struct NodePinHelpers
{
    std::function<void(const char* label, int channel)> drawAudioInputPin;
    std::function<void(const char* label, int channel)> drawAudioOutputPin;
    std::function<void(const char* inLabel, int inChannel, const char* outLabel, int outChannel)> drawParallelPins;
    std::function<void(ModuleProcessor* module)> drawIoPins;
};

class ModularSynthProcessor; // forward declaration

/**
    An abstract base class for all modular synthesizer components.

    This class enforces a common interface for modules, ensuring they can be
    managed by the ModularSynthProcessor. The key requirement is providing access
    to the module's own parameter state via getAPVTS().
*/
class ModuleProcessor : public juce::AudioProcessor
{
public:
    ModuleProcessor(const BusesProperties& ioLayouts) : juce::AudioProcessor(ioLayouts) {}
    ~ModuleProcessor() override = default;

    // Parent container link (set by ModularSynthProcessor when node is created)
    void setParent(ModularSynthProcessor* parent) { parentSynth = parent; }
    ModularSynthProcessor* getParent() const { return parentSynth; }

    // Pure virtual method that all concrete modules MUST implement.
    // This is crucial for the parameter proxy system.
    virtual juce::AudioProcessorValueTreeState& getAPVTS() = 0;

    // Optional UI hook for drawing parameters inside nodes (used by Preset Creator)
    virtual void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
    {
        juce::ignoreUnused(itemWidth, isParamModulated, onModificationEnded);
    }

    // Optional UI hook for drawing IO pins inside nodes
    virtual void drawIoPins(const NodePinHelpers& /*helpers*/) {}


    // Get the current output value for a channel (for visualization)
    virtual float getOutputChannelValue(int channel) const
    {
        if (juce::isPositiveAndBelow(channel, (int)lastOutputValues.size()) && lastOutputValues[channel])
            return lastOutputValues[channel]->load();
        return 0.0f;
    }
    
    // Helper method to update output telemetry with peak magnitude
    // Call this at the end of processBlock to update visualization values
    void updateOutputTelemetry(const juce::AudioBuffer<float>& buffer)
    {
        const int numChannels = juce::jmin(buffer.getNumChannels(), (int)lastOutputValues.size());
        for (int ch = 0; ch < numChannels; ++ch)
        {
            if (lastOutputValues[ch])
            {
                // Use peak magnitude (max absolute value) for better visualization
                const float peak = buffer.getMagnitude(ch, 0, buffer.getNumSamples());
                lastOutputValues[ch]->store(peak, std::memory_order_relaxed);
            }
        }
    }

    // Standardized labels for module audio I/O channels (override per module if needed)
    virtual juce::String getAudioInputLabel(int channel) const
    {
        return juce::String("In ") + juce::String(channel + 1);
    }

    virtual juce::String getAudioOutputLabel(int channel) const
    {
        return juce::String("Out ") + juce::String(channel + 1);
    }

    // Stable logical ID assigned by ModularSynthProcessor upon node creation.
    void setLogicalId(juce::uint32 id) { storedLogicalId = id; }
    juce::uint32 getLogicalId() const { return storedLogicalId; }

    // === COMPREHENSIVE DIAGNOSTICS SYSTEM ===
    
    // Get detailed connection information for debugging
    virtual juce::String getConnectionDiagnostics() const
    {
        juce::String result = "=== CONNECTION DIAGNOSTICS ===\n";
        
        // Bus layout info
        result += "Input Buses: " + juce::String(getBusCount(true)) + "\n";
        result += "Output Buses: " + juce::String(getBusCount(false)) + "\n";
        
        for (int bus = 0; bus < getBusCount(true); ++bus)
        {
            auto busName = getBus(true, bus)->getName();
            auto numChannels = getBus(true, bus)->getNumberOfChannels();
            result += "  Input Bus " + juce::String(bus) + ": \"" + busName + "\" (" + juce::String(numChannels) + " channels)\n";
        }
        
        for (int bus = 0; bus < getBusCount(false); ++bus)
        {
            auto busName = getBus(false, bus)->getName();
            auto numChannels = getBus(false, bus)->getNumberOfChannels();
            result += "  Output Bus " + juce::String(bus) + ": \"" + busName + "\" (" + juce::String(numChannels) + " channels)\n";
        }
        
        return result;
    }
    
    // Get parameter routing diagnostics
    virtual juce::String getParameterRoutingDiagnostics() const
    {
        juce::String result = "=== PARAMETER ROUTING DIAGNOSTICS ===\n";
        
        // Note: This method is const, so we can't access getAPVTS() directly
        // We'll return a placeholder for now
        result += "Parameter routing diagnostics require non-const access.\n";
        result += "Use getModuleDiagnostics() from ModularSynthProcessor instead.\n";
        
        return result;
    }
    
    // Get live parameter values for debugging
    virtual juce::String getLiveParameterDiagnostics() const
    {
        juce::String result = "=== LIVE PARAMETER VALUES ===\n";
        
        for (const auto& pair : paramLiveValues)
        {
            result += "  " + pair.first + ": " + juce::String(pair.second.load(), 4) + "\n";
        }
        
        return result;
    }
    
    // Get comprehensive module diagnostics
    virtual juce::String getAllDiagnostics() const
    {
        juce::String result = "=== MODULE DIAGNOSTICS ===\n";
        result += "Module Type: " + getName() + "\n\n";
        result += getConnectionDiagnostics() + "\n";
        result += getParameterRoutingDiagnostics() + "\n";
        result += getLiveParameterDiagnostics();
        return result;
    }


    /**
        Resolves a parameter's string ID to its modulation bus and channel.

        This is a virtual function that each module must override to declare which of its
        parameters can be modulated by an external signal. The function maps parameter IDs
        to their corresponding input bus and channel indices within that bus.

        @param paramId              The string ID of the parameter to query (e.g., "cutoff", "frequency").
        @param outBusIndex          Receives the index of the input bus used for modulation.
        @param outChannelIndexInBus Receives the channel index within that bus.
        @returns                    True if the parameter supports modulation, false otherwise.
        
        @see isParamInputConnected
    */
    virtual bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const;

    /**
        Checks if a parameter's modulation input is connected in the synth graph.

        This is the single, reliable method for a module's audio thread to determine
        if it should use an incoming CV signal instead of its internal parameter value.
        The function internally uses getParamRouting() to resolve the parameter to its
        bus/channel location, then queries the parent synth's connection graph.

        @param paramId The string ID of the parameter to check (e.g., "cutoff", "frequency").
        @returns       True if a cable is connected to this parameter's modulation input.
        
        @see getParamRouting
    */
    bool isParamInputConnected(const juce::String& paramId) const;

    // --- Live telemetry for UI (thread-safe, lock-free) ---
    void setLiveParamValue(const juce::String& paramId, float value)
    {
        auto result = paramLiveValues.try_emplace(paramId, value);
        if (!result.second)
            result.first->second.store(value, std::memory_order_relaxed);
    }

    float getLiveParamValue(const juce::String& paramId, float fallback) const
    {
        // FIX: Only return the "live" (modulated) value if the corresponding
        // modulation input is actually connected. Otherwise, always return the
        // fallback, which is the base parameter's real value.
        if (isParamInputConnected(paramId))
        {
            if (auto it = paramLiveValues.find(paramId); it != paramLiveValues.end())
                return it->second.load(std::memory_order_relaxed);
        }
        return fallback;
    }

    // New helper: decouple the connectivity check (modParamId) from the live value key (liveKey).
    // This allows UI code to ask "is X_mod connected?" while reading the corresponding
    // live telemetry stored under a different key like "X_live".
    float getLiveParamValueFor(const juce::String& modParamId,
                               const juce::String& liveKey,
                               float fallback) const
    {
        if (isParamInputConnected(modParamId))
        {
            if (auto it = paramLiveValues.find(liveKey); it != paramLiveValues.end())
                return it->second.load(std::memory_order_relaxed);
        }
        return fallback;
    }

    // Optional extra state hooks for modules that need to persist non-parameter data
    // Default: return invalid tree / ignore.
    virtual juce::ValueTree getExtraStateTree() const { return {}; }
    virtual void setExtraStateTree(const juce::ValueTree&) {}
    
    // Optional timing info hook for modules that need global clock/transport
    // Default: ignore (modules that don't need timing can skip implementing this)
    virtual void setTimingInfo(const TransportState& state) { juce::ignoreUnused(state); }
    
    // Optional dynamic pin interface for modules with variable I/O (e.g., polyphonic modules)
    // Default: return empty vector (no dynamic pins)
    virtual std::vector<DynamicPinInfo> getDynamicInputPins() const { return {}; }
    virtual std::vector<DynamicPinInfo> getDynamicOutputPins() const { return {}; }

public:
    // OPTION 9: Make public for TTS debugging
    // Live, modulated parameter values for UI feedback
    std::unordered_map<juce::String, std::atomic<float>> paramLiveValues;

protected:
    // Thread-safe storage for last known output values (for tooltips)
    std::vector<std::unique_ptr<std::atomic<float>>> lastOutputValues;

#if defined(PRESET_CREATOR_UI)

    static void adjustParamOnWheel (juce::RangedAudioParameter* parameter,
                                    const juce::String& idOrName,
                                    float displayedValue)
    {
        if (parameter == nullptr) return;
        if (! ImGui::IsItemHovered()) return;
        const float wheel = ImGui::GetIO().MouseWheel;
        if (wheel == 0.0f) return;

        if (auto* pf = dynamic_cast<juce::AudioParameterFloat*>(parameter))
        {
            // No right-click editing here; modules can add InputFloat next to sliders

            const auto& range = pf->range;
            const float span = range.end - range.start;
            const juce::String id = idOrName.toLowerCase();

            float step = span / 200.0f; // default ~0.5% of range
            if (span <= 1.0f) step = 0.01f;
            // Custom: fine tune for sequencer steps
            if (id.contains ("step"))
            {
                step = 0.05f;
            }
            if (id.contains ("hz") || id.contains ("freq") || id.contains ("cutoff") || id.contains ("rate"))
            {
                const float v = std::max (1.0f, std::abs (displayedValue));
                step = std::max (1.0f, std::pow (10.0f, std::floor (std::log10 (v)) - 1.0f));
            }
            else if (id.contains ("ms") || id.contains ("time"))
            {
                const float v = std::max (1.0f, std::abs (displayedValue));
                step = std::max (0.1f, std::pow (10.0f, std::floor (std::log10 (v)) - 1.0f));
            }
            else if (id.contains ("db") || id.contains ("gain"))
            {
                step = 0.5f;
            }
            else if (id.contains ("mix") || id.contains ("depth") || id.contains ("amount") || id.contains ("resonance") || id.contains ("q") || id.contains ("size") || id.contains ("damp") || id.contains ("pan") || id.contains ("threshold"))
            {
                step = 0.01f;
            }

            float newVal = pf->get() + (wheel > 0 ? step : -step);
            newVal = juce::jlimit (range.start, range.end, newVal);
            *pf = newVal;
        }
        else if (auto* pc = dynamic_cast<juce::AudioParameterChoice*>(parameter))
        {
            int idx = pc->getIndex();
            idx += (ImGui::GetIO().MouseWheel > 0 ? 1 : -1);
            idx = juce::jlimit (0, pc->choices.size() - 1, idx);
            *pc = idx;
        }
        else if (auto* pi = dynamic_cast<juce::AudioParameterInt*>(parameter))
        {
            int currentVal = pi->get();
            int newVal = currentVal + (wheel > 0 ? 1 : -1);
            const auto& range = pi->getNormalisableRange();
            newVal = juce::jlimit((int)range.start, (int)range.end, newVal);
            *pi = newVal;
        }
        else if (auto* pb = dynamic_cast<juce::AudioParameterBool*>(parameter))
        {
            // Optional: toggle on strong scroll
            juce::ignoreUnused (pb);
        }
    }

#endif

public:
    //==============================================================================
    // Helper function to convert bus index and channel-in-bus to absolute channel index
    //==============================================================================
    int getChannelIndexInProcessBlockBuffer(bool isInput, int busIndex, int channelIndexInBus) const
    {
        int absoluteChannel = channelIndexInBus;
        if (busIndex > 0)
        {
            int sum = 0;
            const int numBuses = getBusCount(isInput);
            for (int b = 0; b < numBuses && b < busIndex; ++b)
                sum += getChannelCountOfBus(isInput, b);
            absoluteChannel = sum + channelIndexInBus;
        }
        return absoluteChannel;
    }

    //==============================================================================
    // Provide default implementations for the pure virtuals to reduce boilerplate
    // in concrete module classes.
    //==============================================================================
    const juce::String getName() const override { return "Module"; }
    bool acceptsMidi() const override { return false; }
    bool producesMidi() const override { return false; }
    double getTailLengthSeconds() const override { return 0.0; }
    juce::AudioProcessorEditor* createEditor() override { return nullptr; }
    bool hasEditor() const override { return false; }
    int getNumPrograms() override { return 1; }
    int getCurrentProgram() override { return 0; }
    void setCurrentProgram (int) override {}
    const juce::String getProgramName (int) override { return {}; }
    void changeProgramName (int, const juce::String&) override {}
    void getStateInformation (juce::MemoryBlock&) override {}
    void setStateInformation (const void*, int) override {}

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ModuleProcessor)

protected:
    ModularSynthProcessor* parentSynth { nullptr };
    juce::uint32 storedLogicalId { 0 };
};

================================================================================
FILE: juce\Source\audio\modules\MultiBandShaperModuleProcessor.cpp
================================================================================


#include "MultiBandShaperModuleProcessor.h"
#include <cmath>

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#endif

juce::AudioProcessorValueTreeState::ParameterLayout MultiBandShaperModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    // Create a Drive parameter for each band (0 = mute, 100 = max drive)
    for (int i = 0; i < NUM_BANDS; ++i)
    {
        auto paramId = "drive_" + juce::String(i + 1);
        auto paramName = "Drive " + juce::String(i + 1);
        params.push_back(std::make_unique<juce::AudioParameterFloat>(
            paramId, paramName,
            juce::NormalisableRange<float>(0.0f, 100.0f, 0.01f, 0.3f), 1.0f));
    }

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "outputGain", "Output Gain",
        juce::NormalisableRange<float>(-24.0f, 24.0f, 0.1f), 0.0f));

    return { params.begin(), params.end() };
}

MultiBandShaperModuleProcessor::MultiBandShaperModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(2 + NUM_BANDS + 1), true) // 0-1: Audio In, 2-9: Drive Mods, 10: Gain Mod
          .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "MultiBandShaperParams", createParameterLayout())
{
    for (int i = 0; i < NUM_BANDS; ++i)
    {
        driveParams[i] = apvts.getRawParameterValue("drive_" + juce::String(i + 1));
    }
    outputGainParam = apvts.getRawParameterValue("outputGain");

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void MultiBandShaperModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32)samplesPerBlock, 1 }; // Mono spec for each filter

    const float q = 1.41f; // Standard Q value for reasonable band separation

    for (int band = 0; band < NUM_BANDS; ++band)
    {
        for (int ch = 0; ch < 2; ++ch)
        {
            filters[band][ch].prepare(spec);
            filters[band][ch].reset(); // Ensure clean state
            filters[band][ch].coefficients = juce::dsp::IIR::Coefficients<float>::makeBandPass(
                sampleRate, centerFreqs[band], q);
        }
    }
    
    bandBuffer.setSize(2, samplesPerBlock, false, true, true); // Clear and allocate
    sumBuffer.setSize(2, samplesPerBlock, false, true, true); // Clear and allocate
}

void MultiBandShaperModuleProcessor::releaseResources()
{
    // Reset all filters to ensure clean state when stopped
    for (int band = 0; band < NUM_BANDS; ++band)
    {
        for (int ch = 0; ch < 2; ++ch)
        {
            filters[band][ch].reset();
        }
    }
}

void MultiBandShaperModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    sumBuffer.clear();

    for (int band = 0; band < NUM_BANDS; ++band)
    {
        // 1. Filter the original signal to isolate this band
        for (int ch = 0; ch < 2; ++ch)
        {
            bandBuffer.copyFrom(ch, 0, inBus, ch, 0, numSamples);
        }

        // Apply filters per channel
        for (int ch = 0; ch < 2; ++ch)
        {
            float* data = bandBuffer.getWritePointer(ch);
            for (int i = 0; i < numSamples; ++i)
            {
                data[i] = filters[band][ch].processSample(data[i]);
            }
        }

        // 2. Apply waveshaping to the filtered band
        float drive = driveParams[band]->load();
        
        // Check for modulation input from unified input bus (channels 2-9)
        if (isParamInputConnected("drive_" + juce::String(band + 1)))
        {
            int modChannel = 2 + band; // Channels 2-9 are drive mods for bands 0-7
            if (inBus.getNumChannels() > modChannel)
            {
                // Simple 0..1 CV to full drive range mapping (0-100)
                float modValue = inBus.getSample(modChannel, 0);
                drive = juce::jmap(modValue, 0.0f, 1.0f, 0.0f, 100.0f);
            }
        }
        setLiveParamValue("drive_" + juce::String(band + 1) + "_live", drive);

        // Skip processing if drive is zero (band is muted)
        if (drive > 0.001f) // Use a small threshold instead of 0.0f
        {
            // Apply tanh waveshaping
            for (int ch = 0; ch < 2; ++ch)
            {
                float* data = bandBuffer.getWritePointer(ch);
                for (int i = 0; i < numSamples; ++i)
                {
                    data[i] = std::tanh(data[i] * drive);
                }
            }

            // 3. Add the shaped band to the final mix
            sumBuffer.addFrom(0, 0, bandBuffer, 0, 0, numSamples);
            sumBuffer.addFrom(1, 0, bandBuffer, 1, 0, numSamples);
        }
    }

    // 4. Apply output gain and copy to the final output bus
    float gainDb = outputGainParam->load();
    
    // Check for modulation on output gain from unified input bus
    if (isParamInputConnected("outputGain"))
    {
        int gainModChannel = 2 + NUM_BANDS; // Channel 10
        if (inBus.getNumChannels() > gainModChannel)
        {
            float modValue = inBus.getSample(gainModChannel, 0);
            gainDb = juce::jmap(modValue, 0.0f, 1.0f, -24.0f, 24.0f);
        }
    }
    setLiveParamValue("outputGain_live", gainDb);
    
    const float finalGain = juce::Decibels::decibelsToGain(gainDb);
    outBus.copyFrom(0, 0, sumBuffer, 0, 0, numSamples);
    outBus.copyFrom(1, 0, sumBuffer, 1, 0, numSamples);
    outBus.applyGain(finalGain);
    
    if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, numSamples - 1));
    if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, numSamples - 1));
}

bool MultiBandShaperModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId.startsWith("drive_"))
    {
        int bandNum = paramId.getTrailingIntValue(); // e.g., "drive_5" -> 5
        if (bandNum > 0 && bandNum <= NUM_BANDS)
        {
            outChannelIndexInBus = 2 + (bandNum - 1); // Channels 2-9 for drives 1-8
            return true;
        }
    }
    if (paramId == "outputGain")
    {
        outChannelIndexInBus = 2 + NUM_BANDS; // Channel 10 for output gain
        return true;
    }
    return false;
}

juce::String MultiBandShaperModuleProcessor::getAudioInputLabel(int channel) const
{
    // Bus 0: Audio In
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    
    // Bus 1: Mod In (channels are relative to the start of the bus)
    // Absolute channel index = channel - numChannelsInBus0
    int modChannel = channel - 2; // Bus 0 has 2 channels (stereo)
    if (modChannel >= 0 && modChannel < NUM_BANDS)
    {
        return "Drive " + juce::String(modChannel + 1) + " Mod";
    }
    if (modChannel == NUM_BANDS)
    {
        return "Gain Mod";
    }
    
    return {};
}

#if defined(PRESET_CREATOR_UI)
void MultiBandShaperModuleProcessor::drawParametersInNode(
    float itemWidth,
    const std::function<bool(const juce::String&)>& isParamModulated,
    const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    const float centerFreqs[NUM_BANDS] = { 60.0f, 150.0f, 400.0f, 1000.0f, 2400.0f, 5000.0f, 10000.0f, 16000.0f };

    // --- NEW: Vertical Slider Bank Layout ---
    const float sliderWidth = itemWidth / (float)NUM_BANDS * 0.85f;
    const float sliderHeight = 80.0f;

    for (int i = 0; i < NUM_BANDS; ++i)
    {
        if (i > 0) ImGui::SameLine();

        const auto paramId = "drive_" + juce::String(i + 1);
        auto* driveParamPtr = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId));
        if (!driveParamPtr) continue;

        const bool isDriveModulated = isParamInputConnected(paramId); // Use correct isParamInputConnected
        float drive = isDriveModulated ? getLiveParamValueFor(paramId, paramId + "_live", driveParamPtr->get()) : driveParamPtr->get();

        ImGui::PushID(i);
        ImGui::BeginGroup();

        if (isDriveModulated) ImGui::BeginDisabled();
        
        if (ImGui::VSliderFloat("##drive", ImVec2(sliderWidth, sliderHeight), &drive, 0.0f, 100.0f, "", ImGuiSliderFlags_Logarithmic))
        {
            if (!isDriveModulated) *driveParamPtr = drive;
        }
        
        if (!isDriveModulated) adjustParamOnWheel(driveParamPtr, "drive", drive);
        if (ImGui::IsItemDeactivatedAfterEdit() && !isDriveModulated) { onModificationEnded(); }
        if (isDriveModulated) ImGui::EndDisabled();

        // Draw labels below the slider
        ImGui::Text("%.1f", drive);
        ImGui::Text("%dHz", (int)centerFreqs[i]);
        if (isDriveModulated) { ImGui::SameLine(); ImGui::TextUnformatted("(m)"); }

        ImGui::EndGroup();
        ImGui::PopID();
    }


    // Output Gain Slider (remains horizontal)
    auto* gainParamPtr = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outputGain"));
    const bool isGainModulated = isParamInputConnected("outputGain");
    float gain = isGainModulated ? getLiveParamValueFor("outputGain", "outputGain_live", gainParamPtr->get()) : gainParamPtr->get();
    
    if (isGainModulated) ImGui::BeginDisabled();
    
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderFloat("Output (dB)", &gain, -24.0f, 24.0f, "%.1f dB"))
    {
        if (!isGainModulated) *gainParamPtr = gain;
    }
    if (!isGainModulated) adjustParamOnWheel(gainParamPtr, "gain", gain);
    if (ImGui::IsItemDeactivatedAfterEdit() && !isGainModulated) { onModificationEnded(); }
    ImGui::PopItemWidth();
    
    if (isGainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
}

void MultiBandShaperModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
    
    ImGui::Spacing(); // Add a little space before mod inputs

    for (int i = 0; i < NUM_BANDS; ++i)
    {
        auto paramId = "drive_" + juce::String(i + 1);
        int busIdx, chanInBus;
        if (getParamRouting(paramId, busIdx, chanInBus))
        {
            helpers.drawAudioInputPin(("Drive " + juce::String(i + 1) + " Mod").toRawUTF8(), getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        }
    }
    
    // Draw output gain modulation input
    int busIdx, chanInBus;
    if (getParamRouting("outputGain", busIdx, chanInBus))
    {
        helpers.drawAudioInputPin("Gain Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    }
}
#endif



================================================================================
FILE: juce\Source\audio\modules\MultiBandShaperModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class MultiBandShaperModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int NUM_BANDS = 8;

    MultiBandShaperModuleProcessor();
    ~MultiBandShaperModuleProcessor() override = default;

    const juce::String getName() const override { return "8bandshaper"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;

    // A filter for each band (stereo)
    using IIRFilter = juce::dsp::IIR::Filter<float>;
    std::array<std::array<IIRFilter, 2>, NUM_BANDS> filters; // [band][channel]
    
    // A parameter pointer for each band's drive
    std::array<std::atomic<float>*, NUM_BANDS> driveParams;
    std::atomic<float>* outputGainParam { nullptr };

    // Pre-allocated working buffers to avoid real-time memory allocation
    juce::AudioBuffer<float> bandBuffer;
    juce::AudioBuffer<float> sumBuffer;
    
    // Center frequencies for the 8 bands
    static constexpr float centerFreqs[NUM_BANDS] = { 
        60.0f, 150.0f, 400.0f, 1000.0f, 2400.0f, 5000.0f, 10000.0f, 16000.0f 
    };
};



================================================================================
FILE: juce\Source\audio\modules\MultiSequencerModuleProcessor.cpp
================================================================================


#include "MultiSequencerModuleProcessor.h"
#include <iostream>
#include <array>

#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#endif

using APVTS = juce::AudioProcessorValueTreeState;

// This function is a direct copy from the original StepSequencerModuleProcessor.cpp
static juce::NormalisableRange<float> makeRateRange()
{
    juce::NormalisableRange<float> r (0.1f, 20.0f, 0.01f, 0.5f);
    return r;
}

// This function is a direct copy from the original StepSequencerModuleProcessor.cpp
APVTS::ParameterLayout MultiSequencerModuleProcessor::createParameterLayout()
{
	std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps", "Number of Steps", 1, MAX_STEPS, 8));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("rate", "Rate", makeRateRange(), 2.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateLength", "Gate Length", juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateThreshold", "Gate Threshold", juce::NormalisableRange<float> (0.0f, 1.0f, 0.001f), 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("rate_mod", "Rate Mod", 0.0f, 1.0f, 0.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateLength_mod", "Gate Length Mod", 0.0f, 1.0f, 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("numSteps_mod", "Num Steps Mod", 0.0f, 1.0f, 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps_max", "Num Steps Max", 1, MAX_STEPS, MAX_STEPS));
    
    // Transport sync parameters
    params.push_back(std::make_unique<juce::AudioParameterBool>("sync", "Sync to Transport", false));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("rate_division", "Division", 
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3));
    
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        const juce::String pid = "step" + juce::String (i + 1);
        params.push_back (std::make_unique<juce::AudioParameterFloat> (pid, pid, juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
        const juce::String modPid = "step" + juce::String(i + 1) + "_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(modPid, modPid, 0.0f, 1.0f, 0.5f));
        const juce::String trigPid = "step" + juce::String(i + 1) + "_trig";
        params.push_back(std::make_unique<juce::AudioParameterBool>(trigPid, trigPid, false));
        const juce::String trigModPid = "step" + juce::String(i + 1) + "_trig_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(trigModPid, trigModPid, 0.0f, 1.0f, 0.5f));
        const juce::String gatePid = "step" + juce::String(i + 1) + "_gate";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(gatePid, gatePid, 0.0f, 1.0f, 0.8f));
        const juce::String gateModPid = "step" + juce::String(i + 1) + "_gate_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(gateModPid, gateModPid, 0.0f, 1.0f, 0.5f));
	}
	return { params.begin(), params.end() };
}

MultiSequencerModuleProcessor::MultiSequencerModuleProcessor()
    // <<< CHANGE 1: Update the output bus to add per-step outputs
    : ModuleProcessor (BusesProperties()
                           .withInput("Inputs", juce::AudioChannelSet::discreteChannels(2 + 4 + (MAX_STEPS * 3)), true)
                           .withOutput ("Outputs", juce::AudioChannelSet::discreteChannels(6 + (MAX_STEPS * 3)), true)),
      apvts (*this, nullptr, "SeqParams", createParameterLayout())
{
    numStepsParam      = apvts.getRawParameterValue ("numSteps");
    rateParam          = apvts.getRawParameterValue ("rate");
    gateLengthParam    = apvts.getRawParameterValue ("gateLength");
    gateThresholdParam = apvts.getRawParameterValue ("gateThreshold");
    rateModParam       = apvts.getRawParameterValue ("rate_mod");
    gateLengthModParam = apvts.getRawParameterValue ("gateLength_mod");
    numStepsModParam   = apvts.getRawParameterValue ("numSteps_mod");
    stepsModMaxParam   = apvts.getRawParameterValue ("numSteps_max");
    
    pitchParams.resize (MAX_STEPS);
	stepModParams.resize(MAX_STEPS);
	stepTrigParams.resize(MAX_STEPS);
    stepTrigModParams.resize(MAX_STEPS);
    stepGateParams.resize(MAX_STEPS);
	for (int i = 0; i < MAX_STEPS; ++i)
	{
        pitchParams[i] = apvts.getRawParameterValue ("step" + juce::String (i + 1));
		stepModParams[i] = apvts.getRawParameterValue("step" + juce::String(i + 1) + "_mod");
		stepTrigParams[i] = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("step" + juce::String(i + 1) + "_trig"));
        stepTrigModParams[i] = apvts.getRawParameterValue("step" + juce::String(i + 1) + "_trig_mod");
        stepGateParams[i] = apvts.getRawParameterValue("step" + juce::String(i + 1) + "_gate");
	}

    // <<< CHANGE 2: Initialize for all 54 outputs
    for (int i = 0; i < 6 + (MAX_STEPS * 3); ++i)
		lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void MultiSequencerModuleProcessor::prepareToPlay (double newSampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sampleRate = newSampleRate > 0.0 ? newSampleRate : 44100.0;
	phase = 0.0;
}

void MultiSequencerModuleProcessor::setTimingInfo(const TransportState& state)
{
    // Check if the transport has just started playing
    if (state.isPlaying && !wasPlaying)
    {
        // Reset to the beginning when play is pressed
        currentStep.store(0);
        phase = 0.0;
    }
    wasPlaying = state.isPlaying;
    
    m_currentTransport = state;
}

juce::ValueTree MultiSequencerModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("SequencerState");
    vt.setProperty("sync", apvts.getRawParameterValue("sync")->load(), nullptr);
    vt.setProperty("rate_division", apvts.getRawParameterValue("rate_division")->load(), nullptr);
    return vt;
}

void MultiSequencerModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("SequencerState"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync")))
            *p = (bool)vt.getProperty("sync", false);
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division")))
            *p = (int)vt.getProperty("rate_division", 3);
    }
}

void MultiSequencerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    // --- PART 1: The original, working StepSequencer logic for "Live" outputs ---
    juce::ignoreUnused (midi);
    if (rateParam == nullptr || numStepsParam == nullptr || gateLengthParam == nullptr)
    {
        buffer.clear();
        return;
    }

    const int numSamples = buffer.getNumSamples();
    const auto& inputBus = getBusBuffer(buffer, true, 0);
    auto* pitchOut       = buffer.getWritePointer(0);
    auto* gateOut        = buffer.getNumChannels() > 1 ? buffer.getWritePointer(1) : nullptr;
    auto* gateNuancedOut = buffer.getNumChannels() > 2 ? buffer.getWritePointer(2) : nullptr;
    auto* velocityOut    = buffer.getNumChannels() > 3 ? buffer.getWritePointer(3) : nullptr;
    auto* modOut         = buffer.getNumChannels() > 4 ? buffer.getWritePointer(4) : nullptr;
    auto* trigOut        = buffer.getNumChannels() > 5 ? buffer.getWritePointer(5) : nullptr;
    
    const bool isRateMod = isParamInputConnected("rate_mod");
    const bool isGateLenMod = isParamInputConnected("gateLength_mod");
    const bool isStepsMod = isParamInputConnected("numSteps_mod");
    const float* rateCV = isRateMod && inputBus.getNumChannels() > 2 ? inputBus.getReadPointer(2) : nullptr;
    const float* gateLenCV = isGateLenMod && inputBus.getNumChannels() > 3 ? inputBus.getReadPointer(3) : nullptr;
    const float* stepsCV = isStepsMod && inputBus.getNumChannels() > 4 ? inputBus.getReadPointer(4) : nullptr;
    
    const float baseRate = rateParam->load();
    const float baseGate = gateLengthParam->load();
    const int baseSteps = (int) numStepsParam->load();
    const int boundMax = stepsModMaxParam != nullptr ? juce::jlimit (1, MAX_STEPS, (int) stepsModMaxParam->load()) : MAX_STEPS;
    const float gateThreshold = gateThresholdParam != nullptr ? juce::jlimit(0.0f, 1.0f, gateThresholdParam->load()) : 0.5f;

    // --- UI Telemetry Bootstrap (from old StepSequencer) ---
    // Publish per-step live values for ALL steps this block (use first-sample snapshot)
    {
        const int totalCh = inputBus.getNumChannels();
        for (int si = 0; si < MAX_STEPS; ++si)
        {
            // Absolute channel for per-step value mod: 6..21
            const int ch = 6 + si;
            const bool hasCh = totalCh > ch;
            const float base = (pitchParams.size() > (size_t) si && pitchParams[si] != nullptr) ? pitchParams[si]->load() : 0.0f;
            float live = base;
            if (hasCh && isParamInputConnected("step" + juce::String(si + 1) + "_mod"))
            {
                const float cv0 = inputBus.getReadPointer(ch)[0];
                live = juce::jlimit(0.0f, 1.0f, base + (cv0 - 0.5f));
            }
            setLiveParamValue("step_live_" + juce::String(si + 1), live);

            // Per-step gate live values: channels 38..53
            const int gateCh = 38 + si;
            const bool hasGateCh = totalCh > gateCh;
            const float baseGateVal = (stepGateParams.size() > (size_t) si && stepGateParams[si] != nullptr) ? stepGateParams[si]->load() : 0.8f;
            float liveGate = baseGateVal;
            if (hasGateCh && isParamInputConnected("step" + juce::String(si + 1) + "_gate_mod"))
            {
                const float cv0 = inputBus.getReadPointer(gateCh)[0];
                liveGate = juce::jlimit(0.0f, 1.0f, baseGateVal + (cv0 - 0.5f));
            }
            setLiveParamValue("gate_live_" + juce::String(si + 1), liveGate);

            // Per-step trigger live values: channels 22..37
            const int trigCh = 22 + si;
            const bool hasTrigCh = totalCh > trigCh;
            const bool baseTrig = (stepTrigParams.size() > (size_t) si && stepTrigParams[si] != nullptr) ? (bool)(*stepTrigParams[si]) : false;
            bool liveTrig = baseTrig;
            if (hasTrigCh && isParamInputConnected("step" + juce::String(si + 1) + "_trig_mod"))
            {
                const float cv0 = inputBus.getReadPointer(trigCh)[0];
                liveTrig = cv0 > 0.5f;
            }
            setLiveParamValue("trig_live_" + juce::String(si + 1), liveTrig ? 1.0f : 0.0f);
        }
    }

    bool stepAdvanced = false;
    float lastRateLive = baseRate;
    float lastGateLive = baseGate;
    float lastGateThresholdLive = gateThreshold;
    int   lastStepsLive = baseSteps;

	for (int i = 0; i < numSamples; ++i)
	{
        int activeSteps = baseSteps;
        if (isStepsMod && stepsCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, stepsCV[i]);
            const int mapped = 1 + (int) std::round(cv * (MAX_STEPS - 1));
            activeSteps = juce::jlimit(1, boundMax, mapped);
        }
        if (currentStep.load() >= activeSteps)
            currentStep.store(0);
        
        float rate = baseRate;
        if (isRateMod && rateCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            const float modRateHz = 0.01f + cv * (50.0f - 0.01f);
            rate = modRateHz;
        }
        lastRateLive = rate;
        
        float gateLen = baseGate;
        if (isGateLenMod && gateLenCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, gateLenCV[i]);
            gateLen = juce::jlimit(0.0f, 1.0f, cv);
        }
        lastGateLive = gateLen;
        
        float gateThresholdLive = gateThreshold;
        if (isGateLenMod && gateLenCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, gateLenCV[i]);
            gateThresholdLive = juce::jlimit(0.0f, 1.0f, cv);
        }
        lastGateThresholdLive = gateThresholdLive;
        
        // --- Transport Sync Logic ---
        const bool syncEnabled = apvts.getRawParameterValue("sync")->load() > 0.5f;

        if (syncEnabled && m_currentTransport.isPlaying)
        {
            // SYNC MODE: Use the global beat position
            const int divisionIndex = (int)apvts.getRawParameterValue("rate_division")->load();
            static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
            const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];
            
            // Calculate which step we should be on based on song position
            const int totalSteps = juce::jlimit(1, MAX_STEPS, activeSteps);
            const int stepForBeat = static_cast<int>(std::fmod(m_currentTransport.songPositionBeats * beatDivision, totalSteps));

            if (stepForBeat != currentStep.load())
            {
                currentStep.store(stepForBeat);
                stepAdvanced = true;
            }
        }
        else
        {
            // FREE-RUNNING MODE: Use the internal phase clock
            const double phaseInc = (sampleRate > 0.0 ? (double) rate / sampleRate : 0.0);
            phase += phaseInc;
            if (phase >= 1.0)
            {
                phase -= 1.0;
                const int next = (currentStep.load() + 1) % juce::jlimit (1, MAX_STEPS, activeSteps);
                currentStep.store(next);
                stepAdvanced = true;
            }
        }
        lastStepsLive = activeSteps;

        const int currentStepIndex = currentStep.load();
        const float sliderValue = pitchParams[currentStepIndex] != nullptr ? pitchParams[currentStepIndex]->load() : 0.0f;
        
        float rawModValue = 0.5f;
        const auto stepModId = "step" + juce::String(currentStepIndex + 1) + "_mod";
        if (isParamInputConnected(stepModId))
        {
            const int modChannel = 6 + currentStepIndex;
            if (inputBus.getNumChannels() > modChannel)
                rawModValue = inputBus.getReadPointer(modChannel)[i];
        }
        const float modValue = rawModValue - 0.5f;
        const float pitchValue = juce::jlimit (0.0f, 1.0f, sliderValue + modValue);
        
        float stepGateLevel = (stepGateParams[currentStepIndex] != nullptr) ? stepGateParams[currentStepIndex]->load() : 0.8f;
        const auto gateModId = "step" + juce::String(currentStepIndex + 1) + "_gate_mod";
        if (isParamInputConnected(gateModId))
        {
            const int gateModChannel = 38 + currentStepIndex;
            if (inputBus.getNumChannels() > gateModChannel)
            {
                const float cv = inputBus.getReadPointer(gateModChannel)[i];
                stepGateLevel = juce::jlimit(0.0f, 1.0f, stepGateLevel + (cv - 0.5f));
            }
        }

        const bool isGateOn = (stepGateLevel >= gateThresholdLive);
        if (isGateOn && !previousGateOn) {
            gateFadeProgress = 0.0f;
        } else if (!isGateOn && previousGateOn) {
            gateFadeProgress = 0.0f;
        }
        
        const float fadeIncrement = sampleRate > 0.0f ? (1000.0f / GATE_FADE_TIME_MS) / sampleRate : 0.0f;
        gateFadeProgress = juce::jmin(1.0f, gateFadeProgress + fadeIncrement);
        const float fadeMultiplier = isGateOn ? gateFadeProgress : (1.0f - gateFadeProgress);
        
        const float gateBinaryValue = (phase < gateLen) && isGateOn ? fadeMultiplier : 0.0f;
        const float gateNuancedValue = (phase < gateLen) && isGateOn ? (stepGateLevel * fadeMultiplier) : 0.0f;
        previousGateOn = isGateOn;
        
        bool trigActive = (stepTrigParams[currentStepIndex]) ? (bool)(*stepTrigParams[currentStepIndex]) : false;
        const auto trigModId = "step" + juce::String(currentStepIndex + 1) + "_trig_mod";
        if (isParamInputConnected(trigModId))
        {
            const int trigModChannel = 22 + currentStepIndex;
            if (inputBus.getNumChannels() > trigModChannel)
            {
                if (inputBus.getReadPointer(trigModChannel)[i] > 0.5f) trigActive = true;
            }
        }
        
        if (stepAdvanced) {
            pendingTriggerSamples = trigActive ? (int) std::round (0.001 * sampleRate) : 0;
            stepAdvanced = false;
        }

        pitchOut[i] = pitchValue;
        if (gateOut) gateOut[i] = gateBinaryValue;
        if (gateNuancedOut) gateNuancedOut[i] = gateNuancedValue;
        if (velocityOut) velocityOut[i] = 0.85f;
        if (modOut) modOut[i] = 0.0f;
        if (trigOut) {
            trigOut[i] = (pendingTriggerSamples > 0) ? 1.0f : 0.0f;
            if (pendingTriggerSamples > 0) --pendingTriggerSamples;
        }
    }
    setLiveParamValue("rate_live", lastRateLive);
    setLiveParamValue("gateLength_live", lastGateLive);
    setLiveParamValue("gateThreshold_live", lastGateThresholdLive);
    setLiveParamValue("steps_live", (float) lastStepsLive);

    // --- PART 2: NEW Logic to populate the parallel static outputs ---
    auto outBus = getBusBuffer(buffer, false, 0);
    for (int step = 0; step < lastStepsLive; ++step)
    {
        const float baseValue = pitchParams[step] ? pitchParams[step]->load() : 0.0f;
        float liveValue = baseValue;
        const int modChannel = 6 + step;
        if (isParamInputConnected("step" + juce::String(step + 1) + "_mod") && inputBus.getNumChannels() > modChannel) {
            liveValue = juce::jlimit(0.0f, 1.0f, baseValue + (inputBus.getReadPointer(modChannel)[0] - 0.5f));
        }

        const bool baseTrig = stepTrigParams[step] ? (bool)(*stepTrigParams[step]) : false;
        bool liveTrig = baseTrig;
        const int trigModChannel = 22 + step;
        if (isParamInputConnected("step" + juce::String(step + 1) + "_trig_mod") && inputBus.getNumChannels() > trigModChannel) {
            liveTrig = inputBus.getReadPointer(trigModChannel)[0] > 0.5f;
        }

        // --- THE FIX IS HERE ---
        // The trigger is only high if it's enabled AND the playhead is on this step.
        const float trigOutputValue = (liveTrig && step == currentStep.load()) ? 1.0f : 0.0f;

        float gateLevel = stepGateParams[step] ? stepGateParams[step]->load() : 0.8f;
        const int gateModChannel = 38 + step;
        if (isParamInputConnected("step" + juce::String(step + 1) + "_gate_mod") && inputBus.getNumChannels() > gateModChannel) {
             const float cv = inputBus.getReadPointer(gateModChannel)[0];
             gateLevel = juce::jlimit(0.0f, 1.0f, gateLevel + (cv - 0.5f));
        }

        int pitchOutChannel = 7 + step * 3 + 0;
        int gateOutChannel  = 7 + step * 3 + 1;
        int trigOutChannel  = 7 + step * 3 + 2;

        // Fill the buffers with the correct values
        if (pitchOutChannel < outBus.getNumChannels())
            juce::FloatVectorOperations::fill(outBus.getWritePointer(pitchOutChannel), liveValue, numSamples);
            
        if (gateOutChannel < outBus.getNumChannels())
            juce::FloatVectorOperations::fill(outBus.getWritePointer(gateOutChannel), gateLevel, numSamples);

        if (trigOutChannel < outBus.getNumChannels())
            juce::FloatVectorOperations::fill(outBus.getWritePointer(trigOutChannel), trigOutputValue, numSamples);
    }
    
    // --- Write the number of active steps to the Num Steps output pin (channel 6) ---
    if (outBus.getNumChannels() > 6)
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(6), (float)lastStepsLive, numSamples);
    }
    
    if (lastOutputValues.size() >= (size_t)outBus.getNumChannels()) {
        for (int ch = 0; ch < outBus.getNumChannels(); ++ch)
            if (lastOutputValues[ch]) lastOutputValues[ch]->store(outBus.getSample(ch, numSamples - 1));
    }
}


#if defined(PRESET_CREATOR_UI)
// ... The rest of your file (drawParametersInNode, etc.) remains unchanged ...
void MultiSequencerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    // This is the full, working UI code from the original StepSequencer, with buttons added.
    auto& ap = getAPVTS();
    int activeSteps = numStepsParam ? (int)numStepsParam->load() : 8;
    const int boundMaxUi = stepsModMaxParam ? juce::jlimit(1, MAX_STEPS, (int)stepsModMaxParam->load()) : MAX_STEPS;
    const bool stepsAreModulated = isParamInputConnected("numSteps_mod");
    if (stepsAreModulated) {
        activeSteps = juce::jlimit(1, boundMaxUi, (int)std::round(getLiveParamValueFor("numSteps_mod", "steps_live", (float)activeSteps)));
    }
    int displayedSteps = activeSteps;
    if (stepsAreModulated) ImGui::BeginDisabled();
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderInt("Steps", &displayedSteps, 1, boundMaxUi)) {
        if (!stepsAreModulated) if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter("numSteps"))) *p = displayedSteps;
    }
    if (!stepsAreModulated) adjustParamOnWheel(ap.getParameter("numSteps"), "numSteps", (float)displayedSteps);
    if (ImGui::IsItemDeactivatedAfterEdit() && !stepsAreModulated) onModificationEnded();
    ImGui::PopItemWidth();
    if (stepsAreModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    const int shown = juce::jlimit(1, MAX_STEPS, displayedSteps);
    const float sliderW = itemWidth / (float)juce::jmax(8, shown) * 0.8f;
    
    ImGui::PushItemWidth(sliderW);
    for (int i = 0; i < shown; ++i) {
        if (i > 0) ImGui::SameLine();
        float baseValue = (pitchParams[i]) ? pitchParams[i]->load() : 0.5f;
        const auto modPid = "step" + juce::String(i + 1) + "_mod";
        const bool modConnected = isParamInputConnected(modPid);
        float liveValue = getLiveParamValueFor(modPid, "step_live_" + juce::String(i + 1), baseValue);
        float sliderValue = modConnected ? liveValue : baseValue;
        const bool isActive = (i == currentStep.load());
        if (isActive) {
            ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.3f, 0.7f, 1.0f, 1.0f));
            ImGui::PushStyleColor(ImGuiCol_SliderGrab, ImVec4(0.9f, 0.9f, 0.9f, 1.0f));
        }
        ImGui::PushID(i);
        if (modConnected) ImGui::BeginDisabled();
        if (ImGui::VSliderFloat("##s", ImVec2(sliderW, 60.0f), &sliderValue, 0.0f, 1.0f, "")) {
            if (!modConnected) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("step" + juce::String(i + 1)))) *p = sliderValue;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        if (!modConnected) {
            if (ImGui::IsItemHovered()) {
                float wheel = ImGui::GetIO().MouseWheel;
                if (wheel != 0.0f) {
                    if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("step" + juce::String(i + 1)))) *p = juce::jlimit(0.0f, 1.0f, baseValue + (wheel > 0 ? 0.05f : -0.05f));
                }
            }
        }
        if (modConnected) ImGui::EndDisabled();
        if (isActive) ImGui::PopStyleColor(2);
        ImGui::PopID();
    }
	ImGui::PopItemWidth();

	ImGui::PushItemWidth(sliderW);
    ImVec2 gate_sliders_p0 = ImGui::GetCursorScreenPos();
    for (int i = 0; i < shown; ++i) {
		if (i > 0) ImGui::SameLine();
        ImGui::PushID(2000 + i);
        float baseGateValue = (stepGateParams[i]) ? stepGateParams[i]->load() : 0.8f;
        const auto modPid = "step" + juce::String(i + 1) + "_gate_mod";
        const bool modConnected = isParamInputConnected(modPid);
        float sliderValue = modConnected ? getLiveParamValueFor(modPid, "gate_live_" + juce::String(i + 1), baseGateValue) : baseGateValue;
        const bool isActive = (i == currentStep.load());
        if (isActive) ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 0.7f, 0.3f, 1.0f));
        if (modConnected) ImGui::BeginDisabled();
        if (ImGui::VSliderFloat("##g", ImVec2(sliderW, 60.0f), &sliderValue, 0.0f, 1.0f, "")) {
            if (!modConnected && stepGateParams[i]) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("step" + juce::String(i + 1) + "_gate"))) *p = sliderValue;
		}
		if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        if (!modConnected) {
            if (ImGui::IsItemHovered()) {
                float wheel = ImGui::GetIO().MouseWheel;
                if (wheel != 0.0f) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("step" + juce::String(i + 1) + "_gate"))) *p = juce::jlimit(0.0f, 1.0f, sliderValue + (wheel > 0 ? 0.05f : -0.05f));
            }
        }
        if (modConnected) ImGui::EndDisabled();
		if (isActive) ImGui::PopStyleColor();
		ImGui::PopID();
	}
	ImGui::PopItemWidth();
    
    const bool gtIsModulatedForLine = isParamInputConnected("gateLength_mod");
    const float threshold_value = gtIsModulatedForLine ? getLiveParamValueFor("gateLength_mod", "gateThreshold_live", (gateThresholdParam ? gateThresholdParam->load() : 0.5f)) : (gateThresholdParam ? gateThresholdParam->load() : 0.5f);
    const float slider_height = 60.0f;
    const float row_width = (sliderW * shown) + (ImGui::GetStyle().ItemSpacing.x * (shown - 1));
    const float line_y = gate_sliders_p0.y + (1.0f - threshold_value) * slider_height;
    ImGui::GetWindowDrawList()->AddLine(ImVec2(gate_sliders_p0.x, line_y), ImVec2(gate_sliders_p0.x + row_width, line_y), IM_COL32(255, 255, 0, 200), 2.0f);
    
    ImGui::Text("Current Step: %d", currentStep.load() + 1);
    
    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue("sync")->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(ap.getParameter("sync"))) *p = sync;
        onModificationEnded();
    }

    ImGui::PushItemWidth(itemWidth);
    if (sync)
    {
        int division = (int)apvts.getRawParameterValue("rate_division")->load();
        if (ImGui::Combo("Division", &division, "1/32\0""1/16\0""1/8\0""1/4\0""1/2\0""1\0""2\0""4\0""8\0\0"))
        {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("rate_division"))) *p = division;
            onModificationEnded();
        }
    }
    else
    {
        // Rate slider (only shown in free-running mode)
        const bool isRateModulated = isParamInputConnected("rate_mod");
        float rateDisplay = isRateModulated ? getLiveParamValueFor("rate_mod", "rate_live", rateParam->load()) : rateParam->load();
        
        if (isRateModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Rate (Hz)", &rateDisplay, 0.1f, 20.0f, "%.2f")) {
            if (!isRateModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("rate"))) *p = rateDisplay;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        if (!isRateModulated) adjustParamOnWheel(ap.getParameter("rate"), "rate", rateDisplay);
        if (isRateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }
    ImGui::PopItemWidth();
    // --- END SYNC CONTROLS ---

    ImGui::PushItemWidth(itemWidth);

    const bool gtIsModulated = isParamInputConnected("gateLength_mod");
    float gtEff = gtIsModulated ? getLiveParamValueFor("gateLength_mod", "gateThreshold_live", (gateThresholdParam ? gateThresholdParam->load() : 0.5f)) : (gateThresholdParam ? gateThresholdParam->load() : 0.5f);
    if (gtIsModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Gate Threshold", &gtEff, 0.0f, 1.0f)) {
        if (!gtIsModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gateThreshold"))) *p = gtEff;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (!gtIsModulated) adjustParamOnWheel(ap.getParameter("gateThreshold"), "gateThreshold", gtEff);
    if (gtIsModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::PopItemWidth();

    {
        for (int i = 0; i < shown; ++i) {
            if (i > 0) ImGui::SameLine();
            bool baseTrig = (stepTrigParams.size() > (size_t)i && stepTrigParams[i]) ? (bool)(*stepTrigParams[i]) : false;
            const auto trigModId = "step" + juce::String(i + 1) + "_trig_mod";
            const bool trigIsModulated = isParamInputConnected(trigModId);
            bool displayTrig = trigIsModulated ? getLiveParamValueFor(trigModId, "trig_live_" + juce::String(i + 1), baseTrig ? 1.0f : 0.0f) > 0.5f : baseTrig;
            if (trigIsModulated) ImGui::BeginDisabled();
            ImGui::PushID(1000 + i);
            ImGui::SetNextItemWidth(sliderW);
            ImGui::PushItemWidth(sliderW);
            if (ImGui::Checkbox("##trig", &displayTrig) && !trigIsModulated && stepTrigParams[i]) *stepTrigParams[i] = displayTrig;
            ImGui::PopItemWidth();
            float used = ImGui::GetItemRectSize().x;
            if (used < sliderW) { ImGui::SameLine(0.0f, 0.0f); ImGui::Dummy(ImVec2(sliderW - used, 0.0f)); }
            if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
            ImGui::PopID();
            if (trigIsModulated) ImGui::EndDisabled();
        }
    }
    
    // ADDED: Auto-connect buttons
    if (ImGui::Button("Connect to Samplers", ImVec2(itemWidth, 0))) { autoConnectSamplersTriggered = true; }
    if (ImGui::Button("Connect to PolyVCO", ImVec2(itemWidth, 0))) { autoConnectVCOTriggered = true; }
}

void MultiSequencerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    const int boundMaxPins = stepsModMaxParam ? juce::jlimit(1, MAX_STEPS, (int)stepsModMaxParam->load()) : MAX_STEPS;
    int activeSteps = numStepsParam ? (int)numStepsParam->load() : 8;
    if (isParamInputConnected("numSteps_mod")) {
        activeSteps = juce::jlimit(1, boundMaxPins, (int)std::round(getLiveParamValueFor("numSteps_mod", "steps_live", (float)activeSteps)));
    } else {
        activeSteps = juce::jlimit(1, boundMaxPins, activeSteps);
    }
    
    // --- Section 1: Global Inputs & Live Outputs (In Parallel) ---
    helpers.drawParallelPins("Mod In L", 0, "Pitch", 0);
    helpers.drawParallelPins("Mod In R", 1, "Gate", 1);
    helpers.drawParallelPins("Rate Mod", 2, "Gate Nuanced", 2);
    helpers.drawParallelPins("Gate Mod", 3, "Velocity", 3);
    helpers.drawParallelPins("Steps Mod", 4, "Mod", 4);
    
    // This output has no corresponding global input; use nullptr for input
    helpers.drawParallelPins(nullptr, -1, "Trigger", 5);
    
    // Num Steps output (Raw pin type, no corresponding input)
    helpers.drawAudioOutputPin("Num Steps", 6);

    // --- Section 2: Per-Step Inputs & Outputs (In Parallel) ---
    for (int i = 0; i < activeSteps; ++i)
    {
        const juce::String stepStr = " " + juce::String(i + 1);

        // Pitch I/O for this step
        helpers.drawParallelPins(("Step" + stepStr + " Mod").toRawUTF8(), 6 + i, 
                                ("Pitch" + stepStr).toRawUTF8(), 7 + i * 3 + 0);
        
        // Gate I/O for this step
        helpers.drawParallelPins(("Step" + stepStr + " Gate Mod").toRawUTF8(), 38 + i, 
                                ("Gate" + stepStr).toRawUTF8(), 7 + i * 3 + 1);

        // Trigger I/O for this step
        helpers.drawParallelPins(("Step" + stepStr + " Trig Mod").toRawUTF8(), 22 + i, 
                                ("Trig" + stepStr).toRawUTF8(), 7 + i * 3 + 2);
	}
}
#endif

juce::String MultiSequencerModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel) {
        case 0: return "Pitch";
        case 1: return "Gate";
        case 2: return "Gate Nuanced";
        case 3: return "Velocity";
        case 4: return "Mod";
        case 5: return "Trigger";
        case 6: return "Num Steps";
    }
    int stepChannel = channel - 7;
    if (stepChannel >= 0 && stepChannel < MAX_STEPS * 3) {
        int step = (stepChannel / 3) + 1;
        int outputType = stepChannel % 3;
        switch (outputType) {
            case 0: return "Pitch " + juce::String(step);
            case 1: return "Gate " + juce::String(step);
            case 2: return "Trig " + juce::String(step);
        }
    }
	return {};
}

juce::String MultiSequencerModuleProcessor::getAudioInputLabel(int channel) const {
    switch (channel) {
        case 0: return "Mod In L";
        case 1: return "Mod In R";
        case 2: return "Rate Mod";
        case 3: return "Gate Mod";
        case 4: return "Steps Mod";
    }
    if (channel >= 6 && channel < 6 + MAX_STEPS) return "Step " + juce::String(channel - 5) + " Mod";
    if (channel >= 22 && channel < 22 + MAX_STEPS) return "Step " + juce::String(channel - 21) + " Trig Mod";
    if (channel >= 38 && channel < 38 + MAX_STEPS) return "Step " + juce::String(channel - 37) + " Gate Mod";
	return {};
}

bool MultiSequencerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const {
	outBusIndex = 0;
    if (paramId == "rate_mod") { outChannelIndexInBus = 2; return true; }
    if (paramId == "gateLength_mod") { outChannelIndexInBus = 3; return true; }
    if (paramId == "numSteps_mod") { outChannelIndexInBus = 4; return true; }
    if (paramId.startsWith("step") && paramId.endsWith("_mod") && !paramId.endsWith("_trig_mod") && !paramId.endsWith("_gate_mod")) {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false).upToFirstOccurrenceOf("_mod", false, false).getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS) { outChannelIndexInBus = 6 + (stepNum - 1); return true; }
    }
    if (paramId.startsWith("step") && paramId.endsWith("_trig_mod")) {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false).upToFirstOccurrenceOf("_trig_mod", false, false).getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS) { outChannelIndexInBus = 22 + (stepNum - 1); return true; }
    }
    if (paramId.startsWith("step") && paramId.endsWith("_gate_mod")) {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false).upToFirstOccurrenceOf("_gate_mod", false, false).getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS) { outChannelIndexInBus = 38 + (stepNum - 1); return true; }
	}
	return false;
}


================================================================================
FILE: juce\Source\audio\modules\MultiSequencerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class MultiSequencerModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_STEPS = 16;
    MultiSequencerModuleProcessor();
    ~MultiSequencerModuleProcessor() override = default;

    const juce::String getName() const override { return "multi sequencer"; }

    void prepareToPlay (double newSampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // State management for transport settings
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree&) override;

    juce::String getAudioOutputLabel(int channel) const override;
    juce::String getAudioInputLabel(int channel) const override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    std::atomic<bool> autoConnectSamplersTriggered { false };
    std::atomic<bool> autoConnectVCOTriggered { false };

    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

protected:
    void setTimingInfo(const TransportState& state) override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<int> currentStep { 0 };
    double phase { 0.0 };
    double sampleRate { 44100.0 };

    TransportState m_currentTransport;
    bool wasPlaying = false;

    std::atomic<float>* rateParam { nullptr };
    std::atomic<float>* gateLengthParam { nullptr };
    std::atomic<float>* gateThresholdParam { nullptr };
    std::atomic<float>* rateModParam { nullptr };
    std::atomic<float>* gateLengthModParam { nullptr };
    std::atomic<float>* numStepsModParam { nullptr };
    std::atomic<float>* stepsModMaxParam { nullptr };
    std::vector<std::atomic<float>*> pitchParams;
    std::vector<std::atomic<float>*> stepModParams;
    std::vector<juce::AudioParameterBool*> stepTrigParams;
    std::vector<std::atomic<float>*> stepTrigModParams;
    std::vector<std::atomic<float>*> stepGateParams;
    std::atomic<float>* numStepsParam { nullptr };
    int pendingTriggerSamples { 0 };
    bool previousGateOn { false };
    float gateFadeProgress { 0.0f };
    static constexpr float GATE_FADE_TIME_MS = 5.0f;
};

================================================================================
FILE: juce\Source\audio\modules\NoiseModuleProcessor.cpp
================================================================================


#include "NoiseModuleProcessor.h"

// --- Parameter Layout Definition ---
juce::AudioProcessorValueTreeState::ParameterLayout NoiseModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdColour, "Colour", juce::StringArray{ "White", "Pink", "Brown" }, 0));
        
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdLevel, "Level dB", juce::NormalisableRange<float>(-60.0f, 6.0f, 0.1f), -12.0f));

    return { params.begin(), params.end() };
}

// --- Constructor ---
NoiseModuleProcessor::NoiseModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withInput("Modulation", juce::AudioChannelSet::discreteChannels(2), true) // ch0: Level, ch1: Colour
        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "NoiseParams", createParameterLayout())
{
    levelDbParam = apvts.getRawParameterValue(paramIdLevel);
    colourParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter(paramIdColour));

    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

// --- Audio Processing Setup ---
void NoiseModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec{ sampleRate, (juce::uint32)samplesPerBlock, 2 };

    // Pink noise is ~-3dB/octave. A simple 1-pole low-pass can approximate this.
    pinkFilter.coefficients = juce::dsp::IIR::Coefficients<float>::makeFirstOrderLowPass(sampleRate, 1000.0);
    
    // Brown noise is ~-6dB/octave. A stronger low-pass.
    brownFilter.coefficients = juce::dsp::IIR::Coefficients<float>::makeFirstOrderLowPass(sampleRate, 250.0);
    
    pinkFilter.prepare(spec);
    brownFilter.prepare(spec);
    pinkFilter.reset();
    brownFilter.reset();
}

// --- Main Audio Processing Block ---
void NoiseModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto modInBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();

    // --- Get Modulation CVs ---
    // CORRECTED: Use the _mod parameter IDs to check for connections
    const bool isLevelModulated = isParamInputConnected(paramIdLevelMod);
    const bool isColourModulated = isParamInputConnected(paramIdColourMod);

    const float* levelCV = isLevelModulated && modInBus.getNumChannels() > 0 ? modInBus.getReadPointer(0) : nullptr;
    const float* colourCV = isColourModulated && modInBus.getNumChannels() > 1 ? modInBus.getReadPointer(1) : nullptr;

    // --- Get Base Parameter Values ---
    const float baseLevelDb = levelDbParam->load();
    const int baseColour = colourParam->getIndex();

    // --- Per-Sample Processing for Responsive Modulation ---
    for (int i = 0; i < numSamples; ++i)
    {
        // 1. Calculate effective parameter values for this sample
        float effectiveLevelDb = baseLevelDb;
        if (isLevelModulated && levelCV != nullptr) {
            // CV maps 0..1 to the full dB range
            effectiveLevelDb = juce::jmap(levelCV[i], 0.0f, 1.0f, -60.0f, 6.0f);
        }

        int effectiveColour = baseColour;
        if (isColourModulated && colourCV != nullptr) {
            // CV maps 0..1 to the 3 choices
            effectiveColour = static_cast<int>(juce::jlimit(0.0f, 1.0f, colourCV[i]) * 2.99f);
        }

        // 2. Generate raw white noise
        float sample = random.nextFloat() * 2.0f - 1.0f;

        // 3. Filter noise based on effective colour
        switch (effectiveColour)
        {
            case 0: /* White noise, no filter */ break;
            case 1: sample = pinkFilter.processSample(sample); break;
            case 2: sample = brownFilter.processSample(sample); break;
        }

        // 4. Apply gain
        sample *= juce::Decibels::decibelsToGain(effectiveLevelDb);

        // 5. Write to mono output
        outBus.setSample(0, i, sample);

        // 6. Update telemetry for UI (throttled)
        if ((i & 0x3F) == 0) // Every 64 samples
        {
            setLiveParamValue("level_live", effectiveLevelDb);
            setLiveParamValue("colour_live", (float)effectiveColour);
        }
    }

    // --- Update Inspector Values (peak magnitude) ---
    updateOutputTelemetry(buffer);
}

bool NoiseModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation inputs are on the first bus
    
    // CORRECTED: Map the virtual _mod IDs to physical channels
    if (paramId == paramIdLevelMod)  { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdColourMod) { outChannelIndexInBus = 1; return true; }
    
    return false;
}

#if defined(PRESET_CREATOR_UI)
// --- UI Drawing Logic ---

void NoiseModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    // --- Get values for display, checking for modulation ---
    // CORRECTED: Use the _mod parameter IDs to check for modulation
    bool levelIsModulated = isParamModulated(paramIdLevelMod);
    float levelDb = levelIsModulated ? getLiveParamValueFor(paramIdLevelMod, "level_live", levelDbParam->load()) : levelDbParam->load();

    bool colourIsModulated = isParamModulated(paramIdColourMod);
    int colourIndex = colourIsModulated ? (int)getLiveParamValueFor(paramIdColourMod, "colour_live", (float)colourParam->getIndex()) : colourParam->getIndex();

    ImGui::PushItemWidth(itemWidth);

    // --- Colour Dropdown ---
    if (colourIsModulated) ImGui::BeginDisabled();
    if (ImGui::Combo("Colour", &colourIndex, "White\0Pink\0Brown\0\0"))
    {
        if (!colourIsModulated) *colourParam = colourIndex;
    }
    if (ImGui::IsItemDeactivatedAfterEdit() && !colourIsModulated) { onModificationEnded(); }
    if (colourIsModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // --- Level Slider ---
    if (levelIsModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Level dB", &levelDb, -60.0f, 6.0f, "%.3f"))
    {
        if (!levelIsModulated) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdLevel)) = levelDb;
    }
    if (ImGui::IsItemDeactivatedAfterEdit() && !levelIsModulated) { onModificationEnded(); }
    if (!levelIsModulated) adjustParamOnWheel(ap.getParameter(paramIdLevel), "level", levelDb);
    if (levelIsModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void NoiseModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Level Mod", 0);
    helpers.drawAudioInputPin("Colour Mod", 1);
    helpers.drawAudioOutputPin("Out", 0);
}

// --- Pin Label and Routing Definitions ---

juce::String NoiseModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Level Mod";
        case 1: return "Colour Mod";
        default: return {};
    }
}

juce::String NoiseModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out";
        default: return {};
    }
}
#endif

================================================================================
FILE: juce\Source\audio\modules\NoiseModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

/**
 * @class NoiseModuleProcessor
 * @brief Generates white, pink, or brown noise with controllable level.
 *
 * This module acts as a sound source, providing different colors of noise. Both the
 * noise color and the output level can be modulated via CV inputs.
 */
class NoiseModuleProcessor : public ModuleProcessor
{
public:
    // Parameter ID constants for APVTS and modulation routing
    static constexpr auto paramIdLevel = "level";
    static constexpr auto paramIdColour = "colour";
    // ADDED: Virtual parameter IDs for modulation inputs
    static constexpr auto paramIdLevelMod = "level_mod";
    static constexpr auto paramIdColourMod = "colour_mod";

    NoiseModuleProcessor();
    ~NoiseModuleProcessor() override = default;

    const juce::String getName() const override { return "noise"; }

    // --- Audio Processing ---
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    // --- Required by ModuleProcessor ---
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // --- Parameter Modulation Routing ---
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    // --- UI Drawing and Pin Definitions ---
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;

    // --- Parameters ---
    std::atomic<float>* levelDbParam{ nullptr };
    juce::AudioParameterChoice* colourParam{ nullptr };

    // --- DSP State ---
    juce::Random random;
    juce::dsp::IIR::Filter<float> pinkFilter;  // Simple filter to approximate pink noise
    juce::dsp::IIR::Filter<float> brownFilter; // Simple filter to approximate brown noise

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(NoiseModuleProcessor)
};

================================================================================
FILE: juce\Source\audio\modules\OutletModuleProcessor.cpp
================================================================================


#include "OutletModuleProcessor.h"

OutletModuleProcessor::OutletModuleProcessor()
    : ModuleProcessor(BusesProperties()
                      .withInput("Input", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "OutletParams", createParameterLayout()),
      customLabel("Outlet")
{
}

juce::AudioProcessorValueTreeState::ParameterLayout OutletModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    
    layout.add(std::make_unique<juce::AudioParameterInt>(
        paramIdChannelCount,
        "Channel Count",
        1, 16, 2
    ));
    
    return layout;
}

void OutletModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate);
    cachedBuffer.setSize(2, samplesPerBlock);
}

void OutletModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // Cache the incoming buffer so the parent MetaModule can read it
    cachedBuffer.makeCopyOf(buffer);
}

juce::ValueTree OutletModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("OutletState");
    vt.setProperty("customLabel", customLabel, nullptr);
    return vt;
}

void OutletModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("OutletState"))
    {
        customLabel = vt.getProperty("customLabel", "Outlet").toString();
    }
}

#if defined(PRESET_CREATOR_UI)
void OutletModuleProcessor::drawParametersInNode(float itemWidth,
                                                 const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                 const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated, onModificationEnded);
    
    auto& ap = getAPVTS();
    
    ImGui::PushItemWidth(itemWidth);
    
    // Label editor
    char labelBuf[64];
    strncpy(labelBuf, customLabel.toRawUTF8(), sizeof(labelBuf) - 1);
    labelBuf[sizeof(labelBuf) - 1] = '\0';
    
    if (ImGui::InputText("Label", labelBuf, sizeof(labelBuf)))
    {
        customLabel = juce::String(labelBuf);
    }
    
    // Channel count
    int channelCount = 2;
    if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
        channelCount = p->get();
    
    if (ImGui::SliderInt("Channels", &channelCount, 1, 16))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
            *p = channelCount;
    }
    
    ImGui::PopItemWidth();
}
#endif



================================================================================
FILE: juce\Source\audio\modules\OutletModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

/**
    OutletModuleProcessor - Acts as a signal outlet for Meta Modules
    
    This module has inputs but no outputs (inside the meta module).
    It collects signals from inside the meta module that should be
    sent to the outside.
    
    From the outside perspective, the MetaModule will have output pins that
    correspond to these Outlet modules inside.
*/
class OutletModuleProcessor : public ModuleProcessor
{
public:
    static constexpr auto paramIdLabel = "label";
    static constexpr auto paramIdChannelCount = "channelCount";
    
    OutletModuleProcessor();
    ~OutletModuleProcessor() override = default;

    const juce::String getName() const override { return "Outlet"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Get the processed buffer to send to the parent MetaModule's output
    const juce::AudioBuffer<float>& getOutputBuffer() const { return cachedBuffer; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth,
                              const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Outlets have inputs but no outputs
        auto& ap = getAPVTS();
        int channelCount = 2;
        if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
            channelCount = p->get();
            
        for (int i = 0; i < channelCount; ++i)
            helpers.drawAudioInputPin(juce::String("In " + juce::String(i + 1)).toRawUTF8(), i);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        return juce::String("In ") + juce::String(channel + 1);
    }
#endif

    // Extra state for label
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::AudioBuffer<float> cachedBuffer;
    juce::String customLabel;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(OutletModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\PerformanceMonitor.h
================================================================================


#pragma once

#include <JuceHeader.h>
#include <atomic>
#include <chrono>

/**
    A lightweight performance monitor for tracking audio thread performance.
    
    This class provides real-time CPU usage monitoring for individual modules
    and can help identify performance bottlenecks during audio processing.
*/
class PerformanceMonitor
{
public:
    PerformanceMonitor(const juce::String& moduleName) : name(moduleName) {}
    
    /**
        Call this at the start of processBlock to begin timing.
    */
    void startTiming()
    {
        startTime = std::chrono::high_resolution_clock::now();
    }
    
    /**
        Call this at the end of processBlock to end timing and update statistics.
        
        @param numSamples The number of samples processed in this block
        @param sampleRate The current sample rate
    */
    void endTiming(int numSamples, double sampleRate)
    {
        auto endTime = std::chrono::high_resolution_clock::now();
        auto duration = std::chrono::duration_cast<std::chrono::microseconds>(endTime - startTime);
        
        // Calculate CPU usage percentage
        double blockTimeMs = (numSamples / sampleRate) * 1000.0;
        double actualTimeMs = duration.count() / 1000.0;
        double cpuUsage = (actualTimeMs / blockTimeMs) * 100.0;
        
        // Update running average
        updateAverage(cpuUsage);
        
        // Check for warnings
        if (cpuUsage > 50.0) // More than 50% CPU
        {
            juce::Logger::writeToLog(juce::String("WARNING: ") + name + " using " + 
                                   juce::String(cpuUsage, 1) + "% CPU");
        }
    }
    
    /**
        Get the current average CPU usage percentage.
    */
    double getAverageCpuUsage() const
    {
        return averageCpuUsage.load();
    }
    
    /**
        Get the module name being monitored.
    */
    const juce::String& getName() const { return name; }
    
    /**
        Reset the performance statistics.
    */
    void reset()
    {
        averageCpuUsage.store(0.0);
        sampleCount.store(0);
    }

private:
    void updateAverage(double newValue)
    {
        auto count = sampleCount.fetch_add(1) + 1;
        auto current = averageCpuUsage.load();
        
        // Simple running average
        double newAverage = (current * (count - 1) + newValue) / count;
        averageCpuUsage.store(newAverage);
    }
    
    const juce::String name;
    std::chrono::high_resolution_clock::time_point startTime;
    std::atomic<double> averageCpuUsage { 0.0 };
    std::atomic<int> sampleCount { 0 };
};

/**
    RAII helper for automatic performance monitoring.
    
    Usage:
    @code
    void SomeModule::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
    {
        PerformanceScope scope(performanceMonitor, buffer.getNumSamples(), getSampleRate());
        
        // ... audio processing code ...
    }
    @endcode
*/
class PerformanceScope
{
public:
    PerformanceScope(PerformanceMonitor& monitor, int numSamples, double sampleRate)
        : performanceMonitor(monitor), samples(numSamples), rate(sampleRate)
    {
        performanceMonitor.startTiming();
    }
    
    ~PerformanceScope()
    {
        performanceMonitor.endTiming(samples, rate);
    }

private:
    PerformanceMonitor& performanceMonitor;
    int samples;
    double rate;
};


================================================================================
FILE: juce\Source\audio\modules\PhaserModuleProcessor.cpp
================================================================================


#include "PhaserModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout PhaserModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRate, "Rate", 0.01f, 10.0f, 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDepth, "Depth", 0.0f, 1.0f, 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdCentreHz, "Centre Freq",
        juce::NormalisableRange<float>(20.0f, 10000.0f, 1.0f, 0.25f), 1000.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdFeedback, "Feedback", -0.95f, 0.95f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMix, "Mix", 0.0f, 1.0f, 0.5f));
    
    return { params.begin(), params.end() };
}

PhaserModuleProcessor::PhaserModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(7), true) // 0-1: Audio In, 2: Rate Mod, 3: Depth Mod, 4: Centre Mod, 5: Feedback Mod, 6: Mix Mod
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "PhaserParams", createParameterLayout())
{
    rateParam = apvts.getRawParameterValue(paramIdRate);
    depthParam = apvts.getRawParameterValue(paramIdDepth);
    centreHzParam = apvts.getRawParameterValue(paramIdCentreHz);
    feedbackParam = apvts.getRawParameterValue(paramIdFeedback);
    mixParam = apvts.getRawParameterValue(paramIdMix);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void PhaserModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2; // Process in stereo

    phaser.prepare(spec);
    phaser.reset();
    
    tempBuffer.setSize(2, samplesPerBlock);
}

void PhaserModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    // Copy dry input to the output buffer to start
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }
    
    const int numChannels = juce::jmin(numInputChannels, numOutputChannels);

    // --- Get Modulation CVs from unified input bus ---
    auto readCv = [&](const juce::String& paramId, int channelIndex) -> float {
        if (isParamInputConnected(paramId) && inBus.getNumChannels() > channelIndex) {
            return inBus.getReadPointer(channelIndex)[0]; // Read first sample
        }
        return -1.0f; // Use a sentinel to indicate no CV
    };

    float rateCv = readCv(paramIdRateMod, 2);
    float depthCv = readCv(paramIdDepthMod, 3);
    float centreCv = readCv(paramIdCentreHzMod, 4);
    float feedbackCv = readCv(paramIdFeedbackMod, 5);
    float mixCv = readCv(paramIdMixMod, 6);

    // --- Update DSP Parameters (once per block) ---
    float finalRate = (rateCv >= 0.0f) ? juce::jmap(rateCv, 0.0f, 1.0f, 0.01f, 10.0f) : rateParam->load();
    float finalDepth = (depthCv >= 0.0f) ? depthCv : depthParam->load();
    float finalCentre = (centreCv >= 0.0f) ? juce::jmap(centreCv, 0.0f, 1.0f, 20.0f, 10000.0f) : centreHzParam->load();
    float finalFeedback = (feedbackCv >= 0.0f) ? juce::jmap(feedbackCv, 0.0f, 1.0f, -0.95f, 0.95f) : feedbackParam->load();
    float finalMix = (mixCv >= 0.0f) ? mixCv : mixParam->load();

    phaser.setRate(finalRate);
    phaser.setDepth(finalDepth);
    phaser.setCentreFrequency(finalCentre);
    phaser.setFeedback(finalFeedback);
    
    // --- Process the Audio with Dry/Wet Mix ---
    // The JUCE Phaser's built-in mix is not ideal for this use case.
    // We'll implement a manual dry/wet mix for better results, like in VoiceProcessor.cpp
    tempBuffer.makeCopyOf(outBus); // Copy the dry signal

    juce::dsp::AudioBlock<float> block(tempBuffer);
    juce::dsp::ProcessContextReplacing<float> context(block);
    phaser.process(context); // Process to get the fully wet signal

    // Manually blend the original dry signal (in outBus) with the wet signal (in tempBuffer)
    for (int ch = 0; ch < numChannels; ++ch)
    {
        outBus.applyGain(ch, 0, buffer.getNumSamples(), 1.0f - finalMix);
        outBus.addFrom(ch, 0, tempBuffer, ch, 0, buffer.getNumSamples(), finalMix);
    }
    
    // --- Update UI Telemetry ---
    setLiveParamValue("rate_live", finalRate);
    setLiveParamValue("depth_live", finalDepth);
    setLiveParamValue("centreHz_live", finalCentre);
    setLiveParamValue("feedback_live", finalFeedback);
    setLiveParamValue("mix_live", finalMix);

    // --- Update Tooltips ---
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool PhaserModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdRateMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdDepthMod) { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdCentreHzMod) { outChannelIndexInBus = 4; return true; }
    if (paramId == paramIdFeedbackMod) { outChannelIndexInBus = 5; return true; }
    if (paramId == paramIdMixMod) { outChannelIndexInBus = 6; return true; }
    return false;
}

juce::String PhaserModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    if (channel == 2) return "Rate Mod";
    if (channel == 3) return "Depth Mod";
    if (channel == 4) return "Centre Mod";
    if (channel == 5) return "Feedback Mod";
    if (channel == 6) return "Mix Mod";
    return {};
}

juce::String PhaserModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void PhaserModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, const juce::String& modId, float min, float max, const char* format, ImGuiSliderFlags flags = 0)
    {
        bool isMod = isParamModulated(modId);
        float value = isMod ? getLiveParamValueFor(modId, paramId + "_live", ap.getRawParameterValue(paramId)->load())
                            : ap.getRawParameterValue(paramId)->load();
        
        if (isMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(label, &value, min, max, format, flags))
            if (!isMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        if (!isMod) adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    };

    drawSlider("Rate", paramIdRate, paramIdRateMod, 0.01f, 10.0f, "%.2f Hz", 0);
    drawSlider("Depth", paramIdDepth, paramIdDepthMod, 0.0f, 1.0f, "%.2f", 0);
    drawSlider("Centre", paramIdCentreHz, paramIdCentreHzMod, 20.0f, 10000.0f, "%.0f Hz", ImGuiSliderFlags_Logarithmic);
    drawSlider("Feedback", paramIdFeedback, paramIdFeedbackMod, -0.95f, 0.95f, "%.2f", 0);
    drawSlider("Mix", paramIdMix, paramIdMixMod, 0.0f, 1.0f, "%.2f", 0);

    ImGui::PopItemWidth();
}

void PhaserModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Rate Mod", 2);
    helpers.drawAudioInputPin("Depth Mod", 3);
    helpers.drawAudioInputPin("Centre Mod", 4);
    helpers.drawAudioInputPin("Feedback Mod", 5);
    helpers.drawAudioInputPin("Mix Mod", 6);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\PhaserModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class PhaserModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdDepth = "depth";
    static constexpr auto paramIdCentreHz = "centreHz";
    static constexpr auto paramIdFeedback = "feedback";
    static constexpr auto paramIdMix = "mix";

    // Virtual IDs for modulation inputs
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdDepthMod = "depth_mod";
    static constexpr auto paramIdCentreHzMod = "centreHz_mod";
    static constexpr auto paramIdFeedbackMod = "feedback_mod";
    static constexpr auto paramIdMixMod = "mix_mod";

    PhaserModuleProcessor();
    ~PhaserModuleProcessor() override = default;

    const juce::String getName() const override { return "phaser"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // The core JUCE DSP phaser object
    juce::dsp::Phaser<float> phaser;

    // A temporary buffer for implementing the dry/wet mix, inspired by VoiceProcessor.cpp
    juce::AudioBuffer<float> tempBuffer;

    // Cached atomic pointers to parameters for real-time access
    std::atomic<float>* rateParam { nullptr };
    std::atomic<float>* depthParam { nullptr };
    std::atomic<float>* centreHzParam { nullptr };
    std::atomic<float>* feedbackParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\PolyVCOModuleProcessor.cpp
================================================================================


#include "PolyVCOModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout PolyVCOModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;

    // The single parameter for controlling the voice count.
    p.push_back(std::make_unique<juce::AudioParameterInt>("numVoices", "Num Voices", 1, MAX_VOICES, 8));

    // Create all 32 potential per-voice parameters up-front.
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        const auto idx = juce::String(i + 1);
        p.push_back(std::make_unique<juce::AudioParameterFloat>("freq_" + idx, "Frequency " + idx,
            juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));
        p.push_back(std::make_unique<juce::AudioParameterChoice>("wave_" + idx, "Waveform " + idx,
            juce::StringArray{ "Sine", "Saw", "Square" }, 0));
        p.push_back(std::make_unique<juce::AudioParameterFloat>("gate_" + idx, "Gate " + idx, 0.0f, 1.0f, 1.0f));
    }
    return { p.begin(), p.end() };
}


PolyVCOModuleProcessor::PolyVCOModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Mod In", juce::AudioChannelSet::discreteChannels(1 + (MAX_VOICES * 3)), true) // 1 for NumVoices + 3 for each voice (Freq, Wave, Gate)
          .withOutput("Out", juce::AudioChannelSet::discreteChannels(MAX_VOICES), true)),
      apvts(*this, nullptr, "PolyVCOParams", createParameterLayout())
{
    numVoicesParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numVoices"));
    
    // RACE CONDITION FIX: Pre-initialize all oscillators for each waveform type
    // This avoids dangerous memory allocations on the audio thread
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        sineOscillators[i].initialise([](float x) { return std::sin(x); }, 128);
        sawOscillators[i].initialise([](float x) { return x / juce::MathConstants<float>::pi; }, 128);
        squareOscillators[i].initialise([](float x) { return x < 0.0f ? -1.0f : 1.0f; }, 128);
        currentWaveforms[i] = -1; // Initialize to invalid state
    }

    voiceFreqParams.resize(MAX_VOICES);
    voiceWaveParams.resize(MAX_VOICES);
    voiceGateParams.resize(MAX_VOICES);
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        const auto idx = juce::String(i + 1);
        voiceFreqParams[i] = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("freq_" + idx));
        voiceWaveParams[i] = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("wave_" + idx));
        voiceGateParams[i] = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("gate_" + idx));
    }
    
    // ADD THIS LINE: Initialize all waveforms to -1 (an invalid state) to force setup on first block
    currentWaveforms.fill(-1);
    
    // Initialize lastOutputValues for cable inspector
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    }
}

void PolyVCOModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32)samplesPerBlock, 1 }; // Mono spec
    
    // Prepare all pre-initialized oscillators
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        sineOscillators[i].prepare(spec);
        sawOscillators[i].prepare(spec);
        squareOscillators[i].prepare(spec);
        smoothedGateLevels[i] = 0.0f;
        gateEnvelope[i] = 0.0f;
        gateOnState[i] = 0;
    }
}

void PolyVCOModuleProcessor::releaseResources()
{
    // Nothing to release for PolyVCO
}

void PolyVCOModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto modInBus = getBusBuffer(buffer, true, 0);
    auto outBus   = getBusBuffer(buffer, false, 0);

    juce::ScopedNoDenormals noDenormals;

    constexpr float GATE_ATTACK_SECONDS = 0.001f;
    constexpr float GATE_RELEASE_SECONDS = 0.002f;
    const float gateAttackCoeff = (float)((1.0 - std::exp(-1.0 / juce::jmax(1.0, getSampleRate() * GATE_ATTACK_SECONDS))));
    const float gateReleaseCoeff = (float)((1.0 - std::exp(-1.0 / juce::jmax(1.0, getSampleRate() * GATE_RELEASE_SECONDS))));

    const bool isNumVoicesModulated = isParamInputConnected("numVoices");
    std::array<bool, MAX_VOICES> freqIsModulated, waveIsModulated, gateIsModulated;
    
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        const juce::String idx = juce::String(i + 1);
        freqIsModulated[i] = isParamInputConnected("freq_" + idx);
        waveIsModulated[i] = isParamInputConnected("wave_" + idx);
        gateIsModulated[i] = isParamInputConnected("gate_" + idx);
    }

    std::array<float, MAX_VOICES> lastFreq {};
    std::array<int,   MAX_VOICES> lastWave {};
    std::array<float, MAX_VOICES> lastGate {};

    int finalActiveVoices = numVoicesParam != nullptr ? numVoicesParam->get() : 1;
    for (int sample = 0; sample < outBus.getNumSamples(); ++sample)
    {
        int activeVoices = numVoicesParam != nullptr ? numVoicesParam->get() : 1;
        if (isNumVoicesModulated)
        {
            const float modValue = modInBus.getReadPointer(0)[sample];
            activeVoices = juce::roundToInt(modValue);
            activeVoices = juce::jlimit(1, MAX_VOICES, activeVoices);
        }
        finalActiveVoices = activeVoices;

        for (int voice = 0; voice < activeVoices; ++voice)
        {
            float freq = voiceFreqParams[voice] != nullptr ? voiceFreqParams[voice]->get() : 440.0f;
            int   waveChoice = voiceWaveParams[voice] != nullptr ? voiceWaveParams[voice]->getIndex() : 0;
            
            float freqModCV = 0.0f; // Default to 0 if not connected/modulated
            if (freqIsModulated[voice])
            {
                int chan = 1 + voice;
                if (chan < modInBus.getNumChannels())
                {
                    freqModCV = modInBus.getReadPointer(chan)[sample];
                    const float cv01 = (freqModCV >= 0.0f && freqModCV <= 1.0f) ? freqModCV : (freqModCV + 1.0f) * 0.5f;
                    constexpr float fMin = 20.0f, fMax = 20000.0f;
                    freq = fMin * std::pow(2.0f, juce::jlimit(0.0f, 1.0f, cv01) * std::log2(fMax / fMin));
                }
            }
            if (waveIsModulated[voice])
            {
                int chan = 1 + MAX_VOICES + voice;
                if (chan < modInBus.getNumChannels())
                    waveChoice = static_cast<int>(juce::jlimit(0.0f, 1.0f, (modInBus.getReadPointer(chan)[sample] + 1.0f) * 0.5f) * 2.99f);
            }
            
            // --- THIS IS THE DEFINITIVE FIX ---
            float finalGateMultiplier = 0.0f;
            if (gateIsModulated[voice])
            {
                // MODE 1: Gate is modulated by an external signal (e.g., ADSR).
                // Use the incoming CV directly as the envelope.
                int chan = 1 + (2 * MAX_VOICES) + voice;
                if (chan < modInBus.getNumChannels())
                {
                    float gateCV = modInBus.getReadPointer(chan)[sample];
                    // Apply light smoothing to the direct CV to prevent clicks.
                    gateEnvelope[voice] += (gateCV - gateEnvelope[voice]) * 0.005f; 
                    finalGateMultiplier = gateEnvelope[voice];
                }
            }
            else
            {
                // MODE 2: Gate is NOT modulated. Use the internal slider as a threshold
                // against the signal from the 'Freq Mod' input.
                float gateThreshold = voiceGateParams[voice] != nullptr ? voiceGateParams[voice]->get() : 0.5f;
                float gateTarget = (freqModCV > gateThreshold) ? 1.0f : 0.0f;
                
                // Use the fast attack/release envelope for a snappy response.
                const float coeff = (gateTarget > gateEnvelope[voice]) ? gateAttackCoeff : gateReleaseCoeff;
                gateEnvelope[voice] += coeff * (gateTarget - gateEnvelope[voice]);
                finalGateMultiplier = gateEnvelope[voice];
            }
            // --- END OF FIX ---

            juce::dsp::Oscillator<float>* currentOscillator = nullptr;
            if (waveChoice == 0)      currentOscillator = &sineOscillators[voice];
            else if (waveChoice == 1) currentOscillator = &sawOscillators[voice];
            else                      currentOscillator = &squareOscillators[voice];

            if (currentWaveforms[voice] != waveChoice)
            {
                currentWaveforms[voice] = waveChoice;
            }

            currentOscillator->setFrequency(freq, false);
            const float sampleValue = currentOscillator->processSample(0.0f);
            
            outBus.setSample(voice, sample, sampleValue * finalGateMultiplier);

            lastFreq[voice] = freq;
            lastWave[voice] = waveChoice;
            lastGate[voice] = finalGateMultiplier; // Store the actual applied gain
        }
        
        for (int voice = activeVoices; voice < MAX_VOICES; ++voice)
        {
            outBus.setSample(voice, sample, 0.0f);
        }
    }

    for (int voice = 0; voice < finalActiveVoices; ++voice)
    {
        const auto idxStr = juce::String(voice + 1);
        setLiveParamValue("freq_" + idxStr + "_live", lastFreq[voice]);
        setLiveParamValue("wave_" + idxStr + "_live", (float) lastWave[voice]);
        setLiveParamValue("gate_" + idxStr + "_live", lastGate[voice]);
    }
    
    // Update lastOutputValues for cable inspector
    if (lastOutputValues.size() >= (size_t)finalActiveVoices)
    {
        for (int voice = 0; voice < finalActiveVoices; ++voice)
        {
            if (lastOutputValues[voice])
            {
                lastOutputValues[voice]->store(outBus.getSample(voice, outBus.getNumSamples() - 1));
            }
        }
    }

    setLiveParamValue("numVoices_live", (float)finalActiveVoices);
}

std::vector<DynamicPinInfo> PolyVCOModuleProcessor::getDynamicInputPins() const
{
    std::vector<DynamicPinInfo> pins;
    const int activeVoices = getEffectiveNumVoices(); // Use the new helper
    
    // Always include the NumVoices modulation input
    pins.push_back({ "NumVoices Mod", 0, PinDataType::Raw });
    
    // Add per-voice modulation inputs for active voices only
    for (int i = 0; i < activeVoices; ++i)
    {
        const juce::String idx = juce::String(i + 1);
        
        // Frequency modulation (channels 1-32)
        pins.push_back({ "Freq " + idx + " Mod", 1 + i, PinDataType::CV });
        
        // Waveform modulation (channels 33-64)
        pins.push_back({ "Wave " + idx + " Mod", 1 + MAX_VOICES + i, PinDataType::CV });
        
        // Gate modulation (channels 65-96)
        pins.push_back({ "Gate " + idx + " Mod", 1 + (2 * MAX_VOICES) + i, PinDataType::Gate });
    }
    return pins;
}

std::vector<DynamicPinInfo> PolyVCOModuleProcessor::getDynamicOutputPins() const
{
    std::vector<DynamicPinInfo> pins;
    const int activeVoices = getEffectiveNumVoices(); // Use the new helper
    pins.reserve((size_t)activeVoices);
    for (int i = 0; i < activeVoices; ++i)
    {
        pins.push_back({ "Voice " + juce::String(i + 1), i, PinDataType::Audio });
    }
    return pins;
}

int PolyVCOModuleProcessor::getEffectiveNumVoices() const
{
    if (isParamInputConnected("numVoices"))
    {
        // If modulated, get the live value from the audio thread.
        return (int)getLiveParamValueFor("numVoices", "numVoices_live", (float)(numVoicesParam ? numVoicesParam->get() : 1));
    }
    
    // Otherwise, return the slider's base value.
    return numVoicesParam ? numVoicesParam->get() : 1;
}

#if defined(PRESET_CREATOR_UI)
void PolyVCOModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                 const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);
    auto& ap = getAPVTS();

    // --- Master Voice Count Control with Live Feedback ---
    const bool isCountModulated = isParamModulated("numVoices");
    int displayedVoices = isCountModulated ? (int)getLiveParamValueFor("numVoices", "numVoices_live", (float)(numVoicesParam != nullptr ? numVoicesParam->get() : 1))
                                           : (numVoicesParam != nullptr ? numVoicesParam->get() : 1);

    if (isCountModulated) ImGui::BeginDisabled();
    if (ImGui::SliderInt("Num Voices", &displayedVoices, 1, MAX_VOICES)) {
        if (!isCountModulated) {
            *numVoicesParam = displayedVoices;
            onModificationEnded();
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit() && !isCountModulated) { onModificationEnded(); }
    if (!isCountModulated) {
        adjustParamOnWheel(ap.getParameter("numVoices"), "numVoices", (float)displayedVoices);
    }
    if (isCountModulated) { 
        ImGui::EndDisabled(); 
        ImGui::SameLine(); 
        ImGui::TextUnformatted("(mod)");
    }

    // --- Per-Voice Controls (rows follow live voice count when modded) ---
    const int activeVoices = juce::jlimit(1, MAX_VOICES,
        (int)(isCountModulated ? getLiveParamValueFor("numVoices", "numVoices_live", (float)getEffectiveNumVoices())
                               : (float)getEffectiveNumVoices()));
    for (int i = 0; i < activeVoices; ++i)
    {
        const auto idx = juce::String(i + 1);
        ImGui::PushID(i);

        // Frequency Slider with live feedback
        const bool isFreqModulated = isParamModulated("freq_" + idx);
        float freq = isFreqModulated ? getLiveParamValueFor("freq_" + idx, "freq_" + idx + "_live", (voiceFreqParams[i] != nullptr ? voiceFreqParams[i]->get() : 440.0f))
                                     : (voiceFreqParams[i] != nullptr ? voiceFreqParams[i]->get() : 440.0f);
        if (isFreqModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(("Freq " + idx).toRawUTF8(), &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic)) {
            if (!isFreqModulated) *voiceFreqParams[i] = freq;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && !isFreqModulated) onModificationEnded();
        if (!isFreqModulated) adjustParamOnWheel(ap.getParameter("freq_" + idx), "freq_" + idx, freq);
        if (isFreqModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Waveform Combo with live feedback
        const bool isWaveModulated = isParamModulated("wave_" + idx);
        int wave = isWaveModulated ? (int)getLiveParamValueFor("wave_" + idx, "wave_" + idx + "_live", (float)(voiceWaveParams[i] != nullptr ? voiceWaveParams[i]->getIndex() : 0))
                                   : (voiceWaveParams[i] != nullptr ? voiceWaveParams[i]->getIndex() : 0);
        if (isWaveModulated) ImGui::BeginDisabled();
        if (ImGui::Combo(("Wave " + idx).toRawUTF8(), &wave, "Sine\0Saw\0Square\0\0")) {
            if (!isWaveModulated) *voiceWaveParams[i] = wave;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && !isWaveModulated) onModificationEnded();
        if (isWaveModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Gate Slider with live feedback
        const bool isGateModulated = isParamModulated("gate_" + idx);
        float gate = isGateModulated ? getLiveParamValueFor("gate_" + idx, "gate_" + idx + "_live", (voiceGateParams[i] != nullptr ? voiceGateParams[i]->get() : 1.0f))
                                     : (voiceGateParams[i] != nullptr ? voiceGateParams[i]->get() : 1.0f);
        if (isGateModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(("Gate " + idx).toRawUTF8(), &gate, 0.0f, 1.0f, "%.2f")) {
            if (!isGateModulated) *voiceGateParams[i] = gate;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && !isGateModulated) onModificationEnded();
        if (!isGateModulated) adjustParamOnWheel(ap.getParameter("gate_" + idx), "gate_" + idx, gate);
        if (isGateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopID();
    }
    ImGui::PopItemWidth();
}
#endif

#if defined(PRESET_CREATOR_UI)
void PolyVCOModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("NumVoices Mod", 0);
    
    const int activeVoices = getEffectiveNumVoices(); // Use the new helper
    for (int i = 0; i < activeVoices; ++i)
    {
        const juce::String idx = juce::String(i + 1);
        
        helpers.drawAudioInputPin(("Freq " + idx).toRawUTF8(), 1 + i);
        helpers.drawAudioInputPin(("Wave " + idx).toRawUTF8(), 1 + MAX_VOICES + i);
        helpers.drawAudioInputPin(("Gate " + idx).toRawUTF8(), 1 + (2 * MAX_VOICES) + i);
        
        helpers.drawAudioOutputPin(("Voice " + idx).toRawUTF8(), i);
    }
}
#endif

juce::String PolyVCOModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "Num Voices Mod";
    
    // Frequency modulation buses (channels 1-32)
    if (channel >= 1 && channel <= MAX_VOICES)
    {
        return "Freq " + juce::String(channel) + " Mod";
    }
    
    // Waveform modulation buses (channels 33-64)
    if (channel >= MAX_VOICES + 1 && channel <= 2 * MAX_VOICES)
    {
        return "Wave " + juce::String(channel - MAX_VOICES) + " Mod";
    }
    
    // Gate modulation buses (channels 65-96)
    if (channel >= 2 * MAX_VOICES + 1 && channel <= 3 * MAX_VOICES)
    {
        return "Gate " + juce::String(channel - 2 * MAX_VOICES) + " Mod";
    }
    
    return juce::String("In ") + juce::String(channel + 1);
}

// Parameter bus contract implementation
#if defined(PRESET_CREATOR_UI)

#endif

bool PolyVCOModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // ALL modulation uses the single input bus at index 0.

    if (paramId == "numVoices") { outChannelIndexInBus = 0; return true; }

    if (paramId.startsWith("freq_"))
    {
        outChannelIndexInBus = paramId.getTrailingIntValue(); // 1 to 32
        return (outChannelIndexInBus > 0 && outChannelIndexInBus <= MAX_VOICES);
    }
    if (paramId.startsWith("wave_"))
    {
        outChannelIndexInBus = MAX_VOICES + paramId.getTrailingIntValue(); // 33 to 64
        return (outChannelIndexInBus > MAX_VOICES && outChannelIndexInBus <= 2 * MAX_VOICES);
    }
    if (paramId.startsWith("gate_"))
    {
        outChannelIndexInBus = (2 * MAX_VOICES) + paramId.getTrailingIntValue(); // 65 to 96
        return (outChannelIndexInBus > 2 * MAX_VOICES && outChannelIndexInBus <= 3 * MAX_VOICES);
    }

    return false;
}


================================================================================
FILE: juce\Source\audio\modules\PolyVCOModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class PolyVCOModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_VOICES = 32;

    PolyVCOModuleProcessor();
    ~PolyVCOModuleProcessor() override = default;

    const juce::String getName() const override { return "polyvco"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    
    // Dynamic pin interface for variable voice count
    std::vector<DynamicPinInfo> getDynamicInputPins() const override;
    std::vector<DynamicPinInfo> getDynamicOutputPins() const override;
    
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    // Parameter bus contract implementation (must be available in Collider too)
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    int getEffectiveNumVoices() const;
    
    juce::String getAudioInputLabel(int channel) const override;

    juce::AudioProcessorValueTreeState apvts;

    // Global control
    juce::AudioParameterInt* numVoicesParam { nullptr };

    // Per-voice parameters
    std::vector<juce::AudioParameterFloat*> voiceFreqParams;
    std::vector<juce::AudioParameterChoice*> voiceWaveParams;
    std::vector<juce::AudioParameterFloat*> voiceGateParams;

    // DSP engines - pre-initialized for each waveform to avoid audio thread allocations
    std::array<juce::dsp::Oscillator<float>, MAX_VOICES> sineOscillators;
    std::array<juce::dsp::Oscillator<float>, MAX_VOICES> sawOscillators;
    std::array<juce::dsp::Oscillator<float>, MAX_VOICES> squareOscillators;
    
    // Track the current waveform for each voice
    std::array<int, MAX_VOICES> currentWaveforms;
    
    // --- ADD GATE SMOOTHING ---
    std::array<float, MAX_VOICES> smoothedGateLevels {};

    // Clickless gate: per-voice envelope and hysteresis state
    std::array<float, MAX_VOICES> gateEnvelope {};
    std::array<uint8_t, MAX_VOICES> gateOnState {}; // 0/1 with hysteresis
};


================================================================================
FILE: juce\Source\audio\modules\QuantizerModuleProcessor.cpp
================================================================================


#include "QuantizerModuleProcessor.h"

QuantizerModuleProcessor::QuantizerModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // 0: Audio In, 1: Scale Mod, 2: Root Mod
                        .withOutput("Out", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "QuantizerParams", createParameterLayout())
{
    scaleParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("scale"));
    rootNoteParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("rootNote"));
    scaleModParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("scale_mod"));
    rootModParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("root_mod"));

    // Define scales as semitone offsets from the root
    scales.push_back({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }); // Chromatic
    scales.push_back({ 0, 2, 4, 5, 7, 9, 11 }); // Major
    scales.push_back({ 0, 2, 3, 5, 7, 8, 10 }); // Natural Minor
    scales.push_back({ 0, 2, 4, 7, 9 }); // Major Pentatonic
    scales.push_back({ 0, 3, 5, 7, 10 }); // Minor Pentatonic
    
    // ADD THIS:
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout QuantizerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterChoice>("scale", "Scale",
        juce::StringArray{ "Chromatic", "Major", "Natural Minor", "Major Pentatonic", "Minor Pentatonic" }, 0));
    p.push_back(std::make_unique<juce::AudioParameterInt>("rootNote", "Root Note", 0, 11, 0)); // 0=C, 1=C#, etc.
    p.push_back(std::make_unique<juce::AudioParameterFloat>("scale_mod", "Scale Mod", 0.0f, 1.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>("root_mod", "Root Mod", 0.0f, 1.0f, 0.0f));
    return { p.begin(), p.end() };
}

void QuantizerModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void QuantizerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto in = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);

    // Read CV from unified input bus (if connected)
    float scaleModCV = 0.0f;
    float rootModCV = 0.0f;
    
    // Check if scale mod is connected and read CV from channel 1
    if (isParamInputConnected("scale_mod") && in.getNumChannels() > 1)
    {
        scaleModCV = in.getReadPointer(1)[0];
    }
    
    // Check if root mod is connected and read CV from channel 2
    if (isParamInputConnected("root_mod") && in.getNumChannels() > 2)
    {
        rootModCV = in.getReadPointer(2)[0];
    }

    // Apply modulation or use parameter values
    float scaleModValue = 0.0f;
    if (isParamInputConnected("scale_mod")) // Scale Mod bus connected
    {
        scaleModValue = scaleModCV;
    }
    else
    {
        scaleModValue = scaleModParam != nullptr ? scaleModParam->get() : 0.0f;
    }
    
    float rootModValue = 0.0f;
    if (isParamInputConnected("root_mod")) // Root Mod bus connected
    {
        rootModValue = rootModCV;
    }
    else
    {
        rootModValue = rootModParam != nullptr ? rootModParam->get() : 0.0f;
    }

    // Calculate final scale index, wrapping around if necessary
    int finalScaleIdx = (scaleParam != nullptr ? scaleParam->getIndex() : 0) + static_cast<int>(scaleModValue * (float)scales.size());
    finalScaleIdx = finalScaleIdx % (int)scales.size();

    // Calculate final root note, wrapping around the 12-semitone octave
    int finalRootNote = (rootNoteParam != nullptr ? rootNoteParam->get() : 0) + static_cast<int>(rootModValue * 12.0f);
    finalRootNote = finalRootNote % 12;

    const auto& currentScale = scales[finalScaleIdx];
    const float rootNote = (float)finalRootNote;

    const float* src = in.getReadPointer(0);
    float* dst = out.getWritePointer(0);
    
    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        const float inputCV = juce::jlimit(0.0f, 1.0f, src[i]);
        
        // Map 0..1 CV to a 5-octave range (60 semitones)
        const float totalSemitones = inputCV * 60.0f;
        const int octave = static_cast<int>(totalSemitones / 12.0f);
        const float noteInOctave = totalSemitones - (octave * 12.0f);
        
        // Find the closest note in the scale
        float closestNote = currentScale[0];
        float minDistance = 12.0f;
        for (float scaleNote : currentScale)
        {
            float distance = std::abs(noteInOctave - scaleNote);
            if (distance < minDistance)
            {
                minDistance = distance;
                closestNote = scaleNote;
            }
        }
        
        // Combine octave, root, and quantized note, then map back to 0..1 CV
        float finalSemitones = (octave * 12.0f) + closestNote + rootNote;
        dst[i] = juce::jlimit(0.0f, 1.0f, finalSemitones / 60.0f);
    }
    
    // Store live modulated values for UI display
    setLiveParamValue("scale_live", static_cast<float>(finalScaleIdx));
    setLiveParamValue("root_live", static_cast<float>(finalRootNote));

    // ADD THIS BLOCK:
    if (!lastOutputValues.empty() && lastOutputValues[0])
    {
        lastOutputValues[0]->store(out.getSample(0, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void QuantizerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    int scale = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("scale"))) scale = p->getIndex();
    int root = 0; if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter("rootNote"))) root = *p;

    const char* scales = "Chromatic\0Major\0Natural Minor\0Major Pentatonic\0Minor Pentatonic\0\0";
    const char* notes = "C\0C#\0D\0D#\0E\0F\0F#\0G\0G#\0A\0A#\0B\0\0";
    
    ImGui::PushItemWidth(itemWidth);

    // Scale Combo Box
    bool isScaleModulated = isParamModulated("scale_mod");
    if (isScaleModulated) {
        scale = static_cast<int>(getLiveParamValueFor("scale_mod", "scale_live", static_cast<float>(scale)));
        ImGui::BeginDisabled();
    }
    if (ImGui::Combo("Scale", &scale, scales)) if (!isScaleModulated) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("scale"))) *p = scale;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isScaleModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Root Note Combo Box
    bool isRootModulated = isParamModulated("root_mod");
    if (isRootModulated) {
        root = static_cast<int>(getLiveParamValueFor("root_mod", "root_live", static_cast<float>(root)));
        ImGui::BeginDisabled();
    }
    if (ImGui::Combo("Root", &root, notes)) if (!isRootModulated) if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter("rootNote"))) *p = root;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isRootModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    ImGui::PopItemWidth();
}
#endif

void QuantizerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In", 0);
    
    int busIdx, chanInBus;
    if (getParamRouting("scale_mod", busIdx, chanInBus))
        helpers.drawAudioInputPin("Scale Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("root_mod", busIdx, chanInBus))
        helpers.drawAudioInputPin("Root Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    
    helpers.drawAudioOutputPin("Out", 0);
}

bool QuantizerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "scale_mod") { outChannelIndexInBus = 1; return true; }
    if (paramId == "root_mod")  { outChannelIndexInBus = 2; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\QuantizerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class QuantizerModuleProcessor : public ModuleProcessor
{
public:
    QuantizerModuleProcessor();
    ~QuantizerModuleProcessor() override = default;

    const juce::String getName() const override { return "quantizer"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In";
            case 1: return "Scale Mod";
            case 2: return "Root Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
    
    // Parameter bus contract implementation

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    
    // Parameter pointers
    juce::AudioParameterChoice* scaleParam { nullptr };
    juce::AudioParameterInt* rootNoteParam { nullptr };
    juce::AudioParameterFloat* scaleModParam { nullptr };
    juce::AudioParameterFloat* rootModParam { nullptr };

    // Scale definitions
    std::vector<std::vector<float>> scales;
};


================================================================================
FILE: juce\Source\audio\modules\RandomModuleProcessor.cpp
================================================================================


#include "RandomModuleProcessor.h"
#include <cmath>

juce::AudioProcessorValueTreeState::ParameterLayout RandomModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdCvMin, "CV Min", 0.0f, 1.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdCvMax, "CV Max", 0.0f, 1.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdNormMin, "Norm Min", 0.0f, 1.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdNormMax, "Norm Max", 0.0f, 1.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMin, "Min", -100.0f, 100.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMax, "Max", -100.0f, 100.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdSlew, "Slew", juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRate, "Rate", juce::NormalisableRange<float>(0.1f, 50.0f, 0.01f, 0.3f), 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdTrigThreshold, "Trig Threshold", 0.0f, 1.0f, 0.5f));
    
    // Transport sync parameters
    params.push_back(std::make_unique<juce::AudioParameterBool>("sync", "Sync to Transport", false));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("rate_division", "Division",
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3));
    
    return { params.begin(), params.end() };
}

RandomModuleProcessor::RandomModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::disabled(), true)
                        .withOutput("Outputs", juce::AudioChannelSet::discreteChannels(5), true)),
      apvts(*this, nullptr, "RandomParams", createParameterLayout())
{
    minParam = apvts.getRawParameterValue(paramIdMin);
    maxParam = apvts.getRawParameterValue(paramIdMax);
    cvMinParam = apvts.getRawParameterValue(paramIdCvMin);
    cvMaxParam = apvts.getRawParameterValue(paramIdCvMax);
    normMinParam = apvts.getRawParameterValue(paramIdNormMin);
    normMaxParam = apvts.getRawParameterValue(paramIdNormMax);
    slewParam = apvts.getRawParameterValue(paramIdSlew);
    rateParam = apvts.getRawParameterValue(paramIdRate);
    trigThresholdParam = apvts.getRawParameterValue(paramIdTrigThreshold);
    for (int i = 0; i < 5; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void RandomModuleProcessor::prepareToPlay(double newSampleRate, int)
{
    sampleRate = newSampleRate;
    phase = 1.0;
    lastScaledBeats = 0.0;
    trigPulseRemaining = 0;
    smoothedSlew.reset(newSampleRate, 0.01);
    smoothedSlew.setCurrentAndTargetValue(slewParam->load());
    // Initialize with a random value
    const float minVal = minParam->load();
    const float maxVal = maxParam->load();
    targetValue = currentValue = minVal + rng.nextFloat() * (maxVal - minVal);
    const float cvMinVal = cvMinParam->load();
    const float cvMaxVal = cvMaxParam->load();
    targetValueCV = currentValueCV = cvMinVal + rng.nextFloat() * (cvMaxVal - cvMinVal);
}

void RandomModuleProcessor::setTimingInfo(const TransportState& state)
{
    m_currentTransport = state;
}

void RandomModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto outBus = getBusBuffer(buffer, false, 0);
    outBus.clear();
    const int numSamples = buffer.getNumSamples();

    const float baseRate = rateParam->load();
    const float baseSlew = slewParam->load();
    const float minVal = minParam->load();
    const float maxVal = maxParam->load();
    const float cvMinVal = cvMinParam->load();
    const float cvMaxVal = cvMaxParam->load();
    const float normMinVal = normMinParam->load();
    const float normMaxVal = normMaxParam->load();
    const float trigThreshold = trigThresholdParam->load();

    // Get sync parameters
    const bool syncEnabled = apvts.getRawParameterValue("sync")->load() > 0.5f;
    const int divisionIndex = (int)apvts.getRawParameterValue("rate_division")->load();
    static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
    const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];

    auto* normOut = outBus.getWritePointer(0);
    auto* rawOut  = outBus.getWritePointer(1);
    auto* cvOut   = outBus.getWritePointer(2);
    auto* boolOut = outBus.getWritePointer(3);
    auto* trigOut = outBus.getWritePointer(4);

    for (int i = 0; i < numSamples; ++i)
    {
        bool triggerNewValue = false;
        if (syncEnabled && m_currentTransport.isPlaying)
        {
            // SYNC MODE
            double beatsNow = m_currentTransport.songPositionBeats + (i / sampleRate / 60.0 * m_currentTransport.bpm);
            double scaledBeats = beatsNow * beatDivision;
            if (static_cast<long long>(scaledBeats) > static_cast<long long>(lastScaledBeats))
            {
                triggerNewValue = true;
            }
            lastScaledBeats = scaledBeats;
        }
        else
        {
            // FREE-RUNNING MODE
            phase += (double)baseRate / sampleRate;
            if (phase >= 1.0)
            {
                phase -= 1.0;
                triggerNewValue = true;
            }
        }

        if (triggerNewValue)
        {
            targetValue = minVal + rng.nextFloat() * (maxVal - minVal);
            targetValueCV = cvMinVal + rng.nextFloat() * (cvMaxVal - cvMinVal);
            if (currentValueCV >= trigThreshold) {
                trigPulseRemaining = (int) std::max(1.0, sampleRate * 0.001);
            }
        }

        smoothedSlew.setTargetValue(baseSlew);
        float effectiveSlew = smoothedSlew.getNextValue();
        if (effectiveSlew <= 0.0001f) {
            currentValue = targetValue;
            currentValueCV = targetValueCV;
        } else {
            const float slewCoeff = (float)(1.0 - std::exp(-1.0 / (effectiveSlew * (float)sampleRate)));
            currentValue += (targetValue - currentValue) * slewCoeff;
            currentValueCV += (targetValueCV - currentValueCV) * slewCoeff;
        }
        
        float tempNormalized = (std::abs(maxVal - minVal) < 1e-6f) ? 0.5f : (currentValue - minVal) / (maxVal - minVal);
        float normalizedValue = juce::jmap(tempNormalized, 0.0f, 1.0f, normMinVal, normMaxVal);
        
        normOut[i] = normalizedValue;
        rawOut[i]  = currentValue;
        cvOut[i]   = currentValueCV;
        boolOut[i] = (currentValueCV >= trigThreshold) ? 1.0f : 0.0f;
        
        trigOut[i] = (trigPulseRemaining > 0) ? 1.0f : 0.0f;
        if (trigPulseRemaining > 0) --trigPulseRemaining;
    }
    
    lastNormalizedOutputValue.store(normOut[numSamples - 1]);
    lastOutputValue.store(rawOut[numSamples - 1]);
    lastCvOutputValue.store(cvOut[numSamples - 1]);
    lastBoolOutputValue.store(boolOut[numSamples - 1]);
    lastTrigOutputValue.store(trigOut[numSamples - 1]);
    
    // Update lastOutputValues for cable inspector
    if (lastOutputValues.size() >= 5)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(normOut[numSamples - 1]);
        if (lastOutputValues[1]) lastOutputValues[1]->store(rawOut[numSamples - 1]);
        if (lastOutputValues[2]) lastOutputValues[2]->store(cvOut[numSamples - 1]);
        if (lastOutputValues[3]) lastOutputValues[3]->store(boolOut[numSamples - 1]);
        if (lastOutputValues[4]) lastOutputValues[4]->store(trigOut[numSamples - 1]);
    }
}

juce::ValueTree RandomModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("RandomState");
    vt.setProperty("sync", apvts.getRawParameterValue("sync")->load(), nullptr);
    vt.setProperty("rate_division", apvts.getRawParameterValue("rate_division")->load(), nullptr);
    return vt;
}

void RandomModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("RandomState"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync")))
            *p = (bool)vt.getProperty("sync", false);
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division")))
            *p = (int)vt.getProperty("rate_division", 3);
    }
}

#if defined(PRESET_CREATOR_UI)
void RandomModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated);
    
    auto& ap = getAPVTS();
    float cvMin = cvMinParam->load();
    float cvMax = cvMaxParam->load();
    float normMin = normMinParam->load();
    float normMax = normMaxParam->load();
    float minVal = minParam->load();
    float maxVal = maxParam->load();
    float slew = slewParam->load();
    float rate = rateParam->load();
    float trigThreshold = trigThresholdParam->load();

    ImGui::PushItemWidth(itemWidth);

    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue("sync")->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(ap.getParameter("sync")))
            *p = sync;
        onModificationEnded();
    }
    
    if (sync)
    {
        int division = (int)apvts.getRawParameterValue("rate_division")->load();
        if (ImGui::Combo("Division", &division, "1/32\0""1/16\0""1/8\0""1/4\0""1/2\0""1\0""2\0""4\0""8\0\0"))
        {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("rate_division")))
                *p = division;
            onModificationEnded();
        }
    }
    else
    {
        // Rate slider (only show in free-running mode)
        if (ImGui::SliderFloat("Rate", &rate, 0.1f, 50.0f, "%.3f Hz", ImGuiSliderFlags_Logarithmic)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRate)) = rate;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        adjustParamOnWheel(ap.getParameter(paramIdRate), "rate", rate);
    }

    if (ImGui::SliderFloat("Slew", &slew, 0.0f, 1.0f, "%.3f")) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdSlew)) = slew;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdSlew), "slew", slew);
    
    if (ImGui::SliderFloat("CV Min", &cvMin, 0.0f, 1.0f)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdCvMin)) = cvMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdCvMin), "cvMin", cvMin);

    if (ImGui::SliderFloat("CV Max", &cvMax, 0.0f, 1.0f)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdCvMax)) = cvMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdCvMax), "cvMax", cvMax);

    if (ImGui::SliderFloat("Norm Min", &normMin, 0.0f, 1.0f)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdNormMin)) = normMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdNormMin), "normMin", normMin);

    if (ImGui::SliderFloat("Norm Max", &normMax, 0.0f, 1.0f)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdNormMax)) = normMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdNormMax), "normMax", normMax);

    if (ImGui::SliderFloat("Min", &minVal, -100.0f, 100.0f, "%.3f")) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMin)) = minVal;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdMin), "min", minVal);

    if (ImGui::SliderFloat("Max", &maxVal, -100.0f, 100.0f, "%.3f")) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMax)) = maxVal;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdMax), "max", maxVal);
    
    if (ImGui::SliderFloat("Trig Threshold", &trigThreshold, 0.0f, 1.0f, "%.2f")) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdTrigThreshold)) = trigThreshold;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdTrigThreshold), "trigThreshold", trigThreshold);

    ImGui::Text("Raw Output:        %.2f", getLastOutputValue());
    ImGui::Text("Normalized Output: %.2f", getLastNormalizedOutputValue());
    ImGui::Text("CV Output:         %.2f", getLastCvOutputValue());
    ImGui::Text("Bool Output:       %s", (getLastBoolOutputValue() > 0.5f) ? "On" : "Off");
    ImGui::Text("Trig Output:       %s", (getLastTrigOutputValue() > 0.5f) ? "On" : "Off");

    ImGui::PopItemWidth();
}

void RandomModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioOutputPin("Norm Out", 0);
    helpers.drawAudioOutputPin("Raw Out", 1);
    helpers.drawAudioOutputPin("CV Out", 2);
    helpers.drawAudioOutputPin("Bool Out", 3);
    helpers.drawAudioOutputPin("Trig Out", 4);
}

juce::String RandomModuleProcessor::getAudioInputLabel(int) const { return {}; }

juce::String RandomModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel) {
        case 0: return "Norm Out";
        case 1: return "Raw Out";
        case 2: return "CV Out";
        case 3: return "Bool Out";
        case 4: return "Trig Out";
        default: return {};
    }
}

bool RandomModuleProcessor::getParamRouting(const juce::String&, int&, int&) const { return false; }
#endif

float RandomModuleProcessor::getLastOutputValue() const { return lastOutputValue.load(); }
float RandomModuleProcessor::getLastNormalizedOutputValue() const { return lastNormalizedOutputValue.load(); }
float RandomModuleProcessor::getLastCvOutputValue() const { return lastCvOutputValue.load(); }
float RandomModuleProcessor::getLastBoolOutputValue() const { return lastBoolOutputValue.load(); }
float RandomModuleProcessor::getLastTrigOutputValue() const { return lastTrigOutputValue.load(); }


================================================================================
FILE: juce\Source\audio\modules\RandomModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class RandomModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdMin = "min";
    static constexpr auto paramIdMax = "max";
    static constexpr auto paramIdCvMin = "cvMin";
    static constexpr auto paramIdCvMax = "cvMax";
    static constexpr auto paramIdNormMin = "normMin";
    static constexpr auto paramIdNormMax = "normMax";
    static constexpr auto paramIdSlew = "slew";
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdTrigThreshold = "trigThreshold";

    RandomModuleProcessor();
    ~RandomModuleProcessor() override = default;

    const juce::String getName() const override { return "random"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // State management for transport settings
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree&) override;

    // UI Display Helpers
    float getLastOutputValue() const;
    float getLastNormalizedOutputValue() const;
    float getLastCvOutputValue() const;
    float getLastBoolOutputValue() const;
    float getLastTrigOutputValue() const;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    void setTimingInfo(const TransportState& state) override;
    
    juce::AudioProcessorValueTreeState apvts;
    juce::Random rng;

    TransportState m_currentTransport;
    
    // Parameter Pointers
    std::atomic<float>* minParam{ nullptr };
    std::atomic<float>* maxParam{ nullptr };
    std::atomic<float>* cvMinParam{ nullptr };
    std::atomic<float>* cvMaxParam{ nullptr };
    std::atomic<float>* normMinParam{ nullptr };
    std::atomic<float>* normMaxParam{ nullptr };
    std::atomic<float>* slewParam{ nullptr };
    std::atomic<float>* rateParam{ nullptr };
    std::atomic<float>* trigThresholdParam{ nullptr };
    
    // DSP State
    float currentValue{ 0.0f };
    float targetValue{ 0.0f };
    float currentValueCV{ 0.0f };
    float targetValueCV{ 0.0f };
    double sampleRate{ 44100.0 };
    double phase{ 0.0 };
    double lastScaledBeats{ 0.0 };
    int trigPulseRemaining { 0 };
    
    juce::SmoothedValue<float> smoothedSlew;
    
    // Telemetry for UI
    std::atomic<float> lastOutputValue{ 0.0f };
    std::atomic<float> lastNormalizedOutputValue{ 0.0f };
    std::atomic<float> lastCvOutputValue{ 0.0f };
    std::atomic<float> lastBoolOutputValue{ 0.0f };
    std::atomic<float> lastTrigOutputValue { 0.0f };
};

================================================================================
FILE: juce\Source\audio\modules\RateModuleProcessor.cpp
================================================================================


#include "RateModuleProcessor.h"

RateModuleProcessor::RateModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Rate Mod", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "RateParams", createParameterLayout())
{
    baseRateParam = apvts.getRawParameterValue("baseRate");
    multiplierParam = apvts.getRawParameterValue("multiplier");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out
}

juce::AudioProcessorValueTreeState::ParameterLayout RateModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>("baseRate", "Base Rate", juce::NormalisableRange<float>(0.1f, 20.0f, 0.01f), 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("multiplier", "Multiplier", juce::NormalisableRange<float>(0.1f, 10.0f, 0.01f), 1.0f));
    return { params.begin(), params.end() };
}

void RateModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void RateModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto in = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);
    
    const float* src = in.getNumChannels() > 0 ? in.getReadPointer(0) : nullptr;
    float* dst = out.getWritePointer(0);
    
    const float baseRate = baseRateParam->load();
    const float multiplier = multiplierParam->load();
    
    float sumOutput = 0.0f;
    
    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float modulation = 0.0f;
        if (src != nullptr)
        {
            // Convert audio input (-1 to 1) to modulation range (-0.5 to +0.5)
            modulation = src[i] * 0.5f;
        }
        
        // Calculate final rate: baseRate * multiplier * (1 + modulation)
        float finalRate = baseRate * multiplier * (1.0f + modulation);
        finalRate = juce::jlimit(0.01f, 50.0f, finalRate); // Clamp to reasonable range
        
        // Update telemetry for live UI feedback (throttled to every 64 samples)
        if ((i & 0x3F) == 0) {
            setLiveParamValue("baseRate_live", baseRate);
            setLiveParamValue("multiplier_live", multiplier);
        }
        
        // Normalize the rate to 0.0..1.0 for modulation routing
        // Map 0.01..50.0 Hz -> 0.0..1.0
        const float normalizedRate = juce::jlimit (0.0f, 1.0f, (finalRate - 0.01f) / (50.0f - 0.01f));
        dst[i] = normalizedRate;
        sumOutput += finalRate;
    }
    
    lastOutputValue.store(sumOutput / (float) buffer.getNumSamples());
    
    // Update output values for tooltips
    if (!lastOutputValues.empty() && lastOutputValues[0])
    {
        lastOutputValues[0]->store(out.getSample(0, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void RateModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float baseRate = baseRateParam->load();
    float multiplier = multiplierParam->load();

    ImGui::PushItemWidth(itemWidth);
    
    // Base Rate slider with live modulation feedback
    bool isBaseRateModulated = isParamModulated("baseRate");
    if (isBaseRateModulated) {
        baseRate = getLiveParamValueFor("baseRate", "baseRate_live", baseRate);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Base Rate", &baseRate, 0.1f, 20.0f)) {
        if (!isBaseRateModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("baseRate"))) *p = baseRate;
        }
    }
    if (!isBaseRateModulated) adjustParamOnWheel(ap.getParameter("baseRate"), "baseRate", baseRate);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isBaseRateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Multiplier slider with live modulation feedback
    bool isMultiplierModulated = isParamModulated("multiplier");
    if (isMultiplierModulated) {
        multiplier = getLiveParamValueFor("multiplier", "multiplier_live", multiplier);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Multiplier", &multiplier, 0.1f, 10.0f)) {
        if (!isMultiplierModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("multiplier"))) *p = multiplier;
        }
    }
    if (!isMultiplierModulated) adjustParamOnWheel(ap.getParameter("multiplier"), "multiplier", multiplier);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isMultiplierModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::Text("Output: %.2f Hz", getLastOutputValue());
    
    ImGui::PopItemWidth();
}
#endif

void RateModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Mod In", 0);
    helpers.drawAudioOutputPin("Out", 0);
}

float RateModuleProcessor::getLastOutputValue() const
{
    return lastOutputValue.load();
}

// Parameter bus contract implementation
bool RateModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "baseRate") { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\RateModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class RateModuleProcessor : public ModuleProcessor
{
public:
    RateModuleProcessor();
    ~RateModuleProcessor() override = default;

    const juce::String getName() const override { return "rate"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    float getLastOutputValue() const;
    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Rate Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* baseRateParam { nullptr };
    std::atomic<float>* multiplierParam { nullptr };
    
    std::atomic<float> lastOutputValue { 0.0f };
};


================================================================================
FILE: juce\Source\audio\modules\RecordModuleProcessor.cpp
================================================================================


#include "RecordModuleProcessor.h"
#include "../graph/ModularSynthProcessor.h"

// --- WriterThread with Corrected File Logic ---

RecordModuleProcessor::WriterThread::WriterThread(RecordModuleProcessor& o)
    : juce::Thread("Audio Recorder Thread"), owner(o)
{
}

RecordModuleProcessor::WriterThread::~WriterThread()
{
    stopThread(5000);
}

// This function is now private and runs ONLY on the background thread
bool RecordModuleProcessor::WriterThread::doStartRecording()
{
    const juce::ScopedLock lock(writerLock);
    if (writer != nullptr)
        return false;

    juce::File file;
    {
        const juce::ScopedLock startLock(owner.startRequestLock);
        file = owner.pendingFileToRecord;
        owner.startRequestPending = false;
    }

    // --- CRITICAL FIX #1: Auto-increment logic now happens AFTER extension is added ---
    juce::String chosenExtension = "." + owner.formatParam->getCurrentChoiceName().toLowerCase();
    juce::File fileWithExt = file.withFileExtension(chosenExtension);
    
    juce::File fileToUse = fileWithExt;
    if (fileToUse.existsAsFile())
    {
        int counter = 1;
        juce::String originalName = fileWithExt.getFileNameWithoutExtension();
        while (fileToUse.existsAsFile())
        {
            juce::String counterStr = juce::String(counter++).paddedLeft('0', 3);
            fileToUse = fileWithExt.getSiblingFile(originalName + "_" + counterStr + chosenExtension);
        }
    }
    // --- END OF FIX ---

    auto* format = owner.formatManager.findFormatForFileExtension(fileToUse.getFileExtension());
    if (format == nullptr)
        return false;

    auto fileStream = std::make_unique<juce::FileOutputStream>(fileToUse);
    if (!fileStream->openedOk())
        return false;

    writer.reset(format->createWriterFor(fileStream.release(),
                                         owner.getSampleRate(),
                                         2, // Stereo
                                         24, // Bit depth
                                         {}, 0));
    if (writer != nullptr)
    {
        owner.currentFileRecording = fileToUse.getFullPathName();
        owner.totalSamplesRecorded = 0;
        owner.waveformData.clear();
        owner.abstractFifo.reset();
        owner.isRecording = true;
        owner.isPaused = false;
        return true;
    }
    return false;
}

void RecordModuleProcessor::WriterThread::stopRecording()
{
    owner.isRecording = false;
    notify();
}

void RecordModuleProcessor::WriterThread::run()
{
    while (!threadShouldExit())
    {
        if (owner.startRequestPending.load())
        {
            doStartRecording();
        }

        bool hasAudioToProcess = owner.abstractFifo.getNumReady() > 0;
        bool shouldFinalize = !owner.isRecording.load() && !hasAudioToProcess && (writer != nullptr);

        if (hasAudioToProcess)
        {
            const juce::ScopedLock lock(writerLock);
            if (writer != nullptr)
            {
                int samplesAvailable = owner.abstractFifo.getNumReady();
                if (samplesAvailable > 0)
                {
                    juce::AudioBuffer<float> tempBuffer(2, samplesAvailable);
                    auto read = owner.abstractFifo.read(samplesAvailable);
                    tempBuffer.copyFrom(0, 0, owner.fifoBuffer, 0, read.startIndex1, read.blockSize1);
                    tempBuffer.copyFrom(1, 0, owner.fifoBuffer, 0, read.startIndex1, read.blockSize1);
                    if (read.blockSize2 > 0)
                    {
                        tempBuffer.copyFrom(0, read.blockSize1, owner.fifoBuffer, 0, read.startIndex2, read.blockSize2);
                        tempBuffer.copyFrom(1, read.blockSize1, owner.fifoBuffer, 0, read.startIndex2, read.blockSize2);
                    }
                    writer->writeFromAudioSampleBuffer(tempBuffer, 0, samplesAvailable);
                }
            }
        }
        else if (shouldFinalize)
        {
            const juce::ScopedLock lock(writerLock);
            if (writer != nullptr)
            {
                writer.reset();
                owner.currentFileRecording = "";
            }
            wait(-1);
        }
        else
        {
            wait(50);
        }
    }
    
    if (writer != nullptr)
        writer.reset();
}

// --- RecordModuleProcessor Implementation ---

juce::AudioProcessorValueTreeState::ParameterLayout RecordModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterChoice>("format", "Format", juce::StringArray{"WAV", "AIFF", "FLAC"}, 0));
    return { params.begin(), params.end() };
}

RecordModuleProcessor::RecordModuleProcessor()
    : ModuleProcessor(BusesProperties().withInput("In", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "RecordParams", createParameterLayout()),
      waveformFifoBuffer(4096),
      writerThread(*this)
{
    formatManager.registerBasicFormats();
    formatManager.registerFormat(new juce::FlacAudioFormat(), true);
    formatParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("format"));
    writerThread.startThread();
    
#if defined(PRESET_CREATOR_UI)
    saveDirectory = juce::File::getSpecialLocation(juce::File::userMusicDirectory);
#endif
    
    waveformFifo.setTotalSize(4096);
}

RecordModuleProcessor::~RecordModuleProcessor()
{
    if (isRecording.load())
        writerThread.stopRecording();
}

void RecordModuleProcessor::releaseResources()
{
    if (isRecording.load())
        writerThread.stopRecording();
}

void RecordModuleProcessor::prepareToPlay(double sampleRate, int)
{
    int fifoLen = (int)(sampleRate * 10.0);
    fifoBuffer.setSize(1, fifoLen, false, true, false);
    abstractFifo.setTotalSize(fifoLen);
    abstractFifo.reset();
}

void RecordModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    if (!isRecording.load() || isPaused.load())
        return;

    auto inBus = getBusBuffer(buffer, true, 0);
    const int numSamples = inBus.getNumSamples();

    workBuffer.setSize(1, numSamples, false, false, true);
    workBuffer.copyFrom(0, 0, inBus, 0, 0, numSamples);
    if (inBus.getNumChannels() > 1)
    {
        workBuffer.addFrom(0, 0, inBus, 1, 0, numSamples);
        workBuffer.applyGain(0.5f);
    }
    
    if (abstractFifo.getFreeSpace() >= numSamples)
    {
        auto write = abstractFifo.write(numSamples);
        if (write.blockSize1 > 0)
            fifoBuffer.copyFrom(0, write.startIndex1, workBuffer, 0, 0, write.blockSize1);
        if (write.blockSize2 > 0)
            fifoBuffer.copyFrom(0, write.startIndex2, workBuffer, 0, write.blockSize1, write.blockSize2);
        writerThread.notify();
    }
    
    if (waveformFifo.getFreeSpace() >= 1)
    {
        float peak = workBuffer.getMagnitude(0, numSamples);
        auto write = waveformFifo.write(1);
        waveformFifoBuffer[write.startIndex1] = peak;
    }
    totalSamplesRecorded += numSamples;
}

juce::String RecordModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    return {};
}

void RecordModuleProcessor::programmaticStartRecording()
{
#if defined(PRESET_CREATOR_UI)
    // This function is called externally, e.g., by a global start button.
    // It uses the path and filename currently set in the node's UI.
    if (saveDirectory.exists())
    {
        juce::String filenameToSave = autoGeneratedPrefix + juce::String(userSuffixBuffer);
        if (filenameToSave.isEmpty())
            filenameToSave = "recording";
        
        juce::File fileToSave = saveDirectory.getChildFile(filenameToSave);
        
        // Use the async request method
        requestStartRecording(fileToSave);
    }
#endif
}

void RecordModuleProcessor::programmaticStopRecording()
{
    if (isRecording.load())
    {
        writerThread.stopRecording();
    }
}

#if defined(PRESET_CREATOR_UI)

void RecordModuleProcessor::requestStartRecording(const juce::File& file)
{
    const juce::ScopedLock lock(startRequestLock);
    pendingFileToRecord = file;
    startRequestPending = true;
    writerThread.notify();
}

// --- NEW FUNCTION: Generates filename with source name passed directly ---
void RecordModuleProcessor::updateSuggestedFilename(const juce::String& sourceName)
{
    juce::String timeString = juce::Time::getCurrentTime().formatted("%Y%m%d_%H%M%S");
    
    if (sourceName.isEmpty())
    {
        // No source provided, mark as unconnected
        autoGeneratedPrefix = timeString + "+Unconnected";
    }
    else
    {
        // Source name provided, use it
        juce::String srcName = sourceName.removeCharacters(" ");
        autoGeneratedPrefix = timeString + "+" + srcName;
    }
}

void RecordModuleProcessor::setPropertiesFile(juce::PropertiesFile* props)
{
    propertiesFile = props;
    if (propertiesFile != nullptr)
    {
        // On initialization, load the last path from settings
        juce::String lastPath = propertiesFile->getValue("lastRecorderPath");
        if (juce::File(lastPath).isDirectory())
        {
            saveDirectory = juce::File(lastPath);
        }
    }
}

void RecordModuleProcessor::drawParametersInNode(float /*itemWidth*/, const std::function<bool(const juce::String&)>&, const std::function<void()>&)
{
    // Use a wider, fixed width for this node to ensure everything fits
    const float nodeWidth = 350.0f;
    ImGui::PushItemWidth(nodeWidth);
    
    if (isRecording.load() || !currentFileRecording.isEmpty())
    {
        if (isPaused.load())
            ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), "Status: Paused");
        else
            ImGui::Text("Status: Recording...");

        double elapsed = (double)totalSamplesRecorded.load() / getSampleRate();
        ImGui::Text("Time: %.2fs", elapsed);
        ImGui::TextWrapped("File: %s", juce::File(currentFileRecording).getFileName().toRawUTF8());

        int available = waveformFifo.getNumReady();
        if (available > 0)
        {
            auto read = waveformFifo.read(available);
            for (int i = 0; i < read.blockSize1; ++i)
                waveformData.push_back(waveformFifoBuffer[read.startIndex1 + i]);
            if (read.blockSize2 > 0)
                for (int i = 0; i < read.blockSize2; ++i)
                    waveformData.push_back(waveformFifoBuffer[read.startIndex2 + i]);
            
            const int max_display_points = 2000;
            if (waveformData.size() > max_display_points)
                waveformData.erase(waveformData.begin(), waveformData.begin() + (waveformData.size() - max_display_points));
        }
        
        ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();
        ImVec2 canvas_sz = ImVec2(nodeWidth, 60.0f);
        ImDrawList* draw_list = ImGui::GetWindowDrawList();
        draw_list->AddRectFilled(canvas_p0, ImVec2(canvas_p0.x + canvas_sz.x, canvas_p0.y + canvas_sz.y), IM_COL32(30, 30, 30, 255));
        if (!waveformData.empty())
        {
            float max_val = 1.0f;
            for (float v : waveformData)
            {
                if (v > max_val)
                    max_val = v;
            }
            for (size_t i = 0; i + 1 < waveformData.size(); ++i)
            {
                ImVec2 p1 = ImVec2(canvas_p0.x + ((float)i / waveformData.size()) * canvas_sz.x,
                                   canvas_p0.y + (1.0f - (waveformData[i] / max_val)) * canvas_sz.y);
                ImVec2 p2 = ImVec2(canvas_p0.x + ((float)(i + 1) / waveformData.size()) * canvas_sz.x,
                                   canvas_p0.y + (1.0f - (waveformData[i + 1] / max_val)) * canvas_sz.y);
                draw_list->AddLine(p1, p2, IM_COL32(120, 255, 120, 255));
            }
            if (max_val > 1.0f)
            {
                float clip_y = canvas_p0.y + (1.0f - (1.0f / max_val)) * canvas_sz.y;
                draw_list->AddLine(ImVec2(canvas_p0.x, clip_y),
                                   ImVec2(canvas_p0.x + canvas_sz.x, clip_y),
                                   IM_COL32(255, 100, 100, 200), 1.5f);
            }
        }
        ImGui::Dummy(canvas_sz);
        
        if (ImGui::Button("Stop", ImVec2(nodeWidth, 0)))
        {
            writerThread.stopRecording();
        }
    }
    else // --- NEW, SIMPLIFIED IDLE STATE UI ---
    {
        // Load the last saved directory if available
        if (propertiesFile && saveDirectory == juce::File::getSpecialLocation(juce::File::userMusicDirectory))
        {
            juce::String lastPath = propertiesFile->getValue("lastRecorderPath");
            if (lastPath.isNotEmpty() && juce::File(lastPath).isDirectory())
            {
                saveDirectory = juce::File(lastPath);
            }
        }
        
        // This layout provides more space as requested
        ImGui::Text("Save Location:");
        ImGui::TextWrapped("%s", saveDirectory.getFullPathName().toRawUTF8());
        if (ImGui::Button("Browse...", ImVec2(nodeWidth, 0)))
        {
            fileChooser = std::make_unique<juce::FileChooser>("Choose Save Directory", saveDirectory);
            fileChooser->launchAsync(juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectDirectories, [this](const juce::FileChooser& fc)
            {
                auto dir = fc.getResult();
                if (dir.isDirectory())
                {
                    saveDirectory = dir;
                    // Save the path for next time
                    if (propertiesFile)
                        propertiesFile->setValue("lastRecorderPath", dir.getFullPathName());
                }
            });
        }
        
        
        // Filename Prefix (read-only) + Suffix (editable)
        ImGui::Text("Filename Prefix:");
        ImGui::TextWrapped("%s", autoGeneratedPrefix.toRawUTF8());

        ImGui::InputText("Suffix", userSuffixBuffer, sizeof(userSuffixBuffer));
        
        int formatIdx = formatParam->getIndex();
        if (ImGui::Combo("Format", &formatIdx, "WAV\0AIFF\0FLAC\0\0"))
        {
            *formatParam = formatIdx;
        }

        // Full filename preview
        juce::String chosenExtension = "." + formatParam->getCurrentChoiceName().toLowerCase();
        juce::String finalName = autoGeneratedPrefix + juce::String(userSuffixBuffer) + chosenExtension;
        ImGui::Text("Final Name Preview:");
        ImGui::TextWrapped("%s", finalName.toRawUTF8());

        if (ImGui::Button("Record", ImVec2(nodeWidth, 0)))
        {
            juce::String filenameToSave = autoGeneratedPrefix + juce::String(userSuffixBuffer);
            if (filenameToSave.isEmpty())
                filenameToSave = "recording";
            
            juce::File fileToSave = saveDirectory.getChildFile(filenameToSave);
            requestStartRecording(fileToSave);
        }
    }
    
    ImGui::PopItemWidth();
}

void RecordModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
}

#endif


================================================================================
FILE: juce\Source\audio\modules\RecordModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_audio_formats/juce_audio_formats.h>

class RecordModuleProcessor : public ModuleProcessor
{
public:
    RecordModuleProcessor();
    ~RecordModuleProcessor() override;

    const juce::String getName() const override { return "recorder"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    void releaseResources() override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    juce::String getAudioInputLabel(int channel) const override;

    // Query recording state (prevents spacebar from stopping audio during recording)
    bool getIsRecording() const { return isRecording.load(); }
    
    // Pause/Resume recording (used by spacebar hold-to-audition)
    void pauseRecording() { isPaused = true; }
    void resumeRecording() { isPaused = false; }
    
    // Programmatic start/stop for global recording control
    void programmaticStartRecording();
    void programmaticStopRecording();

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    void requestStartRecording(const juce::File& file);
    
    // This is called by the editor when cables are connected/disconnected
    void updateSuggestedFilename(const juce::String& sourceName = "");
    
    // Set the properties file for persistent storage
    void setPropertiesFile(juce::PropertiesFile* props);
#endif

private:
    class WriterThread : public juce::Thread
    {
    public:
        WriterThread(RecordModuleProcessor& owner);
        ~WriterThread() override;
        void run() override;
        void stopRecording();

    private:
        bool doStartRecording();
        RecordModuleProcessor& owner;
        std::unique_ptr<juce::AudioFormatWriter> writer;
        juce::CriticalSection writerLock;
    };
    
    juce::AudioBuffer<float> fifoBuffer;
    juce::AbstractFifo abstractFifo { 0 };
    std::atomic<bool> isRecording { false };
    std::atomic<bool> isPaused { false };

    juce::AbstractFifo waveformFifo { 0 };
    std::vector<float> waveformFifoBuffer;
    
    WriterThread writerThread;

    juce::AudioFormatManager formatManager;
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;
    juce::AudioParameterChoice* formatParam { nullptr };

#if defined(PRESET_CREATOR_UI)
    std::unique_ptr<juce::FileChooser> fileChooser;
    juce::File saveDirectory;
    juce::String autoGeneratedPrefix;
    char userSuffixBuffer[256] { "" };
    juce::PropertiesFile* propertiesFile { nullptr };
#endif

    // Thread-safe communication for start requests
    juce::CriticalSection startRequestLock;
    juce::File pendingFileToRecord;
    std::atomic<bool> startRequestPending { false };

    juce::String currentFileRecording;
    std::atomic<int64_t> totalSamplesRecorded { 0 };
    std::vector<float> waveformData;
    juce::AudioBuffer<float> workBuffer;
};


================================================================================
FILE: juce\Source\audio\modules\ReverbModuleProcessor.cpp
================================================================================


#include "ReverbModuleProcessor.h"

ReverbModuleProcessor::ReverbModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(5), true) // 0-1: Audio In, 2: Size Mod, 3: Damp Mod, 4: Mix Mod
        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "ReverbParams", createParameterLayout())
{
    sizeParam = apvts.getRawParameterValue ("size");
    dampParam = apvts.getRawParameterValue ("damp");
    mixParam  = apvts.getRawParameterValue ("mix");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout ReverbModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("size", "Size", juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("damp", "Damp", juce::NormalisableRange<float> (0.0f, 1.0f), 0.3f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("mix",  "Mix",  juce::NormalisableRange<float> (0.0f, 1.0f), 0.8f));
    return { p.begin(), p.end() };
}

void ReverbModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 2 };
    reverb.prepare (spec);
    
    // Reset reverb state
    reverb.reset();
}

void ReverbModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    // --- COPY INPUT AUDIO TO OUTPUT BUFFER ---
    // Get separate handles to the input and output buses
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);
    
    // Explicitly copy the dry input audio to the output buffer.
    // This ensures the reverb has a signal to process.
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = juce::jmin(inBus.getNumSamples(), outBus.getNumSamples());

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }
    // --- END OF INPUT COPYING ---
    
    // Read CV from the unified input bus
    float sizeModCV = 0.0f;
    float dampModCV = 0.0f;
    float mixModCV = 0.0f;
    
    // Check if size mod is connected and read CV from channel 2
    if (isParamInputConnected("size") && inBus.getNumChannels() > 2)
    {
        sizeModCV = inBus.getReadPointer(2)[0]; // Read first sample from channel 2
    }
    
    // Check if damp mod is connected and read CV from channel 3
    if (isParamInputConnected("damp") && inBus.getNumChannels() > 3)
    {
        dampModCV = inBus.getReadPointer(3)[0]; // Read first sample from channel 3
    }
    
    // Check if mix mod is connected and read CV from channel 4
    if (isParamInputConnected("mix") && inBus.getNumChannels() > 4)
    {
        mixModCV = inBus.getReadPointer(4)[0]; // Read first sample from channel 4
    }

    // Apply modulation or use parameter values
    float size = 0.0f;
    if (isParamInputConnected("size")) // Size Mod bus connected
    {
        // Map CV [0,1] to size [0, 1]
        size = sizeModCV;
    }
    else
    {
        size = sizeParam != nullptr ? sizeParam->load() : 0.5f;
    }
    
    float damp = 0.0f;
    if (isParamInputConnected("damp")) // Damp Mod bus connected
    {
        // Map CV [0,1] to damp [0, 1]
        damp = dampModCV;
    }
    else
    {
        damp = dampParam != nullptr ? dampParam->load() : 0.3f;
    }
    
    float mix = 0.0f;
    if (isParamInputConnected("mix")) // Mix Mod bus connected
    {
        // Map CV [0,1] to mix [0, 1]
        mix = mixModCV;
    }
    else
    {
        mix = mixParam != nullptr ? mixParam->load() : 0.8f;
    }
    
    // Clamp parameters to valid ranges
    size = juce::jlimit(0.0f, 1.0f, size);
    damp = juce::jlimit(0.0f, 1.0f, damp);
    mix = juce::jlimit(0.0f, 1.0f, mix);
    
    juce::dsp::Reverb::Parameters par;
    par.roomSize = size;
    par.damping  = damp;
    par.wetLevel = mix;
    par.dryLevel = 1.0f - par.wetLevel;
    reverb.setParameters (par);
    
    // Debug: Print parameter values occasionally
    static int debugCounter = 0;
    if (++debugCounter > 44100) // Print every second at 44.1kHz
    {
        debugCounter = 0;
        juce::Logger::writeToLog("Reverb - Size: " + juce::String(size) + ", Damp: " + juce::String(damp) + ", Mix: " + juce::String(mix));
    }
    // Now, process the output buffer, which we have just filled with the input signal.
    juce::dsp::AudioBlock<float> block (outBus);
    juce::dsp::ProcessContextReplacing<float> ctx (block);
    reverb.process (ctx);
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, outBus.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, outBus.getNumSamples() - 1));
    }

    // Store live modulated values for UI display
    setLiveParamValue("size_live", size);
    setLiveParamValue("damp_live", damp);
    setLiveParamValue("mix_live", mix);
}

// Parameter bus contract implementation
bool ReverbModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "size") { outChannelIndexInBus = 2; return true; }
    if (paramId == "damp") { outChannelIndexInBus = 3; return true; }
    if (paramId == "mix")  { outChannelIndexInBus = 4; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\ReverbModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class ReverbModuleProcessor : public ModuleProcessor
{
public:
    ReverbModuleProcessor();
    ~ReverbModuleProcessor() override = default;

    const juce::String getName() const override { return "reverb"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        // Get live modulated values for display
        bool isSizeModulated = isParamModulated("size");
        bool isDampModulated = isParamModulated("damp");
        bool isMixModulated = isParamModulated("mix");
        
        // Use correct mod param IDs (same as parameter IDs)
        float size = isSizeModulated ? getLiveParamValueFor("size", "size_live", sizeParam->load()) : (sizeParam != nullptr ? sizeParam->load() : 0.5f);
        float damp = isDampModulated ? getLiveParamValueFor("damp", "damp_live", dampParam->load()) : (dampParam != nullptr ? dampParam->load() : 0.3f);
        float mix = isMixModulated ? getLiveParamValueFor("mix", "mix_live", mixParam->load()) : (mixParam != nullptr ? mixParam->load() : 0.3f);
        ImGui::PushItemWidth (itemWidth);

        // Size
        if (isSizeModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Size", &size, 0.0f, 1.0f)) if (!isSizeModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("size"))) *p = size;
        if (!isSizeModulated) adjustParamOnWheel (ap.getParameter ("size"), "size", size);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isSizeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        // Damp
        if (isDampModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Damp", &damp, 0.0f, 1.0f)) if (!isDampModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("damp"))) *p = damp;
        if (!isDampModulated) adjustParamOnWheel (ap.getParameter ("damp"), "damp", damp);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isDampModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        // Mix
        if (isMixModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Mix", &mix, 0.0f, 1.0f)) if (!isMixModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("mix")))  *p = mix;
        if (!isMixModulated) adjustParamOnWheel (ap.getParameter ("mix"), "mix", mix);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMixModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);
        
        int busIdx, chanInBus;
        if (getParamRouting("size", busIdx, chanInBus))
            helpers.drawAudioInputPin("Size Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("damp", busIdx, chanInBus))
            helpers.drawAudioInputPin("Damp Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("mix", busIdx, chanInBus))
            helpers.drawAudioInputPin("Mix Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
            
        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Size Mod";
            case 3: return "Damp Mod";
            case 4: return "Mix Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Reverb reverb;
    std::atomic<float>* sizeParam { nullptr };
    std::atomic<float>* dampParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
};




================================================================================
FILE: juce\Source\audio\modules\SampleLoaderModuleProcessor.cpp
================================================================================


#include "SampleLoaderModuleProcessor.h"
#include <juce_audio_formats/juce_audio_formats.h>
#include <juce_gui_basics/juce_gui_basics.h>
#include "../../utils/RtLogger.h"

#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#endif

SampleLoaderModuleProcessor::SampleLoaderModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withInput("Playback Mods", juce::AudioChannelSet::discreteChannels(2), true)  // Bus 0: Pitch, Speed (flat ch 0-1)
        .withInput("Control Mods", juce::AudioChannelSet::discreteChannels(2), true)   // Bus 1: Gate, Trigger (flat ch 2-3)
        .withInput("Range Mods", juce::AudioChannelSet::discreteChannels(2), true)     // Bus 2: Range Start, Range End (flat ch 4-5)
        .withInput("Randomize", juce::AudioChannelSet::discreteChannels(1), true)      // Bus 3: Randomize (flat ch 6)
        .withOutput("Audio Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "SampleLoaderParameters", createParameterLayout())
{
    // Parameter references will be obtained when needed
    // Initialize output value tracking for cable inspector (stereo)
    lastOutputValues.clear();
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    
    // Initialize parameter pointers
    rangeStartParam = apvts.getRawParameterValue("rangeStart");
    rangeEndParam = apvts.getRawParameterValue("rangeEnd");
    rangeStartModParam = apvts.getRawParameterValue("rangeStart_mod");
    rangeEndModParam = apvts.getRawParameterValue("rangeEnd_mod");
}



juce::AudioProcessorValueTreeState::ParameterLayout SampleLoaderModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> parameters;
    
    // --- Basic Playback Parameters ---
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "speed", "Speed", 0.25f, 4.0f, 1.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "pitch", "Pitch (semitones)", -24.0f, 24.0f, 0.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gate", "Gate", 0.0f, 1.0f, 0.8f));
    parameters.push_back(std::make_unique<juce::AudioParameterChoice>(
        "engine", "Engine", juce::StringArray { "RubberBand", "Naive" }, 1));
    parameters.push_back(std::make_unique<juce::AudioParameterBool>(
        "rbWindowShort", "RB Window Short", true));
    parameters.push_back(std::make_unique<juce::AudioParameterBool>(
        "rbPhaseInd", "RB Phase Independent", true));
    parameters.push_back(std::make_unique<juce::AudioParameterBool>(
         "loop", "Loop", false));
    
    // (Removed legacy SoundTouch tuning parameters)

    // --- New Modulation Inputs (absolute control) ---
    // These live in APVTS and are fed by modulation cables; they override UI when connected.
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "pitch_mod", "Pitch Mod", -24.0f, 24.0f, 0.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "speed_mod", "Speed Mod", 0.25f, 4.0f, 1.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gate_mod", "Gate Mod", 0.0f, 1.0f, 1.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "trigger_mod", "Trigger Mod", 0.0f, 1.0f, 0.0f));
    
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rangeStart_mod", "Range Start Mod", 0.0f, 1.0f, 0.0f));

    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rangeEnd_mod", "Range End Mod", 0.0f, 1.0f, 1.0f));
    
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rangeStart", "Range Start", 
        juce::NormalisableRange<float>(0.0f, 1.0f), 0.0f));

    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rangeEnd", "Range End", 
        juce::NormalisableRange<float>(0.0f, 1.0f), 1.0f));
    
    return { parameters.begin(), parameters.end() };
}

void SampleLoaderModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
    juce::Logger::writeToLog("[Sample Loader] prepareToPlay sr=" + juce::String(sampleRate) + ", block=" + juce::String(samplesPerBlock));
    
    // DEBUG: Check bus enablement status BEFORE forcing
    juce::String busStatusBefore = "[Sample Loader] Bus Status BEFORE: ";
    for (int i = 0; i < getBusCount(true); ++i)
    {
        auto* bus = getBus(true, i);
        if (bus)
            busStatusBefore += "In" + juce::String(i) + "=" + (bus->isEnabled() ? "ON" : "OFF") + "(" + juce::String(bus->getNumberOfChannels()) + "ch) ";
    }
    juce::Logger::writeToLog(busStatusBefore);
    
    // FORCE ENABLE ALL INPUT BUSES (AudioProcessorGraph might disable them)
    for (int i = 0; i < getBusCount(true); ++i)
    {
        if (auto* bus = getBus(true, i))
        {
            if (!bus->isEnabled())
            {
                enableAllBuses(); // Try to enable all
                juce::Logger::writeToLog("[Sample Loader] Forced all buses ON!");
                break;
            }
        }
    }
    
    // DEBUG: Check bus enablement status AFTER forcing
    juce::String busStatusAfter = "[Sample Loader] Bus Status AFTER: ";
    for (int i = 0; i < getBusCount(true); ++i)
    {
        auto* bus = getBus(true, i);
        if (bus)
            busStatusAfter += "In" + juce::String(i) + "=" + (bus->isEnabled() ? "ON" : "OFF") + "(" + juce::String(bus->getNumberOfChannels()) + "ch) ";
    }
    juce::Logger::writeToLog(busStatusAfter);
    
    // Auto-load sample from saved state if available
    if (currentSample == nullptr)
    {
        const auto savedPath = apvts.state.getProperty ("samplePath").toString();
        if (savedPath.isNotEmpty())
        {
            currentSamplePath = savedPath;
            loadSample (juce::File (currentSamplePath));
        }
    }
    // Create sample processor if we have a sample loaded
    if (currentSample != nullptr)
    {
        createSampleProcessor();
    }
}

void SampleLoaderModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    // Get OUTPUT bus, but do NOT clear here.
    // Clearing at the start can zero input buses when buffers are aliased in AudioProcessorGraph.
    auto outBus = getBusBuffer(buffer, false, 0);
    
    // --- Setup and Safety Checks ---
    if (auto* pending = newSampleProcessor.exchange(nullptr))
    {
        const juce::ScopedLock lock(processorSwapLock);
        processorToDelete = std::move(sampleProcessor);
        sampleProcessor.reset(pending);
    }
    SampleVoiceProcessor* currentProcessor = nullptr;
    {
        const juce::ScopedLock lock(processorSwapLock);
        currentProcessor = sampleProcessor.get();
    }
    if (currentProcessor == nullptr || currentSample == nullptr)
    {
        outBus.clear();
        return;
    }
    
    // DEBUG: Check MAIN buffer first (before splitting into buses)
    static int rawDebugCounter = 0;
    if (rawDebugCounter == 0 || rawDebugCounter % 240 == 0)
    {
        juce::String mainMsg = "[Sample MAIN Buffer #" + juce::String(rawDebugCounter) + "] ";
        mainMsg += "totalCh=" + juce::String(buffer.getNumChannels()) + " samples=" + juce::String(buffer.getNumSamples()) + " | ";
        
        // Check if buffer channels have valid pointers
        bool hasData = false;
        for (int ch = 0; ch < juce::jmin(7, buffer.getNumChannels()); ++ch)
        {
            float val = buffer.getSample(ch, 0);
            mainMsg += "ch" + juce::String(ch) + "=" + juce::String(val, 3) + " ";
            if (std::abs(val) > 0.001f) hasData = true;
        }
        
        mainMsg += "| hasData=" + juce::String(hasData ? "YES" : "NO");
        
        // Check channel pointer validity
        mainMsg += " | ptrs: ";
        for (int ch = 0; ch < juce::jmin(3, buffer.getNumChannels()); ++ch)
        {
            const float* ptr = buffer.getReadPointer(ch);
            mainMsg += "ch" + juce::String(ch) + "=" + (ptr ? "OK" : "NULL") + " ";
        }
        juce::Logger::writeToLog(mainMsg);
    }
    
    // Multi-bus input architecture (like TTS Performer)
    auto playbackBus = getBusBuffer(buffer, true, 0);  // Bus 0: Pitch, Speed (flat ch 0-1)
    auto controlBus = getBusBuffer(buffer, true, 1);   // Bus 1: Gate, Trigger (flat ch 2-3)
    auto rangeBus = getBusBuffer(buffer, true, 2);     // Bus 2: Range Start, Range End (flat ch 4-5)
    auto randomizeBus = getBusBuffer(buffer, true, 3); // Bus 3: Randomize (flat ch 6)
    
    // DEBUG: Check buses after splitting
    if (rawDebugCounter == 0 || rawDebugCounter % 240 == 0)
    {
        juce::String busMsg = "[Sample Buses #" + juce::String(rawDebugCounter) + "] ";
        busMsg += "playback=" + juce::String(playbackBus.getNumChannels()) + " ";
        busMsg += "control=" + juce::String(controlBus.getNumChannels()) + " ";
        busMsg += "range=" + juce::String(rangeBus.getNumChannels()) + " ";
        busMsg += "randomize=" + juce::String(randomizeBus.getNumChannels()) + " | ";
        if (playbackBus.getNumChannels() > 0) busMsg += "pitch=" + juce::String(playbackBus.getSample(0, 0), 3) + " ";
        if (playbackBus.getNumChannels() > 1) busMsg += "speed=" + juce::String(playbackBus.getSample(1, 0), 3) + " ";
        if (controlBus.getNumChannels() > 0) busMsg += "gate=" + juce::String(controlBus.getSample(0, 0), 3) + " ";
        juce::Logger::writeToLog(busMsg);
    }
    rawDebugCounter++;
    
    const int numSamples = buffer.getNumSamples();

    // --- Compute block-rate CV-mapped values for telemetry (even when not playing) ---
    const float baseSpeed = apvts.getRawParameterValue("speed")->load();
    float speedNow = baseSpeed;
    if (isParamInputConnected("speed_mod") && playbackBus.getNumChannels() > 1)
    {
        const float cv = juce::jlimit(0.0f, 1.0f, playbackBus.getReadPointer(1)[0]);
        const float octaveRange = 4.0f;
        const float octaveOffset = (cv - 0.5f) * octaveRange;
        speedNow = juce::jlimit(0.25f, 4.0f, baseSpeed * std::pow(2.0f, octaveOffset));
    }

    const float basePitch = apvts.getRawParameterValue("pitch")->load();
    float pitchNow = basePitch;
    if (isParamInputConnected("pitch_mod") && playbackBus.getNumChannels() > 0)
    {
        const float rawCV = playbackBus.getReadPointer(0)[0];
        const float bipolarCV = (rawCV >= 0.0f && rawCV <= 1.0f) ? (rawCV * 2.0f - 1.0f) : rawCV;
        const float pitchModulationRange = 24.0f; 
        pitchNow = juce::jlimit(-24.0f, 24.0f, basePitch + (bipolarCV * pitchModulationRange));
    }

    float startNorm = rangeStartParam->load();
    if (isParamInputConnected("rangeStart_mod") && rangeBus.getNumChannels() > 0)
        startNorm = juce::jlimit(0.0f, 1.0f, rangeBus.getReadPointer(0)[0]);

    float endNorm = rangeEndParam->load();
    if (isParamInputConnected("rangeEnd_mod") && rangeBus.getNumChannels() > 1)
        endNorm = juce::jlimit(0.0f, 1.0f, rangeBus.getReadPointer(1)[0]);

    // Ensure valid range window
    {
        const float minGap = 0.001f;
        if (startNorm >= endNorm)
        {
            const float midpoint = (startNorm + endNorm) * 0.5f;
            startNorm = juce::jlimit(0.0f, 1.0f - minGap, midpoint - minGap * 0.5f);
            endNorm   = juce::jlimit(minGap, 1.0f, startNorm + minGap);
        }
    }

    // Update live telemetry regardless of play state (matches TTS pattern)
    setLiveParamValue("speed_live", speedNow);
    setLiveParamValue("pitch_live", pitchNow);
    setLiveParamValue("rangeStart_live", startNorm);
    setLiveParamValue("rangeEnd_live", endNorm);
    // Gate live (use first sample if CV present, otherwise knob)
    if (isParamInputConnected("gate_mod") && controlBus.getNumChannels() > 0)
    {
        const float g = juce::jlimit(0.0f, 1.0f, controlBus.getReadPointer(0)[0]);
        setLiveParamValue("gate_live", g);
    }
    else
    {
        setLiveParamValue("gate_live", apvts.getRawParameterValue("gate")->load());
    }

    // --- 1. TRIGGER DETECTION ---
    const bool looping = apvts.getRawParameterValue("loop")->load() > 0.5f;
    
    // If loop is enabled and not playing, start playing
    if (looping && !currentProcessor->isPlaying)
    {
        currentProcessor->reset();
    }
    
    // Check for a rising edge on the trigger input to start playback.
    if (isParamInputConnected("trigger_mod") && controlBus.getNumChannels() > 1)
    {
        const float* trigSignal = controlBus.getReadPointer(1);  // Control Bus Channel 1 = Trigger
        for (int i = 0; i < numSamples; ++i)
        {
            const bool trigHigh = trigSignal[i] > 0.5f;
            if (trigHigh && !lastTriggerHigh)
            {
                reset(); // This now sets the internal voice's isPlaying to true
                break;
            }
            lastTriggerHigh = trigHigh;
        }
        if (numSamples > 0) lastTriggerHigh = (controlBus.getReadPointer(1)[numSamples - 1] > 0.5f);
    }

    // --- Randomize Trigger ---
    if (isParamInputConnected("randomize_mod") && randomizeBus.getNumChannels() > 0)
    {
        const float* randTrigSignal = randomizeBus.getReadPointer(0);  // Randomize Bus Channel 0
        for (int i = 0; i < numSamples; ++i)
        {
            const bool trigHigh = randTrigSignal[i] > 0.5f;
            if (trigHigh && !lastRandomizeTriggerHigh)
            {
                randomizeSample(); // Call the existing randomize function
                break; // Only randomize once per block
            }
            lastRandomizeTriggerHigh = trigHigh;
        }
        if (numSamples > 0) lastRandomizeTriggerHigh = (randomizeBus.getReadPointer(0)[numSamples - 1] > 0.5f);
    }

    // --- 2. CONDITIONAL AUDIO RENDERING ---
    // Only generate audio if the internal voice is in a playing state.
    if (currentProcessor->isPlaying)
    {
        // DEBUG: Log CV values from buses (like TTS)
        static int debugFrameCounter = 0;
        if (debugFrameCounter == 0 || debugFrameCounter % 240 == 0)
        {
            juce::String dbgMsg = "[Sample CV Debug #" + juce::String(debugFrameCounter) + "] ";
            if (playbackBus.getNumChannels() > 0) dbgMsg += "pitch_cv=" + juce::String(playbackBus.getReadPointer(0)[0], 3) + " ";
            if (playbackBus.getNumChannels() > 1) dbgMsg += "speed_cv=" + juce::String(playbackBus.getReadPointer(1)[0], 3) + " ";
            if (controlBus.getNumChannels() > 0) dbgMsg += "gate_cv=" + juce::String(controlBus.getReadPointer(0)[0], 3) + " ";
            juce::Logger::writeToLog(dbgMsg);
        }
        debugFrameCounter++;
        
        currentProcessor->setZoneTimeStretchRatio(speedNow);
        currentProcessor->setBasePitchSemitones(pitchNow);
        const int sourceLength = currentSample->stereo.getNumSamples();
        currentProcessor->setPlaybackRange(startNorm * sourceLength, endNorm * sourceLength);

        // Update APVTS parameters for UI feedback (especially spectrogram handles)
        *rangeStartParam = startNorm;
        apvts.getParameter("rangeStart")->sendValueChangedMessageToListeners(startNorm);
        *rangeEndParam = endNorm;
        apvts.getParameter("rangeEnd")->sendValueChangedMessageToListeners(endNorm);

        const int engineIdx = (int) apvts.getRawParameterValue("engine")->load();
        currentProcessor->setEngine(engineIdx == 0 ? SampleVoiceProcessor::Engine::RubberBand : SampleVoiceProcessor::Engine::Naive);
        currentProcessor->setRubberBandOptions(apvts.getRawParameterValue("rbWindowShort")->load() > 0.5f, apvts.getRawParameterValue("rbPhaseInd")->load() > 0.5f);
        currentProcessor->setLooping(apvts.getRawParameterValue("loop")->load() > 0.5f);

        // Generate the sample's audio into the OUTPUT buffer. This might set isPlaying to false if the sample ends.
        try {
            // Create a temporary buffer view for just the output bus
            juce::AudioBuffer<float> outputBuffer(outBus.getArrayOfWritePointers(), 
                                                   outBus.getNumChannels(), 
                                                   outBus.getNumSamples());
            currentProcessor->renderBlock(outputBuffer, midiMessages);
        } catch (...) {
            RtLogger::postf("[SampleLoader][FATAL] renderBlock exception");
            outBus.clear();
        }

        // --- 3. GATE (VCA) APPLICATION ---
        // If a gate is connected, use it to shape the volume of the audio we just generated.
        float lastGateValue = 1.0f;
        if (isParamInputConnected("gate_mod") && controlBus.getNumChannels() > 0)
        {
            const float* gateCV = controlBus.getReadPointer(0);  // Control Bus Channel 0 = Gate
            for (int ch = 0; ch < outBus.getNumChannels(); ++ch)
            {
                float* channelData = outBus.getWritePointer(ch);
                for (int i = 0; i < numSamples; ++i)
                {
                    const float gateValue = juce::jlimit(0.0f, 1.0f, gateCV[i]);
                    channelData[i] *= gateValue;
                    
                    // Update telemetry (throttled every 64 samples, only once per channel)
                    if (ch == 0 && (i & 0x3F) == 0)
                    {
                        setLiveParamValue("gate_live", gateValue);
                        lastGateValue = gateValue;
                    }
                }
            }
        }
        else
        {
            // No gate modulation - use static gate knob value
            lastGateValue = apvts.getRawParameterValue("gate")->load();
            setLiveParamValue("gate_live", lastGateValue);
        }
        
        // Apply main gate knob last
        outBus.applyGain(apvts.getRawParameterValue("gate")->load());
    }
    else
    {
        // Not playing: explicitly clear output now (safe after input analysis)
        outBus.clear();
    }
    
    // Update output values for cable inspector using block peak
    if (lastOutputValues.size() >= 2)
    {
        auto peakAbs = [&](int ch){ if (ch >= outBus.getNumChannels()) return 0.0f; const float* p = outBus.getReadPointer(ch); float m=0.0f; for (int i=0;i<outBus.getNumSamples();++i) m = juce::jmax(m, std::abs(p[i])); return m; };
        if (lastOutputValues[0]) lastOutputValues[0]->store(peakAbs(0));
        if (lastOutputValues[1]) lastOutputValues[1]->store(peakAbs(1));
    }
}

void SampleLoaderModuleProcessor::reset()
{
    if (sampleProcessor != nullptr)
    {
        sampleProcessor->reset();
    }
    
    if (currentSample != nullptr && rangeStartParam != nullptr)
    {
        readPosition = rangeStartParam->load() * currentSample->stereo.getNumSamples();
    }
    else
    {
        readPosition = 0.0;
    }
}

void SampleLoaderModuleProcessor::loadSample(const juce::File& file)
{
    if (!file.existsAsFile())
    {
        DBG("[Sample Loader] File does not exist: " + file.getFullPathName());
        return;
    }

    // 1) Load the original shared sample from the bank
    SampleBank sampleBank;
    std::shared_ptr<SampleBank::Sample> original;
    try {
        original = sampleBank.getOrLoad(file);
    } catch (...) {
        DBG("[Sample Loader][FATAL] Exception in SampleBank::getOrLoad");
        return;
    }
    if (original == nullptr || original->stereo.getNumSamples() <= 0)
    {
        DBG("[Sample Loader] Failed to load sample or empty: " + file.getFullPathName());
        return;
    }

    currentSampleName = file.getFileName();
    currentSamplePath = file.getFullPathName();
    apvts.state.setProperty ("samplePath", currentSamplePath, nullptr);

    // --- THIS IS THE FIX ---
    // Store the sample's metadata in our new member variables.
    sampleDurationSeconds = (double)original->stereo.getNumSamples() / original->sampleRate;
    sampleSampleRate = (int)original->sampleRate;
    // --- END OF FIX ---

    // 2) Create a private STEREO copy (preserve stereo or duplicate mono)
    auto privateCopy = std::make_shared<SampleBank::Sample>();
    privateCopy->sampleRate = original->sampleRate;
    const int numSamples = original->stereo.getNumSamples();
    privateCopy->stereo.setSize(2, numSamples); // Always stereo output

    if (original->stereo.getNumChannels() <= 1)
    {
        // Mono source: duplicate to both L and R channels
        privateCopy->stereo.copyFrom(0, 0, original->stereo, 0, 0, numSamples); // L = Mono
        privateCopy->stereo.copyFrom(1, 0, original->stereo, 0, 0, numSamples); // R = Mono
        DBG("[Sample Loader] Loaded mono sample and duplicated to stereo: " << file.getFileName());
    }
    else
    {
        // Stereo (or multi-channel) source: copy L and R channels
        privateCopy->stereo.copyFrom(0, 0, original->stereo, 0, 0, numSamples); // L channel
        privateCopy->stereo.copyFrom(1, 0, original->stereo, 1, 0, numSamples); // R channel
        DBG("[Sample Loader] Loaded stereo sample: " << file.getFileName());
    }

    // 3) Atomically assign our private copy for this module
    currentSample = privateCopy;
    generateSpectrogram();

    // 4) If the module is prepared, stage a new processor
    if (getSampleRate() > 0.0 && getBlockSize() > 0)
    {
        createSampleProcessor();
    }
    else
    {
        DBG("[Sample Loader][Defer] Module not prepared yet; will create processor in prepareToPlay");
    }
}
void SampleLoaderModuleProcessor::getStateInformation (juce::MemoryBlock& destData)
{
    juce::ValueTree vt ("SampleLoader");
    vt.setProperty ("samplePath", currentSamplePath, nullptr);
    vt.setProperty ("speed", apvts.getRawParameterValue("speed")->load(), nullptr);
    vt.setProperty ("pitch", apvts.getRawParameterValue("pitch")->load(), nullptr);
    vt.setProperty ("gate", apvts.getRawParameterValue("gate")->load(), nullptr);
    vt.setProperty ("engine", (int) apvts.getRawParameterValue("engine")->load(), nullptr);
    vt.setProperty ("rbWindowShort", apvts.getRawParameterValue("rbWindowShort")->load() > 0.5f, nullptr);
    vt.setProperty ("rbPhaseInd", apvts.getRawParameterValue("rbPhaseInd")->load() > 0.5f, nullptr);
    vt.setProperty ("loop", apvts.getRawParameterValue("loop")->load() > 0.5f, nullptr);
    if (auto xml = vt.createXml())
        copyXmlToBinary (*xml, destData);
}

void SampleLoaderModuleProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    std::unique_ptr<juce::XmlElement> xml (getXmlFromBinary (data, sizeInBytes));
    if (! xml) return;
    juce::ValueTree vt = juce::ValueTree::fromXml (*xml);
    if (! vt.isValid()) return;
    currentSamplePath = vt.getProperty ("samplePath").toString();
    if (currentSamplePath.isNotEmpty())
        loadSample (juce::File (currentSamplePath));
    if (auto* p = apvts.getParameter ("speed"))
        p->setValueNotifyingHost (apvts.getParameterRange("speed").convertTo0to1 ((float) vt.getProperty ("speed", 1.0f)));
    if (auto* p = apvts.getParameter ("pitch"))
        p->setValueNotifyingHost (apvts.getParameterRange("pitch").convertTo0to1 ((float) vt.getProperty ("pitch", 0.0f)));
    if (auto* p = apvts.getParameter ("gate"))
        p->setValueNotifyingHost (apvts.getParameterRange("gate").convertTo0to1 ((float) vt.getProperty ("gate", 0.8f)));
    if (auto* p = apvts.getParameter ("engine"))
        p->setValueNotifyingHost ((float) (int) vt.getProperty ("engine", 0));
    if (auto* p = apvts.getParameter ("rbWindowShort"))
        p->setValueNotifyingHost ((bool) vt.getProperty ("rbWindowShort", true) ? 1.0f : 0.0f);
    if (auto* p = apvts.getParameter ("rbPhaseInd"))
        p->setValueNotifyingHost ((bool) vt.getProperty ("rbPhaseInd", true) ? 1.0f : 0.0f);
    if (auto* p = apvts.getParameter ("loop"))
        p->setValueNotifyingHost ((bool) vt.getProperty ("loop", false) ? 1.0f : 0.0f);
}

void SampleLoaderModuleProcessor::loadSample(const juce::String& filePath)
{
    loadSample(juce::File(filePath));
}

juce::String SampleLoaderModuleProcessor::getCurrentSampleName() const
{
    return currentSampleName;
}

bool SampleLoaderModuleProcessor::hasSampleLoaded() const
{
    return currentSample != nullptr;
}

// Legacy SoundTouch setters removed

void SampleLoaderModuleProcessor::setDebugOutput(bool enabled)
{
    debugOutput = enabled;
}

void SampleLoaderModuleProcessor::logCurrentSettings() const
{
    if (debugOutput)
    {
        DBG("[Sample Loader] Current Settings:");
        DBG("  Sample: " + currentSampleName);
        DBG("  Speed: " + juce::String(apvts.getRawParameterValue("speed")->load()));
        DBG("  Pitch: " + juce::String(apvts.getRawParameterValue("pitch")->load()));
    }
}

void SampleLoaderModuleProcessor::updateSoundTouchSettings() {}

void SampleLoaderModuleProcessor::randomizeSample()
{
    if (currentSamplePath.isEmpty())
        return;
        
    juce::File currentFile(currentSamplePath);
    juce::File parentDir = currentFile.getParentDirectory();
    
    if (!parentDir.exists() || !parentDir.isDirectory())
        return;
        
    // Get all audio files in the same directory
    juce::Array<juce::File> audioFiles;
    parentDir.findChildFiles(audioFiles, juce::File::findFiles, true, "*.wav;*.mp3;*.flac;*.aiff;*.ogg");
    
    if (audioFiles.size() <= 1)
        return;
        
    // Remove current file from the list
    for (int i = audioFiles.size() - 1; i >= 0; --i)
    {
        if (audioFiles[i].getFullPathName() == currentSamplePath)
        {
            audioFiles.remove(i);
            break;
        }
    }
    
    if (audioFiles.isEmpty())
        return;
        
    // Pick a random file
    juce::Random rng(juce::Time::getMillisecondCounterHiRes());
    juce::File randomFile = audioFiles[rng.nextInt(audioFiles.size())];
    
    DBG("[Sample Loader] Randomizing to: " + randomFile.getFullPathName());
    loadSample(randomFile);
}

void SampleLoaderModuleProcessor::createSampleProcessor()
{
    if (currentSample == nullptr)
    {
        return;
    }
    // Guard against double-creation and race with audio thread: build new then swap under lock
    auto newProcessor = std::make_unique<SampleVoiceProcessor>(currentSample);
    
    // Set up the sample processor
    const double sr = getSampleRate() > 0.0 ? getSampleRate() : 48000.0;
    const int bs = getBlockSize() > 0 ? getBlockSize() : 512;
    newProcessor->prepareToPlay(sr, bs);
    
    // --- Set initial playback range ---
    const float startNorm = rangeStartParam->load();
    const float endNorm = rangeEndParam->load();
    const double startSample = startNorm * currentSample->stereo.getNumSamples();
    const double endSample = endNorm * currentSample->stereo.getNumSamples();
    newProcessor->setPlaybackRange(startSample, endSample);
    newProcessor->resetPosition(); // Reset position without starting playback - wait for trigger
    
    // Set parameters from our APVTS
    newProcessor->setZoneTimeStretchRatio(apvts.getRawParameterValue("speed")->load());
    newProcessor->setBasePitchSemitones(apvts.getRawParameterValue("pitch")->load());
    newSampleProcessor.store(newProcessor.release());
    DBG("[Sample Loader] Staged new sample processor for: " << currentSampleName);
    
    DBG("[Sample Loader] Created sample processor for: " + currentSampleName);
}

void SampleLoaderModuleProcessor::generateSpectrogram()
{
    const juce::ScopedLock lock(imageLock);
    spectrogramImage = juce::Image(); // Clear previous image

    if (currentSample == nullptr || currentSample->stereo.getNumSamples() == 0)
        return;

    const int fftOrder = 10;
    const int fftSize = 1 << fftOrder;
    const int hopSize = fftSize / 4;
    const int numHops = (currentSample->stereo.getNumSamples() - fftSize) / hopSize;

    if (numHops <= 0) return;

    // Create a mono version for analysis if necessary
    juce::AudioBuffer<float> monoBuffer;
    if (currentSample->stereo.getNumChannels() > 1)
    {
        monoBuffer.setSize(1, currentSample->stereo.getNumSamples());
        monoBuffer.copyFrom(0, 0, currentSample->stereo, 0, 0, currentSample->stereo.getNumSamples());
        monoBuffer.addFrom(0, 0, currentSample->stereo, 1, 0, currentSample->stereo.getNumSamples(), 0.5f);
        monoBuffer.applyGain(0.5f);
    }
    const float* audioData = (currentSample->stereo.getNumChannels() > 1) ? monoBuffer.getReadPointer(0) : currentSample->stereo.getReadPointer(0);

    // Use RGB so JUCE's OpenGLTexture uploads with expected format
    spectrogramImage = juce::Image(juce::Image::RGB, numHops, fftSize / 2, true);
    juce::dsp::FFT fft(fftOrder);
    juce::dsp::WindowingFunction<float> window(fftSize, juce::dsp::WindowingFunction<float>::hann);
    std::vector<float> fftData(fftSize * 2);

    for (int i = 0; i < numHops; ++i)
    {
        std::fill(fftData.begin(), fftData.end(), 0.0f);
        memcpy(fftData.data(), audioData + (i * hopSize), fftSize * sizeof(float));

        window.multiplyWithWindowingTable(fftData.data(), fftSize);
        fft.performFrequencyOnlyForwardTransform(fftData.data());

        for (int j = 0; j < fftSize / 2; ++j)
        {
            const float db = juce::Decibels::gainToDecibels(juce::jmax(fftData[j], 1.0e-9f), -100.0f);
            float level = juce::jmap(db, -100.0f, 0.0f, 0.0f, 1.0f);
            level = juce::jlimit(0.0f, 1.0f, level);
            spectrogramImage.setPixelAt(i, (fftSize / 2) - 1 - j, juce::Colour::fromFloatRGBA(level, level, level, 1.0f));
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void SampleLoaderModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    // --- THIS IS THE DEFINITIVE FIX ---
    // 1. Draw all the parameter sliders and buttons FIRST.
    ImGui::PushItemWidth(itemWidth);

    if (ImGui::Button("Load Sample", ImVec2(itemWidth * 0.48f, 0)))
    {
        juce::File startDir;
        {
            auto appFile = juce::File::getSpecialLocation(juce::File::currentApplicationFile);
            auto dir = appFile.getParentDirectory();
            for (int i = 0; i < 8 && dir.exists(); ++i)
            {
                auto candidate = dir.getSiblingFile("audio").getChildFile("samples");
                if (candidate.exists() && candidate.isDirectory()) { startDir = candidate; break; }
                dir = dir.getParentDirectory();
            }
        }
        if (! startDir.exists()) startDir = juce::File();
        fileChooser = std::make_unique<juce::FileChooser>("Select Audio Sample", startDir, "*.wav;*.mp3;*.flac;*.aiff;*.ogg");
        auto chooserFlags = juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectFiles;
        fileChooser->launchAsync(chooserFlags, [this](const juce::FileChooser& fc)
        {
            try {
                auto file = fc.getResult();
                if (file != juce::File{})
                {
                    juce::Logger::writeToLog("[Sample Loader] User selected file: " + file.getFullPathName());
                    loadSample(file);
                }
            } catch (...) {
                juce::Logger::writeToLog("[Sample Loader][FATAL] Exception during file chooser callback");
            }
        });
    }
    ImGui::SameLine();
    if (ImGui::Button("Random", ImVec2(itemWidth * 0.48f, 0))) { randomizeSample(); }

    // Range selection is now handled by the interactive spectrogram in the UI component

    ImGui::Spacing();
    // Main parameters in compact layout
    bool speedModulated = isParamModulated("speed_mod");
    if (speedModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    float speed = speedModulated ? getLiveParamValueFor("speed_mod", "speed_live", apvts.getRawParameterValue("speed")->load()) 
                                 : apvts.getRawParameterValue("speed")->load();
    if (ImGui::SliderFloat("Speed", &speed, 0.25f, 4.0f, "%.2fx"))
    {
        apvts.getParameter("speed")->setValueNotifyingHost(apvts.getParameterRange("speed").convertTo0to1(speed));
        onModificationEnded();
    }
    if (! speedModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("speed"), "speed", speed);
    if (speedModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }
    
    bool pitchModulated = isParamModulated("pitch_mod");
    if (pitchModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    float pitch = pitchModulated ? getLiveParamValueFor("pitch_mod", "pitch_live", apvts.getRawParameterValue("pitch")->load()) 
                                 : apvts.getRawParameterValue("pitch")->load();
    if (ImGui::SliderFloat("Pitch", &pitch, -24.0f, 24.0f, "%.1f st"))
    {
        apvts.getParameter("pitch")->setValueNotifyingHost(apvts.getParameterRange("pitch").convertTo0to1(pitch));
        onModificationEnded();
    }
    if (! pitchModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("pitch"), "pitch", pitch);
    if (pitchModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }
    
    // --- Gate slider (formerly volume) ---
    bool gateModulated = isParamModulated("gate_mod"); 
    if (gateModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    float gate = gateModulated ? getLiveParamValueFor("gate_mod", "gate_live", apvts.getRawParameterValue("gate")->load())
                               : apvts.getRawParameterValue("gate")->load();
    if (ImGui::SliderFloat("Gate", &gate, 0.0f, 1.0f, "%.2f"))
    {
        if (!gateModulated) {
            apvts.getParameter("gate")->setValueNotifyingHost(apvts.getParameterRange("gate").convertTo0to1(gate));
            onModificationEnded();
        }
    }
    if (!gateModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("gate"), "gate", gate);
    if (gateModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    // Range parameters with live modulation feedback
    bool rangeStartModulated = isParamModulated("rangeStart_mod");
    if (rangeStartModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    float rangeStart = rangeStartModulated ? getLiveParamValueFor("rangeStart_mod", "rangeStart_live", rangeStartParam->load()) 
                                          : rangeStartParam->load();
    float rangeEnd = rangeEndParam->load();
    if (ImGui::SliderFloat("Range Start", &rangeStart, 0.0f, 1.0f, "%.3f"))
    {
        // Ensure start doesn't exceed end (leave at least 0.001 gap)
        rangeStart = juce::jmin(rangeStart, rangeEnd - 0.001f);
        apvts.getParameter("rangeStart")->setValueNotifyingHost(apvts.getParameterRange("rangeStart").convertTo0to1(rangeStart));
        onModificationEnded();
    }
    if (! rangeStartModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("rangeStart"), "rangeStart", rangeStart);
    if (rangeStartModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }
    
    bool rangeEndModulated = isParamModulated("rangeEnd_mod");
    if (rangeEndModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    rangeEnd = rangeEndModulated ? getLiveParamValueFor("rangeEnd_mod", "rangeEnd_live", rangeEndParam->load()) 
                                 : rangeEndParam->load();
    rangeStart = rangeStartParam->load(); // Refresh rangeStart for validation
    if (ImGui::SliderFloat("Range End", &rangeEnd, 0.0f, 1.0f, "%.3f"))
    {
        // Ensure end doesn't go below start (leave at least 0.001 gap)
        rangeEnd = juce::jmax(rangeEnd, rangeStart + 0.001f);
        apvts.getParameter("rangeEnd")->setValueNotifyingHost(apvts.getParameterRange("rangeEnd").convertTo0to1(rangeEnd));
        onModificationEnded();
    }
    if (! rangeEndModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("rangeEnd"), "rangeEnd", rangeEnd);
    if (rangeEndModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }
    
    bool loop = apvts.getRawParameterValue("loop")->load() > 0.5f;
    if (ImGui::Checkbox("Loop", &loop))
    {
        apvts.getParameter("loop")->setValueNotifyingHost(loop ? 1.0f : 0.0f);
        onModificationEnded();
    }
    
    int engineIdx = (int) apvts.getRawParameterValue("engine")->load();
    const char* items[] = { "RubberBand", "Naive" };
    if (ImGui::Combo("Engine", &engineIdx, items, 2))
    {
        apvts.getParameter("engine")->setValueNotifyingHost((float) engineIdx);
        if (sampleProcessor)
            sampleProcessor->setEngine(engineIdx == 0 ? SampleVoiceProcessor::Engine::RubberBand
                                                      : SampleVoiceProcessor::Engine::Naive);
        onModificationEnded();
    }
    
    if (engineIdx == 0)
    {
        bool winShort = apvts.getRawParameterValue("rbWindowShort")->load() > 0.5f;
        if (ImGui::Checkbox("RB Window Short", &winShort))
        {
            apvts.getParameter("rbWindowShort")->setValueNotifyingHost(winShort ? 1.0f : 0.0f);
            if (sampleProcessor) sampleProcessor->setRubberBandOptions(winShort, apvts.getRawParameterValue("rbPhaseInd")->load() > 0.5f);
            onModificationEnded();
        }
        bool phaseInd = apvts.getRawParameterValue("rbPhaseInd")->load() > 0.5f;
        if (ImGui::Checkbox("RB Phase Independent", &phaseInd))
        {
            apvts.getParameter("rbPhaseInd")->setValueNotifyingHost(phaseInd ? 1.0f : 0.0f);
            if (sampleProcessor) sampleProcessor->setRubberBandOptions(apvts.getRawParameterValue("rbWindowShort")->load() > 0.5f, phaseInd);
            onModificationEnded();
        }
    }
    
    ImGui::PopItemWidth();
    
    // 2. Now, draw the sample information and visual display AT THE END.
    if (hasSampleLoaded())
    {
        ImGui::Separator();
        ImGui::Text("Sample: %s", currentSampleName.toRawUTF8());
        ImGui::Text("Duration: %.2f s", sampleDurationSeconds);
        ImGui::Text("Rate: %d Hz", sampleSampleRate);

        // Draw a colored button as a visible drop zone for hot-swapping
        ImVec2 swapZoneSize = ImVec2(itemWidth, 100.0f);
        ImGui::PushStyleColor(ImGuiCol_Button, IM_COL32(0, 180, 180, 60));
        ImGui::Button("##dropzone_sample_swap", swapZoneSize);
        ImGui::PopStyleColor();
        
        // Draw text centered on the button
        const char* text = "Drop to Swap Sample";
        ImVec2 textSize = ImGui::CalcTextSize(text);
        ImVec2 textPos = ImGui::GetItemRectMin();
        textPos.x += (swapZoneSize.x - textSize.x) * 0.5f;
        textPos.y += (swapZoneSize.y - textSize.y) * 0.5f;
        ImGui::GetWindowDrawList()->AddText(textPos, IM_COL32(200, 200, 200, 255), text);

        // 3. Make this button the drop target for hot-swapping.
        if (ImGui::BeginDragDropTarget())
        {
            if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_SAMPLE_PATH"))
            {
                const char* path = (const char*)payload->Data;
                loadSample(juce::File(path));
                onModificationEnded();
            }
            ImGui::EndDragDropTarget();
        }
    }
    else
    {
        ImGui::Separator();
        // If NO sample is loaded, draw a dedicated, colored dropzone.
        ImVec2 dropZoneSize = ImVec2(itemWidth, 60.0f);
        
        // Use a cyan color to match the Sample browser theme
        ImGui::PushStyleColor(ImGuiCol_Button, IM_COL32(0, 180, 180, 100));
        ImGui::Button("##dropzone_sample", dropZoneSize);
        ImGui::PopStyleColor();
        
        // Draw text centered on top of the button
        const char* text = "Drop Sample Here";
        ImVec2 textSize = ImGui::CalcTextSize(text);
        ImVec2 textPos = ImGui::GetItemRectMin();
        textPos.x += (dropZoneSize.x - textSize.x) * 0.5f;
        textPos.y += (dropZoneSize.y - textSize.y) * 0.5f;
        ImGui::GetWindowDrawList()->AddText(textPos, IM_COL32_WHITE, text);

        // Make THIS BUTTON the drop target.
        if (ImGui::BeginDragDropTarget())
        {
            if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_SAMPLE_PATH"))
            {
                const char* path = (const char*)payload->Data;
                loadSample(juce::File(path));
                onModificationEnded();
            }
            ImGui::EndDragDropTarget();
        }
    }
    // --- END OF FIX ---
}

void SampleLoaderModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Modulation inputs
    helpers.drawAudioInputPin("Pitch Mod", 0);
    helpers.drawAudioInputPin("Speed Mod", 1);
    helpers.drawAudioInputPin("Gate Mod", 2);
    helpers.drawAudioInputPin("Trigger Mod", 3);
    helpers.drawAudioInputPin("Range Start Mod", 4);
    helpers.drawAudioInputPin("Range End Mod", 5);
    helpers.drawAudioInputPin("Randomize Trig", 6);
    // Audio outputs (stereo)
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif

// Parameter bus contract implementation (multi-bus architecture like TTS Performer)
bool SampleLoaderModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // Bus 0: Playback Mods (Pitch, Speed) - flat channels 0-1
    if (paramId == "pitch_mod") { outBusIndex = 0; outChannelIndexInBus = 0; return true; }
    if (paramId == "speed_mod") { outBusIndex = 0; outChannelIndexInBus = 1; return true; }
    
    // Bus 1: Control Mods (Gate, Trigger) - flat channels 2-3
    if (paramId == "gate_mod") { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    if (paramId == "trigger_mod") { outBusIndex = 1; outChannelIndexInBus = 1; return true; }
    
    // Bus 2: Range Mods (Range Start, Range End) - flat channels 4-5
    if (paramId == "rangeStart_mod") { outBusIndex = 2; outChannelIndexInBus = 0; return true; }
    if (paramId == "rangeEnd_mod") { outBusIndex = 2; outChannelIndexInBus = 1; return true; }
    
    // Bus 3: Randomize - flat channel 6
    if (paramId == "randomize_mod") { outBusIndex = 3; outChannelIndexInBus = 0; return true; }
    
    return false;
}

================================================================================
FILE: juce\Source\audio\modules\SampleLoaderModuleProcessor.h
================================================================================


#pragma once

#include "../graph/ModularSynthProcessor.h"
#include "../assets/SampleBank.h"
#include "../voices/SampleVoiceProcessor.h"
#include "../dsp/TimePitchProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <juce_gui_basics/juce_gui_basics.h>

class SampleLoaderModuleProcessor : public ModuleProcessor
{
public:
    SampleLoaderModuleProcessor();
    ~SampleLoaderModuleProcessor() override = default;

    const juce::String getName() const override { return "sample loader"; }

    // --- Audio Processing ---
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages) override;
    void reset() override;
    void getStateInformation (juce::MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    // --- Required by ModuleProcessor ---
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // --- Sample Loading ---
    void loadSample(const juce::File& file);
    void loadSample(const juce::String& filePath);
    void randomizeSample();
    juce::String getCurrentSampleName() const;
    bool hasSampleLoaded() const;

    // (Removed SoundTouch controls; using Rubber Band via TimePitchProcessor)
    
    // --- Debug and Monitoring ---
    void setDebugOutput(bool enabled);
    void logCurrentSettings() const;

    // --- Parameter Layout ---
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    // Parameter bus contract implementation (must be available in Collider too)
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Pitch Mod";
            case 1: return "Speed Mod";
            case 2: return "Gate Mod";
            case 3: return "Trigger Mod";
            case 4: return "Range Start Mod";
            case 5: return "Range End Mod";
            case 6: return "Randomize Trig";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
    
    // CRITICAL: Accept multi-bus layout (like TTS Performer)
    bool isBusesLayoutSupported(const BusesLayout& layouts) const override
    {
        // Accept any layout as long as we have at least the minimum channels
        if (layouts.getMainInputChannelSet().isDisabled())
            return false;
        if (layouts.getMainOutputChannelSet().isDisabled())
            return false;
        return true;
    }
    
    // --- Spectrogram Access ---
    juce::Image getSpectrogramImage()
    {
        const juce::ScopedLock lock(imageLock);
        return spectrogramImage;
    }

private:
    // --- ADD THIS STATE VARIABLE ---
    std::atomic<bool> isPlaying { false };

    // --- APVTS ---
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* engineParam { nullptr }; // 0: rubberband, 1: naive
    
    // --- Sample Management ---
    std::shared_ptr<SampleBank::Sample> currentSample;
    std::unique_ptr<SampleVoiceProcessor> sampleProcessor;
    std::atomic<SampleVoiceProcessor*> newSampleProcessor { nullptr };
    juce::CriticalSection processorSwapLock;
    std::unique_ptr<SampleVoiceProcessor> processorToDelete;
    juce::String currentSampleName;
    juce::String currentSamplePath;
    
    // ADD THESE TWO LINES
    double sampleDurationSeconds = 0.0;
    int sampleSampleRate = 0;
    
    // Trigger edge detection for trigger_mod
    bool lastTriggerHigh { false };
    bool lastRandomizeTriggerHigh { false };
    
#if defined(PRESET_CREATOR_UI)
    // Keep a persistent chooser so async callback remains valid
    std::unique_ptr<juce::FileChooser> fileChooser;
#endif
    
    // Rubber Band is configured in TimePitchProcessor; keep no per-node ST params
    
    // --- Debug ---
    bool debugOutput { false };
    
    // --- Spectrogram Data ---
    juce::Image spectrogramImage;
    juce::CriticalSection imageLock;

    // --- Range Parameters ---
    std::atomic<float>* rangeStartParam { nullptr };
    std::atomic<float>* rangeEndParam { nullptr };
    std::atomic<float>* rangeStartModParam { nullptr };
    std::atomic<float>* rangeEndModParam { nullptr };
    double readPosition { 0.0 };
    
    // --- Parameter References ---
    // Parameters are accessed directly via apvts.getRawParameterValue()
    
    // --- Internal Methods ---
    void updateSoundTouchSettings();
    void createSampleProcessor();
    void generateSpectrogram();
};


================================================================================
FILE: juce\Source\audio\modules\SAndHModuleProcessor.cpp
================================================================================


#include "SAndHModuleProcessor.h"

SAndHModuleProcessor::SAndHModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(7), true) // 0-1=signal, 2-3=trigger, 4=threshold mod, 5=edge mod, 6=slew mod
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "SAndHParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue ("threshold");
    slewMsParam = apvts.getRawParameterValue ("slewMs");
    edgeParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter ("edge"));
    thresholdModParam = apvts.getRawParameterValue ("threshold_mod");
    slewMsModParam = apvts.getRawParameterValue ("slewMs_mod");
    edgeModParam = apvts.getRawParameterValue ("edge_mod");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout SAndHModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("threshold", "Threshold", juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterChoice> ("edge", "Edge", juce::StringArray { "Rising", "Falling", "Both" }, 0));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("slewMs", "Slew (ms)", juce::NormalisableRange<float> (0.0f, 2000.0f, 0.01f, 0.35f), 0.0f));
    
    // Add modulation parameters
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("threshold_mod", "Threshold Mod", 0.0f, 1.0f, 0.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("slewMs_mod", "Slew Mod", 0.0f, 1.0f, 0.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("edge_mod", "Edge Mod", 0.0f, 1.0f, 0.0f));
    return { params.begin(), params.end() };
}

void SAndHModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sr = sampleRate;
    lastTrigL = lastTrigR = 0.0f;
    heldL = heldR = 0.0f;
    outL = outR = 0.0f;
}

void SAndHModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    // Single input bus with 4 channels: 0-1 signal, 2-3 trigger
    auto in  = getBusBuffer (buffer, true, 0);
    auto out = getBusBuffer (buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    
    // --- CORRECTED POINTER LOGIC ---
    const float* sigL = in.getReadPointer(0);
    // If input is mono, sigR should be the same as sigL.
    const float* sigR = in.getNumChannels() > 1 ? in.getReadPointer(1) : sigL;
    
    const float* trgL = in.getNumChannels() > 2 ? in.getReadPointer(2) : sigL;
    // If trigger input is mono, trgR should be the same as trgL, NOT sigR.
    const float* trgR = in.getNumChannels() > 3 ? in.getReadPointer(3) : trgL;
    // --- END OF CORRECTION ---
    float* outLw = out.getWritePointer (0);
    float* outRw = out.getNumChannels() > 1 ? out.getWritePointer (1) : out.getWritePointer (0);

    // Get modulation CV inputs from the single unified input bus
    const bool isThresholdMod = isParamInputConnected("threshold_mod");
    const bool isEdgeMod = isParamInputConnected("edge_mod");
    const bool isSlewMod = isParamInputConnected("slewMs_mod");

    const float* thresholdCV = isThresholdMod && in.getNumChannels() > 4 ? in.getReadPointer(4) : nullptr;
    const float* edgeCV = isEdgeMod && in.getNumChannels() > 5 ? in.getReadPointer(5) : nullptr;
    const float* slewCV = isSlewMod && in.getNumChannels() > 6 ? in.getReadPointer(6) : nullptr;

    // Get base parameter values ONCE
    const float baseThreshold = thresholdParam != nullptr ? thresholdParam->load() : 0.5f;
    const float baseSlewMs = slewMsParam != nullptr ? slewMsParam->load() : 0.0f;
    const int baseEdge = edgeParam != nullptr ? edgeParam->getIndex() : 0;

    // Variables to store final modulated values for UI telemetry
    float finalThreshold = baseThreshold;
    float finalSlewMs = baseSlewMs;
    int finalEdge = baseEdge;

    for (int i = 0; i < numSamples; ++i)
    {
        // PER-SAMPLE FIX: Calculate effective parameters FOR THIS SAMPLE
        float thr = baseThreshold;
        if (isThresholdMod && thresholdCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, thresholdCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base threshold
            const float thresholdRange = 0.3f; // CV can modulate threshold by +/- 0.3
            const float thresholdOffset = (cv - 0.5f) * thresholdRange; // Center around 0
            thr = baseThreshold + thresholdOffset;
            thr = juce::jlimit(0.0f, 1.0f, thr);
        }
        
        float slewMs = baseSlewMs;
        if (isSlewMod && slewCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, slewCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base slew time
            const float slewRange = 500.0f; // CV can modulate slew by +/- 500ms
            const float slewOffset = (cv - 0.5f) * slewRange; // Center around 0
            slewMs = baseSlewMs + slewOffset;
            slewMs = juce::jlimit(0.0f, 2000.0f, slewMs);
        }
        
        int edge = baseEdge;
        if (isEdgeMod && edgeCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, edgeCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base edge setting
            const int edgeOffset = static_cast<int>((cv - 0.5f) * 3.0f); // Range [-1, +1]
            edge = (baseEdge + edgeOffset + 3) % 3; // Wrap around (0,1,2)
        }

        // Store final values for telemetry (use last sample's values)
        finalThreshold = thr;
        finalSlewMs = slewMs;
        finalEdge = edge;
        
        const float slewCoeff = (slewMs <= 0.0f) ? 1.0f : (float) (1.0 - std::exp(-1.0 / (0.001 * slewMs * sr)));
        
        const float tL = trgL[i];
        const float tR = trgR[i];
        const bool riseL = (tL > thr && lastTrigL <= thr);
        const bool fallL = (tL < thr && lastTrigL >= thr);
        const bool riseR = (tR > thr && lastTrigR <= thr);
        const bool fallR = (tR < thr && lastTrigR >= thr);

        const bool doL = (edge == 0 && riseL) || (edge == 1 && fallL) || (edge == 2 && (riseL || fallL));
        const bool doR = (edge == 0 && riseR) || (edge == 1 && fallR) || (edge == 2 && (riseR || fallR));

        if (doL) heldL = sigL[i];
        if (doR) heldR = sigR[i];
        lastTrigL = tL; lastTrigR = tR;
        // Slew limiting toward target
        outL = outL + slewCoeff * (heldL - outL);
        outR = outR + slewCoeff * (heldR - outR);
        outLw[i] = outL;
        outRw[i] = outR;
    }
    
    // Store live modulated values for UI display (use last sample values)
    setLiveParamValue("threshold_live", finalThreshold);
    setLiveParamValue("edge_live", static_cast<float>(finalEdge));
    setLiveParamValue("slewMs_live", finalSlewMs);

    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outLw[numSamples - 1]);
        if (lastOutputValues[1]) lastOutputValues[1]->store(outRw[numSamples - 1]);
    }
}

// Parameter bus contract implementation
bool SAndHModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "threshold_mod") { outChannelIndexInBus = 4; return true; }
    if (paramId == "edge_mod") { outChannelIndexInBus = 5; return true; }
    if (paramId == "slewMs_mod") { outChannelIndexInBus = 6; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\SAndHModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class SAndHModuleProcessor : public ModuleProcessor
{
public:
    SAndHModuleProcessor();
    ~SAndHModuleProcessor() override = default;

    const juce::String getName() const override { return "s&h"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float thr=0.5f, slew=0.0f; int edge=0;
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("threshold"))) thr = *p;
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("edge"))) edge = p->getIndex();
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("slewMs"))) slew = *p;
        
        ImGui::PushItemWidth (itemWidth);

        // Threshold
        bool isThreshModulated = isParamModulated("threshold_mod");
        if (isThreshModulated) {
            thr = getLiveParamValueFor("threshold_mod", "threshold_live", thr);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Threshold", &thr, 0.0f, 1.0f)) if (!isThreshModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("threshold"))) *p = thr;
        if (!isThreshModulated) adjustParamOnWheel (ap.getParameter ("threshold"), "threshold", thr);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isThreshModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Edge
        bool isEdgeModulated = isParamModulated("edge_mod");
        if (isEdgeModulated) {
            edge = static_cast<int>(getLiveParamValueFor("edge_mod", "edge_live", static_cast<float>(edge)));
            ImGui::BeginDisabled();
        }
        const char* items = "Rising\0Falling\0Both\0\0";
        if (ImGui::Combo ("Edge", &edge, items)) if (!isEdgeModulated) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("edge"))) *p = edge;
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isEdgeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Slew
        bool isSlewModulated = isParamModulated("slewMs_mod");
        if (isSlewModulated) {
            slew = getLiveParamValueFor("slewMs_mod", "slewMs_live", slew);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Slew (ms)", &slew, 0.0f, 2000.0f)) if (!isSlewModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("slewMs"))) *p = slew;
        if (!isSlewModulated) adjustParamOnWheel (ap.getParameter ("slewMs"), "slewMs", slew);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isSlewModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Two stereo input pairs: signal (0,1) and trig (2,3)
        helpers.drawAudioInputPin("Signal In L", 0);
        helpers.drawAudioInputPin("Signal In R", 1);
        helpers.drawAudioInputPin("Trig In L", 2);
        helpers.drawAudioInputPin("Trig In R", 3);

        // CORRECTED MODULATION PINS - Use absolute channel indices
        int busIdx, chanInBus;
        if (getParamRouting("threshold_mod", busIdx, chanInBus))
            helpers.drawAudioInputPin("Threshold Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("slewMs_mod", busIdx, chanInBus))
            helpers.drawAudioInputPin("Slew Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("edge_mod", busIdx, chanInBus))
            helpers.drawAudioInputPin("Edge Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Signal In L";
            case 1: return "Signal In R";
            case 2: return "Trig In L";
            case 3: return "Trig In R";
            case 4: return "Threshold Mod";
            case 5: return "Edge Mod";
            case 6: return "Slew Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // State
    float lastTrigL { 0.0f };
    float lastTrigR { 0.0f };
    float heldL { 0.0f };
    float heldR { 0.0f };
    float outL  { 0.0f };
    float outR  { 0.0f };
    double sr { 44100.0 };

    // Parameters
    std::atomic<float>* thresholdParam { nullptr }; // 0..1
    juce::AudioParameterChoice* edgeParam { nullptr }; // 0 rising, 1 falling, 2 both
    std::atomic<float>* slewMsParam { nullptr }; // 0..2000 ms
    std::atomic<float>* thresholdModParam { nullptr };
    std::atomic<float>* slewMsModParam { nullptr };
    std::atomic<float>* edgeModParam { nullptr };
};




================================================================================
FILE: juce\Source\audio\modules\ScopeModuleProcessor.cpp
================================================================================


#include "ScopeModuleProcessor.h"

ScopeModuleProcessor::ScopeModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Input", juce::AudioChannelSet::mono(), true)
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts (*this, nullptr, "ScopeParams", createParameterLayout())
{
    monitorSecondsParam = apvts.getRawParameterValue ("monitorSeconds");
    // Inspector value tracking
    lastOutputValues.clear();
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout ScopeModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("monitorSeconds", "Monitor Seconds", juce::NormalisableRange<float>(0.5f, 20.0f, 0.1f), 5.0f));
    return { params.begin(), params.end() };
}

void ScopeModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    currentSampleRate = (sampleRate > 0.0 ? sampleRate : 44100.0);
    // Scope ring for UI drawing
    scopeBuffer.setSize (1, 1024);
    scopeBuffer.clear();
    writePos = 0;
    // Rolling min/max history at ~1 kHz
    decimation = juce::jmax (1, (int) std::round (currentSampleRate / 1000.0));
    histCapacity = juce::jlimit (100, 50000, (int) std::round ((monitorSecondsParam ? monitorSecondsParam->load() : 5.0f) * (currentSampleRate / decimation)));
    history.assign (histCapacity, 0.0f);
    histWrite = 0; histCount = 0; rollMin = 0.0f; rollMax = 0.0f;
}

void ScopeModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    // True pass-through: copy input to output, channel-matched, clear extras
    auto in  = getBusBuffer (buffer, true, 0);
    auto out = getBusBuffer (buffer, false, 0);
    const int n = buffer.getNumSamples();
    // Mono passthrough; avoid aliasing
    if (in.getNumChannels() > 0 && out.getNumChannels() > 0)
    {
        auto* srcCh = in.getReadPointer (0);
        auto* dst = out.getWritePointer (0);
        if (dst != srcCh) juce::FloatVectorOperations::copy (dst, srcCh, n);
    }

    // Update inspector with block peak of output
    if (! lastOutputValues.empty())
    {
        const float* p = out.getNumChannels() > 0 ? out.getReadPointer(0) : nullptr;
        float m = 0.0f; if (p) { for (int i=0;i<n;++i) m = juce::jmax(m, std::abs(p[i])); }
        lastOutputValues[0]->store(m);
    }

    // Copy first channel into scope buffer
    const float* src = (in.getNumChannels() > 0 ? in.getReadPointer (0) : nullptr);
    for (int i = 0; i < n; ++i)
    {
        const float s = (src ? src[i] : 0.0f);
        scopeBuffer.setSample (0, writePos, s);
        writePos = (writePos + 1) % scopeBuffer.getNumSamples();

        // Decimate and push into history (for rolling min/max over ~5s)
        if (++decimCounter >= decimation)
        {
            decimCounter = 0;
            history[histWrite] = s;
            histWrite = (histWrite + 1) % histCapacity;
            histCount = juce::jmin (histCount + 1, histCapacity);
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void ScopeModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused (isParamModulated);
    auto& ap = getAPVTS();
    float seconds = monitorSecondsParam ? monitorSecondsParam->load() : 5.0f;
    ImGui::PushItemWidth (itemWidth);
    if (ImGui::SliderFloat ("Seconds", &seconds, 0.5f, 20.0f, "%.1f s"))
    {
        if (auto* p = ap.getParameter ("monitorSeconds"))
            p->setValueNotifyingHost (ap.getParameterRange("monitorSeconds").convertTo0to1 (seconds));
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    adjustParamOnWheel (ap.getParameter ("monitorSeconds"), "monitorSeconds", seconds);
    ImGui::PopItemWidth();

    // Draw waveform using ImGui draw list
    auto* dl = ImGui::GetWindowDrawList();
    const ImVec2 origin = ImGui::GetCursorScreenPos();
    const float width = 240.0f; const float height = 80.0f;
    const ImU32 bg = IM_COL32(30,30,30,255);
    const ImU32 fg = IM_COL32(100,200,255,255);
    const ImU32 colMax = IM_COL32(255,80,80,255);
    const ImU32 colMin = IM_COL32(255,220,80,255);
    const ImVec2 rectMax = ImVec2(origin.x + width, origin.y + height);
    dl->AddRectFilled (origin, rectMax, bg, 4.0f);
    ImGui::PushClipRect(origin, rectMax, true);
    const int N = scopeBuffer.getNumSamples();
    const float midY = origin.y + height * 0.5f;
    const float scaleY = height * 0.45f;
    const float stepX = width / (float) (N - 1);
    int idx = writePos; // newest
    float prevX = origin.x, prevY = midY;
    for (int i = 0; i < N; ++i)
    {
        idx = (idx + 1) % N;
        float s = scopeBuffer.getSample (0, idx);
        if (s < -1.5f) s = -1.5f; else if (s > 1.5f) s = 1.5f; // guard against runaway values
        const float x = origin.x + i * stepX;
        const float y = midY - s * scaleY;
        if (i > 0) dl->AddLine (ImVec2(prevX, prevY), ImVec2(x, y), fg, 1.5f);
        prevX = x; prevY = y;
    }

    // Rolling min/max over ~5 seconds (compute once per frame)
    if (histCount > 0)
    {
        float hmin = std::numeric_limits<float>::infinity();
        float hmax = -std::numeric_limits<float>::infinity();
        // Recompute capacity when user changes seconds
        const int desired = juce::jlimit (100, 50000, (int) std::round ((monitorSecondsParam ? monitorSecondsParam->load() : 5.0f) * (currentSampleRate / decimation)));
        if (desired != histCapacity)
        {
            histCapacity = desired;
            history.assign (histCapacity, 0.0f);
            histWrite = 0; histCount = 0; hmin = 0.0f; hmax = 0.0f;
        }
        for (int i = 0; i < histCount; ++i)
        {
            const float v = history[i];
            hmin = std::min(hmin, v);
            hmax = std::max(hmax, v);
        }
        rollMin = hmin; rollMax = hmax;
        // Draw lines for min/max across the panel
        const float yMax = midY - rollMax * scaleY;
        const float yMin = midY - rollMin * scaleY;
        dl->AddLine (ImVec2(origin.x, yMax), ImVec2(rectMax.x, yMax), colMax, 1.0f);
        dl->AddLine (ImVec2(origin.x, yMin), ImVec2(rectMax.x, yMin), colMin, 1.0f);
    }
    ImGui::PopClipRect();
    ImGui::Dummy (ImVec2 (width, height));
}
#endif




================================================================================
FILE: juce\Source\audio\modules\ScopeModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class ScopeModuleProcessor : public ModuleProcessor
{
public:
    ScopeModuleProcessor();
    ~ScopeModuleProcessor() override = default;

    const juce::String getName() const override { return "scope"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In", 0);
        helpers.drawAudioOutputPin("Out", 0);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

    const juce::AudioBuffer<float>& getScopeBuffer() const { return scopeBuffer; }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    juce::AudioBuffer<float> scopeBuffer; // mono buffer for display
    int writePos { 0 };

    // --- Rolling min/max over ~5 seconds (decimated) ---
    double currentSampleRate { 44100.0 };
    int decimation { 48 };           // ~1 kHz at 48 kHz
    int decimCounter { 0 };
    std::vector<float> history;      // ring buffer of decimated samples
    int histWrite { 0 };
    int histCount { 0 };
    int histCapacity { 5000 };       // seconds * (sr/decimation)
    float rollMin { 0.0f };
    float rollMax { 0.0f };
    std::atomic<float>* monitorSecondsParam { nullptr };
};




================================================================================
FILE: juce\Source\audio\modules\SequentialSwitchModuleProcessor.cpp
================================================================================


#include "SequentialSwitchModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include "imgui.h"
#endif

SequentialSwitchModuleProcessor::SequentialSwitchModuleProcessor()
    : ModuleProcessor(
        BusesProperties()
            .withInput  ("Inputs",   juce::AudioChannelSet::discreteChannels(5), true)
            .withOutput ("Outputs",  juce::AudioChannelSet::discreteChannels(4), true)
      )
    , apvts(*this, nullptr, "Parameters", createParameterLayout())
{
    // Cache parameter pointers
    threshold1Param = apvts.getRawParameterValue(paramIdThreshold1);
    threshold2Param = apvts.getRawParameterValue(paramIdThreshold2);
    threshold3Param = apvts.getRawParameterValue(paramIdThreshold3);
    threshold4Param = apvts.getRawParameterValue(paramIdThreshold4);
    
    // Initialize lastOutputValues for cable inspector (4 outputs)
    for (int i = 0; i < 4; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout SequentialSwitchModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;

    layout.add(std::make_unique<juce::AudioParameterFloat>(
        juce::ParameterID{paramIdThreshold1, 1},
        "Threshold 1",
        0.0f,  // min
        1.0f,  // max
        0.5f   // default
    ));

    layout.add(std::make_unique<juce::AudioParameterFloat>(
        juce::ParameterID{paramIdThreshold2, 1},
        "Threshold 2",
        0.0f,  // min
        1.0f,  // max
        0.5f   // default
    ));

    layout.add(std::make_unique<juce::AudioParameterFloat>(
        juce::ParameterID{paramIdThreshold3, 1},
        "Threshold 3",
        0.0f,  // min
        1.0f,  // max
        0.5f   // default
    ));

    layout.add(std::make_unique<juce::AudioParameterFloat>(
        juce::ParameterID{paramIdThreshold4, 1},
        "Threshold 4",
        0.0f,  // min
        1.0f,  // max
        0.5f   // default
    ));

    return layout;
}

void SequentialSwitchModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void SequentialSwitchModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& /*midiMessages*/)
{
    // Get input bus
    auto inBus = getBusBuffer(buffer, true, 0);

    // Get output bus (4 channels)
    auto outBus = getBusBuffer(buffer, false, 0);

    // Safety check
    if (outBus.getNumChannels() == 0)
        return;

    const int numSamples = buffer.getNumSamples();

    // Check which thresholds are modulated
    const bool isThresh1Mod = isParamInputConnected(paramIdThreshold1Mod);
    const bool isThresh2Mod = isParamInputConnected(paramIdThreshold2Mod);
    const bool isThresh3Mod = isParamInputConnected(paramIdThreshold3Mod);
    const bool isThresh4Mod = isParamInputConnected(paramIdThreshold4Mod);

    // Get input pointers
    const float* gateIn    = inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* thresh1CV = isThresh1Mod && inBus.getNumChannels() > 1 ? inBus.getReadPointer(1) : nullptr;
    const float* thresh2CV = isThresh2Mod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* thresh3CV = isThresh3Mod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* thresh4CV = isThresh4Mod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    // Get base threshold values
    const float baseThreshold1 = threshold1Param->load();
    const float baseThreshold2 = threshold2Param->load();
    const float baseThreshold3 = threshold3Param->load();
    const float baseThreshold4 = threshold4Param->load();

    // Process each sample
    for (int i = 0; i < numSamples; ++i)
    {
        // Read input signal (default to 0.0 if not connected)
        const float inputSignal = gateIn ? gateIn[i] : 0.0f;

        // Calculate modulated thresholds
        float threshold1 = baseThreshold1;
        if (isThresh1Mod && thresh1CV)
            threshold1 = juce::jlimit(0.0f, 1.0f, thresh1CV[i]);

        float threshold2 = baseThreshold2;
        if (isThresh2Mod && thresh2CV)
            threshold2 = juce::jlimit(0.0f, 1.0f, thresh2CV[i]);

        float threshold3 = baseThreshold3;
        if (isThresh3Mod && thresh3CV)
            threshold3 = juce::jlimit(0.0f, 1.0f, thresh3CV[i]);

        float threshold4 = baseThreshold4;
        if (isThresh4Mod && thresh4CV)
            threshold4 = juce::jlimit(0.0f, 1.0f, thresh4CV[i]);

        // Output to each channel based on threshold comparison
        // If input >= threshold, pass the signal, otherwise output 0
        outBus.setSample(0, i, inputSignal >= threshold1 ? inputSignal : 0.0f);
        outBus.setSample(1, i, inputSignal >= threshold2 ? inputSignal : 0.0f);
        outBus.setSample(2, i, inputSignal >= threshold3 ? inputSignal : 0.0f);
        outBus.setSample(3, i, inputSignal >= threshold4 ? inputSignal : 0.0f);

        // Update live values periodically for UI
        if ((i & 0x3F) == 0)
        {
            setLiveParamValue("threshold1_live", threshold1);
            setLiveParamValue("threshold2_live", threshold2);
            setLiveParamValue("threshold3_live", threshold3);
            setLiveParamValue("threshold4_live", threshold4);
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void SequentialSwitchModuleProcessor::drawParametersInNode(
    float itemWidth,
    const std::function<bool(const juce::String& paramId)>& isParamModulated,
    const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);

    // Threshold 1
    {
        const bool thresh1IsMod = isParamModulated(paramIdThreshold1Mod);
        float thresh1 = thresh1IsMod ? getLiveParamValueFor(paramIdThreshold1Mod, "threshold1_live", threshold1Param->load())
                                     : threshold1Param->load();

        if (thresh1IsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Threshold 1", &thresh1, 0.0f, 1.0f, "%.3f"))
        {
            if (!thresh1IsMod)
                if (auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdThreshold1)))
                    *param = thresh1;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && onModificationEnded)
            onModificationEnded();
        if (thresh1IsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }

    // Threshold 2
    {
        const bool thresh2IsMod = isParamModulated(paramIdThreshold2Mod);
        float thresh2 = thresh2IsMod ? getLiveParamValueFor(paramIdThreshold2Mod, "threshold2_live", threshold2Param->load())
                                     : threshold2Param->load();

        if (thresh2IsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Threshold 2", &thresh2, 0.0f, 1.0f, "%.3f"))
        {
            if (!thresh2IsMod)
                if (auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdThreshold2)))
                    *param = thresh2;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && onModificationEnded)
            onModificationEnded();
        if (thresh2IsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }

    // Threshold 3
    {
        const bool thresh3IsMod = isParamModulated(paramIdThreshold3Mod);
        float thresh3 = thresh3IsMod ? getLiveParamValueFor(paramIdThreshold3Mod, "threshold3_live", threshold3Param->load())
                                     : threshold3Param->load();

        if (thresh3IsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Threshold 3", &thresh3, 0.0f, 1.0f, "%.3f"))
        {
            if (!thresh3IsMod)
                if (auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdThreshold3)))
                    *param = thresh3;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && onModificationEnded)
            onModificationEnded();
        if (thresh3IsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }

    // Threshold 4
    {
        const bool thresh4IsMod = isParamModulated(paramIdThreshold4Mod);
        float thresh4 = thresh4IsMod ? getLiveParamValueFor(paramIdThreshold4Mod, "threshold4_live", threshold4Param->load())
                                     : threshold4Param->load();

        if (thresh4IsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Threshold 4", &thresh4, 0.0f, 1.0f, "%.3f"))
        {
            if (!thresh4IsMod)
                if (auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdThreshold4)))
                    *param = thresh4;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && onModificationEnded)
            onModificationEnded();
        if (thresh4IsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }

    ImGui::PopItemWidth();
}

void SequentialSwitchModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Draw input pins (left side)
    helpers.drawAudioInputPin("Gate In", 0);
    helpers.drawAudioInputPin("Thresh 1 CV", 1);
    helpers.drawAudioInputPin("Thresh 2 CV", 2);
    helpers.drawAudioInputPin("Thresh 3 CV", 3);
    helpers.drawAudioInputPin("Thresh 4 CV", 4);

    // Draw output pins (right side)
    helpers.drawAudioOutputPin("Out 1", 0);
    helpers.drawAudioOutputPin("Out 2", 1);
    helpers.drawAudioOutputPin("Out 3", 2);
    helpers.drawAudioOutputPin("Out 4", 3);
}

juce::String SequentialSwitchModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Gate In";
        case 1: return "Thresh 1 CV";
        case 2: return "Thresh 2 CV";
        case 3: return "Thresh 3 CV";
        case 4: return "Thresh 4 CV";
        default: return "";
    }
}

juce::String SequentialSwitchModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out 1";
        case 1: return "Out 2";
        case 2: return "Out 3";
        case 3: return "Out 4";
        default: return "";
    }
}
#endif

bool SequentialSwitchModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0;
    if (paramId == paramIdThreshold1Mod) { outChannelIndexInBus = 1; return true; }
    if (paramId == paramIdThreshold2Mod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdThreshold3Mod) { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdThreshold4Mod) { outChannelIndexInBus = 4; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\SequentialSwitchModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class SequentialSwitchModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdThreshold1 = "threshold1";
    static constexpr auto paramIdThreshold2 = "threshold2";
    static constexpr auto paramIdThreshold3 = "threshold3";
    static constexpr auto paramIdThreshold4 = "threshold4";
    
    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdThreshold1Mod = "threshold1_mod";
    static constexpr auto paramIdThreshold2Mod = "threshold2_mod";
    static constexpr auto paramIdThreshold3Mod = "threshold3_mod";
    static constexpr auto paramIdThreshold4Mod = "threshold4_mod";

    SequentialSwitchModuleProcessor();
    ~SequentialSwitchModuleProcessor() override = default;

    const juce::String getName() const override { return "sequentialswitch"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // Cached parameter pointers
    std::atomic<float>* threshold1Param { nullptr };
    std::atomic<float>* threshold2Param { nullptr };
    std::atomic<float>* threshold3Param { nullptr };
    std::atomic<float>* threshold4Param { nullptr };
};


================================================================================
FILE: juce\Source\audio\modules\ShapingOscillatorModuleProcessor.cpp
================================================================================


#include "ShapingOscillatorModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout ShapingOscillatorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdFrequency, "Frequency",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdWaveform, "Waveform",
        juce::StringArray { "Sine", "Saw", "Square" }, 0));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdDrive, "Drive",
        juce::NormalisableRange<float>(1.0f, 50.0f, 0.01f, 0.5f), 1.0f));

    return { params.begin(), params.end() };
}

ShapingOscillatorModuleProcessor::ShapingOscillatorModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(5), true)
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "ShapingOscillatorParams", createParameterLayout())
{
    frequencyParam = apvts.getRawParameterValue(paramIdFrequency);
    waveformParam  = apvts.getRawParameterValue(paramIdWaveform);
    driveParam     = apvts.getRawParameterValue(paramIdDrive);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));

    oscillator.initialise([](float x){ return std::sin(x); }, 128);
}

void ShapingOscillatorModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 1 };
    oscillator.prepare(spec);

    smoothedFrequency.reset(sampleRate, 0.01);
    smoothedDrive.reset(sampleRate, 0.01);
}

void ShapingOscillatorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto inBus  = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const bool isFreqMod  = isParamInputConnected(paramIdFrequencyMod);
    const bool isWaveMod  = isParamInputConnected(paramIdWaveformMod);
    const bool isDriveMod = isParamInputConnected(paramIdDriveMod);

    const float* audioInL = inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* freqCV   = isFreqMod  && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* waveCV   = isWaveMod  && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* driveCV  = isDriveMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    auto* out = outBus.getWritePointer(0);

    const float baseFrequency = frequencyParam != nullptr ? frequencyParam->load() : 440.0f;
    const int   baseWaveform  = waveformParam  != nullptr ? (int) waveformParam->load()  : 0;
    const float baseDrive     = driveParam     != nullptr ? driveParam->load()     : 1.0f;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float currentFreq = baseFrequency;
        if (isFreqMod && freqCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, freqCV[i]);
            constexpr float fMin = 20.0f;
            constexpr float fMax = 20000.0f;
            const float spanOct = std::log2(fMax / fMin);
            currentFreq = fMin * std::pow(2.0f, cv * spanOct);
        }

        int currentWave = baseWaveform;
        if (isWaveMod && waveCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, waveCV[i]);
            currentWave = (int) (cv * 2.99f);
        }

        float currentDrive = baseDrive;
        if (isDriveMod && driveCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, driveCV[i]);
            currentDrive = juce::jmap(cv, 1.0f, 50.0f);
        }

        smoothedFrequency.setTargetValue(currentFreq);
        smoothedDrive.setTargetValue(currentDrive);

        if (currentWaveform != currentWave)
        {
            if (currentWave == 0)      oscillator.initialise([](float x){ return std::sin(x); }, 128);
            else if (currentWave == 1) oscillator.initialise([](float x){ return (x / juce::MathConstants<float>::pi); }, 128);
            else                       oscillator.initialise([](float x){ return x < 0.0f ? -1.0f : 1.0f; }, 128);
            currentWaveform = currentWave;
        }

        oscillator.setFrequency(smoothedFrequency.getNextValue(), false);
        const float osc = oscillator.processSample(0.0f);
        const float shaped = std::tanh(osc * smoothedDrive.getNextValue());

        const float inL = audioInL ? audioInL[i] : 1.0f;
        const float outSample = shaped * inL;

        out[i] = outSample;

        if ((i & 0x3F) == 0)
        {
            setLiveParamValue("frequency_live", smoothedFrequency.getCurrentValue());
            setLiveParamValue("waveform_live", (float) currentWave);
            setLiveParamValue("drive_live", smoothedDrive.getCurrentValue());
        }
    }

    if (lastOutputValues.size() >= 1)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void ShapingOscillatorModuleProcessor::drawParametersInNode (float itemWidth,
                                                      const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                      const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    const bool freqIsMod = isParamModulated(paramIdFrequencyMod);
    float freq = freqIsMod ? getLiveParamValueFor(paramIdFrequencyMod, "frequency_live", frequencyParam ? frequencyParam->load() : 440.0f)
                           : (frequencyParam ? frequencyParam->load() : 440.0f);

    int wave = (int) (waveformParam ? waveformParam->load() : 0.0f);
    if (isParamModulated(paramIdWaveformMod))
        wave = (int) getLiveParamValueFor(paramIdWaveformMod, "waveform_live", (float) wave);

    const bool driveIsMod = isParamModulated(paramIdDriveMod);
    float drive = driveIsMod ? getLiveParamValueFor(paramIdDriveMod, "drive_live", driveParam ? driveParam->load() : 1.0f)
                             : (driveParam ? driveParam->load() : 1.0f);

    ImGui::PushItemWidth(itemWidth);

    if (freqIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Frequency", &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic))
    {
        if (!freqIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = freq;
    }
    if (!freqIsMod) adjustParamOnWheel(ap.getParameter(paramIdFrequency), "frequencyHz", freq);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (freqIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    const bool waveIsMod = isParamModulated(paramIdWaveformMod);
    if (waveIsMod) ImGui::BeginDisabled();
    if (ImGui::Combo("Waveform", &wave, "Sine\0Saw\0Square\0\0"))
    {
        if (!waveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWaveform))) *p = wave;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (waveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (driveIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Drive", &drive, 1.0f, 50.0f, "%.2f", ImGuiSliderFlags_Logarithmic))
    {
        if (!driveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDrive))) *p = drive;
    }
    if (!driveIsMod) adjustParamOnWheel(ap.getParameter(paramIdDrive), "drive", drive);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (driveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void ShapingOscillatorModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Freq Mod", 2);
    helpers.drawAudioInputPin("Wave Mod", 3);
    helpers.drawAudioInputPin("Drive Mod", 4);

    helpers.drawAudioOutputPin("Out", 0);
}

juce::String ShapingOscillatorModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "In L";
        case 1: return "In R";
        case 2: return "Freq Mod";
        case 3: return "Wave Mod";
        case 4: return "Drive Mod";
        default: return {};
    }
}

juce::String ShapingOscillatorModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out";
        default: return {};
    }
}

#endif

bool ShapingOscillatorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0;
    if (paramId == paramIdFrequencyMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdWaveformMod)  { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdDriveMod)     { outChannelIndexInBus = 4; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\ShapingOscillatorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <cmath>

class ShapingOscillatorModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdFrequency    = "frequency";
    static constexpr auto paramIdWaveform     = "waveform";
    static constexpr auto paramIdDrive        = "drive";
    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdFrequencyMod = "frequency_mod";
    static constexpr auto paramIdWaveformMod  = "waveform_mod";
    static constexpr auto paramIdDriveMod     = "drive_mod";

    ShapingOscillatorModuleProcessor();
    ~ShapingOscillatorModuleProcessor() override = default;

    const juce::String getName() const override { return "shaping oscillator"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Oscillator<float> oscillator;

    // Cached parameter pointers
    std::atomic<float>* frequencyParam { nullptr };
    std::atomic<float>* waveformParam  { nullptr };
    std::atomic<float>* driveParam     { nullptr };

    // Smoothed values to prevent zipper noise
    juce::SmoothedValue<float> smoothedFrequency;
    juce::SmoothedValue<float> smoothedDrive;

    int currentWaveform = -1;
};



================================================================================
FILE: juce\Source\audio\modules\SnapshotSequencerModuleProcessor.cpp
================================================================================


#include "SnapshotSequencerModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#endif

SnapshotSequencerModuleProcessor::SnapshotSequencerModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Input", juce::AudioChannelSet::stereo(), true)
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)), // Dummy output
      apvts (*this, nullptr, "SnapshotSeqParams", createParameterLayout())
{
    numStepsParam = apvts.getRawParameterValue ("numSteps");
    
    // Initialize empty snapshots
    for (auto& snapshot : snapshots)
    {
        snapshot.reset();
    }
    
    // Inspector value tracking (no outputs to track)
    lastOutputValues.clear();
}

juce::AudioProcessorValueTreeState::ParameterLayout SnapshotSequencerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps", "Num Steps", 1, MAX_STEPS, 8));
    
    return { params.begin(), params.end() };
}

void SnapshotSequencerModuleProcessor::prepareToPlay (double newSampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sampleRate = newSampleRate > 0.0 ? newSampleRate : 44100.0;
    currentStep.store(0);
    lastClockHigh = false;
    lastResetHigh = false;
}

void SnapshotSequencerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    if (numStepsParam == nullptr)
    {
        buffer.clear();
        return;
    }

    const int numSamples = buffer.getNumSamples();
    const int numSteps = juce::jlimit(1, MAX_STEPS, (int)numStepsParam->load());
    
    // Get clock and reset inputs
    const bool hasClockInput = buffer.getNumChannels() > 0;
    const bool hasResetInput = buffer.getNumChannels() > 1;
    
    const float* clockIn = hasClockInput ? buffer.getReadPointer(0) : nullptr;
    const float* resetIn = hasResetInput ? buffer.getReadPointer(1) : nullptr;
    
    // Process sample by sample to detect triggers
    for (int i = 0; i < numSamples; ++i)
    {
        // Check for reset trigger (rising edge above 0.5V)
        if (resetIn != nullptr)
        {
            bool resetHigh = resetIn[i] > 0.5f;
            if (resetHigh && !lastResetHigh)
            {
                // Reset trigger detected
                currentStep.store(0);
                
                // Load snapshot for step 0 if it exists
                if (isSnapshotStored(0) && commandBus != nullptr && parentVoiceId != 0)
                {
                    Command cmd;
                    cmd.type = Command::Type::LoadPatchState;
                    cmd.voiceId = parentVoiceId;
                    cmd.patchState = snapshots[0];
                    commandBus->enqueue(cmd);
                    juce::Logger::writeToLog("[SnapshotSeq] Reset: Loading snapshot for step 0");
                }
            }
            lastResetHigh = resetHigh;
        }
        
        // Check for clock trigger (rising edge above 0.5V)
        if (clockIn != nullptr)
        {
            bool clockHigh = clockIn[i] > 0.5f;
            if (clockHigh && !lastClockHigh)
            {
                // Clock trigger detected - advance to next step
                int oldStep = currentStep.load();
                int newStep = (oldStep + 1) % numSteps;
                currentStep.store(newStep);
                
                juce::Logger::writeToLog("[SnapshotSeq] Step " + juce::String(oldStep) + " -> " + juce::String(newStep));
                
                // Load snapshot for the new step if it exists
                if (isSnapshotStored(newStep) && commandBus != nullptr && parentVoiceId != 0)
                {
                    Command cmd;
                    cmd.type = Command::Type::LoadPatchState;
                    cmd.voiceId = parentVoiceId;
                    cmd.patchState = snapshots[newStep];
                    commandBus->enqueue(cmd);
                    juce::Logger::writeToLog("[SnapshotSeq] Loading snapshot for step " + juce::String(newStep));
                }
            }
            lastClockHigh = clockHigh;
        }
    }
    
    // Clear output buffer (this module has no audio output)
    buffer.clear();
}

void SnapshotSequencerModuleProcessor::setSnapshotForStep(int stepIndex, const juce::MemoryBlock& state)
{
    if (stepIndex >= 0 && stepIndex < MAX_STEPS)
    {
        snapshots[stepIndex] = state;
        juce::Logger::writeToLog("[SnapshotSeq] Stored snapshot for step " + juce::String(stepIndex) + 
                                " (size: " + juce::String(state.getSize()) + " bytes)");
    }
}

const juce::MemoryBlock& SnapshotSequencerModuleProcessor::getSnapshotForStep(int stepIndex) const
{
    static juce::MemoryBlock emptyBlock;
    if (stepIndex >= 0 && stepIndex < MAX_STEPS)
        return snapshots[stepIndex];
    return emptyBlock;
}

void SnapshotSequencerModuleProcessor::clearSnapshotForStep(int stepIndex)
{
    if (stepIndex >= 0 && stepIndex < MAX_STEPS)
    {
        snapshots[stepIndex].reset();
        juce::Logger::writeToLog("[SnapshotSeq] Cleared snapshot for step " + juce::String(stepIndex));
    }
}

bool SnapshotSequencerModuleProcessor::isSnapshotStored(int stepIndex) const
{
    if (stepIndex >= 0 && stepIndex < MAX_STEPS)
        return snapshots[stepIndex].getSize() > 0;
    return false;
}

juce::ValueTree SnapshotSequencerModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree tree("SnapshotSeqState");
    
    // Save each snapshot as Base64-encoded string
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        if (snapshots[i].getSize() > 0)
        {
            juce::ValueTree stepTree("Step");
            stepTree.setProperty("index", i, nullptr);
            stepTree.setProperty("data", snapshots[i].toBase64Encoding(), nullptr);
            tree.appendChild(stepTree, nullptr);
        }
    }
    
    return tree;
}

void SnapshotSequencerModuleProcessor::setExtraStateTree(const juce::ValueTree& tree)
{
    if (!tree.hasType("SnapshotSeqState"))
        return;
    
    // Clear all snapshots first
    for (auto& snapshot : snapshots)
        snapshot.reset();
    
    // Load snapshots from tree
    for (int i = 0; i < tree.getNumChildren(); ++i)
    {
        auto stepTree = tree.getChild(i);
        if (stepTree.hasType("Step"))
        {
            int index = stepTree.getProperty("index", -1);
            juce::String dataStr = stepTree.getProperty("data", "").toString();
            
            if (index >= 0 && index < MAX_STEPS && dataStr.isNotEmpty())
            {
                juce::MemoryBlock mb;
                if (mb.fromBase64Encoding(dataStr))
                {
                    snapshots[index] = mb;
                    juce::Logger::writeToLog("[SnapshotSeq] Restored snapshot for step " + juce::String(index) +
                                           " (size: " + juce::String(mb.getSize()) + " bytes)");
                }
            }
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void SnapshotSequencerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated, onModificationEnded);
    
    ImGui::PushItemWidth(itemWidth);
    
    // Number of steps parameter
    if (auto* param = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numSteps")))
    {
        int steps = param->get();
        if (ImGui::SliderInt("Steps", &steps, 1, MAX_STEPS))
        {
            param->beginChangeGesture();
            *param = steps;
            param->endChangeGesture();
        }
    }
    
    ImGui::PopItemWidth();
    
    ImGui::Separator();
    ImGui::Text("Snapshots:");
    
    // Display current step
    int currentStepIndex = currentStep.load();
    ImGui::Text("Current Step: %d", currentStepIndex + 1);
    
    ImGui::Separator();
    
    // Draw snapshot slots
    const int numSteps = numStepsParam ? (int)numStepsParam->load() : 8;
    
    for (int i = 0; i < numSteps; ++i)
    {
        ImGui::PushID(i);
        
        // Highlight current step
        if (i == currentStepIndex)
        {
            ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 1.0f, 0.0f, 1.0f));
        }
        
        ImGui::Text("Step %d:", i + 1);
        
        if (i == currentStepIndex)
        {
            ImGui::PopStyleColor();
        }
        
        ImGui::SameLine();
        
        bool stored = isSnapshotStored(i);
        
        // Status indicator
        if (stored)
        {
            ImGui::TextColored(ImVec4(0.0f, 1.0f, 0.0f, 1.0f), "[STORED]");
        }
        else
        {
            ImGui::TextColored(ImVec4(0.5f, 0.5f, 0.5f, 1.0f), "[EMPTY]");
        }
        
        // Note: Capture and Clear buttons are handled by the ImGuiNodeEditorComponent
        // since it needs access to the synth's getStateInformation method
        
        ImGui::PopID();
    }
    
    ImGui::Separator();
    ImGui::TextWrapped("Connect a clock to advance steps. Each step can store a complete patch state.");
}
#endif



================================================================================
FILE: juce\Source\audio\modules\SnapshotSequencerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include "../../ipc/CommandBus.h"
#include <array>

class SnapshotSequencerModuleProcessor : public ModuleProcessor
{
public:
    SnapshotSequencerModuleProcessor();
    ~SnapshotSequencerModuleProcessor() override = default;

    const juce::String getName() const override { return "Snapshot Sequencer"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Public API for UI to capture and manage snapshots
    void setSnapshotForStep(int stepIndex, const juce::MemoryBlock& state);
    const juce::MemoryBlock& getSnapshotForStep(int stepIndex) const;
    void clearSnapshotForStep(int stepIndex);
    bool isSnapshotStored(int stepIndex) const;
    
    // Set the CommandBus pointer so we can enqueue LoadPatchState commands
    void setCommandBus(CommandBus* bus) { commandBus = bus; }
    
    // Get parent voice ID (needed for command routing)
    juce::uint64 getParentVoiceId() const { return parentVoiceId; }
    void setParentVoiceId(juce::uint64 id) { parentVoiceId = id; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("Clock", 0);
        helpers.drawAudioInputPin("Reset", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Clock";
            case 1: return "Reset";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        return ""; // No audio outputs
    }
#endif

    // State persistence
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& tree) override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // Parameters
    std::atomic<float>* numStepsParam { nullptr };
    
    // Snapshot storage (16 steps maximum)
    static constexpr int MAX_STEPS = 16;
    std::array<juce::MemoryBlock, MAX_STEPS> snapshots;
    
    // Sequencer state
    std::atomic<int> currentStep { 0 };
    double sampleRate { 44100.0 };
    
    // Clock detection
    bool lastClockHigh { false };
    bool lastResetHigh { false };
    
    // Command bus for triggering patch loads
    CommandBus* commandBus { nullptr };
    juce::uint64 parentVoiceId { 0 };

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SnapshotSequencerModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\StepSequencerModuleProcessor.cpp
================================================================================


#include "StepSequencerModuleProcessor.h"
#include <iostream>
#include <array>

using APVTS = juce::AudioProcessorValueTreeState;

static juce::NormalisableRange<float> makeRateRange()
{
    // FIX: Change the interval from 0.0f to a small, non-zero value like 0.01f.
    juce::NormalisableRange<float> r (0.1f, 20.0f, 0.01f, 0.5f); // semi-log response
    return r;
}

APVTS::ParameterLayout StepSequencerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps", "Number of Steps", 1, StepSequencerModuleProcessor::MAX_STEPS, 8));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("rate", "Rate", makeRateRange(), 2.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateLength", "Gate Length", juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
    // Threshold to generate gate when step value >= threshold
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateThreshold", "Gate Threshold", juce::NormalisableRange<float> (0.0f, 1.0f, 0.001f), 0.5f));
    
    // Add modulation parameters for rate, gate length and number of steps (absolute 0..1)
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("rate_mod", "Rate Mod", 0.0f, 1.0f, 0.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateLength_mod", "Gate Length Mod", 0.0f, 1.0f, 0.5f));
    // Neutral default at 0.5 means "no override" (we'll treat values ~0.5 as disconnected)
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("numSteps_mod", "Num Steps Mod", 0.0f, 1.0f, 0.5f));
    // Optional maximum steps bound (1..MAX_STEPS), default MAX_STEPS
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps_max", "Num Steps Max", 1, StepSequencerModuleProcessor::MAX_STEPS, StepSequencerModuleProcessor::MAX_STEPS));
    
    // Transport sync parameters
    params.push_back(std::make_unique<juce::AudioParameterBool>("sync", "Sync to Transport", false));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("rate_division", "Division", 
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3)); // Default: 1/4 note
    
    for (int i = 0; i < StepSequencerModuleProcessor::MAX_STEPS; ++i)
    {
        const juce::String pid = "step" + juce::String (i + 1);
        params.push_back (std::make_unique<juce::AudioParameterFloat> (pid, pid, juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));

        // ADD THIS: A new parameter for this step's modulation input
        const juce::String modPid = "step" + juce::String(i + 1) + "_mod";
        // Default 0.5 => no offset (unipolar 0..1 centered to bipolar -0.5..+0.5)
        params.push_back(std::make_unique<juce::AudioParameterFloat>(modPid, modPid, 0.0f, 1.0f, 0.5f));

        // NEW: per-step Trigger checkbox and its modulation (absolute 0..1)
        const juce::String trigPid = "step" + juce::String(i + 1) + "_trig";
        params.push_back(std::make_unique<juce::AudioParameterBool>(trigPid, trigPid, false));
        const juce::String trigModPid = "step" + juce::String(i + 1) + "_trig_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(trigModPid, trigModPid, 0.0f, 1.0f, 0.5f));

        // NEW: per-step Gate Level parameters
        const juce::String gatePid = "step" + juce::String(i + 1) + "_gate";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(gatePid, gatePid, 0.0f, 1.0f, 0.8f));
        const juce::String gateModPid = "step" + juce::String(i + 1) + "_gate_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(gateModPid, gateModPid, 0.0f, 1.0f, 0.5f));
    }
    return { params.begin(), params.end() };
}

StepSequencerModuleProcessor::StepSequencerModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        // ARCHITECTURAL FIX: Single large bus for all inputs:
                        // 2 (Audio) + 4 (Global Mods: rate, gate, steps, stepsMax) + 16 (Step Mods) + 16 (Trig Mods) + 16 (Gate Mods) = 54 channels
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(2 + 4 + (MAX_STEPS * 3)), true)
                        // expand to 5 outputs (Pitch, Gate, Velocity, Mod, Trigger)
                        .withOutput ("CV Outputs", juce::AudioChannelSet::discreteChannels(6), true))
    , apvts (*this, nullptr, "SeqParams", createParameterLayout())
{
    // ADD THIS VERIFICATION LOGIC
    std::cout << "--- StepSequencerModuleProcessor Initializing ---" << std::endl;
    
    numStepsParam   = apvts.getRawParameterValue ("numSteps");
    rateParam       = apvts.getRawParameterValue ("rate");
    gateLengthParam = apvts.getRawParameterValue ("gateLength");
    gateThresholdParam = apvts.getRawParameterValue ("gateThreshold");
    rateModParam    = apvts.getRawParameterValue ("rate_mod");
    gateLengthModParam = apvts.getRawParameterValue ("gateLength_mod");
    numStepsModParam = apvts.getRawParameterValue ("numSteps_mod");
    stepsModMaxParam = apvts.getRawParameterValue ("numSteps_max");
    
    if (numStepsParam == nullptr) std::cout << "ERROR: 'numSteps' parameter is NULL!" << std::endl;
    if (rateParam == nullptr) std::cout << "ERROR: 'rate' parameter is NULL!" << std::endl;
    if (gateLengthParam == nullptr) std::cout << "ERROR: 'gateLength' parameter is NULL!" << std::endl;

    pitchParams.resize (MAX_STEPS);
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        pitchParams[i] = apvts.getRawParameterValue ("step" + juce::String (i + 1));
        if (pitchParams[i] == nullptr)
        {
            std::cout << "ERROR: 'step" << (i + 1) << "' parameter is NULL!" << std::endl;
        }
    }

    // Initialize stepModParams
    stepModParams.resize(MAX_STEPS);
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        const juce::String modPid = "step" + juce::String(i + 1) + "_mod";
        stepModParams[i] = apvts.getRawParameterValue(modPid);
        if (stepModParams[i] == nullptr)
        {
            std::cout << "ERROR: 'step" << (i + 1) << "_mod' parameter is NULL!" << std::endl;
        }
    }
    std::cout << "--- Initialization Check Complete ---" << std::endl;
    
    // Initialize output value tracking for tooltips (6 outputs: Pitch, Gate, Gate Nuanced, Velocity, Mod, Trigger)
    for (int i = 0; i < 6; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));

    // Cache pointers for per-step trigger params
    stepTrigParams.resize(MAX_STEPS);
    stepTrigModParams.resize(MAX_STEPS);
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        const juce::String trigPid = "step" + juce::String(i + 1) + "_trig";
        stepTrigParams[i] = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter(trigPid));
        const juce::String trigModPid = "step" + juce::String(i + 1) + "_trig_mod";
        stepTrigModParams[i] = apvts.getRawParameterValue(trigModPid);
    }

    // Initialize gate parameter pointers
    stepGateParams.resize(MAX_STEPS);
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        const juce::String gatePid = "step" + juce::String(i + 1) + "_gate";
        stepGateParams[i] = apvts.getRawParameterValue(gatePid);
    }
}

void StepSequencerModuleProcessor::prepareToPlay (double newSampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sampleRate = newSampleRate > 0.0 ? newSampleRate : 44100.0;
    phase = 0.0;
}

void StepSequencerModuleProcessor::setTimingInfo(const TransportState& state)
{
    // Check if the transport has just started playing
    if (state.isPlaying && !wasPlaying)
    {
        // Reset to the beginning when play is pressed
        currentStep.store(0);
        phase = 0.0;
    }
    wasPlaying = state.isPlaying;
    
    m_currentTransport = state;
}

juce::ValueTree StepSequencerModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("SequencerState");
    vt.setProperty("sync", apvts.getRawParameterValue("sync")->load(), nullptr);
    vt.setProperty("rate_division", apvts.getRawParameterValue("rate_division")->load(), nullptr);
    return vt;
}

void StepSequencerModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("SequencerState"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync")))
            *p = (bool)vt.getProperty("sync", false);
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division")))
            *p = (int)vt.getProperty("rate_division", 3);
    }
}

void StepSequencerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    if (rateParam == nullptr || numStepsParam == nullptr || gateLengthParam == nullptr)
    {
        buffer.clear();
        return;
    }

    const int numSamples = buffer.getNumSamples();
    
    // ARCHITECTURAL FIX: Read CV from single input bus
    const auto& inputBus = getBusBuffer(buffer, true, 0); // All inputs are now on bus 0
    
    // Get pointers to global modulation CV inputs, if they are connected
    const bool isRateMod = isParamInputConnected("rate_mod");
    const bool isGateLenMod = isParamInputConnected("gateLength_mod");
    const bool isStepsMod = isParamInputConnected("numSteps_mod");
    
    // Absolute channel map on single input bus:
    // 0=L,1=R, 2=rate, 3=gateLen, 4=steps, 5=stepsMax,
    // 6..21: step1..step16 value mods, 22..37: step1..step16 trig mods, 38..53: step1..step16 gate mods
    const float* rateCV = isRateMod && inputBus.getNumChannels() > 2 ? inputBus.getReadPointer(2) : nullptr;
    const float* gateLenCV = isGateLenMod && inputBus.getNumChannels() > 3 ? inputBus.getReadPointer(3) : nullptr;
    const float* stepsCV = isStepsMod && inputBus.getNumChannels() > 4 ? inputBus.getReadPointer(4) : nullptr;
    
    // Get write pointers for all 6 output channels
    auto* pitchOut       = buffer.getWritePointer(0);
    auto* gateOut        = buffer.getNumChannels() > 1 ? buffer.getWritePointer(1) : nullptr;
    auto* gateNuancedOut = buffer.getNumChannels() > 2 ? buffer.getWritePointer(2) : nullptr;
    auto* velocityOut    = buffer.getNumChannels() > 3 ? buffer.getWritePointer(3) : nullptr;
    auto* modOut         = buffer.getNumChannels() > 4 ? buffer.getWritePointer(4) : nullptr;
    auto* trigOut        = buffer.getNumChannels() > 5 ? buffer.getWritePointer(5) : nullptr;
    
    // The old, commented-out input logic can now be completely removed.
    
    // Get base parameter values ONCE
    const float baseRate = rateParam->load();
    const float baseGate = gateLengthParam != nullptr ? gateLengthParam->load() : 0.5f;
    const int baseSteps = numStepsParam != nullptr ? (int) numStepsParam->load() : 8;
    const int boundMax = stepsModMaxParam != nullptr ? juce::jlimit (1, MAX_STEPS, (int) stepsModMaxParam->load()) : MAX_STEPS;
    const float gateThreshold = gateThresholdParam != nullptr ? juce::jlimit(0.0f, 1.0f, gateThresholdParam->load()) : 0.5f;

    // --- UI Telemetry Bootstrap ---
    // Publish per-step live values for ALL steps this block (use first-sample snapshot)
    {
        const int totalCh = inputBus.getNumChannels();
        for (int si = 0; si < MAX_STEPS; ++si)
        {
            // Absolute channel for per-step value mod: 6..21
            const int ch = 6 + si;
            const bool hasCh = totalCh > ch;
            const float base = (pitchParams.size() > (size_t) si && pitchParams[si] != nullptr) ? pitchParams[si]->load() : 0.0f;
            float live = base;
            if (hasCh)
            {
                const float cv0 = inputBus.getReadPointer(ch)[0];
                live = juce::jlimit(0.0f, 1.0f, base + (cv0 - 0.5f));
            }
            setLiveParamValue("step_live_" + juce::String(si + 1), live);

            // Per-step gate live values: channels 38..53
            const int gateCh = 38 + si;
            const bool hasGateCh = totalCh > gateCh;
            const float baseGate = (stepGateParams.size() > (size_t) si && stepGateParams[si] != nullptr) ? stepGateParams[si]->load() : 0.8f;
            float liveGate = baseGate;
            if (hasGateCh)
            {
                const float cv0 = inputBus.getReadPointer(gateCh)[0];
                liveGate = juce::jlimit(0.0f, 1.0f, baseGate + (cv0 - 0.5f));
            }
            setLiveParamValue("gate_live_" + juce::String(si + 1), liveGate);

            // Per-step trigger live values: channels 22..37
            const int trigCh = 22 + si;
            const bool hasTrigCh = totalCh > trigCh;
            const bool baseTrig = (stepTrigParams.size() > (size_t) si && stepTrigParams[si] != nullptr) ? (bool)(*stepTrigParams[si]) : false;
            bool liveTrig = baseTrig;
            if (hasTrigCh)
            {
                const float cv0 = inputBus.getReadPointer(trigCh)[0];
                liveTrig = cv0 > 0.5f;
            }
            setLiveParamValue("trig_live_" + juce::String(si + 1), liveTrig ? 1.0f : 0.0f);
        }
    }

    bool stepAdvanced = false;
    float lastRateLive = baseRate;
    float lastGateLive = baseGate;
    float lastGateThresholdLive = gateThreshold;
    int   lastStepsLive = baseSteps;
    for (int i = 0; i < numSamples; ++i)
    {
        // PER-SAMPLE FIX: Calculate global modulation parameters FOR THIS SAMPLE
        int activeSteps = baseSteps;
        if (isStepsMod && stepsCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, stepsCV[i]);
            const int mapped = 1 + (int) std::round(cv * (MAX_STEPS - 1));
            activeSteps = juce::jlimit(1, boundMax, mapped);
        }
        // FIX: clamp playhead immediately when steps shrink
        if (currentStep.load() >= activeSteps)
            currentStep.store(0);
        
        float rate = baseRate;
        if (isRateMod && rateCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            const float modRateHz = 0.01f + cv * (50.0f - 0.01f);
            rate = modRateHz;
        }
        lastRateLive = rate;
        
        float gateLen = baseGate;
        if (isGateLenMod && gateLenCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, gateLenCV[i]);
            gateLen = juce::jlimit(0.0f, 1.0f, cv);
        }
        lastGateLive = gateLen;
        
        // Use gateLenCV for gate threshold modulation (reusing the existing "Gate Mod" input)
        float gateThreshold = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
        if (isGateLenMod && gateLenCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, gateLenCV[i]);
            gateThreshold = juce::jlimit(0.0f, 1.0f, cv);
        }
        lastGateThresholdLive = gateThreshold;
        
        // --- Transport Sync Logic ---
        const bool syncEnabled = apvts.getRawParameterValue("sync")->load() > 0.5f;

        if (syncEnabled && m_currentTransport.isPlaying)
        {
            // SYNC MODE: Use the global beat position
            const int divisionIndex = (int)apvts.getRawParameterValue("rate_division")->load();
            static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
            const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];
            
            // Calculate which step we should be on based on song position
            const int totalSteps = juce::jlimit(1, MAX_STEPS, activeSteps);
            const int stepForBeat = static_cast<int>(std::fmod(m_currentTransport.songPositionBeats * beatDivision, totalSteps));

            if (stepForBeat != currentStep.load())
            {
                currentStep.store(stepForBeat);
                stepAdvanced = true;
            }
        }
        else
        {
            // FREE-RUNNING MODE: Use the internal phase clock
            const double phaseInc = (sampleRate > 0.0 ? (double) rate / sampleRate : 0.0);
            phase += phaseInc;
            if (phase >= 1.0)
            {
                phase -= 1.0;
                const int next = (currentStep.load() + 1) % juce::jlimit (1, MAX_STEPS, activeSteps);
                currentStep.store(next);
                stepAdvanced = true;
            }
        }
        lastStepsLive = activeSteps;

        const int currentStepIndex = currentStep.load();
        const float sliderValue = pitchParams[currentStepIndex] != nullptr ? pitchParams[currentStepIndex]->load() : 0.0f;
        
        // PER-SAMPLE FIX: Read modulation from CV input bus for THIS SAMPLE
        float rawModValue = 0.5f; // neutral
        {
            const juce::String stepModId = "step" + juce::String(currentStepIndex + 1) + "_mod";
            const bool stepModConnected = isParamInputConnected(stepModId);
            if (stepModConnected)
            {
                // Absolute: step1_mod at 6, step2_mod at 7, ...
                const int modChannel = 6 + currentStepIndex;
                if (inputBus.getNumChannels() > modChannel)
                    rawModValue = inputBus.getReadPointer(modChannel)[i];
            }
        }
        // Center modulation around 0.0 (convert unipolar 0-1 to bipolar -0.5 to +0.5)
        const float modValue = rawModValue - 0.5f;

        const float pitchValue = juce::jlimit (0.0f, 1.0f, sliderValue + modValue);
        
        // --- REWRITTEN GATE LOGIC ---
        // 1. Get the gate level for the current step from its own slider.
        float stepGateLevel = (stepGateParams[currentStepIndex] != nullptr) ? stepGateParams[currentStepIndex]->load() : 0.8f;

        // 2. Apply modulation to the step's gate level if connected.
        const juce::String gateModId = "step" + juce::String(currentStepIndex + 1) + "_gate_mod";
        if (isParamInputConnected(gateModId))
        {
            const int gateModChannel = 38 + currentStepIndex;
            if (inputBus.getNumChannels() > gateModChannel)
            {
                const float cv = inputBus.getReadPointer(gateModChannel)[i];
                stepGateLevel = juce::jlimit(0.0f, 1.0f, stepGateLevel + (cv - 0.5f));
            }
        }

        // --- NEW DUAL GATE LOGIC WITH FADE-IN ---
        // 1. Perform the comparison once.
        const bool isGateOn = (stepGateLevel >= gateThreshold);
        
        // 2. Handle gate fade-in transition
        if (isGateOn && !previousGateOn) {
            // Gate just turned on - start fade-in
            gateFadeProgress = 0.0f;
        } else if (isGateOn && previousGateOn) {
            // Gate is on - continue fade-in
            const float fadeIncrement = sampleRate > 0.0f ? (1000.0f / GATE_FADE_TIME_MS) / sampleRate : 0.0f;
            gateFadeProgress = juce::jmin(1.0f, gateFadeProgress + fadeIncrement);
        } else {
            // Gate is off - reset fade progress
            gateFadeProgress = 0.0f;
        }
        previousGateOn = isGateOn;
        
        // 3. Generate the binary "Gate" output with fade-in.
        const float gateBinaryValue = isGateOn ? gateFadeProgress : 0.0f;
        
        // 4. Generate the analog "Gate Nuanced" output with fade-in.
        const float gateNuancedValue = isGateOn ? (stepGateLevel * gateFadeProgress) : 0.0f;
        // --- END OF NEW LOGIC ---
        
        // Live gate level is already stored in the UI telemetry bootstrap

        // Determine Trigger state for this step (checkbox + mod, but only count mod when connected)
        bool trigBase = false;
        if (stepTrigParams.size() > (size_t) currentStepIndex && stepTrigParams[currentStepIndex] != nullptr)
            trigBase = (bool) (*stepTrigParams[currentStepIndex]);
        bool trigActive = trigBase;
        {
            const juce::String trigModId = "step" + juce::String(currentStepIndex + 1) + "_trig_mod";
            const bool trigModConnected = isParamInputConnected(trigModId);
            if (trigModConnected)
            {
                // Absolute: step1_trig_mod at 22, step2 at 23, ...
                const int trigModChannel = 22 + currentStepIndex;
                if (inputBus.getNumChannels() > trigModChannel)
                {
                    const float trigModNorm = inputBus.getReadPointer(trigModChannel)[i];
                    if (trigModNorm > 0.5f) trigActive = true;
                }
            }
        }

        // If we advanced to this step, only emit a pulse if this step is enabled (checkbox or connected mod>0.5)
        if (stepAdvanced)
        {
            pendingTriggerSamples = trigActive ? (int) std::round (0.001 * sampleRate) : 0;
            stepAdvanced = false;
        }

        pitchOut[i] = pitchValue;
        // Live step value is already stored in the UI telemetry bootstrap
        if (gateOut != nullptr)         gateOut[i] = gateBinaryValue;
        if (gateNuancedOut != nullptr)  gateNuancedOut[i] = gateNuancedValue;
        if (velocityOut != nullptr) velocityOut[i] = 0.85f;
        if (modOut != nullptr)      modOut[i] = 0.0f;
        // Timed gate remains level-based
        // Trigger Out: 1ms pulse after each step advance
        if (trigOut != nullptr)
        {
            float pulse = 0.0f;
            if (pendingTriggerSamples > 0)
            {
                pulse = 1.0f;
                --pendingTriggerSamples;
            }
            trigOut[i] = pulse;
        }
    }
    // Publish block-level live telemetry for UI reflection
    setLiveParamValue("rate_live", lastRateLive);
    setLiveParamValue("gateLength_live", lastGateLive);
    setLiveParamValue("gateThreshold_live", lastGateThresholdLive);
    setLiveParamValue("steps_live", (float) lastStepsLive);
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 6)
    {
        if (lastOutputValues[0] && pitchOut) lastOutputValues[0]->store(pitchOut[numSamples - 1]);
        if (lastOutputValues[1] && gateOut) lastOutputValues[1]->store(gateOut[numSamples - 1]);
        if (lastOutputValues[2] && gateNuancedOut) lastOutputValues[2]->store(gateNuancedOut[numSamples - 1]);
        if (lastOutputValues[3] && velocityOut) lastOutputValues[3]->store(velocityOut[numSamples - 1]);
        if (lastOutputValues[4] && modOut) lastOutputValues[4]->store(modOut[numSamples - 1]);
        if (lastOutputValues[5] && trigOut) lastOutputValues[5]->store(trigOut[numSamples - 1]);
    }

}

#if defined(PRESET_CREATOR_UI)
void StepSequencerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    int activeSteps = numStepsParam != nullptr ? (int) numStepsParam->load() : 8;
    const int boundMaxUi = stepsModMaxParam != nullptr ? juce::jlimit (1, MAX_STEPS, (int) stepsModMaxParam->load()) : MAX_STEPS;
    const bool stepsAreModulated = isParamModulated("numSteps_mod");
    if (stepsAreModulated) {
        // Reflect live steps from audio thread telemetry
        const int liveSteps = (int) std::round(getLiveParamValueFor("numSteps_mod", "steps_live", (float) activeSteps));
        activeSteps = juce::jlimit (1, boundMaxUi, liveSteps);
    }

    // Step count controls - now using a slider instead of +/- buttons
    int currentSteps = numStepsParam != nullptr ? (int)numStepsParam->load() : 8;

    // If modulated, the displayed value comes from the modulation input.
    // Otherwise, it comes from the parameter itself.
    int displayedSteps = currentSteps;
    if (stepsAreModulated) {
        const int liveSteps = (int) std::round(getLiveParamValueFor("numSteps_mod", "steps_live", (float) currentSteps));
        displayedSteps = juce::jlimit (1, boundMaxUi, liveSteps);
    }

    // Ensure the displayed value never exceeds the max bound
    displayedSteps = juce::jmin(displayedSteps, boundMaxUi);

    // Disable the slider if steps are being modulated
    if (stepsAreModulated) ImGui::BeginDisabled();

    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderInt("Steps", &displayedSteps, 1, boundMaxUi))
    {
        // Only update the parameter if the slider is not disabled
        if (!stepsAreModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numSteps"))) {
                *p = displayedSteps;
            }
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    
    // Add scroll wheel support for the Steps slider
    if (!stepsAreModulated)
    {
        adjustParamOnWheel(apvts.getParameter("numSteps"), "numSteps", (float)displayedSteps);
    }
    
    ImGui::PopItemWidth();

    if (stepsAreModulated) {
        ImGui::EndDisabled();
        ImGui::SameLine(); 
        ImGui::TextUnformatted("(mod)");
    }

    // Use the displayed steps value for the slider strip
    const int shown = juce::jlimit (1, MAX_STEPS, displayedSteps);
    const float sliderW = itemWidth / (float) juce::jmax (8, shown) * 0.8f;

    ImGui::PushItemWidth (sliderW);
    for (int i = 0; i < shown; ++i)
    {
        if (i > 0) ImGui::SameLine();

        // Build display and interaction state
        float baseValue = (pitchParams[i] != nullptr ? pitchParams[i]->load() : 0.5f);
        const juce::String modPid = "step" + juce::String(i + 1) + "_mod";
        const bool modConnected = isParamModulated(modPid);

        // Reflect live per-step value for the currently active step when modulated
        float liveValue = getLiveParamValueFor("step" + juce::String(i + 1) + "_mod",
                                              "step_live_" + juce::String(i + 1),
                                              baseValue);
        float sliderValue = modConnected ? liveValue : baseValue; // widget bound to display value

        const bool isActive = (i == currentStep.load());
        if (isActive)
        {
            ImGui::PushStyleColor (ImGuiCol_FrameBg, ImVec4(0.3f, 0.7f, 1.0f, 1.0f));
            ImGui::PushStyleColor (ImGuiCol_SliderGrab, ImVec4(0.9f, 0.9f, 0.9f, 1.0f));
        }

        const std::string label = "##s" + std::to_string(i);
        if (modConnected) ImGui::BeginDisabled();
        if (ImGui::VSliderFloat (label.c_str(), ImVec2 (sliderW, 60.0f), &sliderValue, 0.0f, 1.0f, ""))
        {
            if (!modConnected) {
                // Only update if not modulated
                float newBaseValue = juce::jlimit (0.0f, 1.0f, sliderValue);
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter ("step" + juce::String (i + 1)))) 
                    *p = newBaseValue;
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }

        // Wheel fine-tune: identical semantics to drag
        if (!modConnected)
        {
            if (ImGui::IsItemHovered())
            {
                float wheel = ImGui::GetIO().MouseWheel;
                if (wheel != 0.0f)
                {
                    const float delta = (wheel > 0 ? 0.05f : -0.05f);
                    float newBaseValue = juce::jlimit (0.0f, 1.0f, baseValue + delta);
                    if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter ("step" + juce::String (i + 1)))) 
                        *p = newBaseValue;
                }
            }
        }

        if (modConnected) { ImGui::EndDisabled(); }

        if (isActive) ImGui::PopStyleColor(2);
    }
    ImGui::PopItemWidth();


    // Per-step Gate Sliders
    ImGui::PushItemWidth(sliderW);
    
    // Capture the screen position before drawing the gate sliders
    ImVec2 gate_sliders_p0 = ImGui::GetCursorScreenPos();
    
    for (int i = 0; i < shown; ++i)
    {
        if (i > 0) ImGui::SameLine();
        ImGui::PushID(2000 + i); // Use a new ID base to avoid collisions

        float baseGateValue = (stepGateParams[i] != nullptr ? stepGateParams[i]->load() : 0.8f);
        const juce::String modPid = "step" + juce::String(i + 1) + "_gate_mod";
        const bool modConnected = isParamModulated(modPid);
        
        // Reflect live modulated value for gate level
        float sliderValue = baseGateValue;
        if (modConnected) {
            // Use live gate value from audio thread
            sliderValue = getLiveParamValueFor("step" + juce::String(i + 1) + "_gate_mod",
                                              "gate_live_" + juce::String(i + 1),
                                              baseGateValue);
        }
        const bool isActive = (i == currentStep.load());

        if (isActive) ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 0.7f, 0.3f, 1.0f));
        if (modConnected) ImGui::BeginDisabled();
        
        if (ImGui::VSliderFloat("##g", ImVec2(sliderW, 60.0f), &sliderValue, 0.0f, 1.0f, ""))
        {
            if (!modConnected && stepGateParams[i] != nullptr) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("step" + juce::String(i + 1) + "_gate"))) {
                    *p = sliderValue;
                }
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        // Wheel fine-tune: identical semantics to drag
        if (!modConnected)
        {
            if (ImGui::IsItemHovered())
            {
                float wheel = ImGui::GetIO().MouseWheel;
                if (wheel != 0.0f)
                {
                    const float delta = (wheel > 0 ? 0.05f : -0.05f);
                    float newBaseValue = juce::jlimit(0.0f, 1.0f, sliderValue + delta);
                    if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("step" + juce::String(i + 1) + "_gate"))) {
                        *p = newBaseValue;
                    }
                }
            }
        }
        
        if (modConnected) ImGui::EndDisabled();
        if (isActive) ImGui::PopStyleColor();
        
        ImGui::PopID();
    }
    ImGui::PopItemWidth();

    // Draw the yellow threshold line immediately after the gate sliders
    // Use the same threshold value that will be used by the Gate Threshold slider
    const bool gtIsModulatedForLine = isParamModulated("gateLength_mod");
    const float threshold_value = gtIsModulatedForLine ? getLiveParamValueFor("gateLength_mod", "gateThreshold_live", (gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f))
                                                          : (gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f);
    const float slider_height = 60.0f; // This must match the VSliderFloat height
    const float row_width = (sliderW * shown) + (ImGui::GetStyle().ItemSpacing.x * (shown - 1));

    // Calculate the Y coordinate for the line. 
    // A threshold of 1.0 is at the top (y=0), 0.0 is at the bottom (y=height).
    const float line_y = gate_sliders_p0.y + (1.0f - threshold_value) * slider_height;

    ImDrawList* draw_list = ImGui::GetWindowDrawList();
    draw_list->AddLine(
        ImVec2(gate_sliders_p0.x, line_y),
        ImVec2(gate_sliders_p0.x + row_width, line_y),
        IM_COL32(255, 255, 0, 200), // A bright, slightly transparent yellow
        2.0f
    );

    // Current step indicator
    ImGui::Text("Current Step: %d", currentStep.load() + 1);

    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue("sync")->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync"))) *p = sync;
        onModificationEnded();
    }

    ImGui::PushItemWidth(itemWidth);
    if (sync)
    {
        int division = (int)apvts.getRawParameterValue("rate_division")->load();
        if (ImGui::Combo("Division", &division, "1/32\0""1/16\0""1/8\0""1/4\0""1/2\0""1\0""2\0""4\0""8\0\0"))
        {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division"))) *p = division;
            onModificationEnded();
        }
    }
    else
    {
        // Rate slider (only shown in free-running mode)
        const bool isRateModulated = isParamModulated("rate_mod");
        float rateDisplay = isRateModulated ? getLiveParamValueFor("rate_mod", "rate_live", rateParam->load()) : rateParam->load();
        
        if (isRateModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Rate (Hz)", &rateDisplay, 0.1f, 20.0f, "%.2f")) {
            if (!isRateModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("rate"))) *p = rateDisplay;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (!isRateModulated) adjustParamOnWheel(apvts.getParameter("rate"), "rate", rateDisplay);
        if (isRateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }
    ImGui::PopItemWidth();
    // --- END SYNC CONTROLS ---

    ImGui::PushItemWidth(itemWidth);

    const bool gtIsModulated = isParamModulated("gateLength_mod");
    float gtEff = gtIsModulated ? getLiveParamValueFor("gateLength_mod", "gateThreshold_live", (gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f))
                                 : (gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f);

    if (gtIsModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat ("Gate Threshold", &gtEff, 0.0f, 1.0f))
    {
        if (! gtIsModulated)
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("gateThreshold"))) *p = gtEff;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (! gtIsModulated)
        adjustParamOnWheel (apvts.getParameter ("gateThreshold"), "gateThreshold", gtEff);
    if (gtIsModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::PopItemWidth();

    // --- Per-step Trigger checkboxes row ---
    // Place checkboxes exactly under each slider, matching widths and exact columns
    {
        const float cbWidth = sliderW; // same width as sliders
        for (int i = 0; i < shown; ++i)
        {
            // Compute the same X layout as sliders
            if (i > 0) ImGui::SameLine();

            bool baseTrig = (stepTrigParams.size() > (size_t) i && stepTrigParams[i] != nullptr) ? (bool) (*stepTrigParams[i]) : false;
            // Only grey out when the TRIGGER mod is connected (not the value mod)
            const juce::String trigModId = "step" + juce::String(i + 1) + "_trig_mod";
            const bool trigIsModulated = isParamModulated(trigModId);

            // Use live value for display when modulated
            bool displayTrig = baseTrig;
            if (trigIsModulated) {
                displayTrig = getLiveParamValueFor("step" + juce::String(i + 1) + "_trig_mod",
                                                  "trig_live_" + juce::String(i + 1),
                                                  baseTrig ? 1.0f : 0.0f) > 0.5f;
            }

            if (trigIsModulated) ImGui::BeginDisabled();
            ImGui::PushID(1000 + i);
            ImGui::SetNextItemWidth(cbWidth);
            ImGui::PushItemWidth(cbWidth);
            bool changed = ImGui::Checkbox("##trig", &displayTrig);
            ImGui::PopItemWidth();
            if (changed && !trigIsModulated && stepTrigParams.size() > (size_t) i && stepTrigParams[i] != nullptr)
            {
                // Only update parameter if not modulated
                *stepTrigParams[i] = displayTrig;
            }
            // Fill remaining width so columns align exactly to sliderW
            {
                float used = ImGui::GetItemRectSize().x;
                if (used < cbWidth) { ImGui::SameLine(0.0f, 0.0f); ImGui::Dummy(ImVec2(cbWidth - used, 0.0f)); }
            }
            if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
            ImGui::PopID();
            if (trigIsModulated) { ImGui::EndDisabled(); }
        }
        // Mod banner if any are modulated
        bool anyTrigMod = false;
        for (int i = 0; i < shown; ++i)
        {
            const juce::String trigModId = "step" + juce::String(i + 1) + "_trig_mod";
            if (isParamInputConnected(trigModId)) { anyTrigMod = true; break; }
        }
        if (anyTrigMod) { ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }
}

void StepSequencerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // ARCHITECTURAL FIX: All inputs are now on a single bus, so we can use direct channel indices
    
    // Main stereo audio input pins (Channels 0-1)
    helpers.drawAudioInputPin("Mod In L", 0);
    helpers.drawAudioInputPin("Mod In R", 1);
    
    // Global modulation inputs (Channels 2-4)
    helpers.drawAudioInputPin("Rate Mod", 2);
    helpers.drawAudioInputPin("Gate Mod", 3);
    helpers.drawAudioInputPin("Steps Mod", 4);
    
    // Dynamic per-step modulation inputs
    const int boundMaxPins = stepsModMaxParam != nullptr ? juce::jlimit (1, MAX_STEPS, (int) stepsModMaxParam->load()) : MAX_STEPS;
    int activeSteps = numStepsParam != nullptr ? (int) numStepsParam->load() : 8;

    // FIX: reflect live, modulated steps value (from audio thread telemetry)
    if (isParamInputConnected("numSteps_mod"))
    {
        const int liveSteps = (int) std::round (getLiveParamValueFor("numSteps_mod", "steps_live", (float) activeSteps));
        activeSteps = juce::jlimit (1, boundMaxPins, liveSteps);
    }
    else
    {
        activeSteps = juce::jlimit (1, boundMaxPins, activeSteps);
    }
    
    // Interleaved per-step pins: Step n Mod, Step n Trig Mod, Step n Gate Mod (absolute channels match pin DB)
    for (int i = 0; i < activeSteps; ++i)
    {
        const int stepIdx = i + 1;
        const int valChan  = 6 + (stepIdx - 1);           // 6..21
        const int trigChan = 22 + (stepIdx - 1);          // 22..37
        const int gateChan = 38 + (stepIdx - 1);          // 38..53
        helpers.drawAudioInputPin(("Step " + juce::String(stepIdx) + " Mod").toRawUTF8(), valChan);
        helpers.drawAudioInputPin(("Step " + juce::String(stepIdx) + " Trig Mod").toRawUTF8(), trigChan);
        helpers.drawAudioInputPin(("Step " + juce::String(stepIdx) + " Gate Mod").toRawUTF8(), gateChan);
    }

    // Output pins
    helpers.drawAudioOutputPin("Pitch", 0);
    helpers.drawAudioOutputPin("Gate", 1);
    helpers.drawAudioOutputPin("Gate Nuanced", 2);
    helpers.drawAudioOutputPin("Velocity", 3);
    helpers.drawAudioOutputPin("Mod", 4);
    helpers.drawAudioOutputPin("Trigger", 5);

    // Note: helpers API handles pin disappearance when the number of steps shrinks; no manual clear required here.
}
#endif

// Parameter bus contract implementation
bool StepSequencerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // ARCHITECTURAL FIX: All modulation is now on the single input bus at index 0
    outBusIndex = 0;

    // Global Audio/Mod Inputs (Absolute Channels)
    // 0-1: Mod In L/R, 2: Rate, 3: GateLen, 4: Steps, 5: Steps Max
    if (paramId == "rate_mod")       { outChannelIndexInBus = 2; return true; }
    if (paramId == "gateLength_mod") { outChannelIndexInBus = 3; return true; }
    if (paramId == "numSteps_mod")   { outChannelIndexInBus = 4; return true; }

    // Per-Step Trigger Modulation (Absolute Channels 22..37) — check TRIGGER first to avoid matching generic "_mod" suffix
    if (paramId.startsWith("step") && paramId.endsWith("_trig_mod"))
    {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false)
                           .upToFirstOccurrenceOf("_trig_mod", false, false)
                           .getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS)
        {
            outChannelIndexInBus = 22 + (stepNum - 1); // e.g., step1_trig_mod is on channel 22
            return true;
        }
    }

    // Per-Step Value Modulation (Absolute Channels 6..21)
    if (paramId.startsWith("step") && paramId.endsWith("_mod") && !paramId.endsWith("_trig_mod") && !paramId.endsWith("_gate_mod"))
    {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false)
                           .upToFirstOccurrenceOf("_mod", false, false)
                           .getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS)
        {
            outChannelIndexInBus = 6 + (stepNum - 1); // e.g., step1_mod is on channel 6
            return true;
        }
    }

    // Per-Step Gate Level Modulation (Absolute Channels 38..53)
    if (paramId.startsWith("step") && paramId.endsWith("_gate_mod"))
    {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false)
                           .upToFirstOccurrenceOf("_gate_mod", false, false)
                           .getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS)
        {
            outChannelIndexInBus = 38 + (stepNum - 1); // e.g., step1_gate_mod is on channel 38
            return true;
        }
    }
    
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\StepSequencerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class StepSequencerModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_STEPS = 16;
    StepSequencerModuleProcessor();
    ~StepSequencerModuleProcessor() override = default;

    const juce::String getName() const override { return "sequencer"; }

    void prepareToPlay (double newSampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // State management for transport settings
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree&) override;

    // Pin label overrides
    juce::String getAudioOutputLabel(int channel) const override;
    juce::String getAudioInputLabel(int channel) const override;
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    void setTimingInfo(const TransportState& state) override;

    juce::AudioProcessorValueTreeState apvts;

    std::atomic<int> currentStep { 0 };
    double phase { 0.0 };
    double sampleRate { 44100.0 };

    TransportState m_currentTransport;
    bool wasPlaying = false;

    std::atomic<float>* rateParam { nullptr };
    std::atomic<float>* gateLengthParam { nullptr };
    std::atomic<float>* gateThresholdParam { nullptr };
    std::atomic<float>* rateModParam { nullptr };
    std::atomic<float>* gateLengthModParam { nullptr };
    std::atomic<float>* numStepsModParam { nullptr };
    std::atomic<float>* stepsModMaxParam { nullptr };
    std::vector<std::atomic<float>*> pitchParams; // size MAX_STEPS
    std::vector<std::atomic<float>*> stepModParams; // size MAX_STEPS
    // Per-step trigger base (checkbox) and modulation
    std::vector<juce::AudioParameterBool*> stepTrigParams; // size MAX_STEPS
    std::vector<std::atomic<float>*> stepTrigModParams;    // size MAX_STEPS (0..1)
    // Per-step gate level parameters
    std::vector<std::atomic<float>*> stepGateParams;       // size MAX_STEPS (0..1)
    std::atomic<float>* numStepsParam { nullptr };

    // Pulse generator state for Trigger Out
    int pendingTriggerSamples { 0 };
    
    // Gate fade-in state
    bool previousGateOn { false };
    float gateFadeProgress { 0.0f };
    static constexpr float GATE_FADE_TIME_MS = 5.0f; // 5ms fade-in time
};

// Pin label overrides
inline juce::String StepSequencerModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Pitch";
        case 1: return "Gate";
        case 2: return "Gate Nuanced";
        case 3: return "Velocity";
        case 4: return "Mod";
        case 5: return "Trigger";
        default: return juce::String("Out ") + juce::String(channel + 1);
    }
}

inline juce::String StepSequencerModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Mod In L";
        case 1: return "Mod In R";
        case 2: return "Rate Mod";
        case 3: return "Gate Mod";
        case 4: return "Steps Mod";
        default: return juce::String("In ") + juce::String(channel + 1);
    }
}




================================================================================
FILE: juce\Source\audio\modules\TimePitchModuleProcessor.cpp
================================================================================


#include "TimePitchModuleProcessor.h"

static inline void ensureCapacity (juce::HeapBlock<float>& block, int frames, int channels, int& capacityFrames)
{
    if (frames > capacityFrames)
    {
        capacityFrames = juce::jmax (frames, capacityFrames * 2 + 128);
        block.allocate ((size_t) (capacityFrames * channels), true);
    }
}

juce::AudioProcessorValueTreeState::ParameterLayout TimePitchModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdSpeed, "Speed", juce::NormalisableRange<float> (0.25f, 4.0f, 0.0001f, 0.5f), 1.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdPitch, "Pitch (st)", juce::NormalisableRange<float> (-24.0f, 24.0f, 0.01f), 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterChoice> (paramIdEngine, "Engine", juce::StringArray { "RubberBand", "Naive" }, 0));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdSpeedMod, "Speed Mod", juce::NormalisableRange<float> (0.25f, 4.0f, 0.0001f, 0.5f), 1.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdPitchMod, "Pitch Mod", juce::NormalisableRange<float> (-24.0f, 24.0f, 0.01f), 0.0f));
    return { p.begin(), p.end() };
}

TimePitchModuleProcessor::TimePitchModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(4), true) // ch0 L in, ch1 R in, ch2 Speed Mod, ch3 Pitch Mod
        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "TimePitchParams", createParameterLayout())
{
    speedParam     = apvts.getRawParameterValue (paramIdSpeed);
    pitchParam     = apvts.getRawParameterValue (paramIdPitch);
    speedModParam  = apvts.getRawParameterValue (paramIdSpeedMod);
    pitchModParam  = apvts.getRawParameterValue (paramIdPitchMod);
    engineParam    = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter (paramIdEngine));

    lastOutputValues.clear();
    lastOutputValues.push_back (std::make_unique<std::atomic<float>> (0.0f));
    lastOutputValues.push_back (std::make_unique<std::atomic<float>> (0.0f));
    
    // Initialize smoothed values
    speedSm.reset(1.0f);
    pitchSm.reset(0.0f);
}

void TimePitchModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    sr = sampleRate;
    timePitch.prepare (sampleRate, 2, samplesPerBlock);

    // Initialize FIFO to ~2 seconds of audio
    fifoSize = (int) (sampleRate * 2.0);
    if (fifoSize < samplesPerBlock * 4) fifoSize = samplesPerBlock * 4; // safety minimum
    inputFifo.setSize (2, fifoSize);
    abstractFifo.setTotalSize (fifoSize);

    interleavedCapacityFrames = 0;
    ensureCapacity (interleavedInput, samplesPerBlock, 2, interleavedCapacityFrames);
    ensureCapacity (interleavedOutput, samplesPerBlock * 2, 2, interleavedCapacityFrames); // some headroom
    timePitch.reset();
}

void TimePitchModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    auto inBus = getBusBuffer(buffer, true, 0);  // Single bus
    auto outBus = getBusBuffer(buffer, false, 0);
    
    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // 1) Write incoming audio into FIFO (use inBus explicitly)
    int start1=0,size1=0,start2=0,size2=0;
    abstractFifo.prepareToWrite (numSamples, start1, size1, start2, size2);
    if (size1 > 0)
    {
        inputFifo.copyFrom (0, start1, inBus, 0, 0, size1);
        inputFifo.copyFrom (1, start1, inBus, 1, 0, size1);
    }
    if (size2 > 0)
    {
        inputFifo.copyFrom (0, start2, inBus, 0, size1, size2);
        inputFifo.copyFrom (1, start2, inBus, 1, size1, size2);
    }
    const int written = size1 + size2;
    abstractFifo.finishedWrite (written);

    // 2) Read params and configure engine
    const int engineIdx = engineParam != nullptr ? engineParam->getIndex() : 0;
    {
        static int currentMode = -1;
        const int requestedMode = (engineIdx == 0 ? (int) TimePitchProcessor::Mode::RubberBand : (int) TimePitchProcessor::Mode::Fifo);
        if (requestedMode != currentMode)
        {
            timePitch.reset();
            currentMode = requestedMode;
        }
        timePitch.setMode ((TimePitchProcessor::Mode) requestedMode);
    }

    // Get pointers to modulation CV inputs
    const bool isSpeedMod = isParamInputConnected("speed");
    const bool isPitchMod = isParamInputConnected("pitch");
    
    const float* speedCV = isSpeedMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* pitchCV = isPitchMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    
    // Process in slices to reduce engine reconfig cost
    const int sliceSize = 32;
    for (int sliceStart = 0; sliceStart < numSamples; sliceStart += sliceSize)
    {
        const int sliceEnd = juce::jmin(sliceStart + sliceSize, numSamples);
        const int sliceSamples = sliceEnd - sliceStart;
        
        // Calculate target values from CV (use middle of slice)
        const int midSample = sliceStart + sliceSamples / 2;
        
        float targetSpeed = speedParam->load();
        if (isSpeedMod && speedCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, speedCV[midSample]);
            const float minSpeed = 0.25f;
            const float maxSpeed = 4.0f;
            targetSpeed = minSpeed * std::pow(maxSpeed / minSpeed, cv);
        }
        
        float targetPitch = pitchParam->load();
        if (isPitchMod && pitchCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, pitchCV[midSample]);
            targetPitch = -24.0f + cv * 48.0f; // -24 to +24 semitones
        }
        
        // Set targets and advance smoothing
        speedSm.setTargetValue(juce::jlimit(0.1f, 4.0f, targetSpeed));
        pitchSm.setTargetValue(juce::jlimit(-24.0f, 24.0f, targetPitch));
        
        // Update telemetry for live UI feedback (once per slice)
        setLiveParamValue("speed_live", speedSm.getCurrentValue());
        setLiveParamValue("pitch_live", pitchSm.getCurrentValue());
        
        // Advance smoothing for this slice
        for (int i = 0; i < sliceSamples; ++i) {
            speedSm.skip(1);
            pitchSm.skip(1);
        }
        
        // Configure engine with current smoothed values
        timePitch.setTimeStretchRatio(speedSm.getCurrentValue());
        timePitch.setPitchSemitones(pitchSm.getCurrentValue());
        
        // Publish telemetry
        setLiveParamValue("speed", speedSm.getCurrentValue());
        setLiveParamValue("pitch", pitchSm.getCurrentValue());
    }

    // 3) Compute frames needed to fill this block
    const double safeSpeed = juce::jlimit (0.1, 4.0, (double) speedSm.getCurrentValue());
    const int framesToFeed = juce::jmax (1, (int) std::ceil ((double) numSamples / safeSpeed));

    outBus.clear();
    if (abstractFifo.getNumReady() >= framesToFeed)
    {
        // 4) Read from FIFO and interleave
        ensureCapacity (interleavedInput, framesToFeed, 2, interleavedCapacityFrames);
        abstractFifo.prepareToRead (framesToFeed, start1, size1, start2, size2);
        auto* inL = inputFifo.getReadPointer (0);
        auto* inR = inputFifo.getReadPointer (1);
        float* inLR = interleavedInput.getData();
        for (int i = 0; i < size1; ++i) { inLR[2*i+0] = inL[start1 + i]; inLR[2*i+1] = inR[start1 + i]; }
        if (size2 > 0)
            for (int i = 0; i < size2; ++i) { inLR[2*(size1+i)+0] = inL[start2 + i]; inLR[2*(size1+i)+1] = inR[start2 + i]; }
        const int readCount = size1 + size2;
        abstractFifo.finishedRead (readCount);

        // 5) Process and copy back
        // Guard against engine internal errors with try/catch (non-RT critical path)
        try { timePitch.putInterleaved (inLR, framesToFeed); }
        catch (...) { /* swallow to avoid crash; output will be silence */ }
        ensureCapacity (interleavedOutput, numSamples, 2, interleavedCapacityFrames);
        int produced = 0;
        try { produced = timePitch.receiveInterleaved (interleavedOutput.getData(), numSamples); }
        catch (...) { produced = 0; }
        if (produced > 0)
        {
            const int outFrames = juce::jmin (numSamples, produced);
            const float* outLR = interleavedOutput.getData();
            float* L = outBus.getNumChannels() > 0 ? outBus.getWritePointer (0) : buffer.getWritePointer(0);
            float* R = outBus.getNumChannels() > 1 ? outBus.getWritePointer (1) : L;
            for (int i = 0; i < outFrames; ++i) { L[i] = outLR[2*i+0]; if (R) R[i] = outLR[2*i+1]; }
        }
    }

    // Update lastOutputValues
    if (lastOutputValues.size() >= 2)
    {
        lastOutputValues[0]->store (buffer.getMagnitude (0, 0, numSamples));
        lastOutputValues[1]->store (buffer.getNumChannels() > 1 ? buffer.getMagnitude (1, 0, numSamples) : 0.0f);
    }
}

// Parameter bus contract implementation
bool TimePitchModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0;
    if (paramId == "speed") { outChannelIndexInBus = 2; return true; }  // Speed Mod
    if (paramId == "pitch") { outChannelIndexInBus = 3; return true; }  // Pitch Mod
    return false;
}

#if defined(PRESET_CREATOR_UI)
void TimePitchModuleProcessor::drawParametersInNode (float itemWidth,
                                                    const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                    const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth (itemWidth);
    auto& ap = getAPVTS();

    // Speed
    bool spMod = isParamModulated ("speed");
    if (spMod) { 
        ImGui::BeginDisabled(); 
        ImGui::PushStyleColor (ImGuiCol_FrameBg, ImVec4 (1,1,0,0.3f)); 
    }
    float speed = ap.getRawParameterValue (paramIdSpeed)->load();
    if (spMod) {
        speed = getLiveParamValueFor("speed", "speed_live", speed);
    }
    if (ImGui::SliderFloat ("Speed", &speed, 0.25f, 4.0f, "%.2fx")) {
        if (!spMod) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter (paramIdSpeed))) *p = speed;
        }
    }
    if (!spMod) adjustParamOnWheel (ap.getParameter (paramIdSpeed), paramIdSpeed, speed);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (spMod) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }

    // Pitch
    bool piMod = isParamModulated ("pitch");
    if (piMod) { 
        ImGui::BeginDisabled(); 
        ImGui::PushStyleColor (ImGuiCol_FrameBg, ImVec4 (1,1,0,0.3f)); 
    }
    float pitch = ap.getRawParameterValue (paramIdPitch)->load();
    if (piMod) {
        pitch = getLiveParamValueFor("pitch", "pitch_live", pitch);
    }
    if (ImGui::SliderFloat ("Pitch", &pitch, -24.0f, 24.0f, "%.1f st"))
        if (!piMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter (paramIdPitch))) *p = pitch;
    if (!piMod) adjustParamOnWheel (ap.getParameter (paramIdPitch), paramIdPitch, pitch);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (piMod) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }

    // Engine
    int engineIdx = engineParam != nullptr ? engineParam->getIndex() : 0;
    const char* items[] = { "RubberBand", "Naive" };
    if (ImGui::Combo ("Engine", &engineIdx, items, 2))
        if (engineParam) *engineParam = engineIdx;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();

    ImGui::PopItemWidth();
}

void TimePitchModuleProcessor::drawIoPins (const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin ("In L", 0);
    helpers.drawAudioInputPin ("In R", 1);
    helpers.drawAudioInputPin ("Speed Mod", 2);
    helpers.drawAudioInputPin ("Pitch Mod", 3);

    helpers.drawAudioOutputPin ("Out L", 0);
    helpers.drawAudioOutputPin ("Out R", 1);
}
#endif




================================================================================
FILE: juce\Source\audio\modules\TimePitchModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_core/juce_core.h>
#include <juce_dsp/juce_dsp.h>
#include "../dsp/TimePitchProcessor.h"

class TimePitchModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr const char* paramIdSpeed     = "speed";
    static constexpr const char* paramIdPitch     = "pitch";
    static constexpr const char* paramIdEngine    = "engine";
    static constexpr const char* paramIdSpeedMod  = "speed_mod";
    static constexpr const char* paramIdPitchMod  = "pitch_mod";

    TimePitchModuleProcessor();
    ~TimePitchModuleProcessor() override = default;

    const juce::String getName() const override { return "timepitch"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Speed Mod";
            case 3: return "Pitch Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override;
    void drawIoPins (const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    TimePitchProcessor timePitch;
    juce::HeapBlock<float> interleavedInput;
    juce::HeapBlock<float> interleavedOutput;
    int interleavedCapacityFrames { 0 };

    // Parameter pointers
    std::atomic<float>* speedParam { nullptr };
    std::atomic<float>* pitchParam { nullptr };
    std::atomic<float>* speedModParam { nullptr };
    std::atomic<float>* pitchModParam { nullptr };
    juce::AudioParameterChoice* engineParam { nullptr };
    double sr { 48000.0 };

    // --- Streaming FIFO for live input buffering ---
    juce::AudioBuffer<float> inputFifo; // stereo FIFO storage
    juce::AbstractFifo abstractFifo { 0 }; // manages read/write indices
    int fifoSize { 0 };
    
    // Smoothed parameters for zipper-free modulation
    juce::SmoothedValue<float> speedSm;
    juce::SmoothedValue<float> pitchSm;
};




================================================================================
FILE: juce\Source\audio\modules\TimingData.h
================================================================================


#pragma once

#include <juce_core/juce_core.h>
#include <vector>

struct PhonemeTiming
{
	juce::String phoneme;
	double startTimeSeconds{};
	double endTimeSeconds{};
	double durationSeconds{};

	PhonemeTiming() = default;
	PhonemeTiming(const juce::String& p, double start, double end)
		: phoneme(p), startTimeSeconds(start), endTimeSeconds(end), durationSeconds(end - start) {}
};

struct WordTiming
{
	juce::String word;
	double startTimeSeconds{};
	double endTimeSeconds{};
	double durationSeconds{};
	std::vector<PhonemeTiming> phonemes;

	WordTiming() = default;
	WordTiming(const juce::String& w, double start, double end)
		: word(w), startTimeSeconds(start), endTimeSeconds(end), durationSeconds(end - start) {}
};


================================================================================
FILE: juce\Source\audio\modules\TrackMixerModuleProcessor.cpp
================================================================================


#include "TrackMixerModuleProcessor.h"
#include <cmath>

TrackMixerModuleProcessor::TrackMixerModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(MAX_TRACKS + 1 + (MAX_TRACKS * 2)), true) // 0-63: Audio, 64: NumTracks Mod, 65+: Gain/Pan Mods
          .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "TrackMixerParams", createParameterLayout())
{
    numTracksParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numTracks"));
    numTracksMaxParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numTracks_max"));

    trackGainParams.resize(MAX_TRACKS);
    trackPanParams.resize(MAX_TRACKS);
    for (int i = 0; i < MAX_TRACKS; ++i)
    {
        trackGainParams[i] = apvts.getRawParameterValue("track_gain_" + juce::String(i + 1));
        trackPanParams[i]  = apvts.getRawParameterValue("track_pan_" + juce::String(i + 1));
    }
    
    // Initialize lastOutputValues for cable inspector
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
    
  // Initialize effective track count for UI
  if (numTracksParam != nullptr)
      lastActiveTracks.store(numTracksParam->get());
}

juce::AudioProcessorValueTreeState::ParameterLayout TrackMixerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterInt>("numTracks", "Num Tracks", 2, MAX_TRACKS, 8));
    p.push_back(std::make_unique<juce::AudioParameterInt>("numTracks_max", "Num Tracks Max", 2, MAX_TRACKS, MAX_TRACKS));

    for (int i = 1; i <= MAX_TRACKS; ++i)
    {
        p.push_back(std::make_unique<juce::AudioParameterFloat>("track_gain_" + juce::String(i),
            "Track " + juce::String(i) + " Gain",
            juce::NormalisableRange<float>(-60.0f, 6.0f, 0.1f), 0.0f));
        p.push_back(std::make_unique<juce::AudioParameterFloat>("track_pan_" + juce::String(i),
            "Track " + juce::String(i) + " Pan",
            juce::NormalisableRange<float>(-1.0f, 1.0f, 0.01f), 0.0f));
    }
    return { p.begin(), p.end() };
}

void TrackMixerModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void TrackMixerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto inBus  = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    
    // Determine the number of active tracks from the parameter or its modulation input
    int numTracks = numTracksParam->get();
    
    if (isParamInputConnected(paramIdNumTracksMod) && inBus.getNumChannels() > MAX_TRACKS)
    {
        float modValue = inBus.getReadPointer(MAX_TRACKS)[0]; // Channel 64 for numTracks mod

        // Interpret modValue as a raw track count (not normalized CV)
        int maxTracks = numTracksMaxParam->get();
        numTracks = juce::roundToInt(modValue); // Round the raw value to the nearest integer
        numTracks = juce::jlimit(2, maxTracks, numTracks); // Clamp it to the valid range
    }

    // Publish live value for UI and cache for drawing pins/controls
    lastActiveTracks.store(juce::jlimit(2, MAX_TRACKS, numTracks));
    setLiveParamValue("numTracks_live", (float) numTracks);

    juce::AudioBuffer<float> mixBus(2, numSamples);
    mixBus.clear();

    // Loop through every active track and add its sound to the mix
    for (int t = 0; t < numTracks; ++t)
    {
        const float* src = (t < inBus.getNumChannels()) ? inBus.getReadPointer(t) : nullptr;
        if (src == nullptr) continue;

        float* mixL = mixBus.getWritePointer(0);
        float* mixR = mixBus.getWritePointer(1);

        const juce::String trackNumStr = juce::String(t + 1);

        const bool isGainModulated = isParamInputConnected(paramIdGainModPrefix + trackNumStr);
        const bool isPanModulated  = isParamInputConnected(paramIdPanModPrefix + trackNumStr);

        if (!isGainModulated && !isPanModulated)
        {
            // Optimized path for non-modulated tracks
            const float gainDb = trackGainParams[t]->load();
            const float panVal = trackPanParams[t]->load();
            const float gainLin = juce::Decibels::decibelsToGain(gainDb);
            const float angle = (panVal * 0.5f + 0.5f) * juce::MathConstants<float>::halfPi;
            const float lMul = gainLin * std::cos(angle);
            const float rMul = gainLin * std::sin(angle);
            juce::FloatVectorOperations::addWithMultiply(mixL, src, lMul, numSamples);
            juce::FloatVectorOperations::addWithMultiply(mixR, src, rMul, numSamples);
        }
        else // Per-sample processing is needed if either gain or pan is modulated
        {
            const float baseGainDb = trackGainParams[t]->load();
            const float basePan = trackPanParams[t]->load();
            
            // Get modulation signals from unified input bus
            const int gainModChannel = MAX_TRACKS + 1 + (t * 2);
            const int panModChannel = MAX_TRACKS + 1 + (t * 2) + 1;
            const float* gainModSignal = isGainModulated && inBus.getNumChannels() > gainModChannel ? inBus.getReadPointer(gainModChannel) : nullptr;
            const float* panModSignal  = isPanModulated && inBus.getNumChannels() > panModChannel ? inBus.getReadPointer(panModChannel) : nullptr;

            for (int i = 0; i < numSamples; ++i)
            {
                float currentGainDb = isGainModulated && gainModSignal ? juce::jmap(gainModSignal[i], 0.0f, 1.0f, -60.0f, 6.0f) : baseGainDb;
                float currentPan    = isPanModulated && panModSignal ? juce::jmap(panModSignal[i], 0.0f, 1.0f, -1.0f, 1.0f) : basePan;
                
                const float gainLin = juce::Decibels::decibelsToGain(currentGainDb);
                const float angle = (currentPan * 0.5f + 0.5f) * juce::MathConstants<float>::halfPi;
                const float lMul = gainLin * std::cos(angle);
                const float rMul = gainLin * std::sin(angle);
                
                mixL[i] += src[i] * lMul;
                mixR[i] += src[i] * rMul;
                
                // Store live values for UI telemetry (update every 64 samples to avoid overhead)
                if ((i & 0x3F) == 0)
                {
                    if (isGainModulated) setLiveParamValue("track_gain_" + trackNumStr + "_live", currentGainDb);
                    if (isPanModulated) setLiveParamValue("track_pan_" + trackNumStr + "_live", currentPan);
                }
            }
        }
    }
    
    // Copy the final mixed signal to the output
    outBus.copyFrom(0, 0, mixBus, 0, 0, numSamples);
    if (outBus.getNumChannels() > 1)
        outBus.copyFrom(1, 0, mixBus, 1, 0, numSamples);
}

int TrackMixerModuleProcessor::getEffectiveNumTracks() const
{
    return numTracksParam ? numTracksParam->get() : 8;
}

void TrackMixerModuleProcessor::getStateInformation(juce::MemoryBlock& destData)
{
    auto state = apvts.copyState();
    std::unique_ptr<juce::XmlElement> xml(state.createXml());
    copyXmlToBinary(*xml, destData);
}

void TrackMixerModuleProcessor::setStateInformation(const void* data, int sizeInBytes)
{
    std::unique_ptr<juce::XmlElement> xmlState(getXmlFromBinary(data, sizeInBytes));
    if (xmlState.get() != nullptr)
        if (xmlState->hasTagName(apvts.state.getType()))
            apvts.replaceState(juce::ValueTree::fromXml(*xmlState));
}

#if defined(PRESET_CREATOR_UI)
void TrackMixerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    const int activeTracks = getEffectiveNumTracks();

    // --- Master "Tracks" Slider with correct modulation detection ---
    const bool isCountModulated = isParamModulated(paramIdNumTracksMod);
    int displayedTracks = numTracksParam->get();
    // If modulated, show the live computed value in the disabled slider
    if (isCountModulated)
        displayedTracks = juce::roundToInt(getLiveParamValueFor(paramIdNumTracksMod, "numTracks_live", (float) displayedTracks));
    const int maxTracksBound = numTracksMaxParam->get();

    if (isCountModulated) ImGui::BeginDisabled();
    
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderInt("Tracks", &displayedTracks, 2, maxTracksBound))
    {
        if (!isCountModulated)
        {
            *numTracksParam = displayedTracks;
            onModificationEnded();
        }
    }
    if (!isCountModulated)
    {
        adjustParamOnWheel(ap.getParameter("numTracks"), "numTracks", (float)displayedTracks);
    }
    if (ImGui::IsItemDeactivatedAfterEdit() && !isCountModulated) { onModificationEnded(); }
    ImGui::PopItemWidth();

    if (isCountModulated)
    {
        ImGui::EndDisabled();
        ImGui::SameLine();
        ImGui::TextUnformatted("(mod)");
    }


    // --- Per-Track Sliders (Dynamically created for all active tracks) ---
    // --- FIX: Use the 'displayedTracks' variable here, which respects modulation ---
    for (int t = 0; t < displayedTracks; ++t)
    {
        ImGui::PushID(t);
        const juce::String trackNumStr = juce::String(t + 1);
        
        auto* gainParamPtr = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("track_gain_" + trackNumStr));
        auto* panParamPtr  = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("track_pan_" + trackNumStr));

        if (!gainParamPtr || !panParamPtr)
        {
            ImGui::PopID();
            continue;
        }

        // --- Gain Slider for Track t+1 ---
        const bool isGainModulated = isParamModulated("track_gain_" + trackNumStr);
        float gainVal = gainParamPtr->get(); // Get base value
        if (isGainModulated)
        {
            // If modulated, show the live computed value
            gainVal = getLiveParamValueFor("track_gain_" + trackNumStr, "track_gain_" + trackNumStr + "_live", gainVal);
            ImGui::BeginDisabled();
        }

        ImGui::PushItemWidth(itemWidth * 0.5f - 20); // Adjust width for mod indicator
        if (ImGui::SliderFloat(("G" + trackNumStr).toRawUTF8(), &gainVal, -60.0f, 6.0f, "%.1f dB"))
        {
            if (!isGainModulated) *gainParamPtr = gainVal;
        }
        if (!isGainModulated) adjustParamOnWheel(gainParamPtr, "gain", gainVal);
        if (ImGui::IsItemDeactivatedAfterEdit() && !isGainModulated) { onModificationEnded(); }
        ImGui::PopItemWidth();

        if (isGainModulated)
        {
            ImGui::EndDisabled();
            ImGui::SameLine();
            ImGui::TextUnformatted("(m)");
        }

        ImGui::SameLine();

        // --- Pan Slider for Track t+1 ---
        const bool isPanModulated = isParamModulated("track_pan_" + trackNumStr);
        float panVal  = panParamPtr->get(); // Get base value
        if (isPanModulated)
        {
            // If modulated, show the live computed value
            panVal = getLiveParamValueFor("track_pan_" + trackNumStr, "track_pan_" + trackNumStr + "_live", panVal);
            ImGui::BeginDisabled();
        }
        
        ImGui::PushItemWidth(itemWidth * 0.5f - 20); // Adjust width for mod indicator
        if (ImGui::SliderFloat(("P" + trackNumStr).toRawUTF8(), &panVal, -1.0f, 1.0f, "%.2f"))
        {
            if (!isPanModulated) *panParamPtr = panVal;
        }
        if (!isPanModulated) adjustParamOnWheel(panParamPtr, "pan", panVal);
        if (ImGui::IsItemDeactivatedAfterEdit() && !isPanModulated) { onModificationEnded(); }
        ImGui::PopItemWidth();

        if (isPanModulated)
        {
            ImGui::EndDisabled();
            ImGui::SameLine();
            ImGui::TextUnformatted("(m)");
        }
        
        ImGui::PopID();
    }
}
#endif

// Human-legible per-channel labels for the single multichannel input bus
juce::String TrackMixerModuleProcessor::getAudioInputLabel(int channel) const
{
    // Channel names mirror visual controls: Audio N, Num Tracks Mod, Gain N Mod, Pan N Mod
    // Audio inputs occupy channels [0 .. MAX_TRACKS-1]
    if (channel >= 0 && channel < MAX_TRACKS)
        return "Audio " + juce::String(channel + 1);
    // Mod lanes begin after audio inputs
    const int modBase = MAX_TRACKS; // conceptual; we expose labels by absolute channel
    // For labeling, we follow the param routing: 0: numTracks, then pairs for each track
    const int idx = channel - MAX_TRACKS;
    if (idx == 0) return "Num Tracks Mod";
    if (idx > 0)
    {
        const int pair = (idx - 1) / 2; // 0-based track
        const bool isGain = ((idx - 1) % 2) == 0;
        if (pair >= 0 && pair < MAX_TRACKS)
            return juce::String(isGain ? "Gain " : "Pan ") + juce::String(pair + 1) + " Mod";
    }
    return {};
}

void TrackMixerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Use the last value computed on audio thread if available
    const int activeTracks = juce::jlimit(2, MAX_TRACKS, lastActiveTracks.load());

    // --- Draw Output Pins First ---
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);

    // --- Draw Input Pins ---
    // Replace generic bus pins with human-legible per-channel pins
    for (int t = 0; t < activeTracks; ++t)
        helpers.drawAudioInputPin(("Audio " + juce::String(t + 1)).toRawUTF8(), t);

    // --- Draw Modulation Pins ---
    int busIdx, chanInBus;
    if (getParamRouting(paramIdNumTracksMod, busIdx, chanInBus))
        helpers.drawAudioInputPin("Num Tracks Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

    // Draw per-track modulation pins
    for (int t = 1; t <= activeTracks; ++t)
    {
        const juce::String trackNumStr = juce::String(t);
        const juce::String gainModId = paramIdGainModPrefix + trackNumStr;
        const juce::String panModId = paramIdPanModPrefix + trackNumStr;

        if (getParamRouting(gainModId, busIdx, chanInBus))
            helpers.drawAudioInputPin(("Gain " + trackNumStr + " Mod").toRawUTF8(), getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting(panModId, busIdx, chanInBus))
            helpers.drawAudioInputPin(("Pan " + trackNumStr + " Mod").toRawUTF8(), getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    }
}

bool TrackMixerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // All modulation is on the single input bus
    outBusIndex = 0;

    if (paramId == paramIdNumTracksMod)
    {
        outChannelIndexInBus = MAX_TRACKS; // Channel 64
        return true;
    }

    if (paramId.startsWith(paramIdGainModPrefix))
    {
        const juce::String trackNumStr = paramId.substring(juce::String(paramIdGainModPrefix).length());
        const int trackNum = trackNumStr.getIntValue();
        if (trackNum > 0 && trackNum <= MAX_TRACKS)
        {
            outChannelIndexInBus = MAX_TRACKS + 1 + (trackNum - 1) * 2; // Gain channels start at 65
            return true;
        }
    }
    else if (paramId.startsWith(paramIdPanModPrefix))
    {
        const juce::String trackNumStr = paramId.substring(juce::String(paramIdPanModPrefix).length());
        const int trackNum = trackNumStr.getIntValue();
        if (trackNum > 0 && trackNum <= MAX_TRACKS)
        {
            outChannelIndexInBus = MAX_TRACKS + 1 + (trackNum - 1) * 2 + 1; // Pan channels start at 66
            return true;
        }
    }
    return false;
}

================================================================================
FILE: juce\Source\audio\modules\TrackMixerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class TrackMixerModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_TRACKS = 64;

    TrackMixerModuleProcessor();
    ~TrackMixerModuleProcessor() override = default;

    const juce::String getName() const override { return "track mixer"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi) override;
    void getStateInformation(juce::MemoryBlock& destData) override;
    void setStateInformation(const void* data, int sizeInBytes) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // Per-channel label used by cable inspector and tooltips
    juce::String getAudioInputLabel(int channel) const override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;
#endif

private:
    juce::AudioProcessorValueTreeState apvts;

    // Global controls
    juce::AudioParameterInt* numTracksParam { nullptr };
    juce::AudioParameterInt* numTracksMaxParam { nullptr }; // To bound modulation

    // Per-track controls
    std::vector<std::atomic<float>*> trackGainParams;
    std::vector<std::atomic<float>*> trackPanParams;

    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdNumTracksMod = "numTracks_mod";
    static constexpr auto paramIdGainModPrefix = "track_gain_";
    static constexpr auto paramIdPanModPrefix = "track_pan_";

    // Modulation parameter pointers are no longer needed
    // std::vector<std::atomic<float>*> trackGainModParams;
    // std::vector<std::atomic<float>*> trackPanModParams;

    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    int getEffectiveNumTracks() const;

    mutable std::atomic<int> lastActiveTracks { 2 };
    static constexpr float kNeutral = 0.5f;
    static constexpr float kDeadZone = 0.02f; // treat values within +/-2% around neutral as no-mod
};




================================================================================
FILE: juce\Source\audio\modules\TTSPerformerModuleProcessor.cpp
================================================================================


#include "TTSPerformerModuleProcessor.h"
#include <juce_audio_formats/juce_audio_formats.h>
#include <nlohmann/json.hpp>
#include <unordered_set>

// --- Audio-based Word Detection Implementation ---
// This function is used when JSON timing data is not available from piper.exe
std::vector<WordTiming> TTSPerformerModuleProcessor::detectWordsFromAudio(const juce::AudioBuffer<float>& audio, double sr)
{
    std::vector<WordTiming> timings;
    if (audio.getNumSamples() == 0 || sr <= 0.0)
        return timings;

    // --- MORE AGGRESSIVE PARAMETERS FOR FINER SLICING ---
    const int windowSize = 256;           // Analyze in smaller chunks (was 1024).
    const float energyThreshold = 0.01f;    // Lower the volume needed to be considered sound (was 0.02f).
    const float silenceThreshold = 0.008f;  // Require audio to be quieter to be considered silence (was 0.01f).
    const double minSilenceSec = 0.04;      // Require only 40ms of silence to split words (was 0.1s).
    const double minWordSec = 0.05;         // 50ms minimum duration for a sound to be a "word".

    enum class State { IN_SILENCE, IN_WORD };
    State state = State::IN_SILENCE;

    double wordStartTime = 0.0;
    int silenceCounter = 0;
    const int minSilenceSamples = (int)(minSilenceSec * sr);

    for (int i = 0; i < audio.getNumSamples(); i += windowSize)
    {
        int numSamplesInWindow = juce::jmin(windowSize, audio.getNumSamples() - i);
        float rms = audio.getRMSLevel(0, i, numSamplesInWindow);
        double currentTime = (double)i / sr;

        if (state == State::IN_SILENCE)
        {
            if (rms > energyThreshold)
            {
                state = State::IN_WORD;
                wordStartTime = currentTime;
                silenceCounter = 0;
            }
        }
        else // state == IN_WORD
        {
            if (rms < silenceThreshold)
            {
                silenceCounter += numSamplesInWindow;
                if (silenceCounter >= minSilenceSamples)
                {
                    state = State::IN_SILENCE;
                    double wordEndTime = currentTime - minSilenceSec;
                    if (wordEndTime > wordStartTime + minWordSec)
                    {
                        juce::String wordName = juce::String(timings.size() + 1);
                        timings.emplace_back(wordName, wordStartTime, wordEndTime);
                    }
                }
            }
            else
            {
                silenceCounter = 0;
            }
        }
    }

    if (state == State::IN_WORD)
    {
        double wordEndTime = (double)audio.getNumSamples() / sr;
        if (wordEndTime > wordStartTime + minWordSec)
        {
            juce::String wordName = juce::String(timings.size() + 1);
            timings.emplace_back(wordName, wordStartTime, wordEndTime);
        }
    }

    return timings;
}

#if defined(PRESET_CREATOR_UI)
void TTSPerformerModuleProcessor::playSelectedClipFromTrim()
{
    if (!(selectedClip && selectedClip->audio.getNumSamples() > 0)) return;
    const juce::ScopedLock lock(audioBufferLock);
    float trimStartNorm = apvts.getRawParameterValue("trimStart")->load();
    int trimStart = (int) std::floor(trimStartNorm * selectedClip->audio.getNumSamples());
    readPosition = (double)juce::jlimit(0, selectedClip->audio.getNumSamples()-1, trimStart);
    isPlaying = true;
}

void TTSPerformerModuleProcessor::stopPlayback()
{
    isPlaying = false;
}

bool TTSPerformerModuleProcessor::deleteSelectedClipFromDisk()
{
    if (!selectedClip) return false;
    juce::File dir = getClipsRootDir().getChildFile(selectedClip->clipId);
    bool ok = dir.deleteRecursively();
    {
        const juce::ScopedLock c(clipCacheLock);
        clipCache.erase(selectedClip->clipId);
        selectedClip.reset();
    }
    return ok;
}

bool TTSPerformerModuleProcessor::renameSelectedClipOnDisk(const juce::String& newName)
{
    if (!selectedClip || newName.isEmpty()) return false;
    
    // --- FIX: Don't rename directory, update metadata instead ---
    // The directory name is the hash ID and must remain unchanged
    juce::File dir = getClipsRootDir().getChildFile(selectedClip->clipId);
    if (!dir.exists()) return false;
    
    // Update the info.xml metadata with the new name
    juce::File metaFile = dir.getChildFile("info.xml");
    juce::XmlElement meta("ClipInfo");
    meta.setAttribute("name", newName.substring(0, 48));
    meta.setAttribute("text", selectedClip->text);  // Keep original text
    meta.setAttribute("model", selectedClip->modelKey);  // Keep model info
    
    bool ok = metaFile.replaceWithText(meta.toString());
    if (ok)
    {
        const juce::ScopedLock c(clipCacheLock);
        // Update the clip in memory (ID stays the same)
        selectedClip->name = newName;
    }
    return ok;
}
#endif

// Using a simplified parameter layout for this example.
// You can merge this with your more detailed layout.
juce::AudioProcessorValueTreeState::ParameterLayout TTSPerformerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    // Core parameters
    params.push_back(std::make_unique<juce::AudioParameterFloat>("volume", "Volume", 0.0f, 1.0f, 0.8f));
    
    // Transport & Sequencer (following SampleLoader pattern)
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rate", "Rate (Hz)", 
        juce::NormalisableRange<float>(0.1f, 20.0f, 0.01f, 0.5f), 2.0f));
    
    params.push_back(std::make_unique<juce::AudioParameterFloat>("gate", "Gate", 0.0f, 1.0f, 0.8f));
    
    // Trim range parameters
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "trimStart", "Trim Start", 
        juce::NormalisableRange<float>(0.0f, 1.0f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "trimEnd", "Trim End", 
        juce::NormalisableRange<float>(0.0f, 1.0f), 1.0f));
    
    
    // Speed/Pitch playback parameters (SampleLoader-style)
    params.push_back(std::make_unique<juce::AudioParameterFloat>("speed", "Speed", 
        juce::NormalisableRange<float>(0.25f, 4.0f, 0.01f), 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("pitch", "Pitch (semitones)", 
        juce::NormalisableRange<float>(-24.0f, 24.0f, 0.01f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("engine", "Engine", juce::StringArray{ "RubberBand", "Naive" }, 1));
    
    // Transport sync parameters
    params.push_back(std::make_unique<juce::AudioParameterBool>("sync", "Sync to Transport", false));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("rate_division", "Division",
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3));
    
    // NOTE: Do NOT create APVTS parameters for modulation inputs. They are CV buses only.
    
    return { params.begin(), params.end() };
}

// Helper function to find the correct word index for a given time in seconds
int TTSPerformerModuleProcessor::findWordIndexForTime(float timeSeconds) const
{
    if (!selectedClip)
        return 0;
    
    const auto& timings = getActiveTimings();
    if (timings.empty())
        return 0;
        
    for (int i = 0; i < (int)timings.size(); ++i)
    {
        if (timings[i].startTimeSeconds >= timeSeconds)
        {
            return i; // Return the index of the first word at or after the time
        }
    }
    
    return (int)timings.size() - 1; // Not found, return the last word
}

TTSPerformerModuleProcessor::TTSPerformerModuleProcessor()
    : ModuleProcessor(BusesProperties()
          // CORRECTED BUS LAYOUT:
          .withInput("Global Mods", juce::AudioChannelSet::discreteChannels(5), true)      // Bus 0: Rate, Gate, Trigger, Reset, Randomize
          .withInput("Trim Mods", juce::AudioChannelSet::discreteChannels(2), true)        // Bus 1: Trim Start, Trim End
          .withInput("Playback Mods", juce::AudioChannelSet::discreteChannels(2), true)    // Bus 2: Speed, Pitch
          .withInput("Word Triggers", juce::AudioChannelSet::discreteChannels(16), true)   // Bus 3: Word 1-16 Triggers
          // Output bus: 1 mono audio + 1 word gate + 1 EOP + 16 per-word gates + 16 per-word triggers = 35 channels
          .withOutput("Outputs", juce::AudioChannelSet::discreteChannels(35), true)),
      apvts(*this, nullptr, "TTSPerformerParams", createParameterLayout()),
      textFifo(64),
      textFifoBuffer(64),
      synthesisThread(*this)
{
    juce::Logger::writeToLog("[TTS][Ctor] instance=" + juce::String((juce::uint64)(uintptr_t)this) +
                             " storedLogicalId=" + juce::String((int)getLogicalId()));
    volumeParam = apvts.getRawParameterValue("volume");
    rateParam = apvts.getRawParameterValue("rate");
    gateParam = apvts.getRawParameterValue("gate");

    synthesisThread.startThread();
    
    // Load clips from disk on startup
    loadClipsFromDisk();
}

TTSPerformerModuleProcessor::~TTSPerformerModuleProcessor()
{
    synthesisThread.stopThread(5000);
}

void TTSPerformerModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    timePitch.prepare(sampleRate, 2, samplesPerBlock);
    interleavedCapacityFrames = samplesPerBlock; // keep equal to block by default
    interleavedInput.allocate((size_t)(interleavedCapacityFrames * 2), true);
    interleavedOutput.allocate((size_t)(interleavedCapacityFrames * 2), true);
    readPosition = 0.0;
    stepAccumulatorSec = 0.0;
    lastScaledBeats_tts = 0.0;
    juce::Logger::writeToLog("[TTS][Prepare] instance=" + juce::String((juce::uint64)(uintptr_t)this) +
                             " storedLogicalId=" + juce::String((int)getLogicalId()));
}

void TTSPerformerModuleProcessor::setTimingInfo(const TransportState& state)
{
    // --- THIS IS THE DEFINITIVE FIX ---

    // 1. Set the module's internal play state directly from the master transport.
    // This is what "emulating the spacebar" means.
    isPlaying = state.isPlaying;

    // 2. Check if the transport has just started playing from a stopped state.
    if (state.isPlaying && !wasPlaying)
    {
        juce::Logger::writeToLog("[TTS FIX] Play Toggled ON. Resetting playheads.");
        if (selectedClip && getSampleRate() > 0)
        {
            // Calculate start time in seconds
            const double clipDurationSeconds = selectedClip->audio.getNumSamples() / getSampleRate();
            const double trimStartSeconds = apvts.getRawParameterValue("trimStart")->load() * clipDurationSeconds;
            
            // Find the correct starting word and reset both playheads
            currentWordIndex = findWordIndexForTime((float)trimStartSeconds);
            readPosition = trimStartSeconds * getSampleRate();

            juce::Logger::writeToLog("[TTS FIX] Reset complete. Start Word: " + juce::String(currentWordIndex) +
                                   ", Read Position: " + juce::String(readPosition));
        }
        
        // Reset all internal schedulers and clocks.
        stepAccumulatorSec = 0.0;
        lastScaledBeats_tts = 0.0;
    }
    else if (!state.isPlaying && wasPlaying)
    {
         juce::Logger::writeToLog("[TTS FIX] Play Toggled OFF.");
    }

    wasPlaying = state.isPlaying;
    m_currentTransport = state;
    // --- END OF FIX ---
}

void TTSPerformerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    static bool once = false; if (!once) { 
        once = true; 
        juce::Logger::writeToLog("[TTS][Audio] instance=" + juce::String((juce::uint64)(uintptr_t)this));
        juce::Logger::writeToLog("[TTS][Audio] logicalId=" + juce::String((int)getLogicalId()));
        const int inBuses = getBusCount(true);
        juce::Logger::writeToLog("[TTS][Audio] inputBuses=" + juce::String(inBuses));
        if (inBuses > 0 && getBus(true, 0) != nullptr)
            juce::Logger::writeToLog("[TTS][Audio] bus0 channels=" + juce::String(getBus(true,0)->getNumberOfChannels()));
    }
    // CRITICAL FIX: Read from multiple input buses (AudioProcessorGraph routing fix)
    // Bus 0: Global Mods (4 channels: Rate, Gate, Trigger, Reset)
    // Bus 1: Trim Mods (2 channels: Trim Start, Trim End)
    // Bus 2: Playback Mods (2 channels: Speed, Pitch)
    // Bus 3: Word Triggers (16 channels: Word 1-16)
    auto globalBus = getBusBuffer(buffer, true, 0);
    auto trimBus = getBusBuffer(buffer, true, 1);
    auto playbackBus = getBusBuffer(buffer, true, 2);
    auto wordTrigBus = getBusBuffer(buffer, true, 3);
    
    // DO NOT clear output bus - it may share memory with input buses in AudioProcessorGraph
    // The existing logic already handles silent output sample-by-sample in the main loop
    
    const int numSamples = buffer.getNumSamples();
    const double sr = juce::jmax(1.0, getSampleRate());
    
    // Get base parameters (ALWAYS)
    float baseRate = rateParam->load();
    float baseGate = gateParam->load();
    
    // Check modulation (like BestPractice line 54-56)
    const bool isRateMod = isParamInputConnected("rate_mod");
    const bool isGateMod = isParamInputConnected("gate_mod");
    const bool isTrigMod = isParamInputConnected("trigger_mod");
    const bool isResetMod = isParamInputConnected("reset_mod");
    const bool isRandomizeMod = isParamInputConnected("randomize_mod"); // <-- NEW
    const bool isTrimStartMod = isParamInputConnected("trimStart_mod");
    const bool isTrimEndMod = isParamInputConnected("trimEnd_mod");

    // Check for speed/pitch modulation
    const bool isSpeedMod = isParamInputConnected("speed_mod");
    const bool isPitchMod = isParamInputConnected("pitch_mod");
    
    // Get base speed/pitch parameters
    float baseSpeed = apvts.getRawParameterValue("speed")->load();
    float basePitch = apvts.getRawParameterValue("pitch")->load();
    
    // CORRECTED: Read CV pointers from the correct buses according to getParamRouting()
    // Bus 0: Global Mods (Rate, Gate, Trigger, Reset, Randomize) - channels 0,1,2,3,4
    const float* rateCV      = isRateMod      && globalBus.getNumChannels() > 0 ? globalBus.getReadPointer(0)   : nullptr;
    const float* gateCV      = isGateMod      && globalBus.getNumChannels() > 1 ? globalBus.getReadPointer(1)   : nullptr;
    const float* trigCV      = isTrigMod      && globalBus.getNumChannels() > 2 ? globalBus.getReadPointer(2)   : nullptr;
    const float* resetCV     = isResetMod     && globalBus.getNumChannels() > 3 ? globalBus.getReadPointer(3)   : nullptr;
    const float* randomizeCV = isRandomizeMod && globalBus.getNumChannels() > 4 ? globalBus.getReadPointer(4)   : nullptr; // <-- NEW
    
    // Bus 1: Trim Mods (Trim Start, Trim End) - channels 0,1
    const float* trimStartCV = isTrimStartMod && trimBus.getNumChannels() > 0   ? trimBus.getReadPointer(0)     : nullptr;
    const float* trimEndCV   = isTrimEndMod   && trimBus.getNumChannels() > 1   ? trimBus.getReadPointer(1)     : nullptr;
    
    // Bus 2: Playback Mods (Speed, Pitch) - channels 0,1
    const float* speedCV     = isSpeedMod     && playbackBus.getNumChannels() > 0 ? playbackBus.getReadPointer(0) : nullptr;
    const float* pitchCV     = isPitchMod     && playbackBus.getNumChannels() > 1 ? playbackBus.getReadPointer(1) : nullptr;
    
    // DEBUG: Log multi-bus state and CV values (first call + every ~5s)
    static int debugFrameCounter = 0;
    if (debugFrameCounter == 0 || debugFrameCounter % 240 == 0)
    {
        juce::String dbgMsg = "[TTS CV Debug #" + juce::String(debugFrameCounter) + "] ";
        dbgMsg += "buses: global=" + juce::String(globalBus.getNumChannels()) + " ";
        dbgMsg += "trim=" + juce::String(trimBus.getNumChannels()) + " ";
        dbgMsg += "playback=" + juce::String(playbackBus.getNumChannels()) + " ";
        dbgMsg += "words=" + juce::String(wordTrigBus.getNumChannels()) + " | ";
        if (rateCV) dbgMsg += "rate=" + juce::String(numSamples > 0 ? rateCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "rate=null ";
        if (gateCV) dbgMsg += "gate=" + juce::String(numSamples > 0 ? gateCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "gate=null ";
        if (trimStartCV) dbgMsg += "trimStart=" + juce::String(numSamples > 0 ? trimStartCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "trimStart=null ";
        if (trimEndCV) dbgMsg += "trimEnd=" + juce::String(numSamples > 0 ? trimEndCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "trimEnd=null ";
        if (speedCV) dbgMsg += "speed=" + juce::String(numSamples > 0 ? speedCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "speed=null ";
        if (pitchCV) dbgMsg += "pitch=" + juce::String(numSamples > 0 ? pitchCV[0] : -999.0f, 3);
        else dbgMsg += "pitch=null";
        juce::Logger::writeToLog(dbgMsg);
        
        // Also log modulation states
        juce::String modStates = "[TTS MOD STATES] ";
        modStates += "rateMod=" + juce::String(isRateMod ? "ON" : "OFF") + " ";
        modStates += "gateMod=" + juce::String(isGateMod ? "ON" : "OFF") + " ";
        modStates += "speedMod=" + juce::String(isSpeedMod ? "ON" : "OFF") + " ";
        modStates += "pitchMod=" + juce::String(isPitchMod ? "ON" : "OFF");
        juce::Logger::writeToLog(modStates);
    }
    debugFrameCounter++;
    
    // CRITICAL FIX: Get output pointers directly from buffer (AudioProcessorGraph routing requirement)
    auto* audioOut = buffer.getNumChannels() > 0 ? buffer.getWritePointer(0) : nullptr;
    auto* wordGateOut = buffer.getNumChannels() > 1 ? buffer.getWritePointer(1) : nullptr;
    auto* eopGateOut = buffer.getNumChannels() > 2 ? buffer.getWritePointer(2) : nullptr;
    
    bool wasPlayingLastBlock = isPlaying;
    bool hasValidClip = (selectedClip && selectedClip->audio.getNumSamples() > 0);
    
    // Precompute trim boundaries in samples for this block
    int clipLen = hasValidClip ? selectedClip->audio.getNumSamples() : 0;
    int trimStartSample = 0, trimEndSample = 0;
    if (hasValidClip)
    {
        float trimStartNormB = apvts.getRawParameterValue("trimStart")->load();
        float trimEndNormB = apvts.getRawParameterValue("trimEnd")->load();
        trimStartSample = (int) (trimStartNormB * clipLen);
        trimEndSample   = (int) (trimEndNormB   * clipLen);
        trimStartSample = juce::jlimit(0, clipLen, trimStartSample);
        trimEndSample   = juce::jlimit(trimStartSample, clipLen, trimEndSample);
        startSamplePos = (double) trimStartSample;
        endSamplePos   = (double) juce::jmax(trimStartSample + 1, trimEndSample);
    }

    // Word stepping setup (using last/selected timings)
    auto& timingsForClip = getActiveTimings();
    const bool haveTimings = hasValidClip && !timingsForClip.empty();
    const double srD = sr;
    
    for (int i = 0; i < numSamples; ++i)
    {
        // Per-sample rate/gate (ALWAYS read CV) - Use CV to modulate base rate exponentially
        float currentRate = baseRate; // Start with the slider's value
        if (rateCV)
        {
            // Use the incoming CV to modulate the base rate by +/- 2 octaves
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            const float octaveRange = 4.0f; // Total modulation range in octaves (-2 to +2)
            const float octaveOffset = (cv - 0.5f) * octaveRange; // Map CV to [-2.0, 2.0]
            
            currentRate = baseRate * std::pow(2.0f, octaveOffset);
        }

        

        float currentGate = baseGate; // The slider's value (e.g., 0.8)
        
        if (gateCV) 
        {
            // === START OF TRACING LOGIC ===
            
            // Point A: The raw value read directly from the input buffer.
            float rawCVValue = gateCV[i];
            
            // Point B: The value after your juce::jlimit logic is applied.
            float processedCVValue = juce::jlimit(0.0f, 1.0f, rawCVValue);
            
            // This is the original logic line. We'll use our traced value instead.
            currentGate = processedCVValue;
            
            // Point C: The final value of currentGate before it's used.
            float finalGateValue = currentGate;
            
            // Log all three points for the first 5 samples to see the transformation.
            if (i < 5) 
            {
                juce::Logger::writeToLog("[GATE TRACE] Sample " + juce::String(i) + 
                                       ": [A] Raw=" + juce::String(rawCVValue, 3) + 
                                       " -> [B] Processed=" + juce::String(processedCVValue, 3) + 
                                       " -> [C] Final=" + juce::String(finalGateValue, 3));
            }
            // === END OF TRACING LOGIC ===
        }
        
        // Trim range handling (per-sample; CV modulates slider values)
        float trimStartNorm = apvts.getRawParameterValue("trimStart")->load();
        if (trimStartCV)
        {
            // Remap incoming CV [0, 1] to an offset of [-0.5, +0.5]
            const float cvOffset = trimStartCV[i] - 0.5f;
            // Add the offset to the base value from the slider
            trimStartNorm += cvOffset;
        }
        // Clamp the final result to the valid [0, 1] range
        trimStartNorm = juce::jlimit(0.0f, 1.0f, trimStartNorm);
        
        float trimEndNorm = apvts.getRawParameterValue("trimEnd")->load();
        if (trimEndCV)
        {
            // Remap incoming CV [0, 1] to an offset of [-0.5, +0.5]
            const float cvOffset = trimEndCV[i] - 0.5f;
            // Add the offset to the base value from the slider
            trimEndNorm += cvOffset;
        }
        // Clamp the final result to the valid [0, 1] range
        trimEndNorm = juce::jlimit(0.0f, 1.0f, trimEndNorm);
        if (trimStartNorm >= trimEndNorm) trimStartNorm = juce::jmax(0.0f, trimEndNorm - 0.001f);
        
        // Update per-sample trim and apply to engine loop bounds
        clipLen = hasValidClip ? selectedClip->audio.getNumSamples() : 0;
        trimStartSample = (int)(trimStartNorm * clipLen);
        trimEndSample   = (int)(trimEndNorm   * clipLen);
        startSamplePos = (double) trimStartSample;
        endSamplePos   = (double) juce::jmax(trimStartSample + 1, trimEndSample);
        
        // Process triggers even without clip loaded
        if (resetCV)
        {
            bool resetHigh = resetCV[i] > 0.5f;
            if (resetHigh && !lastResetHigh)
            {
                // Reset to trim start
                currentWordIndex = findFirstWordIndexAtOrAfter(trimStartNorm * (hasValidClip ? selectedClip->durationSeconds : 0.0));
                readPosition = (double) trimStartSample;
                if (hasValidClip) isPlaying = true;
                phase = 0.0;
            }
            lastResetHigh = resetHigh;
        }
        
        if (trigCV)
        {
            bool trigHigh = trigCV[i] > 0.5f;
            if (trigHigh && !lastTrigHigh)
            {
                // Trigger starts at trim start
                readPosition = (double) trimStartSample;
                currentWordIndex = findFirstWordIndexAtOrAfter(trimStartNorm * (hasValidClip ? selectedClip->durationSeconds : 0.0));
                if (hasValidClip) isPlaying = true;
                phase = 0.0;
            }
            lastTrigHigh = trigHigh;
        }

        // --- Randomize Trigger ---
        if (randomizeCV != nullptr) // Check if the pointer is valid
        {
            const bool trigHigh = randomizeCV[i] > 0.5f;
            if (trigHigh && !lastRandomizeTriggerHigh)
            {
                const juce::ScopedLock c(clipCacheLock);
                if (clipCache.size() > 1 && selectedClip)
                {
                    std::vector<juce::String> otherKeys;
                    for (const auto& pair : clipCache) {
                        if (pair.first != selectedClip->clipId) {
                            otherKeys.push_back(pair.first);
                        }
                    }
                    if (!otherKeys.empty()) {
                        juce::Random rng;
                        juce::String randomKey = otherKeys[rng.nextInt((int)otherKeys.size())];
                        selectClipByKey(randomKey);
                    }
                }
                lastRandomizeTriggerHigh = true; // Prevent re-triggering within the same high signal
            }
            else if (!trigHigh)
            {
                lastRandomizeTriggerHigh = false;
            }
        }
        
        // Per-word trigger inputs (Bus 3, channels 0-15)
        if (hasValidClip)
        {
            for (int w = 0; w < juce::jmin(16, (int)selectedClip->timings.size()); ++w)
            {
                if (wordTrigBus.getNumChannels() > w)
                {
                    const float* wordTrigCV = wordTrigBus.getReadPointer(w);
                    bool wordTrigHigh = wordTrigCV[i] > 0.5f;
                    if (wordTrigHigh && !lastWordTrigHigh[w])
                    {
                        // Jump to this word
                        currentWordIndex = w;
                        const auto& wordTiming = selectedClip->timings[w];
                        double jumpPos = juce::jlimit((double)trimStartSample, (double)trimEndSample, wordTiming.startTimeSeconds * sr);
                        readPosition = jumpPos;
                        isPlaying = true;
                        phase = 0.0;
                    }
                    lastWordTrigHigh[w] = wordTrigHigh;
                }
            }
        }
        
        // Rate-based stepping scheduler (jump to word starts)
        const bool syncEnabled = apvts.getRawParameterValue("sync")->load() > 0.5f;
        if (hasValidClip && haveTimings)
        {
            bool advanceStep = false;
            if (syncEnabled && m_currentTransport.isPlaying)
            {
                // SYNC MODE
                const int divisionIndex = (int)apvts.getRawParameterValue("rate_division")->load();
                static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
                const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];
                
                double beatsNow = m_currentTransport.songPositionBeats + (i / srD / 60.0 * m_currentTransport.bpm);
                double scaledBeats = beatsNow * beatDivision;

                if (static_cast<long long>(scaledBeats) > static_cast<long long>(lastScaledBeats_tts))
                {
                    advanceStep = true;
                }
                lastScaledBeats_tts = scaledBeats;
            }
            else if (currentRate > 0.0f)
            {
                // FREE-RUNNING MODE
                if (stepAccumulatorSec <= 0.0)
                {
                    advanceStep = true;
                    stepAccumulatorSec += (1.0 / (double)currentRate);
                }
                stepAccumulatorSec -= (1.0 / srD);
            }

            if (advanceStep)
            {
                clampWordIndexToTrim();
                crossfadeStartPosition = readPosition;
                const auto& w = getActiveTimings()[(size_t) juce::jlimit(0, (int)getActiveTimings().size() - 1, currentWordIndex)];
                crossfadeEndPosition = juce::jlimit(startSamplePos, endSamplePos - 1.0, w.startTimeSeconds * srD);
                crossfadeSamplesTotal = (int)(srD * 0.020); // 20ms crossfade
                crossfadeSamplesRemaining = crossfadeSamplesTotal;

                if (currentWordIndex < 16)
                    wordTriggerPending[currentWordIndex] = (int)std::ceil(0.001 * srD);
                
                // Advance to next word
                const auto& t = getActiveTimings();
                if (!t.empty())
                {
                    currentWordIndex++;
                    if (currentWordIndex >= (int)t.size()) currentWordIndex = 0;
                }
            }
        }
        
        // Read speed/pitch for this sample
        float currentSpeed = baseSpeed; // Start with the base value from the slider
        if (speedCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, speedCV[i]);

            // Use CV to modulate speed by +/- 2 octaves (0.25x to 4x) around the base speed
            const float octaveRange = 4.0f; // Total modulation range in octaves
            const float octaveOffset = (cv - 0.5f) * octaveRange; // Remaps CV from [0, 1] to [-2, +2]
            
            currentSpeed = baseSpeed * std::pow(2.0f, octaveOffset);
        }

        // Clamp the final result to the parameter's valid range
        currentSpeed = juce::jlimit(0.25f, 4.0f, currentSpeed);

        

        float currentPitch = basePitch; // Start with the base value from the slider
        if (pitchCV)
        {
            // Remap incoming CV to a bipolar [-1, 1] range if it isn't already
            const float rawCV = pitchCV[i];
            const float bipolarCV = (rawCV >= 0.0f && rawCV <= 1.0f) 
                                    ? (rawCV * 2.0f - 1.0f) 
                                    : rawCV;

            // Use the bipolar CV to modulate by a defined range, e.g., +/- 12 semitones (one octave)
            const float pitchModulationRange = 12.0f; 
            currentPitch += bipolarCV * pitchModulationRange;
            
            // DEBUG: Log pitch modulation values (occasionally)
            static int pitchLogCounter = 0;
            if ((pitchLogCounter++ % 4800) == 0) // Log every ~100ms
            {
                juce::Logger::writeToLog("[TTS PITCH] basePitch=" + juce::String(basePitch, 2) + 
                                       " bipolarCV=" + juce::String(bipolarCV, 3) + 
                                       " currentPitch=" + juce::String(currentPitch, 2));
            }
        }

        // Clamp the final result to the parameter's valid range
        currentPitch = juce::jlimit(-24.0f, 24.0f, currentPitch);
        
        // Generate audio ONLY if clip loaded
        if (isPlaying && hasValidClip)
        {
            const juce::ScopedLock lock(audioBufferLock);

            // --- NEW: CROSSFADE LOGIC ---
            if (crossfadeSamplesRemaining > 0)
            {
                // We are in a crossfade.
                const float fadeProgress = 1.0f - ((float)crossfadeSamplesRemaining / (float)crossfadeSamplesTotal);
                const float fadeInGain = fadeProgress;
                const float fadeOutGain = 1.0f - fadeProgress;

                // Get sample from the OLD position
                int oldPos = (int)crossfadeStartPosition;
                float oldSample = (oldPos < clipLen) ? selectedClip->audio.getSample(0, oldPos) : 0.0f;

                // Get sample from the NEW position
                int newPos = (int)crossfadeEndPosition;
                float newSample = (newPos < clipLen) ? selectedClip->audio.getSample(0, newPos) : 0.0f;

                // Blend them
                float finalSample = (oldSample * fadeOutGain) + (newSample * fadeInGain);
                if (audioOut) audioOut[i] = finalSample * currentGate * volumeParam->load();

                // Advance both read heads for the next sample in the fade
                crossfadeStartPosition += 1.0;
                crossfadeEndPosition += 1.0;

                // When the fade is done, snap the main readPosition to the correct new location
                if (--crossfadeSamplesRemaining == 0) {
                    readPosition = crossfadeEndPosition;
                }
            }
            else // --- ORIGINAL PLAYBACK LOGIC (when not crossfading) ---
            {
                // Compute effective time/pitch like SampleVoiceProcessor
            const float effectiveTime = juce::jlimit(0.25f, 4.0f, currentSpeed);
            const float effectivePitchSemis = currentPitch;

            // Select engine: 0=RubberBand,1=Naive (default Naive if param absent)
            int engineIdx = 1; // Naive default
            if (auto* p = apvts.getParameter("engine")) engineIdx = (int) p->getValue();

            if (engineIdx == 1) // Naive
            {
                // Linear interpolation over mono buffer
                float sample = 0.0f;
                const int srcLen = selectedClip->audio.getNumSamples();
                const double pitchScale = std::pow(2.0, (double) effectivePitchSemis / 12.0);
                const double step = (double) pitchScale / (double) juce::jmax(0.0001f, effectiveTime);

                // Wrap within trim window
                if (readPosition >= endSamplePos)
                    readPosition = startSamplePos + (readPosition - endSamplePos);
                int base = (int) readPosition;
                base = juce::jlimit(0, srcLen - 1, base);
                const int next = juce::jmin(srcLen - 1, base + 1);
                const float frac = (float) (readPosition - (double) base);
                const float s0 = selectedClip->audio.getSample(0, base);
                const float s1 = selectedClip->audio.getSample(0, next);
                sample = s0 + frac * (s1 - s0);
                if (audioOut) audioOut[i] = sample * currentGate * volumeParam->load();
                readPosition += step;
                if (readPosition >= endSamplePos)
                    readPosition = startSamplePos + (readPosition - endSamplePos);
            }
            else // RubberBand via TimePitchProcessor
            {
                // Ensure interleaved buffers large enough
                if (1 > interleavedCapacityFrames)
                {
                    interleavedCapacityFrames = 1;
                    interleavedInput.allocate((size_t)(interleavedCapacityFrames * 2), true);
                    interleavedOutput.allocate((size_t)(interleavedCapacityFrames * 2), true);
                }

                // Feed one frame (mono duplicated) from current readPosition
                int pos = (int) readPosition;
                if (readPosition >= endSamplePos)
                    readPosition = startSamplePos + (readPosition - endSamplePos), pos = (int) readPosition;
                pos = juce::jlimit(0, selectedClip->audio.getNumSamples() - 1, pos);
                float s = selectedClip->audio.getSample(0, pos);
                float* inLR = interleavedInput.getData();
                inLR[0] = s; inLR[1] = s;
                // Force immediate parameter application by resetting processor when values change
                if (lastEffectiveTime != effectiveTime || lastEffectivePitch != effectivePitchSemis)
                {
                    timePitch.reset();
                    lastEffectiveTime = effectiveTime;
                    lastEffectivePitch = effectivePitchSemis;
                    // PRIME: push a burst of frames so RubberBand has material to output immediately
                    const int primeFramesDesired = 64;
                    const int availableWindow = (int) juce::jmax(1.0, endSamplePos - startSamplePos);
                    const int primeFrames = juce::jlimit(1, primeFramesDesired, availableWindow - 1);
                    if (interleavedCapacityFrames < primeFrames)
                    {
                        interleavedCapacityFrames = primeFrames;
                        interleavedInput.allocate((size_t)(interleavedCapacityFrames * 2), true);
                        interleavedOutput.allocate((size_t)(interleavedCapacityFrames * 2), true);
                        inLR = interleavedInput.getData();
                    }
                    // Fill prime frames from current readPosition
                    double posPrime = readPosition;
                    for (int pf = 0; pf < primeFrames; ++pf)
                    {
                        if (posPrime >= endSamplePos)
                            posPrime = startSamplePos + (posPrime - endSamplePos);
                        int ip = juce::jlimit(0, selectedClip->audio.getNumSamples() - 1, (int) posPrime);
                        const float v = selectedClip->audio.getSample(0, ip);
                        inLR[2*pf+0] = v; inLR[2*pf+1] = v;
                        posPrime += 1.0;
                    }
                    // Apply parameters before prime
                    timePitch.setTimeStretchRatio(effectiveTime);
                    timePitch.setPitchSemitones(effectivePitchSemis);
                    timePitch.putInterleaved(inLR, primeFrames);
                    // Advance read head by the frames we just fed
                    readPosition += (double) primeFrames;
                    if (readPosition >= endSamplePos)
                        readPosition = startSamplePos + (readPosition - endSamplePos);
                    // Start a short ramp to suppress de-clicks
                    rbFadeSamplesTotal = 32; rbFadeSamplesRemaining = rbFadeSamplesTotal;
                }
                timePitch.setTimeStretchRatio(effectiveTime);
                timePitch.setPitchSemitones(effectivePitchSemis);
                timePitch.putInterleaved(inLR, 1);
                float* outLR = interleavedOutput.getData();
                // Drain a small burst to minimize latency
                int produced = 0;
                {
                    int drained = 0; const int maxDrain = 4; // small burst keeps latency low without starving input
                    while (drained < maxDrain)
                    {
                        const int got = timePitch.receiveInterleaved(outLR + (drained * 2), 1);
                        if (got <= 0) break; drained += got;
                    }
                    produced = drained;
                }
                if (produced > 0)
                {
                    float outSample = outLR[(produced - 1) * 2 + 0];
                    // Apply short fade-in after parameter changes to soften clicks
                    if (rbFadeSamplesRemaining > 0 && rbFadeSamplesTotal > 0)
                    {
                        const float fade = 1.0f - (float) rbFadeSamplesRemaining / (float) rbFadeSamplesTotal;
                        outSample *= fade; rbFadeSamplesRemaining--;
                    }
                    if (audioOut) audioOut[i] = outSample * currentGate * volumeParam->load();
                    // Advance read head by the number of frames FED (1), not produced
                    // RubberBand can output >1 frames from 1 input frame; advancing by produced would starve input
                    readPosition += 1.0;
                }
                else
                {
                    // AGGRESSIVE FALLBACK: produce immediate output via naive interpolation
                    const int srcLen = selectedClip->audio.getNumSamples();
                    const double pitchScaleFB = std::pow(2.0, (double) effectivePitchSemis / 12.0);
                    const double stepFB = (double) pitchScaleFB / (double) juce::jmax(0.0001f, effectiveTime);
                    int baseFB = juce::jlimit(0, srcLen - 1, (int) readPosition);
                    const int nextFB = juce::jmin(srcLen - 1, baseFB + 1);
                    const float fracFB = (float) (readPosition - (double) baseFB);
                    const float s0FB = selectedClip->audio.getSample(0, baseFB);
                    const float s1FB = selectedClip->audio.getSample(0, nextFB);
                    float sampleFB = s0FB + fracFB * (s1FB - s0FB);
                    if (rbFadeSamplesRemaining > 0 && rbFadeSamplesTotal > 0)
                    {
                        const float fade = 1.0f - (float) rbFadeSamplesRemaining / (float) rbFadeSamplesTotal;
                        sampleFB *= fade; rbFadeSamplesRemaining--;
                    }
                    if (audioOut) audioOut[i] = sampleFB * currentGate * volumeParam->load();
                    readPosition += stepFB;
                }
                if (readPosition >= endSamplePos)
                    readPosition = startSamplePos + (readPosition - endSamplePos);
                }
            } // End of crossfade else block
        }
        else
        {
            if (audioOut) audioOut[i] = 0.0f;
        }
        
        // Mid-block debug of mapped live values (throttled)
        {
            static int midDbg = 0;
            if (i == (numSamples >> 1) && ((midDbg++ % 240) == 0))
            {
                juce::String msg = "[TTS Live Mid] rateHz=" + juce::String(currentRate, 3) +
                                   " gate=" + juce::String(currentGate, 3) +
                                   " speed=" + juce::String(currentSpeed, 3) +
                                   " pitchSemis=" + juce::String(currentPitch, 3);
                juce::Logger::writeToLog(msg);
            }
        }

        // Update live telemetry (like BestPractice line 121-126)
        if ((i & 0x07) == 0) // Every 8 samples instead of 64 for better responsiveness
        {
            setLiveParamValue("rate_live", currentRate);
            setLiveParamValue("gate_live", currentGate);
            setLiveParamValue("trimStart_live", trimStartNorm);
            setLiveParamValue("trimEnd_live", trimEndNorm);
            setLiveParamValue("speed_live", currentSpeed);
            setLiveParamValue("pitch_live", currentPitch);
        }
        
        // Word gates/triggers (skip if no clip)
        if (hasValidClip)
        {
            // Word gate output
            if (wordGateOut)
            {
                double curTime = readPosition / sr;
                wordGateOut[i] = isWordActiveAtTime(curTime) ? 1.0f : 0.0f;
            }
            
            // Per-word gates (direct buffer access for AudioProcessorGraph)
            for (int w = 0; w < juce::jmin(16, (int)selectedClip->timings.size()); ++w)
            {
                if (buffer.getNumChannels() > 3 + w)
                {
                    float* wordGate = buffer.getWritePointer(3 + w);
                    wordGate[i] = (w == currentWordIndex && isPlaying) ? 1.0f : 0.0f;
                }
            }
            
            // Per-word triggers (direct buffer access for AudioProcessorGraph)
            for (int w = 0; w < juce::jmin(16, (int)selectedClip->timings.size()); ++w)
            {
                if (buffer.getNumChannels() > 19 + w)
                {
                    float* wordTrig = buffer.getWritePointer(19 + w);
                    if (wordTriggerPending[w] > 0)
                    {
                        wordTrig[i] = 1.0f;
                        wordTriggerPending[w]--;
                    }
                    else
                    {
                        wordTrig[i] = 0.0f;
                    }
                }
            }
        }
    }
    
    // EOP gate
    if (eopGateOut && !isPlaying && wasPlayingLastBlock)
    {
        int pulseSamples = (int)std::ceil(0.005 * sr);
        for (int i = 0; i < juce::jmin(numSamples, pulseSamples); ++i)
            eopGateOut[i] = 1.0f;
    }
}

void TTSPerformerModuleProcessor::startSynthesis(const juce::String& text)
{
    DBG("[TTS Performer] startSynthesis called with text: " + text);
    juce::Logger::writeToLog("[TTS Performer] startSynthesis called with text: " + text);
    
    if (currentStatus == Status::Synthesizing || text.trim().isEmpty()) 
    {
        DBG("[TTS Performer] startSynthesis early return - already synthesizing or empty text");
        return;
    }

    // --- Phase 3: Reset sequencer state for new synthesis ---
    resetSequencer();

    const juce::ScopedLock lock(textBufferLock);
    if (textFifo.getFreeSpace() > 0)
    {
        int start1, size1, start2, size2;
        textFifo.prepareToWrite(1, start1, size1, start2, size2);
        if (size1 > 0) 
        {
            textFifoBuffer[start1] = text;
            textFifo.finishedWrite(1);
            synthesisThread.notify();
            
            DBG("[TTS Performer] Text queued for synthesis at position " + juce::String(start1));
            juce::Logger::writeToLog("[TTS Performer] Text queued for synthesis at position " + juce::String(start1));
            DBG("[TTS Performer] Synthesis thread notified");
            juce::Logger::writeToLog("[TTS Performer] Synthesis thread notified");
        }
                }
                else 
                { 
        DBG("[TTS Performer] Text FIFO is full, cannot queue text");
        juce::Logger::writeToLog("[TTS Performer] Text FIFO is full, cannot queue text");
    }
}

// --- Synthesis Thread Implementation ---

TTSPerformerModuleProcessor::SynthesisThread::SynthesisThread(TTSPerformerModuleProcessor& o) : juce::Thread("Piper Synthesis Thread"), owner(o) {}
TTSPerformerModuleProcessor::SynthesisThread::~SynthesisThread() { stopThread(5000); }

void TTSPerformerModuleProcessor::SynthesisThread::run()
{
    DBG("[TTS Performer] SynthesisThread::run() started");
    juce::Logger::writeToLog("[TTS Performer] SynthesisThread::run() started");
    
    // --- FIX #1: ROBUST THREAD WAIT LOOP ---
    // This pattern prevents "lost wakeups" by checking the condition
    // before waiting and looping until there's work to do.
    while (!threadShouldExit())
    {
        if (owner.textFifo.getNumReady() == 0)
        {
            wait(-1);
            continue; // Loop back and check condition again after waking up
        }
        
        DBG("[TTS Performer] Found " + juce::String(owner.textFifo.getNumReady()) + " text items in queue");
        juce::Logger::writeToLog("[TTS Performer] Found " + juce::String(owner.textFifo.getNumReady()) + " text items in queue");

        owner.currentStatus = Status::Synthesizing;

        // Dequeue text safely
        juce::String textToSynthesize;
        {
            const juce::ScopedLock lock(owner.textBufferLock);
            int start1, size1, start2, size2;
            owner.textFifo.prepareToRead(1, start1, size1, start2, size2);
            if (size1 > 0) textToSynthesize = owner.textFifoBuffer[start1];
            owner.textFifo.finishedRead(1);
        }

        if (textToSynthesize.isEmpty() || threadShouldExit())
        {
                    owner.currentStatus = Status::Idle;
            continue;
        }

        DBG("[TTS Performer] About to start Piper synthesis for text: " + textToSynthesize);
        juce::Logger::writeToLog("[TTS Performer] About to start Piper synthesis for text: " + textToSynthesize);

        try
        {
            // --- FIND EXECUTABLE AND MODELS ---
            auto appDir = juce::File::getSpecialLocation(juce::File::currentApplicationFile).getParentDirectory();
            piperExecutable = appDir.getChildFile("piper.exe");
            
            DBG("[TTS Performer] Looking for piper.exe at: " + piperExecutable.getFullPathName());
            juce::Logger::writeToLog("[TTS Performer] Looking for piper.exe at: " + piperExecutable.getFullPathName());
            
            if (!piperExecutable.existsAsFile()) throw std::runtime_error("piper.exe not found next to application");

            // --- THIS IS THE FIX ---
            // Look for the 'models' directory in the same folder as the executable.
            juce::File modelsDir = appDir.getChildFile("models");
            
            DBG("[TTS Performer] Looking for models directory at: " + modelsDir.getFullPathName());
            juce::Logger::writeToLog("[TTS Performer] Looking for models directory at: " + modelsDir.getFullPathName());
            
            if (!modelsDir.isDirectory())
            {
                // Throw an error that shows the path we actually checked
                throw std::runtime_error("Models directory not found at: " + modelsDir.getFullPathName().toStdString());
            }
            
            // --- Model selection via registry ---
            juce::File modelFile = owner.resolveSelectedModelFile();
            juce::File configFile = modelFile.withFileExtension(".onnx.json");
            
            // --- FIX: Update thread state so computeClipKey() uses correct model ---
            // This ensures the clip ID hash includes the correct voice model filename
            this->currentModelFile = modelFile;
            
            juce::String modelPath = modelFile.getFullPathName();
            juce::String configPath = configFile.getFullPathName();
            
            DBG("[TTS Performer] Looking for model file: " + modelPath);
            DBG("[TTS Performer] Looking for config file: " + configPath);
            juce::Logger::writeToLog("[TTS Performer] Looking for model file: " + modelPath);
            juce::Logger::writeToLog("[TTS Performer] Looking for config file: " + configPath);
            
            if (!modelFile.existsAsFile() || !configFile.existsAsFile()) 
                throw std::runtime_error("Model .onnx and/or .onnx.json not found in models folder.");
            
            // --- Phase 4: Check Cache and Update Usage Time ---
            juce::String cacheKey = getCacheKey(modelPath);
            bool wasCached = isVoiceCached(modelPath);
            
            if (wasCached)
            {
                DBG("[TTS Performer] Voice found in cache: " + cacheKey + " (Instant access!)");
                // Update last used time
                {
                    const juce::ScopedLock lock(cacheLock);
                    auto it = voiceCache.find(cacheKey);
                    if (it != voiceCache.end())
                    {
                        it->second.lastUsed = std::chrono::steady_clock::now();
                    }
            }
        }
        else 
        { 
                DBG("[TTS Performer] Voice not in cache: " + cacheKey + " (Loading from disk...)");
                
                // Update cache size limit from parameter before adding
                updateMaxCachedVoicesFromParameter();
                addVoiceToCache(modelPath, configPath);
            }

            // --- CREATE TEMP FILES FOR OUTPUT ---
            juce::File tempWavFile = juce::File::getSpecialLocation(juce::File::tempDirectory)
                                         .getNonexistentChildFile("piper_out", ".wav");
            juce::File tempJsonFile = juce::File::getSpecialLocation(juce::File::tempDirectory)
                                         .getNonexistentChildFile("piper_timing", ".json");

            // --- FIX #2: ROBUST ChildProcess with input file ---
            // Create temporary input file for text
            juce::File tempInputFile = juce::File::getSpecialLocation(juce::File::tempDirectory)
                                         .getNonexistentChildFile("piper_input", ".txt");
            tempInputFile.replaceWithText(textToSynthesize);
            
            // Build command using Windows cmd to pipe input to piper with JSON output
            juce::ChildProcess piperProcess;
            // Build command with working directory change to ensure piper can find its dependencies
            auto workingDirectory = piperExecutable.getParentDirectory();
            juce::String command = "cmd /c \"cd /d \"" + workingDirectory.getFullPathName() + "\" && type \"" 
                                 + tempInputFile.getFullPathName() + "\" | \"" 
                                 + piperExecutable.getFullPathName() + "\" --model \"" + modelFile.getFullPathName() + "\""
                                 + " --espeak_data \"" + workingDirectory.getChildFile("espeak-ng-data").getFullPathName() + "\""
                                 + " --output_file \"" + tempWavFile.getFullPathName() + "\"\"";
            
            DBG("[TTS Performer] Starting Piper process with command: " + command);
            juce::Logger::writeToLog("[TTS Performer] Starting Piper process with command: " + command);
            
            if (piperProcess.start(command))
            {
                DBG("[TTS Performer] Piper process started successfully, waiting for completion...");
                juce::Logger::writeToLog("[TTS Performer] Piper process started successfully, waiting for completion...");
                
                // Wait for the process to finish
                if (!piperProcess.waitForProcessToFinish(30000)) // 30s timeout
                    throw std::runtime_error("Piper process timed out.");

                // --- DIAGNOSTIC: Check if WAV file was created ---
                if (tempWavFile.existsAsFile())
                {
                    juce::Logger::writeToLog("--- PIPER WAV OUTPUT SUCCESS ---");
                    juce::Logger::writeToLog("WAV file created: " + tempWavFile.getFullPathName());
                    juce::Logger::writeToLog("File size: " + juce::String(tempWavFile.getSize()) + " bytes");
                }
                else
                {
                    juce::Logger::writeToLog("--- PIPER WAV OUTPUT FAILED: FILE NOT CREATED ---");
                }
                // --- END OF DIAGNOSTIC BLOCK ---

                int exitCode = piperProcess.getExitCode();
                DBG("[TTS Performer] Piper process finished with exit code: " + juce::String(exitCode));
                juce::Logger::writeToLog("[TTS Performer] Piper process finished with exit code: " + juce::String(exitCode));
                
                if (exitCode != 0)
                    throw std::runtime_error("Piper process failed with exit code: " + std::to_string(exitCode));
                
                // Clean up input file
                tempInputFile.deleteFile();
                
                // --- LOAD AND RESAMPLE GENERATED AUDIO (THE CRITICAL FIX) ---
                if (!tempWavFile.existsAsFile()) throw std::runtime_error("Piper did not create an output WAV file.");
                
                juce::AudioFormatManager formatManager;
                formatManager.registerBasicFormats();
                std::unique_ptr<juce::AudioFormatReader> reader(formatManager.createReaderFor(tempWavFile));
                
                if (reader == nullptr) throw std::runtime_error("Could not read generated WAV file.");

                DBG("[TTS Performer] Original audio sample rate: " + juce::String(reader->sampleRate) + " Hz");
                juce::Logger::writeToLog("[TTS Performer] Original audio sample rate: " + juce::String(reader->sampleRate) + " Hz");
                DBG("[TTS Performer] Target sample rate: " + juce::String(owner.getSampleRate()) + " Hz");
                juce::Logger::writeToLog("[TTS Performer] Target sample rate: " + juce::String(owner.getSampleRate()) + " Hz");

                // Load the entire file into a temporary buffer at its original sample rate
                const int originalNumSamples = (int)reader->lengthInSamples;
                juce::AudioBuffer<float> originalAudio(1, originalNumSamples);
                reader->read(&originalAudio, 0, originalNumSamples, 0, true, false);

                // CRITICAL FIX: Ensure valid sample rate before resampling
                double targetSR = owner.getSampleRate();
                if (targetSR <= 0.0)
                {
                    DBG("[TTS Performer] ERROR: Invalid target sample rate (" + juce::String(targetSR) + "), using 48000 Hz as fallback");
                    targetSR = 48000.0;
                }
                
                // Calculate resampling ratio
                double resampleRatio = reader->sampleRate / targetSR;
                int resampledNumSamples = (int)(originalNumSamples / resampleRatio);
                
                DBG("[TTS Performer] Resampling ratio: " + juce::String(resampleRatio, 4));
                DBG("[TTS Performer] Original samples: " + juce::String(originalNumSamples));
                DBG("[TTS Performer] Resampled samples: " + juce::String(resampledNumSamples));
                juce::Logger::writeToLog("[TTS Performer] Resampling from " + juce::String(originalNumSamples) + " to " + juce::String(resampledNumSamples) + " samples (target SR: " + juce::String(targetSR) + ")");

                // Prepare a resampling source
                juce::MemoryAudioSource tempSource(originalAudio, false);
                juce::ResamplingAudioSource resampledSource(&tempSource, false, 1);
                resampledSource.setResamplingRatio(resampleRatio);

                // Prepare a buffer at the destination sample rate
                juce::AudioBuffer<float> finalAudio(1, resampledNumSamples);
                resampledSource.prepareToPlay(512, targetSR);
                
                // Perform the resampling
                juce::AudioSourceChannelInfo info(finalAudio);
                resampledSource.getNextAudioBlock(info);

                // --- Create/Store Clip and select it ---
                {
                    auto clip = std::make_shared<TTSClip>();
                    clip->clipId = owner.computeClipKey(textToSynthesize);
                    clip->name = textToSynthesize.substring(0, 48);
                    clip->text = textToSynthesize;
                    clip->modelKey = owner.synthesisThread.currentModelFile.getFileName();
                    clip->audio.makeCopyOf(finalAudio);
                    clip->sampleRate = targetSR;
                    clip->durationSeconds = (double) clip->audio.getNumSamples() / clip->sampleRate;
                    // Persist to disk (wav saved now, timing after parse below)
                    owner.persistClipToDisk(textToSynthesize, modelFile, finalAudio, {});
                    {
                        const juce::ScopedLock c(owner.clipCacheLock);
                        owner.addClipToCache(clip);
                        owner.selectedClip = clip;
                    }
                    // keep legacy baked buffer path for waveform until UI uses selectedClip exclusively
                    const juce::ScopedLock lock(owner.audioBufferLock);
                    owner.bakedAudioBuffer.makeCopyOf(finalAudio);
                    DBG("[TTS Performer] Audio copied to bakedAudioBuffer: " + juce::String(owner.bakedAudioBuffer.getNumSamples()) + " samples");
                    DBG("[TTS Performer] selectedClip audio: " + juce::String(clip->audio.getNumSamples()) + " samples");
                }
                owner.readPosition = 0.0;
                owner.isPlaying = false; // Don't auto-play, wait for trigger
                DBG("[TTS Performer] Clip ready: " + juce::String(owner.selectedClip ? owner.selectedClip->audio.getNumSamples() : 0) + " samples");
                
                DBG("[TTS Performer] Audio resampling complete, ready for playback");
                juce::Logger::writeToLog("[TTS Performer] Audio resampling complete, ready for playback");
                
                // --- PARSE JSON TIMING DATA (Phase 2.3) ---
                bool hasTimingData = false;
                if (tempJsonFile.existsAsFile())
                {
                    DBG("[TTS Performer] JSON timing file generated: " + tempJsonFile.getFullPathName());
                    juce::Logger::writeToLog("[TTS Performer] JSON timing file generated: " + tempJsonFile.getFullPathName());
                    
                    try
                    {
                        // Read and parse the JSON file
                        juce::String jsonContent = tempJsonFile.loadFileAsString();
                        auto jsonData = nlohmann::json::parse(jsonContent.toStdString());
                        
                        DBG("[TTS Performer] JSON parsing successful, extracting timing data...");
                        juce::Logger::writeToLog("[TTS Performer] JSON parsing successful, extracting timing data...");
                        
                        // Parse the timing data
                        std::vector<WordTiming> newTimings;
                        
                        // Piper JSON structure typically contains:
                        // - "words": array of word objects with timing
                        // - Each word has "text", "start_time", "end_time", and "phonemes"
                        if (jsonData.contains("words") && jsonData["words"].is_array())
                        {
                            for (const auto& wordData : jsonData["words"])
                            {
                                if (wordData.contains("text") && wordData.contains("start_time") && wordData.contains("end_time"))
                                {
                                    juce::String wordText = wordData["text"].get<std::string>();
                                    double startTime = wordData["start_time"].get<double>();
                                    double endTime = wordData["end_time"].get<double>();
                                    
                                    WordTiming wordTiming(wordText, startTime, endTime);
                                    
                                    // Parse phonemes if available
                                    if (wordData.contains("phonemes") && wordData["phonemes"].is_array())
                                    {
                                        for (const auto& phonemeData : wordData["phonemes"])
                                        {
                                            if (phonemeData.contains("phoneme") && phonemeData.contains("start_time") && phonemeData.contains("end_time"))
                                            {
                                                juce::String phoneme = phonemeData["phoneme"].get<std::string>();
                                                double phonemeStart = phonemeData["start_time"].get<double>();
                                                double phonemeEnd = phonemeData["end_time"].get<double>();
                                                
                                                wordTiming.phonemes.emplace_back(phoneme, phonemeStart, phonemeEnd);
                                            }
                                        }
                                    }
                                    
                                    newTimings.push_back(wordTiming);
                                    
                                    DBG("[TTS Performer] Parsed word: \"" + wordText + "\" (" + 
                                        juce::String(startTime, 3) + "s - " + juce::String(endTime, 3) + "s, " +
                                        juce::String(wordTiming.phonemes.size()) + " phonemes)");
                                }
                            }
                        }
                        
                        // Store the parsed timing data (thread-safe) and attach to the selected clip
                        {
                            const juce::ScopedLock lock(owner.audioBufferLock);
                            owner.lastSynthesisTimings = newTimings;
                        }
                        if (owner.selectedClip)
                        {
                            const juce::ScopedLock c(owner.clipCacheLock);
                            owner.selectedClip->timings = newTimings;
                        }
                        // Persist timing JSON and XML (uses lastSynthesisTimings which was just updated)
                        owner.persistClipToDisk(textToSynthesize, modelFile, {}, jsonContent);
                        hasTimingData = true;
                        
                        DBG("[TTS Performer] Timing data parsed successfully: " + juce::String(newTimings.size()) + " words");
                        juce::Logger::writeToLog("[TTS Performer] Timing data parsed successfully: " + juce::String(newTimings.size()) + " words");
                        
                        // Log summary of timing data
                        for (size_t i = 0; i < newTimings.size(); ++i)
                        {
                            const auto& word = newTimings[i];
                            DBG("[TTS Performer] Word " + juce::String(i + 1) + ": \"" + word.word + "\" (" +
                                juce::String(word.startTimeSeconds, 3) + "s - " + juce::String(word.endTimeSeconds, 3) + "s)");
                        }
                    }
                    catch (const std::exception& e)
                    {
                        DBG("[TTS Performer] ERROR: Failed to parse JSON timing data: " + juce::String(e.what()));
                        juce::Logger::writeToLog("[TTS Performer] ERROR: Failed to parse JSON timing data: " + juce::String(e.what()));
                        
                        // Clear timing data on error
                        {
                            const juce::ScopedLock lock(owner.audioBufferLock);
                            owner.lastSynthesisTimings.clear();
                        }
                    }
                }
                else
                {
                    DBG("[TTS Performer] WARNING: JSON timing file was not created - using onset detection to find words.");
                    juce::Logger::writeToLog("[TTS Performer] WARNING: JSON timing file was not created - using onset detection to find words.");

                    // Call the new onset detection function to get precise timings from the audio
                    std::vector<WordTiming> detectedTimings = owner.detectWordsFromAudio(finalAudio, targetSR);

                    if (!detectedTimings.empty())
                    {
                        // Store the new precise timings
                        {
                            const juce::ScopedLock lock(owner.audioBufferLock);
                            owner.lastSynthesisTimings = detectedTimings;
                        }
                        if (owner.selectedClip)
                        {
                            const juce::ScopedLock c(owner.clipCacheLock);
                            owner.selectedClip->timings = detectedTimings;
                        }
                        // Persist the detected timings to an XML file for this clip
                        owner.persistClipToDisk(textToSynthesize, modelFile, {}, {});
                        hasTimingData = true;
                        DBG("[TTS Performer] Onset detection found " + juce::String(detectedTimings.size()) + " words");
                        juce::Logger::writeToLog("[TTS Performer] Onset detection found " + juce::String(detectedTimings.size()) + " words");
                    }
                }
                }
                else
                {
                throw std::runtime_error("Failed to start piper.exe process.");
            }
            tempWavFile.deleteFile(); // Clean up WAV file
            tempJsonFile.deleteFile(); // Clean up JSON file
        }
        catch (const std::exception& e)
        {
            const juce::ScopedLock lock(owner.messageLock);
            owner.errorMessage = e.what();
            owner.currentStatus = Status::Error;
        }
        owner.currentStatus = Status::Idle;
    }
}

void TTSPerformerModuleProcessor::cancelSynthesis()
{
    synthesisThread.stopThread(5000);
    synthesisThread.startThread();
    currentStatus = Status::Idle;
}

juce::File TTSPerformerModuleProcessor::getClipsRootDir() const
{
    auto exeDir = juce::File::getSpecialLocation(juce::File::currentExecutableFile).getParentDirectory();
    auto ttsDir = exeDir.getChildFile("TTSPERFORMER");
    
    if (!ttsDir.isDirectory())
        ttsDir.createDirectory();
    
    DBG("[TTS Performer] Clips root: " + ttsDir.getFullPathName());
    return ttsDir;
}

juce::String TTSPerformerModuleProcessor::sanitizeForDir(const juce::String& text) const
{
    juce::String s = text;
    const char* bad[] = {"\\", "/", ":", "*", "?", "\"", "<", ">", "|"};
    for (auto b : bad) s = s.replace(b, "_");
    if (s.length() > 64) s = s.substring(0, 64);
    return s.trim();
}

void TTSPerformerModuleProcessor::persistClipToDisk(const juce::String& text, const juce::File& modelFile,
                           const juce::AudioBuffer<float>& audioBuffer,
                           const juce::String& jsonContent)
{
    // --- FIX: Use hash-based ID as directory name for consistency ---
    // Compute the same hash-based ID that the clip object will have
    juce::String model = modelFile.getFileName();
    auto key = text + "|" + model;
    juce::String clipId = juce::String(juce::String::toHexString(juce::DefaultHashFunctions::generateHash(key, 0)));
    
    // Use the clip ID for the directory name
    juce::File dir = getClipsRootDir().getChildFile(clipId);
    if (!dir.exists()) dir.createDirectory();
    
    // Save metadata file containing original text and model info
    juce::XmlElement meta("ClipInfo");
    meta.setAttribute("name", text.substring(0, 48));
    meta.setAttribute("text", text);
    meta.setAttribute("model", modelFile.getFileName());
    dir.getChildFile("info.xml").replaceWithText(meta.toString());
    
    // Build unique file stem including voice + params
    juce::String base = modelFile.getFileNameWithoutExtension();
    auto* sp = apvts.getRawParameterValue("speed");
    auto* pt = apvts.getRawParameterValue("pitch");
    float spv = sp ? sp->load() : 0.0f;
    float ptv = pt ? pt->load() : 0.0f;
    juce::String speedStr = juce::String(spv, 2);
    juce::String pitchStr = juce::String(ptv, 2);
    juce::String stem = base + "_spd" + speedStr.replaceCharacter('.', '_') + "_pit" + pitchStr.replaceCharacter('.', '_');
    
    // Save model name tag (keeping for backward compatibility)
    dir.getChildFile("model.txt").replaceWithText(modelFile.getFileName());
    
    // Save JSON timing if provided
    if (jsonContent.isNotEmpty())
        dir.getChildFile(stem + ".json").replaceWithText(jsonContent);
    
    // Save XML timing if we have parsed timings (matching WAV filename)
    {
        const juce::ScopedLock lock(audioBufferLock);
        if (!lastSynthesisTimings.empty())
        {
            DBG("[TTS Performer] Saving XML timing with " + juce::String(lastSynthesisTimings.size()) + " words");
            juce::XmlElement root("timings");
            for (const auto& word : lastSynthesisTimings)
            {
                auto* wordEl = root.createNewChildElement("word");
                wordEl->setAttribute("text", word.word);
                wordEl->setAttribute("start", word.startTimeSeconds);
                wordEl->setAttribute("end", word.endTimeSeconds);
                for (const auto& ph : word.phonemes)
                {
                    auto* phEl = wordEl->createNewChildElement("phoneme");
                    phEl->setAttribute("text", ph.phoneme);
                    phEl->setAttribute("start", ph.startTimeSeconds);
                    phEl->setAttribute("end", ph.endTimeSeconds);
                }
            }
            auto xmlFile = dir.getChildFile(stem + ".xml");
            bool saved = xmlFile.replaceWithText(root.toString());
            DBG("[TTS Performer] XML timing saved: " + xmlFile.getFullPathName() + " (success: " + juce::String(saved ? "YES" : "NO") + ")");
    }
    else
    {
            DBG("[TTS Performer] WARNING: No timing data available for XML export");
        }
    }
    
    // Save WAV if provided
    if (audioBuffer.getNumSamples() > 0)
    {
        juce::WavAudioFormat wav;
        juce::String fname = stem + ".wav";
        std::unique_ptr<juce::FileOutputStream> out(dir.getChildFile(fname).createOutputStream());
        if (out && out->openedOk())
        {
            std::unique_ptr<juce::AudioFormatWriter> writer(wav.createWriterFor(out.release(), getSampleRate(), 1, 16, {}, 0));
            if (writer)
            {
                writer->writeFromAudioSampleBuffer(audioBuffer, 0, audioBuffer.getNumSamples());
                DBG("[TTS Performer] WAV saved: " + dir.getChildFile(fname).getFullPathName());
            }
        }
        else
        {
            DBG("[TTS Performer] ERROR: Failed to create WAV output stream");
        }
    }
}

// --- Clip cache helpers ---
juce::String TTSPerformerModuleProcessor::computeClipKey(const juce::String& text) const
{
    // Simple key: hash(text + model)
    juce::String model = synthesisThread.currentModelFile.getFileName();
    auto key = text + "|" + model;
    return juce::String(juce::String::toHexString(juce::DefaultHashFunctions::generateHash(key, 0)));
}

void TTSPerformerModuleProcessor::addClipToCache(const std::shared_ptr<TTSClip>& clip)
{
    if (!clip) return;
    // LRU eviction
    if ((int) clipCache.size() >= clipCacheMax)
    {
        juce::String oldestKey;
        auto oldestTime = std::chrono::steady_clock::now();
        for (auto& kv : clipCache)
        {
            if (kv.second && kv.second->lastUsed <= oldestTime)
            {
                oldestTime = kv.second->lastUsed;
                oldestKey = kv.first;
            }
        }
        if (oldestKey.isNotEmpty()) clipCache.erase(oldestKey);
    }
    clipCache[clip->clipId] = clip;
}

std::shared_ptr<TTSPerformerModuleProcessor::TTSClip> TTSPerformerModuleProcessor::findClipInCache(const juce::String& key) const
{
    auto it = clipCache.find(key);
    if (it != clipCache.end()) return it->second;
    return nullptr;
}

void TTSPerformerModuleProcessor::selectClipByKey(const juce::String& key)
{
    const juce::ScopedLock c(clipCacheLock);
    auto clip = findClipInCache(key);
    if (clip)
    {
        selectedClip = clip;
        readPosition = 0.0;
        isPlaying = false;
        {
            const juce::ScopedLock lock(audioBufferLock);
            lastSynthesisTimings = clip->timings;
            bakedAudioBuffer.makeCopyOf(clip->audio);
        }
        // Reset trim range parameters to full clip duration
        auto* trimStartParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimStart"));
        auto* trimEndParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimEnd"));
        if (trimStartParam) trimStartParam->setValueNotifyingHost(0.0f);
        if (trimEndParam) trimEndParam->setValueNotifyingHost(1.0f);
    }
}

void TTSPerformerModuleProcessor::selectClipByIndex(int index)
{
    const juce::ScopedLock c(clipCacheLock);
    if (clipCache.empty()) return;
    index = juce::jlimit(0, (int) clipCache.size() - 1, index);
    int i = 0;
    for (auto& kv : clipCache)
    {
        if (i++ == index) { selectClipByKey(kv.first); break; }
    }
}

void TTSPerformerModuleProcessor::loadClipsFromDisk()
{
    juce::File root = getClipsRootDir();
    juce::Array<juce::File> dirs;
    root.findChildFiles(dirs, juce::File::findDirectories, false);
    
    DBG("[TTS Performer] Scanning TTSPERFORMER: found " + juce::String(dirs.size()) + " clip folders");
    
    // Clear existing cache before reload
    {
        const juce::ScopedLock c(clipCacheLock);
        clipCache.clear();
    }
    
    for (auto dir : dirs)
    {
        // --- FIX: The directory name IS the unique clip ID now ---
        juce::String clipId = dir.getFileName();
        
        // Load metadata from info.xml
        juce::File metaFile = dir.getChildFile("info.xml");
        juce::String clipName = clipId;  // Fallback to ID if no metadata
        juce::String clipText = clipId;
        juce::String clipModel = "";
        
        if (metaFile.existsAsFile())
        {
            std::unique_ptr<juce::XmlElement> metaXml(juce::XmlDocument::parse(metaFile));
            if (metaXml && metaXml->hasTagName("ClipInfo"))
            {
                clipName = metaXml->getStringAttribute("name", clipId);
                clipText = metaXml->getStringAttribute("text", clipId);
                clipModel = metaXml->getStringAttribute("model", "");
            }
        }
        
        // --- THIS IS THE FIX ---
        // 1. Find all .wav files in the directory.
        juce::Array<juce::File> wavs;
        dir.findChildFiles(wavs, juce::File::findFiles, false, "*.wav");

        // 2. If no .wav files are found, we cannot load this clip, so skip to the next directory.
        if (wavs.isEmpty())
            continue;

        // 3. Find the newest .wav file in the directory.
        juce::File wavToLoad = wavs.getFirst();
        for (const auto& f : wavs)
        {
            if (f.getLastModificationTime() > wavToLoad.getLastModificationTime())
            {
                wavToLoad = f;
            }
        }
        // --- END OF FIX ---
        
        // Look for XML/JSON timing files matching WAV stem
        juce::String wavStem = wavToLoad.getFileNameWithoutExtension();
        auto timingXml = dir.getChildFile(wavStem + ".xml");
        auto timingJson = dir.getChildFile(wavStem + ".json");
        // Fallback to old naming scheme
        if (!timingXml.existsAsFile()) timingXml = dir.getChildFile("timing.xml");
        if (!timingJson.existsAsFile()) timingJson = dir.getChildFile("timing.json");
        
        juce::AudioFormatManager fm; fm.registerBasicFormats();
        std::unique_ptr<juce::AudioFormatReader> r(fm.createReaderFor(wavToLoad));
        if (!r) continue;
        juce::AudioBuffer<float> buf(1, (int) r->lengthInSamples);
        r->read(&buf, 0, buf.getNumSamples(), 0, true, false);
        std::vector<WordTiming> timings;
        // Prefer XML timing if available
        if (timingXml.existsAsFile())
        {
            std::unique_ptr<juce::XmlElement> root(juce::XmlDocument::parse(timingXml));
            if (root && root->hasTagName("timings"))
            {
                for (auto* wordEl : root->getChildWithTagNameIterator("word"))
                {
                    juce::String word = wordEl->getStringAttribute("text");
                    double start = wordEl->getDoubleAttribute("start");
                    double end = wordEl->getDoubleAttribute("end");
                    WordTiming wt(word, start, end);
                    for (auto* phEl : wordEl->getChildWithTagNameIterator("phoneme"))
                    {
                        juce::String ph = phEl->getStringAttribute("text");
                        double phStart = phEl->getDoubleAttribute("start");
                        double phEnd = phEl->getDoubleAttribute("end");
                        wt.phonemes.emplace_back(ph, phStart, phEnd);
                    }
                    timings.push_back(wt);
                }
            }
        }
        // Fallback to JSON timing if XML not found
        else if (timingJson.existsAsFile())
        {
            try {
                auto jsonData = nlohmann::json::parse(timingJson.loadFileAsString().toStdString());
                if (jsonData.contains("words") && jsonData["words"].is_array())
                {
                    for (const auto& wordData : jsonData["words"]) {
                        if (wordData.contains("text") && wordData.contains("start_time") && wordData.contains("end_time")) {
                            WordTiming wt(wordData["text"].get<std::string>(), wordData["start_time"].get<double>(), wordData["end_time"].get<double>());
                            if (wordData.contains("phonemes") && wordData["phonemes"].is_array()) {
                                for (const auto& p : wordData["phonemes"]) {
                                    if (p.contains("phoneme") && p.contains("start_time") && p.contains("end_time"))
                                        wt.phonemes.emplace_back(p["phoneme"].get<std::string>(), p["start_time"].get<double>(), p["end_time"].get<double>());
                                }
                            }
                            timings.push_back(wt);
                        }
                    }
                }
            } catch (...) {}
        }
        auto clip = std::make_shared<TTSClip>();
        clip->clipId = clipId;  // Use the hash-based ID from directory name
        clip->name = clipName;  // Use the name from metadata
        clip->text = clipText;  // Use the original text from metadata
        clip->modelKey = clipModel;  // Use the model from metadata
        clip->audio.makeCopyOf(buf);
        clip->sampleRate = getSampleRate();
        clip->durationSeconds = (double) buf.getNumSamples() / juce::jmax(1.0, getSampleRate());
        clip->timings = std::move(timings);
        const juce::ScopedLock c(clipCacheLock);
        addClipToCache(clip);
        DBG("[TTS Performer] Loaded clip: " + clipName + " (ID: " + clipId + ") from: " + dir.getFullPathName());
    }
    // Set flag AFTER successful load
    clipsLoadedFromDisk = true;
}

void TTSPerformerModuleProcessor::getStateInformation(juce::MemoryBlock& destData)
{
    auto state = apvts.copyState();
    std::unique_ptr<juce::XmlElement> xml(state.createXml());
    // Persist selected clip (trim parameters are already in APVTS)
    if (selectedClip) xml->setAttribute("selectedClipId", selectedClip->clipId);
    copyXmlToBinary(*xml, destData);
}

void TTSPerformerModuleProcessor::setStateInformation(const void* data, int sizeInBytes)
{
    std::unique_ptr<juce::XmlElement> xmlState(getXmlFromBinary(data, sizeInBytes));
    if (xmlState.get() != nullptr)
        if (xmlState->hasTagName(apvts.state.getType()))
        {
            apvts.replaceState(juce::ValueTree::fromXml(*xmlState));
            // Restore selected clip (trim parameters restored via APVTS)
            selectedClipId = xmlState->getStringAttribute("selectedClipId");
            if (selectedClipId.isNotEmpty()) selectClipByKey(selectedClipId);
        }
}

juce::ValueTree TTSPerformerModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("TTSPerformerState");
    // Only save the unique ID of the selected clip.
    // Trim parameters are handled automatically by the main APVTS save system.
    if (selectedClip)
    {
        vt.setProperty("selectedClipId", selectedClip->clipId, nullptr);
    }
    return vt;
}

void TTSPerformerModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("TTSPerformerState"))
    {
        // Only load the unique ID of the clip to select.
        // Trim parameters are restored automatically by the main APVTS system.
        juce::String clipIdToSelect = vt.getProperty("selectedClipId", "").toString();
        if (clipIdToSelect.isNotEmpty())
        {
            selectClipByKey(clipIdToSelect);
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void TTSPerformerModuleProcessor::drawClipsPanel(float itemWidth)
{
    ImGui::Text("Clips (%d cached)", getNumCachedClips());
    
    // --- FIX: Set fixed width to match waveform canvas (600.0f) ---
    const float dropdownWidth = 600.0f;
    ImGui::PushItemWidth(dropdownWidth);
    
    if (!clipsLoadedFromDisk) loadClipsFromDisk();
    juce::String currentName = selectedClip ? selectedClip->name : juce::String("(none)");
    if (ImGui::BeginCombo("##clipsCombo", currentName.toRawUTF8()))
    {
        const juce::ScopedLock lock(clipCacheLock);
        for (auto& kv : clipCache)
        {
            const auto& clip = kv.second;
            if (!clip) continue;
            
            // --- FIX: Include modelKey to show which voice was used ---
            juce::String label = clip->name + " (" + juce::String(clip->durationSeconds, 1) + "s, " + 
                                 juce::String(clip->timings.size()) + " words) [" + clip->modelKey + "]";
            
            // Append unique hidden ID to prevent ImGui ID conflicts
            // The "##" tells ImGui to use the following text for the ID but not display it
            label += "##" + clip->clipId;
            
            bool sel = (selectedClip && selectedClip->clipId == clip->clipId);
            if (ImGui::Selectable(label.toRawUTF8(), sel))
            {
                selectClipByKey(clip->clipId);
                // Reset trim parameters on clip switch (handled in selectClipByKey)
            }
            if (sel) ImGui::SetItemDefaultFocus();
        }
        ImGui::EndCombo();
    }
    ImGui::PopItemWidth();
    // Transport removed: use spacebar (PresetCreator) or audio engine auto-play (Collider)
    if (ImGui::Button("Rename##clip", ImVec2(itemWidth * 0.2f, 0)))
    {
        if (selectedClip)
        {
            // Show rename popup
            strncpy_s(renameBuffer, sizeof(renameBuffer), selectedClip->name.toRawUTF8(), _TRUNCATE);
            showRenamePopup = true;
            ImGui::OpenPopup("Rename Clip##renamepopup");
        }
    }
    
    // Rename popup modal
    if (ImGui::BeginPopupModal("Rename Clip##renamepopup", &showRenamePopup, ImGuiWindowFlags_AlwaysAutoResize))
    {
        ImGui::Text("Enter new name:");
        ImGui::InputText("##renameinput", renameBuffer, IM_ARRAYSIZE(renameBuffer));
        if (ImGui::Button("OK##renameok", ImVec2(120, 0)))
        {
            if (selectedClip && renameBuffer[0] != '\0')
            {
                renameSelectedClipOnDisk(juce::String(renameBuffer));
            }
            showRenamePopup = false;
            ImGui::CloseCurrentPopup();
        }
        ImGui::SameLine();
        if (ImGui::Button("Cancel##renamecancel", ImVec2(120, 0)))
        {
            showRenamePopup = false;
            ImGui::CloseCurrentPopup();
        }
        ImGui::EndPopup();
    }
    
    ImGui::SameLine();
    if (ImGui::Button("Delete##clip", ImVec2(itemWidth * 0.2f, 0)))
    {
        if (selectedClip)
        {
            showDeleteConfirm = true;
            ImGui::OpenPopup("Confirm Delete##deletepopup");
        }
    }
    
    // Delete confirmation modal
    if (ImGui::BeginPopupModal("Confirm Delete##deletepopup", &showDeleteConfirm, ImGuiWindowFlags_AlwaysAutoResize))
    {
        ImGui::Text("Delete clip \"%s\"?", selectedClip ? selectedClip->name.toRawUTF8() : "");
        ImGui::Text("This will remove it from disk permanently.");
        if (ImGui::Button("Yes##deleteyes", ImVec2(120, 0)))
        {
            deleteSelectedClipFromDisk();
            showDeleteConfirm = false;
            ImGui::CloseCurrentPopup();
        }
        ImGui::SameLine();
        if (ImGui::Button("No##deleteno", ImVec2(120, 0)))
        {
            showDeleteConfirm = false;
            ImGui::CloseCurrentPopup();
        }
        ImGui::EndPopup();
    }
    
    ImGui::SameLine();
    if (ImGui::Button("Reload##clip", ImVec2(itemWidth * 0.2f, 0))) { clipsLoadedFromDisk = false; loadClipsFromDisk(); }
}
#endif

bool TTSPerformerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // Bus 0: Global Mods (Rate, Gate, Trigger, Reset, Randomize)
    if (paramId == paramIdRateMod)      { outBusIndex = 0; outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdGateMod)      { outBusIndex = 0; outChannelIndexInBus = 1; return true; }
    if (paramId == paramIdTriggerMod)   { outBusIndex = 0; outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdResetMod)     { outBusIndex = 0; outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdRandomizeMod) { outBusIndex = 0; outChannelIndexInBus = 4; return true; } // <-- NEW

    // Bus 1: Trim Mods (Trim Start, Trim End)
    if (paramId == paramIdTrimStartMod) { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdTrimEndMod)   { outBusIndex = 1; outChannelIndexInBus = 1; return true; }

    // Bus 2: Playback Mods (Speed, Pitch)
    if (paramId == paramIdSpeedMod)     { outBusIndex = 2; outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdPitchMod)     { outBusIndex = 2; outChannelIndexInBus = 1; return true; }

    // Bus 3: Word Triggers (Word 1-16)
    if (paramId.startsWith("word") && paramId.endsWith("_trig_mod"))
    {
        int wordNum = paramId.fromFirstOccurrenceOf("word", false, false)
                           .upToFirstOccurrenceOf("_trig_mod", false, false)
                           .getIntValue();
        if (wordNum > 0 && wordNum <= 16)
        {
            outBusIndex = 3;
            outChannelIndexInBus = wordNum - 1; // 0-indexed within bus
            return true;
        }
    }

    return false;
}

juce::String TTSPerformerModuleProcessor::getAudioInputLabel(int channel) const
{
    // Multi-bus absolute channel mapping (flattened in bus order):
    // Bus 0 (Global Mods): 0..4
    // Bus 1 (Trim Mods):   5..6
    // Bus 2 (Playback):    7..8
    // Bus 3 (Word Trigs):  9..24
    switch (channel)
    {
        case 0: return "Rate Mod";
        case 1: return "Gate Mod";
        case 2: return "Trigger";
        case 3: return "Reset";
        case 4: return "Randomize Trig"; // <-- NEW
        case 5: return "Trim Start Mod";
        case 6: return "Trim End Mod";
        case 7: return "Speed Mod";
        case 8: return "Pitch Mod";
        default:
            if (channel >= 9 && channel < 25)
                return "Word " + juce::String(channel - 8) + " Trig"; // 9->Word1, 24->Word16
            return {};
    }
}

juce::String TTSPerformerModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Audio";
    if (channel == 1) return "Word Gate";
    if (channel == 2) return "EOP Gate";
    if (channel >= 3 && channel < 19)
        return "Word " + juce::String(channel - 2) + " Gate";
    if (channel >= 19 && channel < 35)
        return "Word " + juce::String(channel - 18) + " Trig";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void TTSPerformerModuleProcessor::refreshModelChoices()
{
    const juce::ScopedLock lock(modelLock);
    modelEntries.clear();
    // Prefer mapping file if present
    auto mapFile = resolveModelsBaseDir().getChildFile("piper_voices_map.md");
    if (!loadVoicesFromMapFile(mapFile))
    {
        // Scan models directory recursively for .onnx files under piper-voices
        juce::File base = resolveModelsBaseDir().getChildFile("piper-voices");
        if (base.isDirectory())
        {
            juce::Array<juce::File> files;
            base.findChildFiles(files, juce::File::findFiles, true, "*.onnx");
            for (auto f : files)
            {
                auto rel = f.getRelativePathFrom(resolveModelsBaseDir());
                auto parts = juce::StringArray::fromTokens(rel, "\\/", "");
                // Expect: piper-voices/<lang>/<locale>/<voice>/<quality>/<file>
                if (parts.size() >= 6 && parts[0].equalsIgnoreCase("piper-voices"))
                {
                    ModelEntry e;
                    e.language = parts[1];
                    e.locale = parts[2];
                    e.voice = parts[3];
                    e.quality = parts[4];
                    e.relativeOnnx = rel.replaceCharacter('\\', '/');
                    modelEntries.push_back(e);
                }
            }
        }
    }
    if (modelEntries.empty())
    {
        // Fallback seed
        ModelEntry e { "en", "en_US", "lessac", "medium", "piper-voices/en/en_US/lessac/medium/en_US-lessac-medium.onnx" };
        modelEntries.push_back(e);
    }
}
#endif

juce::File TTSPerformerModuleProcessor::resolveModelsBaseDir() const
{
    auto exeDir = juce::File::getSpecialLocation(juce::File::currentExecutableFile).getParentDirectory();
    auto candidate = exeDir.getChildFile("models");
    if (candidate.isDirectory()) return candidate;
    auto parent = exeDir.getParentDirectory();
    auto parentModels = parent.getChildFile("models");
    if (parentModels.isDirectory()) return parentModels;
    return exeDir;
}

juce::File TTSPerformerModuleProcessor::resolveSelectedModelFile() const
{
    const juce::ScopedLock lock(modelLock);
    for (const auto& e : modelEntries)
    {
        if (e.locale == selectedLocale && e.voice == selectedVoice && e.quality == selectedQuality)
            return resolveModelsBaseDir().getChildFile(e.relativeOnnx);
    }
    for (const auto& e : modelEntries)
    {
        if (e.locale == selectedLocale && e.voice == selectedVoice)
            return resolveModelsBaseDir().getChildFile(e.relativeOnnx);
    }
    return resolveModelsBaseDir().getChildFile("piper-voices/en/en_US/lessac/medium/en_US-lessac-medium.onnx");
}

bool TTSPerformerModuleProcessor::loadVoicesFromMapFile(const juce::File& mapFile)
{
    if (!mapFile.existsAsFile()) return false;
    juce::String content = mapFile.loadFileAsString();
    auto lines = juce::StringArray::fromLines(content);
    for (auto& line : lines)
    {
        auto l = line.trim();
        if (l.isEmpty() || !l.endsWithIgnoreCase(".onnx")) continue;
        juce::String p = l;
        // Lines may start with leading backslash; normalize
        while (p.startsWithChar('\\') || p.startsWithChar('/')) p = p.substring(1);
        p = p.replaceCharacter('\\', '/');
        auto parts = juce::StringArray::fromTokens(p, "/", "");
        // Expect: piper-voices/<lang>/<locale>/<voice>/<quality>/<file>
        int idx = parts.indexOf("piper-voices");
        if (idx < 0) continue;
        if (parts.size() >= idx + 6)
        {
            ModelEntry e;
            e.language = parts[idx + 1];
            e.locale = parts[idx + 2];
            e.voice = parts[idx + 3];
            e.quality = parts[idx + 4];
            juce::String rel;
            for (int i = idx; i < parts.size(); ++i)
            {
                if (i > idx) rel += "/";
                rel += parts[i];
            }
            e.relativeOnnx = rel;
            modelEntries.push_back(e);
        }
    }
    return !modelEntries.empty();
}

const std::vector<WordTiming>& TTSPerformerModuleProcessor::getActiveTimings() const
{
    return (selectedClip && !selectedClip->timings.empty()) ? selectedClip->timings : lastSynthesisTimings;
}

int TTSPerformerModuleProcessor::findFirstWordIndexAtOrAfter(double timeSec) const
{
    const auto& t = getActiveTimings();
    for (int i = 0; i < (int) t.size(); ++i) if (t[(size_t) i].endTimeSeconds >= timeSec) return i;
    return juce::jmax(0, (int) t.size() - 1);
}

int TTSPerformerModuleProcessor::findLastWordIndexAtOrBefore(double timeSec) const
{
    const auto& t = getActiveTimings();
    for (int i = (int) t.size() - 1; i >= 0; --i) if (t[(size_t) i].startTimeSeconds <= timeSec) return i;
    return 0;
}

void TTSPerformerModuleProcessor::clampWordIndexToTrim()
{
    const auto& t = getActiveTimings();
    if (t.empty()) return;
    // Read trim from parameters (normalized 0-1)
    float trimStartNorm = apvts.getRawParameterValue("trimStart")->load();
    float trimEndNorm = apvts.getRawParameterValue("trimEnd")->load();
    double totalDur = selectedClip ? selectedClip->durationSeconds : t.back().endTimeSeconds;
    double t0 = trimStartNorm * totalDur;
    double t1 = trimEndNorm * totalDur;
    int minIdx = findFirstWordIndexAtOrAfter(t0);
    int maxIdx = findLastWordIndexAtOrBefore(t1);
    currentWordIndex = juce::jlimit(minIdx, maxIdx, currentWordIndex);
}

void TTSPerformerModuleProcessor::normalizeModelSelection()
{
    const juce::ScopedLock lock(modelLock);
    if (modelEntries.empty()) return;
    // Ensure selectedLanguage exists; otherwise pick first
    auto languageExists = std::find_if(modelEntries.begin(), modelEntries.end(), [&](const ModelEntry& e){ return e.language == selectedLanguage; }) != modelEntries.end();
    if (!languageExists) selectedLanguage = modelEntries.front().language;
    // Limit locale set to language
    juce::StringArray locales;
    for (const auto& e : modelEntries) if (e.language == selectedLanguage && !locales.contains(e.locale)) locales.add(e.locale);
    if (!locales.contains(selectedLocale) && locales.size() > 0) selectedLocale = locales[0];
    // Limit voices to locale
    juce::StringArray voices;
    for (const auto& e : modelEntries) if (e.locale == selectedLocale && !voices.contains(e.voice)) voices.add(e.voice);
    if (!voices.contains(selectedVoice) && voices.size() > 0) selectedVoice = voices[0];
    // Limit qualities to voice
    juce::StringArray qualities;
    for (const auto& e : modelEntries) if (e.locale == selectedLocale && e.voice == selectedVoice && !qualities.contains(e.quality)) qualities.add(e.quality);
    if (!qualities.contains(selectedQuality) && qualities.size() > 0) selectedQuality = qualities[0];
}

#if defined(PRESET_CREATOR_UI)
float TTSPerformerModuleProcessor::getLiveNoGate(const juce::String& liveKey, float fallback) const
{
    // Read live telemetry directly without engine connectivity gating
    if (auto it = paramLiveValues.find(liveKey); it != paramLiveValues.end())
        return it->second.load(std::memory_order_relaxed);
    return fallback;
}

void TTSPerformerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    // Status indicator
    Status status = currentStatus.load();
    switch (status)
    {
        case Status::Idle:
            ImGui::Text("Status: Ready");
            break;
        case Status::Synthesizing:
            ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), "Status: Synthesizing...");
            break;
        case Status::Playing:
            ImGui::TextColored(ImVec4(0.0f, 1.0f, 0.0f, 1.0f), "Status: Playing");
            break;
        case Status::Error:
            ImGui::TextColored(ImVec4(1.0f, 0.0f, 0.0f, 1.0f), "Status: Error");
            break;
    }

    // Error message
    if (status == Status::Error)
    {
        const juce::ScopedLock lock(messageLock);
        if (errorMessage.isNotEmpty())
        {
            ImGui::TextWrapped("Error: %s", errorMessage.toRawUTF8());
        }
    }

    // Text input (compact, use itemWidth directly)
    ImGui::PushItemWidth(itemWidth);
    ImGui::InputTextMultiline("##TextInput", uiTextBuffer, sizeof(uiTextBuffer), 
                              ImVec2(itemWidth, 45), ImGuiInputTextFlags_None);
    ImGui::PopItemWidth();
    
    ImGui::PushItemWidth(itemWidth);
    
    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue("sync")->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync")))
            *p = sync;
        onModificationEnded();
    }

    if (sync)
    {
        int division = (int)apvts.getRawParameterValue("rate_division")->load();
        if (ImGui::Combo("Division", &division, "1/32\0""1/16\0""1/8\0""1/4\0""1/2\0""1\0""2\0""4\0""8\0\0"))
        {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division")))
                *p = division;
            onModificationEnded();
        }
    }
    else
    {
        // Rate slider (only shown in free-running mode, with modulation feedback + proper undo/redo)
        const bool rateIsMod = isParamModulated("rate_mod");
        float rate = rateIsMod ? getLiveNoGate("rate_live", rateParam->load())
                               : rateParam->load();
        
        if (rateIsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Rate (Hz)", &rate, 0.1f, 20.0f, "%.2f", ImGuiSliderFlags_Logarithmic))
        {
            if (!rateIsMod) 
            {
                auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("rate"));
                if (param) param->setValueNotifyingHost(apvts.getParameterRange("rate").convertTo0to1(rate));
            }
        }
        if (!rateIsMod) adjustParamOnWheel(apvts.getParameter("rate"), "rate", rate);
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        if (rateIsMod)
        {
            ImGui::EndDisabled();
            const float baseRateDisp = rateParam->load();
            const float liveRateDisp = getLiveNoGate("rate_live", baseRateDisp);
            ImGui::SameLine();
            ImGui::Text("%.2f Hz -> %.2f Hz (mod)", baseRateDisp, liveRateDisp);
        }
    }
    
    // Gate slider
    const bool gateIsMod = isParamModulated("gate_mod");
    float gate = gateIsMod ? getLiveNoGate("gate_live", gateParam->load())
                           : gateParam->load();
    
    if (gateIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Gate", &gate, 0.0f, 1.0f, "%.3f"))
    {
        if (!gateIsMod) 
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("gate"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("gate").convertTo0to1(gate));
        }
    }
    if (!gateIsMod) adjustParamOnWheel(apvts.getParameter("gate"), "gate", gate);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (gateIsMod)
    {
        ImGui::EndDisabled();
        const float baseGateDisp = gateParam->load();
        const float liveGateDisp = getLiveNoGate("gate_live", baseGateDisp);
        ImGui::SameLine();
        ImGui::Text("%.0f%% -> %.0f%% (mod)", baseGateDisp * 100.0f, liveGateDisp * 100.0f);
    }
    
    // Volume slider (with proper undo/redo)
    float volume = volumeParam->load();
    if (ImGui::SliderFloat("Volume", &volume, 0.0f, 1.0f, "%.2f"))
    {
        auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("volume"));
        if (param) param->setValueNotifyingHost(apvts.getParameterRange("volume").convertTo0to1(volume));
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    
    // Engine UI (minimal) - default to Naive if param missing
    {
        int engineIdx = 1;
        if (auto* p = apvts.getParameter("engine")) engineIdx = (int) p->getValue();
        const char* items[] = { "RubberBand", "Naive" };
        if (ImGui::Combo("Engine", &engineIdx, items, 2))
        {
            if (auto* p = apvts.getParameter("engine")) p->setValueNotifyingHost((float) engineIdx);
            onModificationEnded();
        }
    }

    // Speed slider (with modulation feedback)
    const bool speedIsMod = isParamModulated("speed_mod");
    float speed = speedIsMod ? getLiveNoGate("speed_live", apvts.getRawParameterValue("speed")->load()) 
                             : apvts.getRawParameterValue("speed")->load();
    
    if (speedIsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Speed", &speed, 0.25f, 4.0f, "%.2fx"))
    {
        if (!speedIsMod)
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("speed"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("speed").convertTo0to1(speed));
        }
    }
    if (!speedIsMod) adjustParamOnWheel(apvts.getParameter("speed"), "speed", speed);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (speedIsMod)
    {
        ImGui::EndDisabled();
        const float baseSpeedDisp = apvts.getRawParameterValue("speed")->load();
        const float liveSpeedDisp = getLiveNoGate("speed_live", baseSpeedDisp);
        ImGui::SameLine();
        ImGui::Text("%.2fx -> %.2fx (mod)", baseSpeedDisp, liveSpeedDisp);
    }
    
    // Pitch slider (with modulation feedback)
    const bool pitchIsMod = isParamModulated("pitch_mod");
    float pitch = pitchIsMod ? getLiveNoGate("pitch_live", apvts.getRawParameterValue("pitch")->load())
                             : apvts.getRawParameterValue("pitch")->load();
    
    if (pitchIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Pitch", &pitch, -24.0f, 24.0f, "%.1f st"))
    {
        if (!pitchIsMod)
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("pitch"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("pitch").convertTo0to1(pitch));
        }
    }
    if (!pitchIsMod) adjustParamOnWheel(apvts.getParameter("pitch"), "pitch", pitch);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (pitchIsMod)
    {
        ImGui::EndDisabled();
        const float basePitchDisp = apvts.getRawParameterValue("pitch")->load();
        const float livePitchDisp = getLiveNoGate("pitch_live", basePitchDisp);
        ImGui::SameLine();
        ImGui::Text("%.1f st -> %.1f st (mod)", basePitchDisp, livePitchDisp);
    }
    
    // Trim sliders (with modulation feedback)
    const bool trimStartIsMod = isParamModulated("trimStart_mod");
    float trimStart = trimStartIsMod ? getLiveNoGate("trimStart_live", apvts.getRawParameterValue("trimStart")->load())
                                     : apvts.getRawParameterValue("trimStart")->load();
    if (trimStartIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Trim Start", &trimStart, 0.0f, 1.0f, "%.3f"))
    {
        if (!trimStartIsMod)
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimStart"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("trimStart").convertTo0to1(trimStart));
        }
    }
    if (!trimStartIsMod) adjustParamOnWheel(apvts.getParameter("trimStart"), "trimStart", trimStart);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (trimStartIsMod)
    {
        ImGui::EndDisabled();
        const float baseTrimStartDisp = apvts.getRawParameterValue("trimStart")->load();
        const float liveTrimStartDisp = getLiveNoGate("trimStart_live", baseTrimStartDisp);
        const double durSec = (selectedClip ? selectedClip->durationSeconds : 0.0);
        ImGui::SameLine();
        if (durSec > 0.0)
            ImGui::Text("%.3f -> %.3f (%.2fs -> %.2fs) (mod)", baseTrimStartDisp, liveTrimStartDisp, baseTrimStartDisp * (float)durSec, liveTrimStartDisp * (float)durSec);
        else
            ImGui::Text("%.3f -> %.3f (mod)", baseTrimStartDisp, liveTrimStartDisp);
    }
    
    const bool trimEndIsMod = isParamModulated("trimEnd_mod");
    float trimEnd = trimEndIsMod ? getLiveNoGate("trimEnd_live", apvts.getRawParameterValue("trimEnd")->load())
                                 : apvts.getRawParameterValue("trimEnd")->load();
    if (trimEndIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Trim End", &trimEnd, 0.0f, 1.0f, "%.3f"))
    {
        if (!trimEndIsMod)
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimEnd"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("trimEnd").convertTo0to1(trimEnd));
        }
    }
    if (!trimEndIsMod) adjustParamOnWheel(apvts.getParameter("trimEnd"), "trimEnd", trimEnd);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (trimEndIsMod)
    {
        ImGui::EndDisabled();
        const float baseTrimEndDisp = apvts.getRawParameterValue("trimEnd")->load();
        const float liveTrimEndDisp = getLiveNoGate("trimEnd_live", baseTrimEndDisp);
        const double durSec = (selectedClip ? selectedClip->durationSeconds : 0.0);
        ImGui::SameLine();
        if (durSec > 0.0)
            ImGui::Text("%.3f -> %.3f (%.2fs -> %.2fs) (mod)", baseTrimEndDisp, liveTrimEndDisp, baseTrimEndDisp * (float)durSec, liveTrimEndDisp * (float)durSec);
        else
            ImGui::Text("%.3f -> %.3f (mod)", baseTrimEndDisp, liveTrimEndDisp);
    }
    
    ImGui::PopItemWidth();

    // Model selection (compact)
    {
        if (modelEntries.empty()) { refreshModelChoices(); loadClipsFromDisk(); }
        normalizeModelSelection();
        const juce::ScopedLock lock(modelLock);
        // Build unique sets
        juce::StringArray languages, locales, voices, qualities;
        for (const auto& e : modelEntries)
            if (!languages.contains(e.language)) languages.add(e.language);
        // Language
        juce::String langShown = selectedLanguage;
        ImGui::PushItemWidth(itemWidth * 0.4f); // Constrain dropdown width
        if (ImGui::BeginCombo("Language", langShown.toRawUTF8()))
        {
            for (auto& l : languages)
            {
                bool sel = (l == selectedLanguage);
                if (ImGui::Selectable(l.toRawUTF8(), sel)) { selectedLanguage = l; selectedLocale.clear(); selectedVoice.clear(); selectedQuality.clear(); normalizeModelSelection(); }
                if (sel) ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }
        ImGui::PopItemWidth();
        // Locales for language
        for (const auto& e : modelEntries)
            if (e.language == selectedLanguage && !locales.contains(e.locale)) locales.add(e.locale);
        juce::String locShown = selectedLocale;
        ImGui::PushItemWidth(itemWidth * 0.4f);
        if (ImGui::BeginCombo("Locale", locShown.toRawUTF8()))
        {
            for (auto& l : locales)
            {
                bool sel = (l == selectedLocale);
                if (ImGui::Selectable(l.toRawUTF8(), sel)) { selectedLocale = l; selectedVoice.clear(); selectedQuality.clear(); normalizeModelSelection(); }
                if (sel) ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }
        ImGui::PopItemWidth();
        // Voices for locale
        for (const auto& e : modelEntries)
            if (e.locale == selectedLocale && !voices.contains(e.voice)) voices.add(e.voice);
        juce::String voiceShown = selectedVoice;
        ImGui::PushItemWidth(itemWidth * 0.4f);
        if (ImGui::BeginCombo("Voice", voiceShown.toRawUTF8()))
        {
            for (auto& v : voices)
            {
                bool sel = (v == selectedVoice);
                if (ImGui::Selectable(v.toRawUTF8(), sel)) { selectedVoice = v; selectedQuality.clear(); normalizeModelSelection(); }
                if (sel) ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }
        ImGui::PopItemWidth();
        // Quality for voice
        for (const auto& e : modelEntries)
            if (e.locale == selectedLocale && e.voice == selectedVoice && !qualities.contains(e.quality)) qualities.add(e.quality);
        juce::String qualShown = selectedQuality;
        ImGui::PushItemWidth(itemWidth * 0.4f);
        if (ImGui::BeginCombo("Quality", qualShown.toRawUTF8()))
        {
            for (auto& q : qualities)
            {
                bool sel = (q == selectedQuality);
                if (ImGui::Selectable(q.toRawUTF8(), sel)) { selectedQuality = q; }
                if (sel) ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }
        ImGui::PopItemWidth();
    }

    
    // Phase 5: Clips panel (list/select)
    drawClipsPanel(itemWidth);

    // SINGLE UNIFIED TIMELINE (after Clips panel, before BAKE)
    if (selectedClip && !selectedClip->timings.empty())
    {
        ImGui::Text("Timeline");
        
        const float canvasWidth = 600.0f; // Fixed width for better horizontal space
        const float canvasHeight = 200.0f; // Compact height to reduce vertical space
        ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();
        ImVec2 canvas_p1(canvas_p0.x + canvasWidth, canvas_p0.y + canvasHeight);
        ImDrawList* dl = ImGui::GetWindowDrawList();
        
        // Background
        dl->AddRectFilled(canvas_p0, canvas_p1, IM_COL32(20, 20, 20, 255));
        
        double totalDur = selectedClip->durationSeconds > 0.0 ? selectedClip->durationSeconds 
                        : ((double)selectedClip->audio.getNumSamples() / juce::jmax(1.0, getSampleRate()));
        
        // Get the live, modulated trim values to correctly position the UI handles
        const bool trimStartIsMod = isParamModulated("trimStart_mod");
        float trimStartNorm = trimStartIsMod 
            ? getLiveParamValueFor("trimStart_mod", "trimStart_live", apvts.getRawParameterValue("trimStart")->load())
            : apvts.getRawParameterValue("trimStart")->load();

        const bool trimEndIsMod = isParamModulated("trimEnd_mod");
        float trimEndNorm = trimEndIsMod 
            ? getLiveParamValueFor("trimEnd_mod", "trimEnd_live", apvts.getRawParameterValue("trimEnd")->load())
            : apvts.getRawParameterValue("trimEnd")->load();

        // Ensure start is always before end for drawing stability
        if (trimStartNorm >= trimEndNorm) {
            trimStartNorm = juce::jmax(0.0f, trimEndNorm - 0.001f);
        }
        double trimStartSec = trimStartNorm * totalDur;
        double trimEndSec = trimEndNorm * totalDur;
        
        // Draw waveform (semi-transparent)
        const juce::ScopedLock lock(audioBufferLock);
        if (selectedClip->audio.getNumSamples() > 0)
        {
            const float midY = canvas_p0.y + canvasHeight * 0.5f;
            for (int x = 0; x < (int)canvasWidth; ++x)
            {
                float startSampleF = ((float)x / canvasWidth) * selectedClip->audio.getNumSamples();
                float endSampleF = ((float)(x + 1) / canvasWidth) * selectedClip->audio.getNumSamples();
                int startSample = (int)startSampleF;
                int endSample = (int)endSampleF;
                if (startSample >= endSample) continue;
                
                juce::Range<float> minMax = selectedClip->audio.findMinMax(0, startSample, endSample - startSample);
                float y1 = midY - minMax.getStart() * (canvasHeight * 0.4f);
                float y2 = midY - minMax.getEnd() * (canvasHeight * 0.4f);
                dl->AddLine(ImVec2(canvas_p0.x + x, y1), ImVec2(canvas_p0.x + x, y2), IM_COL32(60, 80, 100, 180), 1.0f);
            }
        }
        
        // Draw word bars (colored, labeled)
        for (size_t i = 0; i < selectedClip->timings.size(); ++i)
        {
            const auto& w = selectedClip->timings[i];
            float x0 = canvas_p0.x + (float)(w.startTimeSeconds / totalDur) * canvasWidth;
            float x1 = canvas_p0.x + (float)(w.endTimeSeconds / totalDur) * canvasWidth;
            
            bool active = false;
            if (isPlaying)
            {
                double curSec = readPosition / juce::jmax(1.0, getSampleRate());
                active = (curSec >= w.startTimeSeconds && curSec < w.endTimeSeconds);
            }
            
            ImU32 bg = active ? IM_COL32(255, 180, 80, 100) : IM_COL32(80, 120, 160, 80);
            dl->AddRectFilled(ImVec2(x0, canvas_p0.y), ImVec2(x1, canvas_p1.y), bg);
            dl->AddLine(ImVec2(x0, canvas_p0.y), ImVec2(x0, canvas_p1.y), IM_COL32(200, 200, 200, 120), 1.0f);
            
            // Word label
            ImGui::PushClipRect(ImVec2(x0, canvas_p0.y), ImVec2(x1, canvas_p1.y), true);
            dl->AddText(ImVec2(x0 + 2, canvas_p0.y + 2), IM_COL32_WHITE, w.word.toRawUTF8());
            ImGui::PopClipRect();
        }
        
        // Draw trim handles (10px wide, draggable)
        float trimX0 = canvas_p0.x + (float)(trimStartSec / totalDur) * canvasWidth;
        float trimX1 = canvas_p0.x + (float)(trimEndSec / totalDur) * canvasWidth;
        
        dl->AddRectFilled(ImVec2(trimX0 - 5, canvas_p0.y), ImVec2(trimX0 + 5, canvas_p1.y), IM_COL32(255, 255, 100, 180));
        dl->AddRectFilled(ImVec2(trimX1 - 5, canvas_p0.y), ImVec2(trimX1 + 5, canvas_p1.y), IM_COL32(255, 100, 100, 180));
        
        // Draw playhead (red line if playing)
        if (isPlaying)
        {
            double curTime = readPosition / juce::jmax(1.0, getSampleRate());
            float playX = canvas_p0.x + (float)(curTime / totalDur) * canvasWidth;
            dl->AddLine(ImVec2(playX, canvas_p0.y), ImVec2(playX, canvas_p1.y), IM_COL32(255, 50, 50, 255), 2.0f);
        }
        
        // Border
        dl->AddRect(canvas_p0, canvas_p1, IM_COL32(100, 100, 100, 255));
        
        // Interaction (trim handles + scrubbing)
        ImGui::SetCursorScreenPos(canvas_p0);
        ImGui::InvisibleButton("##timeline", ImVec2(canvasWidth, canvasHeight));
        
        if (ImGui::IsItemActive() && ImGui::IsMouseDragging(0))
        {
            float mouseX = ImGui::GetIO().MousePos.x;
            float normalizedX = (mouseX - canvas_p0.x) / canvasWidth;
            normalizedX = juce::jlimit(0.0f, 1.0f, normalizedX);
            double t = normalizedX * totalDur;
            
            // Determine what to drag
            if (std::abs(mouseX - trimX0) < 10.0f && !draggingTrimEnd && !draggingScrub)
                draggingTrimStart = true;
            else if (std::abs(mouseX - trimX1) < 10.0f && !draggingTrimStart && !draggingScrub)
                draggingTrimEnd = true;
            else if (!draggingTrimStart && !draggingTrimEnd)
                draggingScrub = true;
            
            if (draggingTrimStart)
            {
                // Update parameter directly for bidirectional sync
                float newTrimStartNorm = (float)juce::jlimit(0.0, (double)trimEndNorm, t / totalDur);
                auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimStart"));
                if (param) param->setValueNotifyingHost(newTrimStartNorm);
            }
            else if (draggingTrimEnd)
            {
                // Update parameter directly for bidirectional sync
                float newTrimEndNorm = (float)juce::jlimit((double)trimStartNorm, 1.0, t / totalDur);
                auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimEnd"));
                if (param) param->setValueNotifyingHost(newTrimEndNorm);
            }
            else if (draggingScrub)
            {
                const juce::ScopedLock lock2(audioBufferLock);
                readPosition = juce::jlimit(0.0, (double)(selectedClip->audio.getNumSamples() - 1), t * getSampleRate());
            }
        }
        
        if (ImGui::IsItemDeactivated())
        {
            draggingTrimStart = draggingTrimEnd = draggingScrub = false;
        onModificationEnded();
        }
        
        ImGui::Dummy(ImVec2(canvasWidth, canvasHeight));
    }
    
    // Action buttons (compact layout, no extra spacing)
    bool isBusy = (status == Status::Synthesizing);
    if (isBusy)
        ImGui::BeginDisabled();
        
    if (ImGui::Button("BAKE", ImVec2(itemWidth * 0.30f, 18)))
    {
        DBG("[TTS Performer] BAKE AUDIO button clicked!");
        juce::Logger::writeToLog("[TTS Performer] BAKE AUDIO button clicked!");
        
        juce::String textToSpeak = juce::String(uiTextBuffer);
        if (textToSpeak.isNotEmpty())
        {
            startSynthesis(textToSpeak);
        }
    }
    
    if (isBusy)
        ImGui::EndDisabled();

    // Live input telemetry block (compact, minimal spacing)
    
    // Current clip and playback state
    if (selectedClip)
    {
        juce::String clipInfo = "Clip: " + selectedClip->name + " (" + juce::String(selectedClip->durationSeconds, 2) + "s, " + 
                                juce::String(selectedClip->timings.size()) + " words)";
        ImGui::TextColored(ImVec4(0.7f, 1.0f, 0.7f, 1.0f), "%s", clipInfo.toRawUTF8());
        ImGui::Text("Playback: %s | Word: %d/%d", 
            isPlaying ? "PLAYING" : "STOPPED",
            currentWordIndex + 1, (int) getActiveTimings().size());
    }
    else
    {
        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "No clip selected");
    }
}

void TTSPerformerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Helper lambda to draw a pin by its virtual parameter ID
    auto drawInputPin = [&](const char* paramId, const char* label) {
        int busIdx, chanInBus;
        if (getParamRouting(paramId, busIdx, chanInBus))
        {
            helpers.drawAudioInputPin(label, getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        }
    };

    // Helper lambda for parallel pins
    auto drawParallelPin = [&](const char* inParamId, const char* inLabel, const char* outLabel, int outChannel) {
        int busIdx = -1, chanInBus = -1;
        int inChannel = -1;
        if (inParamId != nullptr && getParamRouting(inParamId, busIdx, chanInBus))
        {
            inChannel = getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus);
        }
        helpers.drawParallelPins(inLabel, inChannel, outLabel, outChannel);
    };

    // --- Draw Global Inputs & Outputs ---
    drawParallelPin(paramIdRateMod, "Rate Mod", "Audio", 0);
    drawParallelPin(paramIdGateMod, "Gate Mod", "Word Gate", 1);
    drawParallelPin(paramIdTriggerMod, "Trigger", "EOP Gate", 2);
    drawInputPin(paramIdResetMod, "Reset"); // No parallel output
    drawInputPin(paramIdRandomizeMod, "Randomize Trig"); // No parallel output

    ImGui::Spacing(); // Add visual separation

    // --- Draw Playback Control Inputs ---
    drawInputPin(paramIdTrimStartMod, "Trim Start Mod");
    drawInputPin(paramIdTrimEndMod, "Trim End Mod");
    drawInputPin(paramIdSpeedMod, "Speed Mod");
    drawInputPin(paramIdPitchMod, "Pitch Mod");

    // --- Draw Per-Word Inputs & Outputs (Dynamically) ---
    int wordCount = selectedClip ? juce::jmin((int)selectedClip->timings.size(), 16) : 0;
    if (wordCount > 0)
    {
        ImGui::Spacing(); // Add visual separation
    }

    for (int i = 0; i < wordCount; ++i)
    {
        juce::String word = selectedClip->timings[i].word.substring(0, 8);

        juce::String inParamId = "word" + juce::String(i + 1) + "_trig_mod";
        juce::String inLabel = "Word " + juce::String(i + 1) + " Trig";

        juce::String outGateLabel = word + " Gate";
        juce::String outTrigLabel = word + " Trig";

        // Draw Word Trigger input on the left, and its corresponding Gate output on the right
        drawParallelPin(inParamId.toRawUTF8(), inLabel.toRawUTF8(), outGateLabel.toRawUTF8(), 3 + i);

        // Draw the per-word Trigger output on its own line below
        drawParallelPin(nullptr, nullptr, outTrigLabel.toRawUTF8(), 19 + i);
    }
}
#endif

// --- Timing Data Access Method Implementations ---

bool TTSPerformerModuleProcessor::isWordActiveAtTime(double timeInSeconds) const
{
    const juce::ScopedLock lock(audioBufferLock);
    
    const auto& timingsA = getActiveTimings();
    for (const auto& word : timingsA)
    {
        if (timeInSeconds >= word.startTimeSeconds && timeInSeconds <= word.endTimeSeconds)
        {
            return true;
        }
    }
    return false;
}

const WordTiming* TTSPerformerModuleProcessor::getCurrentWordAtTime(double timeInSeconds) const
{
    const juce::ScopedLock lock(audioBufferLock);
    
    const auto& timingsB = getActiveTimings();
    for (const auto& word : timingsB)
    {
        if (timeInSeconds >= word.startTimeSeconds && timeInSeconds <= word.endTimeSeconds)
        {
            return &word;
        }
    }
    return nullptr;
}

const PhonemeTiming* TTSPerformerModuleProcessor::getCurrentPhonemeAtTime(double timeInSeconds) const
{
    const juce::ScopedLock lock(audioBufferLock);
    
    const auto& timingsC = getActiveTimings();
    for (const auto& word : timingsC)
    {
        for (const auto& phoneme : word.phonemes)
        {
            if (timeInSeconds >= phoneme.startTimeSeconds && timeInSeconds <= phoneme.endTimeSeconds)
            {
                return &phoneme;
            }
        }
    }
    return nullptr;
}

// --- Phase 3: Sequencer Helper Method Implementations ---

// processSequencerInputs method removed - functionality integrated into processBlock

void TTSPerformerModuleProcessor::advanceSequencerStep()
{
    // Simplified: just advance word index (used by rate-based auto-advance in processBlock)
    // This function is now a stub since auto-advance logic is in processBlock
    currentWordIndex++;
    if (selectedClip && currentWordIndex >= (int)selectedClip->timings.size())
    {
        currentWordIndex = 0; // Always loop
    }
}

void TTSPerformerModuleProcessor::resetSequencer()
{
    currentWordIndex = 0;
    currentPhonemeIndex = 0;
    sequencerStartTime = 0.0;
    sequencerActive = false;
    
    DBG("[TTS Performer] Sequencer reset to beginning");
}

int TTSPerformerModuleProcessor::getSequencerCurrentIndex() const
{
    // Simplified: just return current word index
    return currentWordIndex;
}

double TTSPerformerModuleProcessor::getSequencerCurrentDuration() const
{
    const auto& timingsE = getActiveTimings();
    if (timingsE.empty()) return 0.0;
    if (currentWordIndex >= (int)timingsE.size()) return 0.0;
    
    const auto& currentWord = timingsE[(size_t) currentWordIndex];
    return currentWord.durationSeconds;
}

// processSequencerPlayback method removed - functionality integrated into processBlock

// processNormalPlayback method removed - functionality integrated into processBlock

void TTSPerformerModuleProcessor::handleLoopMode()
{
    // Stub - loop mode is now handled by loopParam (bool) in processBlock
}

// --- Phase 4: SynthesisThread Cache Management Implementation ---

void TTSPerformerModuleProcessor::SynthesisThread::clearVoiceCache()
{
    const juce::ScopedLock lock(cacheLock);
    voiceCache.clear();
    DBG("[TTS Performer] Voice cache cleared - " + juce::String(voiceCache.size()) + " voices removed");
}

void TTSPerformerModuleProcessor::SynthesisThread::setMaxCachedVoices(int maxVoices)
{
    const juce::ScopedLock lock(cacheLock);
    maxCachedVoices = juce::jlimit(1, 10, maxVoices);
    DBG("[TTS Performer] Max cached voices set to: " + juce::String(maxCachedVoices));
    
    // Remove excess voices if needed
    while (voiceCache.size() > maxCachedVoices)
    {
        removeOldestVoice();
    }
}

void TTSPerformerModuleProcessor::SynthesisThread::updateMaxCachedVoicesFromParameter()
{
    // Stub - max cached voices is now a fixed constant (no UI control)
}

int TTSPerformerModuleProcessor::SynthesisThread::getCacheSize() const
{
    const juce::ScopedLock lock(cacheLock);
    return (int)voiceCache.size();
}

bool TTSPerformerModuleProcessor::SynthesisThread::isVoiceCached(const juce::String& modelPath) const
{
    const juce::ScopedLock lock(cacheLock);
    juce::String key = getCacheKey(modelPath);
    auto it = voiceCache.find(key);
    return (it != voiceCache.end() && it->second.isValid);
}

void TTSPerformerModuleProcessor::SynthesisThread::addVoiceToCache(const juce::String& modelPath, const juce::String& configPath)
{
    const juce::ScopedLock lock(cacheLock);
    juce::String key = getCacheKey(modelPath);
    
    // Check if we need to remove old voices
    while (voiceCache.size() >= maxCachedVoices)
    {
        removeOldestVoice();
    }
    
    // Add new voice to cache
    voiceCache[key] = CachedVoice(modelPath, configPath);
    
    DBG("[TTS Performer] Voice added to cache: " + modelPath + " (Cache size: " + juce::String(voiceCache.size()) + ")");
}

void TTSPerformerModuleProcessor::SynthesisThread::removeOldestVoice()
{
    if (voiceCache.empty()) return;
    
    auto oldest = voiceCache.begin();
    for (auto it = voiceCache.begin(); it != voiceCache.end(); ++it)
    {
        if (it->second.lastUsed < oldest->second.lastUsed)
        {
            oldest = it;
        }
    }
    
    DBG("[TTS Performer] Removing oldest voice from cache: " + oldest->first);
    voiceCache.erase(oldest);
}

juce::String TTSPerformerModuleProcessor::SynthesisThread::getCacheKey(const juce::String& modelPath) const
{
    // Use the filename as the cache key (without path)
    return juce::File(modelPath).getFileNameWithoutExtension();
}

#if defined(PRESET_CREATOR_UI)
// --- Phase 5: Waveform Visualization Implementation ---

void TTSPerformerModuleProcessor::drawWaveform(void* drawListPtr, const ImVec2& pos, const ImVec2& size)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    if (bakedAudioBuffer.getNumSamples() == 0) return;
    
    const int numSamples = bakedAudioBuffer.getNumSamples();
    const float* audioData = bakedAudioBuffer.getReadPointer(0);
    
    // Calculate samples per pixel for downsampling
    const int samplesPerPixel = juce::jmax(1, numSamples / (int)size.x);
    const int numPixels = (int)size.x;
    
    // Center line for zero crossing
    const float centerY = pos.y + size.y * 0.5f;
    
    // Draw waveform as connected lines
    std::vector<ImVec2> waveformPoints;
    waveformPoints.reserve(numPixels * 2);
    
    for (int x = 0; x < numPixels; ++x)
    {
        // Calculate sample range for this pixel
        const int startSample = x * samplesPerPixel;
        const int endSample = juce::jmin(startSample + samplesPerPixel, numSamples);
        
        // Find min/max in this range
        float minVal = 0.0f;
        float maxVal = 0.0f;
        
        for (int s = startSample; s < endSample; ++s)
        {
            const float sample = audioData[s];
            minVal = juce::jmin(minVal, sample);
            maxVal = juce::jmax(maxVal, sample);
        }
        
        // Convert to screen coordinates
        const float screenX = pos.x + x;
        const float minY = centerY - (minVal * size.y * 0.5f);
        const float maxY = centerY - (maxVal * size.y * 0.5f);
        
        // Add points for min and max
        waveformPoints.push_back(ImVec2(screenX, minY));
        waveformPoints.push_back(ImVec2(screenX, maxY));
    }
    
    // Draw the waveform
    if (waveformPoints.size() >= 2)
    {
        // Draw as a filled shape for better visibility
        std::vector<ImVec2> fillPoints;
        fillPoints.reserve(waveformPoints.size() + 2);
        
        // Add bottom edge
        fillPoints.push_back(ImVec2(pos.x, centerY));
        
        // Add waveform points
        for (size_t i = 0; i < waveformPoints.size(); i += 2)
        {
            fillPoints.push_back(waveformPoints[i]); // min point
        }
        
        // Add top edge (reverse order)
        for (int i = (int)waveformPoints.size() - 1; i >= 1; i -= 2)
        {
            fillPoints.push_back(waveformPoints[i]); // max point
        }
        
        // Close the shape
        fillPoints.push_back(ImVec2(pos.x + size.x, centerY));
        
        // Draw filled waveform
        drawList->AddConvexPolyFilled(fillPoints.data(), (int)fillPoints.size(), 
                                     IM_COL32(100, 150, 255, 200)); // Blue with transparency
        
        // Draw center line
        drawList->AddLine(ImVec2(pos.x, centerY), 
                         ImVec2(pos.x + size.x, centerY), 
                         IM_COL32(100, 100, 100, 100), 1.0f);
        
        // Phase 5.2: Draw word and phoneme boundaries
        drawWordBoundaries(drawList, pos, size, numSamples, centerY);
    }
}

void TTSPerformerModuleProcessor::drawWordBoundaries(void* drawListPtr, const ImVec2& pos, const ImVec2& size, int numSamples, float centerY)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    const auto& timingsF = getActiveTimings();
    if (timingsF.empty() || numSamples == 0) return;
    
    // Calculate time per sample (assuming standard sample rate)
    const double sampleRate = getSampleRate();
    const double durationSeconds = numSamples / sampleRate;
    
    // Define colors for different words (cycle through a palette)
    const ImU32 wordColors[] = {
        IM_COL32(255, 100, 100, 120), // Red
        IM_COL32(100, 255, 100, 120), // Green  
        IM_COL32(100, 100, 255, 120), // Blue
        IM_COL32(255, 255, 100, 120), // Yellow
        IM_COL32(255, 100, 255, 120), // Magenta
        IM_COL32(100, 255, 255, 120), // Cyan
    };
    const int numColors = sizeof(wordColors) / sizeof(wordColors[0]);
    
    // Draw word boundaries
    for (size_t i = 0; i < timingsF.size(); ++i)
    {
        const auto& word = timingsF[i];
        
        // Calculate pixel positions for this word
        const float startX = pos.x + (word.startTimeSeconds / durationSeconds) * size.x;
        const float endX = pos.x + (word.endTimeSeconds / durationSeconds) * size.x;
        const float wordWidth = endX - startX;
        
        // Skip words that are too small to see
        if (wordWidth < 2.0f) continue;
        
        // Choose color for this word
        const ImU32 wordColor = wordColors[i % numColors];
        
        // Draw word background rectangle
        drawList->AddRectFilled(
            ImVec2(startX, pos.y + 2),
            ImVec2(endX, centerY - 2),
            wordColor
        );
        
        // Draw word border
        drawList->AddRect(
            ImVec2(startX, pos.y + 2),
            ImVec2(endX, centerY - 2),
            IM_COL32(255, 255, 255, 200),
            1.0f
        );
        
        // Draw word text if there's enough space
        if (wordWidth > 20.0f)
        {
            const char* wordText = word.word.toRawUTF8();
            const ImVec2 textSize = ImGui::CalcTextSize(wordText);
            
            // Center text horizontally and vertically in the word area
            const float textX = startX + (wordWidth - textSize.x) * 0.5f;
            const float textY = pos.y + 2 + (centerY - pos.y - 4 - textSize.y) * 0.5f;
            
            // Only draw text if it fits
            if (textX >= startX && textX + textSize.x <= endX)
            {
                drawList->AddText(ImVec2(textX, textY), IM_COL32(255, 255, 255, 255), wordText);
            }
        }
        
        // Phase 5.2: Draw phoneme boundaries within this word
        if (wordWidth > 40.0f && !word.phonemes.empty()) // Only if word is large enough
        {
            drawPhonemeBoundaries(drawList, pos, size, word, startX, wordWidth, centerY);
        }
    }
    
    // Phase 5.3: Draw playhead indicator
    drawPlayheadIndicator(drawList, pos, size, numSamples, centerY);
}

void TTSPerformerModuleProcessor::drawPhonemeBoundaries(void* drawListPtr, const ImVec2& pos, const ImVec2& size, const WordTiming& word, float wordStartX, float wordWidth, float centerY)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    if (word.phonemes.empty()) return;
    
    const double wordDuration = word.endTimeSeconds - word.startTimeSeconds;
    const ImU32 phonemeColor = IM_COL32(255, 255, 255, 60); // Semi-transparent white
    
    // Draw vertical lines for phoneme boundaries
    for (size_t i = 0; i < word.phonemes.size(); ++i)
    {
        const auto& phoneme = word.phonemes[i];
        
        // Calculate relative position within the word
        const double relativeStart = (phoneme.startTimeSeconds - word.startTimeSeconds) / wordDuration;
        const float phonemeX = wordStartX + relativeStart * wordWidth;
        
        // Draw vertical line for phoneme boundary
        drawList->AddLine(
            ImVec2(phonemeX, centerY - 10),
            ImVec2(phonemeX, centerY + 10),
            phonemeColor,
            1.0f
        );
        
        // Draw phoneme symbol if there's enough space
        if (wordWidth > 60.0f) // Only for larger words
        {
            const char* phonemeText = phoneme.phoneme.toRawUTF8();
            const ImVec2 textSize = ImGui::CalcTextSize(phonemeText);
            
            // Position phoneme text above the boundary line
            const float textX = phonemeX - textSize.x * 0.5f;
            const float textY = centerY - 15;
            
            // Only draw if text fits within the word bounds
            if (textX >= wordStartX && textX + textSize.x <= wordStartX + wordWidth)
            {
                drawList->AddText(ImVec2(textX, textY), IM_COL32(200, 200, 200, 180), phonemeText);
            }
        }
    }
}

void TTSPerformerModuleProcessor::drawPlayheadIndicator(void* drawListPtr, const ImVec2& pos, const ImVec2& size, int numSamples, float centerY)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    if (numSamples == 0 || !isPlaying) return;
    
    // Calculate playhead position in pixels
    const float playheadRatio = (float)readPosition / (float)numSamples;
    const float playheadX = pos.x + playheadRatio * size.x;
    
    // Only draw if playhead is within the visible area
    if (playheadX >= pos.x && playheadX <= pos.x + size.x)
    {
        // Draw main playhead line (bright yellow/orange)
        drawList->AddLine(
            ImVec2(playheadX, pos.y),
            ImVec2(playheadX, pos.y + size.y),
            IM_COL32(255, 200, 0, 255), // Bright yellow-orange
            2.0f // Thick line for visibility
        );
        
        // Draw playhead shadow for depth
        drawList->AddLine(
            ImVec2(playheadX - 1, pos.y),
            ImVec2(playheadX - 1, pos.y + size.y),
            IM_COL32(255, 255, 255, 100), // White shadow
            1.0f
        );
        
        // Draw playhead indicator triangle at the top
        const float triangleSize = 8.0f;
        const ImVec2 triangleTop(playheadX, pos.y - triangleSize);
        const ImVec2 triangleLeft(playheadX - triangleSize * 0.5f, pos.y);
        const ImVec2 triangleRight(playheadX + triangleSize * 0.5f, pos.y);
        
        drawList->AddTriangleFilled(triangleTop, triangleLeft, triangleRight, IM_COL32(255, 200, 0, 255));
        drawList->AddTriangle(triangleTop, triangleLeft, triangleRight, IM_COL32(255, 255, 255, 200), 1.0f);
        
        // Draw time indicator text above the playhead
        const double currentTimeSeconds = readPosition / getSampleRate();
        const juce::String timeText = juce::String::formatted("%.2fs", currentTimeSeconds);
        const char* timeCStr = timeText.toRawUTF8();
        const ImVec2 textSize = ImGui::CalcTextSize(timeCStr);
        
        // Position text above the triangle
        const float textX = playheadX - textSize.x * 0.5f;
        const float textY = pos.y - triangleSize - textSize.y - 4.0f;
        
        // Draw text background
        drawList->AddRectFilled(
            ImVec2(textX - 2, textY - 1),
            ImVec2(textX + textSize.x + 2, textY + textSize.y + 1),
            IM_COL32(0, 0, 0, 180) // Semi-transparent black background
        );
        
        // Draw time text
        drawList->AddText(ImVec2(textX, textY), IM_COL32(255, 255, 255, 255), timeCStr);
        
        // Phase 5.3: Highlight current word/phoneme based on playhead position
        highlightCurrentWord(drawList, pos, size, centerY, currentTimeSeconds);
    }
}

void TTSPerformerModuleProcessor::highlightCurrentWord(void* drawListPtr, const ImVec2& pos, const ImVec2& size, float centerY, double currentTimeSeconds)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    // Find the current word being played
    const auto& timingsG = getActiveTimings();
    for (size_t i = 0; i < timingsG.size(); ++i)
    {
        const auto& word = timingsG[i];
        
        if (currentTimeSeconds >= word.startTimeSeconds && currentTimeSeconds <= word.endTimeSeconds)
        {
            // Calculate word position
            const double durationSeconds = (double)bakedAudioBuffer.getNumSamples() / getSampleRate();
            const float startX = pos.x + (word.startTimeSeconds / durationSeconds) * size.x;
            const float endX = pos.x + (word.endTimeSeconds / durationSeconds) * size.x;
            
            // Draw highlight overlay for current word
            drawList->AddRectFilled(
                ImVec2(startX, pos.y),
                ImVec2(endX, pos.y + size.y),
                IM_COL32(255, 255, 0, 30) // Yellow highlight with low opacity
            );
            
            // Draw thicker border around current word
            drawList->AddRect(
                ImVec2(startX, pos.y),
                ImVec2(endX, pos.y + size.y),
                IM_COL32(255, 255, 0, 150), // Yellow border
                2.0f // Thick border
            );
            
            // Find current phoneme within the word
            for (const auto& phoneme : word.phonemes)
            {
                if (currentTimeSeconds >= phoneme.startTimeSeconds && currentTimeSeconds <= phoneme.endTimeSeconds)
                {
                    // Calculate phoneme position
                    const double wordDuration = word.endTimeSeconds - word.startTimeSeconds;
                    const double relativeStart = (phoneme.startTimeSeconds - word.startTimeSeconds) / wordDuration;
                    const double relativeEnd = (phoneme.endTimeSeconds - word.startTimeSeconds) / wordDuration;
                    
                    const float phonemeStartX = startX + relativeStart * (endX - startX);
                    const float phonemeEndX = startX + relativeEnd * (endX - startX);
                    
                    // Draw phoneme highlight
                    drawList->AddRectFilled(
                        ImVec2(phonemeStartX, centerY - 15),
                        ImVec2(phonemeEndX, centerY + 15),
                        IM_COL32(255, 255, 255, 40) // White highlight for phoneme
                    );
                    
                    break; // Only highlight the current phoneme
                }
            }
            break; // Only highlight the current word
        }
    }
}

bool TTSPerformerModuleProcessor::handleWaveformInteraction(const ImVec2& pos, const ImVec2& size, int numSamples)
{
    if (numSamples == 0) return false;
    
    // Get mouse position and check if it's over the waveform area
    const ImVec2 mousePos = ImGui::GetMousePos();
    const bool isMouseOverWaveform = (mousePos.x >= pos.x && mousePos.x <= pos.x + size.x &&
                                      mousePos.y >= pos.y && mousePos.y <= pos.y + size.y);
    
    // Track interaction state
    static bool isDragging = false;
    static bool wasPlayingBeforeDrag = false;
    
    // Handle mouse click and drag
    if (isMouseOverWaveform)
    {
        // Show hover cursor
        ImGui::SetMouseCursor(ImGuiMouseCursor_Hand);
        
        // Display hover tooltip with time information
        if (!isDragging && ImGui::IsMouseHoveringRect(pos, ImVec2(pos.x + size.x, pos.y + size.y)))
        {
            const float normalizedPos = (mousePos.x - pos.x) / size.x;
            const int hoverSample = (int)(normalizedPos * numSamples);
            const double hoverTime = (double)hoverSample / getSampleRate();
            
            // Find word at hover position
            const WordTiming* hoverWord = nullptr;
            const auto& timingsH = getActiveTimings();
            for (const auto& word : timingsH)
            {
                if (hoverTime >= word.startTimeSeconds && hoverTime <= word.endTimeSeconds)
                {
                    hoverWord = &word;
                    break;
                }
            }
            
            // Create tooltip text
            juce::String tooltipText = juce::String::formatted("Time: %.2fs", hoverTime);
            if (hoverWord != nullptr)
            {
                tooltipText += "\nWord: \"" + hoverWord->word + "\"";
            }
            
            ImGui::BeginTooltip();
            ImGui::TextUnformatted(tooltipText.toRawUTF8());
            ImGui::EndTooltip();
        }
        
        // Start dragging on mouse down
        if (ImGui::IsMouseClicked(0))
        {
            isDragging = true;
            wasPlayingBeforeDrag = isPlaying;
            
            // Pause playback during scrubbing
            if (isPlaying)
            {
                isPlaying = false;
            }
        }
    }
    
    // Handle dragging
    if (isDragging)
    {
        // Calculate new playback position based on mouse X
        const float normalizedPos = juce::jlimit(0.0f, 1.0f, (mousePos.x - pos.x) / size.x);
        const int newPosition = (int)(normalizedPos * numSamples);
        
        // Update the AUDIO playhead directly
        readPosition = (double)newPosition;
        
        // Release drag on mouse up
        if (ImGui::IsMouseReleased(0))
        {
            isDragging = false;
            
            // Resume playback if it was playing before
            if (wasPlayingBeforeDrag)
            {
                isPlaying = true;
            }
            
            return true; // Position was changed
        }
    }
    
    // Reset dragging if mouse is released outside
    if (!ImGui::IsMouseDown(0))
    {
        if (isDragging)
        {
            isDragging = false;
            
            // Resume playback if it was playing before
            if (wasPlayingBeforeDrag)
            {
                isPlaying = true;
            }
        }
    }
    
    return false;
}

#endif

================================================================================
FILE: juce\Source\audio\modules\TTSPerformerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include "../dsp/TimePitchProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <juce_core/juce_core.h>
// Forward declare ImGui types so Collider can include this header without ImGui
struct ImVec2;

// --- Timing Data Structures for Word and Phoneme Control ---
struct PhonemeTiming
{
    juce::String phoneme;        // The phoneme symbol (e.g., "AH", "T", "S")
    double startTimeSeconds;     // Start time in seconds
    double endTimeSeconds;       // End time in seconds
    double durationSeconds;      // Duration in seconds (calculated)
    
    PhonemeTiming() = default;
    PhonemeTiming(const juce::String& p, double start, double end) 
        : phoneme(p), startTimeSeconds(start), endTimeSeconds(end), durationSeconds(end - start) {}
};

struct WordTiming
{
    juce::String word;           // The word text (e.g., "Hello", "world")
    double startTimeSeconds;     // Start time in seconds
    double endTimeSeconds;       // End time in seconds
    double durationSeconds;      // Duration in seconds (calculated)
    std::vector<PhonemeTiming> phonemes;  // Phonemes within this word
    
    WordTiming() = default;
    WordTiming(const juce::String& w, double start, double end) 
        : word(w), startTimeSeconds(start), endTimeSeconds(end), durationSeconds(end - start) {}
};

class TTSPerformerModuleProcessor : public ModuleProcessor
{
public:
    TTSPerformerModuleProcessor();
    ~TTSPerformerModuleProcessor() override;

    const juce::String getName() const override { return "tts performer"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    
    void setTimingInfo(const TransportState& state) override;
    
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void getStateInformation(juce::MemoryBlock& destData) override;
    void setStateInformation(const void* data, int sizeInBytes) override;

    // Extra state for preset saving (selected clip persistence)
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

    void startSynthesis(const juce::String& text);
    void cancelSynthesis();
    
    // --- Timing Data Access Methods ---
    const std::vector<WordTiming>& getLastSynthesisTimings() const { return lastSynthesisTimings; }
    bool isWordActiveAtTime(double timeInSeconds) const;
    const WordTiming* getCurrentWordAtTime(double timeInSeconds) const;
    const PhonemeTiming* getCurrentPhonemeAtTime(double timeInSeconds) const;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

    // --- Phase 3: Sequencer Helper Methods ---
    void advanceSequencerStep();
    void resetSequencer();
    int getSequencerCurrentIndex() const;
    double getSequencerCurrentDuration() const;
    void handleLoopMode();

    // Cross-app helpers (exposed for both apps)
    juce::File resolveModelsBaseDir() const;
    juce::File resolveSelectedModelFile() const;
    bool loadVoicesFromMapFile(const juce::File& mapFile);
    void normalizeModelSelection();
    const std::vector<WordTiming>& getActiveTimings() const;
    int findFirstWordIndexAtOrAfter(double timeSec) const;
    int findLastWordIndexAtOrBefore(double timeSec) const;
    int findWordIndexForTime(float timeSeconds) const;
    void clampWordIndexToTrim();

    // --- Phase 5: Waveform Visualization Methods (UI-only) ---
#if defined(PRESET_CREATOR_UI)
    void drawWaveform(void* drawList, const ImVec2& pos, const ImVec2& size);
    void drawWordBoundaries(void* drawList, const ImVec2& pos, const ImVec2& size, int numSamples, float centerY);
    void drawPhonemeBoundaries(void* drawList, const ImVec2& pos, const ImVec2& size, const WordTiming& word, float wordStartX, float wordWidth, float centerY);
    void drawPlayheadIndicator(void* drawList, const ImVec2& pos, const ImVec2& size, int numSamples, float centerY);
    void highlightCurrentWord(void* drawList, const ImVec2& pos, const ImVec2& size, float centerY, double currentTimeSeconds);
    bool handleWaveformInteraction(const ImVec2& pos, const ImVec2& size, int numSamples);
#endif

    // Cross-app helpers (declared once)
    
    // --- Audio-based word detection for precise timing ---
    std::vector<WordTiming> detectWordsFromAudio(const juce::AudioBuffer<float>& audio, double sampleRate);

private:
    // Centralised channel map for all inputs (single input bus)
    struct ChannelMap
    {
        static constexpr int CH_RATE        = 0;
        static constexpr int CH_GATE        = 1;
        static constexpr int CH_TRIGGER     = 2;
        static constexpr int CH_RESET       = 3;
        static constexpr int CH_TRIM_START  = 4;
        static constexpr int CH_TRIM_END    = 5;
        static constexpr int CH_SPEED       = 6;
        static constexpr int CH_PITCH       = 7;
        static constexpr int CH_WORD_BASE   = 8; // Word 1..16 at 8..23
        static constexpr int wordChannel(int wordIndex /*0-based*/) { return CH_WORD_BASE + wordIndex; }
    };
    // --- Persistent Clip Model ---
    struct TTSClip
    {
        juce::String clipId;           // hash key (text+voice+params)
        juce::String name;             // user/display name (default: trimmed text)
        juce::String text;             // original text
        juce::String modelKey;         // voice/model identifier
        juce::AudioBuffer<float> audio; // mono audio
        double sampleRate { 48000.0 };
        double durationSeconds { 0.0 };
        std::vector<WordTiming> timings;
        std::chrono::steady_clock::time_point lastUsed { std::chrono::steady_clock::now() };
    };

    // Clip cache (memory) and selection
    std::map<juce::String, std::shared_ptr<TTSClip>> clipCache;
    juce::CriticalSection clipCacheLock;
    std::shared_ptr<TTSClip> selectedClip;
    int clipCacheMax { 16 };
    juce::String computeClipKey(const juce::String& text) const;
    void addClipToCache(const std::shared_ptr<TTSClip>& clip);
    std::shared_ptr<TTSClip> findClipInCache(const juce::String& key) const;
    void selectClipByKey(const juce::String& key);
    void loadClipsFromDisk();
    bool clipsLoadedFromDisk { false };
    // Disk persistence helpers
    juce::File getClipsRootDir() const;
    juce::String sanitizeForDir(const juce::String& text) const;
    void persistClipToDisk(const juce::String& text, const juce::File& modelFile,
                           const juce::AudioBuffer<float>& audioBuffer,
                           const juce::String& jsonContent);
    // UI helpers for clips
    void drawClipsPanel(float itemWidth);
    // Timeline interaction state (waveform handles)
    bool draggingTrimStart { false };
    bool draggingTrimEnd { false };
    bool draggingScrub { false };
    // Clip actions
    void playSelectedClipFromTrim();
    void stopPlayback();
    bool deleteSelectedClipFromDisk();
    bool renameSelectedClipOnDisk(const juce::String& newName);

    class SynthesisThread : public juce::Thread
    {
    public:
        SynthesisThread(TTSPerformerModuleProcessor& owner);
        ~SynthesisThread() override;
        void run() override;
        
        // --- Phase 4: Cache Management Methods ---
        void clearVoiceCache();
        void setMaxCachedVoices(int maxVoices);
        void updateMaxCachedVoicesFromParameter();
        int getCacheSize() const;
        bool isVoiceCached(const juce::String& modelPath) const;

    private:
        TTSPerformerModuleProcessor& owner;
        juce::File piperExecutable;
    public:
        juce::File currentModelFile;
        
        // --- Phase 4: Voice Cache System ---
        struct CachedVoice
        {
            juce::String modelPath;
            juce::String configPath;
            std::chrono::steady_clock::time_point lastUsed;
            bool isValid;
            
            CachedVoice() : lastUsed(std::chrono::steady_clock::now()), isValid(false) {}
            CachedVoice(const juce::String& model, const juce::String& config) 
                : modelPath(model), configPath(config), lastUsed(std::chrono::steady_clock::now()), isValid(true) {}
        };
        
        std::map<juce::String, CachedVoice> voiceCache;
        juce::CriticalSection cacheLock;
        int maxCachedVoices { 3 };
        
        // --- Phase 4: Cache Helper Methods ---
        void addVoiceToCache(const juce::String& modelPath, const juce::String& configPath);
        void removeOldestVoice();
        juce::String getCacheKey(const juce::String& modelPath) const;
    };

    // --- Audio Storage and Playback ---
    juce::AudioBuffer<float> bakedAudioBuffer;
    bool isPlaying { false };
    double phase { 0.0 }; // Phase accumulator for rate-based auto-advance
    bool lastTrigHigh { false }; // Trigger edge detection
    bool lastResetHigh { false }; // Reset edge detection
    bool lastRandomizeTriggerHigh { false }; // Randomize trigger edge detection
    std::array<int, 16> wordTriggerPending {}; // Per-word trigger pulse counters (1ms)
    std::array<bool, 16> lastWordTrigHigh {}; // Per-word trigger edge detection
    
    // --- Word and Phoneme Timing Data ---
    std::vector<WordTiming> lastSynthesisTimings;  // Protected by audioBufferLock

    // --- Phase 3: Sequencer State ---
    int currentWordIndex { 0 };           // Current word being played in sequencer mode
    int currentPhonemeIndex { 0 };        // Current phoneme being played in sequencer mode
    double sequencerStartTime { 0.0 };    // When the current word/phoneme started playing
    bool sequencerActive { false };       // Whether sequencer mode is currently active
    float lastStepTriggerValue { 0.0f };  // For detecting step trigger edges
    float lastResetTriggerValue { 0.0f }; // For detecting reset trigger edges
    bool lastPlaybackState { false };     // For EOP gate detection
    bool lastGateState { false };         // For detecting gate input edges
    int eopPulseSamplesRemaining { 0 };   // For short EOP gate pulses
    int lastClipIndexValue { -1 };        // For detecting clip index param changes


    // --- Text Input (Thread-Safe Queue) ---
    juce::AbstractFifo textFifo;
    std::vector<juce::String> textFifoBuffer;
    juce::CriticalSection textBufferLock;
    juce::CriticalSection messageLock;
    juce::CriticalSection audioBufferLock;

    // --- Status Tracking ---
    enum class Status { Idle, Synthesizing, Playing, Error };
    std::atomic<Status> currentStatus { Status::Idle };
    juce::String errorMessage;

    // --- APVTS and Parameters ---
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;
    
    // Core parameters
    std::atomic<float>* volumeParam { nullptr };
    std::atomic<float>* rateParam { nullptr }; // Rate in Hz for auto-advance
    std::atomic<float>* gateParam { nullptr }; // Gate/VCA control
    
    SynthesisThread synthesisThread;

    // --- DSP ---
    TimePitchProcessor timePitch;
    juce::HeapBlock<float> interleavedInput, interleavedOutput;
    int interleavedCapacityFrames { 0 };

    // --- Engine state (ported from SampleVoiceProcessor) ---
    double readPosition { 0.0 };            // fractional read position in samples
    double startSamplePos { 0.0 };          // trim start in samples
    double endSamplePos { -1.0 };           // trim end in samples (exclusive)

    // --- Rate step scheduler ---
    double stepAccumulatorSec { 0.0 };      // countdown timer for next step jump
    double lastRateForScheduler { -1.0 };   // detect rate changes for immediate reschedule

    // Track last applied time/pitch for RubberBand reset on change
    float lastEffectiveTime { -1.0f };
    float lastEffectivePitch { -10000.0f };

    // Small de-click ramp for RubberBand after hard jumps/param changes
    int rbFadeSamplesRemaining { 0 };
    int rbFadeSamplesTotal { 0 };

    // --- NEW: State for word-jump crossfading ---
    int crossfadeSamplesRemaining { 0 };
    int crossfadeSamplesTotal { 0 };
    double crossfadeStartPosition { 0.0 }; // The read position we are fading FROM
    double crossfadeEndPosition { 0.0 };   // The read position we are fading TO

    // --- UI helpers (bypass engine connectivity gating for live telemetry when UI knows a cable is connected) ---
#if defined(PRESET_CREATOR_UI)
    float getLiveNoGate(const juce::String& liveKey, float fallback) const;
#endif

    // Model selection registry (available in both apps)
    struct ModelEntry { juce::String language; juce::String locale; juce::String voice; juce::String quality; juce::String relativeOnnx; };
    mutable juce::CriticalSection modelLock;
    std::vector<ModelEntry> modelEntries;
    juce::String selectedLanguage { "en" };
    juce::String selectedLocale { "en_US" };
    juce::String selectedVoice { "lessac" };
    juce::String selectedQuality { "medium" };

#if defined(PRESET_CREATOR_UI)
    char uiTextBuffer[2048] { "Hello, modular world." };
    bool showDeleteConfirm { false };
    char renameBuffer[256] { "" };
    bool showRenamePopup { false };
    void refreshModelChoices();
#endif

    // Clip selection helpers
    int getNumCachedClips() const { return (int) clipCache.size(); }
    void selectClipByIndex(int index);
    juce::String selectedClipId; // persisted between sessions
    
    // Explicitly support any discrete channel layout for modular synthesis
    bool isBusesLayoutSupported(const BusesLayout& layouts) const override
    {
        // Accept any layout as long as we have at least the minimum channels
        if (layouts.getMainInputChannelSet().isDisabled())
            return false;
        if (layouts.getMainOutputChannelSet().isDisabled())
            return false;
        return true;
    }
    
private:
    // Virtual IDs for modulation inputs
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdGateMod = "gate_mod";
    static constexpr auto paramIdTriggerMod = "trigger_mod";
    static constexpr auto paramIdResetMod = "reset_mod";
    static constexpr auto paramIdRandomizeMod = "randomize_mod"; // <-- NEW
    static constexpr auto paramIdTrimStartMod = "trimStart_mod";
    static constexpr auto paramIdTrimEndMod = "trimEnd_mod";
    static constexpr auto paramIdSpeedMod = "speed_mod";
    static constexpr auto paramIdPitchMod = "pitch_mod";

    TransportState m_currentTransport;
    double lastScaledBeats_tts{ 0.0 };
    bool wasPlaying = false;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(TTSPerformerModuleProcessor);
};

================================================================================
FILE: juce\Source\audio\modules\ValueModuleProcessor.cpp
================================================================================


#include "ValueModuleProcessor.h"

ValueModuleProcessor::ValueModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withOutput("Out", juce::AudioChannelSet::discreteChannels(5), true)), // 5 outputs now (added CV Out)
      apvts(*this, nullptr, "ValueParams", createParameterLayout())
{
    valueParam = apvts.getRawParameterValue("value");
    cvMinParam = apvts.getRawParameterValue("cvMin");
    cvMaxParam = apvts.getRawParameterValue("cvMax");

    // Initialize value tooltips for all five outputs
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For the new CV Out
}

juce::AudioProcessorValueTreeState::ParameterLayout ValueModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>("value", "Value", -20000.0f, 20000.0f, 1.0f));
    
    // Add new CV range parameters
    params.push_back(std::make_unique<juce::AudioParameterFloat>("cvMin", "CV Min", 0.0f, 1.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("cvMax", "CV Max", 0.0f, 1.0f, 1.0f));
    
    return { params.begin(), params.end() };
}

void ValueModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    buffer.clear();

    const float rawValue = valueParam->load();
    auto* param = static_cast<juce::AudioParameterFloat*>(apvts.getParameter("value"));
    const float normalizedValue = param->getNormalisableRange().convertTo0to1(rawValue);
    
    // Calculate CV output value
    const float cvMin = cvMinParam->load();
    const float cvMax = cvMaxParam->load();
    const float cvOutputValue = juce::jmap(normalizedValue, cvMin, cvMax);

    auto* outRaw = buffer.getWritePointer(0);
    auto* outNorm = buffer.getWritePointer(1);
    auto* outInv = buffer.getWritePointer(2);
    auto* outInt = buffer.getWritePointer(3);
    auto* outCV = buffer.getWritePointer(4); // Get pointer for new output

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        outRaw[i] = rawValue;
        outNorm[i] = normalizedValue;
        outInv[i] = -rawValue;
        outInt[i] = std::round(rawValue);
        outCV[i] = cvOutputValue; // Write to the new output
    }

    // Update tooltips
    if (lastOutputValues.size() >= 5)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outRaw[buffer.getNumSamples() - 1]);
        if (lastOutputValues[1]) lastOutputValues[1]->store(outNorm[buffer.getNumSamples() - 1]);
        if (lastOutputValues[2]) lastOutputValues[2]->store(outInv[buffer.getNumSamples() - 1]);
        if (lastOutputValues[3]) lastOutputValues[3]->store(outInt[buffer.getNumSamples() - 1]);
        if (lastOutputValues[4]) lastOutputValues[4]->store(outCV[buffer.getNumSamples() - 1]); // Update new tooltip
    }
}


================================================================================
FILE: juce\Source\audio\modules\ValueModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class ValueModuleProcessor : public ModuleProcessor
{
public:
    ValueModuleProcessor();
    ~ValueModuleProcessor() override = default;

    const juce::String getName() const override { return "value"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override {}
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Override to explicitly state this module has no modulatable inputs
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override
    {
        // This module has no modulatable inputs - it's a source-only module.
        // Always return false to prevent undefined behavior in the modulation system.
        juce::ignoreUnused(paramId, outBusIndex, outChannelIndexInBus);
        return false;
    }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("value"));
        if (!p) return;

        float currentValue = *p;

        ImGui::PushItemWidth(itemWidth);
        // Compact draggable number field without visible label
        if (ImGui::DragFloat("##value_drag", &currentValue, 0.01f, p->range.start, p->range.end, "%.4f"))
        {
            *p = currentValue;
        }
        if (ImGui::IsItemDeactivatedAfterEdit())
        {
            onModificationEnded();
        }
        ImGui::PopItemWidth();

        // New Time-Based, Exponential Mouse Wheel Logic
        if (ImGui::IsItemHovered())
        {
            const float wheel = ImGui::GetIO().MouseWheel;
            if (wheel != 0.0f)
            {
                const double currentTime = ImGui::GetTime();
                const double timeDelta = currentTime - lastScrollTime;

                // 1. If user paused for > 0.2s, reset momentum
                if (timeDelta > 0.2)
                {
                    scrollMomentum = 1.0f;
                }

                // 2. Define the smallest step for precision
                const float baseStep = 0.01f;
                
                // 3. Calculate the final step using the momentum
                float finalStep = baseStep * scrollMomentum;

                // 4. Update the value
                float newValue = currentValue + (wheel > 0.0f ? finalStep : -finalStep);
                
                // Snap to the baseStep to keep numbers clean
                newValue = std::round(newValue / baseStep) * baseStep;

                // 5. Increase momentum for the *next* scroll event (exponential)
                // This makes continuous scrolling accelerate.
                scrollMomentum *= 1.08f;
                scrollMomentum = std::min(scrollMomentum, 2000.0f); // Cap momentum to prevent runaway

                // 6. Update the parameter and timestamp
                *p = juce::jlimit(p->range.start, p->range.end, newValue);
                lastScrollTime = currentTime;
            }
        }
        
        // CV Output Range Controls (compact layout)
        ImGui::Text("CV Out Range (0-1)");
        
        float cvMin = cvMinParam->load();
        float cvMax = cvMaxParam->load();
        
        ImGui::PushItemWidth(itemWidth * 0.45f); // Make sliders take up half the width each
        if (ImGui::SliderFloat("##cv_min", &cvMin, 0.0f, 1.0f, "Min: %.2f"))
        {
            *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("cvMin")) = cvMin;
            onModificationEnded();
        }
        ImGui::SameLine();
        if (ImGui::SliderFloat("##cv_max", &cvMax, 0.0f, 1.0f, "Max: %.2f"))
        {
            *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("cvMax")) = cvMax;
            onModificationEnded();
        }
        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Draw the five output pins for the Value module
        helpers.drawAudioOutputPin("Raw", 0);
        helpers.drawAudioOutputPin("Normalized", 1);
        helpers.drawAudioOutputPin("Inverted", 2);
        helpers.drawAudioOutputPin("Integer", 3);
        helpers.drawAudioOutputPin("CV Out", 4);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        // Value has no audio inputs
        return juce::String("In ") + juce::String(channel + 1);
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Raw";
            case 1: return "Normalized";
            case 2: return "Inverted";
            case 3: return "Integer";
            case 4: return "CV Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* valueParam { nullptr };
    std::atomic<float>* cvMinParam { nullptr };
    std::atomic<float>* cvMaxParam { nullptr };

    // Add these two state variables for the new scroll logic
    double lastScrollTime { 0.0 };
    float scrollMomentum { 1.0f };
};


================================================================================
FILE: juce\Source\audio\modules\VCAModuleProcessor.cpp
================================================================================


#include "VCAModuleProcessor.h"

VCAModuleProcessor::VCAModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // 0-1: Audio In, 2: Gain Mod
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "VCAParams", createParameterLayout())
{
    gainParam = apvts.getRawParameterValue("gain");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout VCAModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gain", "Gain",
        juce::NormalisableRange<float>(-60.0f, 6.0f, 0.1f), 0.0f));

    return { params.begin(), params.end() };
}

void VCAModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32)samplesPerBlock, 2 };
    gain.prepare(spec);
}

void VCAModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // Read CV from unified input bus (if connected)
    float gainModCV = 1.0f; // Default to no modulation
    
    if (isParamInputConnected("gain"))
    {
        const auto& inBus = getBusBuffer(buffer, true, 0);
        if (inBus.getNumChannels() > 2)
            gainModCV = inBus.getReadPointer(2)[0]; // Read first sample from channel 2
    }
    
    // Process sample by sample to apply modulation
    for (int channel = 0; channel < buffer.getNumChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer(channel);
        for (int i = 0; i < buffer.getNumSamples(); ++i)
        {
            // Get base gain from the dB parameter
            const float gainFromParam = juce::Decibels::decibelsToGain(gainParam != nullptr ? gainParam->load() : 0.0f);
            
            // Use CV modulation (0-1 range)
            const float finalGain = gainFromParam * gainModCV;
            channelData[i] *= finalGain;
        }
    }
    
    // Store live modulated values for UI display
    const float gainFromParam = juce::Decibels::decibelsToGain(gainParam != nullptr ? gainParam->load() : 0.0f);
    const float finalGainDb = isParamInputConnected("gain") ? 
        juce::Decibels::gainToDecibels(gainFromParam * gainModCV) : 
        (gainParam != nullptr ? gainParam->load() : 0.0f);
    setLiveParamValue("gain_live", finalGainDb);

    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(buffer.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(buffer.getSample(1, buffer.getNumSamples() - 1));
    }
}

// Parameter bus contract implementation
bool VCAModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "gain") { outChannelIndexInBus = 2; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\VCAModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class VCAModuleProcessor : public ModuleProcessor
{
public:
    VCAModuleProcessor();
    ~VCAModuleProcessor() override = default;

    const juce::String getName() const override { return "vca"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float gainDb = gainParam != nullptr ? gainParam->load() : 0.0f;
        ImGui::PushItemWidth (itemWidth);
        
        bool isGainModulated = isParamModulated("gain");
        if (isGainModulated) {
            gainDb = getLiveParamValueFor("gain", "gain_live", gainDb);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Gain dB", &gainDb, -60.0f, 6.0f)) if (!isGainModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gain"))) *p = gainDb;
        if (!isGainModulated) adjustParamOnWheel(ap.getParameter("gain"), "gain", gainDb);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isGainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);
        
        int busIdx, chanInBus;
        if (getParamRouting("gain", busIdx, chanInBus))
            helpers.drawAudioInputPin("Gain Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
            
        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Gain Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Gain<float> gain;

    std::atomic<float>* gainParam = nullptr;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (VCAModuleProcessor)
};




================================================================================
FILE: juce\Source\audio\modules\VCFModuleProcessor.cpp
================================================================================


#include "VCFModuleProcessor.h"

VCFModuleProcessor::VCFModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(5), true) // ch0-1 audio, ch2-4 mods
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "VCFParams", createParameterLayout())
{
    cutoffParam = apvts.getRawParameterValue(paramIdCutoff);
    resonanceParam = apvts.getRawParameterValue(paramIdResonance);
    typeParam = apvts.getRawParameterValue(paramIdType);
    typeModParam = apvts.getRawParameterValue(paramIdTypeMod);
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
    
    // Initialize smoothed values
    cutoffSm.reset(1000.0f);
    resonanceSm.reset(1.0f);
}

juce::AudioProcessorValueTreeState::ParameterLayout VCFModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdCutoff, "Cutoff",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 1000.0f));
    
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdResonance, "Resonance",
        juce::NormalisableRange<float>(0.1f, 10.0f, 0.01f), 1.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdType, "Type",
        juce::StringArray { "Low-pass", "High-pass", "Band-pass" }, 0));
    
    // Add modulation parameter for filter type
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdTypeMod, "Type Mod", 0.0f, 1.0f, 0.0f));

    return { params.begin(), params.end() };
}

void VCFModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32)samplesPerBlock, 2 };
    filterA.prepare(spec);
    filterB.prepare(spec);
    
    // Set smoothing time for parameters (10ms)
    cutoffSm.reset(sampleRate, 0.01);
    resonanceSm.reset(sampleRate, 0.01);
}

void VCFModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    // Get buses
    auto inBus  = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);
    // Start from dry input like Reverb: copy in -> out, then filter in place
    {
        const int nCh = juce::jmin(inBus.getNumChannels(), outBus.getNumChannels());
        const int nSm = juce::jmin(inBus.getNumSamples(),  outBus.getNumSamples());
        for (int ch = 0; ch < nCh; ++ch)
            outBus.copyFrom(ch, 0, inBus, ch, 0, nSm);
    }
    
    // PER-SAMPLE FIX: Get pointers to modulation CV inputs, if they are connected
    const bool isCutoffMod = isParamInputConnected(paramIdCutoff);
    const bool isResoMod = isParamInputConnected(paramIdResonance);
    const bool isTypeMod = isParamInputConnected(paramIdTypeMod);

    const float* cutoffCV = isCutoffMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* resoCV = isResoMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* typeCV = isTypeMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    // Get base parameter values ONCE
    const float baseCutoff = cutoffParam != nullptr ? cutoffParam->load() : 1000.0f;
    const float baseResonance = resonanceParam != nullptr ? resonanceParam->load() : 1.0f;
    const int baseType = static_cast<int>(typeParam != nullptr ? typeParam->load() : 0);

    // Create a temporary buffer for single-sample processing (always 2 channels)
    juce::AudioBuffer<float> sampleBuffer(2, 1);
    juce::dsp::AudioBlock<float> block(sampleBuffer);
    juce::dsp::ProcessContextReplacing<float> context(block);
    // Ensure initial filter types
    configureFilterForType(filterA, activeType);
    configureFilterForType(filterB, activeIsA ? activeType : pendingType);

    // PER-SAMPLE FIX: Process each sample individually to respond to changing modulation
    const int numSamples = buffer.getNumSamples();
    for (int i = 0; i < numSamples; ++i)
    {
        // --- Calculate effective parameters FOR THIS SAMPLE ---
        float cutoff = baseCutoff;
        if (isCutoffMod && cutoffCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, cutoffCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base cutoff value
            const float octaveRange = 4.0f; // CV can modulate +/- 4 octaves
            const float octaveOffset = (cv - 0.5f) * octaveRange; // Center around 0, range [-2, +2] octaves
            cutoff = baseCutoff * std::pow(2.0f, octaveOffset);
            cutoff = juce::jlimit(20.0f, 20000.0f, cutoff);
        }
        
        // Apply smoothing to cutoff to prevent zipper noise
        cutoffSm.setTargetValue(cutoff);
        cutoff = cutoffSm.getNextValue();

        float resonance = baseResonance;
        if (isResoMod && resoCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, resoCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base resonance value
            const float resoRange = 2.0f; // CV can modulate resonance by +/- 2 units
            const float resoOffset = (cv - 0.5f) * resoRange; // Center around 0
            resonance = baseResonance + resoOffset;
            resonance = juce::jlimit(0.1f, 10.0f, resonance);
        }
        
        // Apply smoothing to resonance to prevent zipper noise
        resonanceSm.setTargetValue(resonance);
        resonance = resonanceSm.getNextValue();

        int type = baseType;
        if (isTypeMod && typeCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, typeCV[i]);
            int numChoices = 3;
            int modChoice = static_cast<int>(std::floor(cv * numChoices));
            type = (baseType + modChoice) % numChoices;
        }

        // --- Set filter state FOR THIS SAMPLE ---
        // Handle type change with short crossfade between two filter instances
        if (type != activeType && typeCrossfadeRemaining == 0)
        {
            pendingType = type;
            typeCrossfadeRemaining = TYPE_CROSSFADE_SAMPLES;
            // Configure the inactive filter to the new type
            if (activeIsA) configureFilterForType(filterB, pendingType);
            else           configureFilterForType(filterA, pendingType);
        }

        // Keep both filters set to same coeffs
        filterA.setCutoffFrequency(juce::jlimit(20.0f, 20000.0f, cutoff));
        filterA.setResonance(juce::jlimit(0.1f, 10.0f, resonance));
        filterB.setCutoffFrequency(juce::jlimit(20.0f, 20000.0f, cutoff));
        filterB.setResonance(juce::jlimit(0.1f, 10.0f, resonance));
        if ((i & 0x1F) == 0) // decimate telemetry writes
        {
            setLiveParamValue("cutoff_live", cutoff);
            setLiveParamValue("resonance_live", resonance);
            setLiveParamValue("type_live", (float) type);
        }

        // --- Read current output sample (dry) and process in place
        const float inL = outBus.getNumChannels() > 0 ? outBus.getSample(0, i) : 0.0f;
        const float inR = outBus.getNumChannels() > 1 ? outBus.getSample(1, i) : inL;
        sampleBuffer.setSample(0, 0, inL);
        sampleBuffer.setSample(1, 0, inR);

        // Process through both filters and fade if needed
        float yL = inL, yR = inR;
        {
            sampleBuffer.setSample(0, 0, inL);
            sampleBuffer.setSample(1, 0, inR);
            filterA.process(context);
            float aL = sampleBuffer.getSample(0, 0);
            float aR = sampleBuffer.getSample(1, 0);

            sampleBuffer.setSample(0, 0, inL);
            sampleBuffer.setSample(1, 0, inR);
            filterB.process(context);
            float bL = sampleBuffer.getSample(0, 0);
            float bR = sampleBuffer.getSample(1, 0);

            if (typeCrossfadeRemaining > 0)
            {
                const float t = 1.0f - (float) typeCrossfadeRemaining / (float) TYPE_CROSSFADE_SAMPLES;
                const float wA = activeIsA ? (1.0f - t) : t;
                const float wB = 1.0f - wA;
                yL = aL * wA + bL * wB;
                yR = aR * wA + bR * wB;
                --typeCrossfadeRemaining;
                if (typeCrossfadeRemaining == 0)
                {
                    // Switch active filter to the new type and reset states
                    activeIsA = !activeIsA;
                    activeType = pendingType;
                    filterA.reset();
                    filterB.reset();
                }
            }
            else
            {
                if (activeIsA) { yL = aL; yR = aR; }
                else           { yL = bL; yR = bR; }
            }
        }

        // --- Write filtered sample back to output bus
        if (outBus.getNumChannels() > 0) outBus.setSample(0, i, yL);
        if (outBus.getNumChannels() > 1) outBus.setSample(1, i, yR);
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getNumChannels() > 0 ? outBus.getSample(0, numSamples - 1) : 0.0f);
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getNumChannels() > 1 ? outBus.getSample(1, numSamples - 1) : 0.0f);
    }
}

// Parameter bus contract implementation
bool VCFModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All inputs are on bus 0
    if (paramId == paramIdCutoff)    { outChannelIndexInBus = 2; return true; } // Cutoff Mod
    if (paramId == paramIdResonance) { outChannelIndexInBus = 3; return true; } // Resonance Mod
    if (paramId == paramIdTypeMod)   { outChannelIndexInBus = 4; return true; } // Type Mod
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\VCFModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class VCFModuleProcessor : public ModuleProcessor
{
public:
    // Parameter ID constants
    static constexpr auto paramIdCutoff = "cutoff";
    static constexpr auto paramIdResonance = "resonance";
    static constexpr auto paramIdType = "type";
    static constexpr auto paramIdTypeMod = "type_mod";

    VCFModuleProcessor();
    ~VCFModuleProcessor() override = default;

    const juce::String getName() const override { return "vcf"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float cutoff = cutoffParam != nullptr ? cutoffParam->load() : 1000.0f;
        float q = resonanceParam != nullptr ? resonanceParam->load() : 1.0f;
        int ftype = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdType))) ftype = p->getIndex();

        ImGui::PushItemWidth (itemWidth);

        bool isCutoffModulated = isParamModulated(paramIdCutoff);
        if (isCutoffModulated) {
            cutoff = getLiveParamValueFor(paramIdCutoff, "cutoff_live", cutoff);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Cutoff", &cutoff, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic)) {
            if (!isCutoffModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdCutoff))) *p = cutoff;
            }
        }
        if (!isCutoffModulated) adjustParamOnWheel (ap.getParameter(paramIdCutoff), "cutoffHz", cutoff);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isCutoffModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        bool isResoModulated = isParamModulated(paramIdResonance);
        if (isResoModulated) {
            q = getLiveParamValueFor(paramIdResonance, "resonance_live", q);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Resonance", &q, 0.1f, 10.0f)) {
            if (!isResoModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdResonance))) *p = q;
            }
        }
        if (!isResoModulated) adjustParamOnWheel (ap.getParameter(paramIdResonance), "resonance", q);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isResoModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        bool isTypeModulated = isParamModulated(paramIdTypeMod);
        if (isTypeModulated) {
            ftype = static_cast<int>(getLiveParamValueFor(paramIdTypeMod, "type_live", static_cast<float>(ftype)));
            ImGui::BeginDisabled();
        }
        if (ImGui::Combo ("Type", &ftype, "Low-pass\0High-pass\0Band-pass\0\0")) {
            if (!isTypeModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdType))) *p = ftype;
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isTypeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);

        helpers.drawAudioInputPin("Cutoff Mod", 2);
        helpers.drawAudioInputPin("Resonance Mod", 3);
        helpers.drawAudioInputPin("Type Mod", 4);

        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Cutoff Mod";
            case 3: return "Resonance Mod";
            case 4: return "Type Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::StateVariableTPTFilter<float> filterA;
    juce::dsp::StateVariableTPTFilter<float> filterB;

    // Cached parameter pointers
    std::atomic<float>* cutoffParam = nullptr;
    std::atomic<float>* resonanceParam = nullptr;
    std::atomic<float>* typeParam = nullptr;
    std::atomic<float>* typeModParam = nullptr;
    
    // Smoothed values to prevent zipper noise
    juce::SmoothedValue<float> cutoffSm;
    juce::SmoothedValue<float> resonanceSm;

    // Type crossfade management
    bool activeIsA { true };
    int  activeType { 0 };
    int  pendingType { 0 };
    int  typeCrossfadeRemaining { 0 };
    static constexpr int TYPE_CROSSFADE_SAMPLES = 128; // short, click-free

    static inline void configureFilterForType(juce::dsp::StateVariableTPTFilter<float>& f, int type)
    {
        switch (type) {
            case 0: f.setType(juce::dsp::StateVariableTPTFilterType::lowpass); break;
            case 1: f.setType(juce::dsp::StateVariableTPTFilterType::highpass); break;
            default: f.setType(juce::dsp::StateVariableTPTFilterType::bandpass); break;
        }
    }

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (VCFModuleProcessor)
};




================================================================================
FILE: juce\Source\audio\modules\VCOModuleProcessor.cpp
================================================================================


#include "VCOModuleProcessor.h"

VCOModuleProcessor::VCOModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // ch0: Freq Mod, ch1: Wave Mod, ch2: Gate
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts (*this, nullptr, "VCOParams", createParameterLayout())
{
    frequencyParam = apvts.getRawParameterValue(paramIdFrequency);
    waveformParam  = apvts.getRawParameterValue(paramIdWaveform);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));

    oscillator.initialise([](float x) { return std::sin(x); }, 128);
}

juce::AudioProcessorValueTreeState::ParameterLayout VCOModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdFrequency, "Frequency",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));
    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdWaveform, "Waveform",
        juce::StringArray { "Sine", "Sawtooth", "Square" }, 0));
    return { params.begin(), params.end() };
}

void VCOModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 1 };
    oscillator.prepare(spec);
}

void VCOModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto outBus = getBusBuffer(buffer, false, 0);

    auto inBus = getBusBuffer(buffer, true, 0);
    const float* freqCV = (inBus.getNumChannels() > 0) ? inBus.getReadPointer(0) : nullptr;
    const float* waveCV = (inBus.getNumChannels() > 1) ? inBus.getReadPointer(1) : nullptr;
    const float* gateCV = (inBus.getNumChannels() > 2) ? inBus.getReadPointer(2) : nullptr;

    const bool freqActive = isParamInputConnected(paramIdFrequency);
    const bool waveActive = isParamInputConnected(paramIdWaveformMod);
    const bool gateActive = isParamInputConnected("gate_mod");

#if defined(PRESET_CREATOR_UI)
    {
        static int dbgCounter = 0;
        if ((dbgCounter++ & 0x3F) == 0)
        {
            const float s0 = (freqCV && buffer.getNumSamples() > 0) ? freqCV[0] : 0.0f;
            const float s1 = (freqCV && buffer.getNumSamples() > 1) ? freqCV[1] : 0.0f;
            juce::Logger::writeToLog(
                juce::String("[VCO] inCh=") + juce::String(inBus.getNumChannels()) +
                " freqRMS=" + juce::String((inBus.getNumChannels()>0)?inBus.getRMSLevel(0,0,buffer.getNumSamples()):0.0f) +
                " s0=" + juce::String(s0) + " s1=" + juce::String(s1));
        }
    }
#endif

    const float baseFrequency = frequencyParam != nullptr ? frequencyParam->load() : 440.0f;
    const int baseWaveform = (int) (waveformParam != nullptr ? waveformParam->load() : 0.0f);

    // Define smoothing factor for click-free gating
    constexpr float GATE_SMOOTHING_FACTOR = 0.002f;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        int waveform = baseWaveform;
        if (waveActive)
        {
            const float cvRaw = waveCV[i];
            const float cv01  = juce::jlimit(0.0f, 1.0f, (cvRaw + 1.0f) * 0.5f);
            waveform = (int) (cv01 * 2.99f);
        }

        float freq = baseFrequency;
        if (freqActive)
        {
            const float cvRaw = freqCV[i];
            // Normalize CV: prefer unipolar [0,1]; if outside, treat as bipolar [-1,1]
            const float cv01  = (cvRaw >= 0.0f && cvRaw <= 1.0f)
                                ? juce::jlimit(0.0f, 1.0f, cvRaw)
                                : juce::jlimit(0.0f, 1.0f, (cvRaw + 1.0f) * 0.5f);
            // Absolute mapping: 20 Hz .. 20000 Hz (log scale)
            constexpr float fMin = 20.0f;
            constexpr float fMax = 20000.0f;
            const float spanOct = std::log2(fMax / fMin);
            freq = fMin * std::pow(2.0f, cv01 * spanOct);
        }
        freq = juce::jlimit(20.0f, 20000.0f, freq);

        if (currentWaveform != waveform)
        {
            if (waveform == 0)      oscillator.initialise([](float x){ return std::sin(x); }, 128);
            else if (waveform == 1) oscillator.initialise([](float x){ return (x / juce::MathConstants<float>::pi); }, 128);
            else                    oscillator.initialise([](float x){ return x < 0.0f ? -1.0f : 1.0f; }, 128);
            currentWaveform = waveform;
        }

        oscillator.setFrequency(freq, false);
        const float s = oscillator.processSample(0.0f);
        
        // Apply gate with click-free smoothing
        float targetGate = gateActive ? gateCV[i] : 1.0f;
        // Treat near-zero magnitudes as zero to avoid flutter from denormals or noise
        if (std::abs(targetGate) < 1.0e-4f) targetGate = 0.0f;
        if (targetGate > 1.0f) targetGate = 1.0f;
        smoothedGate += (targetGate - smoothedGate) * GATE_SMOOTHING_FACTOR;
        const float finalSample = s * smoothedGate;
        
        outBus.setSample(0, i, finalSample);

        if ((i & 0x3F) == 0)
        {
            setLiveParamValue(paramIdFrequency, freq);
            setLiveParamValue(paramIdWaveform, (float) waveform);
        }
    }
    
    // Update inspector value for visualization (peak magnitude)
    updateOutputTelemetry(buffer);
}

bool VCOModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All inputs are on the same bus
    if (paramId == paramIdFrequency)   { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdWaveformMod) { outChannelIndexInBus = 1; return true; }
    if (paramId == "gate_mod")         { outChannelIndexInBus = 2; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\VCOModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class VCOModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdFrequency   = "frequency";
    static constexpr auto paramIdWaveform    = "waveform";
    // Virtual target only (no APVTS param needed) – used for routing to select waveform
    static constexpr auto paramIdWaveformMod = "waveform_mod";

    VCOModuleProcessor();
    ~VCOModuleProcessor() override = default;

    const juce::String getName() const override { return "vco"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float freq = frequencyParam != nullptr ? getLiveParamValueFor(paramIdFrequency, paramIdFrequency, frequencyParam->load()) : 440.0f;
        int wave = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWaveform))) wave = (int) getLiveParamValueFor(paramIdWaveformMod, paramIdWaveform, (float) p->getIndex());

        // Helper for tooltips (imgui_demo.cpp pattern)
        auto HelpMarker = [](const char* desc)
        {
            ImGui::SameLine();
            ImGui::TextDisabled("(?)");
            if (ImGui::BeginItemTooltip())
            {
                ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
                ImGui::TextUnformatted(desc);
                ImGui::PopTextWrapPos();
                ImGui::EndTooltip();
            }
        };

        ImGui::PushItemWidth (itemWidth);

        // === FREQUENCY SECTION ===
        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Oscillator Control");
        ImGui::Spacing();
        
        const bool freqMod = isParamModulated(paramIdFrequency);
        
        // Color-coded modulation indicator
        if (freqMod)
        {
            ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.4f, 0.8f, 1.0f, 1.0f)); // Cyan
            ImGui::PushStyleColor(ImGuiCol_SliderGrab, ImVec4(0.4f, 0.8f, 1.0f, 1.0f));
            ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.2f, 0.4f, 0.5f, 0.5f));
        }
        
        if (freqMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("##freq", &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic))
        {
            if (!freqMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = freq;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (!freqMod) adjustParamOnWheel (ap.getParameter(paramIdFrequency), "frequencyHz", freq);
        if (freqMod) ImGui::EndDisabled();
        
        ImGui::SameLine();
        if (freqMod)
        {
            ImGui::TextColored(ImVec4(0.4f, 0.8f, 1.0f, 1.0f), "Frequency (CV)");
            ImGui::PopStyleColor(3);
        }
        else
        {
            ImGui::Text("Frequency");
        }
        HelpMarker("Control voltage range: 0-1V = 20Hz to 20kHz (exponential)\nConnect LFO, Envelope, or Sequencer for modulation");

        // Note name display
        if (!freqMod)
        {
            auto getNoteFromFreq = [](float f) -> juce::String
            {
                if (f < 20.0f || f > 20000.0f) return "";
                float midiNote = 12.0f * std::log2(f / 440.0f) + 69.0f;
                int noteNum = (int)std::round(midiNote);
                const char* notes[] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};
                int octave = (noteNum / 12) - 1;
                return juce::String(notes[noteNum % 12]) + juce::String(octave);
            };
            ImGui::TextDisabled("Note: %s", getNoteFromFreq(freq).toRawUTF8());
        }

        // Quick preset buttons
        if (!freqMod)
        {
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(4, 4));
            float btnWidth = (itemWidth - 12) / 4.0f;
            
            if (ImGui::Button("A4", ImVec2(btnWidth, 0)))
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = 440.0f;
                onModificationEnded();
            }
            if (ImGui::IsItemHovered()) ImGui::SetTooltip("440 Hz (Concert A)");
            
            ImGui::SameLine();
            if (ImGui::Button("C4", ImVec2(btnWidth, 0)))
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = 261.63f;
                onModificationEnded();
            }
            if (ImGui::IsItemHovered()) ImGui::SetTooltip("261.63 Hz (Middle C)");
            
            ImGui::SameLine();
            if (ImGui::Button("A3", ImVec2(btnWidth, 0)))
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = 220.0f;
                onModificationEnded();
            }
            if (ImGui::IsItemHovered()) ImGui::SetTooltip("220 Hz");
            
            ImGui::SameLine();
            if (ImGui::Button("C3", ImVec2(btnWidth, 0)))
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = 130.81f;
                onModificationEnded();
            }
            if (ImGui::IsItemHovered()) ImGui::SetTooltip("130.81 Hz");
            
            ImGui::PopStyleVar();
        }

        ImGui::Spacing();
        ImGui::Spacing();

        // === WAVEFORM SECTION ===
        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Waveform");
        ImGui::Spacing();
        
        const bool waveMod = isParamModulated(paramIdWaveformMod);
        
        // Color-coded modulation indicator
        if (waveMod)
        {
            ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 0.8f, 0.4f, 1.0f)); // Orange
            ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.5f, 0.4f, 0.2f, 0.5f));
        }
        
        if (waveMod) ImGui::BeginDisabled();
        if (ImGui::Combo ("##wave", &wave, "Sine\0Sawtooth\0Square\0\0"))
        {
            if (!waveMod) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWaveform))) *p = wave;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (waveMod) ImGui::EndDisabled();
        
        ImGui::SameLine();
        if (waveMod)
        {
            ImGui::TextColored(ImVec4(1.0f, 0.8f, 0.4f, 1.0f), "Shape (CV)");
            ImGui::PopStyleColor(2);
        }
        else
        {
            ImGui::Text("Shape");
        }
        HelpMarker("Sine: Pure tone, no harmonics\nSawtooth: Bright, rich in harmonics\nSquare: Hollow, odd harmonics only\nCV modulation: 0V=Sine, 0.5V=Saw, 1V=Square");

        // Visual waveform preview (imgui_demo.cpp PlotLines pattern)
        float waveformPreview[128];
        for (int i = 0; i < 128; ++i)
        {
            float x = (float)i / 128.0f * 2.0f * juce::MathConstants<float>::pi;
            switch (wave)
            {
                case 0: waveformPreview[i] = std::sin(x); break; // Sine
                case 1: waveformPreview[i] = (x / juce::MathConstants<float>::pi) - 1.0f; break; // Sawtooth
                case 2: waveformPreview[i] = (x < juce::MathConstants<float>::pi) ? 1.0f : -1.0f; break; // Square
                default: waveformPreview[i] = 0.0f;
            }
        }
        ImGui::PlotLines("##wavepreview", waveformPreview, 128, 0, nullptr, -1.2f, 1.2f, ImVec2(itemWidth, 80));

        ImGui::Spacing();
        ImGui::Spacing();

        // === OUTPUT SECTION ===
        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Output");
        ImGui::Spacing();
        
        // Real-time output level meter
        float outputLevel = lastOutputValues[0]->load();
        float absLevel = std::abs(outputLevel);
        
        // Color-coded progress bar
        ImVec4 meterColor;
        if (absLevel < 0.7f)
            meterColor = ImVec4(0.2f, 0.8f, 0.2f, 1.0f); // Green
        else if (absLevel < 0.9f)
            meterColor = ImVec4(0.9f, 0.7f, 0.0f, 1.0f); // Yellow
        else
            meterColor = ImVec4(0.9f, 0.2f, 0.2f, 1.0f); // Red
        
        ImGui::PushStyleColor(ImGuiCol_PlotHistogram, meterColor);
        ImGui::ProgressBar(absLevel, ImVec2(itemWidth, 0), "");
        ImGui::PopStyleColor();
        
        ImGui::SameLine(0, 5);
        ImGui::Text("%.3f", outputLevel);
        HelpMarker("Live output signal level\nConnect to VCA, Filter, or Audio Out\nUse Gate input to control amplitude");

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Single input bus (0): ch0 Frequency Mod, ch1 Waveform Mod, ch2 Gate
        helpers.drawAudioInputPin("Frequency", 0);
        helpers.drawAudioInputPin("Waveform", 1);
        helpers.drawAudioInputPin("Gate", 2);
        helpers.drawAudioOutputPin("Out", 0);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Frequency Mod";
            case 1: return "Waveform Mod";
            case 2: return "Gate";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Oscillator<float> oscillator;
    int currentWaveform = -1;

    // Cached parameter pointers
    std::atomic<float>* frequencyParam { nullptr };
    std::atomic<float>* waveformParam  { nullptr };

    // Click-free gating
    float smoothedGate { 0.0f };

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (VCOModuleProcessor)
};




================================================================================
FILE: juce\Source\audio\modules\VocalTractFilterModuleProcessor.cpp
================================================================================


// Rebuilt module implementation
#include "VocalTractFilterModuleProcessor.h"
#include "../../utils/RtLogger.h"
#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#endif

// Static formant tables
const FormantData VocalTractFilterModuleProcessor::VOWEL_A[4] = { {700.0f,1.0f,6.0f},{1220.0f,0.5f,8.0f},{2600.0f,0.2f,12.0f},{3800.0f,0.15f,15.0f} };
const FormantData VocalTractFilterModuleProcessor::VOWEL_E[4] = { {500.0f,1.0f,7.0f},{1800.0f,0.6f,9.0f},{2800.0f,0.3f,13.0f},{3900.0f,0.2f,16.0f} };
const FormantData VocalTractFilterModuleProcessor::VOWEL_I[4] = { {270.0f,1.0f,8.0f},{2300.0f,0.4f,10.0f},{3000.0f,0.2f,14.0f},{4000.0f,0.1f,18.0f} };
const FormantData VocalTractFilterModuleProcessor::VOWEL_O[4] = { {450.0f,1.0f,6.0f},{800.0f,0.7f,8.0f},{2830.0f,0.15f,12.0f},{3800.0f,0.1f,15.0f} };
const FormantData VocalTractFilterModuleProcessor::VOWEL_U[4] = { {300.0f,1.0f,7.0f},{870.0f,0.6f,9.0f},{2240.0f,0.1f,13.0f},{3500.0f,0.05f,16.0f} };

VocalTractFilterModuleProcessor::VocalTractFilterModuleProcessor()
    : ModuleProcessor(BusesProperties().withInput("Audio In", juce::AudioChannelSet::mono(), true)
                                        .withInput("Vowel Mod", juce::AudioChannelSet::mono(), true)
                                        .withInput("Formant Mod", juce::AudioChannelSet::mono(), true)
                                        .withInput("Instability Mod", juce::AudioChannelSet::mono(), true)
                                        .withInput("Gain Mod", juce::AudioChannelSet::mono(), true)
                                        .withOutput("Audio Out", juce::AudioChannelSet::mono(), true))
    , apvts(*this, nullptr, "VocalTractParams", createParameterLayout())
{
    vowelShapeParam   = apvts.getRawParameterValue("vowelShape");
    formantShiftParam = apvts.getRawParameterValue("formantShift");
    instabilityParam  = apvts.getRawParameterValue("instability");
    outputGainParam   = apvts.getRawParameterValue("formantGain");

    // Initialize oscillators with sine wave functions
    wowOscillator.initialise([](float x) { return std::sin(x); }, 128);
    flutterOscillator.initialise([](float x) { return std::sin(x); }, 128);
    
    // Initialize lastOutputValues for cable inspector
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void VocalTractFilterModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    if (sampleRate <= 0.0 || samplesPerBlock <= 0) return;

    dspSpec.sampleRate = sampleRate;
    dspSpec.maximumBlockSize = (juce::uint32) samplesPerBlock;
    dspSpec.numChannels = 1;

    bands.b0.prepare(dspSpec); bands.b1.prepare(dspSpec);
    bands.b2.prepare(dspSpec); bands.b3.prepare(dspSpec);
    bands.b0.reset(); bands.b1.reset(); bands.b2.reset(); bands.b3.reset();

    wowOscillator.prepare(dspSpec); wowOscillator.setFrequency(0.5f); wowOscillator.reset();
    flutterOscillator.prepare(dspSpec); flutterOscillator.setFrequency(7.5f); flutterOscillator.reset();

    ensureWorkBuffers(1, samplesPerBlock);
    updateCoefficients(0.0f, 0.0f, 0.0f); // Initialize with default values
}

void VocalTractFilterModuleProcessor::ensureWorkBuffers(int numChannels, int numSamples)
{
    workBuffer.setSize(numChannels, numSamples, false, false, true);
    sumBuffer.setSize(numChannels, numSamples, false, false, true);
    tmpBuffer.setSize(numChannels, numSamples, false, false, true);
}

void VocalTractFilterModuleProcessor::updateCoefficients(float vowelShape, float formantShift, float instability)
{
    const FormantData* tables[] = { VOWEL_A, VOWEL_E, VOWEL_I, VOWEL_O, VOWEL_U };
    float shape = juce::jlimit(0.0f, 3.999f, vowelShape);
    int i0 = (int) std::floor(shape);
    int i1 = juce::jmin(4, i0 + 1);
    float t = shape - (float)i0;
    float shift = std::pow(2.0f, juce::jlimit(-1.0f, 1.0f, formantShift));
    float inst = juce::jlimit(0.0f, 1.0f, instability);
    float wow = wowOscillator.processSample(0.0f) * 0.03f * inst;
    float flt = flutterOscillator.processSample(0.0f) * 0.01f * inst;
    float mult = 1.0f + wow + flt;

    const FormantData* a = tables[i0];
    const FormantData* b = tables[i1];

    auto setBand = [&](IIRFilter& f, int bandIdx)
    {
        float cf = juce::jmap(t, a[bandIdx].frequency, b[bandIdx].frequency) * shift * mult;
        float q  = juce::jmap(t, a[bandIdx].q,         b[bandIdx].q);
        bandGains[bandIdx] = juce::jmap(t, a[bandIdx].gain, b[bandIdx].gain);
        cf = juce::jlimit(20.0f, (float)dspSpec.sampleRate * 0.49f, cf);
        q  = juce::jlimit(0.1f, 40.0f, q);
        f.coefficients = juce::dsp::IIR::Coefficients<float>::makeBandPass(dspSpec.sampleRate, cf, q);
    };

    setBand(bands.b0, 0);
    setBand(bands.b1, 1);
    setBand(bands.b2, 2);
    setBand(bands.b3, 3);
}

void VocalTractFilterModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    juce::ScopedNoDenormals noDenormals;
    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // Check for modulation inputs and read CV values
    float vowelModCV = 0.0f, formantModCV = 0.0f, instabilityModCV = 0.0f, gainModCV = 0.0f;
    
    if (isParamInputConnected("vowelShape")) {
        const auto& vowelModBus = getBusBuffer(buffer, true, 1);
        if (vowelModBus.getNumChannels() > 0)
            vowelModCV = vowelModBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("formantShift")) {
        const auto& formantModBus = getBusBuffer(buffer, true, 2);
        if (formantModBus.getNumChannels() > 0)
            formantModCV = formantModBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("instability")) {
        const auto& instabilityModBus = getBusBuffer(buffer, true, 3);
        if (instabilityModBus.getNumChannels() > 0)
            instabilityModCV = instabilityModBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("formantGain")) {
        const auto& gainModBus = getBusBuffer(buffer, true, 4);
        if (gainModBus.getNumChannels() > 0)
            gainModCV = gainModBus.getReadPointer(0)[0];
    }

    // Apply modulation to parameters
    float vowelShape = vowelShapeParam ? vowelShapeParam->load() : 0.0f;
    float formantShift = formantShiftParam ? formantShiftParam->load() : 0.0f;
    float instability = instabilityParam ? instabilityParam->load() : 0.0f;
    float outputGain = outputGainParam ? outputGainParam->load() : 0.0f;
    
    if (isParamInputConnected("vowelShape")) {
        vowelShape = juce::jlimit(0.0f, 4.0f, vowelShape + (vowelModCV - 0.5f) * 2.0f);
    }
    if (isParamInputConnected("formantShift")) {
        formantShift = juce::jlimit(-1.0f, 1.0f, formantShift + (formantModCV - 0.5f) * 2.0f);
    }
    if (isParamInputConnected("instability")) {
        instability = juce::jlimit(0.0f, 1.0f, instability + (instabilityModCV - 0.5f) * 0.5f);
    }
    if (isParamInputConnected("formantGain")) {
        outputGain = juce::jlimit(-24.0f, 24.0f, outputGain + (gainModCV - 0.5f) * 48.0f);
    }

    // Store live modulated values for UI display
    setLiveParamValue("vowelShape_live", vowelShape);
    setLiveParamValue("formantShift_live", formantShift);
    setLiveParamValue("instability_live", instability);
    setLiveParamValue("formantGain_live", outputGain);

    // Update coefficients every block so UI changes apply
    updateCoefficients(vowelShape, formantShift, instability);

    auto in  = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);
    if (in.getNumChannels() == 0 || out.getNumChannels() < 1)
    { out.clear(); return; }

    ensureWorkBuffers(out.getNumChannels(), numSamples);

    // Fan-out mono input to all workBuffer channels
    for (int ch = 0; ch < workBuffer.getNumChannels(); ++ch)
        workBuffer.copyFrom(ch, 0, in, 0, 0, numSamples);

    // Sum of bands
    sumBuffer.clear();
    auto processBand = [&](IIRFilter& f, float g)
    {
        tmpBuffer.makeCopyOf(workBuffer);
        juce::dsp::AudioBlock<float> b(tmpBuffer);
        juce::dsp::ProcessContextReplacing<float> ctx(b);
        f.process(ctx);
        tmpBuffer.applyGain(g);
        for (int ch = 0; ch < sumBuffer.getNumChannels(); ++ch)
            sumBuffer.addFrom(ch, 0, tmpBuffer, ch, 0, numSamples);
    };

    processBand(bands.b0, bandGains[0]);
    processBand(bands.b1, bandGains[1]);
    processBand(bands.b2, bandGains[2]);
    processBand(bands.b3, bandGains[3]);

    // Output with gain
    float outGain = juce::Decibels::decibelsToGain(juce::jlimit(-24.0f, 24.0f, outputGain));
    sumBuffer.applyGain(outGain);
    for (int ch = 0; ch < out.getNumChannels(); ++ch)
        out.copyFrom(ch, 0, sumBuffer, ch % sumBuffer.getNumChannels(), 0, numSamples);
    
    // Update lastOutputValues for cable inspector
    if (!lastOutputValues.empty() && lastOutputValues[0])
    {
        lastOutputValues[0]->store(out.getSample(0, out.getNumSamples() - 1));
    }
}

juce::AudioProcessorValueTreeState::ParameterLayout VocalTractFilterModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>("vowelShape",   "Vowel Shape",   0.0f, 4.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>("formantShift", "Formant Shift", -1.0f, 1.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>("instability",  "Instability",  0.0f, 1.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>("formantGain",  "Formant Gain", juce::NormalisableRange<float>(-24.0f, 24.0f, 0.1f), 0.0f));
    return { p.begin(), p.end() };
}

#if defined(PRESET_CREATOR_UI)
void VocalTractFilterModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    if (!vowelShapeParam || !formantShiftParam || !instabilityParam || !outputGainParam) return;
    ImGui::PushItemWidth(itemWidth);
    
    // Vowel Shape
    bool isVowelModulated = isParamModulated("vowelShape");
    float v = vowelShapeParam->load();
    if (isVowelModulated) {
        v = getLiveParamValueFor("vowelShape", "vowelShape_live", v);
        ImGui::BeginDisabled();
    }
    
    if (ImGui::SliderFloat("Vowel", &v, 0.0f, 4.0f, "%.1f")) {
        if (!isVowelModulated) { *vowelShapeParam = v; if (onModificationEnded) onModificationEnded(); }
    }
    if (!isVowelModulated) adjustParamOnWheel(apvts.getParameter("vowelShape"), "vowelShape", v);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isVowelModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    // Formant Shift
    bool isFormantModulated = isParamModulated("formantShift");
    float s = formantShiftParam->load();
    if (isFormantModulated) {
        s = getLiveParamValueFor("formantShift", "formantShift_live", s);
        ImGui::BeginDisabled();
    }
    
    if (ImGui::SliderFloat("Formant", &s, -1.0f, 1.0f, "%.2f")) {
        if (!isFormantModulated) { *formantShiftParam = s; if (onModificationEnded) onModificationEnded(); }
    }
    if (!isFormantModulated) adjustParamOnWheel(apvts.getParameter("formantShift"), "formantShift", s);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isFormantModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    // Instability
    bool isInstabilityModulated = isParamModulated("instability");
    float i = instabilityParam->load();
    if (isInstabilityModulated) {
        i = getLiveParamValueFor("instability", "instability_live", i);
        ImGui::BeginDisabled();
    }
    
    if (ImGui::SliderFloat("Instab", &i, 0.0f, 1.0f, "%.2f")) {
        if (!isInstabilityModulated) { *instabilityParam = i; if (onModificationEnded) onModificationEnded(); }
    }
    if (!isInstabilityModulated) adjustParamOnWheel(apvts.getParameter("instability"), "instability", i);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isInstabilityModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    // Gain
    bool isGainModulated = isParamModulated("formantGain");
    float g = outputGainParam->load();
    if (isGainModulated) {
        g = getLiveParamValueFor("formantGain", "formantGain_live", g);
        ImGui::BeginDisabled();
    }
    
    if (ImGui::SliderFloat("Gain", &g, -24.0f, 24.0f, "%.1f dB")) {
        if (!isGainModulated) { *outputGainParam = g; if (onModificationEnded) onModificationEnded(); }
    }
    if (!isGainModulated) adjustParamOnWheel(apvts.getParameter("formantGain"), "formantGain", g);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isGainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    ImGui::PopItemWidth();
}

void VocalTractFilterModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Audio In", 0);
    
    // Modulation input pins
    int busIdx, chanInBus;
    if (getParamRouting("vowelShape", busIdx, chanInBus))
        helpers.drawAudioInputPin("Vowel Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("formantShift", busIdx, chanInBus))
        helpers.drawAudioInputPin("Formant Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("instability", busIdx, chanInBus))
        helpers.drawAudioInputPin("Instability Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("formantGain", busIdx, chanInBus))
        helpers.drawAudioInputPin("Gain Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    
    helpers.drawAudioOutputPin("Audio Out", 0);
}
#endif

bool VocalTractFilterModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outChannelIndexInBus = 0;
    if (paramId == "vowelShape") { outBusIndex = 1; return true; }
    if (paramId == "formantShift") { outBusIndex = 2; return true; }
    if (paramId == "instability") { outBusIndex = 3; return true; }
    if (paramId == "formantGain") { outBusIndex = 4; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\VocalTractFilterModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

// Simple descriptor for one formant band
struct FormantData { float frequency; float gain; float q; };

class VocalTractFilterModuleProcessor : public ModuleProcessor
{
public:
    VocalTractFilterModuleProcessor();
    ~VocalTractFilterModuleProcessor() override = default;

    const juce::String getName() const override { return "vocal tract filter"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Audio In";
            case 1: return "Vowel Mod";
            case 2: return "Formant Mod";
            case 3: return "Instability Mod";
            case 4: return "Gain Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Audio Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    // Internal helpers
    void updateCoefficients(float vowelShape, float formantShift, float instability);
    void ensureWorkBuffers(int numChannels, int numSamples);

    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    // State
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* vowelShapeParam { nullptr };
    std::atomic<float>* formantShiftParam { nullptr };
    std::atomic<float>* instabilityParam { nullptr };
    std::atomic<float>* outputGainParam { nullptr }; // dB

    // Formant tables
    static const FormantData VOWEL_A[4];
    static const FormantData VOWEL_E[4];
    static const FormantData VOWEL_I[4];
    static const FormantData VOWEL_O[4];
    static const FormantData VOWEL_U[4];

    // DSP - Use simple IIR filters directly for mono processing
    using IIRFilter = juce::dsp::IIR::Filter<float>;
    struct Bands { IIRFilter b0, b1, b2, b3; } bands;
    std::array<float, 4> bandGains { 1.0f, 0.5f, 0.2f, 0.15f };
    juce::dsp::Oscillator<float> wowOscillator, flutterOscillator;
    juce::dsp::ProcessSpec dspSpec { 0.0, 0, 0 };

    // Preallocated working buffers to avoid RT allocations
    juce::AudioBuffer<float> workBuffer;
    juce::AudioBuffer<float> sumBuffer;
    juce::AudioBuffer<float> tmpBuffer;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(VocalTractFilterModuleProcessor);
};


================================================================================
FILE: juce\Source\audio\modules\VstHostModuleProcessor.cpp
================================================================================


#include "VstHostModuleProcessor.h"
#include <juce_gui_basics/juce_gui_basics.h>

// Helper function to create correct bus properties from the plugin's layout
juce::AudioProcessor::BusesProperties VstHostModuleProcessor::createBusesPropertiesForPlugin(juce::AudioPluginInstance& plugin)
{
    BusesProperties properties;

    // Add all input buses
    for (int i = 0; i < plugin.getBusCount(true); ++i)
    {
        if (auto* bus = plugin.getBus(true, i))
        {
            properties.addBus(true, bus->getName(), bus->getDefaultLayout(), bus->isEnabledByDefault());
            juce::Logger::writeToLog("[VstHost] Input bus " + juce::String(i) + ": " + 
                                     bus->getName() + " (" + 
                                     juce::String(bus->getDefaultLayout().size()) + " channels)");
        }
    }

    // Add all output buses
    for (int i = 0; i < plugin.getBusCount(false); ++i)
    {
        if (auto* bus = plugin.getBus(false, i))
        {
            properties.addBus(false, bus->getName(), bus->getDefaultLayout(), bus->isEnabledByDefault());
            juce::Logger::writeToLog("[VstHost] Output bus " + juce::String(i) + ": " + 
                                     bus->getName() + " (" + 
                                     juce::String(bus->getDefaultLayout().size()) + " channels)");
        }
    }

    return properties;
}

VstHostModuleProcessor::VstHostModuleProcessor(std::unique_ptr<juce::AudioPluginInstance> plugin, const juce::PluginDescription& desc)
    : ModuleProcessor(createBusesPropertiesForPlugin(*plugin)),
      hostedPlugin(std::move(plugin)),
      pluginDescription(desc),
      dummyApvts(*this, nullptr, "DummyParams", {})
{
    jassert(hostedPlugin != nullptr);
    
    juce::Logger::writeToLog("[VstHost] Created wrapper for: " + getName() + 
                             " with " + juce::String(getTotalNumInputChannels()) + " inputs, " +
                             juce::String(getTotalNumOutputChannels()) + " outputs");
}

VstHostModuleProcessor::~VstHostModuleProcessor()
{
    juce::Logger::writeToLog("[VstHost] Destroying wrapper for: " + getName());
}

void VstHostModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    if (hostedPlugin != nullptr)
    {
        try
        {
            hostedPlugin->prepareToPlay(sampleRate, samplesPerBlock);
            juce::Logger::writeToLog("[VstHost] " + getName() + " prepared: " +
                                     juce::String(sampleRate) + " Hz, " +
                                     juce::String(samplesPerBlock) + " samples");
        }
        catch (const std::exception& e)
        {
            juce::Logger::writeToLog("[VstHost] Exception during prepareToPlay for " + getName() + ": " + e.what());
        }
        catch (...)
        {
            juce::Logger::writeToLog("[VstHost] Unknown exception during prepareToPlay for " + getName());
        }
    }
}

void VstHostModuleProcessor::releaseResources()
{
    if (hostedPlugin != nullptr)
    {
        try
        {
            hostedPlugin->releaseResources();
        }
        catch (const std::exception& e)
        {
            juce::Logger::writeToLog("[VstHost] Exception during releaseResources for " + getName() + ": " + e.what());
        }
        catch (...)
        {
            juce::Logger::writeToLog("[VstHost] Unknown exception during releaseResources for " + getName());
        }
    }
}

void VstHostModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    if (hostedPlugin != nullptr)
    {
        try
        {
            // Add error handling around VST plugin processing to prevent crashes
            hostedPlugin->processBlock(buffer, midi);
        }
        catch (const std::exception& e)
        {
            juce::Logger::writeToLog("[VstHost] Exception in plugin " + getName() + ": " + e.what());
            // Clear the buffer to prevent noise/feedback if the plugin crashes
            buffer.clear();
        }
        catch (...)
        {
            juce::Logger::writeToLog("[VstHost] Unknown exception in plugin " + getName());
            // Clear the buffer to prevent noise/feedback if the plugin crashes
            buffer.clear();
        }
    }
}

const juce::String VstHostModuleProcessor::getName() const
{
    return hostedPlugin != nullptr ? hostedPlugin->getName() : "VST Host";
}

juce::AudioProcessorEditor* VstHostModuleProcessor::createEditor()
{
    return hostedPlugin != nullptr ? hostedPlugin->createEditor() : nullptr;
}

bool VstHostModuleProcessor::hasEditor() const
{
    return hostedPlugin != nullptr ? hostedPlugin->hasEditor() : false;
}

// State management is crucial for saving presets
juce::ValueTree VstHostModuleProcessor::getExtraStateTree() const
{
    // This tree will be saved inside the <extra> block in your preset
    juce::ValueTree state("VstHostState");

    if (hostedPlugin == nullptr)
        return state;

    // 1. Store the unique plugin identifier so we know what to load
    state.setProperty("fileOrIdentifier", pluginDescription.fileOrIdentifier, nullptr);
    state.setProperty("name", pluginDescription.name, nullptr);
    state.setProperty("manufacturerName", pluginDescription.manufacturerName, nullptr);
    state.setProperty("version", pluginDescription.version, nullptr);
    state.setProperty("pluginFormatName", pluginDescription.pluginFormatName, nullptr);

    // 2. Get the plugin's internal state as binary data
    juce::MemoryBlock pluginState;
    try
    {
        hostedPlugin->getStateInformation(pluginState);

        // 3. Store the binary data as a Base64 string in our ValueTree
        if (pluginState.getSize() > 0)
        {
            state.setProperty("pluginState", pluginState.toBase64Encoding(), nullptr);
            juce::Logger::writeToLog("[VstHost] Saved state for: " + getName() + " (" + juce::String(pluginState.getSize()) + " bytes)");
        }
    }
    catch (const std::exception& e)
    {
        juce::Logger::writeToLog("[VstHost] Exception getting state for " + getName() + ": " + e.what());
    }
    catch (...)
    {
        juce::Logger::writeToLog("[VstHost] Unknown exception getting state for " + getName());
    }

    return state;
}

void VstHostModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (hostedPlugin == nullptr)
        return;

    if (vt.hasType("VstHostState"))
    {
        // When loading, get the Base64 string from the ValueTree
        juce::String stateString = vt.getProperty("pluginState", "").toString();

        if (stateString.isNotEmpty())
        {
            // Decode it back into binary data
            juce::MemoryBlock pluginState;
            if (pluginState.fromBase64Encoding(stateString))
            {
                // Restore the plugin's state
                try
                {
                    hostedPlugin->setStateInformation(pluginState.getData(), (int)pluginState.getSize());
                    juce::Logger::writeToLog("[VstHost] Restored state for: " + getName() + " (" + juce::String(pluginState.getSize()) + " bytes)");
                }
                catch (const std::exception& e)
                {
                    juce::Logger::writeToLog("[VstHost] Exception setting state for " + getName() + ": " + e.what());
                }
                catch (...)
                {
                    juce::Logger::writeToLog("[VstHost] Unknown exception setting state for " + getName());
                }
            }
        }
    }
}

// UI and Pin Drawing
juce::String VstHostModuleProcessor::getAudioInputLabel(int channel) const
{
    if (hostedPlugin == nullptr)
        return "In " + juce::String(channel + 1);
    
    // Iterate through all input buses to find which one contains this channel
    int channelOffset = 0;
    try
    {
        for (int busIndex = 0; busIndex < hostedPlugin->getBusCount(true); ++busIndex)
        {
            if (auto* bus = hostedPlugin->getBus(true, busIndex))
            {
                const int busChannels = bus->getNumberOfChannels();
                if (channel < channelOffset + busChannels)
                {
                    // This channel belongs to this bus
                    const int channelInBus = channel - channelOffset;
                    return bus->getName() + " " + juce::String(channelInBus + 1);
                }
                channelOffset += busChannels;
            }
        }
    }
    catch (const std::exception& e)
    {
        juce::Logger::writeToLog("[VstHost] Exception in getAudioInputLabel for " + getName() + ": " + e.what());
    }
    catch (...)
    {
        juce::Logger::writeToLog("[VstHost] Unknown exception in getAudioInputLabel for " + getName());
    }
    return "In " + juce::String(channel + 1);
}

juce::String VstHostModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (hostedPlugin == nullptr)
        return "Out " + juce::String(channel + 1);
    
    // Iterate through all output buses to find which one contains this channel
    int channelOffset = 0;
    try
    {
        for (int busIndex = 0; busIndex < hostedPlugin->getBusCount(false); ++busIndex)
        {
            if (auto* bus = hostedPlugin->getBus(false, busIndex))
            {
                const int busChannels = bus->getNumberOfChannels();
                if (channel < channelOffset + busChannels)
                {
                    // This channel belongs to this bus
                    const int channelInBus = channel - channelOffset;
                    return bus->getName() + " " + juce::String(channelInBus + 1);
                }
                channelOffset += busChannels;
            }
        }
    }
    catch (const std::exception& e)
    {
        juce::Logger::writeToLog("[VstHost] Exception in getAudioOutputLabel for " + getName() + ": " + e.what());
    }
    catch (...)
    {
        juce::Logger::writeToLog("[VstHost] Unknown exception in getAudioOutputLabel for " + getName());
    }
    return "Out " + juce::String(channel + 1);
}

#if defined(PRESET_CREATOR_UI)
// Helper class for self-deleting plugin window
class PluginEditorWindow : public juce::DocumentWindow
{
public:
    PluginEditorWindow(const juce::String& name, juce::Component* content)
        : DocumentWindow(name, juce::Colours::darkgrey, juce::DocumentWindow::closeButton)
    {
        setContentOwned(content, true);
        setResizable(true, true);
        setUsingNativeTitleBar(true);
        centreWithSize(content->getWidth(), content->getHeight());
        setVisible(true);
    }

    void closeButtonPressed() override
    {
        // This will be called when the user clicks the 'x' button.
        // The window will delete itself automatically.
        delete this;
    }
};
#endif

void VstHostModuleProcessor::drawParametersInNode(float itemWidth, 
                                                   const std::function<bool(const juce::String&)>&, 
                                                   const std::function<void()>&)
{
#if defined(PRESET_CREATOR_UI)
    if (ImGui::Button("Open Editor", ImVec2(itemWidth, 0)))
    {
        try
        {
            if (auto* editor = createEditor())
            {
                // --- THIS IS THE FIX ---
                // Don't create the window directly. Post the task to the message queue.
                // Capture the name as a string to avoid lifetime issues
                auto pluginName = getName();
                juce::MessageManager::callAsync([pluginName, editor] {
                    // This code will run safely after the current ImGui frame is finished.
                    try
                    {
                        new PluginEditorWindow(pluginName, editor);
                    }
                    catch (const std::exception& e)
                    {
                        juce::Logger::writeToLog("[VstHost] Exception creating editor window for " + pluginName + ": " + e.what());
                    }
                    catch (...)
                    {
                        juce::Logger::writeToLog("[VstHost] Unknown exception creating editor window for " + pluginName);
                    }
                });
                // --- END OF FIX ---

                juce::Logger::writeToLog("[VstHost] Opened editor for: " + getName());
            }
            else
            {
                juce::Logger::writeToLog("[VstHost] Plugin has no editor: " + getName());
            }
        }
        catch (const std::exception& e)
        {
            juce::Logger::writeToLog("[VstHost] Exception creating editor for " + getName() + ": " + e.what());
        }
        catch (...)
        {
            juce::Logger::writeToLog("[VstHost] Unknown exception creating editor for " + getName());
        }
    }
    
    // Display plugin info
    ImGui::TextDisabled("Manufacturer: %s", pluginDescription.manufacturerName.toRawUTF8());
    ImGui::TextDisabled("Version: %s", pluginDescription.version.toRawUTF8());
#else
    juce::ignoreUnused(itemWidth);
#endif
}

void VstHostModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    if (hostedPlugin == nullptr)
        return;

    try
    {
        // Draw input pins for all input channels using dynamic labels
        const int numInputs = hostedPlugin->getTotalNumInputChannels();
        for (int i = 0; i < numInputs; ++i)
        {
            try
            {
                helpers.drawAudioInputPin(getAudioInputLabel(i).toRawUTF8(), i);
            }
            catch (const std::exception& e)
            {
                juce::Logger::writeToLog("[VstHost] Exception drawing input pin " + juce::String(i) + " for " + getName() + ": " + e.what());
                helpers.drawAudioInputPin(("In " + juce::String(i + 1)).toRawUTF8(), i);
            }
        }

        // Draw output pins for all output channels using dynamic labels
        const int numOutputs = hostedPlugin->getTotalNumOutputChannels();
        for (int i = 0; i < numOutputs; ++i)
        {
            try
            {
                helpers.drawAudioOutputPin(getAudioOutputLabel(i).toRawUTF8(), i);
            }
            catch (const std::exception& e)
            {
                juce::Logger::writeToLog("[VstHost] Exception drawing output pin " + juce::String(i) + " for " + getName() + ": " + e.what());
                helpers.drawAudioOutputPin(("Out " + juce::String(i + 1)).toRawUTF8(), i);
            }
        }
    }
    catch (const std::exception& e)
    {
        juce::Logger::writeToLog("[VstHost] Exception in drawIoPins for " + getName() + ": " + e.what());
    }
    catch (...)
    {
        juce::Logger::writeToLog("[VstHost] Unknown exception in drawIoPins for " + getName());
    }
}



================================================================================
FILE: juce\Source\audio\modules\VstHostModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <juce_audio_processors/juce_audio_processors.h>

/**
    VstHostModuleProcessor wraps a VST plugin instance to integrate it seamlessly
    into the modular synthesizer graph. It acts as a bridge, forwarding audio
    processing calls to the hosted plugin while managing its state and UI.
*/
class VstHostModuleProcessor : public ModuleProcessor
{
public:
    VstHostModuleProcessor(std::unique_ptr<juce::AudioPluginInstance> plugin, const juce::PluginDescription& desc);
    ~VstHostModuleProcessor() override;

    // AudioProcessor Overrides
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    void releaseResources() override;

    const juce::String getName() const override;
    juce::AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;
    
    // ModuleProcessor Overrides
    juce::AudioProcessorValueTreeState& getAPVTS() override { return dummyApvts; }
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    
    // State Management through ExtraStateTree
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    // Access to the plugin description for saving/loading
    const juce::PluginDescription& getPluginDescription() const { return pluginDescription; }
    
    // Access to the hosted plugin instance
    juce::AudioPluginInstance* getHostedPlugin() const { return hostedPlugin.get(); }

private:
    // Helper function to create correct bus properties from plugin
    static BusesProperties createBusesPropertiesForPlugin(juce::AudioPluginInstance& plugin);
    
    std::unique_ptr<juce::AudioPluginInstance> hostedPlugin;
    juce::PluginDescription pluginDescription;

    // A dummy APVTS to satisfy the base class requirements
    // VST parameters are managed by the plugin itself, not through APVTS
    juce::AudioProcessorValueTreeState dummyApvts;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(VstHostModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\WaveshaperModuleProcessor.cpp
================================================================================


#include "WaveshaperModuleProcessor.h"
#include <cmath> // For std::tanh

juce::AudioProcessorValueTreeState::ParameterLayout WaveshaperModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>("drive", "Drive", 
        juce::NormalisableRange<float>(1.0f, 100.0f, 0.01f, 0.3f), 1.0f));
    p.push_back(std::make_unique<juce::AudioParameterChoice>("type", "Type",
        juce::StringArray{ "Soft Clip (tanh)", "Hard Clip", "Foldback" }, 0));
    return { p.begin(), p.end() };
}

WaveshaperModuleProcessor::WaveshaperModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(4), true) // 0-1: Audio In, 2: Drive Mod, 3: Type Mod
                        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "WaveshaperParams", createParameterLayout())
{
    driveParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("drive"));
    typeParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("type"));
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

void WaveshaperModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // Get pointers to modulation CV inputs from unified input bus
    const bool isDriveMod = isParamInputConnected("drive");
    const bool isTypeMod = isParamInputConnected("type");
    auto inBus = getBusBuffer(buffer, true, 0);
    const float* driveCV = isDriveMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* typeCV = isTypeMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;

    // Get base parameter values ONCE
    const float baseDrive = driveParam != nullptr ? driveParam->get() : 1.0f;
    const int baseType = typeParam != nullptr ? typeParam->getIndex() : 0;
    
    for (int ch = 0; ch < buffer.getNumChannels(); ++ch)
    {
        float* data = buffer.getWritePointer(ch);
        for (int i = 0; i < buffer.getNumSamples(); ++i)
        {
            // PER-SAMPLE FIX: Calculate effective drive FOR THIS SAMPLE
            float drive = baseDrive;
            if (isDriveMod && driveCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, driveCV[i]);
                // ADDITIVE MODULATION FIX: Add CV offset to base drive value
                const float octaveRange = 3.0f; // CV can modulate drive by +/- 3 octaves
                const float octaveOffset = (cv - 0.5f) * octaveRange; // Center around 0, range [-1.5, +1.5] octaves
                drive = baseDrive * std::pow(2.0f, octaveOffset);
                drive = juce::jlimit(1.0f, 100.0f, drive);
            }
            
            // PER-SAMPLE FIX: Calculate effective type FOR THIS SAMPLE
            int type = baseType;
            if (isTypeMod && typeCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, typeCV[i]);
                // Map CV [0,1] to type [0,2] with wrapping
                type = static_cast<int>(cv * 3.0f) % 3;
            }
            
            float s = data[i] * drive;
            
            switch (type)
            {
                case 0: // Soft Clip (tanh)
                    data[i] = std::tanh(s);
                    break;
                case 1: // Hard Clip
                    data[i] = juce::jlimit(-1.0f, 1.0f, s);
                    break;
                case 2: // Foldback
                    data[i] = std::abs(std::abs(std::fmod(s - 1.0f, 4.0f)) - 2.0f) - 1.0f;
                    break;
            }
        }
    }
    
    // Store live modulated values for UI display (use last sample's values)
    float finalDrive = baseDrive;
    if (isDriveMod && driveCV != nullptr) {
        const float cv = juce::jlimit(0.0f, 1.0f, driveCV[buffer.getNumSamples() - 1]);
        const float octaveRange = 3.0f;
        const float octaveOffset = (cv - 0.5f) * octaveRange;
        finalDrive = baseDrive * std::pow(2.0f, octaveOffset);
        finalDrive = juce::jlimit(1.0f, 100.0f, finalDrive);
    }
    setLiveParamValue("drive_live", finalDrive);
    
    int finalType = baseType;
    if (isTypeMod && typeCV != nullptr) {
        const float cv = juce::jlimit(0.0f, 1.0f, typeCV[buffer.getNumSamples() - 1]);
        finalType = static_cast<int>(cv * 3.0f) % 3;
    }
    setLiveParamValue("type_live", static_cast<float>(finalType));

    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(buffer.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(buffer.getSample(1, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void WaveshaperModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float drive = 1.0f; if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("drive"))) drive = *p;
    int type = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("type"))) type = p->getIndex();

    ImGui::PushItemWidth(itemWidth);

    // Drive
    bool isDriveModulated = isParamModulated("drive");
    if (isDriveModulated) {
        drive = getLiveParamValueFor("drive", "drive_live", drive);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Drive", &drive, 1.0f, 100.0f, "%.2f", ImGuiSliderFlags_Logarithmic)) if (!isDriveModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("drive"))) *p = drive;
    if (!isDriveModulated) adjustParamOnWheel(ap.getParameter("drive"), "drive", drive);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isDriveModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Type
    bool isTypeModulated = isParamModulated("type");
    if (isTypeModulated) {
        type = static_cast<int>(getLiveParamValueFor("type", "type_live", static_cast<float>(type)));
        ImGui::BeginDisabled();
    }
    if (ImGui::Combo("Type", &type, "Soft Clip\0Hard Clip\0Foldback\0\0")) if (!isTypeModulated) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("type"))) *p = type;
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isTypeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void WaveshaperModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);

    // CORRECTED MODULATION PINS - Use absolute channel index
    int busIdx, chanInBus;
    if (getParamRouting("drive", busIdx, chanInBus))
        helpers.drawAudioInputPin("Drive Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("type", busIdx, chanInBus))
        helpers.drawAudioInputPin("Type Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif

// Parameter bus contract implementation
bool WaveshaperModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "drive") { outChannelIndexInBus = 2; return true; }
    if (paramId == "type") { outChannelIndexInBus = 3; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\WaveshaperModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class WaveshaperModuleProcessor : public ModuleProcessor
{
public:
    WaveshaperModuleProcessor();
    ~WaveshaperModuleProcessor() override = default;

    const juce::String getName() const override { return "waveshaper"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override {}
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Drive Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    
    juce::AudioParameterFloat* driveParam { nullptr };
    juce::AudioParameterChoice* typeParam { nullptr };
};


================================================================================
FILE: juce\Source\audio\voices\ModularVoice.h
================================================================================


#pragma once

#include "../graph/VoiceProcessor.h"
#include "../graph/ModularSynthProcessor.h"
#include "../dsp/TimePitchProcessor.h"

// Adapter that lets ModularSynthProcessor be used as a VoiceProcessor in the harness
class ModularVoice : public VoiceProcessor
{
public:
    ModularVoice()
    {
        modularSynth = std::make_unique<ModularSynthProcessor>();
    }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override
    {
        VoiceProcessor::prepareToPlay (sampleRate, samplesPerBlock);
        if (modularSynth)
            modularSynth->prepareToPlay (sampleRate, samplesPerBlock);
            
        // Prepare time/pitch post-processing (copied from SynthVoiceProcessor)
        timePitch.prepare (sampleRate, 2, samplesPerBlock);
        interleavedCapacityFrames = samplesPerBlock;
        interleavedInput.allocate ((size_t) (interleavedCapacityFrames * 2), true);
        interleavedOutput.allocate ((size_t) (interleavedCapacityFrames * 2), true);
    }

    void renderBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi) override
    {
        // 1) Render modular synth into isolated temporary buffer to avoid re-entrancy on the graph buffer
        const int numSamples = buffer.getNumSamples();
        const int numCh = buffer.getNumChannels();
        if (tempBuffer.getNumChannels() != juce::jmax (1, numCh) || tempBuffer.getNumSamples() != numSamples)
            tempBuffer.setSize (juce::jmax (1, numCh), numSamples, false, false, true);
        tempBuffer.clear();
        if (modularSynth)
            modularSynth->processBlock (tempBuffer, midi);

        // 2) Copy from temp into the main buffer (wrapping channel index if needed)
        for (int ch = 0; ch < numCh; ++ch)
        {
            const int srcCh = ch % juce::jmax (1, tempBuffer.getNumChannels());
            buffer.copyFrom (ch, 0, tempBuffer, srcCh, 0, numSamples);
        }

        if (numSamples <= 0)
            return;

        // 3) Read time/pitch parameters
        const float apTime  = apvts.getRawParameterValue ("timeStretchRatio") ? apvts.getRawParameterValue ("timeStretchRatio")->load() : 1.0f;
        const float apPitch = apvts.getRawParameterValue ("pitchSemitones")  ? apvts.getRawParameterValue ("pitchSemitones")->load()  : 0.0f;

        // 4) Apply time/pitch post-processing to the main buffer when non-neutral
        if (std::abs(apTime - 1.0f) > 0.001f || std::abs(apPitch) > 0.001f)
        {
            timePitch.setTimeStretchRatio (apTime);
            timePitch.setPitchSemitones (apPitch);

            // Ensure interleaved buffers are large enough
            if (interleavedCapacityFrames < numSamples)
            {
                interleavedCapacityFrames = numSamples;
                interleavedInput.allocate ((size_t) (interleavedCapacityFrames * 2), true);
                interleavedOutput.allocate ((size_t) (interleavedCapacityFrames * 2), true);
            }

            // Convert planar buffer to interleaved for processing
            auto* L = buffer.getReadPointer (0);
            auto* R = buffer.getNumChannels() > 1 ? buffer.getReadPointer (1) : L;
            for (int i = 0; i < numSamples; ++i)
            {
                interleavedInput[i * 2 + 0] = L[i];
                interleavedInput[i * 2 + 1] = R[i];
            }

            // Process via time/pitch and write back to planar buffer
            timePitch.putInterleaved (interleavedInput.getData(), numSamples);
            const int framesOut = timePitch.receiveInterleaved (interleavedOutput.getData(), numSamples);
            buffer.clear();
            const int n = juce::jmin (framesOut, numSamples);
            auto* wL = buffer.getWritePointer (0);
            auto* wR = buffer.getNumChannels() > 1 ? buffer.getWritePointer (1) : wL;
            for (int i = 0; i < n; ++i)
            {
                wL[i] = interleavedOutput[i * 2 + 0];
                wR[i] = interleavedOutput[i * 2 + 1];
            }
            if (n < numSamples)
            {
                if (buffer.getNumChannels() > 1)
                {
                    buffer.clear (0, n, numSamples - n);
                    buffer.clear (1, n, numSamples - n);
                }
                else
                {
                    buffer.clear (n, numSamples - n);
                }
            }
        }
        // If the 'if' condition is false, the buffer with the raw synth audio is passed through untouched.
    }

    ModularSynthProcessor* getModularSynth() { return modularSynth.get(); }

private:
    std::unique_ptr<ModularSynthProcessor> modularSynth;
    juce::AudioBuffer<float> tempBuffer;
    
    // Time/Pitch post-processing members (copied from SynthVoiceProcessor)
    TimePitchProcessor timePitch;
    juce::HeapBlock<float> interleavedInput, interleavedOutput;
    int interleavedCapacityFrames { 0 };
    // Stuttering members for time-stretch effect
    int stutterPos { 0 };
    double baseStutterMs { 80.0 }; // segment base length
    float stutterDuty { 0.35f };   // on-fraction of segment
};




================================================================================
FILE: juce\Source\audio\voices\NoiseVoiceProcessor.h
================================================================================


#pragma once
#include "../graph/VoiceProcessor.h"
#include <juce_dsp/juce_dsp.h>

class NoiseVoiceProcessor : public VoiceProcessor
{
public:
    NoiseVoiceProcessor() = default;
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void renderBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

private:
    juce::dsp::Oscillator<float> lfo { [] (float x) { return std::sin (x); } };
    juce::dsp::StateVariableTPTFilter<float> filter;
    juce::Random random;
};

================================================================================
FILE: juce\Source\audio\voices\NoiseVoiceProcessor.cpp
================================================================================


#include "NoiseVoiceProcessor.h"

void NoiseVoiceProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
	VoiceProcessor::prepareToPlay (sampleRate, samplesPerBlock);
	juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 2 };
	lfo.prepare (spec);
	lfo.setFrequency (0.3f);
	filter.reset();
	filter.prepare (spec);
	filter.setType (juce::dsp::StateVariableTPTFilterType::lowpass);
}

void NoiseVoiceProcessor::renderBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
	juce::ignoreUnused(midi);
	buffer.clear();
	const int n = buffer.getNumSamples();
	if (n <= 0) return;

	auto* L = buffer.getWritePointer(0);
	auto* R = buffer.getNumChannels() > 1 ? buffer.getWritePointer(1) : L;
	for (int i = 0; i < n; ++i)
	{
		const float s = random.nextFloat() * 2.0f - 1.0f;
		L[i] = s;
		R[i] = s;
	}

	const float lfoSample = lfo.processSample (0.0f);
	const float cutoff = juce::jmap (lfoSample, -1.0f, 1.0f, 300.0f, 2000.0f);
	filter.setCutoffFrequency (cutoff);

	juce::dsp::AudioBlock<float> block (buffer);
	juce::dsp::ProcessContextReplacing<float> context (block);
	filter.process (context);
}


================================================================================
FILE: juce\Source\audio\voices\SampleVoiceProcessor.cpp
================================================================================


#include "SampleVoiceProcessor.h"
#include "../../utils/RtLogger.h"

SampleVoiceProcessor::SampleVoiceProcessor(std::shared_ptr<SampleBank::Sample> sampleToPlay)
    : sourceSample(std::move(sampleToPlay))
{
}

void SampleVoiceProcessor::prepareToPlay(double rate, int samplesPerBlock)
{
    // Prepare base FX chain, then set sample-rate specific state
    VoiceProcessor::prepareToPlay (rate, samplesPerBlock);
    juce::Logger::writeToLog("[SampleVoice] prepareToPlay sr=" + juce::String(rate) + ", block=" + juce::String(samplesPerBlock));
    outputSampleRate = rate;
    // readPosition is set by reset() or setPlaybackRange() + reset(), not here

    // Always run stretcher in stereo; duplicate mono content upstream
    timePitch.prepare (rate, 2, samplesPerBlock);
    interleavedCapacityFrames = samplesPerBlock;
    interleavedInput.allocate ((size_t) (interleavedCapacityFrames * 2), true);
    interleavedOutput.allocate ((size_t) (interleavedCapacityFrames * 2), true);
    // Reset smoothing state
    smoothedTimeRatio = 1.0f;
    smoothedPitchSemis = 0.0f;
    smoothingBlocksRemainingTime = 0;
    smoothingBlocksRemainingPitch = 0;

    // Defaults per current preferred settings
    setSmoothingEnabled (true);
    setSmoothingTimeMs (100.0f, 100.0f);
    setSmoothingAlpha (0.4f, 0.4f);
    setSmoothingMaxBlocks (1, 1);
    setSmoothingSnapThresholds (0.5f, 3.0f);
    setSmoothingResetPolicy (true, true);
}

void SampleVoiceProcessor::renderBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    // buffer.clear(); // REMOVED: This was wiping out the audio before processing

    if (sourceSample == nullptr || sourceSample->stereo.getNumSamples() < 2 || outputSampleRate <= 0.0)
        return;

    const int numDestSamples = buffer.getNumSamples();
    auto& sourceBuffer = sourceSample->stereo;
    const int sourceLength = sourceBuffer.getNumSamples();

    // Apply UI smoothing toggle atomically at audio rate
    smoothingEnabled = requestedSmoothingEnabled.load(std::memory_order_relaxed);

    // Parameters to stretcher
    const float apTime = apvts.getRawParameterValue("timeStretchRatio") ? apvts.getRawParameterValue("timeStretchRatio")->load() : 1.0f;
    const float apPitch = apvts.getRawParameterValue("pitchSemitones") ? apvts.getRawParameterValue("pitchSemitones")->load() : 0.0f;
    const float effectiveTime = juce::jlimit(0.25f, 4.0f, apTime * zoneTimeStretchRatio);
    const float effectivePitchSemis = basePitchSemitones + apPitch;

    // If smoothing is disabled, apply parameters immediately
    if (!smoothingEnabled)
    { smoothedTimeRatio = effectiveTime; smoothedPitchSemis = effectivePitchSemis; if (resetOnChangeWhenNoSmoothing) timePitch.reset(); }
    else
    { smoothedTimeRatio = effectiveTime; smoothedPitchSemis = effectivePitchSemis; }

    timePitch.setTimeStretchRatio(smoothedTimeRatio);
    timePitch.setPitchSemitones(smoothedPitchSemis);

    // Branch engines cleanly: Naive vs RubberBand
    if (engine.load(std::memory_order_relaxed) == Engine::Naive)
    {
        auto* destL = buffer.getWritePointer(0);
        auto* destR = buffer.getNumChannels() > 1 ? buffer.getWritePointer(1) : destL;
        auto* srcL = sourceBuffer.getReadPointer(0);
        auto* srcR = sourceBuffer.getNumChannels() > 1 ? sourceBuffer.getReadPointer(1) : srcL;
        const double pitchScale = std::pow(2.0, (double) effectivePitchSemis / 12.0);
        const double step = pitchScale / (double) juce::jmax(0.0001f, effectiveTime);
        const double effectiveEndSample = (endSamplePos < 0.0 || endSamplePos >= sourceLength) ? (double)sourceLength - 1 : endSamplePos;
        for (int i = 0; i < numDestSamples; ++i)
        {
            int base = (int) readPosition;
            if (readPosition >= effectiveEndSample)
            {
                if (isLooping) 
                {
                    readPosition = startSamplePos + (readPosition - effectiveEndSample);
                    base = (int)readPosition;
                }
                else 
                { 
                    isPlaying = false;
                    buffer.clear(i, numDestSamples - i); 
                    break; 
                }
            }
            const int next = juce::jmin(sourceLength - 1, base + 1);
            const float frac = (float) (readPosition - (double) base);
            const float l = srcL[base] + frac * (srcL[next] - srcL[base]);
            const float r = srcR[base] + frac * (srcR[next] - srcR[base]);
            destL[i] = l; if (destR) destR[i] = r; readPosition += step;
        }
        return;
    }

    // Ensure interleaved buffers large enough
    if (numDestSamples > interleavedCapacityFrames)
    {
        interleavedCapacityFrames = numDestSamples;
        interleavedInput.allocate((size_t)(interleavedCapacityFrames * 2), true);
        interleavedOutput.allocate((size_t)(interleavedCapacityFrames * 2), true);
    }

    float* inLR = interleavedInput.getData();
    auto* srcL = sourceBuffer.getReadPointer(0);
    auto* srcR = sourceBuffer.getNumChannels() > 1 ? sourceBuffer.getReadPointer(1) : srcL;

    // RubberBand path: feed contiguous raw frames equal to output block size
    const double effectiveEndSample = (endSamplePos < 0.0 || endSamplePos >= sourceLength) ? (double)sourceLength - 1 : endSamplePos;
    int framesFed = 0;
    for (int i = 0; i < numDestSamples; ++i)
    {
        int pos = (int) readPosition;
        if (readPosition >= effectiveEndSample)
        {
            if (isLooping)
            {
                readPosition = startSamplePos + (readPosition - effectiveEndSample);
                pos = (int)readPosition;
            }
            else 
            {
                isPlaying = false;
                break;
            }
        }
        inLR[2 * i + 0] = srcL[pos];
        inLR[2 * i + 1] = srcR[pos];
        readPosition += 1.0;
        framesFed++;
    }

    if (framesFed > 0)
        timePitch.putInterleaved(inLR, framesFed);
    float* outLR = interleavedOutput.getData();
    int produced = timePitch.receiveInterleaved(outLR, numDestSamples);
    if (produced > 0)
    {
        auto* destL = buffer.getWritePointer(0);
        auto* destR = buffer.getNumChannels() > 1 ? buffer.getWritePointer(1) : destL;
        for (int i = 0; i < produced; ++i)
        { destL[i] = outLR[2 * i + 0]; if (destR) destR[i] = outLR[2 * i + 1]; }
        if (produced < numDestSamples)
        { buffer.clear(0, produced, numDestSamples - produced); if (destR) buffer.clear(1, produced, numDestSamples - produced); }
    }
}




================================================================================
FILE: juce\Source\audio\voices\SampleVoiceProcessor.h
================================================================================


#pragma once
#include "../graph/VoiceProcessor.h"
#include <atomic>
#include "../assets/SampleBank.h"
#include "../dsp/TimePitchProcessor.h"

class SampleVoiceProcessor : public VoiceProcessor
{
public:
    SampleVoiceProcessor(std::shared_ptr<SampleBank::Sample> sampleToPlay);
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void renderBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    void reset() override { readPosition = startSamplePos; timePitch.reset(); isPlaying = true; }
    void resetPosition() { readPosition = startSamplePos; timePitch.reset(); } // Reset position without starting playback
    void setLooping (bool shouldLoop) { isLooping = shouldLoop; }
    void setBasePitchSemitones (float semitones) { basePitchSemitones = semitones; }
    void setZoneTimeStretchRatio (float ratio) { zoneTimeStretchRatio = juce::jlimit (0.25f, 4.0f, ratio); }
    void setSourceName (const juce::String& name) { sourceName = name; }
    juce::String getSourceName () const { return sourceName; }

    // Smoothing controls
    void setSmoothingEnabled (bool enabled) { requestedSmoothingEnabled.store(enabled, std::memory_order_relaxed); }
    void setSmoothingTimeMs (float timeMs, float pitchMs) { smoothingTimeMsTime = timeMs; smoothingTimeMsPitch = pitchMs; }
    void setSmoothingAlpha (float alphaTime, float alphaPitch) { smoothingAlphaTime = alphaTime; smoothingAlphaPitch = alphaPitch; }
    void setSmoothingMaxBlocks (int maxBlocksTime, int maxBlocksPitch) { smoothingMaxBlocksTime = juce::jmax(1, maxBlocksTime); smoothingMaxBlocksPitch = juce::jmax(1, maxBlocksPitch); }
    void setSmoothingSnapThresholds (float timeRatioDelta, float pitchSemisDelta) { smoothingSnapThresholdTime = timeRatioDelta; smoothingSnapThresholdPitch = pitchSemisDelta; }
    void setSmoothingResetPolicy (bool resetOnLargeChange, bool resetWhenNoSmoothing) { resetOnSnap = resetOnLargeChange; resetOnChangeWhenNoSmoothing = resetWhenNoSmoothing; }

    // Engine selection
    enum class Engine { RubberBand = 0, Naive = 1 };
    void setEngine (Engine e)
    {
        Engine current = engine.load(std::memory_order_relaxed);
        if (current == e) return; // avoid resetting every block
        engine.store(e, std::memory_order_relaxed);
        timePitch.setMode(e==Engine::RubberBand? TimePitchProcessor::Mode::RubberBand : TimePitchProcessor::Mode::Fifo);
        timePitch.reset();
    }
    void setRubberBandOptions (bool windowShort, bool phaseIndependent) { timePitch.setOptions(windowShort, phaseIndependent); }
    
    void setPlaybackRange(double startSample, double endSample)
    {
        startSamplePos = startSample;
        endSamplePos = endSample;
    }

public:
    bool isLooping { true };
    bool isPlaying { false }; // MOVED TO PUBLIC

private:
    std::shared_ptr<SampleBank::Sample> sourceSample;
    juce::String sourceName;
    double readPosition { 0.0 };
    double outputSampleRate { 48000.0 };
    float basePitchSemitones { 0.0f }; // grid-based pitch at spawn
    float zoneTimeStretchRatio { 1.0f }; // per-voice, dynamic (zones)
    float independentPitchRatio { 1.0f }; // pitch factor that does not affect tempo
    TimePitchProcessor timePitch; // placeholder; swap to SoundTouch impl later
    juce::HeapBlock<float> interleavedInput;
    double startSamplePos { 0.0 };
    double endSamplePos { -1.0 }; // -1 indicates playback to the end of the sample
    juce::HeapBlock<float> interleavedOutput;
    int interleavedCapacityFrames { 0 };
    float lastEffectiveTime { 1.0f };
    float lastEffectivePitchSemis { 0.0f };
    // Smooth parameter transitions (independent for time & pitch)
    float smoothedTimeRatio { 1.0f };
    float smoothedPitchSemis { 0.0f };
    int   smoothingBlocksRemainingTime { 0 };
    int   smoothingBlocksRemainingPitch { 0 };
    float timeStepPerBlock { 0.0f };
    float pitchStepPerBlock { 0.0f };
    float smoothingTimeMsTime { 100.0f };  // defaults per user preference
    float smoothingTimeMsPitch { 100.0f };
    bool  smoothingEnabled { true };
    float smoothingAlphaTime { 0.4f };
    float smoothingAlphaPitch { 0.4f };
    int   smoothingMaxBlocksTime { 1 };
    int   smoothingMaxBlocksPitch { 1 };
    float smoothingSnapThresholdTime { 0.5f };    // time ratio delta to snap
    float smoothingSnapThresholdPitch { 3.0f };   // semitone delta to snap
    bool  resetOnSnap { true };
    bool  resetOnChangeWhenNoSmoothing { true };
    std::atomic<bool> requestedSmoothingEnabled { true };

    std::atomic<Engine> engine { Engine::RubberBand };
    // Fast handover state
    bool  inBypassHandover { false };
    int   handoverFramesRemaining { 0 };
    int   handoverCrossfadeFrames { 240 };
};

================================================================================
FILE: juce\Source\audio\voices\SynthVoiceProcessor.h
================================================================================


#pragma once
#include "../graph/VoiceProcessor.h"
#include "../dsp/TimePitchProcessor.h"

class SynthVoiceProcessor : public VoiceProcessor
{
public:
    SynthVoiceProcessor();
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void renderBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

private:
    double phase { 0.0 };
    double lastSampleRate { 48000.0 };
    TimePitchProcessor timePitch; // audio-level time/pitch like samples
    juce::HeapBlock<float> interleavedInput;
    juce::HeapBlock<float> interleavedOutput;
    int interleavedCapacityFrames { 0 };
    // Simple modulation so time-stretch is audible on synth
    double lfoPhase { 0.0 };
    double baseLfoRateHz { 3.0 }; // tremolo
    float tremoloDepth { 0.5f };   // 0..1
    // Stutter gate to strongly expose time scaling without changing pitch
    int stutterPos { 0 };
    double baseStutterMs { 80.0 }; // segment base length
    float stutterDuty { 0.35f };   // on-fraction of segment
};

================================================================================
FILE: juce\Source\audio\voices\SynthVoiceProcessor.cpp
================================================================================


#include "SynthVoiceProcessor.h"

SynthVoiceProcessor::SynthVoiceProcessor() = default;

void SynthVoiceProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
	// Ensure base class prepares FX chain and internal state
	VoiceProcessor::prepareToPlay (sampleRate, samplesPerBlock);
	lastSampleRate = sampleRate;
	phase = 0.0;
	// Prepare audio-level time/pitch like samples
	timePitch.prepare (sampleRate, 2, samplesPerBlock);
	interleavedCapacityFrames = samplesPerBlock;
	interleavedInput.allocate ((size_t) (interleavedCapacityFrames * 2), true);
	interleavedOutput.allocate ((size_t) (interleavedCapacityFrames * 2), true);
}

void SynthVoiceProcessor::renderBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
	juce::ignoreUnused (midi);
    // VoiceProcessor clears the out bus before calling renderBlock

	const int numSamples = buffer.getNumSamples();
	if (numSamples <= 0)
		return;

	const float baseFreq = apvts.getRawParameterValue ("frequency") ? apvts.getRawParameterValue ("frequency")->load() : 440.0f;
	const float apPitch = apvts.getRawParameterValue ("pitchSemitones") ? apvts.getRawParameterValue ("pitchSemitones")->load() : 0.0f;
	const float apPitchRatio = apvts.getRawParameterValue ("pitchRatio") ? apvts.getRawParameterValue ("pitchRatio")->load() : 1.0f;
	const double oscPitchMul = (double) apPitchRatio * std::pow (2.0, (double) apPitch / 12.0);
	const double freq = juce::jlimit (20.0, 20000.0, (double) baseFreq * oscPitchMul);
	const double sr = lastSampleRate > 0.0 ? lastSampleRate : 48000.0;
	const double delta = juce::MathConstants<double>::twoPi * (double) freq / sr;

    auto* L = buffer.getWritePointer (0);
    auto* R = buffer.getNumChannels() > 1 ? buffer.getWritePointer (1) : L;

    for (int i = 0; i < numSamples; ++i)
    {
        phase += delta;
        if (phase > juce::MathConstants<double>::twoPi)
            phase -= juce::MathConstants<double>::twoPi;
        const float s = std::sin ((float) phase);
        L[i] += s;
        R[i] += s;
    }
}




================================================================================
FILE NOT FOUND: juce\Source\audio\voices\TTSVoice.cpp
================================================================================



================================================================================
FILE NOT FOUND: juce\Source\audio\voices\TTSVoice.h
================================================================================



================================================================================
FILE: juce\Source\audio\dsp\TimePitchProcessor.h
================================================================================



================================================================================
FILE: juce\Source\preset_creator\ImGuiNodeEditorComponent.h
================================================================================


#pragma once

#include <juce_gui_extra/juce_gui_extra.h>
#include <juce_opengl/juce_opengl.h>
#include <juce_audio_devices/juce_audio_devices.h>
#include <unordered_map>
#include <tuple>
#include <deque>
#include <imgui.h>
#include "../audio/modules/ModuleProcessor.h"
#include "../audio/graph/ModularSynthProcessor.h"
#include "PresetManager.h"
#include "SampleManager.h"
#include "MidiManager.h"
#include "ControllerPresetManager.h"

// Forward declarations from Dear ImGui / imnodes
struct ImGuiContext; struct ImGuiIO; struct ImNodesContext;
class MIDIPlayerModuleProcessor;
class MultiSequencerModuleProcessor;

// Pin information struct for node editor
struct PinInfo {
    uint32_t id;      // The unique ID of the pin
    juce::String type; // The parsed type ("Pitch", "Gate", "Trig", etc.)
};

class ImGuiNodeEditorComponent : public juce::Component,
                                 private juce::OpenGLRenderer
{
public:
    ImGuiNodeEditorComponent(juce::AudioDeviceManager& deviceManager);
    ~ImGuiNodeEditorComponent() override;

    void paint (juce::Graphics&) override;
    void resized() override;
    // Input is handled by imgui_juce backend; no JUCE overrides needed
    
    void setMidiActivityFrames(int frames) { midiActivityFrames = frames; }

    void setModel (ModularSynthProcessor* model) 
    { 
        synth = model; 
        undoStack.clear(); 
        redoStack.clear(); 
    }
    
    // ADD: Callback for showing audio settings dialog
    std::function<void()> onShowAudioSettings;
    
    // UI state roundtrip
    juce::ValueTree getUiValueTree();
    // Thread-safe: queues UI state to be applied on next render frame
    void applyUiValueTree (const juce::ValueTree& uiState);
    void applyUiValueTreeNow (const juce::ValueTree& uiState);

    // --- Helper structs ---
    struct Range { float min; float max; };
    
    // --- Pin ID System Struct (declare before any usage) ---
    struct PinID
    {
        juce::uint32 logicalId = 0;
        int channel = 0;
        bool isInput = false;
        bool isMod = false;
        juce::String paramId; // used for mod pins
    };

    // OpenGLRenderer
    void newOpenGLContextCreated() override;
    void renderOpenGL() override;
    void openGLContextClosing() override;

    // Helper functions for pin type checking and UI
    PinDataType getPinDataTypeForPin(const PinID& pin);
    unsigned int getImU32ForType(PinDataType type);
    const char* pinDataTypeToString(PinDataType type);
    
    void handleRandomizePatch();
    void handleRandomizeConnections();
    void handleConnectSelectedToTrackMixer();
    void handleBeautifyLayout();
    void handleMidiPlayerAutoConnect(MIDIPlayerModuleProcessor* midiPlayer, juce::uint32 midiPlayerLid);
    void handleMidiPlayerAutoConnectVCO(MIDIPlayerModuleProcessor* midiPlayer, juce::uint32 midiPlayerLid);
    void handleMidiPlayerAutoConnectHybrid(MIDIPlayerModuleProcessor* midiPlayer, juce::uint32 midiPlayerLid);
    void handleInsertNodeOnSelectedLinks(const juce::String& nodeType);
    void insertNodeBetween(const juce::String& nodeType);
    void insertNodeBetween(const juce::String& nodeType, const PinID& srcPin, const PinID& dstPin);
    void drawInsertNodeOnLinkPopup();

    // New intelligent auto-connection system
    void parsePinName(const juce::String& fullName, juce::String& outType, int& outIndex);
    
    // Helper functions to get pins from modules
    std::vector<AudioPin> getOutputPins(const juce::String& moduleType);
    std::vector<AudioPin> getInputPins(const juce::String& moduleType);
    AudioPin* findInputPin(const juce::String& moduleType, const juce::String& pinName);
    AudioPin* findOutputPin(const juce::String& moduleType, const juce::String& pinName);
    std::vector<juce::uint32> findNodesOfType(const juce::String& moduleType);
    
    // New dynamic pin-fetching helper
    std::vector<PinInfo> getDynamicOutputPins(ModuleProcessor* module);
    
    template<typename TargetProcessorType>
    void connectToMonophonicTargets(ModuleProcessor* sourceNode, const std::map<juce::String, juce::String>& pinNameMapping, const std::vector<juce::uint32>& targetLids);
    template<typename TargetProcessorType>
    void connectToPolyphonicTarget(ModuleProcessor* sourceNode, const std::map<juce::String, juce::String>& pinNameMapping);
    void handleAutoConnectionRequests();
    
    // MultiSequencer specific handlers
    void handleMultiSequencerAutoConnectSamplers(MultiSequencerModuleProcessor* sequencer, juce::uint32 sequencerLid);
    void handleMultiSequencerAutoConnectVCO(MultiSequencerModuleProcessor* sequencer, juce::uint32 sequencerLid);

    void renderImGui();
    void handleDeletion();
    void bypassDeleteSelectedNodes();
    void bypassDeleteNode(juce::uint32 logicalId);
    void startSaveDialog();
    void startLoadDialog();
    juce::String getTypeForLogical (juce::uint32 logicalId) const;

    // --- Collision-Proof Pin ID System ---
    // 32-bit ID with guaranteed separation from node IDs:
    // Bit 31: PIN_ID_FLAG (always 1 for pins, 0 for nodes)
    // Bit 30: IS_INPUT_FLAG (1 for input, 0 for output)
    // Bits 16-29: Channel Index (14 bits, up to 16384 channels)
    // Bits 0-15: Node Logical ID (16 bits, up to 65535 nodes)
    // This ensures pin IDs can never collide with node IDs
    
    static int encodePinId(const PinID& pinId)
    {
        const juce::uint32 PIN_ID_FLAG = (1u << 31);
        const juce::uint32 IS_INPUT_FLAG = (1u << 30);
        
        juce::uint32 encoded = PIN_ID_FLAG |
                               (pinId.isInput ? IS_INPUT_FLAG : 0) |
                               (((juce::uint32)pinId.channel & 0x3FFF) << 16) |
                               (pinId.logicalId & 0xFFFF);
        
        return (int)encoded;
    }

    static PinID decodePinId(int id)
    {
        PinID pinId;
        const juce::uint32 uid = (juce::uint32)id;
        const juce::uint32 PIN_ID_FLAG = (1u << 31);
        const juce::uint32 IS_INPUT_FLAG = (1u << 30);

        // Only decode if this is actually a pin ID (has the flag set)
        if ((uid & PIN_ID_FLAG) == 0)
        {
            // This is not a pin ID! Return invalid pin
            juce::Logger::writeToLog("[ERROR] decodePinId called with non-pin ID: " + juce::String((int)id));
            pinId.logicalId = 0;
            pinId.channel = 0;
            pinId.isInput = false;
            pinId.isMod = false;
            return pinId;
        }

        pinId.logicalId = uid & 0xFFFF;
        pinId.channel   = (int)((uid >> 16) & 0x3FFF); // 14-bit mask
        pinId.isInput   = (uid & IS_INPUT_FLAG) != 0;
        pinId.isMod     = false; // handled contextually, not in the bitmask
        return pinId;
    }


    juce::OpenGLContext glContext;
    ImGuiContext* imguiContext { nullptr };
    ImGuiIO* imguiIO { nullptr };
    ImNodesContext* editorContext { nullptr };
    double lastTime { 0.0 };

    juce::AudioDeviceManager& deviceManager;
    ModularSynthProcessor* synth { nullptr };
    juce::ValueTree uiPending; // applied at next render before drawing nodes
    std::atomic<bool> graphNeedsRebuild { false };
    int midiActivityFrames = 0; // For MIDI activity indicator
    
    // Preset and sample management
    PresetManager m_presetManager;
    SampleManager m_sampleManager;
    juce::String m_presetSearchTerm;
    juce::String m_sampleSearchTerm;
    juce::File m_presetScanPath;
    juce::File m_sampleScanPath;
    std::unique_ptr<juce::FileChooser> presetPathChooser;
    std::unique_ptr<juce::FileChooser> samplePathChooser;
    
    // MIDI file management
    MidiManager m_midiManager;
    juce::File m_midiScanPath;
    juce::String m_midiSearchTerm;
    std::unique_ptr<juce::FileChooser> midiPathChooser;
    
    // Meta module editing state
    juce::uint32 metaModuleToEditLid = 0;
    
    // Cache of last-known valid node positions (used when graphNeedsRebuild prevents rendering)
    std::unordered_map<int, ImVec2> lastKnownNodePositions;

    // Selection state
    int selectedLogicalId { 0 };

    std::unique_ptr<juce::FileChooser> saveChooser, loadChooser;

    // Map of linkId -> (srcAttr, dstAttr) populated each frame
    std::unordered_map<int, std::pair<int,int>> linkIdToAttrs;
    
    // Link ID registry (cleared each frame for stateless rendering)
    struct LinkKey { int srcAttr; int dstAttr; };
    struct LinkKeyHash { size_t operator()(const LinkKey& k) const noexcept { return ((size_t)k.srcAttr << 32) ^ (size_t)k.dstAttr; } };
    struct LinkKeyEq { bool operator()(const LinkKey& a, const LinkKey& b) const noexcept { return a.srcAttr==b.srcAttr && a.dstAttr==b.dstAttr; } };
    std::unordered_map<LinkKey, int, LinkKeyHash, LinkKeyEq> linkToId;
    int nextLinkId { 1000 };
    int getLinkId(int srcAttr, int dstAttr)
    {
        LinkKey k{ srcAttr, dstAttr };
        auto it = linkToId.find(k);
        if (it != linkToId.end()) return it->second;
        const int id = nextLinkId++;
        linkToId.emplace(k, id);
        return id;
    }

    // Cable inspector highlight state (updated once per frame after EndNodeEditor)
    juce::uint32 hoveredLinkSrcId { 0 };
    juce::uint32 hoveredLinkDstId { 0 };
    static constexpr juce::uint32 kOutputHighlightId = 0xFFFFFFFFu; // sentinel for main output node highlight
    int lastHoveredLinkId { -1 }; // cache inside-editor hovered link id for post-editor use

    // Positions to apply for specific node IDs on the next render (grid space)
    std::unordered_map<int, ImVec2> pendingNodePositions;
    // Screen-space positions queued for just-created nodes (converted after draw)
    std::unordered_map<int, ImVec2> pendingNodeScreenPositions;
    // Sizes to apply for specific node IDs on the next render (for Comment nodes)
    std::unordered_map<int, ImVec2> pendingNodeSizes;

    // Cable inspector rolling stats (last N seconds) for quick visual validation
    struct ChannelHistory { std::deque<std::pair<double,float>> samples; };
    std::map<std::pair<juce::uint32,int>, ChannelHistory> inspectorHistory; // key: (logicalId, channel)
    float inspectorWindowSeconds { 5.0f };

    // --- NEW STATE FOR CABLE SPLITTING ---
    // Stores the attribute ID of the pin we are splitting from.
    // -1 means no split operation is active.
    int splittingFromAttrId = -1;

    // A map to cache the screen position of every pin attribute ID each frame.
    // This is a necessary workaround as ImNodes doesn't provide a public API
    // to get a pin's position by its ID.
    std::unordered_map<int, ImVec2> attrPositions;


    // UI state / hover
    int lastHoveredNodeId { -1 };
    bool isDraggingNode { false };
    bool snapshotAfterEditor { false }; // arm when action requires node to exist (add/duplicate)
    // zoom/pan disabled

    // --- Undo/Redo (module ops) ---
    struct Snapshot
    {
        juce::MemoryBlock synthState;
        juce::ValueTree   uiState;
    };
    std::vector<Snapshot> undoStack;
    std::vector<Snapshot> redoStack;
    void pushSnapshot();
    void restoreSnapshot (const Snapshot& s);
    
    // SampleLoader texture management (use JUCE OpenGLTexture to avoid raw GL includes)
    std::unordered_map<int, std::unique_ptr<juce::OpenGLTexture>> sampleLoaderTextureIds;

    // Preset status tracking
    juce::String currentPresetFile;
    bool isPatchDirty { false };

    // Help window
    bool showShortcutsWindow { false };

    // Shortcut debounce
    bool mixerShortcutCooldown { false };
    bool insertNodeShortcutCooldown { false };
    bool showInsertNodePopup { false };
    bool showDebugMenu { false };
    int pendingInsertLinkId { -1 };
    
    // Probe tool state
    bool isProbeModeActive { false };
    bool showProbeScope { true };
    
    // Insert node on link state
    struct LinkInfo
    {
        int linkId = -1;
        bool isMod = false;
        // For Audio links:
        PinID srcPin;
        PinID dstPin;
        // For Mod links:
        juce::uint32 srcLogicalId;
        int srcChan;
        juce::uint32 dstLogicalId;
        juce::String paramId;
    };
    LinkInfo linkToInsertOn;
    
    // Mute/Bypass state management (non-destructive)
    struct MutedNodeState {
        std::vector<ModularSynthProcessor::ConnectionInfo> incomingConnections;
        std::vector<ModularSynthProcessor::ConnectionInfo> outgoingConnections;
    };
    std::map<juce::uint32, MutedNodeState> mutedNodeStates;
    
    void muteNodeSilent(juce::uint32 logicalId);  // Store mute state without modifying graph (for loading presets)
    void muteNode(juce::uint32 logicalId);
    void unmuteNode(juce::uint32 logicalId);
    void handleMuteToggle();

    // Copy/Paste settings clipboard
    juce::ValueTree nodeSettingsClipboard;
    juce::String clipboardModuleType;

    // Helper functions
    void insertNodeOnLink(const juce::String& nodeType, const LinkInfo& linkInfo, const ImVec2& position);
    juce::File findPresetsDirectory();

    // --- NEW: Handler for node chaining shortcut ---
    void handleNodeChaining();

    // --- NEW: Handlers for color-coded chaining ---
    void handleColorCodedChaining(PinDataType targetType);
    std::vector<AudioPin> getPinsOfType(juce::uint32 logicalId, bool isInput, PinDataType targetType);
    
    // --- Recorder Output Shortcut ---
    void handleRecordOutput();
    
    // --- Unified Preset Loading ---
    void loadPresetFromFile(const juce::File& file);
    void mergePresetFromFile(const juce::File& file, ImVec2 dropPosition);
    
    // --- Meta Module (Sub-Patching) Support ---
    void handleCollapseToMetaModule();
    
    // --- Module Category Color Coding ---
    enum class ModuleCategory { Source, Effect, Modulator, Utility, Analysis, Comment, Plugin, MIDI };
    ModuleCategory getModuleCategory(const juce::String& moduleType);
    unsigned int getImU32ForCategory(ModuleCategory category, bool hovered = false);
    
    // --- Quick Add Menu ---
    std::map<juce::String, std::pair<const char*, const char*>> getModuleRegistry();
    std::vector<std::pair<juce::String, const char*>> getModuleDescriptions();
    
    // --- VST Plugin Support ---
    void addPluginModules();
};


================================================================================
FILE: juce\Source\preset_creator\ImGuiNodeEditorComponent.cpp
================================================================================


#include "ImGuiNodeEditorComponent.h"
#include "PinDatabase.h"

#include <imgui.h>
#include <imnodes.h>
#include <juce_audio_utils/juce_audio_utils.h>
#include <unordered_map>
#include <unordered_set>
#include <cstdint>
#include <algorithm>
#include "../audio/graph/ModularSynthProcessor.h"
#include "../audio/modules/ModuleProcessor.h"
#include "../audio/modules/AudioInputModuleProcessor.h"
#include "../audio/modules/AttenuverterModuleProcessor.h"
#include "../audio/modules/MapRangeModuleProcessor.h"
#include "../audio/modules/RandomModuleProcessor.h"
#include "../audio/modules/ValueModuleProcessor.h"
#include "../audio/modules/SampleLoaderModuleProcessor.h"
#include "../audio/modules/MIDIPlayerModuleProcessor.h"
#include "../audio/modules/PolyVCOModuleProcessor.h"
#include "../audio/modules/TrackMixerModuleProcessor.h"
#include "../audio/modules/MathModuleProcessor.h"
#include "../audio/modules/StepSequencerModuleProcessor.h"
#include "../audio/modules/MultiSequencerModuleProcessor.h"
#include "../audio/modules/MapRangeModuleProcessor.h"
#include "../audio/modules/LagProcessorModuleProcessor.h"
#include "../audio/modules/DeCrackleModuleProcessor.h"
#include "../audio/modules/GraphicEQModuleProcessor.h"
#include "../audio/modules/FrequencyGraphModuleProcessor.h"
#include "../audio/modules/ChorusModuleProcessor.h"
#include "../audio/modules/PhaserModuleProcessor.h"
#include "../audio/modules/CompressorModuleProcessor.h"
#include "../audio/modules/RecordModuleProcessor.h"
#include "../audio/modules/CommentModuleProcessor.h"
#include "../audio/modules/LimiterModuleProcessor.h"
#include "../audio/modules/GateModuleProcessor.h"
#include "../audio/modules/DriveModuleProcessor.h"
#include "../audio/modules/VstHostModuleProcessor.h"
// #include "../audio/modules/SnapshotSequencerModuleProcessor.h"  // Commented out - causing build errors
#include "../audio/modules/MIDICVModuleProcessor.h"
#include "../audio/modules/ScopeModuleProcessor.h"
#include "../audio/modules/MetaModuleProcessor.h"
#include "../audio/modules/InletModuleProcessor.h"
#include "../audio/modules/OutletModuleProcessor.h"
#include "PresetCreatorApplication.h"
#include <juce_audio_processors/juce_audio_processors.h>
#include <imgui_impl_juce/imgui_impl_juce.h>
#include <backends/imgui_impl_opengl2.h>
#include <juce_opengl/juce_opengl.h>

#define NODE_DEBUG 1

// --- Module Descriptions for Tooltips ---
static const char* toString(PinDataType t)
{
    switch (t)
    {
        case PinDataType::Audio: return "Audio";
        case PinDataType::CV: return "CV";
        case PinDataType::Gate: return "Gate";
        case PinDataType::Raw: return "Raw";
        default: return "Unknown";
    }
}

#define LOG_LINK(msg) do { if (NODE_DEBUG) juce::Logger::writeToLog("[LINK] " + juce::String(msg)); } while(0)

struct Range { float min; float max; };

// Forward declarations
class ModularSynthProcessor;
class RandomModuleProcessor;
class ValueModuleProcessor;
class StepSequencerModuleProcessor;
class MapRangeModuleProcessor;

// Helper methods for MapRange configuration
ImGuiNodeEditorComponent::Range getSourceRange(const ImGuiNodeEditorComponent::PinID& srcPin, ModularSynthProcessor* synth)
{
    if (synth == nullptr) return {0.0f, 1.0f};
    
    auto* module = synth->getModuleForLogical(srcPin.logicalId);
    if (auto* random = dynamic_cast<RandomModuleProcessor*>(module))
    {
        auto& ap = random->getAPVTS();
        float min = 0.0f, max = 1.0f;
        if (auto* minParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("min")))
            min = minParam->get();
        if (auto* maxParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("max")))
            max = maxParam->get();
        return {min, max};
    }
    else if (auto* value = dynamic_cast<ValueModuleProcessor*>(module))
    {
        auto& ap = value->getAPVTS();
        float min = 0.0f, max = 1.0f;
        if (auto* minParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("min")))
            min = minParam->get();
        if (auto* maxParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("max")))
            max = maxParam->get();
        return {min, max};
    }
    else if (auto* stepSeq = dynamic_cast<StepSequencerModuleProcessor*>(module))
    {
        // StepSequencer outputs CV range
        return {0.0f, 1.0f};
    }
    // Fallback: estimate from source's lastOutputValues
    // TODO: implement fallback estimation
    return {0.0f, 1.0f};
}

void configureMapRangeFor(PinDataType srcType, PinDataType dstType, MapRangeModuleProcessor& m, ImGuiNodeEditorComponent::Range inRange)
{
    auto& ap = m.getAPVTS();
    
    // Set input range
    if (auto* inMinParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("inMin")))
        *inMinParam = inRange.min;
    if (auto* inMaxParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("inMax")))
        *inMaxParam = inRange.max;
    
    // Set output range based on destination type
    if (dstType == PinDataType::Audio)
    {
        if (auto* outMinParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMin")))
            *outMinParam = -1.0f;
        if (auto* outMaxParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMax")))
            *outMaxParam = 1.0f;
    }
    else // CV or Gate
    {
        if (auto* outMinParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMin")))
            *outMinParam = 0.0f;
        if (auto* outMaxParam = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMax")))
            *outMaxParam = 1.0f;
    }
}




ImGuiNodeEditorComponent::ImGuiNodeEditorComponent(juce::AudioDeviceManager& dm)
    : deviceManager(dm)
{
    juce::Logger::writeToLog("ImGuiNodeEditorComponent constructor starting...");
    
    // --- THIS WILL BE THE SMOKING GUN ---
    juce::Logger::writeToLog("About to populate pin database...");
    populatePinDatabase(); // Initialize the pin database for color coding
    juce::Logger::writeToLog("Pin database populated.");
    
    glContext.setRenderer (this);
    glContext.setContinuousRepainting (true);
    glContext.setComponentPaintingEnabled (false);
    glContext.attachTo (*this);
    setWantsKeyboardFocus (true);
    
    // Initialize browser paths (load from saved settings or use defaults)
    if (auto* props = PresetCreatorApplication::getApp().getProperties())
    {
        // Load the last used paths, providing defaults if they don't exist
        auto appFile = juce::File::getSpecialLocation(juce::File::currentApplicationFile);
        juce::File defaultPresetPath = appFile.getParentDirectory().getChildFile("Presets");
        juce::File defaultSamplePath = appFile.getParentDirectory().getChildFile("Samples");

        m_presetScanPath = juce::File(props->getValue("presetScanPath", defaultPresetPath.getFullPathName()));
        m_sampleScanPath = juce::File(props->getValue("sampleScanPath", defaultSamplePath.getFullPathName()));
    }
    
    // Create these directories if they don't already exist
    if (!m_presetScanPath.exists())
        m_presetScanPath.createDirectory();
    if (!m_sampleScanPath.exists())
        m_sampleScanPath.createDirectory();
    
    juce::Logger::writeToLog("[UI] Preset path set to: " + m_presetScanPath.getFullPathName());
    juce::Logger::writeToLog("[UI] Sample path set to: " + m_sampleScanPath.getFullPathName());
    
    // --- MIDI BROWSER PATH INITIALIZATION ---
    if (auto* props = PresetCreatorApplication::getApp().getProperties())
    {
        auto appFile = juce::File::getSpecialLocation(juce::File::currentApplicationFile);
        juce::File defaultMidiPath = appFile.getParentDirectory().getChildFile("audio").getChildFile("MIDI");
        m_midiScanPath = juce::File(props->getValue("midiScanPath", defaultMidiPath.getFullPathName()));
    }
    if (!m_midiScanPath.exists())
        m_midiScanPath.createDirectory();
    juce::Logger::writeToLog("[UI] MIDI path set to: " + m_midiScanPath.getFullPathName());
    // --- END OF MIDI INITIALIZATION ---
}

ImGuiNodeEditorComponent::~ImGuiNodeEditorComponent()
{
    glContext.detach();
}

void ImGuiNodeEditorComponent::paint (juce::Graphics& g)
{
    juce::ignoreUnused (g);
}

void ImGuiNodeEditorComponent::resized()
{
    juce::Logger::writeToLog ("resized: " + juce::String (getWidth()) + "x" + juce::String (getHeight()));
}

// Input handled by imgui_juce backend

void ImGuiNodeEditorComponent::newOpenGLContextCreated()
{
    juce::Logger::writeToLog("ImGuiNodeEditor: newOpenGLContextCreated()");
    // Create ImGui context
    imguiContext = ImGui::CreateContext();
    imguiIO = &ImGui::GetIO();
    ImGui::StyleColorsDark();

    // --- FONT LOADING FOR CHINESE CHARACTERS ---
    ImGuiIO& io = ImGui::GetIO();
    io.Fonts->AddFontDefault(); // Load default English font

    // Define the path to your new font file
    auto appFile = juce::File::getSpecialLocation(juce::File::currentApplicationFile);
    auto fontFile = appFile.getParentDirectory().getChildFile("../../Source/assets/NotoSansSC-VariableFont_wght.ttf");

    if (fontFile.existsAsFile())
    {
        ImFontConfig config;
        config.MergeMode = true; // IMPORTANT: This merges the new font into the default one
        config.PixelSnapH = true;

        // Define the character ranges to load for Chinese
        static const ImWchar ranges[] = { 0x4e00, 0x9fbf, 0, }; // Basic CJK Unified Ideographs

        io.Fonts->AddFontFromFileTTF(fontFile.getFullPathName().toRawUTF8(), 16.0f, &config, ranges);
        juce::Logger::writeToLog("ImGuiNodeEditor: Chinese font loaded successfully");
    }
    else
    {
        juce::Logger::writeToLog("ImGuiNodeEditor: WARNING - Chinese font not found at: " + fontFile.getFullPathName());
    }
    
    // --- END OF FONT LOADING ---

    // imgui_juce backend handles key mapping internally (new IO API)

    // Setup JUCE platform backend and OpenGL2 renderer backend
    ImGui_ImplJuce_Init (*this, glContext);
    ImGui_ImplOpenGL2_Init();
    
    // Build fonts after renderer is initialized
    io.Fonts->Build();

    // Setup imnodes
    ImNodes::SetImGuiContext(ImGui::GetCurrentContext());
    editorContext = ImNodes::CreateContext();
    
    // Enable grid snapping
    ImNodes::GetStyle().GridSpacing = 64.0f;
    
    // Optional ergonomics: Alt = pan, Ctrl = detach link
    {
        auto& ioNodes = ImNodes::GetIO();
        auto& ioImgui = ImGui::GetIO();
        ioNodes.EmulateThreeButtonMouse.Modifier = &ioImgui.KeyAlt;
        ioNodes.LinkDetachWithModifierClick.Modifier = &ioImgui.KeyCtrl;
    }
    juce::Logger::writeToLog("ImGuiNodeEditor: ImNodes context created");
}

void ImGuiNodeEditorComponent::openGLContextClosing()
{
    juce::Logger::writeToLog("ImGuiNodeEditor: openGLContextClosing()");
    ImNodes::DestroyContext(editorContext);
    editorContext = nullptr;
    ImGui_ImplOpenGL2_Shutdown();
    ImGui_ImplJuce_Shutdown();
    ImGui::DestroyContext (imguiContext);
    imguiContext = nullptr; imguiIO = nullptr;
}

void ImGuiNodeEditorComponent::renderOpenGL()
{
    if (imguiContext == nullptr)
        return;

    ImGui::SetCurrentContext (imguiContext);

    // Clear background
    juce::OpenGLHelpers::clear (juce::Colours::darkgrey);

    // Ensure IO is valid and configured each frame (size, delta time, DPI scale, fonts)
    ImGuiIO& io = ImGui::GetIO();
    const float scale = (float) glContext.getRenderingScale();
    io.DisplaySize = ImVec2 ((float) getWidth(), (float) getHeight());
    io.DisplayFramebufferScale = ImVec2 (scale, scale);

    // imgui_juce will queue and apply key/mouse events; avoid manual KeysDown edits that break internal asserts
    io.MouseDrawCursor = false;

    // Mouse input comes via backend listeners; avoid overriding io.MousePos here

    const double nowMs = juce::Time::getMillisecondCounterHiRes();
    if (lastTime <= 0.0)
        lastTime = nowMs;
    const double dtMs = nowMs - lastTime;
    lastTime = nowMs;
    io.DeltaTime = (dtMs > 0.0 ? (float) (dtMs / 1000.0) : 1.0f / 60.0f);

    // Zoom/pan disabled: use default font scale and editor panning

    // Start a new frame for both backends
    ImGui_ImplOpenGL2_NewFrame();
    ImGui_ImplJuce_NewFrame();

    ImGui::NewFrame();
    // Demo is hidden by default; toggle can be added later if needed
    renderImGui();
    ImGui::Render();
    auto* dd = ImGui::GetDrawData();
    // Render via OpenGL2 backend
    ImGui_ImplOpenGL2_RenderDrawData (dd);
}

void ImGuiNodeEditorComponent::renderImGui()
{
    static int frameCounter = 0;
    frameCounter++;

    // ========================= THE DEFINITIVE FIX =========================
    //
    // Rebuild the audio graph at the START of the frame if a change is pending.
    // This ensures that the synth model is in a consistent state BEFORE we try
    // to draw the UI, eliminating the "lost frame" that caused nodes to jump.
    //
    if (graphNeedsRebuild.load())
    {
        juce::Logger::writeToLog("[GraphSync] Rebuild flag is set. Committing changes now...");
        if (synth)
        {
            synth->commitChanges();
        }
        graphNeedsRebuild = false; // Reset the flag immediately after committing.
        
        // CRITICAL: Invalidate hover state to prevent cable inspector from accessing
        // modules that were just deleted/recreated during commitChanges()
        lastHoveredLinkId = -1;
        lastHoveredNodeId = -1;
        hoveredLinkSrcId = 0;
        hoveredLinkDstId = 0;
        
        juce::Logger::writeToLog("[GraphSync] Graph rebuild complete.");
    }
    // ========================== END OF FIX ==========================

    // Frame start
    
    // --- Stateless Frame Rendering ---
    // Clear link registries at start of each frame for fully stateless rendering.
    // Pin IDs are now generated directly via bitmasking, no maps needed.
    linkIdToAttrs.clear();
    linkToId.clear();
    nextLinkId = 1000;

    // Handle F1 key for shortcuts window
    if (ImGui::IsKeyPressed(ImGuiKey_F1, false))
    {
        showShortcutsWindow = !showShortcutsWindow;
    }

    // Basic docking-like two-panels layout
    ImGui::SetNextWindowPos (ImVec2 (0, 0), ImGuiCond_Always);
    ImGui::SetNextWindowSize (ImVec2 ((float) getWidth(), (float) getHeight()), ImGuiCond_Always);
    ImGui::Begin ("Preset Creator", nullptr,
                  ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoBringToFrontOnFocus | ImGuiWindowFlags_MenuBar);

    // --- DEFINITIVE STATUS OVERLAY ---
    // This code creates the small, semi-transparent window for the preset status.
    const float sidebarWidth = 260.0f;
    const float menuBarHeight = ImGui::GetFrameHeight();
    const float padding = 10.0f;

    ImGui::SetNextWindowPos(ImVec2(sidebarWidth + padding, menuBarHeight + padding));
    ImGui::SetNextWindowBgAlpha(0.5f);
    ImGui::Begin("Preset Status Overlay", nullptr, ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoFocusOnAppearing | ImGuiWindowFlags_NoNav | ImGuiWindowFlags_AlwaysAutoResize);

    // Display the preset name or "Unsaved Patch"
    if (currentPresetFile.isNotEmpty()) {
        ImGui::Text("Preset: %s", currentPresetFile.toRawUTF8());
    } else {
        ImGui::Text("Preset: Unsaved Patch");
    }

    // Display the "Saved" or "Edited" status
    if (isPatchDirty) {
        ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), "Status: EDITED");
    } else {
        ImGui::TextColored(ImVec4(0.0f, 1.0f, 0.0f, 1.0f), "Status: SAVED");
    }

    ImGui::End();
    // --- END OF OVERLAY ---
    
    // === PROBE SCOPE OVERLAY ===
    if (synth != nullptr && showProbeScope)
    {
        if (auto* scope = dynamic_cast<ScopeModuleProcessor*>(synth->getProbeScopeProcessor()))
        {
            ImGui::SetNextWindowPos(ImVec2((float)getWidth() - 270.0f, menuBarHeight + padding), ImGuiCond_FirstUseEver);
            ImGui::SetNextWindowSize(ImVec2(260, 180), ImGuiCond_FirstUseEver);
            ImGui::SetNextWindowBgAlpha(0.85f);
            
            if (ImGui::Begin("🔬 Probe Scope", &showProbeScope, ImGuiWindowFlags_NoFocusOnAppearing))
            {
                ImGui::Text("Signal Probe");
                ImGui::Separator();
                
                // Get scope buffer
                const auto& buffer = scope->getScopeBuffer();
                
                if (buffer.getNumSamples() > 0)
                {
                    // Create a simple waveform display
                    const int numSamples = buffer.getNumSamples();
                    const float* samples = buffer.getReadPointer(0);
                    
                    // Calculate min/max for this buffer
                    float minVal = 0.0f, maxVal = 0.0f;
                    for (int i = 0; i < numSamples; ++i)
                    {
                        minVal = juce::jmin(minVal, samples[i]);
                        maxVal = juce::jmax(maxVal, samples[i]);
                    }
                    
                    // Display stats
                    ImGui::Text("Min: %.3f  Max: %.3f", minVal, maxVal);
                    ImGui::Text("Peak: %.3f", juce::jmax(std::abs(minVal), std::abs(maxVal)));
                    
                    // Draw waveform
                    ImVec2 plotSize = ImVec2(-1, 100);
                    ImGui::PlotLines("##Waveform", samples, numSamples, 0, nullptr, -1.0f, 1.0f, plotSize);
                    
                    // Button to clear probe connection
                    if (ImGui::Button("Clear Probe"))
                    {
                        synth->clearProbeConnection();
                    }
                }
                else
                {
                    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "No signal probed");
                    ImGui::Text("Right-click > Probe Signal");
                    ImGui::Text("Then click any output pin");
                }
            }
            ImGui::End();
        }
    }
    // === END OF PROBE SCOPE OVERLAY ===

    // Clean up textures for deleted sample loaders
    if (synth != nullptr)
    {
        auto infos = synth->getModulesInfo();
        std::unordered_set<int> activeSampleLoaderIds;
        for (const auto& info : infos)
        {
            if (info.second.equalsIgnoreCase("sample loader"))
            {
                activeSampleLoaderIds.insert((int)info.first);
            }
        }

        for (auto it = sampleLoaderTextureIds.begin(); it != sampleLoaderTextureIds.end(); )
        {
            if (activeSampleLoaderIds.find(it->first) == activeSampleLoaderIds.end())
            {
                if (it->second)
                    it->second.reset();
                it = sampleLoaderTextureIds.erase(it);
            }
            else
            {
                ++it;
            }
        }
    }

    // ADD THIS BLOCK:
    if (ImGui::BeginMainMenuBar())
    {
        if (ImGui::BeginMenu("File"))
        {
            if (ImGui::MenuItem("Save Preset", "Ctrl+S")) { startSaveDialog(); }
            if (ImGui::MenuItem("Load Preset", "Ctrl+O")) { startLoadDialog(); }
            
            // ADD: Audio Settings menu item
            if (ImGui::MenuItem("Audio Settings..."))
            {
                if (onShowAudioSettings)
                    onShowAudioSettings();
            }
            
            ImGui::Separator();
            
            // Plugin scanning menu item
            if (ImGui::MenuItem("Scan for Plugins..."))
            {
                // Get the application instance to access plugin management
                auto& app = PresetCreatorApplication::getApp();
                auto& formatManager = app.getPluginFormatManager();
                auto& knownPluginList = app.getKnownPluginList();

                // 1. Find the VST3 format
                juce::VST3PluginFormat* vst3Format = nullptr;
                for (int i = 0; i < formatManager.getNumFormats(); ++i)
                {
                    if (auto* format = formatManager.getFormat(i); format->getName() == "VST3")
                    {
                        vst3Format = dynamic_cast<juce::VST3PluginFormat*>(format);
                        break;
                    }
                }

                if (vst3Format != nullptr)
                {
                    // 2. Define the specific folder to scan
                    juce::File vstDir = juce::File::getSpecialLocation(juce::File::currentExecutableFile)
                                            .getParentDirectory().getChildFile("VST");

                    juce::FileSearchPath searchPath;
                    if (vstDir.isDirectory())
                    {
                        searchPath.add(vstDir);
                        juce::Logger::writeToLog("[VST Scan] Starting scan in: " + vstDir.getFullPathName());
                    }
                    else
                    {
                        vstDir.createDirectory();
                        searchPath.add(vstDir);
                        juce::Logger::writeToLog("[VST Scan] Created VST directory at: " + vstDir.getFullPathName());
                    }

                    // 3. Scan for plugins
                    auto appDataDir = juce::File::getSpecialLocation(juce::File::userApplicationDataDirectory)
                                        .getChildFile(app.getApplicationName());
                    
                    juce::PluginDirectoryScanner scanner(knownPluginList, *vst3Format, searchPath, true,
                                                         appDataDir.getChildFile("dead_plugins.txt"), true);

                    // 4. Perform the scan
                    juce::String pluginBeingScanned;
                    int numFound = 0;
                    while (scanner.scanNextFile(true, pluginBeingScanned))
                    {
                        juce::Logger::writeToLog("[VST Scan] Scanning: " + pluginBeingScanned);
                        ++numFound;
                    }
                    
                    juce::Logger::writeToLog("[VST Scan] Scan complete. Found " + juce::String(numFound) + " plugin(s).");
                    juce::Logger::writeToLog("[VST Scan] Total plugins in list: " + juce::String(knownPluginList.getNumTypes()));
                    
                    // 5. Save the updated plugin list
                    auto pluginListFile = appDataDir.getChildFile("known_plugins.xml");
                    if (auto pluginListXml = knownPluginList.createXml())
                    {
                        if (pluginListXml->writeTo(pluginListFile))
                        {
                            juce::Logger::writeToLog("[VST Scan] Saved plugin list to: " + pluginListFile.getFullPathName());
                        }
                    }
                }
                else
                {
                    juce::Logger::writeToLog("[VST Scan] ERROR: VST3 format not found in format manager.");
                }
            }
            
            ImGui::EndMenu();
        }
        
        // <<< ADD THIS ENTIRE "Edit" MENU BLOCK >>>
        if (ImGui::BeginMenu("Edit"))
        {
            if (ImGui::MenuItem("Clear Output Connections")) 
            {
                if (synth != nullptr)
                {
                    synth->clearOutputConnections();
                    pushSnapshot(); // Make the action undoable
                }
            }

            // <<< ADD THIS ENTIRE BLOCK >>>
            bool isNodeSelected = (ImNodes::NumSelectedNodes() > 0);
            if (ImGui::MenuItem("Clear Selected Node Connections", nullptr, false, isNodeSelected))
            {
                if (synth != nullptr)
                {
                    std::vector<int> selectedNodeIds(ImNodes::NumSelectedNodes());
                    ImNodes::GetSelectedNodes(selectedNodeIds.data());
                    if (!selectedNodeIds.empty())
                    {
                        // Act on the first selected node
                        juce::uint32 logicalId = (juce::uint32)selectedNodeIds[0];
                        auto nodeId = synth->getNodeIdForLogical(logicalId);
                        if (nodeId.uid != 0)
                        {
                            synth->clearConnectionsForNode(nodeId);
                            pushSnapshot(); // Make the action undoable
                        }
                    }
                }
            }
            // <<< END OF BLOCK >>>

            ImGui::EndMenu();
        }

        if (ImGui::BeginMenu("Actions"))
        {
            // This item should only be enabled if at least one node is selected
            bool anyNodesSelected = ImNodes::NumSelectedNodes() > 0;
            bool multipleNodesSelected = ImNodes::NumSelectedNodes() > 1;
            
            if (ImGui::MenuItem("Connect Selected to Track Mixer", nullptr, false, anyNodesSelected))
            {
                handleConnectSelectedToTrackMixer();
            }
            
            // Meta Module: Collapse selected nodes into a reusable sub-patch
            if (ImGui::MenuItem("Collapse to Meta Module", "Ctrl+Shift+M", false, multipleNodesSelected))
            {
                handleCollapseToMetaModule();
            }
            
            if (ImGui::MenuItem("Record Output", "Ctrl+R"))
            {
                handleRecordOutput();
            }
            
            if (ImGui::MenuItem("Beautify Layout", "Ctrl+B"))
            {
                handleBeautifyLayout();
            }
            
            ImGui::EndMenu();
        }

        if (ImGui::BeginMenu("Recording"))
        {
            if (synth != nullptr)
            {
                bool isAnyRecording = synth->isAnyModuleRecording();
                const char* label = isAnyRecording ? "Stop All Recordings" : "Start All Recordings";
                if (ImGui::MenuItem(label))
                {
                    if (isAnyRecording)
                    {
                        synth->stopAllRecorders();
                    }
                    else
                    {
                        synth->startAllRecorders();
                    }
                }
            }
            ImGui::EndMenu();
        }

        if (ImGui::BeginMenu("Generate"))
        {
            if (ImGui::MenuItem("Randomize Patch", "Ctrl+P")) { handleRandomizePatch(); }
            if (ImGui::MenuItem("Randomize Connections", "Ctrl+M")) { handleRandomizeConnections(); }
            ImGui::EndMenu();
        }

        if (ImGui::BeginMenu("Insert Node"))
        {
            bool isNodeSelected = (selectedLogicalId != 0);
            
            if (ImGui::BeginMenu("Audio Path", isNodeSelected))
            {
                if (ImGui::MenuItem("VCF")) { insertNodeBetween("VCF"); }
                if (ImGui::MenuItem("VCA")) { insertNodeBetween("VCA"); }
                if (ImGui::MenuItem("Delay")) { insertNodeBetween("Delay"); }
                if (ImGui::MenuItem("Reverb")) { insertNodeBetween("Reverb"); }
                if (ImGui::MenuItem("Chorus")) { insertNodeBetween("chorus"); }
                if (ImGui::MenuItem("Phaser")) { insertNodeBetween("phaser"); }
                if (ImGui::MenuItem("Compressor")) { insertNodeBetween("compressor"); }
                if (ImGui::MenuItem("Limiter")) { insertNodeBetween("limiter"); }
                if (ImGui::MenuItem("Gate")) { insertNodeBetween("gate"); }
                if (ImGui::MenuItem("Drive")) { insertNodeBetween("drive"); }
                if (ImGui::MenuItem("Graphic EQ")) { insertNodeBetween("graphic eq"); }
                if (ImGui::MenuItem("Waveshaper")) { insertNodeBetween("Waveshaper"); }
                if (ImGui::MenuItem("Time/Pitch Shifter")) { insertNodeBetween("timepitch"); }
                if (ImGui::MenuItem("De-Crackle")) { insertNodeBetween("De-Crackle"); }
                if (ImGui::MenuItem("Recorder")) { insertNodeBetween("recorder"); }
                if (ImGui::MenuItem("Mixer")) { insertNodeBetween("Mixer"); }
                if (ImGui::MenuItem("Shaping Oscillator")) { insertNodeBetween("shaping oscillator"); }
                if (ImGui::MenuItem("Function Generator")) { insertNodeBetween("Function Generator"); }
                if (ImGui::MenuItem("8-Band Shaper")) { insertNodeBetween("8bandshaper"); }
                if (ImGui::MenuItem("Granulator")) { insertNodeBetween("Granulator"); }
                if (ImGui::MenuItem("Harmonic Shaper")) { insertNodeBetween("harmonic shaper"); }
                if (ImGui::MenuItem("Vocal Tract Filter")) { insertNodeBetween("Vocal Tract Filter"); }
                if (ImGui::MenuItem("Scope")) { insertNodeBetween("Scope"); }
                if (ImGui::MenuItem("Frequency Graph")) { insertNodeBetween("Frequency Graph"); }
                ImGui::EndMenu();
            }
            
            if (ImGui::BeginMenu("Modulation Path", isNodeSelected))
            {
                if (ImGui::MenuItem("Attenuverter")) { insertNodeBetween("Attenuverter"); }
                if (ImGui::MenuItem("Lag Processor")) { insertNodeBetween("Lag Processor"); }
                if (ImGui::MenuItem("Math")) { insertNodeBetween("Math"); }
                if (ImGui::MenuItem("MapRange")) { insertNodeBetween("MapRange"); }
                if (ImGui::MenuItem("Quantizer")) { insertNodeBetween("Quantizer"); }
                if (ImGui::MenuItem("S&H")) { insertNodeBetween("S&H"); }
                if (ImGui::MenuItem("Rate")) { insertNodeBetween("Rate"); }
                if (ImGui::MenuItem("Logic")) { insertNodeBetween("Logic"); }
                if (ImGui::MenuItem("Comparator")) { insertNodeBetween("Comparator"); }
                if (ImGui::MenuItem("CV Mixer")) { insertNodeBetween("CV Mixer"); }
                if (ImGui::MenuItem("Sequential Switch")) { insertNodeBetween("Sequential Switch"); }
                ImGui::EndMenu();
            }
            
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Inspector"))
        {
            ImGui::SliderFloat("Window (s)", &inspectorWindowSeconds, 0.5f, 20.0f, "%.1f s");
            ImGui::EndMenu();
        }
        
        // === DEBUG MENU ===
        if (ImGui::BeginMenu("Debug"))
        {
            if (ImGui::MenuItem("Show System Diagnostics", "Ctrl+Shift+D")) 
            {
                showDebugMenu = !showDebugMenu;
            }
            
            
            if (ImGui::MenuItem("Log System State"))
            {
                if (synth != nullptr)
                {
                    juce::Logger::writeToLog("=== SYSTEM DIAGNOSTICS ===");
                    juce::Logger::writeToLog(synth->getSystemDiagnostics());
                }
            }
            
            if (ImGui::MenuItem("Log Selected Module Diagnostics"))
            {
                if (synth != nullptr && selectedLogicalId != 0)
                {
                    juce::Logger::writeToLog("=== MODULE DIAGNOSTICS ===");
                    juce::Logger::writeToLog(synth->getModuleDiagnostics(selectedLogicalId));
                }
            }
            
            ImGui::EndMenu();
        }
        
        // === TRANSPORT CONTROLS ===
        if (synth != nullptr)
        {
            // Get current transport state
            auto transportState = synth->getTransportState();
            
            // Add some spacing before transport controls
            ImGui::Separator();
            ImGui::Spacing();
            
            // Play/Pause button
            if (transportState.isPlaying)
            {
                if (ImGui::Button("Pause"))
                    synth->setPlaying(false);
            }
            else
            {
                if (ImGui::Button("Play"))
                    synth->setPlaying(true);
            }
            
            ImGui::SameLine();
            
            // Stop button (resets position)
            if (ImGui::Button("Stop"))
            {
                synth->setPlaying(false);
                synth->resetTransportPosition();
            }
            
            ImGui::SameLine();
            
            // BPM control
            float bpm = static_cast<float>(transportState.bpm);
            ImGui::SetNextItemWidth(80.0f);
            if (ImGui::DragFloat("BPM", &bpm, 0.1f, 20.0f, 999.0f, "%.1f"))
                synth->setBPM(static_cast<double>(bpm));
            
            ImGui::SameLine();
            
            // Position display
            ImGui::Text("%.2f beats", transportState.songPositionBeats);
        }
        
        // === MIDI ACTIVITY INDICATOR ===
        if (midiActivityFrames > 0)
        {
            ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(120, 255, 120, 255)); // Bright green
            ImGui::Text("MIDI");
            ImGui::PopStyleColor();
            midiActivityFrames--;
        }
        else
        {
            ImGui::PushStyleColor(ImGuiCol_Text, IM_COL32(80, 100, 80, 255)); // Dim green
            ImGui::Text("MIDI");
            ImGui::PopStyleColor();
        }
        // === END OF INDICATOR ===
        
        ImGui::EndMainMenuBar();
    }

    // --- PRESET STATUS OVERLAY ---
    ImGui::SetNextWindowPos(ImVec2(sidebarWidth + padding, menuBarHeight + padding));
    ImGui::SetNextWindowBgAlpha(0.7f);
    ImGui::Begin("Preset Status", nullptr, 
                 ImGuiWindowFlags_NoDecoration | 
                 ImGuiWindowFlags_NoMove | 
                 ImGuiWindowFlags_NoFocusOnAppearing | 
                 ImGuiWindowFlags_NoNav | 
                 ImGuiWindowFlags_AlwaysAutoResize);

    if (currentPresetFile.isNotEmpty()) {
        ImGui::Text("Preset: %s", currentPresetFile.toRawUTF8());
    } else {
        ImGui::Text("Preset: Unsaved Patch");
    }

    if (isPatchDirty) {
        ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), "Status: EDITED");
    } else {
        ImGui::TextColored(ImVec4(0.0f, 1.0f, 0.0f, 1.0f), "Status: SAVED");
    }

    ImGui::End();
    // --- END OF PRESET STATUS OVERLAY ---

    ImGui::Columns (2, nullptr, true);
    ImGui::SetColumnWidth (0, 260.0f);

    // Zoom removed

    // ADD THIS BLOCK:
    ImGui::Text("Browser");
    
    // Create a scrolling child window to contain the entire browser
    ImGui::BeginChild("BrowserScrollRegion", ImVec2(0, 0), true);
    
    // Helper lambda to recursively draw the directory tree for presets
    std::function<void(const PresetManager::DirectoryNode*)> drawPresetTree = 
        [&](const PresetManager::DirectoryNode* node)
    {
        if (!node || (node->presets.empty() && node->subdirectories.empty())) return;

        // Draw subdirectories first
        for (const auto& subdir : node->subdirectories)
        {
            if (ImGui::TreeNode(subdir->name.toRawUTF8()))
            {
                drawPresetTree(subdir.get());
                ImGui::TreePop();
            }
        }
        
        // Then draw presets in this directory with drag-and-drop support
        for (const auto& preset : node->presets)
        {
            if (m_presetSearchTerm.isEmpty() || preset.name.containsIgnoreCase(m_presetSearchTerm))
            {
                // Draw the selectable item and capture its return value
                bool clicked = ImGui::Selectable(preset.name.toRawUTF8());

                // --- THIS IS THE FIX ---
                // Check if this item is the source of a drag operation
                if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))
                {
                    // Set the payload type and data (the preset's file path)
                    const juce::String path = preset.file.getFullPathName();
                    const std::string pathStr = path.toStdString();
                    ImGui::SetDragDropPayload("DND_PRESET_PATH", pathStr.c_str(), pathStr.length() + 1);
                    
                    // Provide visual feedback while dragging
                    ImGui::SetMouseCursor(ImGuiMouseCursor_Hand);
                    ImGui::Text("Merge Preset: %s", preset.name.toRawUTF8());
                    
                    ImGui::EndDragDropSource();
                }
                // If a drag did NOT occur, and the item was clicked, load the preset
                else if (clicked)
                {
                    loadPresetFromFile(preset.file);
                }
                // --- END OF FIX ---
                
                // Tooltip (only shown when hovering, not dragging)
                if (ImGui::IsItemHovered() && !ImGui::IsMouseDragging(0) && preset.description.isNotEmpty())
                {
                    ImGui::BeginTooltip();
                    ImGui::TextUnformatted(preset.description.toRawUTF8());
                    if (!preset.tags.isEmpty())
                        ImGui::Text("Tags: %s", preset.tags.joinIntoString(", ").toRawUTF8());
                    ImGui::EndTooltip();
                }
            }
        }
    };

    // Helper to push category colors (used for all module category headers)
    auto pushCategoryColor = [&](ModuleCategory cat) {
        ImU32 color = getImU32ForCategory(cat);
        ImVec4 c = ImGui::ColorConvertU32ToFloat4(color);
        ImGui::PushStyleColor(ImGuiCol_Header, color);
        ImGui::PushStyleColor(ImGuiCol_HeaderHovered, ImGui::ColorConvertFloat4ToU32(ImVec4(c.x*1.2f, c.y*1.2f, c.z*1.2f, 1.0f)));
        ImGui::PushStyleColor(ImGuiCol_HeaderActive, ImGui::ColorConvertFloat4ToU32(ImVec4(c.x*1.4f, c.y*1.4f, c.z*1.4f, 1.0f)));
    };

    // === PRESET BROWSER ===
    ImGui::PushStyleColor(ImGuiCol_Header, IM_COL32(218, 165, 32, 255)); // Gold
    ImGui::PushStyleColor(ImGuiCol_HeaderHovered, IM_COL32(238, 185, 52, 255));
    ImGui::PushStyleColor(ImGuiCol_HeaderActive, IM_COL32(255, 205, 72, 255));
    bool presetsExpanded = ImGui::CollapsingHeader("Presets");
    ImGui::PopStyleColor(3);
    
    if (presetsExpanded)
    {
        // 1. Path Display (read-only)
        char pathBuf[1024];
        strncpy(pathBuf, m_presetScanPath.getFullPathName().toRawUTF8(), sizeof(pathBuf) - 1);
        ImGui::InputText("##presetpath", pathBuf, sizeof(pathBuf), ImGuiInputTextFlags_ReadOnly);

        // 2. "Change Path" Button
        if (ImGui::Button("Change Path##preset"))
        {
            presetPathChooser = std::make_unique<juce::FileChooser>("Select Preset Directory", m_presetScanPath);
            presetPathChooser->launchAsync(juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectDirectories,
                [this](const juce::FileChooser& fc)
                {
                    auto dir = fc.getResult();
                    if (dir.isDirectory())
                    {
                        m_presetScanPath = dir;
                        // Save the new path to the properties file
                        if (auto* props = PresetCreatorApplication::getApp().getProperties())
                        {
                            props->setValue("presetScanPath", m_presetScanPath.getFullPathName());
                        }
                    }
                });
        }
        ImGui::SameLine();

        // 3. "Scan" Button
        if (ImGui::Button("Scan##preset"))
        {
            m_presetManager.clearCache();
            m_presetManager.scanDirectory(m_presetScanPath);
        }

        // 4. Search bar for filtering results
        char searchBuf[256] = {};
        strncpy(searchBuf, m_presetSearchTerm.toRawUTF8(), sizeof(searchBuf) - 1);
        if (ImGui::InputText("Search", searchBuf, sizeof(searchBuf)))
            m_presetSearchTerm = juce::String(searchBuf);

        ImGui::Separator();

        // 5. Display hierarchical preset tree
        drawPresetTree(m_presetManager.getRootNode());
    }
    
    // Helper lambda to recursively draw the directory tree for samples
    std::function<void(const SampleManager::DirectoryNode*)> drawSampleTree = 
        [&](const SampleManager::DirectoryNode* node)
    {
        if (!node || (node->samples.empty() && node->subdirectories.empty())) return;

        // Draw subdirectories first
        for (const auto& subdir : node->subdirectories)
        {
            if (ImGui::TreeNode(subdir->name.toRawUTF8()))
            {
                drawSampleTree(subdir.get());
                ImGui::TreePop();
            }
        }
        
        // Then draw samples in this directory with drag-and-drop support
        for (const auto& sample : node->samples)
        {
            if (m_sampleSearchTerm.isEmpty() || sample.name.containsIgnoreCase(m_sampleSearchTerm))
            {
                // --- THIS IS THE HEROIC FIX ---

                // A. Draw the selectable item and capture its return value (which is true on mouse release).
                bool clicked = ImGui::Selectable(sample.name.toRawUTF8());

                // B. Check if this item is the source of a drag operation. This takes priority.
                if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))
                {
                    // Set the payload (the data we are transferring is the sample's file path).
                    const juce::String path = sample.file.getFullPathName();
                    const std::string pathStr = path.toStdString();
                    ImGui::SetDragDropPayload("DND_SAMPLE_PATH", pathStr.c_str(), pathStr.length() + 1);
                    
                    // Provide visual feedback during the drag.
                    ImGui::SetMouseCursor(ImGuiMouseCursor_Hand);
                    ImGui::Text("Dragging: %s", sample.name.toRawUTF8());
                    
                    ImGui::EndDragDropSource();
                }
                // C. If a drag did NOT occur, and the item was clicked (mouse released on it), then create the node.
                else if (clicked)
                {
                    if (synth != nullptr)
                    {
                        auto newNodeId = synth->addModule("sample loader");
                        auto newLogicalId = synth->getLogicalIdForNode(newNodeId);
                        pendingNodeScreenPositions[(int)newLogicalId] = ImGui::GetMousePos();
                        if (auto* sampleLoader = dynamic_cast<SampleLoaderModuleProcessor*>(synth->getModuleForLogical(newLogicalId)))
                        {
                            sampleLoader->loadSample(sample.file);
                        }
                        snapshotAfterEditor = true;
                    }
                }
                
                // --- END OF FIX ---

                // (Existing tooltip for sample info remains the same)
                if (ImGui::IsItemHovered() && !ImGui::IsMouseDragging(0))
                {
                    ImGui::BeginTooltip();
                    ImGui::Text("Duration: %.2f s", sample.durationSeconds);
                    ImGui::Text("Rate: %d Hz", sample.sampleRate);
                    ImGui::EndTooltip();
                }
            }
        }
    };

    // === SAMPLE BROWSER ===
    ImGui::PushStyleColor(ImGuiCol_Header, IM_COL32(0, 180, 180, 255)); // Cyan
    ImGui::PushStyleColor(ImGuiCol_HeaderHovered, IM_COL32(20, 200, 200, 255));
    ImGui::PushStyleColor(ImGuiCol_HeaderActive, IM_COL32(40, 220, 220, 255));
    bool samplesExpanded = ImGui::CollapsingHeader("Samples");
    ImGui::PopStyleColor(3);
    
    if (samplesExpanded)
    {
        // 1. Path Display (read-only)
        char pathBuf[1024];
        strncpy(pathBuf, m_sampleScanPath.getFullPathName().toRawUTF8(), sizeof(pathBuf) - 1);
        ImGui::InputText("##samplepath", pathBuf, sizeof(pathBuf), ImGuiInputTextFlags_ReadOnly);

        // 2. "Change Path" Button
        if (ImGui::Button("Change Path##sample"))
        {
            samplePathChooser = std::make_unique<juce::FileChooser>("Select Sample Directory", m_sampleScanPath);
            samplePathChooser->launchAsync(juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectDirectories,
                [this](const juce::FileChooser& fc)
                {
                    auto dir = fc.getResult();
                    if (dir.isDirectory())
                    {
                        m_sampleScanPath = dir;
                        // Save the new path to the properties file
                        if (auto* props = PresetCreatorApplication::getApp().getProperties())
                        {
                            props->setValue("sampleScanPath", m_sampleScanPath.getFullPathName());
                        }
                    }
                });
        }
        ImGui::SameLine();

        // 3. "Scan" Button
        if (ImGui::Button("Scan##sample"))
        {
            m_sampleManager.clearCache();
            m_sampleManager.scanDirectory(m_sampleScanPath);
        }

        // 4. Search bar for filtering results
        char searchBuf[256] = {};
        strncpy(searchBuf, m_sampleSearchTerm.toRawUTF8(), sizeof(searchBuf) - 1);
        if (ImGui::InputText("Search", searchBuf, sizeof(searchBuf)))
            m_sampleSearchTerm = juce::String(searchBuf);

        ImGui::Separator();

        // 5. Display hierarchical sample tree
        drawSampleTree(m_sampleManager.getRootNode());
    }
    
    ImGui::Separator();
    
    // === MIDI BROWSER ===
    ImGui::PushStyleColor(ImGuiCol_Header, IM_COL32(180, 120, 255, 255)); // Purple
    ImGui::PushStyleColor(ImGuiCol_HeaderHovered, IM_COL32(200, 140, 255, 255));
    ImGui::PushStyleColor(ImGuiCol_HeaderActive, IM_COL32(220, 160, 255, 255));
    bool midiExpanded = ImGui::CollapsingHeader("MIDI Files");
    ImGui::PopStyleColor(3);
    
    if (midiExpanded)
    {
        // 1. Path Display (read-only)
        char pathBuf[1024];
        strncpy(pathBuf, m_midiScanPath.getFullPathName().toRawUTF8(), sizeof(pathBuf) - 1);
        ImGui::InputText("##midipath", pathBuf, sizeof(pathBuf), ImGuiInputTextFlags_ReadOnly);

        // 2. "Change Path" Button
        if (ImGui::Button("Change Path##midi"))
        {
            midiPathChooser = std::make_unique<juce::FileChooser>("Select MIDI Directory", m_midiScanPath);
            midiPathChooser->launchAsync(juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectDirectories,
                [this](const juce::FileChooser& fc)
                {
                    auto dir = fc.getResult();
                    if (dir.isDirectory())
                    {
                        m_midiScanPath = dir;
                        // Save the new path to the properties file
                        if (auto* props = PresetCreatorApplication::getApp().getProperties())
                        {
                            props->setValue("midiScanPath", m_midiScanPath.getFullPathName());
                        }
                    }
                });
        }
        ImGui::SameLine();

        // 3. "Scan" Button
        if (ImGui::Button("Scan##midi"))
        {
            m_midiManager.clearCache();
            m_midiManager.scanDirectory(m_midiScanPath);
        }

        // 4. Search bar for filtering results
        char searchBuf[256] = {};
        strncpy(searchBuf, m_midiSearchTerm.toRawUTF8(), sizeof(searchBuf) - 1);
        if (ImGui::InputText("Search##midi", searchBuf, sizeof(searchBuf)))
            m_midiSearchTerm = juce::String(searchBuf);

        ImGui::Separator();
        
        // 5. Display hierarchical MIDI tree
        std::function<void(const MidiManager::DirectoryNode*)> drawMidiTree = 
            [&](const MidiManager::DirectoryNode* node)
        {
            if (!node || (node->midiFiles.empty() && node->subdirectories.empty())) return;

            // Draw subdirectories first
            for (const auto& subdir : node->subdirectories)
            {
                if (ImGui::TreeNode(subdir->name.toRawUTF8()))
                {
                    drawMidiTree(subdir.get());
                    ImGui::TreePop();
                }
            }
            
            // Then draw MIDI files in this directory with drag-and-drop support
            for (const auto& midi : node->midiFiles)
            {
                if (m_midiSearchTerm.isEmpty() || midi.name.containsIgnoreCase(m_midiSearchTerm))
                {
                    // Draw the selectable item and capture its return value
                    bool clicked = ImGui::Selectable(midi.name.toRawUTF8());

                    // Check if this item is the source of a drag operation
                    if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))
                    {
                        // Set the payload (the MIDI file path)
                        const juce::String path = midi.file.getFullPathName();
                        const std::string pathStr = path.toStdString();
                        ImGui::SetDragDropPayload("DND_MIDI_PATH", pathStr.c_str(), pathStr.length() + 1);
                        
                        // Provide visual feedback during the drag
                        ImGui::SetMouseCursor(ImGuiMouseCursor_Hand);
                        ImGui::Text("Dragging: %s", midi.name.toRawUTF8());
                        
                        ImGui::EndDragDropSource();
                    }
                    // If a drag did NOT occur, and the item was clicked, create a new MIDI Player node
                    else if (clicked)
                    {
                        if (synth != nullptr)
                        {
                            auto newNodeId = synth->addModule("midi player");
                            auto newLogicalId = synth->getLogicalIdForNode(newNodeId);
                            pendingNodeScreenPositions[(int)newLogicalId] = ImGui::GetMousePos();
                            
                            // Load the MIDI file into the new player
                            if (auto* midiPlayer = dynamic_cast<MIDIPlayerModuleProcessor*>(synth->getModuleForLogical(newLogicalId)))
                            {
                                midiPlayer->loadMIDIFile(midi.file);
                            }
                            
                            snapshotAfterEditor = true;
                        }
                    }
                    
                    // Tooltip for MIDI info (only shown when hovering, not dragging)
                    if (ImGui::IsItemHovered() && !ImGui::IsMouseDragging(0))
                    {
                        ImGui::BeginTooltip();
                        ImGui::Text("MIDI File: %s", midi.file.getFileName().toRawUTF8());
                        ImGui::EndTooltip();
                    }
                }
            }
        };
        
        drawMidiTree(m_midiManager.getRootNode());
    }
    
    ImGui::Separator();
    
    // === MODULE BROWSER ===
    ImGui::PushStyleColor(ImGuiCol_Header, IM_COL32(80, 80, 80, 255)); // Neutral Grey
    ImGui::PushStyleColor(ImGuiCol_HeaderHovered, IM_COL32(100, 100, 100, 255));
    ImGui::PushStyleColor(ImGuiCol_HeaderActive, IM_COL32(120, 120, 120, 255));
    bool modulesExpanded = ImGui::CollapsingHeader("Modules", ImGuiTreeNodeFlags_DefaultOpen);
    ImGui::PopStyleColor(3);
    
    if (modulesExpanded)
    {
    
    auto addModuleButton = [this](const char* label, const char* type)
    {
        if (ImGui::Selectable(label, false))
        {
            if (synth != nullptr)
            {
                auto nodeId = synth->addModule(type);
                const ImVec2 mouse = ImGui::GetMousePos();
                // queue screen-space placement after node is drawn to avoid assertions
                const int logicalId = (int) synth->getLogicalIdForNode (nodeId);
                pendingNodeScreenPositions[logicalId] = mouse;
                // Defer snapshot until after EndNodeEditor so the node exists in this frame
                snapshotAfterEditor = true;
            }
        }
        
        // --- FIX: Show tooltip with module description on hover ---
        if (ImGui::IsItemHovered())
        {
            ImGui::BeginTooltip();
            
            // Find the description in our list using the module's internal 'type'
            bool found = false;
            for (const auto& pair : getModuleDescriptions())
            {
                if (pair.first.equalsIgnoreCase(type))
                {
                    // If found, display it
                    ImGui::TextUnformatted(pair.second);
                    found = true;
                    break;
                }
            }
            if (!found)
            {
                // Fallback text if a description is missing
                ImGui::TextUnformatted("No description available.");
            }
            
            ImGui::EndTooltip();
        }
    };
    
    pushCategoryColor(ModuleCategory::Source);
    bool sourcesExpanded = ImGui::CollapsingHeader("Sources", ImGuiTreeNodeFlags_DefaultOpen);
    ImGui::PopStyleColor(3);
    if (sourcesExpanded) {
    addModuleButton("Audio Input", "audio input");
    addModuleButton("VCO", "VCO");
    addModuleButton("Polyphonic VCO", "polyvco");
    addModuleButton("Noise", "Noise");
        addModuleButton("Sequencer", "Sequencer");
        addModuleButton("Multi Sequencer", "multi sequencer");
        addModuleButton("Value", "Value");
        addModuleButton("Sample Loader", "sample loader");
    }
    
    pushCategoryColor(ModuleCategory::MIDI);
    bool midiFamilyExpanded = ImGui::CollapsingHeader("MIDI Family", ImGuiTreeNodeFlags_DefaultOpen);
    ImGui::PopStyleColor(3);
    if (midiFamilyExpanded) {
        addModuleButton("MIDI CV", "midi cv");
        addModuleButton("MIDI Player", "midi player");
        ImGui::Separator();
        addModuleButton("MIDI Faders", "midi faders");
        addModuleButton("MIDI Knobs", "midi knobs");
        addModuleButton("MIDI Buttons", "midi buttons");
        addModuleButton("MIDI Jog Wheel", "midi jog wheel");
        ImGui::Separator();
    }
    
    pushCategoryColor(ModuleCategory::Source);
    bool ttsFamilyExpanded = ImGui::CollapsingHeader("TTS Family", ImGuiTreeNodeFlags_DefaultOpen);
    ImGui::PopStyleColor(3);
    if (ttsFamilyExpanded) {

        addModuleButton("TTS Performer", "TTS Performer");
        addModuleButton("Vocal Tract Filter", "Vocal Tract Filter");
    }
    
    pushCategoryColor(ModuleCategory::Effect);
    bool effectsExpanded = ImGui::CollapsingHeader("Effects", ImGuiTreeNodeFlags_DefaultOpen);
    ImGui::PopStyleColor(3);
    if (effectsExpanded) {
        addModuleButton("VCF", "VCF");
        // addModuleButton("Vocal Tract Filter", "Vocal Tract Filter");
        addModuleButton("Delay", "Delay");
        addModuleButton("Reverb", "Reverb");
        addModuleButton("Chorus", "chorus");
        addModuleButton("Phaser", "phaser");
        addModuleButton("Compressor", "compressor");
        addModuleButton("Recorder", "recorder");
        addModuleButton("Limiter", "limiter");
        addModuleButton("Noise Gate", "gate");
        addModuleButton("Drive", "drive");
        addModuleButton("Graphic EQ", "graphic eq");
        addModuleButton("Time/Pitch Shifter", "timepitch");
        addModuleButton("Waveshaper", "Waveshaper");
        addModuleButton("8-Band Shaper", "8bandshaper");
        addModuleButton("Granulator", "granulator");
        addModuleButton("Harmonic Shaper", "harmonic shaper");
    }
    
    pushCategoryColor(ModuleCategory::Modulator);
    bool modulatorsExpanded = ImGui::CollapsingHeader("Modulators", ImGuiTreeNodeFlags_DefaultOpen);
    ImGui::PopStyleColor(3);
    if (modulatorsExpanded) {
        addModuleButton("LFO", "LFO");
        addModuleButton("ADSR", "ADSR");
        addModuleButton("Random", "Random");
    addModuleButton("S&H", "S&H");
            addModuleButton("Function Generator", "Function Generator");
        addModuleButton("Shaping Oscillator", "shaping oscillator");

    }
    
    pushCategoryColor(ModuleCategory::Utility);
    bool utilitiesExpanded = ImGui::CollapsingHeader("Utilities & Logic", ImGuiTreeNodeFlags_DefaultOpen);
    ImGui::PopStyleColor(3);
    if (utilitiesExpanded) {
        addModuleButton("VCA", "VCA");
        addModuleButton("Mixer", "Mixer");
        addModuleButton("CV Mixer", "cv mixer");
        addModuleButton("Track Mixer", "trackmixer");
    addModuleButton("Attenuverter", "Attenuverter");
        addModuleButton("Lag Processor", "Lag Processor");
        addModuleButton("De-Crackle", "De-Crackle");
        addModuleButton("Math", "Math");
        addModuleButton("Map Range", "MapRange");
        addModuleButton("Quantizer", "Quantizer");
        addModuleButton("Rate", "Rate");
        addModuleButton("Comparator", "Comparator");
        addModuleButton("Logic", "Logic");
        addModuleButton("Clock Divider", "ClockDivider");
        addModuleButton("Sequential Switch", "SequentialSwitch");
        addModuleButton("Tempo Clock", "tempo clock");
        addModuleButton("Snapshot Sequencer", "snapshot sequencer");
        addModuleButton("Best Practice", "best practice");
    }
    
    pushCategoryColor(ModuleCategory::Analysis);
    bool analysisExpanded = ImGui::CollapsingHeader("Analysis", ImGuiTreeNodeFlags_DefaultOpen);
    ImGui::PopStyleColor(3);
    if (analysisExpanded) {
        addModuleButton("Scope", "Scope");
        addModuleButton("Debug", "debug");
        addModuleButton("Input Debug", "input debug");
        addModuleButton("Frequency Graph", "Frequency Graph");
    }
    
    } // End of Modules collapsing header
    
    // VST Plugins section
    pushCategoryColor(ModuleCategory::Plugin);
    bool pluginsExpanded = ImGui::CollapsingHeader("Plugins", ImGuiTreeNodeFlags_DefaultOpen);
    ImGui::PopStyleColor(3);
    if (pluginsExpanded) {
        addPluginModules();
    }

    // End the scrolling region
    ImGui::EndChild();

    ImGui::NextColumn();

    // --- DEFINITIVE FIX FOR PRESET DRAG-AND-DROP WITH VISUAL FEEDBACK ---
    // Step 1: Define canvas dimensions first (needed for the drop target)
    const ImU32 GRID_COLOR = IM_COL32(50, 50, 50, 255);
    const ImU32 GRID_ORIGIN_COLOR = IM_COL32(80, 80, 80, 255);
    const float GRID_SIZE = 64.0f;
    ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();
    ImVec2 canvas_sz = ImGui::GetContentRegionAvail();
    ImVec2 canvas_p1 = ImVec2(canvas_p0.x + canvas_sz.x, canvas_p0.y + canvas_sz.y);

    // Step 2: Create a full-canvas invisible button to act as our drop area
    ImGui::SetCursorScreenPos(canvas_p0);
    ImGui::InvisibleButton("##canvas_drop_target", canvas_sz);

    // Step 3: Make this area a drop target with visual feedback
    if (ImGui::BeginDragDropTarget())
    {
        // Check if a preset payload is being hovered over the canvas
        if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_PRESET_PATH", ImGuiDragDropFlags_AcceptBeforeDelivery))
        {
            // Draw a semi-transparent overlay to show the canvas is a valid drop zone
            ImDrawList* drawList = ImGui::GetForegroundDrawList();
            drawList->AddRectFilled(canvas_p0, canvas_p1, IM_COL32(218, 165, 32, 80)); // Preset Gold color
            
            // Check if the mouse button was released to complete the drop
            if (payload->IsDelivery())
            {
                const char* path = (const char*)payload->Data;
                ImVec2 dropPos = ImGui::GetMousePos(); // Get the exact drop position
                mergePresetFromFile(juce::File(path), dropPos);
            }
        }
        ImGui::EndDragDropTarget();
    }
    // --- END OF DEFINITIVE FIX ---

    // Reset cursor position for subsequent drawing
    ImGui::SetCursorScreenPos(canvas_p0);

    // <<< ADD THIS ENTIRE BLOCK TO CACHE CONNECTION STATUS >>>
    std::unordered_set<int> connectedInputAttrs;
    std::unordered_set<int> connectedOutputAttrs;
    if (synth != nullptr)
    {
        for (const auto& c : synth->getConnectionsInfo())
        {
            int srcAttr = encodePinId({c.srcLogicalId, c.srcChan, false});
            connectedOutputAttrs.insert(srcAttr);

            int dstAttr = c.dstIsOutput ? 
                encodePinId({0, c.dstChan, true}) : 
                encodePinId({c.dstLogicalId, c.dstChan, true});
            connectedInputAttrs.insert(dstAttr);
        }
    }
    // <<< END OF BLOCK >>>

    // <<< ADD THIS BLOCK TO DEFINE COLORS >>>
    const ImU32 colPin = IM_COL32(150, 150, 150, 255); // Grey for disconnected
    const ImU32 colPinConnected = IM_COL32(120, 255, 120, 255); // Green for connected
    // <<< END OF BLOCK >>>

    // Pre-register is no longer needed - stateless encoding generates IDs on-the-fly
    // (Removed the old pre-registration loop)

    // --- BACKGROUND GRID AND COORDINATE DISPLAY ---
    // (Canvas dimensions already defined above in the drop target code)
    ImDrawList* draw_list = ImGui::GetBackgroundDrawList();
    ImVec2 panning = ImNodes::EditorContextGetPanning();

    // Draw grid lines
    for (float x = fmodf(panning.x, GRID_SIZE); x < canvas_sz.x; x += GRID_SIZE)
        draw_list->AddLine(ImVec2(canvas_p0.x + x, canvas_p0.y), ImVec2(canvas_p0.x + x, canvas_p0.y + canvas_sz.y), GRID_COLOR);
    for (float y = fmodf(panning.y, GRID_SIZE); y < canvas_sz.y; y += GRID_SIZE)
        draw_list->AddLine(ImVec2(canvas_p0.x, canvas_p0.y + y), ImVec2(canvas_p0.x + canvas_sz.x, canvas_p0.y + y), GRID_COLOR);

    // Draw thicker lines for the origin (0,0)
    ImVec2 origin_on_screen = ImVec2(canvas_p0.x + panning.x, canvas_p0.y + panning.y);
    draw_list->AddLine(ImVec2(origin_on_screen.x, canvas_p0.y), ImVec2(origin_on_screen.x, canvas_p1.y), GRID_ORIGIN_COLOR, 2.0f);
    draw_list->AddLine(ImVec2(canvas_p0.x, origin_on_screen.y), ImVec2(canvas_p1.x, origin_on_screen.y), GRID_ORIGIN_COLOR, 2.0f);

    // Draw scale markers every 400 grid units as a grid (not a cross)
    const float SCALE_INTERVAL = 400.0f;
    const ImU32 SCALE_TEXT_COLOR = IM_COL32(150, 150, 150, 80); // Reduced opacity
    ImDrawList* fg_draw_list = ImGui::GetForegroundDrawList();
    
    // X-axis scale markers - always at the bottom edge
    float gridLeft = -panning.x;
    float gridRight = canvas_sz.x - panning.x;
    int startX = (int)std::floor(gridLeft / SCALE_INTERVAL);
    int endX = (int)std::ceil(gridRight / SCALE_INTERVAL);
    
    for (int i = startX; i <= endX; ++i)
    {
        float gridX = i * SCALE_INTERVAL;
        float screenX = canvas_p0.x + panning.x + gridX;
        
        // Only draw if visible on screen
        if (screenX >= canvas_p0.x && screenX <= canvas_p1.x)
        {
            char label[16];
            snprintf(label, sizeof(label), "%.0f", gridX);
            // Always draw at bottom edge
            fg_draw_list->AddText(ImVec2(screenX + 2, canvas_p1.y - 45), SCALE_TEXT_COLOR, label);
        }
    }
    
    // Y-axis scale markers - always at the left edge
    float gridTop = -panning.y;
    float gridBottom = canvas_sz.y - panning.y;
    int startY = (int)std::floor(gridTop / SCALE_INTERVAL);
    int endY = (int)std::ceil(gridBottom / SCALE_INTERVAL);
    
    for (int i = startY; i <= endY; ++i)
    {
        float gridY = i * SCALE_INTERVAL;
        float screenY = canvas_p0.y + panning.y + gridY;
        
        // Only draw if visible on screen
        if (screenY >= canvas_p0.y && screenY <= canvas_p1.y)
        {
            char label[16];
            snprintf(label, sizeof(label), "%.0f", gridY);
            // Always draw at left edge
            fg_draw_list->AddText(ImVec2(canvas_p0.x + 5, screenY + 2), SCALE_TEXT_COLOR, label);
        }
    }

    // Mouse coordinate display overlay (bottom-left)
    ImVec2 mouseScreenPos = ImGui::GetMousePos();
    ImVec2 mouseGridPos = ImVec2(mouseScreenPos.x - canvas_p0.x - panning.x, mouseScreenPos.y - canvas_p0.y - panning.y);
    char posStr[32];
    snprintf(posStr, sizeof(posStr), "%.0f, %.0f", mouseGridPos.x, mouseGridPos.y);
    // Use the foreground draw list to ensure text is on top of everything
    // Position at bottom-left: canvas_p1.y is bottom edge, subtract text height plus padding
    ImGui::GetForegroundDrawList()->AddText(ImVec2(canvas_p0.x + 10, canvas_p1.y - 25), IM_COL32(200, 200, 200, 150), posStr);
    // --- END OF BACKGROUND GRID AND COORDINATE DISPLAY ---

    // Node canvas bound to the underlying model if available
    ImNodes::BeginNodeEditor();
    // Begin the editor

    // +++ ADD THIS LINE AT THE START OF THE RENDER LOOP +++
    attrPositions.clear(); // Clear the cache at the beginning of each frame.
    // Rebuild mod attribute mapping from currently drawn nodes only
    // modAttrToParam.clear(); // TODO: Remove when fully migrated
    // Track which attribute IDs were actually registered this frame
    std::unordered_set<int> availableAttrs;
    // Track duplicates to diagnose disappearing pins
    std::unordered_set<int> seenAttrs;
    auto linkIdOf = [this] (int srcAttr, int dstAttr) -> int
    {
        return getLinkId(srcAttr, dstAttr);
    };

    if (synth != nullptr)
    {
        // Apply any pending UI state restore (first frame after load)
        if (uiPending.isValid())
        {
            // Cache target positions to ensure they stick even if nodes are created later this frame
            auto nodes = uiPending;
for (int i = 0; i < nodes.getNumChildren(); ++i)
            {
                auto n = nodes.getChild(i);
if (! n.hasType("node")) continue;
                const int nid = (int) n.getProperty("id", 0);
                const float x = (float) n.getProperty("x", 0.0f);
const float y = (float) n.getProperty("y", 0.0f);
                if (!(x == 0.0f && y == 0.0f))
                    pendingNodePositions[nid] = ImVec2(x, y);
}
            uiPending = {};
}

        // Draw module nodes (exactly once per logical module)
        // Graph is now always in consistent state since we rebuild at frame start
        std::unordered_set<int> drawnNodes;
        for (const auto& mod : synth->getModulesInfo())
        {
            const juce::uint32 lid = mod.first;
const juce::String& type = mod.second;

            // Color-code modules by category (base colors)
            const auto moduleCategory = getModuleCategory(type);
            ImNodes::PushColorStyle(ImNodesCol_TitleBar, getImU32ForCategory(moduleCategory));
            ImNodes::PushColorStyle(ImNodesCol_TitleBarHovered, getImU32ForCategory(moduleCategory, true));
            ImNodes::PushColorStyle(ImNodesCol_TitleBarSelected, getImU32ForCategory(moduleCategory, true));

            // Highlight nodes participating in the hovered link (overrides category color)
            const bool isHoveredSource = (hoveredLinkSrcId != 0 && hoveredLinkSrcId == (juce::uint32) lid);
            const bool isHoveredDest   = (hoveredLinkDstId != 0 && hoveredLinkDstId == (juce::uint32) lid);
            if (isHoveredSource || isHoveredDest)
                ImNodes::PushColorStyle(ImNodesCol_TitleBar, IM_COL32(255, 220, 0, 255));

            // Visual feedback for muted nodes (overrides category color and hover)
            const bool isMuted = mutedNodeStates.count(lid) > 0;
            if (isMuted) {
                ImNodes::PushStyleVar(ImNodesStyleVar_NodePadding, ImVec2(8, 8));
                ImGui::PushStyleVar(ImGuiStyleVar_Alpha, 0.5f);
                ImNodes::PushColorStyle(ImNodesCol_TitleBar, IM_COL32(80, 80, 80, 255));
            }

            ImNodes::BeginNode ((int) lid);
            ImNodes::BeginNodeTitleBar();
            ImGui::TextUnformatted (type.toRawUTF8());
            ImNodes::EndNodeTitleBar();

            // Constrain node content width for compact layout and predictable label placement
            const float nodeContentWidth = 240.0f;

            // Inline parameter controls per module type
            if (synth != nullptr)
            {
if (auto* mp = synth->getModuleForLogical (lid))
{
    ImGui::PushID ((int) lid);

    // This new lambda function checks if a parameter is being modulated
    auto isParamModulated = [&](const juce::String& paramId) -> bool {
        if (!synth) return false;
        if (auto* mp = synth->getModuleForLogical(lid))
        {
            int busIdx = -1, chInBus = -1;
            // Use the new standardized routing API on the module itself
            if (!mp->getParamRouting(paramId, busIdx, chInBus)) 
                return false;

            // Calculate the absolute channel index that the graph uses for this bus/channel pair
            const int absoluteChannelIndex = mp->getChannelIndexInProcessBlockBuffer(true, busIdx, chInBus);
            if (absoluteChannelIndex < 0) return false;
            
            // Scan the simple graph connections for a match
            for (const auto& c : synth->getConnectionsInfo())
            {
                if (c.dstLogicalId == lid && c.dstChan == absoluteChannelIndex)
                    return true;
            }
        }
        return false;
    };

    // Helper to read a live, modulated value if available (respects _mod alias)
    auto getLiveValueOr = [&](const juce::String& paramId, float fallback) -> float
    {
        if (!synth) return fallback;
        if (auto* mp = synth->getModuleForLogical(lid))
            return mp->getLiveParamValueFor(paramId + "_mod", paramId + "_live", fallback);
        return fallback;
    };

    // Create a new function that calls pushSnapshot
    auto onModificationEnded = [&](){ this->pushSnapshot(); };

    // --- SPECIAL RENDERING FOR SAMPLE LOADER ---
    if (auto* sampleLoader = dynamic_cast<SampleLoaderModuleProcessor*>(mp))
    {
        // First, draw the standard parameters (buttons, sliders, etc.)
        // We pass a modified onModificationEnded to avoid creating undo states while dragging.
        sampleLoader->drawParametersInNode(nodeContentWidth, isParamModulated, onModificationEnded);

        // Now, handle the spectrogram texture and drawing
        juce::OpenGLTexture* texturePtr = nullptr;
        if (auto it = sampleLoaderTextureIds.find((int)lid); it != sampleLoaderTextureIds.end())
            texturePtr = it->second.get();

        juce::Image spectrogram = sampleLoader->getSpectrogramImage();
        if (spectrogram.isValid())
        {
            if (texturePtr == nullptr)
            {
                auto tex = std::make_unique<juce::OpenGLTexture>();
                texturePtr = tex.get();
                sampleLoaderTextureIds[(int)lid] = std::move(tex);
            }
            // Upload or update texture from JUCE image (handles format & parameters internally)
            texturePtr->loadImage(spectrogram);

            ImGui::Image((void*)(intptr_t) texturePtr->getTextureID(), ImVec2(nodeContentWidth, 100.0f));

            // Drag state is tracked per Sample Loader node to avoid cross-node interference
            static std::unordered_map<int,int> draggedHandleByNode; // lid -> -1,0,1
            int& draggedHandle = draggedHandleByNode[(int) lid];
            if (draggedHandle != 0 && draggedHandle != 1) draggedHandle = -1;
            ImGui::SetCursorScreenPos(ImGui::GetItemRectMin());
            ImGui::InvisibleButton("##spectrogram_interaction", ImVec2(nodeContentWidth, 100.0f));

            auto* drawList = ImGui::GetWindowDrawList();
            const ImVec2 rectMin = ImGui::GetItemRectMin();
            const ImVec2 rectMax = ImGui::GetItemRectMax();

            float startNorm = sampleLoader->getAPVTS().getRawParameterValue("rangeStart")->load();
            float endNorm = sampleLoader->getAPVTS().getRawParameterValue("rangeEnd")->load();

            // Use live telemetry values when modulated
            startNorm = sampleLoader->getLiveParamValueFor("rangeStart_mod", "rangeStart_live", startNorm);
            endNorm = sampleLoader->getLiveParamValueFor("rangeEnd_mod", "rangeEnd_live", endNorm);

            // Visual guard even when modulated
            const float kMinGap = 0.001f;
            startNorm = juce::jlimit(0.0f, 1.0f, startNorm);
            endNorm   = juce::jlimit(0.0f, 1.0f, endNorm);
            if (startNorm >= endNorm)
            {
                if (startNorm <= 1.0f - kMinGap)
                    endNorm = juce::jmin(1.0f, startNorm + kMinGap);
                else
                    startNorm = juce::jmax(0.0f, endNorm - kMinGap);
            }

            // --- FIX FOR BUG 1: Separate modulation checks for each handle ---
            bool startIsModulated = isParamModulated("rangeStart_mod");
            bool endIsModulated = isParamModulated("rangeEnd_mod");

            const bool itemHovered = ImGui::IsItemHovered();
            const bool itemActive  = ImGui::IsItemActive();
            if (itemHovered)
            {
                ImVec2 mousePos = ImGui::GetMousePos();
                float startHandleX = rectMin.x + startNorm * nodeContentWidth;
                float endHandleX = rectMin.x + endNorm * nodeContentWidth;

                bool canDragStart = !startIsModulated && (std::abs(mousePos.x - startHandleX) < 5);
                bool canDragEnd = !endIsModulated && (std::abs(mousePos.x - endHandleX) < 5);

                if (draggedHandle == -1 && (canDragStart || canDragEnd))
                {
                    ImGui::SetMouseCursor(ImGuiMouseCursor_ResizeEW);
                }

                if (ImGui::IsItemClicked())
                {
                    // Only allow dragging to start if the corresponding handle is not modulated
                    if (canDragStart && canDragEnd)
                        draggedHandle = (std::abs(mousePos.x - startHandleX) < std::abs(mousePos.x - endHandleX)) ? 0 : 1;
                    else if (canDragStart)
                        draggedHandle = 0;
                    else if (canDragEnd)
                        draggedHandle = 1;
                }
            }

            if (itemActive && ImGui::IsMouseReleased(0))
            {
                if (draggedHandle != -1) onModificationEnded();
                draggedHandle = -1;
            }

            // Handle the drag update, checking the specific modulation flag for the active handle
            if (itemActive && draggedHandle != -1 && ImGui::IsMouseDragging(0))
            {
                float newNormX = juce::jlimit(0.0f, 1.0f, (ImGui::GetMousePos().x - rectMin.x) / nodeContentWidth);
                if (draggedHandle == 0 && !startIsModulated)
                {
                    // Guard: start cannot be >= end
                    startNorm = juce::jmin(newNormX, endNorm - 0.001f);
                    sampleLoader->getAPVTS().getParameter("rangeStart")->setValueNotifyingHost(startNorm);
                }
                else if (draggedHandle == 1 && !endIsModulated)
                {
                    // Guard: end cannot be <= start
                    endNorm = juce::jmax(newNormX, startNorm + 0.001f);
                    sampleLoader->getAPVTS().getParameter("rangeEnd")->setValueNotifyingHost(endNorm);
                }
            }

            float startX = rectMin.x + startNorm * nodeContentWidth;
            float endX = rectMin.x + endNorm * nodeContentWidth;
            drawList->AddRectFilled(rectMin, ImVec2(startX, rectMax.y), IM_COL32(0, 0, 0, 120));
            drawList->AddRectFilled(ImVec2(endX, rectMin.y), rectMax, IM_COL32(0, 0, 0, 120));
            drawList->AddLine(ImVec2(startX, rectMin.y), ImVec2(startX, rectMax.y), IM_COL32(255, 255, 0, 255), 3.0f);
            drawList->AddLine(ImVec2(endX, rectMin.y), ImVec2(endX, rectMax.y), IM_COL32(255, 255, 0, 255), 3.0f);
        }
    }
    // --- SPECIAL RENDERING FOR AUDIO INPUT (MULTI-CHANNEL) ---
    else if (auto* audioIn = dynamic_cast<AudioInputModuleProcessor*>(mp))
    {
        auto& apvts = audioIn->getAPVTS();

        // --- Device Selectors ---
        juce::AudioDeviceManager::AudioDeviceSetup setup;
        deviceManager.getAudioDeviceSetup(setup);
        
        // Input Device
        juce::StringArray availableInputDevices;
        if (auto* deviceType = deviceManager.getAvailableDeviceTypes().getFirst()) {
            availableInputDevices = deviceType->getDeviceNames(true);
        }
        std::vector<const char*> inputDeviceItems;
        for (const auto& name : availableInputDevices) inputDeviceItems.push_back(name.toRawUTF8());
        int currentInputDeviceIndex = availableInputDevices.indexOf(setup.inputDeviceName);
        if (currentInputDeviceIndex < 0) currentInputDeviceIndex = 0;

        ImGui::PushItemWidth(nodeContentWidth);
        if (ImGui::Combo("Input Device", &currentInputDeviceIndex, inputDeviceItems.data(), (int)inputDeviceItems.size())) {
            if (currentInputDeviceIndex < availableInputDevices.size()) {
                setup.inputDeviceName = availableInputDevices[currentInputDeviceIndex];
                deviceManager.setAudioDeviceSetup(setup, true);
                onModificationEnded();
            }
        }

        // Output Device
        juce::StringArray availableOutputDevices;
        if (auto* deviceType = deviceManager.getAvailableDeviceTypes().getFirst()) {
            availableOutputDevices = deviceType->getDeviceNames(false);
        }
        std::vector<const char*> outputDeviceItems;
        for (const auto& name : availableOutputDevices) outputDeviceItems.push_back(name.toRawUTF8());
        int currentOutputDeviceIndex = availableOutputDevices.indexOf(setup.outputDeviceName);
        if (currentOutputDeviceIndex < 0) currentOutputDeviceIndex = 0;
        
        if (ImGui::Combo("Output Device", &currentOutputDeviceIndex, outputDeviceItems.data(), (int)outputDeviceItems.size())) {
            if (currentOutputDeviceIndex < availableOutputDevices.size()) {
                setup.outputDeviceName = availableOutputDevices[currentOutputDeviceIndex];
                deviceManager.setAudioDeviceSetup(setup, true);
                onModificationEnded();
            }
        }
        
        // --- Channel Count ---
        auto* numChannelsParam = static_cast<juce::AudioParameterInt*>(apvts.getParameter("numChannels"));
        int numChannels = numChannelsParam->get();
        if (ImGui::SliderInt("Channels", &numChannels, 1, AudioInputModuleProcessor::MAX_CHANNELS)) {
            *numChannelsParam = numChannels;
            onModificationEnded();
        }
        
        // --- Threshold Sliders ---
        auto* gateThreshParam = static_cast<juce::AudioParameterFloat*>(apvts.getParameter("gateThreshold"));
        float gateThresh = gateThreshParam->get();
        if (ImGui::SliderFloat("Gate Threshold", &gateThresh, 0.0f, 1.0f, "%.3f")) {
            *gateThreshParam = gateThresh;
            onModificationEnded();
        }
        
        auto* trigThreshParam = static_cast<juce::AudioParameterFloat*>(apvts.getParameter("triggerThreshold"));
        float trigThresh = trigThreshParam->get();
        if (ImGui::SliderFloat("Trigger Threshold", &trigThresh, 0.0f, 1.0f, "%.3f")) {
            *trigThreshParam = trigThresh;
            onModificationEnded();
        }
        
        ImGui::PopItemWidth();

        // --- Dynamic Channel Selectors & VU Meters ---
        auto hardwareChannels = deviceManager.getCurrentAudioDevice() ? deviceManager.getCurrentAudioDevice()->getInputChannelNames() : juce::StringArray{};
        if (!hardwareChannels.isEmpty())
        {
            std::vector<const char*> hwChannelItems;
            for (const auto& name : hardwareChannels) hwChannelItems.push_back(name.toRawUTF8());
            
            for (int i = 0; i < numChannels; ++i) {
                auto* mappingParam = static_cast<juce::AudioParameterInt*>(apvts.getParameter("channelMap" + juce::String(i)));
                int selectedHwChannel = mappingParam->get();
                selectedHwChannel = juce::jlimit(0, (int)hwChannelItems.size() - 1, selectedHwChannel);

                ImGui::PushID(i);
                ImGui::PushItemWidth(nodeContentWidth * 0.6f);
                if (ImGui::Combo(("Input for Out " + juce::String(i + 1)).toRawUTF8(), &selectedHwChannel, hwChannelItems.data(), (int)hwChannelItems.size())) {
                    *mappingParam = selectedHwChannel;
                    std::vector<int> newMapping(numChannels);
                    for (int j = 0; j < numChannels; ++j) {
                        auto* p = static_cast<juce::AudioParameterInt*>(apvts.getParameter("channelMap" + juce::String(j)));
                        newMapping[j] = p->get();
                    }
                    synth->setAudioInputChannelMapping(synth->getNodeIdForLogical(lid), newMapping);
                    onModificationEnded();
                }
                ImGui::PopItemWidth();

                ImGui::SameLine();
                
                // --- VU Meter with Threshold Lines ---
                float level = (i < (int)audioIn->channelLevels.size() && audioIn->channelLevels[i]) ? audioIn->channelLevels[i]->load() : 0.0f;
                ImVec2 meterSize(nodeContentWidth * 0.38f, ImGui::GetTextLineHeightWithSpacing() * 0.8f);
                ImGui::ProgressBar(level, meterSize, "");

                // Draw threshold lines on top of the progress bar
                ImVec2 p_min = ImGui::GetItemRectMin();
                ImVec2 p_max = ImGui::GetItemRectMax();
                ImDrawList* draw_list = ImGui::GetWindowDrawList();

                // Gate Threshold (Yellow)
                float gateLineX = p_min.x + gateThresh * (p_max.x - p_min.x);
                draw_list->AddLine(ImVec2(gateLineX, p_min.y), ImVec2(gateLineX, p_max.y), IM_COL32(255, 255, 0, 200), 2.0f);

                // Trigger Threshold (Orange)
                float trigLineX = p_min.x + trigThresh * (p_max.x - p_min.x);
                draw_list->AddLine(ImVec2(trigLineX, p_min.y), ImVec2(trigLineX, p_max.y), IM_COL32(255, 165, 0, 200), 2.0f);
                
                ImGui::PopID();
            }
        }
    }
    // --- SPECIAL RENDERING FOR SNAPSHOT SEQUENCER ---
    // Commented out - SnapshotSequencerModuleProcessor causing build errors
    /*else if (auto* snapshotSeq = dynamic_cast<SnapshotSequencerModuleProcessor*>(mp))
    {
        // First, draw the standard parameters (number of steps, etc.)
        snapshotSeq->drawParametersInNode(nodeContentWidth, isParamModulated, onModificationEnded);
        
        ImGui::Separator();
        ImGui::Text("Snapshot Management:");
        
        const int numSteps = 8; // Default, could read from parameter
        const int currentStepIndex = 0; // TODO: Get from module if exposed
        
        // Draw capture/clear buttons for each step
        for (int i = 0; i < numSteps; ++i)
        {
            ImGui::PushID(i);
            
            bool stored = snapshotSeq->isSnapshotStored(i);
            
            // Capture button
            if (ImGui::Button("Capture"))
            {
                // Get the current state of the whole synth
                juce::MemoryBlock currentState;
                synth->getStateInformation(currentState);
                
                // Store it in the snapshot sequencer
                snapshotSeq->setSnapshotForStep(i, currentState);
                
                // Create undo state
                pushSnapshot();
                
                juce::Logger::writeToLog("[SnapshotSeq UI] Captured snapshot for step " + juce::String(i));
            }
            
            ImGui::SameLine();
            
            // Clear button (only enabled if snapshot exists)
            if (!stored)
            {
                ImGui::BeginDisabled();
            }
            
            if (ImGui::Button("Clear"))
            {
                snapshotSeq->clearSnapshotForStep(i);
                pushSnapshot();
                juce::Logger::writeToLog("[SnapshotSeq UI] Cleared snapshot for step " + juce::String(i));
            }
            
            if (!stored)
            {
                ImGui::EndDisabled();
            }
            
            ImGui::PopID();
        }
    }*/
    else
    {
        mp->drawParametersInNode (nodeContentWidth, isParamModulated, onModificationEnded);
    }
    ImGui::Spacing();
    ImGui::PopID();
}
            }

            // IO per module type via helpers
            NodePinHelpers helpers;
            
            // Helper to draw right-aligned text that hugs the output pin.
            // Use the CURRENT available content width instead of a hardcoded width so labels
            // align with the node's right edge regardless of node size.
            auto rightLabelWithinWidth = [&](const char* txt, float /*nodeContentWidthIgnored*/)
            {
                const ImVec2 textSize = ImGui::CalcTextSize(txt);
                const float avail = ImGui::GetContentRegionAvail().x; // dynamic remaining width
                const float indentAmount = juce::jmax(0.0f, avail - textSize.x);
                if (indentAmount > 0.0f) ImGui::Indent(indentAmount);
                ImGui::TextUnformatted(txt);
                if (indentAmount > 0.0f) ImGui::Unindent(indentAmount);
            };
            helpers.drawAudioInputPin = [&](const char* label, int channel)
            {
                int attr = encodePinId({lid, channel, true});
                seenAttrs.insert(attr);
                availableAttrs.insert(attr);

                // Get pin data type for color coding
                PinID pinId = { lid, channel, true, false, "" };
                PinDataType pinType = this->getPinDataTypeForPin(pinId);
                unsigned int pinColor = this->getImU32ForType(pinType);

                bool isConnected = connectedInputAttrs.count(attr) > 0;
                ImNodes::PushColorStyle(ImNodesCol_Pin, isConnected ? colPinConnected : pinColor);

                ImNodes::BeginInputAttribute(attr); ImGui::TextUnformatted(label); ImNodes::EndInputAttribute();

                // --- THIS IS THE DEFINITIVE FIX ---
                // Get the bounding box of the pin circle that was just drawn.
                ImVec2 pinMin = ImGui::GetItemRectMin();
                ImVec2 pinMax = ImGui::GetItemRectMax();
                // Calculate the exact center and cache it.
                float centerX = (pinMin.x + pinMax.x) * 0.5f;
                float centerY = (pinMin.y + pinMax.y) * 0.5f;
                attrPositions[attr] = ImVec2(centerX, centerY);
                // --- END OF FIX ---

                ImNodes::PopColorStyle(); // Restore default color

                if (ImGui::IsItemHovered())
                {
                    ImGui::BeginTooltip();
                    if (isConnected) {
                        ImGui::TextColored(ImVec4(0.5f, 1.0f, 0.5f, 1.0f), "Connected");
                        // Find which output this input is connected to and show source info
                        for (const auto& c : synth->getConnectionsInfo())
                        {
                            bool isConnectedToThisPin = (!c.dstIsOutput && c.dstLogicalId == lid && c.dstChan == channel) || (c.dstIsOutput && lid == 0 && c.dstChan == channel);
                            if (isConnectedToThisPin)
                            {
                                if (auto* srcMod = synth->getModuleForLogical(c.srcLogicalId))
                                {
                                    float value = srcMod->getOutputChannelValue(c.srcChan);
                                    ImGui::Text("From %u:%d", c.srcLogicalId, c.srcChan);
                                    ImGui::Text("Value: %.3f", value);
                                }
                                break; 
                            }
                        }
                    } else {
                        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Not Connected");
                    }
                    // Show pin data type
                    ImGui::Text("Type: %s", this->pinDataTypeToString(pinType));
                    ImGui::EndTooltip();
                }
            };
            helpers.drawAudioOutputPin = [&](const char* label, int channel)
            {
                const int attr = encodePinId({(juce::uint32)lid, channel, false});
                seenAttrs.insert(attr);
                availableAttrs.insert(attr);

                PinID pinId = {(juce::uint32)lid, channel, false, false, ""};
                PinDataType pinType = this->getPinDataTypeForPin(pinId);
                unsigned int pinColor = this->getImU32ForType(pinType);
                bool isConnected = connectedOutputAttrs.count(attr) > 0;

                ImNodes::PushColorStyle(ImNodesCol_Pin, isConnected ? colPinConnected : pinColor);
                
                // OUTPUT PIN: Right-align the label within the current content width, then draw the attribute.
                ImNodes::BeginOutputAttribute(attr);
                {
                    const ImVec2 textSize = ImGui::CalcTextSize(label);
                    const float avail = ImGui::GetContentRegionAvail().x;
                    const float indentAmount = juce::jmax(0.0f, avail - textSize.x);
                    if (indentAmount > 0.0f) ImGui::Indent(indentAmount);
                    ImGui::TextUnformatted(label);
                    if (indentAmount > 0.0f) ImGui::Unindent(indentAmount);
                }
                ImNodes::EndOutputAttribute();

                // Approximate the pin center using the item rect; add style.PinOffset to reach the pin circle
                const auto& style = ImNodes::GetStyle();
                ImVec2 pinMin = ImGui::GetItemRectMin();
                ImVec2 pinMax = ImGui::GetItemRectMax();
                const float centerY = (pinMin.y + pinMax.y) * 0.5f;
                const float x_pos = pinMax.x + style.PinOffset;
                attrPositions[attr] = ImVec2(x_pos, centerY);

                ImNodes::PopColorStyle();

                if (ImGui::IsItemHovered())
                {
                    ImGui::BeginTooltip();
                    if (isConnected) {
                        ImGui::TextColored(ImVec4(0.5f, 1.0f, 0.5f, 1.0f), "Connected");
                    } else {
                        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Not Connected");
                    }
                    // Show pin data type
                    ImGui::Text("Type: %s", this->pinDataTypeToString(pinType));
                    // Show the existing value tooltip
                    if (auto* mp = synth->getModuleForLogical(lid))
                    {
                        float value = mp->getOutputChannelValue(channel);
                        ImGui::Text("Value: %.3f", value);
                    }
                    ImGui::EndTooltip();
                }
            };

            // ADD THE NEW drawParallelPins HELPER
            helpers.drawParallelPins = [&](const char* inLabel, int inChannel, const char* outLabel, int outChannel)
            {
                const float nodeContentWidth = 240.0f; // A fixed width for consistent layout

                // Draw Input Pin (Left Side) - only if inLabel is provided
                if (inLabel != nullptr)
                {
                    int attr = encodePinId({lid, inChannel, true});
                    seenAttrs.insert(attr);
                    availableAttrs.insert(attr);

                    PinID pinId = { lid, inChannel, true, false, "" };
                    PinDataType pinType = this->getPinDataTypeForPin(pinId);
                    unsigned int pinColor = this->getImU32ForType(pinType);
                    bool isConnected = connectedInputAttrs.count(attr) > 0;

                    ImNodes::PushColorStyle(ImNodesCol_Pin, isConnected ? colPinConnected : pinColor);
                    ImNodes::BeginInputAttribute(attr);
                    ImGui::TextUnformatted(inLabel);
                    ImNodes::EndInputAttribute();

                    // +++ CACHE THE PIN'S TRUE CIRCLE POSITION +++
                    const auto& style = ImNodes::GetStyle();
                    ImVec2 pinMin = ImGui::GetItemRectMin();
                    ImVec2 pinMax = ImGui::GetItemRectMax();
                    float y_center = pinMin.y + (pinMax.y - pinMin.y) * 0.5f;
                    // For input pins, the circle is to the left of the label.
                    float x_pos = pinMin.x - style.PinOffset;
                    attrPositions[attr] = ImVec2(x_pos, y_center);
                    // +++ END OF FIX +++

                    ImNodes::PopColorStyle();

                    if (ImGui::IsItemHovered())
                    {
                        ImGui::BeginTooltip();
                        if (isConnected) {
                            ImGui::TextColored(ImVec4(0.5f, 1.0f, 0.5f, 1.0f), "Connected");
                            
                            // Display the actual value from the connected source
                            for (const auto& c : synth->getConnectionsInfo())
                            {
                                if (!c.dstIsOutput && c.dstLogicalId == (juce::uint32)lid && c.dstChan == inChannel)
                                {
                                    if (auto* srcMod = synth->getModuleForLogical(c.srcLogicalId))
                                    {
                                        float value = srcMod->getOutputChannelValue(c.srcChan);
                                        ImGui::Text("From: %s (ID %u)", srcMod->getName().toRawUTF8(), (unsigned)c.srcLogicalId);
                                        ImGui::Text("Value: %.3f", value);
                                    }
                                    break;
                                }
                            }
                        } else {
                            ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Not Connected");
                        }
                        ImGui::Text("Type: %s", this->pinDataTypeToString(pinType));
                        ImGui::EndTooltip();
                    }
                }

                // --- THIS IS THE FIX ---
                // Draw Output Pin (Right Side) - only if outLabel is provided
                if (outLabel != nullptr)
                {
                    // Remove the ImGui::SameLine call and let the attribute handle positioning.
                    int attr = encodePinId({lid, outChannel, false});
                    seenAttrs.insert(attr);
                    availableAttrs.insert(attr);
                    PinID pinId = {lid, outChannel, false, false, ""};
                    PinDataType pinType = this->getPinDataTypeForPin(pinId);
                    unsigned int pinColor = this->getImU32ForType(pinType);
                    bool isConnected = connectedOutputAttrs.count(attr) > 0;
                    
                    ImNodes::PushColorStyle(ImNodesCol_Pin, isConnected ? colPinConnected : pinColor);
                    ImNodes::BeginOutputAttribute(attr);
                    rightLabelWithinWidth(outLabel, nodeContentWidth); // Use the new helper
                    ImNodes::EndOutputAttribute();
                    
                    // PIN POSITIONING: Zero offset for tight alignment with node border
                    // Text is right-aligned to nodeContentWidth, pin circle positioned right after
                    ImVec2 pinMin = ImGui::GetItemRectMin();
                    ImVec2 pinMax = ImGui::GetItemRectMax();
                    float y_center = pinMin.y + (pinMax.y - pinMin.y) * 0.5f;
                    float x_pos = pinMax.x;  // No offset - pin right at text edge!
                    attrPositions[attr] = ImVec2(x_pos, y_center);
                    
                    ImNodes::PopColorStyle();

                    if (ImGui::IsItemHovered())
                    {
                        ImGui::BeginTooltip();
                        if (isConnected) {
                            ImGui::TextColored(ImVec4(0.5f, 1.0f, 0.5f, 1.0f), "Connected");
                        } else {
                            ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Not Connected");
                        }
                        ImGui::Text("Type: %s", this->pinDataTypeToString(pinType));
                        if (auto* mp = synth->getModuleForLogical(lid))
                        {
                            float value = mp->getOutputChannelValue(outChannel);
                            ImGui::Text("Value: %.3f", value);
                        }
                        ImGui::EndTooltip();
                    }
                }
                // --- END OF FIX ---
                
                // --- THE FIX ---
                // Add a dummy item to advance the cursor to the next line.
                // This was missing, causing all rows to draw on top of each other.
                ImGui::Dummy(ImVec2(0.0f, 0.0f));
            };

            // --- DYNAMIC PIN FIX ---
            // Add a new helper that uses dynamic pin information from modules
            helpers.drawIoPins = [&](ModuleProcessor* module) {
                if (!module) return;
                const auto logicalId = module->getLogicalId();
                const auto moduleType = synth->getModuleTypeForLogical(logicalId);

                // 1. Get dynamic pins from the module itself.
                auto dynamicInputs = module->getDynamicInputPins();
                auto dynamicOutputs = module->getDynamicOutputPins();

                // 2. Get static pins from the database as a fallback.
                const auto& pinDb = getModulePinDatabase();
                auto pinInfoIt = pinDb.find(moduleType.toLowerCase());
                const bool hasStaticPinInfo = (pinInfoIt != pinDb.end());
                const auto& staticPinInfo = hasStaticPinInfo ? pinInfoIt->second : ModulePinInfo{};

                // 3. If the module has dynamic pins, use the new system
                const bool hasDynamicPins = !dynamicInputs.empty() || !dynamicOutputs.empty();
                
                if (hasDynamicPins)
                {
                    // Draw inputs (dynamic if available, otherwise static)
                    if (!dynamicInputs.empty())
                    {
                        for (const auto& pin : dynamicInputs)
                        {
                            helpers.drawAudioInputPin(pin.name.toRawUTF8(), pin.channel);
                        }
                    }
                    else
                    {
                        for (const auto& pin : staticPinInfo.audioIns)
                        {
                            helpers.drawAudioInputPin(pin.name.toRawUTF8(), pin.channel);
                        }
                    }
                    
                    // Draw outputs (dynamic if available, otherwise static)
                    if (!dynamicOutputs.empty())
                    {
                        for (const auto& pin : dynamicOutputs)
                        {
                            helpers.drawAudioOutputPin(pin.name.toRawUTF8(), pin.channel);
                        }
                    }
                    else
                    {
                        for (const auto& pin : staticPinInfo.audioOuts)
                        {
                            helpers.drawAudioOutputPin(pin.name.toRawUTF8(), pin.channel);
                        }
                    }
                }
                else
                {
                    // 4. Otherwise, fall back to the module's custom drawIoPins implementation
                    module->drawIoPins(helpers);
                }
            };
            // --- END OF DYNAMIC PIN FIX ---

            // Delegate per-module IO pin drawing
            if (synth != nullptr)
                if (auto* mp = synth->getModuleForLogical (lid))
                    helpers.drawIoPins(mp);

            // Optional per-node right-click popup
            if (ImGui::IsItemHovered() && ImGui::IsMouseReleased(ImGuiMouseButton_Right))
            {
                selectedLogicalId = (int) lid;
                ImGui::OpenPopup("NodeActionPopup");
            }

            // Legacy per-type IO drawing removed; delegated to module implementations via helpers

            ImNodes::EndNode();
            
            // Cache position for snapshot safety
            // Graph is always in consistent state since we rebuild at frame start
            lastKnownNodePositions[(int)lid] = ImNodes::GetNodeGridSpacePos((int)lid);
            
            // Pop muted node styles (in reverse order of push)
            if (isMuted) {
                ImNodes::PopColorStyle();      // Mute TitleBar
                ImGui::PopStyleVar();          // Alpha
                ImNodes::PopStyleVar();        // NodePadding
            }
            
            // Pop hover highlight color
            if (isHoveredSource || isHoveredDest)
                ImNodes::PopColorStyle();      // Hover TitleBar
            
            // Pop category colors (in reverse order of push)
            ImNodes::PopColorStyle();          // TitleBarSelected
            ImNodes::PopColorStyle();          // TitleBarHovered
            ImNodes::PopColorStyle();          // TitleBar
            
            // Apply pending placement if queued
            if (auto itS = pendingNodeScreenPositions.find((int) lid); itS != pendingNodeScreenPositions.end())
            {
                ImNodes::SetNodeScreenSpacePos((int) lid, itS->second);
                pendingNodeScreenPositions.erase(itS);
            }
        if (auto it = pendingNodePositions.find((int) lid); it != pendingNodePositions.end())
        {
            // Apply saved position once; do not write (0,0) defaults
            const ImVec2 p = it->second;
            if (!(p.x == 0.0f && p.y == 0.0f))
            {
                ImNodes::SetNodeGridSpacePos((int) lid, p);
                juce::Logger::writeToLog("[PositionRestore] Applied pending position for node " + juce::String((int)lid) + ": (" + juce::String(p.x) + ", " + juce::String(p.y) + ")");
            }
            pendingNodePositions.erase(it);
        }
            // Apply pending size if queued (for Comment nodes to prevent feedback loop)
            if (auto itSize = pendingNodeSizes.find((int) lid); itSize != pendingNodeSizes.end())
            {
                // Store the desired size in the Comment module itself
                if (auto* comment = dynamic_cast<CommentModuleProcessor*>(synth->getModuleForLogical((juce::uint32)lid)))
                {
                    comment->nodeWidth = itSize->second.x;
                    comment->nodeHeight = itSize->second.y;
                }
                pendingNodeSizes.erase(itSize);
            }
            drawnNodes.insert((int) lid);
        }

        // Node action popup (Delete / Duplicate)
        bool triggerInsertMixer = false;
        if (ImGui::BeginPopup("NodeActionPopup"))
        {
            if (ImGui::MenuItem("Delete") && selectedLogicalId != 0)
            {
                mutedNodeStates.erase((juce::uint32)selectedLogicalId); // Clean up muted state if exists
                synth->removeModule (synth->getNodeIdForLogical ((juce::uint32) selectedLogicalId));
                graphNeedsRebuild = true;
                // Post-state snapshot
                pushSnapshot();
                selectedLogicalId = 0;
            }
            if (ImGui::MenuItem("Duplicate") && selectedLogicalId != 0)
            {
                const juce::String type = getTypeForLogical ((juce::uint32) selectedLogicalId);
                if (! type.isEmpty())
                {
                    auto newNodeId = synth->addModule (type);
                    graphNeedsRebuild = true;
                    if (auto* src = synth->getModuleForLogical ((juce::uint32) selectedLogicalId))
                        if (auto* dst = synth->getModuleForLogical (synth->getLogicalIdForNode(newNodeId)))
                            dst->getAPVTS().replaceState (src->getAPVTS().copyState());
                    ImVec2 pos = ImNodes::GetNodeGridSpacePos (selectedLogicalId);
                    ImNodes::SetNodeGridSpacePos ((int) synth->getLogicalIdForNode(newNodeId), ImVec2 (pos.x + 40.0f, pos.y + 40.0f));
                    // Post-state snapshot after duplication and position
                    pushSnapshot();
                }
            }
            if (ImGui::MenuItem("Insert Mixer", "Ctrl+T") && selectedLogicalId != 0) { triggerInsertMixer = true; }
            ImGui::EndPopup();
        }

        // Shortcut: Ctrl+T to insert a Mixer after selected node and reroute
        // Debounced Ctrl+T
        const bool ctrlDown = ImGui::GetIO().KeyCtrl;
        if (!ctrlDown) {
            mixerShortcutCooldown = false;
            insertNodeShortcutCooldown = false;
        }
        // Ctrl+R: Record Output
        if (ctrlDown && ImGui::IsKeyPressed(ImGuiKey_R, false))
        {
            handleRecordOutput();
        }
        
        if ((triggerInsertMixer || (selectedLogicalId != 0 && ctrlDown && ImGui::IsKeyPressed(ImGuiKey_T))) && !mixerShortcutCooldown)
        {
            mixerShortcutCooldown = true; // Prevent re-triggering in the same frame
            const juce::uint32 srcLid = (juce::uint32) selectedLogicalId;

            juce::Logger::writeToLog("--- [InsertMixer] Start ---");
            juce::Logger::writeToLog("[InsertMixer] Selected Node Logical ID: " + juce::String(srcLid));

            auto srcNodeId = synth->getNodeIdForLogical(srcLid);
            if (srcNodeId.uid == 0) 
            {
                juce::Logger::writeToLog("[InsertMixer] ABORT: Source node with logical ID " + juce::String(srcLid) + " is invalid or could not be found.");
            } 
            else 
            {
                // 1. Collect all outgoing connections from the selected node
                std::vector<ModularSynthProcessor::ConnectionInfo> outgoingConnections;
                for (const auto& c : synth->getConnectionsInfo()) {
                    if (c.srcLogicalId == srcLid) {
                        outgoingConnections.push_back(c);
                    }
                }
                juce::Logger::writeToLog("[InsertMixer] Found " + juce::String(outgoingConnections.size()) + " outgoing connections to reroute.");
                for (const auto& c : outgoingConnections) {
                    juce::String destStr = c.dstIsOutput ? "Main Output" : "Node " + juce::String(c.dstLogicalId);
                    juce::Logger::writeToLog("  - Stored connection: [Src: " + juce::String(c.srcLogicalId) + ":" + juce::String(c.srcChan) + "] -> [Dst: " + destStr + ":" + juce::String(c.dstChan) + "]");
                }

                // 2. Create and position the new mixer node intelligently
                auto mixNodeIdGraph = synth->addModule("Mixer");
                const juce::uint32 mixLid = synth->getLogicalIdForNode(mixNodeIdGraph);
                
                ImVec2 srcPos = ImNodes::GetNodeGridSpacePos(selectedLogicalId);
                ImVec2 avgDestPos = srcPos; // Default to source pos if no outputs
                
                if (!outgoingConnections.empty())
                {
                    float totalX = 0.0f, totalY = 0.0f;
                    for (const auto& c : outgoingConnections)
                    {
                        int destId = c.dstIsOutput ? 0 : (int)c.dstLogicalId;
                        ImVec2 pos = ImNodes::GetNodeGridSpacePos(destId);
                        totalX += pos.x;
                        totalY += pos.y;
                    }
                    avgDestPos = ImVec2(totalX / outgoingConnections.size(), totalY / outgoingConnections.size());
                }
                else
                {
                    // If there are no outgoing connections, place it to the right
                    avgDestPos.x += 600.0f;
                }
                
                // Place the new mixer halfway between the source and the average destination
                pendingNodePositions[(int)mixLid] = ImVec2((srcPos.x + avgDestPos.x) * 0.5f, (srcPos.y + avgDestPos.y) * 0.5f);
                juce::Logger::writeToLog("[InsertMixer] Added new Mixer. Logical ID: " + juce::String(mixLid) + ", Node ID: " + juce::String(mixNodeIdGraph.uid));

                // 3. Disconnect all original outgoing links
                juce::Logger::writeToLog("[InsertMixer] Disconnecting original links...");
                for (const auto& c : outgoingConnections) {
                    auto currentSrcNodeId = synth->getNodeIdForLogical(c.srcLogicalId);
                    auto dstNodeId = c.dstIsOutput ? synth->getOutputNodeID() : synth->getNodeIdForLogical(c.dstLogicalId);

                    if (currentSrcNodeId.uid != 0 && dstNodeId.uid != 0) {
                        bool success = synth->disconnect(currentSrcNodeId, c.srcChan, dstNodeId, c.dstChan);
                        juce::Logger::writeToLog("  - Disconnecting [" + juce::String(currentSrcNodeId.uid) + ":" + juce::String(c.srcChan) + "] -> [" + juce::String(dstNodeId.uid) + ":" + juce::String(c.dstChan) + "]... " + (success ? "SUCCESS" : "FAILED"));
                    } else {
                        juce::Logger::writeToLog("  - SKIPPING Disconnect due to invalid node ID.");
                    }
                }

                // 4. Connect the source node to the new mixer's first input
                juce::Logger::writeToLog("[InsertMixer] Connecting source node to new mixer...");
                bool c1 = synth->connect(srcNodeId, 0, mixNodeIdGraph, 0); // L to In A L
                juce::Logger::writeToLog("  - Connecting [" + juce::String(srcNodeId.uid) + ":0] -> [" + juce::String(mixNodeIdGraph.uid) + ":0]... " + (c1 ? "SUCCESS" : "FAILED"));
                bool c2 = synth->connect(srcNodeId, 1, mixNodeIdGraph, 1); // R to In A R
                juce::Logger::writeToLog("  - Connecting [" + juce::String(srcNodeId.uid) + ":1] -> [" + juce::String(mixNodeIdGraph.uid) + ":1]... " + (c2 ? "SUCCESS" : "FAILED"));


                // 5. Connect the mixer's output to all the original destinations (maintaining the chain)
                juce::Logger::writeToLog("[InsertMixer] Connecting mixer to original destinations to maintain chain...");
                if (outgoingConnections.empty()) {
                    juce::Logger::writeToLog("  - No original outgoing connections. Connecting mixer to Main Output by default.");
                    auto outNode = synth->getOutputNodeID();
                    if (outNode.uid != 0) {
                        bool o1 = synth->connect(mixNodeIdGraph, 0, outNode, 0);
                        juce::Logger::writeToLog("  - Connecting [" + juce::String(mixNodeIdGraph.uid) + ":0] -> [Output:0]... " + (o1 ? "SUCCESS" : "FAILED"));
                        bool o2 = synth->connect(mixNodeIdGraph, 1, outNode, 1);
                        juce::Logger::writeToLog("  - Connecting [" + juce::String(mixNodeIdGraph.uid) + ":1] -> [Output:1]... " + (o2 ? "SUCCESS" : "FAILED"));
                    }
                } else {
                    for (const auto& c : outgoingConnections) {
                        auto dstNodeId = c.dstIsOutput ? synth->getOutputNodeID() : synth->getNodeIdForLogical(c.dstLogicalId);
                        if (dstNodeId.uid != 0) {
                            // Connect mixer output to the same destination the original node was connected to
                            // This maintains the chain: original -> mixer -> destination
                            bool success = synth->connect(mixNodeIdGraph, c.srcChan, dstNodeId, c.dstChan);
                            juce::String destStr = c.dstIsOutput ? "Main Output" : "Node " + juce::String(c.dstLogicalId);
                            juce::Logger::writeToLog("  - Maintaining chain: Mixer [" + juce::String(mixNodeIdGraph.uid) + ":" + juce::String(c.srcChan) + "] -> " + destStr + "[" + juce::String(dstNodeId.uid) + ":" + juce::String(c.dstChan) + "]... " + (success ? "SUCCESS" : "FAILED"));
                        } else {
                            juce::Logger::writeToLog("  - SKIPPING Reconnect due to invalid destination node ID for original logical ID " + juce::String(c.dstLogicalId));
                        }
                    }
                }

                graphNeedsRebuild = true;
                pushSnapshot(); // Make the entire operation undoable
                juce::Logger::writeToLog("[InsertMixer] Rerouting complete. Flagging for graph rebuild.");
            }
            juce::Logger::writeToLog("--- [InsertMixer] End ---");
        }

        // Shortcut: Ctrl+I to show Insert Node popup menu
        if (selectedLogicalId != 0 && ctrlDown && ImGui::IsKeyPressed(ImGuiKey_I) && !insertNodeShortcutCooldown)
        {
            insertNodeShortcutCooldown = true;
            showInsertNodePopup = true;
        }

        // Insert Node popup menu
        if (showInsertNodePopup)
        {
            ImGui::OpenPopup("InsertNodePopup");
            showInsertNodePopup = false;
        }

        if (ImGui::BeginPopup("InsertNodePopup"))
        {
            ImGui::Text("Insert Node Between Connections");
            
            // Audio Path
            if (ImGui::MenuItem("VCF")) { insertNodeBetween("VCF"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("VCA")) { insertNodeBetween("VCA"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Delay")) { insertNodeBetween("Delay"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Reverb")) { insertNodeBetween("Reverb"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Mixer")) { insertNodeBetween("Mixer"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Recorder")) { insertNodeBetween("recorder"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Shaping Oscillator")) { insertNodeBetween("shaping oscillator"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("8-Band Shaper")) { insertNodeBetween("8bandshaper"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Granulator")) { insertNodeBetween("Granulator"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Harmonic Shaper")) { insertNodeBetween("harmonic shaper"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Vocal Tract Filter")) { insertNodeBetween("Vocal Tract Filter"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Scope")) { insertNodeBetween("Scope"); ImGui::CloseCurrentPopup(); }
            
            ImGui::Separator();
            
            // Modulation Path
            if (ImGui::MenuItem("Attenuverter")) { insertNodeBetween("Attenuverter"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Math")) { insertNodeBetween("Math"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Comparator")) { insertNodeBetween("Comparator"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("CV Mixer")) { insertNodeBetween("CV Mixer"); ImGui::CloseCurrentPopup(); }
            if (ImGui::MenuItem("Sequential Switch")) { insertNodeBetween("Sequential Switch"); ImGui::CloseCurrentPopup(); }
            
            ImGui::EndPopup();
        }

        // Output sink node with stereo inputs (single, fixed ID 0)
        const bool isOutputHovered = (hoveredLinkDstId == kOutputHighlightId);
        if (isOutputHovered)
            ImNodes::PushColorStyle(ImNodesCol_TitleBar, IM_COL32(255, 220, 0, 255));
        ImNodes::BeginNode (0);
        ImNodes::BeginNodeTitleBar();
        ImGui::TextUnformatted ("Output");
        ImNodes::EndNodeTitleBar();
        if (isOutputHovered)
            ImNodes::PopColorStyle();
        
        // In L pin with proper Audio type coloring (green)
        { 
            int a = encodePinId({0, 0, true}); 
            seenAttrs.insert(a); 
            availableAttrs.insert(a); 
            bool isConnected = connectedInputAttrs.count(a) > 0;
            PinID pinId = {0, 0, true, false, ""};
            PinDataType pinType = getPinDataTypeForPin(pinId);
            unsigned int pinColor = getImU32ForType(pinType);
            ImNodes::PushColorStyle(ImNodesCol_Pin, isConnected ? colPinConnected : pinColor);
            ImNodes::BeginInputAttribute (a);
            ImGui::Text ("In L");
            ImNodes::EndInputAttribute();
            ImNodes::PopColorStyle();
        }
        
        // In R pin with proper Audio type coloring (green)
        { 
            int a = encodePinId({0, 1, true}); 
            seenAttrs.insert(a); 
            availableAttrs.insert(a); 
            bool isConnected = connectedInputAttrs.count(a) > 0;
            PinID pinId = {0, 1, true, false, ""};
            PinDataType pinType = getPinDataTypeForPin(pinId);
            unsigned int pinColor = getImU32ForType(pinType);
            ImNodes::PushColorStyle(ImNodesCol_Pin, isConnected ? colPinConnected : pinColor);
            ImNodes::BeginInputAttribute (a);
            ImGui::Text ("In R");
            ImNodes::EndInputAttribute();
            ImNodes::PopColorStyle();
        }
        
        ImNodes::EndNode();
        
        // Cache output node position for snapshot safety
        // Graph is always in consistent state since we rebuild at frame start
        lastKnownNodePositions[0] = ImNodes::GetNodeGridSpacePos(0);
        
        if (auto it = pendingNodePositions.find(0); it != pendingNodePositions.end())
        {
            ImNodes::SetNodeGridSpacePos(0, it->second);
            juce::Logger::writeToLog("[PositionRestore] Applied pending position for output node 0: (" + juce::String(it->second.x) + ", " + juce::String(it->second.y) + ")");
            pendingNodePositions.erase(it);
        }
        drawnNodes.insert(0);

        // Use last frame's hovered node id for highlighting (queried after EndNodeEditor)
        int hoveredNodeId = lastHoveredNodeId;

        // Draw existing audio connections (IDs stable via bitmasking)
        int cableIdx = 0;
        for (const auto& c : synth->getConnectionsInfo())
        {
            
            // Skip links whose nodes weren't drawn this frame (e.g., just deleted)
            if (c.srcLogicalId != 0 && ! drawnNodes.count((int) c.srcLogicalId)) {
                continue;
            }
            if (! c.dstIsOutput && c.dstLogicalId != 0 && ! drawnNodes.count((int) c.dstLogicalId)) {
                continue;
            }
            
            const int srcAttr = encodePinId({c.srcLogicalId, c.srcChan, false});
            const int dstAttr = c.dstIsOutput ? encodePinId({0, c.dstChan, true}) : encodePinId({c.dstLogicalId, c.dstChan, true});
            
            if (! availableAttrs.count(srcAttr) || ! availableAttrs.count(dstAttr))
            {
                static std::unordered_set<std::string> skipOnce;
                const std::string key = std::to_string((int)c.srcLogicalId) + ":" + std::to_string(c.srcChan) + "->" +
                                         (c.dstIsOutput? std::string("0") : std::to_string((int)c.dstLogicalId)) + ":" + std::to_string(c.dstChan);
                if (skipOnce.insert(key).second)
                {
                    juce::Logger::writeToLog(
                        juce::String("[ImNodes][SKIP] missing attr: srcPresent=") + (availableAttrs.count(srcAttr)?"1":"0") +
                        " dstPresent=" + (availableAttrs.count(dstAttr)?"1":"0") +
                        " srcKey=(lid=" + juce::String((int)c.srcLogicalId) + ",ch=" + juce::String(c.srcChan) + ")" +
                        " dstKey=(lid=" + juce::String(c.dstIsOutput?0:(int)c.dstLogicalId) + ",ch=" + juce::String(c.dstChan) + ",in=1) id(s)=" +
                        juce::String(srcAttr) + "," + juce::String(dstAttr));
                }
                continue;
            }
            
            const int linkId = linkIdOf(srcAttr, dstAttr);
            linkIdToAttrs[linkId] = { srcAttr, dstAttr };
            
            // --- THIS IS THE DEFINITIVE FIX ---
            // 1. Determine the base color and check for signal activity.
            auto srcPin = decodePinId(srcAttr);
            PinDataType linkDataType = getPinDataTypeForPin(srcPin);
            ImU32 linkColor = getImU32ForType(linkDataType);
            float magnitude = 0.0f;
            bool hasThicknessModification = false;

            if (auto* srcModule = synth->getModuleForLogical(srcPin.logicalId))
            {
                magnitude = srcModule->getOutputChannelValue(srcPin.channel);
            }

            // 2. If the signal is active, calculate a glowing/blinking color.
            if (magnitude > 0.01f)
            {
                const float blinkSpeed = 8.0f;
                float blinkFactor = (std::sin((float)ImGui::GetTime() * blinkSpeed) + 1.0f) * 0.5f;
                float glowIntensity = juce::jlimit(0.0f, 1.0f, blinkFactor * magnitude * 2.0f);

                // Brighten the base color and modulate alpha for glow effect
                ImVec4 colorVec = ImGui::ColorConvertU32ToFloat4(linkColor);
                colorVec.x = juce::jmin(1.0f, colorVec.x + glowIntensity * 0.4f);
                colorVec.y = juce::jmin(1.0f, colorVec.y + glowIntensity * 0.4f);
                colorVec.z = juce::jmin(1.0f, colorVec.z + glowIntensity * 0.4f);
                colorVec.w = juce::jlimit(0.5f, 1.0f, 0.5f + glowIntensity * 0.5f);
                linkColor = ImGui::ColorConvertFloat4ToU32(colorVec);

                // Make active cables slightly thicker
                ImNodes::PushStyleVar(ImNodesStyleVar_LinkThickness, 3.0f);
                hasThicknessModification = true;
            }

            // 3. Push the chosen color (either normal or glowing) to the style stack.
            ImNodes::PushColorStyle(ImNodesCol_Link, linkColor);
            ImNodes::PushColorStyle(ImNodesCol_LinkHovered, IM_COL32(255, 255, 0, 255));
            ImNodes::PushColorStyle(ImNodesCol_LinkSelected, IM_COL32(255, 255, 0, 255));

            // 4. Check for node hover highlight (this should override the glow).
            const bool hl = (hoveredNodeId != -1) && ((int) c.srcLogicalId == hoveredNodeId || (! c.dstIsOutput && (int) c.dstLogicalId == hoveredNodeId) || (c.dstIsOutput && hoveredNodeId == 0));
            if (hl)
            {
                ImNodes::PushColorStyle(ImNodesCol_Link, IM_COL32(255, 255, 0, 255));
            }
            
            // 5. Tell imnodes to draw the link. It will use the color we just pushed.
            ImNodes::Link(linkId, srcAttr, dstAttr);
            
            // 6. Pop ALL style modifications to restore the defaults for the next link.
            if (hl) ImNodes::PopColorStyle();
            ImNodes::PopColorStyle(); // LinkSelected
            ImNodes::PopColorStyle(); // LinkHovered
            ImNodes::PopColorStyle(); // Link
            if (hasThicknessModification) ImNodes::PopStyleVar(); // LinkThickness
            
            // --- END OF FIX ---
        }

        // Drag detection for node movement: snapshot once on mouse release (post-state)
        const bool hoveringNode = (lastHoveredNodeId != -1);
        if (hoveringNode && ImGui::IsMouseDragging(ImGuiMouseButton_Left))
        {
            isDraggingNode = true;
        }
        if (isDraggingNode && ImGui::IsMouseReleased(ImGuiMouseButton_Left))
        {
            isDraggingNode = false;
            // Capture positions after a move so subsequent operations (e.g. delete) undo to the moved location
            pushSnapshot();
        }
    }

    // --- Handle Auto-Connect Requests from MIDI Players ---
    for (const auto& modInfo : synth->getModulesInfo())
    {
        if (auto* midiPlayer = dynamic_cast<MIDIPlayerModuleProcessor*>(synth->getModuleForLogical(modInfo.first)))
        {
            // Check for initial button presses
            if (midiPlayer->autoConnectTriggered.exchange(false))
            {
                midiPlayer->lastAutoConnectState = MIDIPlayerModuleProcessor::AutoConnectState::Samplers;
                handleMidiPlayerAutoConnect(midiPlayer, modInfo.first);
                pushSnapshot();
            }
            else if (midiPlayer->autoConnectVCOTriggered.exchange(false))
            {
                midiPlayer->lastAutoConnectState = MIDIPlayerModuleProcessor::AutoConnectState::PolyVCO;
                handleMidiPlayerAutoConnectVCO(midiPlayer, modInfo.first);
                pushSnapshot();
            }
            else if (midiPlayer->autoConnectHybridTriggered.exchange(false))
            {
                midiPlayer->lastAutoConnectState = MIDIPlayerModuleProcessor::AutoConnectState::Hybrid;
                handleMidiPlayerAutoConnectHybrid(midiPlayer, modInfo.first);
                pushSnapshot();
            }
            // --- THIS IS THE NEW LOGIC ---
            // Check if an update was requested after a new file was loaded
            else if (midiPlayer->connectionUpdateRequested.exchange(false))
            {
                // Re-run the correct handler based on the saved state
                switch (midiPlayer->lastAutoConnectState.load())
                {
                    case MIDIPlayerModuleProcessor::AutoConnectState::Samplers:
                        handleMidiPlayerAutoConnect(midiPlayer, modInfo.first);
                        pushSnapshot();
                        break;
                    case MIDIPlayerModuleProcessor::AutoConnectState::PolyVCO:
                        handleMidiPlayerAutoConnectVCO(midiPlayer, modInfo.first);
                        pushSnapshot();
                        break;
                    case MIDIPlayerModuleProcessor::AutoConnectState::Hybrid:
                        handleMidiPlayerAutoConnectHybrid(midiPlayer, modInfo.first);
                        pushSnapshot();
                        break;
                    case MIDIPlayerModuleProcessor::AutoConnectState::None:
                    default:
                        // Do nothing if it wasn't auto-connected before
                        break;
                }
            }
            // --- END OF NEW LOGIC ---
        }
    }

    // --- Handle Auto-Connect Requests using new intelligent system ---
    handleAutoConnectionRequests();

    ImNodes::MiniMap (0.2f, ImNodesMiniMapLocation_BottomRight);

    ImNodes::EndNodeEditor();
    
    // ================== META MODULE EDITING LOGIC ==================
    // Check if any Meta Module has requested to be edited
    if (synth != nullptr && metaModuleToEditLid == 0) // Only check if not already editing one
    {
        for (const auto& modInfo : synth->getModulesInfo())
        {
            if (auto* metaModule = dynamic_cast<MetaModuleProcessor*>(synth->getModuleForLogical(modInfo.first)))
            {
                // Atomically check and reset the flag
                if (metaModule->editRequested.exchange(false))
                {
                    metaModuleToEditLid = modInfo.first;
                    juce::Logger::writeToLog("[MetaEdit] Opening editor for Meta Module L-ID " + juce::String((int)metaModuleToEditLid));
                    ImGui::OpenPopup("Edit Meta Module");
                    break; // Only handle one request per frame
                }
            }
        }
    }
    
    // Draw the modal popup for the internal editor if one is selected
    if (metaModuleToEditLid != 0)
    {
        ImGui::SetNextWindowSize(ImVec2(1200, 800), ImGuiCond_FirstUseEver);
        if (ImGui::BeginPopupModal("Edit Meta Module", nullptr, ImGuiWindowFlags_MenuBar))
        {
            // Get the internal synth processor from the meta module
            auto* metaModule = dynamic_cast<MetaModuleProcessor*>(synth->getModuleForLogical(metaModuleToEditLid));
            if (metaModule && metaModule->getInternalGraph())
            {
                // Display a placeholder for now
                // TODO: Full recursive editor implementation would go here
                ImGui::Text("Editing internal graph of Meta Module %d", (int)metaModuleToEditLid);
                ImGui::Separator();
                
                auto* internalGraph = metaModule->getInternalGraph();
                auto modules = internalGraph->getModulesInfo();
                
                ImGui::Text("Internal modules: %d", (int)modules.size());
                if (ImGui::BeginChild("ModuleList", ImVec2(0, -30), true))
                {
                    for (const auto& [lid, type] : modules)
                    {
                        ImGui::Text("  [%d] %s", (int)lid, type.toRawUTF8());
                    }
                }
                ImGui::EndChild();
                
                ImGui::Text("NOTE: Full nested editor UI is a TODO");
                ImGui::Text("For now, you can inspect the internal graph structure above.");
            }
            
            if (ImGui::Button("Close"))
            {
                ImGui::CloseCurrentPopup();
                metaModuleToEditLid = 0;
                // When closing, the meta module might have new/removed inlets/outlets,
                // so we need to rebuild the main graph to update its pins
                graphNeedsRebuild = true;
            }
            ImGui::EndPopup();
        }
        else
        {
            // If the popup was closed by the user (e.g., pressing ESC)
            metaModuleToEditLid = 0;
            graphNeedsRebuild = true;
        }
    }
    // ======================= END OF META MODULE LOGIC =======================

    // --- CONSOLIDATED HOVERED LINK DETECTION ---
    // Declare these variables ONCE, immediately after the editor has ended.
    // All subsequent features that need to know about hovered links can now
    // safely reuse these results without causing redefinition or scope errors.
    // Graph is always in consistent state since we rebuild at frame start
    int hoveredLinkId = -1;
    bool isLinkHovered = ImNodes::IsLinkHovered(&hoveredLinkId);
    // --- END OF CONSOLIDATED DECLARATION ---
    
    // Smart cable visualization is now integrated directly into the link drawing loop above.
    // No separate overlay needed - cables glow by modifying their own color.
    
    // === PROBE TOOL MODE HANDLING ===
    if (isProbeModeActive)
    {
        // Change cursor to indicate probe mode is active
        ImGui::SetMouseCursor(ImGuiMouseCursor_Hand);
        
        // Draw "PROBE ACTIVE" indicator at mouse position
        auto* drawList = ImGui::GetForegroundDrawList();
        ImVec2 mousePos = ImGui::GetMousePos();
        const char* text = "PROBE MODE: Click output pin";
        auto textSize = ImGui::CalcTextSize(text);
        ImVec2 textPos = ImVec2(mousePos.x + 20, mousePos.y - 20);
        drawList->AddRectFilled(
            ImVec2(textPos.x - 5, textPos.y - 2),
            ImVec2(textPos.x + textSize.x + 5, textPos.y + textSize.y + 2),
            IM_COL32(50, 50, 50, 200)
        );
        drawList->AddText(textPos, IM_COL32(255, 255, 100, 255), text);
        
        // Check for pin clicks
        if (ImGui::IsMouseClicked(ImGuiMouseButton_Left))
        {
            int hoveredPinId = -1;
            if (ImNodes::IsPinHovered(&hoveredPinId) && hoveredPinId != -1)
            {
                auto pinId = decodePinId(hoveredPinId);
                // Check if it's an output pin (not input, not mod)
                if (!pinId.isInput && !pinId.isMod && pinId.logicalId != 0)
                {
                    juce::Logger::writeToLog("[PROBE_UI] Probe clicked on valid output pin. LogicalID: " + juce::String(pinId.logicalId) + ", Channel: " + juce::String(pinId.channel));
                    auto nodeId = synth->getNodeIdForLogical(pinId.logicalId);
                    synth->setProbeConnection(nodeId, pinId.channel);
                    isProbeModeActive = false; // Deactivate after probing
                }
                else
                {
                    juce::Logger::writeToLog("[PROBE_UI] Probe clicked on an invalid pin (input or output node). Cancelling.");
                    isProbeModeActive = false;
                }
            }
            else
            {
                // Clicked on empty space, cancel probe mode
                juce::Logger::writeToLog("[PROBE_UI] Probe clicked on empty space. Cancelling.");
                isProbeModeActive = false;
            }
        }
        
        // Allow ESC to cancel probe mode
        if (ImGui::IsKeyPressed(ImGuiKey_Escape))
        {
            isProbeModeActive = false;
            juce::Logger::writeToLog("[PROBE_UI] Cancelled with ESC");
        }
    }

    // --- CONTEXTUAL RIGHT-CLICK HANDLER ---
    // A cable was right-clicked. Store its info and open the insert popup.
    if (isLinkHovered && hoveredLinkId != -1 && ImGui::IsMouseClicked(ImGuiMouseButton_Right))
    {
        juce::Logger::writeToLog("[InsertNode][RC] Hovered link id=" + juce::String(hoveredLinkId));
        // A cable was right-clicked. Store its info and open the insert popup.
        linkToInsertOn = {}; // Reset previous info
        linkToInsertOn.linkId = hoveredLinkId;

        bool captured = false;
        // TODO: Implement modulation link detection for new bus-based system
        // if (modLinkIdToRoute.count(hoveredLinkId))
        // {
        //     linkToInsertOn.isMod = true;
        //     auto& route = modLinkIdToRoute[hoveredLinkId];
        //     linkToInsertOn.srcLogicalId = std::get<0>(route);
        //     linkToInsertOn.srcChan = std::get<1>(route);
        //     linkToInsertOn.dstLogicalId = std::get<2>(route);
        //     linkToInsertOn.paramId = std::get<3>(route);
        //     juce::Logger::writeToLog("[InsertNode][RC] Mod link captured: srcLID=" + juce::String((int)linkToInsertOn.srcLogicalId) +
        //                               " srcChan=" + juce::String(linkToInsertOn.srcChan) +
        //                               " dstLID=" + juce::String((int)linkToInsertOn.dstLogicalId) +
        //                               " param='" + linkToInsertOn.paramId + "'");
        //     captured = true;
        // }
        if (linkIdToAttrs.count(hoveredLinkId))
        {
            linkToInsertOn.isMod = false;
            auto& attrs = linkIdToAttrs[hoveredLinkId];
            juce::Logger::writeToLog("[InsertNode][RC] Audio link attrs: srcAttr=" + juce::String(attrs.first) +
                                      " dstAttr=" + juce::String(attrs.second));
            linkToInsertOn.srcPin = decodePinId(attrs.first);
            linkToInsertOn.dstPin = decodePinId(attrs.second);
            juce::Logger::writeToLog("[InsertNode][RC] Audio pins: src(lid=" + juce::String((int)linkToInsertOn.srcPin.logicalId) +
                                      ",ch=" + juce::String(linkToInsertOn.srcPin.channel) +
                                      ",in=" + juce::String((int)linkToInsertOn.srcPin.isInput) + ") -> dst(lid=" +
                                      juce::String((int)linkToInsertOn.dstPin.logicalId) + ",ch=" +
                                      juce::String(linkToInsertOn.dstPin.channel) + ",in=" +
                                      juce::String((int)linkToInsertOn.dstPin.isInput) + ")");
            captured = true;
        }
        else
        {
            juce::Logger::writeToLog("[InsertNode][RC] Link id not found in maps");
        }

        if (captured)
        {
            showInsertNodePopup = true; // defer opening until after EndNodeEditor
            pendingInsertLinkId = hoveredLinkId;
            juce::Logger::writeToLog("[InsertNode][RC] Will open popup after EndNodeEditor");
        }
        else
        {
            linkToInsertOn.linkId = -1; // nothing recognized; do not open
        }
    }

    // --- Keyboard Shortcuts for Node Chaining ---
    // Check if multiple nodes are selected and no modifiers are held
    if (ImNodes::NumSelectedNodes() > 1 && !ImGui::GetIO().KeyCtrl && !ImGui::GetIO().KeyShift && !ImGui::GetIO().KeyAlt)
    {
        // C: Standard stereo chaining (channels 0->0, 1->1)
        if (ImGui::IsKeyPressed(ImGuiKey_C))
        {
            handleNodeChaining();
        }
        // G: Audio type chaining
        else if (ImGui::IsKeyPressed(ImGuiKey_G))
        {
            handleColorCodedChaining(PinDataType::Audio);
        }
        // B: CV type chaining
        else if (ImGui::IsKeyPressed(ImGuiKey_B))
        {
            handleColorCodedChaining(PinDataType::CV);
        }
        // R: Raw type chaining
        else if (ImGui::IsKeyPressed(ImGuiKey_R))
        {
            handleColorCodedChaining(PinDataType::Raw);
        }
        // Y: Gate type chaining
        else if (ImGui::IsKeyPressed(ImGuiKey_Y))
        {
            handleColorCodedChaining(PinDataType::Gate);
        }
    }
    // --- END OF KEYBOARD SHORTCUTS ---

    // --- Cable Splitting (Ctrl+Middle-Click) ---
    if (isLinkHovered && hoveredLinkId != -1)
    {
        if (ImGui::GetIO().KeyCtrl && ImGui::IsMouseClicked(ImGuiMouseButton_Middle))
        {
            // User initiated a split. Find the source pin of the hovered link.
            if (auto it = linkIdToAttrs.find(hoveredLinkId); it != linkIdToAttrs.end())
            {
                splittingFromAttrId = it->second.first; // The source attribute ID
                juce::Logger::writeToLog("[CableSplit] Starting split from attr ID: " + juce::String(splittingFromAttrId));
            }
        }
    }
    // --- END OF CABLE SPLITTING ---

    // 2. If a split-drag is active, handle drawing and completion.
    if (splittingFromAttrId != -1)
    {
        // Draw a line from the source pin to the mouse cursor for visual feedback.
        if (auto it = attrPositions.find(splittingFromAttrId); it != attrPositions.end())
        {
            ImVec2 sourcePos = it->second;
            ImVec2 mousePos = ImGui::GetMousePos();
            ImGui::GetForegroundDrawList()->AddLine(sourcePos, mousePos, IM_COL32(255, 255, 0, 200), 3.0f);
        }

        // 3. Handle completion or cancellation of the drag.
        // We use Left-click to complete the link, matching ImNodes' default behavior.
        if (ImGui::IsMouseReleased(ImGuiMouseButton_Left))
        {
            int hoveredPinId = -1;
            if (ImNodes::IsPinHovered(&hoveredPinId) && hoveredPinId != -1)
            {
                // User dropped the link on a pin.
                auto srcPin = decodePinId(splittingFromAttrId);
                auto dstPin = decodePinId(hoveredPinId);

                // Ensure the connection is valid (Output -> Input).
                if (!srcPin.isInput && dstPin.isInput)
                {
                    auto srcNode = synth->getNodeIdForLogical(srcPin.logicalId);
                    auto dstNode = (dstPin.logicalId == 0) ? synth->getOutputNodeID() : synth->getNodeIdForLogical(dstPin.logicalId);

                    synth->connect(srcNode, srcPin.channel, dstNode, dstPin.channel);
                    graphNeedsRebuild = true;
                    pushSnapshot(); // Make it undoable
                }
            }

            // ALWAYS reset the state, whether the connection was successful or not.
            splittingFromAttrId = -1;
        }
        // Also allow cancellation with a right-click.
        else if (ImGui::IsMouseReleased(ImGuiMouseButton_Right))
        {
            splittingFromAttrId = -1; // Cancel the operation.
        }
    }
    // --- END OF NEW LOGIC ---

    // Open popup now (outside editor) if requested this frame
    if (showInsertNodePopup)
    {
        showInsertNodePopup = false;
        // Validate the link still exists
        if (pendingInsertLinkId != -1)
        {
            bool stillValid = (/* modLinkIdToRoute.count(pendingInsertLinkId) || */ linkIdToAttrs.count(pendingInsertLinkId));
            if (!stillValid)
            {
                juce::Logger::writeToLog("[InsertNode] Skipping popup: link disappeared this frame");
                pendingInsertLinkId = -1;
            }
        }
        if (pendingInsertLinkId != -1)
        {
            ImGui::OpenPopup("InsertNodeOnLinkPopup");
            // Consume the mouse release/click so the popup stays open
            ImGui::GetIO().WantCaptureMouse = true;
            juce::Logger::writeToLog("[InsertNode] Opened popup (post-editor)");
        }
        else
        {
            linkToInsertOn = {}; // safety
        }
        pendingInsertLinkId = -1;
    }

    // Fallback: If user right-clicked and a link was hovered this frame, open popup using cached hover
    if (ImGui::IsMouseClicked(ImGuiMouseButton_Right)
        && lastHoveredLinkId != -1
        && !ImGui::IsPopupOpen("InsertNodeOnLinkPopup"))
    {
        int id = lastHoveredLinkId;
        linkToInsertOn = {}; linkToInsertOn.linkId = id;
        bool captured = false;
        // TODO: Handle modulation link deletion for new bus-based system
        // if (auto itM = modLinkIdToRoute.find(id); itM != modLinkIdToRoute.end())
        // {
        //     linkToInsertOn.isMod = true;
        //     int sL, sC, dL; juce::String paramId; std::tie(sL, sC, dL, paramId) = itM->second;
        //     linkToInsertOn.srcLogicalId = (juce::uint32) sL;
        //     linkToInsertOn.srcChan = sC;
        //     linkToInsertOn.dstLogicalId = (juce::uint32) dL;
        //     linkToInsertOn.paramId = paramId;
        //     captured = true;
        //     juce::Logger::writeToLog("[InsertNode][RC-Fallback] Mod link captured id=" + juce::String(id));
        // }
        // else 
        if (auto it = linkIdToAttrs.find(id); it != linkIdToAttrs.end())
        {
            linkToInsertOn.isMod = false;
            linkToInsertOn.srcPin = decodePinId(it->second.first);
            linkToInsertOn.dstPin = decodePinId(it->second.second);
            captured = true;
            juce::Logger::writeToLog("[InsertNode][RC-Fallback] Audio link captured id=" + juce::String(id));
        }
        if (captured)
        {
            ImGui::OpenPopup("InsertNodeOnLinkPopup");
            ImGui::GetIO().WantCaptureMouse = true;
            juce::Logger::writeToLog("[InsertNode][RC-Fallback] Opened popup");
        }
        else
        {
            linkToInsertOn.linkId = -1;
        }
    }
    // This function draws the popup if the popup is open.
    drawInsertNodeOnLinkPopup();

    // --- Cable Inspector: Stateless, rebuild-safe implementation ---
    hoveredLinkSrcId = 0;
    hoveredLinkDstId = 0;

    // Skip inspector if popups are open (graph is always in consistent state now)
    const bool anyPopupOpen = ImGui::IsPopupOpen("InsertNodeOnLinkPopup") || ImGui::IsPopupOpen("AddModulePopup");
    // Do not early-return here; we still need to finish the frame and close any ImGui scopes.

    if (!anyPopupOpen && isLinkHovered && hoveredLinkId != -1 && synth != nullptr)
    {
        // Safety: Re-verify link still exists in our mapping
        auto it = linkIdToAttrs.find(hoveredLinkId);
        if (it != linkIdToAttrs.end())
        {
            auto srcPin = decodePinId(it->second.first);
            auto dstPin = decodePinId(it->second.second);

            // Set highlight IDs for this frame only
            hoveredLinkSrcId = srcPin.logicalId;
            hoveredLinkDstId = (dstPin.logicalId == 0) ? kOutputHighlightId : dstPin.logicalId;

            // Query source module (no caching - stateless)
            if (auto* srcModule = synth->getModuleForLogical(srcPin.logicalId))
            {
                // Validate channel index
                const int numOutputs = srcModule->getTotalNumOutputChannels();
                if (srcPin.channel >= 0 && srcPin.channel < numOutputs)
                {
                    // Optional: Throttle value sampling to 60 Hz (every 16.67ms)
                    // For now, query every frame for responsive UI
                    const float liveValue = srcModule->getOutputChannelValue(srcPin.channel);
                    const juce::String srcName = srcModule->getName();
                    const juce::String srcLabel = srcModule->getAudioOutputLabel(srcPin.channel);

                    // Render tooltip (stateless - no caching)
                    ImGui::BeginTooltip();
                    ImGui::Text("Value: %.3f", liveValue);
                    ImGui::Text("From: %s (ID %u)", srcName.toRawUTF8(), (unsigned)srcPin.logicalId);
                    if (srcLabel.isNotEmpty())
                        ImGui::Text("Pin: %s", srcLabel.toRawUTF8());
                    ImGui::EndTooltip();
                }
            }
        }
    }
    

    // Update hovered node/link id for next frame (must be called outside editor scope)
    // Graph is always in consistent state since we rebuild at frame start
    int hv = -1;
    if (ImNodes::IsNodeHovered(&hv)) lastHoveredNodeId = hv; else lastHoveredNodeId = -1;
    
    int hl = -1;
    if (ImNodes::IsLinkHovered(&hl)) lastHoveredLinkId = hl; else lastHoveredLinkId = -1;
    

    // Shortcut: press 'I' while hovering a link to open Insert-on-Link popup (bypasses mouse handling)
    if (ImGui::IsKeyPressed(ImGuiKey_I) && lastHoveredLinkId != -1 && !ImGui::IsPopupOpen("InsertNodeOnLinkPopup"))
    {
        linkToInsertOn = {}; // reset
        linkToInsertOn.linkId = lastHoveredLinkId;
        bool captured = false;
        // TODO: Handle modulation link hover end for new bus-based system
        // if (auto itM = modLinkIdToRoute.find(lastHoveredLinkId); itM != modLinkIdToRoute.end())
        // {
        //     linkToInsertOn.isMod = true;
        //     int sL, sC, dL; juce::String paramId; std::tie(sL, sC, dL, paramId) = itM->second;
        //     linkToInsertOn.srcLogicalId = (juce::uint32) sL;
        //     linkToInsertOn.srcChan = sC;
        //     linkToInsertOn.dstLogicalId = (juce::uint32) dL;
        //     linkToInsertOn.paramId = paramId;
        //     captured = true;
        //     juce::Logger::writeToLog("[InsertNode][KeyI] Mod link captured id=" + juce::String(lastHoveredLinkId));
        // }
        // else 
        if (auto it = linkIdToAttrs.find(lastHoveredLinkId); it != linkIdToAttrs.end())
        {
            linkToInsertOn.isMod = false;
            linkToInsertOn.srcPin = decodePinId(it->second.first);
            linkToInsertOn.dstPin = decodePinId(it->second.second);
            captured = true;
            juce::Logger::writeToLog("[InsertNode][KeyI] Audio link captured id=" + juce::String(lastHoveredLinkId));
        }
        if (captured)
        {
            pendingInsertLinkId = lastHoveredLinkId;
            showInsertNodePopup = true; // will open next lines
        }
        else
        {
            linkToInsertOn.linkId = -1;
            juce::Logger::writeToLog("[InsertNode][KeyI] No link data found for id=" + juce::String(lastHoveredLinkId));
        }
    }

    // After editor pass, if we added/duplicated a node, take snapshot now that nodes exist
    if (snapshotAfterEditor)
    {
        snapshotAfterEditor = false;
        pushSnapshot();
    }

    if (synth != nullptr)
    {
        // No persistent panning state when zoom is disabled

        // Right-click on empty canvas -> Add module popup
        // Avoid passing nullptr to ImNodes::IsLinkHovered; some builds may write to the pointer
        int dummyHoveredLinkId = -1;
        const bool anyLinkHovered = ImNodes::IsLinkHovered(&dummyHoveredLinkId);
        if (ImGui::IsMouseReleased(ImGuiMouseButton_Right)
            && ImGui::IsWindowHovered(ImGuiHoveredFlags_RootAndChildWindows)
            && ! ImGui::IsAnyItemHovered()
            && !anyLinkHovered
            && !ImGui::IsPopupOpen("InsertNodeOnLinkPopup")
            && linkToInsertOn.linkId == -1) // avoid conflict with insert-on-link popup
        {
                ImGui::OpenPopup("AddModulePopup");
        }

        // --- REVISED AND IMPROVED "QUICK ADD" POPUP ---
        if (ImGui::BeginPopup("AddModulePopup"))
        {
            static char searchQuery[128] = "";

            // Auto-focus the search bar when the popup opens and clear any previous search
            if (ImGui::IsWindowAppearing()) {
                ImGui::SetKeyboardFocusHere(0);
                searchQuery[0] = '\0';
            }
            
            ImGui::Text("Add Module");
            ImGui::PushItemWidth(250.0f);
            if (ImGui::InputText("Search", searchQuery, sizeof(searchQuery))) {
                // Text was changed
            }
            ImGui::PopItemWidth();
            ImGui::Separator();
            
            // --- PROBE TOOL ---
            if (ImGui::MenuItem("🔬 Probe Signal (Click any output pin)"))
            {
                isProbeModeActive = true;
                ImGui::CloseCurrentPopup();
            }
            if (ImGui::IsItemHovered())
            {
                ImGui::SetTooltip("Activate probe mode to instantly visualize any signal without manual patching.\nClick on any output pin to route it to the probe scope.");
            }
            ImGui::Separator();

            auto addAtMouse = [this](const char* type) {
                auto nodeId = synth->addModule(type);
                const int logicalId = (int) synth->getLogicalIdForNode (nodeId);
                // This places the new node exactly where the user right-clicked
                pendingNodeScreenPositions[logicalId] = ImGui::GetMousePosOnOpeningCurrentPopup();
                
                // Special handling for recorder module
                if (juce::String(type).equalsIgnoreCase("recorder"))
                {
                    if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(synth->getModuleForLogical((juce::uint32)logicalId)))
                    {
                        recorder->setPropertiesFile(PresetCreatorApplication::getApp().getProperties());
                    }
                }
                
                // Give comment nodes a default size to prevent feedback loop
                if (juce::String(type).equalsIgnoreCase("comment"))
                {
                    pendingNodeSizes[logicalId] = ImVec2(250.f, 150.f);
                }
                
                snapshotAfterEditor = true;
                ImGui::CloseCurrentPopup();
            };
            
            juce::String filter(searchQuery);

            ImGui::BeginChild("ModuleList", ImVec2(280, 350), true);

            if (filter.isEmpty())
            {
                // --- BROWSE MODE (No text in search bar) ---
                if (ImGui::BeginMenu("Sources")) {
                    if (ImGui::MenuItem("Audio Input")) addAtMouse("audio input");
                    if (ImGui::MenuItem("VCO")) addAtMouse("VCO");
                    if (ImGui::MenuItem("Polyphonic VCO")) addAtMouse("polyvco");
                    if (ImGui::MenuItem("Noise")) addAtMouse("Noise");
                    if (ImGui::MenuItem("Sequencer")) addAtMouse("Sequencer");
                    if (ImGui::MenuItem("Multi Sequencer")) addAtMouse("multi sequencer");
                    if (ImGui::MenuItem("Snapshot Sequencer")) addAtMouse("snapshot sequencer");
                    if (ImGui::MenuItem("Value")) addAtMouse("Value");
                    if (ImGui::MenuItem("Sample Loader")) addAtMouse("sample loader");
                    ImGui::EndMenu();
                }
                if (ImGui::BeginMenu("MIDI Family")) {
                    if (ImGui::MenuItem("MIDI CV")) addAtMouse("midi cv");
                    if (ImGui::MenuItem("MIDI Player")) addAtMouse("midi player");
                    ImGui::Separator();
                    if (ImGui::MenuItem("MIDI Faders")) addAtMouse("midi faders");
                    if (ImGui::MenuItem("MIDI Knobs")) addAtMouse("midi knobs");
                    if (ImGui::MenuItem("MIDI Buttons")) addAtMouse("midi buttons");
                    if (ImGui::MenuItem("MIDI Jog Wheel")) addAtMouse("midi jog wheel");
                    ImGui::EndMenu();
                }
                if (ImGui::BeginMenu("TTS")) {
                    if (ImGui::MenuItem("TTS Performer")) addAtMouse("TTS Performer");
                    if (ImGui::MenuItem("Vocal Tract Filter")) addAtMouse("Vocal Tract Filter");
                    ImGui::EndMenu();
                }
                if (ImGui::BeginMenu("Effects")) {
                    if (ImGui::MenuItem("VCF")) addAtMouse("VCF");
                    if (ImGui::MenuItem("Delay")) addAtMouse("Delay");
                    if (ImGui::MenuItem("Reverb")) addAtMouse("Reverb");
                    if (ImGui::MenuItem("Chorus")) addAtMouse("chorus");
                    if (ImGui::MenuItem("Phaser")) addAtMouse("phaser");
                    if (ImGui::MenuItem("Compressor")) addAtMouse("compressor");
                    if (ImGui::MenuItem("Recorder")) addAtMouse("recorder");
                    if (ImGui::MenuItem("Limiter")) addAtMouse("limiter");
                    if (ImGui::MenuItem("Noise Gate")) addAtMouse("gate");
                    if (ImGui::MenuItem("Drive")) addAtMouse("drive");
                    if (ImGui::MenuItem("Graphic EQ")) addAtMouse("graphic eq");
                    if (ImGui::MenuItem("Waveshaper")) addAtMouse("Waveshaper");
                    if (ImGui::MenuItem("8-Band Shaper")) addAtMouse("8bandshaper");
                    if (ImGui::MenuItem("Granulator")) addAtMouse("granulator");
                    if (ImGui::MenuItem("Harmonic Shaper")) addAtMouse("harmonic shaper");
                    if (ImGui::MenuItem("Time/Pitch Shifter")) addAtMouse("timepitch");
                    if (ImGui::MenuItem("De-Crackle")) addAtMouse("De-Crackle");
                    ImGui::EndMenu();
                }
                if (ImGui::BeginMenu("Modulators")) {
                    if (ImGui::MenuItem("LFO")) addAtMouse("LFO");
                    if (ImGui::MenuItem("ADSR")) addAtMouse("ADSR");
                    if (ImGui::MenuItem("Random")) addAtMouse("Random");
                    if (ImGui::MenuItem("S&H")) addAtMouse("S&H");
                    if (ImGui::MenuItem("Tempo Clock")) addAtMouse("tempo clock");
                    if (ImGui::MenuItem("Function Generator")) addAtMouse("Function Generator");
                    if (ImGui::MenuItem("Shaping Oscillator")) addAtMouse("shaping oscillator");
                    ImGui::EndMenu();
                }
                if (ImGui::BeginMenu("Utilities & Logic")) {
                    if (ImGui::MenuItem("VCA")) addAtMouse("VCA");
                    if (ImGui::MenuItem("Mixer")) addAtMouse("Mixer");
                    if (ImGui::MenuItem("CV Mixer")) addAtMouse("cv mixer");
                    if (ImGui::MenuItem("Track Mixer")) addAtMouse("trackmixer");
                    if (ImGui::MenuItem("Attenuverter")) addAtMouse("Attenuverter");
                    if (ImGui::MenuItem("Lag Processor")) addAtMouse("Lag Processor");
                    if (ImGui::MenuItem("Math")) addAtMouse("Math");
                    if (ImGui::MenuItem("Map Range")) addAtMouse("MapRange");
                    if (ImGui::MenuItem("Quantizer")) addAtMouse("Quantizer");
                    if (ImGui::MenuItem("Rate")) addAtMouse("Rate");
                    if (ImGui::MenuItem("Comparator")) addAtMouse("Comparator");
                    if (ImGui::MenuItem("Logic")) addAtMouse("Logic");
                    if (ImGui::MenuItem("Clock Divider")) addAtMouse("ClockDivider");
                    if (ImGui::MenuItem("Sequential Switch")) addAtMouse("SequentialSwitch");
                    if (ImGui::MenuItem("Comment")) addAtMouse("comment");
                    if (ImGui::MenuItem("Best Practice")) addAtMouse("best practice");
                    ImGui::EndMenu();
                }
                if (ImGui::BeginMenu("Analysis")) {
                    if (ImGui::MenuItem("Scope")) addAtMouse("Scope");
                    if (ImGui::MenuItem("Debug")) addAtMouse("debug");
                    if (ImGui::MenuItem("Input Debug")) addAtMouse("input debug");
                    if (ImGui::MenuItem("Frequency Graph")) addAtMouse("Frequency Graph");
                    ImGui::EndMenu();
                }
                if (ImGui::BeginMenu("VST Plugins")) {
                    addPluginModules(); // Re-use your existing plugin menu logic
                    ImGui::EndMenu();
                }
            }
            else
            {
                // --- SEARCH MODE (Text has been entered) ---
                // Use the new registry to get display names and internal types
                for (const auto& entry : getModuleRegistry())
                {
                    const juce::String& displayName = entry.first;
                    const char* internalType = entry.second.first;
                    const char* description = entry.second.second;

                    // Search against the display name, not the internal type
                    if (displayName.containsIgnoreCase(filter))
                    {
                        if (ImGui::Selectable(displayName.toRawUTF8()))
                        {
                            // Use the correct internal type name!
                            addAtMouse(internalType);
                        }
                        if (ImGui::IsItemHovered())
                        {
                            ImGui::BeginTooltip();
                            ImGui::TextUnformatted(description);
                            ImGui::EndTooltip();
                        }
                    }
                }
            }

            ImGui::EndChild();
            ImGui::EndPopup();
        }

        // Helper functions are now class methods

        // Handle user-created links (must be called after EndNodeEditor)
        int startAttr = 0, endAttr = 0;
        if (ImNodes::IsLinkCreated(&startAttr, &endAttr))
        {
            auto startPin = decodePinId(startAttr);
            auto endPin = decodePinId(endAttr);
            auto srcPin = startPin.isInput ? endPin : startPin;
            auto dstPin = startPin.isInput ? startPin : endPin;

            // Ensure connection is always Output -> Input
            if (!srcPin.isInput && dstPin.isInput)
            {
                PinDataType srcType = getPinDataTypeForPin(srcPin);
                PinDataType dstType = getPinDataTypeForPin(dstPin);

                bool conversionHandled = false;

                // Determine if a converter is needed based on pin types
                if (srcType == PinDataType::Audio && dstType == PinDataType::CV)
                {
                    insertNodeBetween("Attenuverter", srcPin, dstPin);
                    conversionHandled = true;
                }
                else if (srcType == PinDataType::CV && dstType == PinDataType::Gate)
                {
                    insertNodeBetween("Comparator", srcPin, dstPin);
                    conversionHandled = true;
                }
                else if (srcType == PinDataType::Audio && dstType == PinDataType::Gate)
                {
                    insertNodeBetween("Comparator", srcPin, dstPin);
                    conversionHandled = true;
                }
                else if (srcType == PinDataType::Raw && dstType != PinDataType::Raw)
                {
                    insertNodeBetween("MapRange", srcPin, dstPin);
                    conversionHandled = true;
                }

                if (conversionHandled)
                {
                    graphNeedsRebuild = true;
                    pushSnapshot();
                }
                else
                {
                    // All other combinations are considered directly compatible.
                    auto srcNode = synth->getNodeIdForLogical(srcPin.logicalId);
                    auto dstNode = (dstPin.logicalId == 0) ? synth->getOutputNodeID() : synth->getNodeIdForLogical(dstPin.logicalId);

                    synth->connect(srcNode, srcPin.channel, dstNode, dstPin.channel);
                    // Immediate commit for RecordModuleProcessor filename update
                    synth->commitChanges();

                    if (auto* dstModule = synth->getModuleForLogical(dstPin.logicalId)) {
                        if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(dstModule)) {
                            juce::String sourceName;
                            if (auto* srcModule = synth->getModuleForLogical(srcPin.logicalId)) {
                                sourceName = srcModule->getName();
                            }
                            recorder->updateSuggestedFilename(sourceName);
                        }
                    }

                    pushSnapshot();
                }
            }
        }

        // Handle link deletion (single)
        int linkId = 0;
        if (ImNodes::IsLinkDestroyed(&linkId))
        {
            if (auto it = linkIdToAttrs.find(linkId); it != linkIdToAttrs.end())
            {
                auto srcPin = decodePinId(it->second.first);
                auto dstPin = decodePinId(it->second.second);
                
                auto srcNode = synth->getNodeIdForLogical(srcPin.logicalId);
                auto dstNode = (dstPin.logicalId == 0) ? synth->getOutputNodeID() : synth->getNodeIdForLogical(dstPin.logicalId);

                // Debug log disconnect intent
                juce::Logger::writeToLog(
                    juce::String("[LinkDelete] src(lid=") + juce::String((int)srcPin.logicalId) + ",ch=" + juce::String(srcPin.channel) +
                    ") -> dst(lid=" + juce::String((int)dstPin.logicalId) + ",ch=" + juce::String(dstPin.channel) + ")");

                synth->disconnect(srcNode, srcPin.channel, dstNode, dstPin.channel);
                
                // Immediate commit for RecordModuleProcessor filename update
                synth->commitChanges();
                
                // After disconnecting, tell the recorder to update (pass empty string for unconnected)
                if (auto* dstModule = synth->getModuleForLogical(dstPin.logicalId))
                {
                    if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(dstModule))
                    {
                        recorder->updateSuggestedFilename(""); // Empty = unconnected
                    }
                }
                
                pushSnapshot();
                linkIdToAttrs.erase (it);
            }
        }
        // Handle link deletion (multi-select via Delete)

        // Keyboard shortcuts
        // Only process global keyboard shortcuts if no ImGui widget wants the keyboard
        if (!ImGui::GetIO().WantCaptureKeyboard)
        {
            const bool ctrl = ImGui::GetIO().KeyCtrl;
            const bool shift = ImGui::GetIO().KeyShift;
            const bool alt = ImGui::GetIO().KeyAlt;
            
            if (ctrl && ImGui::IsKeyPressed (ImGuiKey_S)) { startSaveDialog(); }
            if (ctrl && ImGui::IsKeyPressed (ImGuiKey_O)) { startLoadDialog(); }
            if (ctrl && ImGui::IsKeyPressed(ImGuiKey_P)) { handleRandomizePatch(); }
            if (ctrl && ImGui::IsKeyPressed(ImGuiKey_M)) { handleRandomizeConnections(); }
            if (ctrl && ImGui::IsKeyPressed(ImGuiKey_B)) { handleBeautifyLayout(); }
            if (ctrl && !shift && !alt && ImGui::IsKeyPressed(ImGuiKey_R, false)) { handleRecordOutput(); }
        
        // M: Mute/Bypass selected nodes (without Ctrl modifier)
        if (!ctrl && !alt && !shift && ImGui::IsKeyPressed(ImGuiKey_M, false) && ImNodes::NumSelectedNodes() > 0)
        {
            handleMuteToggle();
        }
        
        // Ctrl + A: Select All
        if (ctrl && !shift && ImGui::IsKeyPressed(ImGuiKey_A, false))
        {
            if (synth != nullptr)
            {
                const auto& modules = synth->getModulesInfo();
                std::vector<int> allNodeIds;
                allNodeIds.push_back(0); // Include output node
                for (const auto& mod : modules)
                {
                    allNodeIds.push_back((int)mod.first);
                }
                ImNodes::ClearNodeSelection();
                for (int id : allNodeIds)
                {
                    ImNodes::SelectNode(id);
                }
            }
        }
        
        // Ctrl + R: Reset selected node(s) to default parameters
        if (ctrl && ImGui::IsKeyPressed(ImGuiKey_R, false))
        {
            const int numSelected = ImNodes::NumSelectedNodes();
            if (numSelected > 0 && synth != nullptr)
            {
                // Create a single undo state for the entire operation
                pushSnapshot();
                
                std::vector<int> selectedNodeIds(numSelected);
                ImNodes::GetSelectedNodes(selectedNodeIds.data());

                for (int lid : selectedNodeIds)
                {
                    if (auto* module = synth->getModuleForLogical((juce::uint32)lid))
                    {
                        // Get all parameters for this module
                        auto& params = module->getParameters();
                        for (auto* paramBase : params)
                        {
                            // Cast to a ranged parameter to access default values
                            if (auto* param = dynamic_cast<juce::RangedAudioParameter*>(paramBase))
                            {
                                // Get the default value (normalized 0-1) and apply it
                                param->setValueNotifyingHost(param->getDefaultValue());
                            }
                        }
                        juce::Logger::writeToLog("[Reset] Reset parameters for node " + juce::String(lid));
                    }
                }
            }
        }
        
        // O: Connect selected to Output
        if (!ctrl && !alt && !shift && ImGui::IsKeyPressed(ImGuiKey_O, false) && ImNodes::NumSelectedNodes() == 1)
        {
            if (synth != nullptr)
            {
                int selectedId;
                ImNodes::GetSelectedNodes(&selectedId);
                if (selectedId != 0)
                {
                    synth->connect(synth->getNodeIdForLogical(selectedId), 0, synth->getOutputNodeID(), 0);
                    synth->connect(synth->getNodeIdForLogical(selectedId), 1, synth->getOutputNodeID(), 1);
                    graphNeedsRebuild = true;
                    pushSnapshot();
                }
            }
        }
        
        // Alt + D: Disconnect selected nodes
        if (alt && ImGui::IsKeyPressed(ImGuiKey_D, false) && ImNodes::NumSelectedNodes() > 0)
        {
            if (synth != nullptr)
            {
                std::vector<int> selectedNodeIds(ImNodes::NumSelectedNodes());
                ImNodes::GetSelectedNodes(selectedNodeIds.data());
                for (int id : selectedNodeIds)
                {
                    synth->clearConnectionsForNode(synth->getNodeIdForLogical(id));
                }
                graphNeedsRebuild = true;
                pushSnapshot();
            }
        }
        
        // --- REVISED 'F' and 'Home' KEY LOGIC ---
        auto frameNodes = [&](const std::vector<int>& nodeIds) {
            if (nodeIds.empty() || synth == nullptr) return;

            juce::Rectangle<float> bounds;
            bool foundAny = false;
            
            // Build a set of valid node IDs for checking
            std::unordered_set<int> validNodes;
            validNodes.insert(0); // Output node
            for (const auto& mod : synth->getModulesInfo())
                validNodes.insert((int)mod.first);
            
            for (size_t i = 0; i < nodeIds.size(); ++i)
            {
                // Ensure the node exists before getting its position
                if (validNodes.find(nodeIds[i]) != validNodes.end())
                {
                    ImVec2 pos = ImNodes::GetNodeGridSpacePos(nodeIds[i]);
                    if (!foundAny)
                    {
                        bounds = juce::Rectangle<float>(pos.x, pos.y, 1, 1);
                        foundAny = true;
                    }
                    else
                    {
                        bounds = bounds.getUnion(juce::Rectangle<float>(pos.x, pos.y, 1, 1));
                    }
                }
            }

            if (!foundAny) return;

            // Add some padding to the bounds
            if (!nodeIds.empty() && validNodes.find(nodeIds[0]) != validNodes.end())
                bounds = bounds.expanded(ImNodes::GetNodeDimensions(nodeIds[0]).x, ImNodes::GetNodeDimensions(nodeIds[0]).y);
            
            ImVec2 center((bounds.getX() + bounds.getRight()) * 0.5f, (bounds.getY() + bounds.getBottom()) * 0.5f);
            ImNodes::EditorContextResetPanning(center);
        };

        // F: Frame Selected
        if (!ctrl && !alt && !shift && ImGui::IsKeyPressed(ImGuiKey_F, false))
        {
            const int numSelected = ImNodes::NumSelectedNodes();
            if (numSelected > 0)
            {
                std::vector<int> selectedNodeIds(numSelected);
                ImNodes::GetSelectedNodes(selectedNodeIds.data());
                frameNodes(selectedNodeIds);
            }
        }

        // Home and Ctrl+Home: Frame All / Reset to Origin
        if (ImGui::IsKeyPressed(ImGuiKey_Home, false))
        {
            if (ctrl) // Ctrl+Home: Reset to origin
            {
                ImNodes::EditorContextResetPanning(ImVec2(0, 0));
            }
            else // Home: Frame all
            {
                if (synth != nullptr)
                {
                    auto modules = synth->getModulesInfo();
                    std::vector<int> allNodeIds;
                    allNodeIds.push_back(0); // Include output node
                    for (const auto& mod : modules)
                    {
                        allNodeIds.push_back((int)mod.first);
                    }
                    frameNodes(allNodeIds);
                }
            }
        }
        
        // Debug menu (Ctrl+Shift+D)
        if (ctrl && shift && ImGui::IsKeyPressed(ImGuiKey_D)) { showDebugMenu = !showDebugMenu; }

        // Undo / Redo (Ctrl+Z / Ctrl+Y)
    if (ctrl && ImGui::IsKeyPressed (ImGuiKey_Z))
        {
            if (undoStack.size() > 1)
            {
                Snapshot current = undoStack.back();
                redoStack.push_back (current);
                undoStack.pop_back();
                restoreSnapshot (undoStack.back());
                // After a restore, clear transient link maps only; keep pending positions so they apply next frame
                linkIdToAttrs.clear();
                // modLinkIdToRoute.clear(); // TODO: Remove when fully migrated
            }
        }
        if (ctrl && ImGui::IsKeyPressed (ImGuiKey_Y))
        {
            if (! redoStack.empty())
            {
                Snapshot s = redoStack.back(); redoStack.pop_back();
                restoreSnapshot (s);
                undoStack.push_back (s);
                linkIdToAttrs.clear();
                // modLinkIdToRoute.clear(); // TODO: Remove when fully migrated
            }
        }

        // Duplicate selected nodes (Ctrl+D) and Duplicate with connections (Shift+D)
        if ((ctrl || ImGui::GetIO().KeyShift) && ImGui::IsKeyPressed (ImGuiKey_D))
        {
            const int n = ImNodes::NumSelectedNodes();
            if (n > 0)
            {
                std::vector<int> sel((size_t) n);
                ImNodes::GetSelectedNodes(sel.data());
                for (int oldId : sel)
                {
                    if (oldId == 0) continue;
                    const juce::String type = getTypeForLogical ((juce::uint32) oldId);
                    if (type.isEmpty()) continue;
                    auto newNodeId = synth->addModule (type);
                    graphNeedsRebuild = true;
                    const juce::uint32 newLogical = synth->getLogicalIdForNode (newNodeId);
                    if (newLogical != 0)
                    {
                        if (auto* src = synth->getModuleForLogical ((juce::uint32) oldId))
                            if (auto* dst = synth->getModuleForLogical (newLogical))
                                dst->getAPVTS().replaceState (src->getAPVTS().copyState());
                        // Position offset
                        ImVec2 pos = ImNodes::GetNodeGridSpacePos (oldId);
                        pendingNodePositions[(int) newLogical] = ImVec2 (pos.x + 40.0f, pos.y + 40.0f);

                        // If Shift is held: duplicate connections into and out of this node
                        if (!ctrl && ImGui::GetIO().KeyShift)
                        {
                            const auto oldNode = synth->getNodeIdForLogical ((juce::uint32) oldId);
                            const auto newNode = newNodeId;
                            // Duplicate audio/CV connections
                            for (const auto& c : synth->getConnectionsInfo())
                            {
                                // Outgoing from old -> someone
                                if ((int) c.srcLogicalId == oldId)
                                {
                                    auto dstNode = (c.dstLogicalId == 0) ? synth->getOutputNodeID() : synth->getNodeIdForLogical (c.dstLogicalId);
                                    synth->connect (newNode, c.srcChan, dstNode, c.dstChan);
                                }
                                // Incoming from someone -> old
                                if ((int) c.dstLogicalId == oldId)
                                {
                                    auto srcNode = synth->getNodeIdForLogical (c.srcLogicalId);
                                    synth->connect (srcNode, c.srcChan, newNode, c.dstChan);
                                }
                            }
                            // TODO: Implement modulation route duplication for new bus-based system
                        }
                    }
                }
                pushSnapshot();
            }
        }
        
        } // End of keyboard shortcuts (WantCaptureKeyboard check)

        // Update selection for parameter panel
        {
            int selCount = ImNodes::NumSelectedNodes();
            if (selCount > 0)
            {
                std::vector<int> ids((size_t) selCount);
                ImNodes::GetSelectedNodes(ids.data());
                selectedLogicalId = ids.back();
            }
            else
            {
                selectedLogicalId = 0;
            }
        }

        handleDeletion();
    }

    // === DEBUG WINDOW ===
    if (showDebugMenu)
    {
        if (ImGui::Begin("System Diagnostics", &showDebugMenu))
        {
            if (synth != nullptr)
            {
                ImGui::Text("=== SYSTEM OVERVIEW ===");
                if (ImGui::Button("Refresh"))
                {
                    // Force refresh of diagnostics
                }
                
                
                // System diagnostics
                ImGui::Text("System State:");
                juce::String systemDiag = synth->getSystemDiagnostics();
                ImGui::TextWrapped("%s", systemDiag.toUTF8());
                
                
                // Module selector
                ImGui::Text("Module Diagnostics:");
                auto modules = synth->getModulesInfo();
                if (!modules.empty())
                {
                    static int selectedModuleIndex = 0;
                    if (selectedModuleIndex >= (int)modules.size()) selectedModuleIndex = 0;
                    
                    juce::String moduleList = "";
                    for (size_t i = 0; i < modules.size(); ++i)
                    {
                        if (i > 0) moduleList += "\0";
                        moduleList += "Logical " + juce::String((int)modules[i].first) + ": " + modules[i].second;
                    }
                    moduleList += "\0";
                    
                    if (ImGui::Combo("Select Module", &selectedModuleIndex, moduleList.toUTF8()))
                    {
                        if (selectedModuleIndex < (int)modules.size())
                        {
                            juce::String moduleDiag = synth->getModuleDiagnostics(modules[selectedModuleIndex].first);
                            ImGui::TextWrapped("%s", moduleDiag.toUTF8());
                        }
                    }
                }
                else
                {
                    ImGui::Text("No modules found.");
                }
            }
            else
            {
                ImGui::Text("No synth processor available.");
            }
        }
        ImGui::End();
    }

    // Keyboard Shortcuts Help Window (F1)
    if (showShortcutsWindow)
    {
        ImGui::Begin("Keyboard Shortcuts", &showShortcutsWindow, ImGuiWindowFlags_AlwaysAutoResize);
        
        // --- NEW, COMPREHENSIVE SHORTCUT LIST ---

        ImGui::Text("Patch & File Management");
        ImGui::Separator();
        ImGui::BulletText("Ctrl + S: Save Preset.");
        ImGui::BulletText("Ctrl + O: Load Preset.");
        ImGui::BulletText("Ctrl + Z: Undo last action.");
        ImGui::BulletText("Ctrl + Y: Redo last action.");
        ImGui::BulletText("Ctrl + P: Generate a new random patch.");

        ImGui::Spacing();
        ImGui::Text("Node Creation & Deletion");
        ImGui::Separator();
        ImGui::BulletText("Right-click canvas: Open Quick Add menu to create a node.");
        ImGui::BulletText("Delete: Delete selected nodes and links.");
        ImGui::BulletText("Shift + Delete: Bypass-delete selected node(s), preserving signal chain.");
        ImGui::BulletText("Ctrl + D: Duplicate selected node(s).");
        ImGui::BulletText("Shift + D: Duplicate selected node(s) with their connections.");
        ImGui::BulletText("Ctrl + Shift + M: Collapse selected nodes into a new 'Meta Module'.");

        ImGui::Spacing();
        ImGui::Text("Connections & Signal Flow");
        ImGui::Separator();
        ImGui::BulletText("Right-click canvas -> Probe Signal: Enter Probe Mode.");
        ImGui::BulletText("  (In Probe Mode) Left-click output pin: Instantly view signal in the Probe Scope.");
        ImGui::BulletText("Right-click link: Open menu to insert a node on that cable.");
        ImGui::BulletText("I key (while hovering link): Open 'Insert Node' menu for that cable.");
        ImGui::BulletText("Ctrl + Middle-click link: Split a new cable from a connected output pin.");
        ImGui::BulletText("O key (with one node selected): Connect node's output to the Main Output.");
        ImGui::BulletText("Alt + D: Disconnect all cables from selected node(s).");
        ImGui::BulletText("Ctrl + M: Randomize connections between existing nodes.");
        ImGui::BulletText("C key (multi-select): Chain selected nodes (L->L, R->R).");
        ImGui::BulletText("G, B, Y, R keys (multi-select): Chain pins by type (Audio, CV, Gate, Raw).");
        
        ImGui::Spacing();
        ImGui::Text("Navigation & View");
        ImGui::Separator();
        ImGui::BulletText("F: Frame (zoom to fit) selected nodes.");
        ImGui::BulletText("Home: Frame all nodes in the patch.");
        ImGui::BulletText("Ctrl + Home: Reset view panning to the origin (0,0).");
        ImGui::BulletText("Ctrl + B: Automatically arrange nodes for a clean layout ('Beautify').");
        ImGui::BulletText("Ctrl + A: Select all nodes.");

        ImGui::Spacing();
        ImGui::Text("Parameter & Settings");
        ImGui::Separator();
        ImGui::BulletText("M key (with node(s) selected): Mute or Bypass the selected node(s).");
        ImGui::BulletText("Ctrl + R (with node(s) selected): Reset parameters of selected node(s) to default.");
        ImGui::BulletText("Ctrl + Shift + C: Copy selected node's settings to clipboard.");
        ImGui::BulletText("Ctrl + Shift + V: Paste settings to selected node (must be same type).");
        ImGui::BulletText("Mouse Wheel (on slider): Fine-tune parameter value.");

        ImGui::Spacing();
        ImGui::Text("General & Debugging");
        ImGui::Separator();
        ImGui::BulletText("Ctrl + R (no node selected): Insert a Recorder tapped into the Main Output.");
        ImGui::BulletText("Ctrl + Shift + D: Show System Diagnostics window.");
        ImGui::BulletText("F1: Toggle this help window.");
        
        ImGui::End();
    }

    ImGui::End();
    // drawPendingModPopup(); // TODO: Remove when fully migrated

    // No deferred snapshots; unified pre-state strategy
}

void ImGuiNodeEditorComponent::pushSnapshot()
{
    // Ensure any newly scheduled positions are flushed into the current UI state
    // by applying them immediately before capturing.
    if (! pendingNodePositions.empty())
    {
        // Temporarily mask rebuild flag to avoid ImNodes queries during capture
        const bool rebuilding = graphNeedsRebuild.load();
        if (rebuilding) {
            // getUiValueTree will still avoid ImNodes now, but assert safety
        }
        juce::ValueTree applied = getUiValueTree();
        for (const auto& kv : pendingNodePositions)
        {
            // Overwrite the entry for this node if present
            for (int i = 0; i < applied.getNumChildren(); ++i)
            {
                auto n = applied.getChild(i);
                if (n.hasType("node") && (int) n.getProperty("id", -1) == kv.first)
                { n.setProperty("x", kv.second.x, nullptr); n.setProperty("y", kv.second.y, nullptr); break; }
            }
        }
        // Do not commit pending positions of (0,0) which are placeholders
        for (int i = 0; i < applied.getNumChildren(); ++i)
        {
            auto n = applied.getChild(i);
            if (! n.hasType("node")) continue;
            const float x = (float) n.getProperty("x", 0.0f);
            const float y = (float) n.getProperty("y", 0.0f);
            if (x == 0.0f && y == 0.0f) {
                // Try to recover from last-known or pending
                const int nid = (int) n.getProperty("id", -1);
                auto itL = lastKnownNodePositions.find(nid);
                if (itL != lastKnownNodePositions.end()) { n.setProperty("x", itL->second.x, nullptr); n.setProperty("y", itL->second.y, nullptr); }
                else if (auto itP = pendingNodePositions.find(nid); itP != pendingNodePositions.end()) { n.setProperty("x", itP->second.x, nullptr); n.setProperty("y", itP->second.y, nullptr); }
            }
        }
        Snapshot s; s.uiState = applied; if (synth != nullptr) synth->getStateInformation (s.synthState);
        undoStack.push_back (std::move (s)); redoStack.clear();
        isPatchDirty = true; // Mark patch as dirty
        return;
    }
    Snapshot s; s.uiState = getUiValueTree();
    if (synth != nullptr) synth->getStateInformation (s.synthState);
    undoStack.push_back (std::move (s));
    redoStack.clear();
    
    // Mark patch as dirty whenever a change is made
    isPatchDirty = true;
}

void ImGuiNodeEditorComponent::restoreSnapshot (const Snapshot& s)
{
    if (synth != nullptr && s.synthState.getSize() > 0)
        synth->setStateInformation (s.synthState.getData(), (int) s.synthState.getSize());
    // Restore UI positions exactly as saved
    applyUiValueTreeNow (s.uiState);
}

juce::String ImGuiNodeEditorComponent::getTypeForLogical (juce::uint32 logicalId) const
{
    if (synth == nullptr) return {};
    for (const auto& p : synth->getModulesInfo())
        if (p.first == logicalId) return p.second;
    return {};
}

// Parameters are now drawn inline within each node; side panel removed


juce::ValueTree ImGuiNodeEditorComponent::getUiValueTree()
{
    juce::ValueTree ui ("NodeEditorUI");
    if (synth == nullptr) return ui;
    // Save node positions
    for (const auto& mod : synth->getModulesInfo())
    {
        const int nid = (int) mod.first;
        
        // Prefer cached position if available; never query ImNodes while rebuilding
        ImVec2 pos;
        if (lastKnownNodePositions.count(nid) > 0)
        {
            pos = lastKnownNodePositions[nid];
        }
        else if (graphNeedsRebuild.load())
        {
            // Fallback to any pending position queued for this node
            auto it = pendingNodePositions.find(nid);
            pos = (it != pendingNodePositions.end()) ? it->second : ImVec2(0.0f, 0.0f);
        }
        else
        {
            pos = ImNodes::GetNodeGridSpacePos(nid);
        }
        
        juce::ValueTree n ("node");
        n.setProperty ("id", nid, nullptr);
        n.setProperty ("x", pos.x, nullptr);
        n.setProperty ("y", pos.y, nullptr);
        
        // --- FIX: Save muted/bypassed state ---
        // If this node's ID is in our map of muted nodes, add the property to the XML
        if (mutedNodeStates.count(nid) > 0)
        {
            n.setProperty("muted", true, nullptr);
        }
        
        ui.addChild (n, -1, nullptr);
    }
    
    // --- FIX: Explicitly save the output node position (ID 0) ---
    // The main output node is not part of getModulesInfo(), so we need to save it separately
    
    // Prefer cached output position; avoid ImNodes when rebuilding
    ImVec2 outputPos;
    if (lastKnownNodePositions.count(0) > 0)
        outputPos = lastKnownNodePositions[0];
    else if (graphNeedsRebuild.load())
    {
        auto it0 = pendingNodePositions.find(0);
        outputPos = (it0 != pendingNodePositions.end()) ? it0->second : ImVec2(0.0f, 0.0f);
    }
    else
        outputPos = ImNodes::GetNodeGridSpacePos(0);
    
    juce::ValueTree outputNode("node");
    outputNode.setProperty("id", 0, nullptr);
    outputNode.setProperty("x", outputPos.x, nullptr);
    outputNode.setProperty("y", outputPos.y, nullptr);
    ui.addChild(outputNode, -1, nullptr);
    // --- END OF FIX ---
    
    return ui;
}

void ImGuiNodeEditorComponent::applyUiValueTreeNow (const juce::ValueTree& uiState)
{
    if (! uiState.isValid() || synth == nullptr) return;
    
    juce::Logger::writeToLog("[UI_RESTORE] Applying UI ValueTree now...");

    // This is the core of the crash: the synth graph has already been rebuilt by setStateInformation.
    // We must clear our stale UI data (like muted nodes) before applying the new state from the preset.
    mutedNodeStates.clear();
    
    auto nodes = uiState; // expect tag NodeEditorUI
    for (int i = 0; i < nodes.getNumChildren(); ++i)
    {
        auto n = nodes.getChild(i);
        
        if (! n.hasType ("node")) continue;
        const int nid = (int) n.getProperty ("id", 0);

        // ========================= THE FIX STARTS HERE =========================
        //
        // Before applying any property, VERIFY that this node ID actually exists
        // in the synth. This prevents crashes when loading presets that contain
        // modules which are not available in the current build.
        //
        bool nodeExistsInSynth = (nid == 0); // Node 0 is always the output node.
        if (!nodeExistsInSynth) {
            for (const auto& modInfo : synth->getModulesInfo()) {
                if ((int)modInfo.first == nid) {
                    nodeExistsInSynth = true;
                    break;
                }
            }
        }

        if (!nodeExistsInSynth)
        {
            juce::Logger::writeToLog("[UI_RESTORE] WARNING: Skipping UI properties for non-existent node ID " + juce::String(nid) + ". The module may be missing or failed to load.");
            continue; // Skip to the next node in the preset.
        }
        // ========================== END OF FIX ==========================

        const float x = (float) n.getProperty ("x", 0.0f);
        const float y = (float) n.getProperty ("y", 0.0f);
        if (!(x == 0.0f && y == 0.0f))
        {
            pendingNodePositions[nid] = ImVec2(x, y);
            juce::Logger::writeToLog("[UI_RESTORE] Queued position for node " + juce::String(nid) + ": (" + juce::String(x) + ", " + juce::String(y) + ")");
        }
        
        // Read and apply muted state from preset for existing nodes.
        if ((bool) n.getProperty("muted", false))
        {
            // Use muteNodeSilent to store the original connections first,
            // then apply the mute (which creates bypass connections)
            muteNodeSilent(nid);
            muteNode(nid);
        }
    }
    
    // Muting/unmuting modifies graph connections, so we must tell the
    // synth to rebuild its processing order.
    graphNeedsRebuild = true;
    juce::Logger::writeToLog("[UI_RESTORE] UI state applied. Flagging for graph rebuild.");
}

void ImGuiNodeEditorComponent::applyUiValueTree (const juce::ValueTree& uiState)
{
    // Queue for next frame to avoid calling imnodes setters before editor is begun
    uiPending = uiState;
}

void ImGuiNodeEditorComponent::handleDeletion()
{
    if (synth == nullptr)
        return;

    // Shift+Delete => bypass delete (keep chain intact)
    if ((ImGui::GetIO().KeyShift) && ImGui::IsKeyPressed(ImGuiKey_Delete))
    {
        bypassDeleteSelectedNodes();
        return;
    }

    // Use new key query API (1.90+) for normal delete
    if (! ImGui::IsKeyPressed(ImGuiKey_Delete))
        return;

    // If a drag was in progress, capture positions before we mutate the graph
    if (isDraggingNode || ImGui::IsMouseDragging(ImGuiMouseButton_Left))
    {
        isDraggingNode = false;
        pushSnapshot();
    }

    // Early out if nothing selected
    const int numSelLinks = ImNodes::NumSelectedLinks();
    const int numSelNodes = ImNodes::NumSelectedNodes();

    if (numSelLinks <= 0 && numSelNodes <= 0)
        return;

    // Perform batch delete; snapshot after commit

    // Disconnect selected links
        if (numSelLinks > 0)
        {
        std::vector<int> ids((size_t) numSelLinks);
        ImNodes::GetSelectedLinks(ids.data());
        for (int id : ids)
        {
            // TODO: Handle modulation link deletion for new bus-based system
            // if (auto itM = modLinkIdToRoute.find (id); itM != modLinkIdToRoute.end())
            // {
            //     int sL, sC, dL; juce::String paramId; std::tie(sL, sC, dL, paramId) = itM->second;
            //     // TODO: Handle modulation route removal
            //     // if (paramId.isNotEmpty())
            //     //     synth->removeModulationRoute (synth->getNodeIdForLogical ((juce::uint32) sL), sC, (juce::uint32) dL, paramId);
            //     // else
            //     //     synth->removeModulationRoute (synth->getNodeIdForLogical ((juce::uint32) sL), sC, (juce::uint32) dL);
            // }
            // else 
            if (auto it = linkIdToAttrs.find(id); it != linkIdToAttrs.end())
            {
                auto srcPin = decodePinId(it->second.first);
                auto dstPin = decodePinId(it->second.second);

                auto srcNode = synth->getNodeIdForLogical(srcPin.logicalId);
                auto dstNode = (dstPin.logicalId == 0) ? synth->getOutputNodeID() : synth->getNodeIdForLogical(dstPin.logicalId);
                synth->disconnect(srcNode, srcPin.channel, dstNode, dstPin.channel);
            }
            }
        }

        if (numSelNodes > 0)
        {
        std::vector<int> nodeIds((size_t) numSelNodes);
        ImNodes::GetSelectedNodes(nodeIds.data());
        // Build a set for quick lookup when removing connections
        std::unordered_map<int, bool> toDelete;
        for (int nid : nodeIds) toDelete[nid] = true;
        // Disconnect all connections touching any selected node
        for (const auto& c : synth->getConnectionsInfo())
        {
            if (toDelete.count((int) c.srcLogicalId) || (! c.dstIsOutput && toDelete.count((int) c.dstLogicalId)))
            {
                auto srcNode = synth->getNodeIdForLogical(c.srcLogicalId);
                auto dstNode = c.dstIsOutput ? synth->getOutputNodeID() : synth->getNodeIdForLogical(c.dstLogicalId);
                synth->disconnect(srcNode, c.srcChan, dstNode, c.dstChan);
            }
        }
        // Remove nodes
        for (int nid : nodeIds)
        {
            if (nid == 0) continue; // don't delete output sink
            mutedNodeStates.erase((juce::uint32)nid); // Clean up muted state if exists
            lastKnownNodePositions.erase(nid); // Clean up position cache
            synth->removeModule(synth->getNodeIdForLogical((juce::uint32) nid));
        }
    }
    graphNeedsRebuild = true;
    pushSnapshot();
}

void ImGuiNodeEditorComponent::bypassDeleteSelectedNodes()
{
    const int numSelNodes = ImNodes::NumSelectedNodes();
    if (numSelNodes <= 0 || synth == nullptr) return;

    // Snapshot positions first if dragging
    if (isDraggingNode || ImGui::IsMouseDragging(ImGuiMouseButton_Left))
    {
        isDraggingNode = false;
        pushSnapshot();
    }

    std::vector<int> nodeIds((size_t) numSelNodes);
    ImNodes::GetSelectedNodes(nodeIds.data());

    for (int nid : nodeIds)
    {
        if (nid == 0) continue; // don't bypass-delete the output sink
        bypassDeleteNode((juce::uint32) nid);
    }
    graphNeedsRebuild = true;
    pushSnapshot();
}

void ImGuiNodeEditorComponent::bypassDeleteNode(juce::uint32 logicalId)
{
    // Collect all incoming/outgoing audio links for this node
    std::vector<decltype(synth->getConnectionsInfo())::value_type> inputs, outputs;
    for (const auto& c : synth->getConnectionsInfo())
    {
        if (!c.dstIsOutput && c.dstLogicalId == logicalId) inputs.push_back(c);
        if (c.srcLogicalId == logicalId) outputs.push_back(c);
    }

    // For each output channel, find matching input channel to splice
    for (const auto& out : outputs)
    {
        // Try to find input with same channel index, else fallback to first input
        const auto* inPtr = (const decltype(inputs)::value_type*) nullptr;
        for (const auto& in : inputs) { if (in.dstChan == out.srcChan) { inPtr = &in; break; } }
        if (inPtr == nullptr && !inputs.empty()) inPtr = &inputs.front();

        // Disconnect out link first
        auto srcNode = synth->getNodeIdForLogical(out.srcLogicalId);
        auto dstNode = out.dstIsOutput ? synth->getOutputNodeID() : synth->getNodeIdForLogical(out.dstLogicalId);
        synth->disconnect(srcNode, out.srcChan, dstNode, out.dstChan);

        if (inPtr != nullptr)
        {
            // Disconnect incoming link from the node
            auto inSrcNode = synth->getNodeIdForLogical(inPtr->srcLogicalId);
            auto inDstNode = synth->getNodeIdForLogical(inPtr->dstLogicalId);
            synth->disconnect(inSrcNode, inPtr->srcChan, inDstNode, inPtr->dstChan);

            // Connect source of incoming directly to destination of outgoing
            auto finalDstNode = out.dstIsOutput ? synth->getOutputNodeID() : synth->getNodeIdForLogical(out.dstLogicalId);
            synth->connect(inSrcNode, inPtr->srcChan, finalDstNode, out.dstChan);
        }
    }

    // TODO: Remove modulation routes targeting or originating this node using new bus-based system

    // Finally remove the node itself
    mutedNodeStates.erase(logicalId); // Clean up muted state if exists
    synth->removeModule(synth->getNodeIdForLogical(logicalId));
}

// === Non-Destructive Mute/Bypass Implementation ===

void ImGuiNodeEditorComponent::muteNodeSilent(juce::uint32 logicalId)
{
    // This function is used when loading presets. It records the connections that were
    // loaded from the XML without modifying the graph or creating bypass connections.
    // This preserves the original "unmuted" connections for later use.
    
    if (!synth) return;

    MutedNodeState state;
    auto allConnections = synth->getConnectionsInfo();

    // Store all connections attached to this node
    for (const auto& c : allConnections) {
        if (!c.dstIsOutput && c.dstLogicalId == logicalId) {
            state.incomingConnections.push_back(c);
        }
        if (c.srcLogicalId == logicalId) {
            state.outgoingConnections.push_back(c);
        }
    }

    // Store the state, but DON'T modify the graph or create bypass connections
    mutedNodeStates[logicalId] = state;
    juce::Logger::writeToLog("[MuteSilent] Node " + juce::String(logicalId) + 
                            " marked as muted, stored " + juce::String(state.incomingConnections.size()) + 
                            " incoming and " + juce::String(state.outgoingConnections.size()) + 
                            " outgoing connections.");
}

void ImGuiNodeEditorComponent::muteNode(juce::uint32 logicalId)
{
    if (!synth) return;

    MutedNodeState state;
    auto allConnections = synth->getConnectionsInfo();

    // 1. Find and store all connections attached to this node.
    for (const auto& c : allConnections) {
        if (!c.dstIsOutput && c.dstLogicalId == logicalId) {
            state.incomingConnections.push_back(c);
        }
        if (c.srcLogicalId == logicalId) {
            state.outgoingConnections.push_back(c);
        }
    }

    // 2. Disconnect all of them.
    for (const auto& c : state.incomingConnections) {
        synth->disconnect(synth->getNodeIdForLogical(c.srcLogicalId), c.srcChan, synth->getNodeIdForLogical(c.dstLogicalId), c.dstChan);
    }
    for (const auto& c : state.outgoingConnections) {
        auto dstNodeId = c.dstIsOutput ? synth->getOutputNodeID() : synth->getNodeIdForLogical(c.dstLogicalId);
        synth->disconnect(synth->getNodeIdForLogical(c.srcLogicalId), c.srcChan, dstNodeId, c.dstChan);
    }
    
    // --- FIX: More robust bypass splicing logic ---
    // 3. Splice the connections to bypass the node.
    // Connect the FIRST input source to ALL output destinations.
    // This correctly handles cases where input channel != output channel (e.g., Mixer input 3 → output 0).
    if (!state.incomingConnections.empty() && !state.outgoingConnections.empty())
    {
        const auto& primary_input = state.incomingConnections[0];
        auto srcNodeId = synth->getNodeIdForLogical(primary_input.srcLogicalId);

        for (const auto& out_conn : state.outgoingConnections)
        {
            auto dstNodeId = out_conn.dstIsOutput ? synth->getOutputNodeID() : synth->getNodeIdForLogical(out_conn.dstLogicalId);
            // Connect the primary input's source directly to the original output's destination
            synth->connect(srcNodeId, primary_input.srcChan, dstNodeId, out_conn.dstChan);
            juce::Logger::writeToLog("[Mute] Splicing bypass: [" + juce::String(primary_input.srcLogicalId) + 
                                    ":" + juce::String(primary_input.srcChan) + "] -> [" + 
                                    (out_conn.dstIsOutput ? "Output" : juce::String(out_conn.dstLogicalId)) + 
                                    ":" + juce::String(out_conn.dstChan) + "]");
        }
    }

    // 4. Store the original state.
    mutedNodeStates[logicalId] = state;
    juce::Logger::writeToLog("[Mute] Node " + juce::String(logicalId) + " muted and bypassed.");
}

void ImGuiNodeEditorComponent::unmuteNode(juce::uint32 logicalId)
{
    if (!synth || mutedNodeStates.find(logicalId) == mutedNodeStates.end()) return;

    MutedNodeState state = mutedNodeStates[logicalId];

    // --- FIX: Remove bypass connections matching the new mute logic ---
    // 1. Find and remove the bypass connections.
    // The bypass connected the first input source to all output destinations.
    if (!state.incomingConnections.empty() && !state.outgoingConnections.empty())
    {
        const auto& primary_input = state.incomingConnections[0];
        auto srcNodeId = synth->getNodeIdForLogical(primary_input.srcLogicalId);

        for (const auto& out_conn : state.outgoingConnections)
        {
            auto dstNodeId = out_conn.dstIsOutput ? synth->getOutputNodeID() : synth->getNodeIdForLogical(out_conn.dstLogicalId);
            // Disconnect the bypass connection
            synth->disconnect(srcNodeId, primary_input.srcChan, dstNodeId, out_conn.dstChan);
            juce::Logger::writeToLog("[Unmute] Removing bypass: [" + juce::String(primary_input.srcLogicalId) + 
                                    ":" + juce::String(primary_input.srcChan) + "] -> [" + 
                                    (out_conn.dstIsOutput ? "Output" : juce::String(out_conn.dstLogicalId)) + 
                                    ":" + juce::String(out_conn.dstChan) + "]");
        }
    }

    // 2. Restore the original connections.
    for (const auto& c : state.incomingConnections) {
        synth->connect(synth->getNodeIdForLogical(c.srcLogicalId), c.srcChan, synth->getNodeIdForLogical(c.dstLogicalId), c.dstChan);
    }
    for (const auto& c : state.outgoingConnections) {
        auto dstNodeId = c.dstIsOutput ? synth->getOutputNodeID() : synth->getNodeIdForLogical(c.dstLogicalId);
        synth->connect(synth->getNodeIdForLogical(c.srcLogicalId), c.srcChan, dstNodeId, c.dstChan);
    }

    // 3. Remove from muted state.
    mutedNodeStates.erase(logicalId);
    juce::Logger::writeToLog("[Mute] Node " + juce::String(logicalId) + " unmuted.");
}

void ImGuiNodeEditorComponent::handleMuteToggle()
{
    const int numSelected = ImNodes::NumSelectedNodes();
    if (numSelected == 0) return;

    pushSnapshot(); // Create a single undo state for the whole operation.

    std::vector<int> selectedNodeIds(numSelected);
    ImNodes::GetSelectedNodes(selectedNodeIds.data());

    for (int lid : selectedNodeIds) {
        if (mutedNodeStates.count(lid)) {
            unmuteNode(lid);
        } else {
            muteNode(lid);
        }
    }

    graphNeedsRebuild = true;
}

void ImGuiNodeEditorComponent::startSaveDialog()
{
    saveChooser = std::make_unique<juce::FileChooser> ("Save preset", findPresetsDirectory(), "*.xml");
    saveChooser->launchAsync (juce::FileBrowserComponent::saveMode | juce::FileBrowserComponent::canSelectFiles,
        [this] (const juce::FileChooser& fc)
    {
        auto f = fc.getResult();
        if (! f.exists() && ! f.getParentDirectory().exists()) return;
        if (synth == nullptr) return;
        
        // --- FIX: Temporarily unmute nodes to save original connections ---
        // Collect all currently muted nodes
        std::vector<juce::uint32> currentlyMutedNodes;
        for (const auto& pair : mutedNodeStates)
        {
            currentlyMutedNodes.push_back(pair.first);
        }
        
        // Temporarily UNMUTE all of them to restore the original connections
        for (juce::uint32 lid : currentlyMutedNodes)
        {
            unmuteNode(lid);
        }
        
        // Force the synth to apply these connection changes immediately
        if (synth)
        {
            synth->commitChanges();
        }
        // At this point, the synth graph is in its "true", unmuted state
        
        // NOW get the state - this will save the correct, original connections
        juce::MemoryBlock mb; synth->getStateInformation (mb);
        auto xml = juce::XmlDocument::parse (mb.toString());
        
        // IMMEDIATELY RE-MUTE the nodes to return the editor to its visible state
        for (juce::uint32 lid : currentlyMutedNodes)
        {
            muteNode(lid);
        }
        
        // Force the synth to apply the re-mute changes immediately
        if (synth)
        {
            synth->commitChanges();
        }
        // The synth graph is now back to its bypassed state for audio processing
        // --- END OF FIX ---
        
        if (! xml) return;
        juce::ValueTree presetVT = juce::ValueTree::fromXml (*xml);
        presetVT.addChild (getUiValueTree(), -1, nullptr);
        f.replaceWithText (presetVT.createXml()->toString());
        
        // Update preset status tracking
        isPatchDirty = false;
        currentPresetFile = f.getFileName();
    });
}

void ImGuiNodeEditorComponent::startLoadDialog()
{
    loadChooser = std::make_unique<juce::FileChooser> ("Load preset", findPresetsDirectory(), "*.xml");
    loadChooser->launchAsync (juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectFiles,
        [this] (const juce::FileChooser& fc)
    {
        auto f = fc.getResult();
        if (f.existsAsFile())
        {
            loadPresetFromFile(f); // Use the unified loading function
        }
    });
}

void ImGuiNodeEditorComponent::handleRandomizePatch()
{
    if (synth == nullptr) return;
    
    populatePinDatabase();

    // 1. --- SETUP ---
    synth->clearAll();
    juce::Random rng(juce::Time::getMillisecondCounterHiRes());
    
    // 2. --- ADD A "CLOUD" OF RANDOM MODULES ---
    std::vector<juce::String> modulePool = {
        "VCO", "Noise", "Sequencer", "VCF", "Delay", "Reverb", "Waveshaper",
        "LFO", "ADSR", "Random", "S&H", "Math", "MapRange", "Quantizer", "ClockDivider"
    };
    int numModules = 6 + rng.nextInt(7); // 6 to 12 modules
    std::vector<std::pair<juce::uint32, juce::String>> addedModules;

    for (int i = 0; i < numModules; ++i) {
        auto type = modulePool[rng.nextInt(modulePool.size())];
        auto newId = synth->getLogicalIdForNode(synth->addModule(type));
        addedModules.push_back({newId, type});
    }

    // 3. --- ESTABLISH AN OBSERVATION POINT ---
    // Always add a Mixer and Scope. This is our window into the chaos.
    auto mixerId = synth->getLogicalIdForNode(synth->addModule("Mixer"));
    addedModules.push_back({mixerId, "Mixer"});
    auto scopeId = synth->getLogicalIdForNode(synth->addModule("Scope"));
    addedModules.push_back({scopeId, "Scope"});
    
    // Connect the observation path: Mixer -> Scope -> Output
    auto outputNodeId = synth->getOutputNodeID();
    synth->connect(synth->getNodeIdForLogical(mixerId), 0, synth->getNodeIdForLogical(scopeId), 0);
    synth->connect(synth->getNodeIdForLogical(scopeId), 0, outputNodeId, 0);
    synth->connect(synth->getNodeIdForLogical(scopeId), 1, outputNodeId, 1);

    // 4. --- CREATE CHAOTIC CONNECTIONS ---
    std::vector<std::pair<juce::uint32, AudioPin>> allAudioOuts;
    std::vector<std::pair<juce::uint32, AudioPin>> allAudioIns;
    std::vector<std::pair<juce::uint32, ModPin>> allModIns;

    for (const auto& mod : addedModules) {
        auto it = getModulePinDatabase().find(mod.second);
        if (it != getModulePinDatabase().end()) {
            for(const auto& pin : it->second.audioOuts) allAudioOuts.push_back({mod.first, pin});
            for(const auto& pin : it->second.audioIns) allAudioIns.push_back({mod.first, pin});
            for(const auto& pin : it->second.modIns) allModIns.push_back({mod.first, pin});
        }
    }
    
    // Connect a few random audio sources to the Mixer to make sound likely
    int numMixerInputs = 2 + rng.nextInt(3); // 2 to 4 mixer inputs
    if (!allAudioOuts.empty()) {
        for (int i = 0; i < numMixerInputs; ++i) {
            auto& source = allAudioOuts[rng.nextInt(allAudioOuts.size())];
            // Connect to mixer inputs 0, 1, 2, 3
            synth->connect(synth->getNodeIdForLogical(source.first), source.second.channel, synth->getNodeIdForLogical(mixerId), i);
        }
    }

    // Make a large number of fully random connections
    int numRandomConnections = numModules + rng.nextInt(numModules);
    for (int i = 0; i < numRandomConnections; ++i)
    {
        float choice = rng.nextFloat();
        // 70% chance of making a CV modulation connection
        if (choice < 0.7f && !allAudioOuts.empty() && !allModIns.empty()) {
            auto& source = allAudioOuts[rng.nextInt(allAudioOuts.size())];
            auto& target = allModIns[rng.nextInt(allModIns.size())];
            // TODO: synth->addModulationRouteByLogical(source.first, source.second.channel, target.first, target.second.paramId);
        }
        // 30% chance of making an audio-path or gate connection
        else if (!allAudioOuts.empty() && !allAudioIns.empty()) {
            auto& source = allAudioOuts[rng.nextInt(allAudioOuts.size())];
            auto& target = allAudioIns[rng.nextInt(allAudioIns.size())];
            // Allow self-connection for feedback
            if (source.first != target.first || rng.nextFloat() < 0.2f) {
                synth->connect(synth->getNodeIdForLogical(source.first), source.second.channel, synth->getNodeIdForLogical(target.first), target.second.channel);
            }
        }
    }

    // 5. --- LAYOUT AND FINALIZE ---
    // Arrange nodes in a neat grid to prevent overlap.
    const float startX = 50.0f;
    const float startY = 50.0f;
    const float cellWidth = 300.0f;
    const float cellHeight = 400.0f;
    const int numColumns = 4;
    int col = 0;
    int row = 0;

    juce::uint32 finalMixerId = 0, finalScopeId = 0;
    for (const auto& mod : addedModules) {
        if (mod.second == "Mixer") finalMixerId = mod.first;
        if (mod.second == "Scope") finalScopeId = mod.first;
    }

    for (const auto& mod : addedModules)
    {
        // Skip the special output-chain nodes; we will place them manually.
        if (mod.first == finalMixerId || mod.first == finalScopeId) continue;

        float x = startX + col * cellWidth;
        float y = startY + row * cellHeight;
        pendingNodePositions[(int)mod.first] = ImVec2(x, y);

        col++;
        if (col >= numColumns) {
            col = 0;
            row++;
        }
    }

    // Manually place the Mixer and Scope on the far right for a clean, readable signal flow.
    float finalX = startX + numColumns * cellWidth;
    if (finalMixerId != 0) pendingNodePositions[(int)finalMixerId] = ImVec2(finalX, startY);
    if (finalScopeId != 0) pendingNodePositions[(int)finalScopeId] = ImVec2(finalX, startY + cellHeight);
    
    synth->commitChanges();
    pushSnapshot();
}

void ImGuiNodeEditorComponent::handleRandomizeConnections()
{
    if (synth == nullptr) return;
    auto currentModules = synth->getModulesInfo();
    if (currentModules.empty()) return;

    // 1. --- SETUP AND CLEAR ---
    synth->clearAllConnections();
    juce::Random rng(juce::Time::getMillisecondCounterHiRes());

    // 2. --- ESTABLISH AN OBSERVATION POINT ---
    juce::uint32 mixerId = 0, scopeId = 0;
    for (const auto& mod : currentModules) {
        if (mod.second == "Mixer") mixerId = mod.first;
        if (mod.second == "Scope") scopeId = mod.first;
    }
    // Add Mixer/Scope if they don't exist, as they are crucial for listening
    if (mixerId == 0) mixerId = synth->getLogicalIdForNode(synth->addModule("Mixer"));
    if (scopeId == 0) scopeId = synth->getLogicalIdForNode(synth->addModule("Scope"));

    auto outputNodeId = synth->getOutputNodeID();
    synth->connect(synth->getNodeIdForLogical(mixerId), 0, synth->getNodeIdForLogical(scopeId), 0);
    synth->connect(synth->getNodeIdForLogical(scopeId), 0, outputNodeId, 0);

    // 3. --- CREATE CHAOTIC CONNECTIONS ---
    std::vector<std::pair<juce::uint32, AudioPin>> allAudioOuts;
    std::vector<std::pair<juce::uint32, AudioPin>> allAudioIns;
    std::vector<std::pair<juce::uint32, ModPin>> allModIns;
    
    // Refresh module list in case we added a Mixer/Scope
    auto updatedModules = synth->getModulesInfo();
    for (const auto& mod : updatedModules) {
        auto it = getModulePinDatabase().find(mod.second);
        if (it != getModulePinDatabase().end()) {
            for(const auto& pin : it->second.audioOuts) allAudioOuts.push_back({mod.first, pin});
            for(const auto& pin : it->second.audioIns) allAudioIns.push_back({mod.first, pin});
            for(const auto& pin : it->second.modIns) allModIns.push_back({mod.first, pin});
        }
    }
    
    // Connect random sources to the Mixer
    int numMixerInputs = 2 + rng.nextInt(3);
    if (!allAudioOuts.empty()) {
        for (int i = 0; i < numMixerInputs; ++i) {
            auto& source = allAudioOuts[rng.nextInt(allAudioOuts.size())];
            if (source.first != mixerId) // Don't connect mixer to itself here
                synth->connect(synth->getNodeIdForLogical(source.first), source.second.channel, synth->getNodeIdForLogical(mixerId), i);
        }
    }
    
    // Make a large number of fully random connections
    int numRandomConnections = (int)updatedModules.size() + rng.nextInt((int)updatedModules.size());
    for (int i = 0; i < numRandomConnections; ++i)
    {
        float choice = rng.nextFloat();
        if (choice < 0.7f && !allAudioOuts.empty() && !allModIns.empty()) {
            auto& source = allAudioOuts[rng.nextInt(allAudioOuts.size())];
            auto& target = allModIns[rng.nextInt(allModIns.size())];
            // TODO: synth->addModulationRouteByLogical(source.first, source.second.channel, target.first, target.second.paramId);
        }
        else if (!allAudioOuts.empty() && !allAudioIns.empty()) {
            auto& source = allAudioOuts[rng.nextInt(allAudioOuts.size())];
            auto& target = allAudioIns[rng.nextInt(allAudioIns.size())];
            if (source.first != target.first || rng.nextFloat() < 0.2f) { // Allow feedback
                synth->connect(synth->getNodeIdForLogical(source.first), source.second.channel, synth->getNodeIdForLogical(target.first), target.second.channel);
            }
        }
    }

    // 4. --- FINALIZE ---
    synth->commitChanges();
    pushSnapshot();
}

void ImGuiNodeEditorComponent::handleBeautifyLayout()
{
    if (synth == nullptr) return;

    // Graph is always in consistent state since we rebuild at frame start
    // Create an undo state so the action can be reversed
    pushSnapshot();
    juce::Logger::writeToLog("--- [Beautify Layout] Starting ---");

    // --- STEP 1: Build Graph Representation ---
    // Adjacency list: map<source_lid, vector<destination_lid>>
    std::map<juce::uint32, std::vector<juce::uint32>> adjacencyList;
    std::map<juce::uint32, int> inDegree; // Counts incoming connections for each node
    std::vector<juce::uint32> sourceNodes;

    auto modules = synth->getModulesInfo();
    for (const auto& mod : modules)
    {
        inDegree[mod.first] = 0;
        adjacencyList[mod.first] = {};
    }
    // Include the output node in the graph
    inDegree[0] = 0; // Output node ID is 0
    adjacencyList[0] = {}; // Output node has no outgoing connections

    for (const auto& conn : synth->getConnectionsInfo())
    {
        if (conn.dstIsOutput)
        {
            adjacencyList[conn.srcLogicalId].push_back(0); // Connect to output node
            inDegree[0]++;
        }
        else
        {
            adjacencyList[conn.srcLogicalId].push_back(conn.dstLogicalId);
            inDegree[conn.dstLogicalId]++;
        }
    }

    for (const auto& mod : modules)
    {
        if (inDegree[mod.first] == 0)
        {
            sourceNodes.push_back(mod.first);
        }
    }

    juce::Logger::writeToLog("[Beautify] Found " + juce::String(sourceNodes.size()) + " source nodes");

    // --- STEP 2: Assign Nodes to Columns (Topological Sort) ---
    std::map<juce::uint32, int> nodeColumn;
    std::vector<std::vector<juce::uint32>> columns;
    int maxColumn = 0;

    // Initialize source nodes in column 0
    for (juce::uint32 nodeId : sourceNodes)
    {
        nodeColumn[nodeId] = 0;
    }
    columns.push_back(sourceNodes);

    // Process each column and assign children to appropriate columns
    std::queue<juce::uint32> processQueue;
    for (juce::uint32 srcNode : sourceNodes)
        processQueue.push(srcNode);

    while (!processQueue.empty())
    {
        juce::uint32 u = processQueue.front();
        processQueue.pop();

        for (juce::uint32 v : adjacencyList[u])
        {
            // The column for node 'v' is the maximum of its predecessors' columns + 1
            int newColumn = nodeColumn[u] + 1;
            if (nodeColumn.count(v) == 0 || newColumn > nodeColumn[v])
            {
                nodeColumn[v] = newColumn;
                maxColumn = std::max(maxColumn, newColumn);
                processQueue.push(v);
            }
        }
    }

    // Re-populate columns based on assignments
    columns.assign(maxColumn + 1, {});
    for (const auto& pair : nodeColumn)
    {
        columns[pair.second].push_back(pair.first);
    }

    juce::Logger::writeToLog("[Beautify] Arranged nodes into " + juce::String(maxColumn + 1) + " columns");

    // --- STEP 3: Optimize Node Ordering Within Columns ---
    // Sort nodes in each column based on median position of their parents
    for (int c = 1; c <= maxColumn; ++c)
    {
        std::map<juce::uint32, float> medianPositions;
        
        for (juce::uint32 nodeId : columns[c])
        {
            std::vector<float> parentPositions;
            
            // Find all parents in previous columns
            for (const auto& pair : adjacencyList)
            {
                for (juce::uint32 dest : pair.second)
                {
                    if (dest == nodeId)
                    {
                        // Find the vertical index of the parent node
                        int parentColumn = nodeColumn[pair.first];
                        auto& parentColVec = columns[parentColumn];
                        auto it = std::find(parentColVec.begin(), parentColVec.end(), pair.first);
                        if (it != parentColVec.end())
                        {
                            parentPositions.push_back((float)std::distance(parentColVec.begin(), it));
                        }
                    }
                }
            }
            
            if (!parentPositions.empty())
            {
                std::sort(parentPositions.begin(), parentPositions.end());
                medianPositions[nodeId] = parentPositions[parentPositions.size() / 2];
            }
            else
            {
                medianPositions[nodeId] = 0.0f;
            }
        }
        
        // Sort the column based on median positions
        std::sort(columns[c].begin(), columns[c].end(), [&](juce::uint32 a, juce::uint32 b) {
            return medianPositions[a] < medianPositions[b];
        });
    }

    // --- STEP 4: Calculate Final Coordinates ---
    const float COLUMN_WIDTH = 400.0f;
    const float NODE_VERTICAL_PADDING = 50.0f;

    // Find the tallest column to center shorter ones
    float tallestColumnHeight = 0.0f;
    for (const auto& col : columns)
    {
        float height = 0.0f;
        for (juce::uint32 lid : col)
        {
            ImVec2 nodeSize = ImNodes::GetNodeDimensions((int)lid);
            height += nodeSize.y + NODE_VERTICAL_PADDING;
        }
        tallestColumnHeight = std::max(tallestColumnHeight, height);
    }

    // --- STEP 5: Apply Positions ---
    for (int c = 0; c <= maxColumn; ++c)
    {
        // Calculate column height for centering
        float columnHeight = 0.0f;
        for (juce::uint32 lid : columns[c])
        {
            columnHeight += ImNodes::GetNodeDimensions((int)lid).y + NODE_VERTICAL_PADDING;
        }
        
        // Start Y position (centered vertically)
        float currentY = (tallestColumnHeight - columnHeight) / 2.0f;

        for (juce::uint32 lid : columns[c])
        {
            float x = c * COLUMN_WIDTH;
            pendingNodePositions[(int)lid] = ImVec2(x, currentY);
            
            ImVec2 nodeSize = ImNodes::GetNodeDimensions((int)lid);
            currentY += nodeSize.y + NODE_VERTICAL_PADDING;
        }
    }

    // Position the output node to the right of all other modules
    float finalX = (maxColumn + 1) * COLUMN_WIDTH;
    float outputNodeY = (tallestColumnHeight - ImNodes::GetNodeDimensions(0).y) / 2.0f;
    pendingNodePositions[0] = ImVec2(finalX, outputNodeY);
    juce::Logger::writeToLog("[Beautify] Applied position to Output Node");
    
    juce::Logger::writeToLog("[Beautify] Applied positions to " + juce::String(modules.size()) + " nodes");
    juce::Logger::writeToLog("--- [Beautify Layout] Complete ---");
}

void ImGuiNodeEditorComponent::handleConnectSelectedToTrackMixer()
{
    if (synth == nullptr || ImNodes::NumSelectedNodes() <= 0)
    {
        juce::Logger::writeToLog("[AutoConnect] Aborted: No synth or no nodes selected.");
        return;
    }

    // This is a significant action, so create an undo state first.
    pushSnapshot();
    juce::Logger::writeToLog("--- [Connect to Mixer] Starting routine ---");

    // 1. Get all selected node IDs.
    const int numSelectedNodes = ImNodes::NumSelectedNodes();
    std::vector<int> selectedNodeLids(numSelectedNodes);
    ImNodes::GetSelectedNodes(selectedNodeLids.data());

    // 2. Find the geometric center of the selected nodes to position our new modules.
    float totalX = 0.0f, maxX = 0.0f, totalY = 0.0f;
    for (int lid : selectedNodeLids)
    {
        ImVec2 pos = ImNodes::GetNodeGridSpacePos(lid);
        totalX += pos.x;
        totalY += pos.y;
        if (pos.x > maxX) {
            maxX = pos.x;
        }
    }
    ImVec2 centerPos = ImVec2(totalX / numSelectedNodes, totalY / numSelectedNodes);
    
    // 3. Create the Value node and set its value to the number of selected nodes.
    auto valueNodeId = synth->addModule("Value");
    auto valueLid = synth->getLogicalIdForNode(valueNodeId);
    if (auto* valueProc = dynamic_cast<ValueModuleProcessor*>(synth->getModuleForLogical(valueLid)))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(valueProc->getAPVTS().getParameter("value")))
        {
            *p = (float)numSelectedNodes;
            juce::Logger::writeToLog("[AutoConnect] Created Value node " + juce::String(valueLid) + " and set its value to " + juce::String(numSelectedNodes));
        }
    }
    // Position it slightly to the right of the center of the selection.
    pendingNodePositions[(int)valueLid] = ImVec2(centerPos.x + 400.0f, centerPos.y);

    // 4. Create the Track Mixer node.
    auto mixerNodeId = synth->addModule("trackmixer");
    auto mixerLid = synth->getLogicalIdForNode(mixerNodeId);
    // Position it to the right of the right-most selected node for a clean signal flow.
    pendingNodePositions[(int)mixerLid] = ImVec2(maxX + 800.0f, centerPos.y);
    juce::Logger::writeToLog("[AutoConnect] Created Track Mixer with logical ID " + juce::String(mixerLid));

    // 5. Connect the Value node to the Track Mixer's "Num Tracks Mod" input.
    // The Value module's "Raw" output is channel 0 (provides the exact value entered by the user).
    // The Track Mixer's "Num Tracks Mod" is on Bus 1, Channel 0, which is absolute channel 64.
    synth->connect(valueNodeId, 0, mixerNodeId, TrackMixerModuleProcessor::MAX_TRACKS);
    juce::Logger::writeToLog("[AutoConnect] Connected Value node 'Raw' output to Track Mixer's Num Tracks Mod input.");

    // 6. Connect the primary audio output of each selected node to a unique input on the Track Mixer.
    int mixerInputChannel = 0;
    for (int lid : selectedNodeLids)
    {
        if (mixerInputChannel >= TrackMixerModuleProcessor::MAX_TRACKS) break;

        auto sourceNodeId = synth->getNodeIdForLogical((juce::uint32)lid);
        
        // We will connect the first audio output (channel 0) of the source to the next available mixer input.
        synth->connect(sourceNodeId, 0, mixerNodeId, mixerInputChannel);
        juce::Logger::writeToLog("[AutoConnect] Connected node " + juce::String(lid) + " (Out 0) to Track Mixer (In " + juce::String(mixerInputChannel + 1) + ")");
        
        mixerInputChannel++;
    }

    // 7. Flag the graph for a rebuild to apply all changes.
    graphNeedsRebuild = true;
    juce::Logger::writeToLog("--- [Connect to Mixer] Routine complete. ---");
}

void ImGuiNodeEditorComponent::handleMidiPlayerAutoConnect(MIDIPlayerModuleProcessor* midiPlayer, juce::uint32 midiPlayerLid)
{
    if (!synth || !midiPlayer || midiPlayerLid == 0 || !midiPlayer->hasMIDIFileLoaded())
    {
        juce::Logger::writeToLog("[AutoConnect] Aborted: MIDI Player not ready.");
        return;
    }

    juce::Logger::writeToLog("--- [AutoConnect to Samplers] Starting routine for MIDI Player " + juce::String(midiPlayerLid) + " ---");

    // 1. Get initial positions and clear existing connections from the MIDI Player.
    auto midiPlayerNodeId = synth->getNodeIdForLogical(midiPlayerLid);
    ImVec2 midiPlayerPos = ImNodes::GetNodeGridSpacePos((int)midiPlayerLid);
    synth->clearConnectionsForNode(midiPlayerNodeId);

    // --- FIX: Create and position the Track Mixer first ---
    auto mixerNodeId = synth->addModule("trackmixer");
    auto mixerLid = synth->getLogicalIdForNode(mixerNodeId);
    pendingNodePositions[(int)mixerLid] = ImVec2(midiPlayerPos.x + 1200.0f, midiPlayerPos.y);
    juce::Logger::writeToLog("[AutoConnect] Created Track Mixer with logical ID " + juce::String(mixerLid));

    // --- FIX: Connect MIDI Player "Num Tracks" output to Track Mixer "Num Tracks Mod" input ---
    // This ensures the Track Mixer automatically adjusts its track count based on the MIDI file content
    synth->connect(midiPlayerNodeId, MIDIPlayerModuleProcessor::kNumTracksChannelIndex, mixerNodeId, TrackMixerModuleProcessor::MAX_TRACKS);
    juce::Logger::writeToLog("[AutoConnect] Connected MIDI Player Num Tracks to Track Mixer Num Tracks Mod");

    // 2. Create and connect a Sample Loader for each active MIDI track.
    const auto& activeTrackIndices = midiPlayer->getActiveTrackIndices();
    juce::Logger::writeToLog("[AutoConnect] MIDI file has " + juce::String(activeTrackIndices.size()) + " active tracks.");

    for (int i = 0; i < (int)activeTrackIndices.size(); ++i)
    {
        if (i >= MIDIPlayerModuleProcessor::kMaxTracks) break;

        // A. Create and position the new modules.
        auto samplerNodeId = synth->addModule("sample loader");
        auto samplerLid = synth->getLogicalIdForNode(samplerNodeId);
        pendingNodePositions[(int)samplerLid] = ImVec2(midiPlayerPos.x + 800.0f, midiPlayerPos.y + (i * 350.0f));

        auto mapRangeNodeId = synth->addModule("MapRange");
        auto mapRangeLid = synth->getLogicalIdForNode(mapRangeNodeId);
        pendingNodePositions[(int)mapRangeLid] = ImVec2(midiPlayerPos.x + 400.0f, midiPlayerPos.y + (i * 350.0f));
        
        // B. Configure the MapRange module for Pitch CV conversion.
        if (auto* mapRangeProc = dynamic_cast<MapRangeModuleProcessor*>(synth->getModuleForLogical(mapRangeLid)))
        {
            auto& ap = mapRangeProc->getAPVTS();
            // MIDI Player Pitch Out (0..1) -> Sample Loader Pitch Mod (-24..+24 semitones)
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("inMin"))) *p = 0.0f;
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("inMax"))) *p = 1.0f;
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMin"))) *p = -24.0f;
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMax"))) *p = 24.0f;
        }

        // C. Connect the outputs for this track.
        const int pitchChan = i * MIDIPlayerModuleProcessor::kOutputsPerTrack + 0;
        const int gateChan  = i * MIDIPlayerModuleProcessor::kOutputsPerTrack + 1;
        const int trigChan  = i * MIDIPlayerModuleProcessor::kOutputsPerTrack + 3;

        // Pitch: MIDI Player -> MapRange -> Sample Loader
        synth->connect(midiPlayerNodeId, pitchChan, mapRangeNodeId, 0); // Pitch Out -> MapRange In
        synth->connect(mapRangeNodeId, 1, samplerNodeId, 0);             // MapRange Raw Out -> SampleLoader Pitch Mod In

        // Gate: MIDI Player -> Sample Loader
        synth->connect(midiPlayerNodeId, gateChan, samplerNodeId, 2);    // Gate Out -> SampleLoader Gate Mod In

        // Trigger: MIDI Player -> Sample Loader
        synth->connect(midiPlayerNodeId, trigChan, samplerNodeId, 3);    // Trigger Out -> SampleLoader Trigger Mod In

        // --- FIX: Connect the Sample Loader's audio output to the Track Mixer ---
        // The Sample Loader's main audio output is channel 0.
        // The Track Mixer's inputs are mono channels 0, 1, 2...
        synth->connect(samplerNodeId, 0, mixerNodeId, i);
    }

    // --- FIX: Connect the mixer to the main output so you can hear it! ---
    auto outputNodeId = synth->getOutputNodeID();
    synth->connect(mixerNodeId, 0, outputNodeId, 0); // Mixer Out L -> Main Out L
    synth->connect(mixerNodeId, 1, outputNodeId, 1); // Mixer Out R -> Main Out R

    // 3. Flag the graph for a rebuild to apply all changes.
    graphNeedsRebuild = true;
    juce::Logger::writeToLog("--- [AutoConnect to Samplers] Routine complete. ---");
}

void ImGuiNodeEditorComponent::handleMidiPlayerAutoConnectVCO(MIDIPlayerModuleProcessor* midiPlayer, juce::uint32 midiPlayerLid)
{
    if (!synth || !midiPlayer || midiPlayerLid == 0 || !midiPlayer->hasMIDIFileLoaded())
    {
        juce::Logger::writeToLog("[AutoConnectVCO] Aborted: MIDI Player not ready.");
        return;
    }
    
    juce::Logger::writeToLog("--- [AutoConnectVCO] Starting routine for MIDI Player " + juce::String(midiPlayerLid) + " ---");

    // 1. Get initial positions and clear all existing connections from the MIDI Player.
    auto midiPlayerNodeId = synth->getNodeIdForLogical(midiPlayerLid);
    ImVec2 midiPlayerPos = ImNodes::GetNodeGridSpacePos((int)midiPlayerLid);
    synth->clearConnectionsForNode(midiPlayerNodeId);
    
    // 2. Create and position the PolyVCO and Track Mixer.
    auto polyVcoNodeId = synth->addModule("polyvco");
    auto polyVcoLid = synth->getLogicalIdForNode(polyVcoNodeId);
    pendingNodePositions[(int)polyVcoLid] = ImVec2(midiPlayerPos.x + 400.0f, midiPlayerPos.y);
    juce::Logger::writeToLog("[AutoConnectVCO] Created PolyVCO with logical ID " + juce::String(polyVcoLid));

    auto mixerNodeId = synth->addModule("trackmixer");
    auto mixerLid = synth->getLogicalIdForNode(mixerNodeId);
    pendingNodePositions[(int)mixerLid] = ImVec2(midiPlayerPos.x + 800.0f, midiPlayerPos.y);
    juce::Logger::writeToLog("[AutoConnectVCO] Created Track Mixer with logical ID " + juce::String(mixerLid));

    // 3. Connect the track count outputs to control both new modules.
    synth->connect(midiPlayerNodeId, MIDIPlayerModuleProcessor::kRawNumTracksChannelIndex, polyVcoNodeId, 0); // Raw Num Tracks -> PolyVCO Num Voices Mod
    synth->connect(midiPlayerNodeId, MIDIPlayerModuleProcessor::kRawNumTracksChannelIndex, mixerNodeId, TrackMixerModuleProcessor::MAX_TRACKS); // Raw Num Tracks -> Mixer Num Tracks Mod
    juce::Logger::writeToLog("[AutoConnectVCO] Connected MIDI Player raw track counts to PolyVCO and Track Mixer modulation inputs.");
    
    // 4. Loop through active MIDI tracks to connect CV routes and audio.
    const auto& activeTrackIndices = midiPlayer->getActiveTrackIndices();
    juce::Logger::writeToLog("[AutoConnectVCO] MIDI file has " + juce::String(activeTrackIndices.size()) + " active tracks. Patching voices...");

    for (int i = 0; i < (int)activeTrackIndices.size(); ++i)
    {
        if (i >= PolyVCOModuleProcessor::MAX_VOICES) break; // Don't try to connect more voices than the PolyVCO has

        int sourceTrackIndex = activeTrackIndices[i];

        // A. Connect CV modulation routes from MIDI Player to the corresponding PolyVCO voice.
        int pitchChan = i * MIDIPlayerModuleProcessor::kOutputsPerTrack + 0;
        int velChan   = i * MIDIPlayerModuleProcessor::kOutputsPerTrack + 2;
        
        // Connect MIDI CV to the corresponding PolyVCO voice inputs
        synth->connect(midiPlayerNodeId, pitchChan, polyVcoNodeId, 1 + i); // Pitch -> Freq Mod
        synth->connect(midiPlayerNodeId, velChan,   polyVcoNodeId, 1 + PolyVCOModuleProcessor::MAX_VOICES * 2 + i); // Velocity -> Gate Mod

        // B. Connect the PolyVCO voice's audio output to the Track Mixer's input.
        synth->connect(polyVcoNodeId, i, mixerNodeId, i);
    }
    
    // 5. Connect the Track Mixer to the main audio output.
    auto outputNodeId = synth->getOutputNodeID();
    synth->connect(mixerNodeId, 0, outputNodeId, 0); // Mixer Out L -> Main Out L
    synth->connect(mixerNodeId, 1, outputNodeId, 1); // Mixer Out R -> Main Out R
    
    // 6. Flag the graph for a rebuild.
    graphNeedsRebuild = true;
    juce::Logger::writeToLog("--- [AutoConnectVCO] Routine complete. ---");
}

void ImGuiNodeEditorComponent::handleMidiPlayerAutoConnectHybrid(MIDIPlayerModuleProcessor* midiPlayer, juce::uint32 midiPlayerLid)
{
    if (!synth || !midiPlayer) return;

    pushSnapshot();

    const int numTracks = midiPlayer->getNumTracks();
    if (numTracks == 0) return;

    auto midiPlayerNodeId = synth->getNodeIdForLogical(midiPlayerLid);
    ImVec2 midiPos = ImNodes::GetNodeGridSpacePos((int)midiPlayerLid);

    // --- THIS IS THE NEW "FIND-BY-TRACING" LOGIC ---

    juce::uint32 polyVcoLid = 0;
    juce::uint32 trackMixerLid = 0;

    // 1. Scan existing connections to find modules to reuse by tracing backwards.
    // First, find a TrackMixer connected to the output.
    for (const auto& conn : synth->getConnectionsInfo())
    {
        if (conn.dstIsOutput && synth->getModuleTypeForLogical(conn.srcLogicalId).equalsIgnoreCase("trackmixer"))
        {
            trackMixerLid = conn.srcLogicalId; // Found a TrackMixer to reuse!
            break;
        }
    }
    // If we found a TrackMixer, now find a PolyVCO connected to it.
    if (trackMixerLid != 0)
    {
        for (const auto& conn : synth->getConnectionsInfo())
        {
            if (conn.dstLogicalId == trackMixerLid && synth->getModuleTypeForLogical(conn.srcLogicalId).equalsIgnoreCase("polyvco"))
            {
                polyVcoLid = conn.srcLogicalId; // Found a PolyVCO to reuse!
                break;
            }
        }
    }

    // 2. Clear all old Pitch/Gate/Velocity connections from the MIDI Player.
    std::vector<ModularSynthProcessor::ConnectionInfo> oldConnections;
    for (const auto& conn : synth->getConnectionsInfo())
    {
        if (conn.srcLogicalId == midiPlayerLid && conn.srcChan < 16 * 3)
            oldConnections.push_back(conn);
    }
    for (const auto& conn : oldConnections)
    {
        synth->disconnect(synth->getNodeIdForLogical(conn.srcLogicalId), conn.srcChan,
                          synth->getNodeIdForLogical(conn.dstLogicalId), conn.dstChan);
    }

    // 3. If we didn't find a PolyVCO to reuse after tracing, create a new one.
    if (polyVcoLid == 0)
    {
        auto polyVcoNodeId = synth->addModule("polyvco", false);
        polyVcoLid = synth->getLogicalIdForNode(polyVcoNodeId);
        pendingNodePositions[(int)polyVcoLid] = ImVec2(midiPos.x + 400.0f, midiPos.y);
    }

    // 4. If we didn't find a TrackMixer to reuse after tracing, create a new one.
    if (trackMixerLid == 0)
    {
        auto trackMixerNodeId = synth->addModule("trackmixer", false);
        trackMixerLid = synth->getLogicalIdForNode(trackMixerNodeId);
        pendingNodePositions[(int)trackMixerLid] = ImVec2(midiPos.x + 800.0f, midiPos.y);
    }
    // --- END OF NEW LOGIC ---

    auto polyVcoNodeId = synth->getNodeIdForLogical(polyVcoLid);
    auto trackMixerNodeId = synth->getNodeIdForLogical(trackMixerLid);

    if (auto* vco = dynamic_cast<PolyVCOModuleProcessor*>(synth->getModuleForLogical(polyVcoLid)))
        if (auto* p = dynamic_cast<juce::AudioParameterInt*>(vco->getAPVTS().getParameter("numVoices"))) *p = numTracks;
    if (auto* mixer = dynamic_cast<TrackMixerModuleProcessor*>(synth->getModuleForLogical(trackMixerLid)))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(mixer->getAPVTS().getParameter("numTracks"))) *p = (float)numTracks;

    int voicesToConnect = std::min({numTracks, PolyVCOModuleProcessor::MAX_VOICES, 64});
    for (int i = 0; i < voicesToConnect; ++i)
    {
        synth->connect(midiPlayerNodeId, i, polyVcoNodeId, 1 + i);
        synth->connect(midiPlayerNodeId, i + 16, polyVcoNodeId, 1 + PolyVCOModuleProcessor::MAX_VOICES * 2 + i);
        synth->connect(polyVcoNodeId, i, trackMixerNodeId, i * 2);
        synth->connect(polyVcoNodeId, i, trackMixerNodeId, i * 2 + 1);
    }
    
    synth->connect(trackMixerNodeId, 0, synth->getOutputNodeID(), 0);
    synth->connect(trackMixerNodeId, 1, synth->getOutputNodeID(), 1);

    synth->commitChanges();
}

void ImGuiNodeEditorComponent::handleMultiSequencerAutoConnectSamplers(MultiSequencerModuleProcessor* sequencer, juce::uint32 sequencerLid)
{
    if (!synth || !sequencer) return;

    // 1. Get Sequencer info and clear its old connections
    auto seqNodeId = synth->getNodeIdForLogical(sequencerLid);
    ImVec2 seqPos = ImNodes::GetNodeGridSpacePos((int)sequencerLid);
    const int numSteps = static_cast<int>(sequencer->getAPVTS().getRawParameterValue("numSteps")->load());
    synth->clearConnectionsForNode(seqNodeId);

    // 2. Create the necessary Mixer
    auto mixerNodeId = synth->addModule("trackmixer");
    auto mixerLid = synth->getLogicalIdForNode(mixerNodeId);
    pendingNodePositions[(int)mixerLid] = ImVec2(seqPos.x + 800.0f, seqPos.y + 100.0f);
    if (auto* mixer = dynamic_cast<TrackMixerModuleProcessor*>(synth->getModuleForLogical(mixerLid))) {
        *dynamic_cast<juce::AudioParameterInt*>(mixer->getAPVTS().getParameter("numTracks")) = numSteps;
    }

    // 3. CREATE a Sample Loader for each step and connect its audio to the mixer
    for (int i = 0; i < numSteps; ++i)
    {
        auto samplerNodeId = synth->addModule("sample loader");
        auto samplerLid = synth->getLogicalIdForNode(samplerNodeId);
        pendingNodePositions[(int)samplerLid] = ImVec2(seqPos.x + 400.0f, seqPos.y + (i * 220.0f));

        // Connect this sampler's audio output to the mixer's input
        synth->connect(samplerNodeId, 0 /*Audio Output*/, mixerNodeId, i);
        
        // Connect the Sequencer's CV/Trig for this step directly to the new sampler
        synth->connect(seqNodeId, 7 + i * 3 + 0, samplerNodeId, 0); // Pitch N -> Pitch Mod
        synth->connect(seqNodeId, 1, samplerNodeId, 2); // Main Gate -> Gate Mod
        synth->connect(seqNodeId, 7 + i * 3 + 2, samplerNodeId, 3); // Trig N  -> Trigger Mod
    }
    
    // Connect Num Steps output (channel 6) to Track Mixer's Num Tracks Mod input (channel 64)
    synth->connect(seqNodeId, 6, mixerNodeId, 64); // Num Steps -> Num Tracks Mod

    // 4. Connect the mixer to the main output
    auto outputNodeId = synth->getOutputNodeID();
    synth->connect(mixerNodeId, 0, outputNodeId, 0); // Out L
    synth->connect(mixerNodeId, 1, outputNodeId, 1); // Out R

    graphNeedsRebuild = true;
}

void ImGuiNodeEditorComponent::handleMultiSequencerAutoConnectVCO(MultiSequencerModuleProcessor* sequencer, juce::uint32 sequencerLid)
{
    if (!synth || !sequencer) return;

    // 1. Get Sequencer info and clear its old connections
    auto seqNodeId = synth->getNodeIdForLogical(sequencerLid);
    ImVec2 seqPos = ImNodes::GetNodeGridSpacePos((int)sequencerLid);
    const int numSteps = static_cast<int>(sequencer->getAPVTS().getRawParameterValue("numSteps")->load());
    synth->clearConnectionsForNode(seqNodeId);

    // 2. CREATE the PolyVCO and Track Mixer
    auto polyVcoNodeId = synth->addModule("polyvco");
    auto polyVcoLid = synth->getLogicalIdForNode(polyVcoNodeId);
    pendingNodePositions[(int)polyVcoLid] = ImVec2(seqPos.x + 400.0f, seqPos.y);
    if (auto* vco = dynamic_cast<PolyVCOModuleProcessor*>(synth->getModuleForLogical(polyVcoLid))) {
        *dynamic_cast<juce::AudioParameterInt*>(vco->getAPVTS().getParameter("numVoices")) = numSteps;
    }
    
    auto mixerNodeId = synth->addModule("trackmixer");
    auto mixerLid = synth->getLogicalIdForNode(mixerNodeId);
    pendingNodePositions[(int)mixerLid] = ImVec2(seqPos.x + 800.0f, seqPos.y);
    if (auto* mixer = dynamic_cast<TrackMixerModuleProcessor*>(synth->getModuleForLogical(mixerLid))) {
        *dynamic_cast<juce::AudioParameterInt*>(mixer->getAPVTS().getParameter("numTracks")) = numSteps;
    }

    // 3. Connect CV, Audio, and Main Output
    for (int i = 0; i < numSteps; ++i)
    {
        // Connect CV: Sequencer -> PolyVCO
        synth->connect(seqNodeId, 7 + i * 3 + 0, polyVcoNodeId, 1 + i);                                  // Pitch N -> Freq N Mod
        synth->connect(seqNodeId, 1, polyVcoNodeId, 1 + PolyVCOModuleProcessor::MAX_VOICES * 2 + i); // Main Gate -> Gate N Mod

        // Connect Audio: PolyVCO -> Mixer
        synth->connect(polyVcoNodeId, i, mixerNodeId, i);
    }
    
    // Connect Num Steps output (channel 6) to PolyVCO's Num Voices Mod input (channel 0)
    synth->connect(seqNodeId, 6, polyVcoNodeId, 0); // Num Steps -> Num Voices Mod
    
    // Connect Num Steps output (channel 6) to Track Mixer's Num Tracks Mod input (channel 64)
    synth->connect(seqNodeId, 6, mixerNodeId, 64); // Num Steps -> Num Tracks Mod
    
    // Connect Mixer -> Main Output
    auto outputNodeId = synth->getOutputNodeID();
    synth->connect(mixerNodeId, 0, outputNodeId, 0); // Out L
    synth->connect(mixerNodeId, 1, outputNodeId, 1); // Out R

    graphNeedsRebuild = true;
}

// Add this exact helper function to the class
void ImGuiNodeEditorComponent::parsePinName(const juce::String& fullName, juce::String& outType, int& outIndex)
{
    outIndex = -1; // Default to no index
    outType = fullName;

    if (fullName.contains(" "))
    {
        const juce::String lastWord = fullName.substring(fullName.lastIndexOfChar(' ') + 1);
        if (lastWord.containsOnly("0123456789"))
        {
            outIndex = lastWord.getIntValue();
            outType = fullName.substring(0, fullName.lastIndexOfChar(' '));
        }
    }
}

// Helper functions to get pins from modules
std::vector<AudioPin> ImGuiNodeEditorComponent::getOutputPins(const juce::String& moduleType)
{
    auto it = getModulePinDatabase().find(moduleType);
    if (it != getModulePinDatabase().end())
        return it->second.audioOuts;
    return {};
}

std::vector<AudioPin> ImGuiNodeEditorComponent::getInputPins(const juce::String& moduleType)
{
    auto it = getModulePinDatabase().find(moduleType);
    if (it != getModulePinDatabase().end())
        return it->second.audioIns;
    return {};
}

AudioPin* ImGuiNodeEditorComponent::findInputPin(const juce::String& moduleType, const juce::String& pinName)
{
    auto pins = getInputPins(moduleType);
    for (auto& pin : pins)
    {
        if (pin.name == pinName)
            return &pin;
    }
    return nullptr;
}

AudioPin* ImGuiNodeEditorComponent::findOutputPin(const juce::String& moduleType, const juce::String& pinName)
{
    auto pins = getOutputPins(moduleType);
    for (auto& pin : pins)
    {
        if (pin.name == pinName)
            return &pin;
    }
    return nullptr;
}

std::vector<juce::uint32> ImGuiNodeEditorComponent::findNodesOfType(const juce::String& moduleType)
{
    std::vector<juce::uint32> result;
    if (!synth) return result;
    
    for (const auto& modInfo : synth->getModulesInfo())
    {
        if (synth->getModuleTypeForLogical(modInfo.first) == moduleType)
        {
            result.push_back(modInfo.first);
        }
    }
    return result;
}

// New dynamic pin-fetching helper
std::vector<PinInfo> ImGuiNodeEditorComponent::getDynamicOutputPins(ModuleProcessor* module)
{
    std::vector<PinInfo> pins;
    if (!module) return pins;

    const int numOutputChannels = module->getBus(false, 0)->getNumberOfChannels();
    for (int i = 0; i < numOutputChannels; ++i)
    {
        juce::String pinName = module->getAudioOutputLabel(i);
        if (pinName.isNotEmpty())
        {
            pins.push_back({(uint32_t)i, pinName}); // Store the full pin name in the type field
        }
    }
    return pins;
}

// Template function implementations
template<typename TargetProcessorType>
void ImGuiNodeEditorComponent::connectToMonophonicTargets(
    ModuleProcessor* sourceNode,
    const std::map<juce::String, juce::String>& pinNameMapping,
    const std::vector<juce::uint32>& targetLids)
{
    if (!synth || !sourceNode || targetLids.empty()) return;
    
    juce::Logger::writeToLog("[AutoConnect] connectToMonophonicTargets called for " + sourceNode->getName());
    
    // Get the source module type
    juce::String sourceModuleType;
    for (const auto& modInfo : synth->getModulesInfo())
    {
        if (synth->getModuleForLogical(modInfo.first) == sourceNode)
        {
            sourceModuleType = synth->getModuleTypeForLogical(modInfo.first);
            break;
        }
    }
    
    if (sourceModuleType.isEmpty()) return;
    
    // Use provided target logical IDs explicitly
    auto targetNodes = targetLids;

    int currentTargetIndex = 0;

    // First, group all of the source node's output pins by their index number.
    // For example, "Pitch 1" and "Trig 1" will both be in the group for index 1.
    std::map<int, std::vector<PinInfo>> pinsByIndex;
    
    // THE FIX: Get pins directly from the module instance.
    auto outputPins = getDynamicOutputPins(sourceNode);
    
    for (const auto& pin : outputPins)
    {
        juce::String type;
        int index = -1;
        parsePinName(pin.type, type, index); // Use pin.type instead of pin.name
        if (index != -1) {
            // Store channel ID as the pin's ID
            pinsByIndex[index].push_back({(uint32_t)pin.id, type}); 
        }
    }

    // Now, loop through each group of pins (each voice).
    for (auto const& [index, pinsInGroup] : pinsByIndex)
    {
        if (currentTargetIndex >= (int)targetNodes.size()) break; // Stop if we run out of targets
        auto targetNodeId = targetNodes[currentTargetIndex];

        // For each pin in the group (e.g., for "Pitch 1" and "Trig 1")...
        for (const auto& pinInfo : pinsInGroup)
        {
            // Check if we have a connection rule for this pin type (e.g., "Pitch").
            if (pinNameMapping.count(pinInfo.type))
            {
                juce::String targetPinName = pinNameMapping.at(pinInfo.type);
                auto* targetPin = findInputPin("sample loader", targetPinName);

                // If the target pin exists, create the connection.
                if (targetPin)
                {
                    juce::uint32 sourceLogicalId = 0;
                    for (const auto& modInfo : synth->getModulesInfo())
                    {
                        if (synth->getModuleForLogical(modInfo.first) == sourceNode)
                        {
                            sourceLogicalId = modInfo.first;
                            break;
                        }
                    }
                    auto sourceNodeId = synth->getNodeIdForLogical(sourceLogicalId);
                    synth->connect(sourceNodeId, pinInfo.id, synth->getNodeIdForLogical(targetNodeId), targetPin->channel);
                }
            }
        }
        // IMPORTANT: Move to the next target module for the next voice.
        currentTargetIndex++;
    }
}

template<typename TargetProcessorType>
void ImGuiNodeEditorComponent::connectToPolyphonicTarget(
    ModuleProcessor* sourceNode,
    const std::map<juce::String, juce::String>& pinNameMapping)
{
    if (!synth || !sourceNode) return;
    
    juce::Logger::writeToLog("[AutoConnect] connectToPolyphonicTarget called for " + sourceNode->getName());
    
    // Get the source module type
    juce::String sourceModuleType;
    juce::uint32 sourceLogicalId = 0;
    for (const auto& modInfo : synth->getModulesInfo())
    {
        if (synth->getModuleForLogical(modInfo.first) == sourceNode)
        {
            sourceModuleType = synth->getModuleTypeForLogical(modInfo.first);
            sourceLogicalId = modInfo.first;
            break;
        }
    }
    
    if (sourceModuleType.isEmpty()) return;
    
    auto targetNodes = findNodesOfType("polyvco");
    if (targetNodes.empty()) return;
    auto targetNodeId = targetNodes[0]; // Use the first available PolyVCO

    auto sourceNodeId = synth->getNodeIdForLogical(sourceLogicalId);

    // THE FIX: Get pins directly from the module instance, not the database.
    auto outputPins = getDynamicOutputPins(sourceNode);

    // Loop through every output pin on the source module.
    for (const auto& sourcePin : outputPins)
    {
        // Parse the source pin's name to get its type and index.
        juce::String sourceType;
        int sourceIndex = -1;
        parsePinName(sourcePin.type, sourceType, sourceIndex); // Use pin.type instead of pin.name

        if (sourceIndex == -1) continue; // Skip pins that aren't numbered.

        // Check if we have a rule for this pin type (e.g., "Pitch" maps to "Freq").
        if (pinNameMapping.count(sourceType))
        {
            juce::String targetType = pinNameMapping.at(sourceType);
            // PolyVCO inputs use the format "Freq 1 Mod", "Gate 1 Mod", etc.
            juce::String targetPinName = targetType + " " + juce::String(sourceIndex) + " Mod";

            // Find that pin on the target and connect it if available.
            auto* targetPin = findInputPin("polyvco", targetPinName);
            if (targetPin)
            {
                synth->connect(sourceNodeId, sourcePin.id, synth->getNodeIdForLogical(targetNodeId), targetPin->channel);
            }
        }
    }
}

void ImGuiNodeEditorComponent::handleAutoConnectionRequests()
{
    if (!synth) return;
    
    for (const auto& modInfo : synth->getModulesInfo())
    {
        auto* module = synth->getModuleForLogical(modInfo.first);
        if (!module) continue;

        // --- Check MultiSequencer Flags ---
        if (auto* multiSeq = dynamic_cast<MultiSequencerModuleProcessor*>(module))
        {
            if (multiSeq->autoConnectSamplersTriggered.exchange(false))
            {
                handleMultiSequencerAutoConnectSamplers(multiSeq, modInfo.first); // Call the new specific handler
                pushSnapshot();
                return;
            }
            if (multiSeq->autoConnectVCOTriggered.exchange(false))
            {
                handleMultiSequencerAutoConnectVCO(multiSeq, modInfo.first); // Call the new specific handler
                pushSnapshot();
                return;
            }
        }
        
        // --- Check MIDIPlayer Flags ---
        if (auto* midiPlayer = dynamic_cast<MIDIPlayerModuleProcessor*>(module))
        {
            if (midiPlayer->autoConnectTriggered.exchange(false)) // Samplers
            {
                handleMidiPlayerAutoConnect(midiPlayer, modInfo.first); // Reuse old detailed handler
                pushSnapshot();
                return;
            }
            if (midiPlayer->autoConnectVCOTriggered.exchange(false))
            {
                handleMidiPlayerAutoConnectVCO(midiPlayer, modInfo.first); // Reuse old detailed handler
                pushSnapshot();
                return;
            }
            if (midiPlayer->autoConnectHybridTriggered.exchange(false))
            {
                handleMidiPlayerAutoConnectHybrid(midiPlayer, modInfo.first); // Reuse old detailed handler
                pushSnapshot();
                return;
            }
        }
    }
}

void ImGuiNodeEditorComponent::drawInsertNodeOnLinkPopup()
{
    if (ImGui::BeginPopup("InsertNodeOnLinkPopup"))
    {
        const int numSelected = ImNodes::NumSelectedLinks();
        const bool isMultiInsert = numSelected > 1;

        // --- FIX: Use map to separate display names from internal type names ---
        // Map format: {Display Name, Internal Type}
        const std::map<const char*, const char*> audioInsertable = {
            {"VCF", "VCF"}, {"VCA", "VCA"}, {"Delay", "Delay"}, {"Reverb", "Reverb"},
            {"Chorus", "chorus"}, {"Phaser", "phaser"}, {"Compressor", "compressor"},
            {"Recorder", "recorder"}, {"Limiter", "limiter"}, {"Gate", "gate"}, {"Drive", "drive"},
            {"Graphic EQ", "graphic eq"}, {"Waveshaper", "Waveshaper"}, {"Time/Pitch Shifter", "timepitch"},
            {"Attenuverter", "Attenuverter"}, {"De-Crackle", "De-Crackle"}, {"Mixer", "Mixer"},
            {"Shaping Oscillator", "shaping oscillator"}, {"Function Generator", "Function Generator"},
            {"8-Band Shaper", "8bandshaper"}, // <<< THE FIX: Internal type is "8bandshaper"
            {"Granulator", "Granulator"}, {"Harmonic Shaper", "harmonic shaper"},
            {"Vocal Tract Filter", "Vocal Tract Filter"}, {"Scope", "Scope"}
        };
        const std::map<const char*, const char*> modInsertable = {
            {"Attenuverter", "Attenuverter"}, {"Lag Processor", "Lag Processor"}, {"Math", "Math"},
            {"MapRange", "MapRange"}, {"Quantizer", "Quantizer"}, {"S&H", "S&H"},
            {"Rate", "Rate"}, {"Logic", "Logic"}, {"Comparator", "Comparator"},
            {"CV Mixer", "CV Mixer"}, {"Sequential Switch", "Sequential Switch"}
        };
        const auto& listToShow = linkToInsertOn.isMod ? modInsertable : audioInsertable;

        if (isMultiInsert)
            ImGui::Text("Insert Node on %d Cables", numSelected);
        else
            ImGui::Text("Insert Node on Cable");

        // --- FIX: Iterate over map pairs instead of simple strings ---
        for (const auto& pair : listToShow)
        {
            // pair.first = display label, pair.second = internal type
            if (ImGui::MenuItem(pair.first))
            {
                if (isMultiInsert)
                {
                    handleInsertNodeOnSelectedLinks(pair.second);
                }
                else
                {
                    insertNodeBetween(pair.second);
                }
                ImGui::CloseCurrentPopup();
            }
        }
        
        // VST Plugins submenu (only for audio cables)
        if (!linkToInsertOn.isMod)
        {
            ImGui::Separator();
            if (ImGui::BeginMenu("VST"))
            {
                auto& app = PresetCreatorApplication::getApp();
                auto& knownPluginList = app.getKnownPluginList();
                
                for (const auto& desc : knownPluginList.getTypes())
                {
                    if (ImGui::MenuItem(desc.name.toRawUTF8()))
                    {
                        if (isMultiInsert)
                        {
                            handleInsertNodeOnSelectedLinks(desc.name);
                        }
                        else
                        {
                            insertNodeBetween(desc.name);
                        }
                        ImGui::CloseCurrentPopup();
                    }
                    
                    // Show tooltip with plugin info
                    if (ImGui::IsItemHovered())
                    {
                        ImGui::BeginTooltip();
                        ImGui::Text("Manufacturer: %s", desc.manufacturerName.toRawUTF8());
                        ImGui::Text("Version: %s", desc.version.toRawUTF8());
                        ImGui::EndTooltip();
                    }
                }
                ImGui::EndMenu();
            }
        }
        
        ImGui::EndPopup();
    }
    else
    {
        // --- FIX: Reset state when popup is closed ---
        // If the popup is not open (i.e., it was closed or the user clicked away),
        // we must reset the state variable. This ensures that the application
        // is no longer "stuck" in the insert-on-link mode and right-click on
        // empty canvas will work again.
        linkToInsertOn.linkId = -1;
    }
}

// --- NEW HELPER FUNCTION ---
void ImGuiNodeEditorComponent::insertNodeOnLink(const juce::String& nodeType, const LinkInfo& linkInfo, const ImVec2& position)
{
    if (synth == nullptr) return;

    PinDataType srcType = getPinDataTypeForPin(linkInfo.srcPin);
    PinDataType dstType = getPinDataTypeForPin(linkInfo.dstPin);

    // 1. Create and Position the New Node
    // Check if this is a VST plugin by checking against known plugins
    juce::AudioProcessorGraph::NodeID newNodeId;
    auto& app = PresetCreatorApplication::getApp();
    auto& knownPluginList = app.getKnownPluginList();
    bool isVst = false;
    
    for (const auto& desc : knownPluginList.getTypes())
    {
        if (desc.name == nodeType)
        {
            // This is a VST plugin - use addVstModule
            newNodeId = synth->addVstModule(app.getPluginFormatManager(), desc);
            isVst = true;
            break;
        }
    }
    
    if (!isVst)
    {
        // Regular module - use addModule
        newNodeId = synth->addModule(nodeType);
    }
    
    auto newNodeLid = synth->getLogicalIdForNode(newNodeId);
    pendingNodeScreenPositions[(int)newNodeLid] = position;

    // 2. Get Original Connection Points
    auto originalSrcNodeId = synth->getNodeIdForLogical(linkInfo.srcPin.logicalId);
    auto originalDstNodeId = (linkInfo.dstPin.logicalId == 0) 
        ? synth->getOutputNodeID() 
        : synth->getNodeIdForLogical(linkInfo.dstPin.logicalId);

    // 3. Disconnect the Original Link
    synth->disconnect(originalSrcNodeId, linkInfo.srcPin.channel, originalDstNodeId, linkInfo.dstPin.channel);

    // 4. Configure newly inserted node if necessary (e.g., MapRange)
    int newNodeOutputChannel = 0;
    if (nodeType == "MapRange")
    {
        if (auto* mapRange = dynamic_cast<MapRangeModuleProcessor*>(synth->getModuleForLogical(newNodeLid)))
        {
            Range inRange = getSourceRange(linkInfo.srcPin, synth);
            configureMapRangeFor(srcType, dstType, *mapRange, inRange);
            newNodeOutputChannel = (dstType == PinDataType::Audio) ? 1 : 0;
        }
    }

    // 5. Reconnect Through the New Node
    synth->connect(originalSrcNodeId, linkInfo.srcPin.channel, newNodeId, 0);
    synth->connect(newNodeId, newNodeOutputChannel, originalDstNodeId, linkInfo.dstPin.channel);
}

// --- REFACTORED OLD FUNCTION ---
void ImGuiNodeEditorComponent::insertNodeBetween(const juce::String& nodeType, const PinID& srcPin, const PinID& dstPin)
{
    if (synth == nullptr) return;

    // 1. Get positions to place the new node between the source and destination
    ImVec2 srcPos = ImNodes::GetNodeGridSpacePos(srcPin.logicalId);
    ImVec2 dstPos = ImNodes::GetNodeGridSpacePos(dstPin.logicalId == 0 ? 0 : dstPin.logicalId);
    ImVec2 newNodePos = ImVec2((srcPos.x + dstPos.x) * 0.5f, (srcPos.y + dstPos.y) * 0.5f);

    // 2. Create and position the new converter node
    // Check if this is a VST plugin
    juce::AudioProcessorGraph::NodeID newNodeId;
    auto& app = PresetCreatorApplication::getApp();
    auto& knownPluginList = app.getKnownPluginList();
    bool isVst = false;
    
    for (const auto& desc : knownPluginList.getTypes())
    {
        if (desc.name == nodeType)
        {
            newNodeId = synth->addVstModule(app.getPluginFormatManager(), desc);
            isVst = true;
            break;
        }
    }
    
    if (!isVst)
    {
        newNodeId = synth->addModule(nodeType);
    }
    
    auto newNodeLid = synth->getLogicalIdForNode(newNodeId);
    pendingNodePositions[(int)newNodeLid] = newNodePos;

    // 3. Get original node IDs
    auto originalSrcNodeId = synth->getNodeIdForLogical(srcPin.logicalId);
    auto originalDstNodeId = (dstPin.logicalId == 0)
        ? synth->getOutputNodeID()
        : synth->getNodeIdForLogical(dstPin.logicalId);

    // 4. Configure the new node if it's a MapRange or Attenuverter
    int newNodeOutputChannel = 0;
    if (nodeType == "MapRange") {
        if (auto* mapRange = dynamic_cast<MapRangeModuleProcessor*>(synth->getModuleForLogical(newNodeLid))) {
            PinDataType srcType = getPinDataTypeForPin(srcPin);
            PinDataType dstType = getPinDataTypeForPin(dstPin);
            Range inRange = getSourceRange(srcPin, synth);
            configureMapRangeFor(srcType, dstType, *mapRange, inRange);
            newNodeOutputChannel = (dstType == PinDataType::Audio) ? 1 : 0; // Use Raw Out for Audio, Norm Out for CV
        }
    } else if (nodeType == "Attenuverter") {
        // You might want to pre-configure the Attenuverter here if needed
    }

    // 5. Connect the signal chain: Original Source -> New Node -> Original Destination
    synth->connect(originalSrcNodeId, srcPin.channel, newNodeId, 0); // Source -> New Node's first input
    synth->connect(newNodeId, newNodeOutputChannel, originalDstNodeId, dstPin.channel); // New Node -> Destination

    juce::Logger::writeToLog("[AutoConvert] Inserted '" + nodeType + "' between " + juce::String(srcPin.logicalId) + " and " + juce::String(dstPin.logicalId));
}

void ImGuiNodeEditorComponent::insertNodeBetween(const juce::String& nodeType)
{
    // This function is now just a wrapper that calls the helper
    // with the stored link info and the current mouse position.
    if (linkToInsertOn.linkId != -1)
    {
        insertNodeOnLink(nodeType, linkToInsertOn, ImGui::GetMousePos());
        graphNeedsRebuild = true;
        pushSnapshot();
        linkToInsertOn.linkId = -1; // Reset state
    }
}

void ImGuiNodeEditorComponent::handleInsertNodeOnSelectedLinks(const juce::String& nodeType)
{
    if (synth == nullptr || ImNodes::NumSelectedLinks() == 0) return;

    pushSnapshot(); // Create one undo state for the entire batch operation.

    const int numSelectedLinks = ImNodes::NumSelectedLinks();
    std::vector<int> selectedLinkIds(numSelectedLinks);
    ImNodes::GetSelectedLinks(selectedLinkIds.data());

    ImVec2 basePosition = ImGui::GetMousePos();
    float x_offset = 0.0f;

    for (int linkId : selectedLinkIds)
    {
        auto it = linkIdToAttrs.find(linkId);
        if (it != linkIdToAttrs.end())
        {
            // Decode the link and create a LinkInfo struct for it
            LinkInfo currentLink;
            currentLink.linkId = linkId;
            currentLink.isMod = false; // Assuming audio links for now
            currentLink.srcPin = decodePinId(it->second.first);
            currentLink.dstPin = decodePinId(it->second.second);
            
            // Calculate a staggered position for the new node
            ImVec2 newPosition = ImVec2(basePosition.x + x_offset, basePosition.y);
            
            // Call our reusable helper function
            insertNodeOnLink(nodeType, currentLink, newPosition);
            
            // Increment the offset for the next node
            x_offset += 40.0f; 
        }
    }

    graphNeedsRebuild = true;
    // The single pushSnapshot at the beginning handles the undo state.
}

juce::File ImGuiNodeEditorComponent::findPresetsDirectory()
{
    // Search upwards from the executable's location for a sibling directory
    // named "Synth_presets". This is robust to different build configurations.
    juce::File dir = juce::File::getSpecialLocation(juce::File::currentApplicationFile);

    for (int i = 0; i < 8; ++i) // Limit search depth to 8 levels
    {
        dir = dir.getParentDirectory();
        if (!dir.exists()) break;

        juce::File candidate = dir.getSiblingFile("Synth_presets");
        if (candidate.isDirectory())
        {
            return candidate;
        }
    }
    
    // Fallback to an empty file (system default) if not found
    return {};
}

// Helper function implementations
PinDataType ImGuiNodeEditorComponent::getPinDataTypeForPin(const PinID& pin)
{
    if (synth == nullptr) return PinDataType::Raw;

    // Handle the main output node as a special case
    if (pin.logicalId == 0)
    {
        return PinDataType::Audio;
    }

    juce::String moduleType = getTypeForLogical(pin.logicalId);
    if (moduleType.isEmpty()) return PinDataType::Raw;

    auto it = getModulePinDatabase().find(moduleType);
    if (it == getModulePinDatabase().end())
    {
        // Fallback: case-insensitive lookup (module registry may use different casing)
        juce::String moduleTypeLower = moduleType.toLowerCase();
        for (const auto& kv : getModulePinDatabase())
        {
            if (kv.first.compareIgnoreCase(moduleType) == 0 || kv.first.toLowerCase() == moduleTypeLower)
            {
                it = getModulePinDatabase().find(kv.first);
                break;
            }
        }
        if (it == getModulePinDatabase().end())
        {
            // If the module type is not in our static database, it's likely a VST plugin.
            // A safe assumption is that its pins are for audio.
            if (auto* module = synth->getModuleForLogical(pin.logicalId))
            {
                if (dynamic_cast<VstHostModuleProcessor*>(module))
                {
                    return PinDataType::Audio; // Green for VST pins
                }
            }
            return PinDataType::Raw;
        }
    }

    const auto& pinInfo = it->second;

    if (pin.isMod)
    {
        for (const auto& modPin : pinInfo.modIns)
        {
            if (modPin.paramId == pin.paramId)
            {
                return modPin.type;
            }
        }
    }
    else // It's an audio pin
    {
        const auto& pins = pin.isInput ? pinInfo.audioIns : pinInfo.audioOuts;
        for (const auto& audioPin : pins)
        {
            if (audioPin.channel == pin.channel)
            {
                return audioPin.type;
            }
        }
    }
    return PinDataType::Raw; // Fallback
}

unsigned int ImGuiNodeEditorComponent::getImU32ForType(PinDataType type)
{
    switch (type)
    {
        case PinDataType::CV:    return IM_COL32(100, 150, 255, 255); // Blue
        case PinDataType::Audio: return IM_COL32(100, 255, 150, 255); // Green
        case PinDataType::Gate:  return IM_COL32(255, 220, 100, 255); // Yellow
        case PinDataType::Raw:   return IM_COL32(255, 100, 100, 255); // Red
        default:                 return IM_COL32(150, 150, 150, 255); // Grey
    }
}

const char* ImGuiNodeEditorComponent::pinDataTypeToString(PinDataType type)
{
    switch (type)
    {
        case PinDataType::CV:    return "CV (0 to 1)";
        case PinDataType::Audio: return "Audio (-1 to 1)";
        case PinDataType::Gate:  return "Gate/Trigger";
        case PinDataType::Raw:   return "Raw";
        default:                 return "Unknown";
    }
}

// Add this new function implementation to the .cpp file.

void ImGuiNodeEditorComponent::handleNodeChaining()
{
    if (synth == nullptr) return;

    const int numSelected = ImNodes::NumSelectedNodes();
    if (numSelected <= 1) return;

    juce::Logger::writeToLog("[Node Chaining] Initiated for " + juce::String(numSelected) + " nodes.");

    // 1. Get all selected nodes and their horizontal positions.
    std::vector<int> selectedNodeIds(numSelected);
    ImNodes::GetSelectedNodes(selectedNodeIds.data());

    std::vector<std::pair<float, int>> sortedNodes;
    for (int nodeId : selectedNodeIds)
    {
        // Don't include the main output node in the chaining logic.
        if (nodeId == 0) continue;
        ImVec2 pos = ImNodes::GetNodeGridSpacePos(nodeId);
        sortedNodes.push_back({pos.x, nodeId});
    }

    // 2. Sort the nodes from left to right based on their X position.
    std::sort(sortedNodes.begin(), sortedNodes.end(), [](const auto& a, const auto& b) {
        return a.first < b.first;
    });

    // Create a single undo action for the entire operation.
    pushSnapshot();

    // 3. Connect the nodes in sequence.
    for (size_t i = 0; i < sortedNodes.size() - 1; ++i)
    {
        juce::uint32 sourceLid = sortedNodes[i].second;
        juce::uint32 destLid   = sortedNodes[i + 1].second;

        auto sourceNodeId = synth->getNodeIdForLogical(sourceLid);
        auto destNodeId   = synth->getNodeIdForLogical(destLid);

        if (sourceNodeId.uid != 0 && destNodeId.uid != 0)
        {
            // Standard stereo connection: Out L -> In L, Out R -> In R
            synth->connect(sourceNodeId, 0, destNodeId, 0); // Connect channel 0
            synth->connect(sourceNodeId, 1, destNodeId, 1); // Connect channel 1

            juce::Logger::writeToLog("[Node Chaining] Connected " + getTypeForLogical(sourceLid) + " (" + juce::String(sourceLid) + ") to " + getTypeForLogical(destLid) + " (" + juce::String(destLid) + ")");
            
            // Check if the destination is a recorder and update its filename
            if (auto* destModule = synth->getModuleForLogical(destLid))
            {
                if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(destModule))
                {
                    if (auto* sourceModule = synth->getModuleForLogical(sourceLid))
                    {
                        recorder->updateSuggestedFilename(sourceModule->getName());
                    }
                }
            }
        }
    }

    // 4. Apply all the new connections to the audio graph.
    graphNeedsRebuild = true;
}

// Add this new helper function implementation.

std::vector<AudioPin> ImGuiNodeEditorComponent::getPinsOfType(juce::uint32 logicalId, bool isInput, PinDataType targetType)
{
    std::vector<AudioPin> matchingPins;
    juce::String moduleType = getTypeForLogical(logicalId);

    if (moduleType.isEmpty())
    {
        return matchingPins;
    }

    auto it = getModulePinDatabase().find(moduleType);

    // --- CASE-INSENSITIVE LOOKUP ---
    if (it == getModulePinDatabase().end())
    {
        for (const auto& kv : getModulePinDatabase())
        {
            if (kv.first.compareIgnoreCase(moduleType) == 0)
            {
                it = getModulePinDatabase().find(kv.first);
                break;
            }
        }
    }

    if (it != getModulePinDatabase().end())
    {
        // --- Standard path for built-in modules ---
        const auto& pins = isInput ? it->second.audioIns : it->second.audioOuts;
        for (const auto& pin : pins)
        {
            if (pin.type == targetType)
            {
                matchingPins.push_back(pin);
            }
        }
    }
    else if (auto* module = synth->getModuleForLogical(logicalId))
    {
        // --- DYNAMIC PATH FOR VSTs AND OTHER UNLISTED MODULES ---
        if (dynamic_cast<VstHostModuleProcessor*>(module))
        {
            // For VSTs, assume all pins are 'Audio' type for chaining.
            if (targetType == PinDataType::Audio)
            {
                const int numChannels = isInput ? module->getTotalNumInputChannels() : module->getTotalNumOutputChannels();
                for (int i = 0; i < numChannels; ++i)
                {
                    juce::String pinName = isInput ? module->getAudioInputLabel(i) : module->getAudioOutputLabel(i);
                    if (pinName.isNotEmpty())
                    {
                        matchingPins.emplace_back(pinName, i, PinDataType::Audio);
                    }
                }
            }
        }
    }

    return matchingPins;
}

// Add this new function implementation to the .cpp file.

void ImGuiNodeEditorComponent::handleRecordOutput()
{
    if (!synth) return;

    pushSnapshot();
    juce::Logger::writeToLog("[Record Output] Initiated.");

    // 1. Find connections going to the main output node.
    std::vector<ModularSynthProcessor::ConnectionInfo> outputFeeds;
    for (const auto& c : synth->getConnectionsInfo())
    {
        if (c.dstIsOutput)
        {
            outputFeeds.push_back(c);
        }
    }

    if (outputFeeds.empty())
    {
        juce::Logger::writeToLog("[Record Output] No connections to main output found.");
        return;
    }

    // 2. Create and position the recorder.
    auto recorderNodeId = synth->addModule("recorder");
    auto recorderLid = synth->getLogicalIdForNode(recorderNodeId);
    ImVec2 outPos = ImNodes::GetNodeGridSpacePos(0);
    pendingNodePositions[(int)recorderLid] = ImVec2(outPos.x - 400.0f, outPos.y);
    
    auto* recorder = dynamic_cast<RecordModuleProcessor*>(synth->getModuleForLogical(recorderLid));
    if (recorder)
    {
        recorder->setPropertiesFile(PresetCreatorApplication::getApp().getProperties());
    }

    // 3. "Tap" the signals by connecting the original sources to the recorder.
    juce::String sourceName;
    for (const auto& feed : outputFeeds)
    {
        auto srcNodeId = synth->getNodeIdForLogical(feed.srcLogicalId);
        synth->connect(srcNodeId, feed.srcChan, recorderNodeId, feed.dstChan); // dstChan will be 0 or 1
        
        // Get the name of the first source for the filename prefix
        if (sourceName.isEmpty())
        {
            if (auto* srcModule = synth->getModuleForLogical(feed.srcLogicalId))
            {
                sourceName = srcModule->getName();
            }
        }
    }
    
    if (recorder)
    {
        recorder->updateSuggestedFilename(sourceName);
    }

    graphNeedsRebuild = true;
    juce::Logger::writeToLog("[Record Output] Recorder added and connected.");
}

void ImGuiNodeEditorComponent::handleColorCodedChaining(PinDataType targetType)
{
    if (synth == nullptr)
    {
        juce::Logger::writeToLog("[Color Chaining] ERROR: synth is nullptr");
        return;
    }

    const int numSelected = ImNodes::NumSelectedNodes();
    if (numSelected <= 1)
    {
        juce::Logger::writeToLog("[Color Chaining] ERROR: numSelected <= 1 (" + juce::String(numSelected) + ")");
        return;
    }

    juce::Logger::writeToLog("[Color Chaining] Started for " + juce::String(toString(targetType)) + " with " + juce::String(numSelected) + " nodes");

    // 1. Get and sort selected nodes by their horizontal position.
    std::vector<int> selectedNodeIds(numSelected);
    ImNodes::GetSelectedNodes(selectedNodeIds.data());

    std::vector<std::pair<float, int>> sortedNodes;
    for (int nodeId : selectedNodeIds)
    {
        if (nodeId == 0) continue; // Exclude the output node.
        ImVec2 pos = ImNodes::GetNodeGridSpacePos(nodeId);
        sortedNodes.push_back({pos.x, nodeId});
    }

    if (sortedNodes.empty())
    {
        juce::Logger::writeToLog("[Color Chaining] ERROR: No valid nodes after filtering");
        return;
    }

    std::sort(sortedNodes.begin(), sortedNodes.end(), [](const auto& a, const auto& b) {
        return a.first < b.first;
    });

    // Create a single undo action for the entire operation.
    pushSnapshot();

    int totalConnectionsMade = 0;
    int totalConnectionAttempts = 0;

    // 2. Iterate through sorted nodes and connect matching pins.
    for (size_t i = 0; i < sortedNodes.size() - 1; ++i)
    {
        juce::uint32 sourceLid = sortedNodes[i].second;
        juce::uint32 destLid   = sortedNodes[i + 1].second;

        auto sourceNodeId = synth->getNodeIdForLogical(sourceLid);
        auto destNodeId   = synth->getNodeIdForLogical(destLid);

        if (sourceNodeId.uid == 0 || destNodeId.uid == 0)
        {
            juce::Logger::writeToLog("[Color Chaining] Skipping invalid node pair: " + juce::String(sourceLid) + " -> " + juce::String(destLid));
            continue;
        }

        // Find all matching output pins on the source and input pins on the destination.
        auto sourcePins = getPinsOfType(sourceLid, false, targetType);
        auto destPins   = getPinsOfType(destLid, true, targetType);

        if (sourcePins.empty() || destPins.empty())
        {
            juce::Logger::writeToLog("[Color Chaining] No matching pins: " + juce::String(sourcePins.size()) + " src, " + juce::String(destPins.size()) + " dst");
            continue;
        }

        // Connect them one-to-one until we run out of available pins on either side.
        int connectionsToMake = std::min((int)sourcePins.size(), (int)destPins.size());

        for (int j = 0; j < connectionsToMake; ++j)
        {
            totalConnectionAttempts++;
            bool connectResult = synth->connect(sourceNodeId, sourcePins[j].channel, destNodeId, destPins[j].channel);
            if (connectResult)
            {
                totalConnectionsMade++;
                juce::Logger::writeToLog("[Color Chaining] Connected " + getTypeForLogical(sourceLid) + " -> " + getTypeForLogical(destLid));

                // Check if the destination is a recorder and update its filename
                if (auto* destModule = synth->getModuleForLogical(destLid))
                {
                    if (auto* recorder = dynamic_cast<RecordModuleProcessor*>(destModule))
                    {
                        if (auto* sourceModule = synth->getModuleForLogical(sourceLid))
                        {
                            recorder->updateSuggestedFilename(sourceModule->getName());
                        }
                    }
                }
            }
        }
    }

    juce::Logger::writeToLog("[Color Chaining] Completed: " + juce::String(totalConnectionsMade) + "/" + juce::String(totalConnectionAttempts) + " connections made");

    // 3. Apply all new connections to the audio graph.
    graphNeedsRebuild = true;
}

// Module Category Color Coding
ImGuiNodeEditorComponent::ModuleCategory ImGuiNodeEditorComponent::getModuleCategory(const juce::String& moduleType)
{
    juce::String lower = moduleType.toLowerCase();
    
    // --- MIDI Family (Vibrant Purple) ---
    if (lower.contains("midi"))
        return ModuleCategory::MIDI;
    
    // --- Sources (Green) ---
    // Check specific matches first to avoid substring conflicts
    if (lower == "shaping oscillator")  // Prevent "shaper" from matching Effect category
        return ModuleCategory::Source;
    if (lower == "tts performer")  // Explicit TTS categorization
        return ModuleCategory::Source;
    
    if (lower.contains("vco") || lower.contains("noise") || 
        lower.contains("sequencer") || lower.contains("sample") || 
        lower.contains("input") ||
        lower.contains("polyvco") || lower.contains("value")) 
        return ModuleCategory::Source;
    
    // --- Effects (Red) ---
    // Check "Vocal Tract Filter" before general "filter" check
    if (lower == "vocal tract filter")
        return ModuleCategory::Effect;
    
    if (lower.contains("vcf") || lower.contains("delay") || 
        lower.contains("reverb") || lower.contains("chorus") || 
        lower.contains("phaser") || lower.contains("compressor") || 
        lower.contains("drive") || lower.contains("shaper") ||  // Note: "shaping oscillator" handled above
        lower.contains("filter") || lower.contains("waveshaper") ||
        lower.contains("limiter") || lower.contains("gate") ||
        lower.contains("granulator") || lower.contains("eq") ||
        lower.contains("crackle") || lower.contains("timepitch") ||
        lower.contains("recorder"))  // Moved from Analysis
        return ModuleCategory::Effect;
    
    // --- Modulators (Blue) ---
    if (lower.contains("lfo") || lower.contains("adsr") || 
        lower.contains("random") || lower.contains("s&h") || 
        lower.contains("function")) 
        return ModuleCategory::Modulator;
    
    // --- Analysis (Purple) ---
    if (lower.contains("scope") || lower.contains("debug") || 
        lower.contains("graph")) 
        return ModuleCategory::Analysis;
    
    // --- Comment (Grey) ---
    if (lower.contains("comment")) 
        return ModuleCategory::Comment;
    
    // --- Plugins (Teal) ---
    if (lower.contains("vst") || lower.contains("plugin"))
        return ModuleCategory::Plugin;
    
    // --- Utilities & Logic (Orange) - Default ---
    return ModuleCategory::Utility;
}

unsigned int ImGuiNodeEditorComponent::getImU32ForCategory(ModuleCategory category, bool hovered)
{
    ImU32 color;
    switch (category)
    {
        case ModuleCategory::Source:     color = IM_COL32(50, 120, 50, 255); break;   // Green
        case ModuleCategory::Effect:     color = IM_COL32(130, 60, 60, 255); break;   // Red
        case ModuleCategory::Modulator:  color = IM_COL32(50, 50, 130, 255); break;   // Blue
        case ModuleCategory::Utility:    color = IM_COL32(110, 80, 50, 255); break;   // Orange
        case ModuleCategory::Analysis:   color = IM_COL32(100, 50, 110, 255); break;  // Purple
        case ModuleCategory::Comment:    color = IM_COL32(80, 80, 80, 255); break;    // Grey
        case ModuleCategory::Plugin:     color = IM_COL32(50, 110, 110, 255); break;  // Teal
        case ModuleCategory::MIDI:       color = IM_COL32(180, 120, 255, 255); break; // Vibrant Purple
        default:                         color = IM_COL32(70, 70, 70, 255); break;
    }
    
    if (hovered) 
    { 
        // Brighten on hover
        ImVec4 c = ImGui::ColorConvertU32ToFloat4(color);
        c.x *= 1.3f; c.y *= 1.3f; c.z *= 1.3f;
        return ImGui::ColorConvertFloat4ToU32(c);
    }
    return color;
}

// Quick Add Menu - Module Registry
// Maps Display Name -> { Internal Type, Description }
std::map<juce::String, std::pair<const char*, const char*>> ImGuiNodeEditorComponent::getModuleRegistry()
{
    return {
        // Sources
        {"Audio Input", {"audio input", "Records audio from your audio interface"}},
        {"VCO", {"VCO", "Voltage Controlled Oscillator - generates waveforms"}},
        {"Polyphonic VCO", {"polyvco", "Polyphonic VCO with multiple voices"}},
        {"Noise", {"Noise", "White, pink, or brown noise generator"}},
        {"Sequencer", {"Sequencer", "Step sequencer for creating patterns"}},
        {"Multi Sequencer", {"multi sequencer", "Multi-track step sequencer"}},
        {"MIDI Player", {"midi player", "Plays MIDI files"}},
        {"MIDI CV", {"midi cv", "Converts MIDI Note/CC messages to CV signals. (Monophonic)"}},
        {"MIDI Faders", {"midi faders", "Up to 16 MIDI faders with CC learning"}},
        {"MIDI Knobs", {"midi knobs", "Up to 16 MIDI knobs/rotary encoders with CC learning"}},
        {"MIDI Buttons", {"midi buttons", "Up to 32 MIDI buttons with Gate/Toggle/Trigger modes"}},
        {"MIDI Jog Wheel", {"midi jog wheel", "Single MIDI jog wheel/rotary encoder"}},
        {"Value", {"Value", "Constant CV value output"}},
        {"Sample Loader", {"sample loader", "Loads and plays audio samples"}},
        
        // TTS
        {"TTS Performer", {"TTS Performer", "Text-to-speech synthesizer"}},
        {"Vocal Tract Filter", {"Vocal Tract Filter", "Physical model vocal tract filter"}},
        
        // Effects
        {"VCF", {"VCF", "Voltage Controlled Filter"}},
        {"Delay", {"Delay", "Echo/delay effect"}},
        {"Reverb", {"Reverb", "Reverb effect"}},
        {"Chorus", {"chorus", "Chorus effect for thickening sound"}},
        {"Phaser", {"phaser", "Phaser modulation effect"}},
        {"Compressor", {"compressor", "Dynamic range compressor"}},
        {"Recorder", {"recorder", "Records audio to disk"}},
        {"Limiter", {"limiter", "Peak limiter"}},
        {"Noise Gate", {"gate", "Noise gate"}},
        {"Drive", {"drive", "Distortion/overdrive"}},
        {"Graphic EQ", {"graphic eq", "Graphic equalizer"}},
        {"Waveshaper", {"Waveshaper", "Waveshaping distortion"}},
        {"8-Band Shaper", {"8bandshaper", "8-band spectral shaper"}},
        {"Granulator", {"granulator", "Granular synthesis effect"}},
        {"Harmonic Shaper", {"harmonic shaper", "Harmonic content shaper"}},
        {"Time/Pitch Shifter", {"timepitch", "Time stretching and pitch shifting"}},
        {"De-Crackle", {"De-Crackle", "Removes clicks and pops"}},
        
        // Modulators
        {"LFO", {"LFO", "Low Frequency Oscillator for modulation"}},
        {"ADSR", {"ADSR", "Attack Decay Sustain Release envelope"}},
        {"Random", {"Random", "Random value generator"}},
        {"S&H", {"S&H", "Sample and Hold"}},
        {"Tempo Clock", {"tempo clock", "Global clock with BPM control, transport (play/stop/reset), division, swing, and clock/gate outputs. Use External Takeover to drive the master transport."}},
        {"Function Generator", {"Function Generator", "Custom function curves"}},
        {"Shaping Oscillator", {"shaping oscillator", "Oscillator with waveshaping"}},
        
        // Utilities
        {"VCA", {"VCA", "Voltage Controlled Amplifier"}},
        {"Mixer", {"Mixer", "Audio/CV mixer"}},
        {"CV Mixer", {"cv mixer", "CV signal mixer"}},
        {"Track Mixer", {"trackmixer", "Multi-track mixer with panning"}},
        {"Attenuverter", {"Attenuverter", "Attenuate and invert signals"}},
        {"Lag Processor", {"Lag Processor", "Slew rate limiter/smoother"}},
        {"Math", {"Math", "Mathematical operations"}},
        {"Map Range", {"MapRange", "Map values from one range to another"}},
        {"Quantizer", {"Quantizer", "Quantize CV to scales"}},
        {"Rate", {"Rate", "Rate/frequency divider"}},
        {"Comparator", {"Comparator", "Compare and threshold signals"}},
        {"Logic", {"Logic", "Boolean logic operations"}},
        {"Clock Divider", {"ClockDivider", "Clock division and multiplication"}},
        {"Sequential Switch", {"SequentialSwitch", "Sequential signal router"}},
        {"Comment", {"comment", "Text comment box"}},
        {"Best Practice", {"best practice", "Best practice node template"}},
        
        // Analysis
        {"Scope", {"Scope", "Oscilloscope display"}},
        {"Debug", {"debug", "Debug value display"}},
        {"Input Debug", {"input debug", "Input signal debugger"}},
        {"Frequency Graph", {"Frequency Graph", "Spectrum analyzer display"}}
    };
}

// Legacy function for backwards compatibility with tooltip display
std::vector<std::pair<juce::String, const char*>> ImGuiNodeEditorComponent::getModuleDescriptions()
{
    std::vector<std::pair<juce::String, const char*>> result;
    for (const auto& entry : getModuleRegistry())
    {
        // Return {internal type, description} for compatibility
        result.push_back({entry.second.first, entry.second.second});
    }
    return result;
}

// VST Plugin Support
void ImGuiNodeEditorComponent::addPluginModules()
{
    if (synth == nullptr)
        return;
    
    auto& app = PresetCreatorApplication::getApp();
    auto& knownPluginList = app.getKnownPluginList();
    auto& formatManager = app.getPluginFormatManager();
    
    // Set the plugin format manager and known plugin list on the synth if not already set
    synth->setPluginFormatManager(&formatManager);
    synth->setKnownPluginList(&knownPluginList);
    
    // Display each known plugin as a button
    const auto& plugins = knownPluginList.getTypes();
    
    if (plugins.isEmpty())
    {
        ImGui::TextDisabled("No plugins found.");
        ImGui::TextDisabled("Use 'Scan for Plugins...' in the File menu.");
        return;
    }
    
    for (const auto& desc : plugins)
    {
        juce::String buttonLabel = desc.name;
        if (desc.manufacturerName.isNotEmpty())
        {
            buttonLabel += " (" + desc.manufacturerName + ")";
        }
        
        if (ImGui::Selectable(buttonLabel.toRawUTF8()))
        {
            auto nodeId = synth->addVstModule(formatManager, desc);
            if (nodeId.uid != 0)
            {
                const ImVec2 mouse = ImGui::GetMousePos();
                const auto logicalId = synth->getLogicalIdForNode(nodeId);
                pendingNodeScreenPositions[(int)logicalId] = mouse;
                snapshotAfterEditor = true;
                juce::Logger::writeToLog("[VST] Added plugin: " + desc.name);
            }
            else
            {
                juce::Logger::writeToLog("[VST] ERROR: Failed to add plugin: " + desc.name);
            }
        }
        
        // Show tooltip with plugin info on hover
        if (ImGui::IsItemHovered())
        {
            ImGui::BeginTooltip();
            ImGui::Text("Name: %s", desc.name.toRawUTF8());
            ImGui::Text("Manufacturer: %s", desc.manufacturerName.toRawUTF8());
            ImGui::Text("Version: %s", desc.version.toRawUTF8());
            ImGui::Text("Format: %s", desc.pluginFormatName.toRawUTF8());
            ImGui::Text("Type: %s", desc.isInstrument ? "Instrument" : "Effect");
            ImGui::Text("Inputs: %d", desc.numInputChannels);
            ImGui::Text("Outputs: %d", desc.numOutputChannels);
            ImGui::EndTooltip();
        }
    }
}

void ImGuiNodeEditorComponent::handleCollapseToMetaModule()
{
    if (!synth)
        return;
    
    juce::Logger::writeToLog("[Meta Module] Starting collapse operation...");
    
    // 1. Get selected nodes
    const int numSelected = ImNodes::NumSelectedNodes();
    if (numSelected < 2)
    {
        juce::Logger::writeToLog("[Meta Module] ERROR: Need at least 2 nodes selected");
        return;
    }
    
    std::vector<int> selectedNodeIds(numSelected);
    ImNodes::GetSelectedNodes(selectedNodeIds.data());
    
    // Convert to logical IDs
    std::set<juce::uint32> selectedLogicalIds;
    for (int nodeId : selectedNodeIds)
    {
        selectedLogicalIds.insert((juce::uint32)nodeId);
    }
    
    juce::Logger::writeToLog("[Meta Module] Selected " + juce::String(numSelected) + " nodes");
    
    // 2. Analyze boundary connections
    struct BoundaryConnection
    {
        juce::uint32 externalLogicalId;
        int externalChannel;
        juce::uint32 internalLogicalId;
        int internalChannel;
        bool isInput; // true = external -> internal, false = internal -> external
    };
    
    std::vector<BoundaryConnection> boundaries;
    auto allConnections = synth->getConnectionsInfo();
    
    for (const auto& conn : allConnections)
    {
        bool srcIsSelected = selectedLogicalIds.count(conn.srcLogicalId) > 0;
        bool dstIsSelected = selectedLogicalIds.count(conn.dstLogicalId) > 0 && !conn.dstIsOutput;
        bool dstIsOutput = conn.dstIsOutput;
        
        // Inlet: external -> selected
        if (!srcIsSelected && dstIsSelected)
        {
            BoundaryConnection bc;
            bc.externalLogicalId = conn.srcLogicalId;
            bc.externalChannel = conn.srcChan;
            bc.internalLogicalId = conn.dstLogicalId;
            bc.internalChannel = conn.dstChan;
            bc.isInput = true;
            boundaries.push_back(bc);
            juce::Logger::writeToLog("[Meta Module] Found inlet: " + juce::String(bc.externalLogicalId) + 
                                    " -> " + juce::String(bc.internalLogicalId));
        }
        // Outlet: selected -> external or output
        else if (srcIsSelected && (!dstIsSelected || dstIsOutput))
        {
            BoundaryConnection bc;
            bc.externalLogicalId = dstIsOutput ? 0 : conn.dstLogicalId;
            bc.externalChannel = conn.dstChan;
            bc.internalLogicalId = conn.srcLogicalId;
            bc.internalChannel = conn.srcChan;
            bc.isInput = false;
            boundaries.push_back(bc);
            juce::Logger::writeToLog("[Meta Module] Found outlet: " + juce::String(bc.internalLogicalId) + 
                                    " -> " + (dstIsOutput ? "OUTPUT" : juce::String(bc.externalLogicalId)));
        }
    }
    
    // Count inlets and outlets
    int numInlets = 0;
    int numOutlets = 0;
    for (const auto& bc : boundaries)
    {
        if (bc.isInput)
            numInlets++;
        else
            numOutlets++;
    }
    
    juce::Logger::writeToLog("[META] Boundary Detection: Found " + juce::String(numInlets) + " inlets and " + juce::String(numOutlets) + " outlets.");
    juce::Logger::writeToLog("[META] Found " + juce::String(boundaries.size()) + " boundary connections");
    
    if (boundaries.empty())
    {
        juce::Logger::writeToLog("[META] WARNING: No boundary connections - creating isolated meta module");
    }
    
    // 3. Create the internal graph state
    pushSnapshot(); // Make undoable
    
    // Save the state of selected nodes
    juce::MemoryBlock internalState;
    {
        // Create a temporary state containing only selected nodes
        juce::ValueTree internalRoot("ModularSynthPreset");
        internalRoot.setProperty("version", 1, nullptr);
        
        juce::ValueTree modsVT("modules");
        juce::ValueTree connsVT("connections");
        
        // Add selected modules
        std::map<juce::uint32, juce::uint32> oldToNewLogicalId;
        juce::uint32 newLogicalId = 1;
        
        for (juce::uint32 oldId : selectedLogicalIds)
        {
            oldToNewLogicalId[oldId] = newLogicalId++;
            
            auto* module = synth->getModuleForLogical(oldId);
            if (!module)
                continue;
            
            juce::String moduleType = synth->getModuleTypeForLogical(oldId);
            
            juce::ValueTree mv("module");
            mv.setProperty("logicalId", (int)oldToNewLogicalId[oldId], nullptr);
            mv.setProperty("type", moduleType, nullptr);
            
            // Save parameters
            juce::ValueTree params = module->getAPVTS().copyState();
            juce::ValueTree paramsWrapper("params");
            paramsWrapper.addChild(params, -1, nullptr);
            mv.addChild(paramsWrapper, -1, nullptr);
            
            // Save extra state
            if (auto extra = module->getExtraStateTree(); extra.isValid())
            {
                juce::ValueTree extraWrapper("extra");
                extraWrapper.addChild(extra, -1, nullptr);
                mv.addChild(extraWrapper, -1, nullptr);
            }
            
            modsVT.addChild(mv, -1, nullptr);
        }
        
        // Add inlet modules for each unique input
        std::map<std::pair<juce::uint32, int>, juce::uint32> inletMap; // (extId, extCh) -> inletLogicalId
        for (const auto& bc : boundaries)
        {
            if (bc.isInput)
            {
                auto key = std::make_pair(bc.externalLogicalId, bc.externalChannel);
                if (inletMap.find(key) == inletMap.end())
                {
                    juce::uint32 inletId = newLogicalId++;
                    inletMap[key] = inletId;
                    
                    juce::ValueTree mv("module");
                    mv.setProperty("logicalId", (int)inletId, nullptr);
                    mv.setProperty("type", "inlet", nullptr);
                    modsVT.addChild(mv, -1, nullptr);
                    
                    juce::Logger::writeToLog("[Meta Module] Created inlet node ID=" + juce::String(inletId));
                }
            }
        }
        
        // Add outlet modules for each unique output
        std::map<std::pair<juce::uint32, int>, juce::uint32> outletMap; // (intId, intCh) -> outletLogicalId
        for (const auto& bc : boundaries)
        {
            if (!bc.isInput)
            {
                auto key = std::make_pair(bc.internalLogicalId, bc.internalChannel);
                if (outletMap.find(key) == outletMap.end())
                {
                    juce::uint32 outletId = newLogicalId++;
                    outletMap[key] = outletId;
                    
                    juce::ValueTree mv("module");
                    mv.setProperty("logicalId", (int)outletId, nullptr);
                    mv.setProperty("type", "outlet", nullptr);
                    modsVT.addChild(mv, -1, nullptr);
                    
                    juce::Logger::writeToLog("[Meta Module] Created outlet node ID=" + juce::String(outletId));
                }
            }
        }
        
        // Add internal connections (between selected nodes)
        for (const auto& conn : allConnections)
        {
            bool srcIsSelected = selectedLogicalIds.count(conn.srcLogicalId) > 0;
            bool dstIsSelected = selectedLogicalIds.count(conn.dstLogicalId) > 0;
            
            if (srcIsSelected && dstIsSelected)
            {
                juce::ValueTree cv("connection");
                cv.setProperty("srcId", (int)oldToNewLogicalId[conn.srcLogicalId], nullptr);
                cv.setProperty("srcChan", conn.srcChan, nullptr);
                cv.setProperty("dstId", (int)oldToNewLogicalId[conn.dstLogicalId], nullptr);
                cv.setProperty("dstChan", conn.dstChan, nullptr);
                connsVT.addChild(cv, -1, nullptr);
            }
        }
        
        // Add connections from inlets to internal nodes
        for (const auto& bc : boundaries)
        {
            if (bc.isInput)
            {
                auto key = std::make_pair(bc.externalLogicalId, bc.externalChannel);
                juce::uint32 inletId = inletMap[key];
                
                juce::ValueTree cv("connection");
                cv.setProperty("srcId", (int)inletId, nullptr);
                cv.setProperty("srcChan", 0, nullptr); // Inlets output on channel 0
                cv.setProperty("dstId", (int)oldToNewLogicalId[bc.internalLogicalId], nullptr);
                cv.setProperty("dstChan", bc.internalChannel, nullptr);
                connsVT.addChild(cv, -1, nullptr);
            }
        }
        
        // Add connections from internal nodes to outlets
        for (const auto& bc : boundaries)
        {
            if (!bc.isInput)
            {
                auto key = std::make_pair(bc.internalLogicalId, bc.internalChannel);
                juce::uint32 outletId = outletMap[key];
                
                juce::ValueTree cv("connection");
                cv.setProperty("srcId", (int)oldToNewLogicalId[bc.internalLogicalId], nullptr);
                cv.setProperty("srcChan", bc.internalChannel, nullptr);
                cv.setProperty("dstId", (int)outletId, nullptr);
                cv.setProperty("dstChan", 0, nullptr); // Outlets input on channel 0
                connsVT.addChild(cv, -1, nullptr);
            }
        }
        
        internalRoot.addChild(modsVT, -1, nullptr);
        internalRoot.addChild(connsVT, -1, nullptr);
        
        // Serialize to memory block
        if (auto xml = internalRoot.createXml())
        {
            juce::MemoryOutputStream mos(internalState, false);
            xml->writeTo(mos);
            juce::Logger::writeToLog("[META] Generated state for sub-patch.");
        }
    }
    
    // 4. Calculate average position for the meta module
    ImVec2 avgPos(0.0f, 0.0f);
    int posCount = 0;
    for (juce::uint32 logicalId : selectedLogicalIds)
    {
        ImVec2 pos = ImNodes::GetNodeGridSpacePos((int)logicalId);
        avgPos.x += pos.x;
        avgPos.y += pos.y;
        posCount++;
    }
    if (posCount > 0)
    {
        avgPos.x /= posCount;
        avgPos.y /= posCount;
    }
    
    // 5. Delete selected nodes
    for (juce::uint32 logicalId : selectedLogicalIds)
    {
        auto nodeId = synth->getNodeIdForLogical(logicalId);
        synth->removeModule(nodeId);
    }
    
    // 6. Create meta module
    auto metaNodeId = synth->addModule("meta module");
    auto metaLogicalId = synth->getLogicalIdForNode(metaNodeId);
    pendingNodePositions[(int)metaLogicalId] = avgPos;
    
    juce::Logger::writeToLog("[META] Created new MetaModule with logical ID: " + juce::String((int)metaLogicalId));
    
    auto* metaModule = dynamic_cast<MetaModuleProcessor*>(synth->getModuleForLogical(metaLogicalId));
    if (metaModule)
    {
        // Load the internal state
        metaModule->setStateInformation(internalState.getData(), (int)internalState.getSize());
        juce::Logger::writeToLog("[META] Loaded internal state into meta module");
    }
    else
    {
        juce::Logger::writeToLog("[META] ERROR: Failed to create meta module");
        return;
    }
    
    // 7. Reconnect external connections
    // Note: This is a simplified implementation - in production, you'd need to map
    // inlet/outlet indices to meta module input/output channels properly
    for (const auto& bc : boundaries)
    {
        if (bc.isInput)
        {
            // Connect external source to meta module input
            auto extNodeId = synth->getNodeIdForLogical(bc.externalLogicalId);
            synth->connect(extNodeId, bc.externalChannel, metaNodeId, 0);
        }
        else if (bc.externalLogicalId != 0)
        {
            // Connect meta module output to external destination
            auto extNodeId = synth->getNodeIdForLogical(bc.externalLogicalId);
            synth->connect(metaNodeId, 0, extNodeId, bc.externalChannel);
        }
        else
        {
            // Connect meta module output to main output
            auto outputNodeId = synth->getOutputNodeID();
            synth->connect(metaNodeId, 0, outputNodeId, bc.externalChannel);
        }
    }
    
    graphNeedsRebuild = true;
    synth->commitChanges();
    
    juce::Logger::writeToLog("[META] Reconnected external cables. Collapse complete!");
}

void ImGuiNodeEditorComponent::loadPresetFromFile(const juce::File& file)
{
    if (!file.existsAsFile() || synth == nullptr)
        return;

    // 1. Load the file content.
    juce::MemoryBlock mb;
    file.loadFileAsData(mb);

    // 2. Set the synthesizer's state. This rebuilds the audio graph.
    synth->setStateInformation(mb.getData(), (int)mb.getSize());

    // 3. Parse the XML to find the UI state.
    juce::ValueTree uiState;
    if (auto xml = juce::XmlDocument::parse(mb.toString()))
    {
        auto vt = juce::ValueTree::fromXml(*xml);
        uiState = vt.getChildWithName("NodeEditorUI");
        if (uiState.isValid())
        {
            // 4. Apply the UI state (node positions, muted status, etc.).
            // This queues the changes to be applied on the next frame.
            applyUiValueTree(uiState);
        }
    }

    // 5. Create an undo snapshot for this action.
    Snapshot s;
    synth->getStateInformation(s.synthState);
    s.uiState = uiState.isValid() ? uiState : getUiValueTree();
    undoStack.push_back(std::move(s));
    redoStack.clear();

    // 6. Update the UI status trackers.
    isPatchDirty = false;
    currentPresetFile = file.getFileName();
    
    juce::Logger::writeToLog("[Preset] Successfully loaded preset: " + file.getFullPathName());
}

void ImGuiNodeEditorComponent::mergePresetFromFile(const juce::File& file, ImVec2 dropPosition)
{
    if (!file.existsAsFile() || synth == nullptr)
        return;

    auto xml = juce::XmlDocument::parse(file);
    if (xml == nullptr) return;

    juce::ValueTree preset = juce::ValueTree::fromXml(*xml);
    auto modulesVT = preset.getChildWithName("modules");
    auto connectionsVT = preset.getChildWithName("connections");
    auto uiVT = preset.getChildWithName("NodeEditorUI");

    if (!modulesVT.isValid()) return;

    pushSnapshot(); // Create an undo state before we start merging.

    // --- THIS IS THE NEW LOGIC ---
    // 1. Find the top-most Y coordinate of all existing nodes on the canvas.
    float topMostY = FLT_MAX;
    auto currentUiState = getUiValueTree();
    bool canvasHasNodes = false;
    for (int i = 0; i < currentUiState.getNumChildren(); ++i)
    {
        auto nodePosVT = currentUiState.getChild(i);
        if (nodePosVT.hasType("node"))
        {
            canvasHasNodes = true;
            float y = (float)nodePosVT.getProperty("y");
            if (y < topMostY)
            {
                topMostY = y;
            }
        }
    }
    // If the canvas is empty, use the drop position as the reference.
    if (!canvasHasNodes)
    {
        topMostY = dropPosition.y;
    }

    // 2. Find the bounding box of the nodes within the preset we are dropping.
    float presetMinX = FLT_MAX;
    float presetMaxY = -FLT_MAX;
    if (uiVT.isValid())
    {
        for (int i = 0; i < uiVT.getNumChildren(); ++i)
        {
            auto nodePosVT = uiVT.getChild(i);
            if (nodePosVT.hasType("node"))
            {
                float x = (float)nodePosVT.getProperty("x");
                float y = (float)nodePosVT.getProperty("y");
                if (x < presetMinX) presetMinX = x;
                if (y > presetMaxY) presetMaxY = y; // We need the lowest point (max Y) of the preset group.
            }
        }
    }
    
    // 3. Calculate the necessary offsets.
    const float verticalPadding = 100.0f;
    const float yOffset = topMostY - presetMaxY - verticalPadding;
    const float xOffset = dropPosition.x - presetMinX;
    // --- END OF NEW LOGIC ---

    // This map will track how we remap old IDs from the file to new, unique IDs on the canvas.
    std::map<juce::uint32, juce::uint32> oldIdToNewId;

    // First pass: create all the new modules from the preset.
    for (int i = 0; i < modulesVT.getNumChildren(); ++i)
    {
        auto moduleNode = modulesVT.getChild(i);
        if (moduleNode.hasType("module"))
        {
            juce::uint32 oldLogicalId = (juce::uint32)(int)moduleNode.getProperty("logicalId");
            juce::String type = moduleNode.getProperty("type").toString();
            
            // Add the module without committing the graph changes yet.
            auto newNodeId = synth->addModule(type, false);
            juce::uint32 newLogicalId = synth->getLogicalIdForNode(newNodeId);

            oldIdToNewId[oldLogicalId] = newLogicalId; // Store the mapping

            // Restore the new module's parameters and extra state.
            if (auto* proc = synth->getModuleForLogical(newLogicalId))
            {
                auto paramsWrapper = moduleNode.getChildWithName("params");
                if (paramsWrapper.isValid()) proc->getAPVTS().replaceState(paramsWrapper.getChild(0));
                
                auto extraWrapper = moduleNode.getChildWithName("extra");
                if (extraWrapper.isValid()) proc->setExtraStateTree(extraWrapper.getChild(0));
            }
        }
    }

    // Second pass: recreate the internal connections between the new modules.
    if (connectionsVT.isValid())
    {
        for (int i = 0; i < connectionsVT.getNumChildren(); ++i)
        {
            auto connNode = connectionsVT.getChild(i);
            if (connNode.hasType("connection"))
            {
                juce::uint32 oldSrcId = (juce::uint32)(int)connNode.getProperty("srcId");
                int srcChan = (int)connNode.getProperty("srcChan");
                juce::uint32 oldDstId = (juce::uint32)(int)connNode.getProperty("dstId");
                int dstChan = (int)connNode.getProperty("dstChan");

                // Only connect if both source and destination are part of the preset we're merging.
                if (oldIdToNewId.count(oldSrcId) && oldIdToNewId.count(oldDstId))
                {
                    auto newSrcNodeId = synth->getNodeIdForLogical(oldIdToNewId[oldSrcId]);
                    auto newDstNodeId = synth->getNodeIdForLogical(oldIdToNewId[oldDstId]);
                    synth->connect(newSrcNodeId, srcChan, newDstNodeId, dstChan);
                }
            }
        }
    }
    
    // Third pass: Apply UI positions using our new calculated offsets.
    if (uiVT.isValid())
    {
        for (int i = 0; i < uiVT.getNumChildren(); ++i)
        {
            auto nodePosVT = uiVT.getChild(i);
            if (nodePosVT.hasType("node"))
            {
                juce::uint32 oldId = (juce::uint32)(int)nodePosVT.getProperty("id");
                if (oldIdToNewId.count(oldId)) // Check if it's one of our new nodes
                {
                    ImVec2 pos = ImVec2((float)nodePosVT.getProperty("x"), (float)nodePosVT.getProperty("y"));
                    
                    // Apply the smart offsets
                    ImVec2 newPos = ImVec2(pos.x + xOffset, pos.y + yOffset);
                    
                    pendingNodeScreenPositions[(int)oldIdToNewId[oldId]] = newPos;
                }
            }
        }
    }

    // Finally, commit all the changes to the audio graph at once.
    synth->commitChanges();
    isPatchDirty = true; // Mark the patch as edited.
    
    juce::Logger::writeToLog("[Preset] Successfully merged preset: " + file.getFullPathName() + 
                             " above existing nodes with offsets (" + juce::String(xOffset) + ", " + juce::String(yOffset) + ")");
}




================================================================================
FILE: juce\Source\preset_creator\PinDatabase.h
================================================================================


#pragma once

#include "../audio/modules/ModuleProcessor.h"
#include <map>

// Getter functions that return references to static local variables
// This ensures safe initialization after JUCE is ready (construct on first use idiom)

// Returns the pin database for all module types
inline std::map<juce::String, ModulePinInfo>& getModulePinDatabase()
{
    // By declaring the map as static inside a function, we ensure it's
    // initialized safely on its first use, after JUCE is ready.
    static std::map<juce::String, ModulePinInfo> modulePinDatabase;
    return modulePinDatabase;
}

// Returns the module descriptions database
inline std::map<juce::String, const char*>& getModuleDescriptions()
{
    static std::map<juce::String, const char*> moduleDescriptions;
    return moduleDescriptions;
}

// Function to populate both databases - must be called before first use
void populatePinDatabase();



================================================================================
FILE: juce\Source\preset_creator\PinDatabase.cpp
================================================================================


#include "PinDatabase.h"

// Module Descriptions - populated on first use
void populateModuleDescriptions()
{
    auto& descriptions = getModuleDescriptions();
    if (!descriptions.empty()) return; // Only run once
    
    // Sources
    descriptions["audio input"] = "Brings hardware audio into the patch.";
    descriptions["VCO"] = "A standard Voltage-Controlled Oscillator.";
    descriptions["polyvco"] = "A multi-voice oscillator bank for polyphony.";
    descriptions["Noise"] = "Generates white, pink, or brown noise.";
    descriptions["Sequencer"] = "A classic 16-step CV and Gate sequencer.";
    descriptions["multi sequencer"] = "Advanced sequencer with parallel per-step outputs.";
    descriptions["midi player"] = "Plays MIDI files and outputs CV/Gate for each track.";
    descriptions["midi cv"] = "Converts MIDI Note/CC messages to CV signals. (Monophonic)";
    descriptions["midi control center"] = "A powerful MIDI learn interface to map any MIDI CC to CV/Gate outputs.";
    descriptions["midi faders"] = "1-16 MIDI-learnable faders with customizable output ranges.";
    descriptions["midi knobs"] = "1-16 MIDI-learnable knobs with customizable output ranges.";
    descriptions["midi buttons"] = "1-32 MIDI-learnable buttons with Gate/Toggle/Trigger modes.";
    descriptions["midi jog wheel"] = "A single MIDI-learnable jog wheel control for expressive modulation.";
    descriptions["Value"] = "Outputs a constant, adjustable numerical value.";
    descriptions["sample loader"] = "Loads and plays audio samples with pitch/time control.";
    descriptions["best practice"] = "A template and example node demonstrating best practices.";
    // TTS Family
    descriptions["TTS Performer"] = "Advanced Text-to-Speech engine with word-level sequencing.";
    descriptions["Vocal Tract Filter"] = "A formant filter that simulates human vowel sounds.";
    // Effects
    descriptions["VCF"] = "A Voltage-Controlled Filter (LP, HP, BP).";
    descriptions["Delay"] = "A stereo delay effect with modulation.";
    descriptions["Reverb"] = "A stereo reverb effect.";
    descriptions["chorus"] = "A stereo chorus effect.";
    descriptions["phaser"] = "A stereo phaser effect.";
    descriptions["compressor"] = "Reduces the dynamic range of a signal.";
    descriptions["limiter"] = "Prevents a signal from exceeding a set level.";
    descriptions["gate"] = "A stereo noise gate to silence signals below a threshold.";
    descriptions["drive"] = "A waveshaping distortion effect.";
    descriptions["graphic eq"] = "An 8-band graphic equalizer.";
    descriptions["Frequency Graph"] = "A high-resolution, real-time spectrum analyzer.";
    descriptions["Waveshaper"] = "A distortion effect with multiple shaping algorithms.";
    descriptions["8bandshaper"] = "A multi-band waveshaper for frequency-specific distortion.";
    descriptions["Granulator"] = "A granular synthesizer/effect that plays small grains of a sample.";
    descriptions["harmonic shaper"] = "Shapes the harmonic content of a signal.";
    descriptions["timepitch"] = "Real-time pitch and time manipulation using RubberBand.";
    descriptions["De-Crackle"] = "A utility to reduce clicks from discontinuous signals.";
    descriptions["recorder"] = "Records incoming audio to a WAV, AIFF, or FLAC file.";
    descriptions["tempo clock"] = "Global clock generator with BPM control, transport, and clock outputs.";
    // Modulators
    descriptions["LFO"] = "A Low-Frequency Oscillator for modulation.";
    descriptions["ADSR"] = "An Attack-Decay-Sustain-Release envelope generator.";
    descriptions["Random"] = "A random value generator with internal sample & hold.";
    descriptions["S&H"] = "A classic Sample and Hold module.";
    descriptions["Function Generator"] = "A complex, drawable envelope/LFO generator.";
    descriptions["shaping oscillator"] = "An oscillator with a built-in waveshaper.";
    // Utilities & Logic
    descriptions["VCA"] = "A Voltage-Controlled Amplifier to control signal level.";
    descriptions["Mixer"] = "A stereo audio mixer with crossfading and panning.";
    descriptions["cv mixer"] = "A mixer specifically for control voltage signals.";
    descriptions["trackmixer"] = "A multi-channel mixer for polyphonic sources.";
    descriptions["Attenuverter"] = "Attenuates (reduces) and/or inverts signals.";
    descriptions["Lag Processor"] = "Smooths out abrupt changes in a signal (slew limiter).";
    descriptions["Math"] = "Performs mathematical operations on signals.";
    descriptions["MapRange"] = "Remaps a signal from one numerical range to another.";
    descriptions["Quantizer"] = "Snaps a continuous signal to a musical scale.";
    descriptions["Rate"] = "Converts a control signal into a normalized rate value.";
    descriptions["Comparator"] = "Outputs a high signal if an input is above a threshold.";
    descriptions["Logic"] = "Performs boolean logic (AND, OR, XOR, NOT) on gate signals.";
    descriptions["ClockDivider"] = "Divides and multiplies clock signals.";
    descriptions["SequentialSwitch"] = "A signal router with multiple thresholds.";
    // Analysis
    descriptions["Scope"] = "Visualizes an audio or CV signal.";
    descriptions["debug"] = "A tool for logging signal value changes.";
    descriptions["input debug"] = "A passthrough version of the Debug node for inspecting signals on a cable.";
}

void populatePinDatabase()
{
    // Populate both databases
    populateModuleDescriptions();
    
    auto& db = getModulePinDatabase();
    if (!db.empty()) return; // Only run once

    // --- Sources ---
    db["audio input"] = ModulePinInfo(
        {},
        { AudioPin("Out 1", 0, PinDataType::Audio), AudioPin("Out 2", 1, PinDataType::Audio),
          AudioPin("Gate", 16, PinDataType::Gate), AudioPin("Trigger", 17, PinDataType::Gate), AudioPin("EOP", 18, PinDataType::Gate) },
        {}
    );
    db["vco"] = ModulePinInfo(
        { AudioPin("Frequency", 0, PinDataType::CV), AudioPin("Waveform", 1, PinDataType::CV), AudioPin("Gate", 2, PinDataType::Gate) },
        { AudioPin("Out", 0, PinDataType::Audio) },
        {}
    );
    db["noise"] = ModulePinInfo(
        { AudioPin("Level Mod", 0, PinDataType::CV), AudioPin("Colour Mod", 1, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) }, // Stereo output to match actual implementation
        {}
    );
    db["value"] = ModulePinInfo(
        {},
        { AudioPin("Raw", 0, PinDataType::Raw), AudioPin("Normalized", 1, PinDataType::CV), AudioPin("Inverted", 2, PinDataType::Raw),
          AudioPin("Integer", 3, PinDataType::Raw), AudioPin("CV Out", 4, PinDataType::CV) },
        {}
    );
    db["sample loader"] = ModulePinInfo(
        { AudioPin("Pitch Mod", 0, PinDataType::CV), AudioPin("Speed Mod", 1, PinDataType::CV), AudioPin("Gate Mod", 2, PinDataType::CV),
          AudioPin("Trigger Mod", 3, PinDataType::Gate), AudioPin("Range Start Mod", 4, PinDataType::CV), AudioPin("Range End Mod", 5, PinDataType::CV),
          AudioPin("Randomize Trig", 6, PinDataType::Gate) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );

    // --- Effects ---
    db["vcf"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Cutoff Mod", 2, PinDataType::CV),
          AudioPin("Resonance Mod", 3, PinDataType::CV), AudioPin("Type Mod", 4, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["delay"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Time Mod", 2, PinDataType::CV),
          AudioPin("Feedback Mod", 3, PinDataType::CV), AudioPin("Mix Mod", 4, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["reverb"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Size Mod", 2, PinDataType::CV),
          AudioPin("Damp Mod", 3, PinDataType::CV), AudioPin("Mix Mod", 4, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["compressor"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Thresh Mod", 2, PinDataType::CV),
          AudioPin("Ratio Mod", 3, PinDataType::CV), AudioPin("Attack Mod", 4, PinDataType::CV), AudioPin("Release Mod", 5, PinDataType::CV),
          AudioPin("Makeup Mod", 6, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );

    // --- Modulators ---
    db["lfo"] = ModulePinInfo(
        { AudioPin("Rate Mod", 0, PinDataType::CV), AudioPin("Depth Mod", 1, PinDataType::CV), AudioPin("Wave Mod", 2, PinDataType::CV) },
        { AudioPin("Out", 0, PinDataType::CV) },
        {}
    );
    db["adsr"] = ModulePinInfo(
        { AudioPin("Gate In", 0, PinDataType::Gate), AudioPin("Trigger In", 1, PinDataType::Gate), AudioPin("Attack Mod", 2, PinDataType::CV),
          AudioPin("Decay Mod", 3, PinDataType::CV), AudioPin("Sustain Mod", 4, PinDataType::CV), AudioPin("Release Mod", 5, PinDataType::CV) },
        { AudioPin("Env Out", 0, PinDataType::CV), AudioPin("Inv Out", 1, PinDataType::CV), AudioPin("EOR Gate", 2, PinDataType::Gate),
          AudioPin("EOC Gate", 3, PinDataType::Gate) },
        {}
    );
    db["random"] = ModulePinInfo(
        {}, // No inputs - self-contained random generator
        { AudioPin("Norm Out", 0, PinDataType::CV), AudioPin("Raw Out", 1, PinDataType::Raw), AudioPin("CV Out", 2, PinDataType::CV),
          AudioPin("Bool Out", 3, PinDataType::Gate), AudioPin("Trig Out", 4, PinDataType::Gate) },
        {}
    );

    // --- Utilities ---
    db["vca"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Gain Mod", 2, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["mixer"] = ModulePinInfo(
        { AudioPin("In A L", 0, PinDataType::Audio), AudioPin("In A R", 1, PinDataType::Audio), AudioPin("In B L", 2, PinDataType::Audio),
          AudioPin("In B R", 3, PinDataType::Audio), AudioPin("Gain Mod", 4, PinDataType::CV), AudioPin("Pan Mod", 5, PinDataType::CV),
          AudioPin("X-Fade Mod", 6, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["scope"] = ModulePinInfo(
        { AudioPin("In", 0, PinDataType::Audio) },
        { AudioPin("Out", 0, PinDataType::Audio) },
        {}
    );
    db["graphic eq"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio),
          AudioPin("Band 1 Mod", 2, PinDataType::CV), AudioPin("Band 2 Mod", 3, PinDataType::CV),
          AudioPin("Band 3 Mod", 4, PinDataType::CV), AudioPin("Band 4 Mod", 5, PinDataType::CV),
          AudioPin("Band 5 Mod", 6, PinDataType::CV), AudioPin("Band 6 Mod", 7, PinDataType::CV),
          AudioPin("Band 7 Mod", 8, PinDataType::CV), AudioPin("Band 8 Mod", 9, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["frequency graph"] = ModulePinInfo(
        { AudioPin("In", 0, PinDataType::Audio) }, // Mono Audio Input
        { // Outputs: Stereo audio pass-through + 8 Gate/Trigger outputs
            AudioPin("Out L", 0, PinDataType::Audio),
            AudioPin("Out R", 1, PinDataType::Audio),
            AudioPin("Sub Gate", 2, PinDataType::Gate),
            AudioPin("Sub Trig", 3, PinDataType::Gate),
            AudioPin("Bass Gate", 4, PinDataType::Gate),
            AudioPin("Bass Trig", 5, PinDataType::Gate),
            AudioPin("Mid Gate", 6, PinDataType::Gate),
            AudioPin("Mid Trig", 7, PinDataType::Gate),
            AudioPin("High Gate", 8, PinDataType::Gate),
            AudioPin("High Trig", 9, PinDataType::Gate)
        },
        {} // No modulation inputs
    );
    db["chorus"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio),
          AudioPin("Rate Mod", 2, PinDataType::CV), AudioPin("Depth Mod", 3, PinDataType::CV),
          AudioPin("Mix Mod", 4, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["phaser"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio),
          AudioPin("Rate Mod", 2, PinDataType::CV), AudioPin("Depth Mod", 3, PinDataType::CV),
          AudioPin("Centre Mod", 4, PinDataType::CV), AudioPin("Feedback Mod", 5, PinDataType::CV),
          AudioPin("Mix Mod", 6, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["compressor"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio),
          AudioPin("Thresh Mod", 2, PinDataType::CV), AudioPin("Ratio Mod", 3, PinDataType::CV),
          AudioPin("Attack Mod", 4, PinDataType::CV), AudioPin("Release Mod", 5, PinDataType::CV),
          AudioPin("Makeup Mod", 6, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["Recorder"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio) },
        {}, // No outputs
        {}
    );
    db["limiter"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio),
          AudioPin("Thresh Mod", 2, PinDataType::CV), AudioPin("Release Mod", 3, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["gate"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["drive"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["timepitch"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Speed Mod", 2, PinDataType::CV), AudioPin("Pitch Mod", 3, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["waveshaper"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Drive Mod", 2, PinDataType::CV), AudioPin("Type Mod", 3, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["8bandshaper"] = ModulePinInfo(
        {
            AudioPin("In L", 0, PinDataType::Audio),
            AudioPin("In R", 1, PinDataType::Audio),
            AudioPin("Drive 1 Mod", 2, PinDataType::CV),
            AudioPin("Drive 2 Mod", 3, PinDataType::CV),
            AudioPin("Drive 3 Mod", 4, PinDataType::CV),
            AudioPin("Drive 4 Mod", 5, PinDataType::CV),
            AudioPin("Drive 5 Mod", 6, PinDataType::CV),
            AudioPin("Drive 6 Mod", 7, PinDataType::CV),
            AudioPin("Drive 7 Mod", 8, PinDataType::CV),
            AudioPin("Drive 8 Mod", 9, PinDataType::CV),
            AudioPin("Gain Mod", 10, PinDataType::CV)
        },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["granulator"] = ModulePinInfo(
        {
            AudioPin("In L", 0, PinDataType::Audio),
            AudioPin("In R", 1, PinDataType::Audio),
            AudioPin("Trigger In", 2, PinDataType::Gate),
            AudioPin("Density Mod", 3, PinDataType::CV),
            AudioPin("Size Mod", 4, PinDataType::CV),
            AudioPin("Position Mod", 5, PinDataType::CV),
            AudioPin("Pitch Mod", 6, PinDataType::CV),
            AudioPin("Gate Mod", 7, PinDataType::CV)
        },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["mixer"] = ModulePinInfo(
        { AudioPin("In A L", 0, PinDataType::Audio), AudioPin("In A R", 1, PinDataType::Audio), AudioPin("In B L", 2, PinDataType::Audio), AudioPin("In B R", 3, PinDataType::Audio), AudioPin("Gain Mod", 4, PinDataType::CV), AudioPin("Pan Mod", 5, PinDataType::CV), AudioPin("X-Fade Mod", 6, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    );
    db["sequencer"] = ModulePinInfo(
        { AudioPin("Mod In L", 0, PinDataType::Audio), AudioPin("Mod In R", 1, PinDataType::Audio), AudioPin("Rate Mod", 2, PinDataType::CV), AudioPin("Gate Mod", 3, PinDataType::CV), AudioPin("Steps Mod", 4, PinDataType::CV), AudioPin("Gate Thr Mod", 5, PinDataType::CV),
          // Per-step value mods absolute 6..21 (Step1..Step16)
          AudioPin("Step 1 Mod", 6, PinDataType::CV), AudioPin("Step 2 Mod", 7, PinDataType::CV), AudioPin("Step 3 Mod", 8, PinDataType::CV), AudioPin("Step 4 Mod", 9, PinDataType::CV),
          AudioPin("Step 5 Mod", 10, PinDataType::CV), AudioPin("Step 6 Mod", 11, PinDataType::CV), AudioPin("Step 7 Mod", 12, PinDataType::CV), AudioPin("Step 8 Mod", 13, PinDataType::CV),
          AudioPin("Step 9 Mod", 14, PinDataType::CV), AudioPin("Step 10 Mod", 15, PinDataType::CV), AudioPin("Step 11 Mod", 16, PinDataType::CV), AudioPin("Step 12 Mod", 17, PinDataType::CV),
          AudioPin("Step 13 Mod", 18, PinDataType::CV), AudioPin("Step 14 Mod", 19, PinDataType::CV), AudioPin("Step 15 Mod", 20, PinDataType::CV), AudioPin("Step 16 Mod", 21, PinDataType::CV),
          // Per-step trig mods absolute 22..37 (Step1..Step16) — these are Gates
          AudioPin("Step 1 Trig Mod", 22, PinDataType::Gate), AudioPin("Step 2 Trig Mod", 23, PinDataType::Gate), AudioPin("Step 3 Trig Mod", 24, PinDataType::Gate), AudioPin("Step 4 Trig Mod", 25, PinDataType::Gate),
          AudioPin("Step 5 Trig Mod", 26, PinDataType::Gate), AudioPin("Step 6 Trig Mod", 27, PinDataType::Gate), AudioPin("Step 7 Trig Mod", 28, PinDataType::Gate), AudioPin("Step 8 Trig Mod", 29, PinDataType::Gate),
          AudioPin("Step 9 Trig Mod", 30, PinDataType::Gate), AudioPin("Step 10 Trig Mod", 31, PinDataType::Gate), AudioPin("Step 11 Trig Mod", 32, PinDataType::Gate), AudioPin("Step 12 Trig Mod", 33, PinDataType::Gate),
          AudioPin("Step 13 Trig Mod", 34, PinDataType::Gate), AudioPin("Step 14 Trig Mod", 35, PinDataType::Gate), AudioPin("Step 15 Trig Mod", 36, PinDataType::Gate), AudioPin("Step 16 Trig Mod", 37, PinDataType::Gate),
          // Per-step gate level mods absolute 38..53
          AudioPin("Step 1 Gate Mod", 38, PinDataType::CV), AudioPin("Step 2 Gate Mod", 39, PinDataType::CV), AudioPin("Step 3 Gate Mod", 40, PinDataType::CV), AudioPin("Step 4 Gate Mod", 41, PinDataType::CV),
          AudioPin("Step 5 Gate Mod", 42, PinDataType::CV), AudioPin("Step 6 Gate Mod", 43, PinDataType::CV), AudioPin("Step 7 Gate Mod", 44, PinDataType::CV), AudioPin("Step 8 Gate Mod", 45, PinDataType::CV),
          AudioPin("Step 9 Gate Mod", 46, PinDataType::CV), AudioPin("Step 10 Gate Mod", 47, PinDataType::CV), AudioPin("Step 11 Gate Mod", 48, PinDataType::CV), AudioPin("Step 12 Gate Mod", 49, PinDataType::CV),
          AudioPin("Step 13 Gate Mod", 50, PinDataType::CV), AudioPin("Step 14 Gate Mod", 51, PinDataType::CV), AudioPin("Step 15 Gate Mod", 52, PinDataType::CV), AudioPin("Step 16 Gate Mod", 53, PinDataType::CV) },
        { AudioPin("Pitch", 0, PinDataType::CV), AudioPin("Gate", 1, PinDataType::Gate), AudioPin("Gate Nuanced", 2, PinDataType::CV), AudioPin("Velocity", 3, PinDataType::CV), AudioPin("Mod", 4, PinDataType::CV), AudioPin("Trigger", 5, PinDataType::Gate) },
        {}
    );

    db["value"] = ModulePinInfo(
        {},
        { AudioPin("Raw", 0, PinDataType::Raw), AudioPin("Normalized", 1, PinDataType::CV), AudioPin("Inverted", 2, PinDataType::Raw), AudioPin("Integer", 3, PinDataType::Raw), AudioPin("CV Out", 4, PinDataType::CV) },
        {}
    );
// in populatePinDatabase()

// in populatePinDatabase()

// in populatePinDatabase()

db["random"] = ModulePinInfo(
    {}, // No inputs - self-contained random generator
    { 
        AudioPin("Norm Out", 0, PinDataType::CV), 
        AudioPin("Raw Out", 1, PinDataType::Raw), 
        AudioPin("CV Out", 2, PinDataType::CV),
        AudioPin("Bool Out", 3, PinDataType::Gate), 
        AudioPin("Trig Out", 4, PinDataType::Gate) 
    },
    {} // No modulation inputs
);

    db["tts performer"] = ModulePinInfo(
        { // Inputs (absolute channels based on bus structure)
            AudioPin("Rate Mod", 0, PinDataType::CV),
            AudioPin("Gate Mod", 1, PinDataType::CV),
            AudioPin("Trigger", 2, PinDataType::Gate),
            AudioPin("Reset", 3, PinDataType::Gate),
            AudioPin("Randomize Trig", 4, PinDataType::Gate),
            AudioPin("Trim Start Mod", 5, PinDataType::CV),
            AudioPin("Trim End Mod", 6, PinDataType::CV),
            AudioPin("Speed Mod", 7, PinDataType::CV),
            AudioPin("Pitch Mod", 8, PinDataType::CV),
            // Word Triggers (Channels 9-24)
            AudioPin("Word 1 Trig", 9, PinDataType::Gate), AudioPin("Word 2 Trig", 10, PinDataType::Gate),
            AudioPin("Word 3 Trig", 11, PinDataType::Gate), AudioPin("Word 4 Trig", 12, PinDataType::Gate),
            AudioPin("Word 5 Trig", 13, PinDataType::Gate), AudioPin("Word 6 Trig", 14, PinDataType::Gate),
            AudioPin("Word 7 Trig", 15, PinDataType::Gate), AudioPin("Word 8 Trig", 16, PinDataType::Gate),
            AudioPin("Word 9 Trig", 17, PinDataType::Gate), AudioPin("Word 10 Trig", 18, PinDataType::Gate),
            AudioPin("Word 11 Trig", 19, PinDataType::Gate), AudioPin("Word 12 Trig", 20, PinDataType::Gate),
            AudioPin("Word 13 Trig", 21, PinDataType::Gate), AudioPin("Word 14 Trig", 22, PinDataType::Gate),
            AudioPin("Word 15 Trig", 23, PinDataType::Gate), AudioPin("Word 16 Trig", 24, PinDataType::Gate)
        },
        { // Outputs
            AudioPin("Audio", 0, PinDataType::Audio),
            AudioPin("Word Gate", 1, PinDataType::Gate),
            AudioPin("EOP Gate", 2, PinDataType::Gate),
            // Per-Word Gates (Channels 3-18)
            AudioPin("Word 1 Gate", 3, PinDataType::Gate), AudioPin("Word 2 Gate", 4, PinDataType::Gate),
            AudioPin("Word 3 Gate", 5, PinDataType::Gate), AudioPin("Word 4 Gate", 6, PinDataType::Gate),
            AudioPin("Word 5 Gate", 7, PinDataType::Gate), AudioPin("Word 6 Gate", 8, PinDataType::Gate),
            AudioPin("Word 7 Gate", 9, PinDataType::Gate), AudioPin("Word 8 Gate", 10, PinDataType::Gate),
            AudioPin("Word 9 Gate", 11, PinDataType::Gate), AudioPin("Word 10 Gate", 12, PinDataType::Gate),
            AudioPin("Word 11 Gate", 13, PinDataType::Gate), AudioPin("Word 12 Gate", 14, PinDataType::Gate),
            AudioPin("Word 13 Gate", 15, PinDataType::Gate), AudioPin("Word 14 Gate", 16, PinDataType::Gate),
            AudioPin("Word 15 Gate", 17, PinDataType::Gate), AudioPin("Word 16 Gate", 18, PinDataType::Gate),
            // Per-Word Triggers (Channels 19-34)
            AudioPin("Word 1 Trig", 19, PinDataType::Gate), AudioPin("Word 2 Trig", 20, PinDataType::Gate),
            AudioPin("Word 3 Trig", 21, PinDataType::Gate), AudioPin("Word 4 Trig", 22, PinDataType::Gate),
            AudioPin("Word 5 Trig", 23, PinDataType::Gate), AudioPin("Word 6 Trig", 24, PinDataType::Gate),
            AudioPin("Word 7 Trig", 25, PinDataType::Gate), AudioPin("Word 8 Trig", 26, PinDataType::Gate),
            AudioPin("Word 9 Trig", 27, PinDataType::Gate), AudioPin("Word 10 Trig", 28, PinDataType::Gate),
            AudioPin("Word 11 Trig", 29, PinDataType::Gate), AudioPin("Word 12 Trig", 30, PinDataType::Gate),
            AudioPin("Word 13 Trig", 31, PinDataType::Gate), AudioPin("Word 14 Trig", 32, PinDataType::Gate),
            AudioPin("Word 15 Trig", 33, PinDataType::Gate), AudioPin("Word 16 Trig", 34, PinDataType::Gate)
        },
        { // Modulation Pins (for UI parameter disabling)
            ModPin("Rate", "rate_mod", PinDataType::CV),
            ModPin("Gate", "gate_mod", PinDataType::CV),
            ModPin("Trim Start", "trimStart_mod", PinDataType::CV),
            ModPin("Trim End", "trimEnd_mod", PinDataType::CV),
            ModPin("Speed", "speed_mod", PinDataType::CV),
            ModPin("Pitch", "pitch_mod", PinDataType::CV)
        }
    );
    db["vocal tract filter"] = ModulePinInfo(
        { AudioPin("Audio In", 0, PinDataType::Audio) },
        { AudioPin("Audio Out", 0, PinDataType::Audio) },
        { ModPin("Vowel", "vowelShape", PinDataType::CV), ModPin("Formant", "formantShift", PinDataType::CV), ModPin("Instability", "instability", PinDataType::CV), ModPin("Gain", "formantGain", PinDataType::CV) }
    );
    db["best practice"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Freq Mod", 2, PinDataType::CV), AudioPin("Wave Mod", 3, PinDataType::CV), AudioPin("Drive Mod", 4, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        { ModPin("Frequency", "frequency_mod", PinDataType::CV), ModPin("Waveform", "waveform_mod", PinDataType::CV), ModPin("Drive", "drive_mod", PinDataType::CV) }
    );
    db["shaping oscillator"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Freq Mod", 2, PinDataType::CV), AudioPin("Wave Mod", 3, PinDataType::CV), AudioPin("Drive Mod", 4, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        { ModPin("Frequency", "frequency_mod", PinDataType::CV), ModPin("Waveform", "waveform_mod", PinDataType::CV), ModPin("Drive", "drive_mod", PinDataType::CV) }
    );
    db["harmonic shaper"] = ModulePinInfo(
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Freq Mod", 2, PinDataType::CV), AudioPin("Drive Mod", 3, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        { ModPin("Master Frequency", "masterFrequency_mod", PinDataType::CV), ModPin("Master Drive", "masterDrive_mod", PinDataType::CV) }
    );
    db["function generator"] = ModulePinInfo(
        { 
            AudioPin("Gate In", 0, PinDataType::Gate),
            AudioPin("Trigger In", 1, PinDataType::Gate),
            AudioPin("Sync In", 2, PinDataType::Gate),
            AudioPin("Rate Mod", 3, PinDataType::CV),
            AudioPin("Slew Mod", 4, PinDataType::CV),
            AudioPin("Gate Thresh Mod", 5, PinDataType::CV),
            AudioPin("Trig Thresh Mod", 6, PinDataType::CV),
            AudioPin("Pitch Base Mod", 7, PinDataType::CV),
            AudioPin("Value Mult Mod", 8, PinDataType::CV),
            AudioPin("Curve Select Mod", 9, PinDataType::CV)
        },
        { 
            AudioPin("Value", 0, PinDataType::CV),
            AudioPin("Inverted", 1, PinDataType::CV),
            AudioPin("Bipolar", 2, PinDataType::CV),
            AudioPin("Pitch", 3, PinDataType::CV),
            AudioPin("Gate", 4, PinDataType::Gate),
            AudioPin("Trigger", 5, PinDataType::Gate),
            AudioPin("End of Cycle", 6, PinDataType::Gate),
            // New dedicated outputs
            AudioPin("Blue Value", 7, PinDataType::CV),
            AudioPin("Blue Pitch", 8, PinDataType::CV),
            AudioPin("Red Value", 9, PinDataType::CV),
            AudioPin("Red Pitch", 10, PinDataType::CV),
            AudioPin("Green Value", 11, PinDataType::CV),
            AudioPin("Green Pitch", 12, PinDataType::CV)
        },
        { 
            ModPin("Rate", "rate_mod", PinDataType::CV),
            ModPin("Slew", "slew_mod", PinDataType::CV),
            ModPin("Gate Thresh", "gateThresh_mod", PinDataType::CV),
            ModPin("Trig Thresh", "trigThresh_mod", PinDataType::CV),
            ModPin("Pitch Base", "pitchBase_mod", PinDataType::CV),
            ModPin("Value Mult", "valueMult_mod", PinDataType::CV),
            ModPin("Curve Select", "curveSelect_mod", PinDataType::CV)
        }
    );

    db["multi sequencer"] = ModulePinInfo(
        { // Inputs: Mod In L, Mod In R, Rate Mod, Gate Mod, Steps Mod, Gate Thr Mod, plus per-step mods and triggers
            AudioPin("Mod In L", 0, PinDataType::Audio), AudioPin("Mod In R", 1, PinDataType::Audio),
            AudioPin("Rate Mod", 2, PinDataType::CV), AudioPin("Gate Mod", 3, PinDataType::CV),
            AudioPin("Steps Mod", 4, PinDataType::CV), AudioPin("Gate Thr Mod", 5, PinDataType::CV),
            // Per-step mods (channels 6-21)
            AudioPin("Step 1 Mod", 6, PinDataType::CV), AudioPin("Step 2 Mod", 7, PinDataType::CV),
            AudioPin("Step 3 Mod", 8, PinDataType::CV), AudioPin("Step 4 Mod", 9, PinDataType::CV),
            AudioPin("Step 5 Mod", 10, PinDataType::CV), AudioPin("Step 6 Mod", 11, PinDataType::CV),
            AudioPin("Step 7 Mod", 12, PinDataType::CV), AudioPin("Step 8 Mod", 13, PinDataType::CV),
            AudioPin("Step 9 Mod", 14, PinDataType::CV), AudioPin("Step 10 Mod", 15, PinDataType::CV),
            AudioPin("Step 11 Mod", 16, PinDataType::CV), AudioPin("Step 12 Mod", 17, PinDataType::CV),
            AudioPin("Step 13 Mod", 18, PinDataType::CV), AudioPin("Step 14 Mod", 19, PinDataType::CV),
            AudioPin("Step 15 Mod", 20, PinDataType::CV), AudioPin("Step 16 Mod", 21, PinDataType::CV),
            // Per-step trigger mods (channels 22-37)
            AudioPin("Step 1 Trig Mod", 22, PinDataType::Gate), AudioPin("Step 2 Trig Mod", 23, PinDataType::Gate),
            AudioPin("Step 3 Trig Mod", 24, PinDataType::Gate), AudioPin("Step 4 Trig Mod", 25, PinDataType::Gate),
            AudioPin("Step 5 Trig Mod", 26, PinDataType::Gate), AudioPin("Step 6 Trig Mod", 27, PinDataType::Gate),
            AudioPin("Step 7 Trig Mod", 28, PinDataType::Gate), AudioPin("Step 8 Trig Mod", 29, PinDataType::Gate),
            AudioPin("Step 9 Trig Mod", 30, PinDataType::Gate), AudioPin("Step 10 Trig Mod", 31, PinDataType::Gate),
            AudioPin("Step 11 Trig Mod", 32, PinDataType::Gate), AudioPin("Step 12 Trig Mod", 33, PinDataType::Gate),
            AudioPin("Step 13 Trig Mod", 34, PinDataType::Gate), AudioPin("Step 14 Trig Mod", 35, PinDataType::Gate),
            AudioPin("Step 15 Trig Mod", 36, PinDataType::Gate), AudioPin("Step 16 Trig Mod", 37, PinDataType::Gate)
        },
        { // Outputs: Live outputs (0-6) + Parallel step outputs (7+)
            // Live Outputs
            AudioPin("Pitch", 0, PinDataType::CV), AudioPin("Gate", 1, PinDataType::Gate),
            AudioPin("Gate Nuanced", 2, PinDataType::CV), AudioPin("Velocity", 3, PinDataType::CV),
            AudioPin("Mod", 4, PinDataType::CV), AudioPin("Trigger", 5, PinDataType::Gate),
            AudioPin("Num Steps", 6, PinDataType::Raw),
            // Parallel Step Outputs (Corrected Names and Channels, shifted by +1 after Num Steps)
            AudioPin("Pitch 1", 7, PinDataType::CV), AudioPin("Gate 1", 8, PinDataType::Gate), AudioPin("Trig 1", 9, PinDataType::Gate),
            AudioPin("Pitch 2", 10, PinDataType::CV), AudioPin("Gate 2", 11, PinDataType::Gate), AudioPin("Trig 2", 12, PinDataType::Gate),
            AudioPin("Pitch 3", 13, PinDataType::CV), AudioPin("Gate 3", 14, PinDataType::Gate), AudioPin("Trig 3", 15, PinDataType::Gate),
            AudioPin("Pitch 4", 16, PinDataType::CV), AudioPin("Gate 4", 17, PinDataType::Gate), AudioPin("Trig 4", 18, PinDataType::Gate),
            AudioPin("Pitch 5", 19, PinDataType::CV), AudioPin("Gate 5", 20, PinDataType::Gate), AudioPin("Trig 5", 21, PinDataType::Gate),
            AudioPin("Pitch 6", 22, PinDataType::CV), AudioPin("Gate 6", 23, PinDataType::Gate), AudioPin("Trig 6", 24, PinDataType::Gate),
            AudioPin("Pitch 7", 25, PinDataType::CV), AudioPin("Gate 7", 26, PinDataType::Gate), AudioPin("Trig 7", 27, PinDataType::Gate),
            AudioPin("Pitch 8", 28, PinDataType::CV), AudioPin("Gate 8", 29, PinDataType::Gate), AudioPin("Trig 8", 30, PinDataType::Gate),
            AudioPin("Pitch 9", 31, PinDataType::CV), AudioPin("Gate 9", 32, PinDataType::Gate), AudioPin("Trig 9", 33, PinDataType::Gate),
            AudioPin("Pitch 10", 34, PinDataType::CV), AudioPin("Gate 10", 35, PinDataType::Gate), AudioPin("Trig 10", 36, PinDataType::Gate),
            AudioPin("Pitch 11", 37, PinDataType::CV), AudioPin("Gate 11", 38, PinDataType::Gate), AudioPin("Trig 11", 39, PinDataType::Gate),
            AudioPin("Pitch 12", 40, PinDataType::CV), AudioPin("Gate 12", 41, PinDataType::Gate), AudioPin("Trig 12", 42, PinDataType::Gate),
            AudioPin("Pitch 13", 43, PinDataType::CV), AudioPin("Gate 13", 44, PinDataType::Gate), AudioPin("Trig 13", 45, PinDataType::Gate),
            AudioPin("Pitch 14", 46, PinDataType::CV), AudioPin("Gate 14", 47, PinDataType::Gate), AudioPin("Trig 14", 48, PinDataType::Gate),
            AudioPin("Pitch 15", 49, PinDataType::CV), AudioPin("Gate 15", 50, PinDataType::Gate), AudioPin("Trig 15", 51, PinDataType::Gate),
            AudioPin("Pitch 16", 52, PinDataType::CV), AudioPin("Gate 16", 53, PinDataType::Gate), AudioPin("Trig 16", 54, PinDataType::Gate)
        },
        {}
    );
    db["comparator"] = ModulePinInfo(
        { AudioPin("In", 0, PinDataType::CV) },
        { AudioPin("Out", 0, PinDataType::Gate) },
        {}
    );

    db["sample loader"] = ModulePinInfo(
        {
            AudioPin("Pitch Mod", 0, PinDataType::CV),
            AudioPin("Speed Mod", 1, PinDataType::CV),
            AudioPin("Gate Mod", 2, PinDataType::CV),
            AudioPin("Trigger Mod", 3, PinDataType::Gate),
            AudioPin("Range Start Mod", 4, PinDataType::CV),
            AudioPin("Range End Mod", 5, PinDataType::CV),
            AudioPin("Randomize Trig", 6, PinDataType::Gate)
        },
        {
            AudioPin("Out L", 0, PinDataType::Audio),
            AudioPin("Out R", 1, PinDataType::Audio)
        },
        {}
    );
    
    // Track Mixer - first 8 tracks UI definition (mono per track + gain/pan CV) and a Tracks Mod pin
    db["track mixer"] = ModulePinInfo(
        {
            // Mono audio inputs for first 8 tracks (absolute channels 0..7)
            AudioPin("In 1", 0, PinDataType::Audio),
            AudioPin("In 2", 1, PinDataType::Audio),
            AudioPin("In 3", 2, PinDataType::Audio),
            AudioPin("In 4", 3, PinDataType::Audio),
            AudioPin("In 5", 4, PinDataType::Audio),
            AudioPin("In 6", 5, PinDataType::Audio),
            AudioPin("In 7", 6, PinDataType::Audio),
            AudioPin("In 8", 7, PinDataType::Audio),

            // Num Tracks modulation CV at absolute channel 64 (start of Mod bus)
            AudioPin("Num Tracks Mod", 64, PinDataType::Raw),

            // Per-track CV inputs on Mod bus: Gain at 65,67,... Pan at 66,68,...
            AudioPin("Gain 1 Mod", 65, PinDataType::CV),  AudioPin("Pan 1 Mod", 66, PinDataType::CV),
            AudioPin("Gain 2 Mod", 67, PinDataType::CV),  AudioPin("Pan 2 Mod", 68, PinDataType::CV),
            AudioPin("Gain 3 Mod", 69, PinDataType::CV),  AudioPin("Pan 3 Mod", 70, PinDataType::CV),
            AudioPin("Gain 4 Mod", 71, PinDataType::CV),  AudioPin("Pan 4 Mod", 72, PinDataType::CV),
            AudioPin("Gain 5 Mod", 73, PinDataType::CV),  AudioPin("Pan 5 Mod", 74, PinDataType::CV),
            AudioPin("Gain 6 Mod", 75, PinDataType::CV),  AudioPin("Pan 6 Mod", 76, PinDataType::CV),
            AudioPin("Gain 7 Mod", 77, PinDataType::CV),  AudioPin("Pan 7 Mod", 78, PinDataType::CV),
            AudioPin("Gain 8 Mod", 79, PinDataType::CV),  AudioPin("Pan 8 Mod", 80, PinDataType::CV)
        },
        {
            AudioPin("Out L", 0, PinDataType::Audio),
            AudioPin("Out R", 1, PinDataType::Audio)
        },
        {}
    );
    
    // Add PolyVCO module - Build the pin lists directly in initializer list
    db["polyvco"] = ModulePinInfo(
        {
            // Num Voices modulation input
            AudioPin("Num Voices Mod", 0, PinDataType::Raw),
            
            // Frequency modulation inputs (channels 1-32)
            AudioPin("Freq 1 Mod", 1, PinDataType::CV), AudioPin("Freq 2 Mod", 2, PinDataType::CV),
            AudioPin("Freq 3 Mod", 3, PinDataType::CV), AudioPin("Freq 4 Mod", 4, PinDataType::CV),
            AudioPin("Freq 5 Mod", 5, PinDataType::CV), AudioPin("Freq 6 Mod", 6, PinDataType::CV),
            AudioPin("Freq 7 Mod", 7, PinDataType::CV), AudioPin("Freq 8 Mod", 8, PinDataType::CV),
            AudioPin("Freq 9 Mod", 9, PinDataType::CV), AudioPin("Freq 10 Mod", 10, PinDataType::CV),
            AudioPin("Freq 11 Mod", 11, PinDataType::CV), AudioPin("Freq 12 Mod", 12, PinDataType::CV),
            AudioPin("Freq 13 Mod", 13, PinDataType::CV), AudioPin("Freq 14 Mod", 14, PinDataType::CV),
            AudioPin("Freq 15 Mod", 15, PinDataType::CV), AudioPin("Freq 16 Mod", 16, PinDataType::CV),
            AudioPin("Freq 17 Mod", 17, PinDataType::CV), AudioPin("Freq 18 Mod", 18, PinDataType::CV),
            AudioPin("Freq 19 Mod", 19, PinDataType::CV), AudioPin("Freq 20 Mod", 20, PinDataType::CV),
            AudioPin("Freq 21 Mod", 21, PinDataType::CV), AudioPin("Freq 22 Mod", 22, PinDataType::CV),
            AudioPin("Freq 23 Mod", 23, PinDataType::CV), AudioPin("Freq 24 Mod", 24, PinDataType::CV),
            AudioPin("Freq 25 Mod", 25, PinDataType::CV), AudioPin("Freq 26 Mod", 26, PinDataType::CV),
            AudioPin("Freq 27 Mod", 27, PinDataType::CV), AudioPin("Freq 28 Mod", 28, PinDataType::CV),
            AudioPin("Freq 29 Mod", 29, PinDataType::CV), AudioPin("Freq 30 Mod", 30, PinDataType::CV),
            AudioPin("Freq 31 Mod", 31, PinDataType::CV), AudioPin("Freq 32 Mod", 32, PinDataType::CV),
            
            // Waveform modulation inputs (channels 33-64)
            AudioPin("Wave 1 Mod", 33, PinDataType::CV), AudioPin("Wave 2 Mod", 34, PinDataType::CV),
            AudioPin("Wave 3 Mod", 35, PinDataType::CV), AudioPin("Wave 4 Mod", 36, PinDataType::CV),
            AudioPin("Wave 5 Mod", 37, PinDataType::CV), AudioPin("Wave 6 Mod", 38, PinDataType::CV),
            AudioPin("Wave 7 Mod", 39, PinDataType::CV), AudioPin("Wave 8 Mod", 40, PinDataType::CV),
            AudioPin("Wave 9 Mod", 41, PinDataType::CV), AudioPin("Wave 10 Mod", 42, PinDataType::CV),
            AudioPin("Wave 11 Mod", 43, PinDataType::CV), AudioPin("Wave 12 Mod", 44, PinDataType::CV),
            AudioPin("Wave 13 Mod", 45, PinDataType::CV), AudioPin("Wave 14 Mod", 46, PinDataType::CV),
            AudioPin("Wave 15 Mod", 47, PinDataType::CV), AudioPin("Wave 16 Mod", 48, PinDataType::CV),
            AudioPin("Wave 17 Mod", 49, PinDataType::CV), AudioPin("Wave 18 Mod", 50, PinDataType::CV),
            AudioPin("Wave 19 Mod", 51, PinDataType::CV), AudioPin("Wave 20 Mod", 52, PinDataType::CV),
            AudioPin("Wave 21 Mod", 53, PinDataType::CV), AudioPin("Wave 22 Mod", 54, PinDataType::CV),
            AudioPin("Wave 23 Mod", 55, PinDataType::CV), AudioPin("Wave 24 Mod", 56, PinDataType::CV),
            AudioPin("Wave 25 Mod", 57, PinDataType::CV), AudioPin("Wave 26 Mod", 58, PinDataType::CV),
            AudioPin("Wave 27 Mod", 59, PinDataType::CV), AudioPin("Wave 28 Mod", 60, PinDataType::CV),
            AudioPin("Wave 29 Mod", 61, PinDataType::CV), AudioPin("Wave 30 Mod", 62, PinDataType::CV),
            AudioPin("Wave 31 Mod", 63, PinDataType::CV), AudioPin("Wave 32 Mod", 64, PinDataType::CV),
            
            // Gate modulation inputs (channels 65-96)
            AudioPin("Gate 1 Mod", 65, PinDataType::Gate), AudioPin("Gate 2 Mod", 66, PinDataType::Gate),
            AudioPin("Gate 3 Mod", 67, PinDataType::Gate), AudioPin("Gate 4 Mod", 68, PinDataType::Gate),
            AudioPin("Gate 5 Mod", 69, PinDataType::Gate), AudioPin("Gate 6 Mod", 70, PinDataType::Gate),
            AudioPin("Gate 7 Mod", 71, PinDataType::Gate), AudioPin("Gate 8 Mod", 72, PinDataType::Gate),
            AudioPin("Gate 9 Mod", 73, PinDataType::Gate), AudioPin("Gate 10 Mod", 74, PinDataType::Gate),
            AudioPin("Gate 11 Mod", 75, PinDataType::Gate), AudioPin("Gate 12 Mod", 76, PinDataType::Gate),
            AudioPin("Gate 13 Mod", 77, PinDataType::Gate), AudioPin("Gate 14 Mod", 78, PinDataType::Gate),
            AudioPin("Gate 15 Mod", 79, PinDataType::Gate), AudioPin("Gate 16 Mod", 80, PinDataType::Gate),
            AudioPin("Gate 17 Mod", 81, PinDataType::Gate), AudioPin("Gate 18 Mod", 82, PinDataType::Gate),
            AudioPin("Gate 19 Mod", 83, PinDataType::Gate), AudioPin("Gate 20 Mod", 84, PinDataType::Gate),
            AudioPin("Gate 21 Mod", 85, PinDataType::Gate), AudioPin("Gate 22 Mod", 86, PinDataType::Gate),
            AudioPin("Gate 23 Mod", 87, PinDataType::Gate), AudioPin("Gate 24 Mod", 88, PinDataType::Gate),
            AudioPin("Gate 25 Mod", 89, PinDataType::Gate), AudioPin("Gate 26 Mod", 90, PinDataType::Gate),
            AudioPin("Gate 27 Mod", 91, PinDataType::Gate), AudioPin("Gate 28 Mod", 92, PinDataType::Gate),
            AudioPin("Gate 29 Mod", 93, PinDataType::Gate), AudioPin("Gate 30 Mod", 94, PinDataType::Gate),
            AudioPin("Gate 31 Mod", 95, PinDataType::Gate), AudioPin("Gate 32 Mod", 96, PinDataType::Gate)
        },
        {
            // Audio outputs (channels 0-31)
            AudioPin("Out 1", 0, PinDataType::Audio), AudioPin("Out 2", 1, PinDataType::Audio),
            AudioPin("Out 3", 2, PinDataType::Audio), AudioPin("Out 4", 3, PinDataType::Audio),
            AudioPin("Out 5", 4, PinDataType::Audio), AudioPin("Out 6", 5, PinDataType::Audio),
            AudioPin("Out 7", 6, PinDataType::Audio), AudioPin("Out 8", 7, PinDataType::Audio),
            AudioPin("Out 9", 8, PinDataType::Audio), AudioPin("Out 10", 9, PinDataType::Audio),
            AudioPin("Out 11", 10, PinDataType::Audio), AudioPin("Out 12", 11, PinDataType::Audio),
            AudioPin("Out 13", 12, PinDataType::Audio), AudioPin("Out 14", 13, PinDataType::Audio),
            AudioPin("Out 15", 14, PinDataType::Audio), AudioPin("Out 16", 15, PinDataType::Audio),
            AudioPin("Out 17", 16, PinDataType::Audio), AudioPin("Out 18", 17, PinDataType::Audio),
            AudioPin("Out 19", 18, PinDataType::Audio), AudioPin("Out 20", 19, PinDataType::Audio),
            AudioPin("Out 21", 20, PinDataType::Audio), AudioPin("Out 22", 21, PinDataType::Audio),
            AudioPin("Out 23", 22, PinDataType::Audio), AudioPin("Out 24", 23, PinDataType::Audio),
            AudioPin("Out 25", 24, PinDataType::Audio), AudioPin("Out 26", 25, PinDataType::Audio),
            AudioPin("Out 27", 26, PinDataType::Audio), AudioPin("Out 28", 27, PinDataType::Audio),
            AudioPin("Out 29", 28, PinDataType::Audio), AudioPin("Out 30", 29, PinDataType::Audio),
            AudioPin("Out 31", 30, PinDataType::Audio), AudioPin("Out 32", 31, PinDataType::Audio)
        },
        {}
    );
    
    // Add missing modules
    db["Quantizer"] = ModulePinInfo(
        { AudioPin("CV In", 0, PinDataType::CV), AudioPin("Scale Mod", 1, PinDataType::CV), AudioPin("Root Mod", 2, PinDataType::CV) },
        { AudioPin("Out", 0, PinDataType::CV) },
        {}
    );
    
    db["TimePitch"] = ModulePinInfo(
        { AudioPin("Audio In", 0, PinDataType::Audio), AudioPin("Speed Mod", 1, PinDataType::CV), AudioPin("Pitch Mod", 2, PinDataType::CV) },
        { AudioPin("Out", 0, PinDataType::Audio) },
        {}
    );
    
    // Note: TTS Performer pin database is defined earlier in this function (around line 378)
    // Duplicate entry removed to avoid conflicts

    
    // Add TrackMixer module alias (main definition is "track mixer" above)
    db["trackmixer"] = db["track mixer"];
    
    
    // Add MIDI Player module
    db["midiplayer"] = ModulePinInfo(
        {},
        {},
        {}
    );
    
    // Add converter modules
    db["Attenuverter"] = {
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio), AudioPin("Amount Mod", 2, PinDataType::CV) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    };
    
    // Add lowercase alias for Attenuverter
    db["attenuverter"] = db["Attenuverter"];
    
    // Add Sample & Hold module
    db["s&h"] = ModulePinInfo(
        { 
            AudioPin("Signal In L", 0, PinDataType::Audio),
            AudioPin("Signal In R", 1, PinDataType::Audio),
            AudioPin("Trig In L", 2, PinDataType::Gate),
            AudioPin("Trig In R", 3, PinDataType::Gate),
            AudioPin("Threshold Mod", 4, PinDataType::CV),
            AudioPin("Edge Mod", 5, PinDataType::CV),
            AudioPin("Slew Mod", 6, PinDataType::CV)
        },
        { 
            AudioPin("Out L", 0, PinDataType::Audio),
            AudioPin("Out R", 1, PinDataType::Audio)
        },
        {}
    );
    
    db["MapRange"] = {
        { AudioPin("Raw In", 0, PinDataType::Raw) },
        { AudioPin("CV Out", 0, PinDataType::CV), AudioPin("Audio Out", 1, PinDataType::Audio) },
        { ModPin("Min In", "minIn", PinDataType::Raw), ModPin("Max In", "maxIn", PinDataType::Raw), ModPin("Min Out", "minOut", PinDataType::Raw), ModPin("Max Out", "maxOut", PinDataType::Raw) }
    };
    
    db["Lag Processor"] = {
        { AudioPin("Signal In", 0, PinDataType::CV), AudioPin("Rise Mod", 1, PinDataType::CV), AudioPin("Fall Mod", 2, PinDataType::CV) },
        { AudioPin("Smoothed Out", 0, PinDataType::CV) },
        {}
    };
    
    db["De-Crackle"] = {
        { AudioPin("In L", 0, PinDataType::Audio), AudioPin("In R", 1, PinDataType::Audio) },
        { AudioPin("Out L", 0, PinDataType::Audio), AudioPin("Out R", 1, PinDataType::Audio) },
        {}
    };

    // ADD MISSING MODULES FOR COLOR-CODED CHAINING

    db["Scope"] = ModulePinInfo(
        { AudioPin("In", 0, PinDataType::Audio) },
        { AudioPin("Out", 0, PinDataType::Audio) },
        {}
    );

    db["Logic"] = ModulePinInfo(
        { AudioPin("In A", 0, PinDataType::Gate), AudioPin("In B", 1, PinDataType::Gate) },
        {
            AudioPin("AND", 0, PinDataType::Gate),
            AudioPin("OR", 1, PinDataType::Gate),
            AudioPin("XOR", 2, PinDataType::Gate),
            AudioPin("NOT A", 3, PinDataType::Gate)
        },
        {}
    );

    db["ClockDivider"] = ModulePinInfo(
        { AudioPin("Clock In", 0, PinDataType::Gate), AudioPin("Reset", 1, PinDataType::Gate) },
        {
            AudioPin("/2", 0, PinDataType::Gate), AudioPin("/4", 1, PinDataType::Gate),
            AudioPin("/8", 2, PinDataType::Gate), AudioPin("x2", 3, PinDataType::Gate),
            AudioPin("x3", 4, PinDataType::Gate), AudioPin("x4", 5, PinDataType::Gate)
        },
        {}
    );

    db["Rate"] = ModulePinInfo(
        { AudioPin("Rate Mod", 0, PinDataType::CV) },
        { AudioPin("Out", 0, PinDataType::CV) },
        {}
    );

    // ADD REMAINING MISSING MODULES FROM CMAKE LISTS

    db["Math"] = ModulePinInfo(
        { AudioPin("In A", 0, PinDataType::CV), AudioPin("In B", 1, PinDataType::CV) },
        { AudioPin("Add", 0, PinDataType::CV), AudioPin("Subtract", 1, PinDataType::CV),
          AudioPin("Multiply", 2, PinDataType::CV), AudioPin("Divide", 3, PinDataType::CV) },
        {}
    );

    db["SequentialSwitch"] = ModulePinInfo(
        { AudioPin("CV In", 0, PinDataType::CV), AudioPin("Gate In", 1, PinDataType::Gate) },
        { AudioPin("Out", 0, PinDataType::CV) },
        {}
    );

    db["snapshot sequencer"] = ModulePinInfo(
        { AudioPin("Clock In", 0, PinDataType::Gate), AudioPin("Reset In", 1, PinDataType::Gate) },
        {}, // No audio outputs
        {}
    );

    db["midi cv"] = ModulePinInfo(
        {}, // No inputs - receives MIDI messages
        {
            AudioPin("Pitch", 0, PinDataType::CV),
            AudioPin("Gate", 1, PinDataType::Gate),
            AudioPin("Velocity", 2, PinDataType::CV),
            AudioPin("Mod Wheel", 3, PinDataType::CV),
            AudioPin("Pitch Bend", 4, PinDataType::CV),
            AudioPin("Aftertouch", 5, PinDataType::CV)
        },
        {}
    );

    // MIDI Family - New Modules with Correct Pin Types
    {
        // MIDI Faders: All outputs are CV (blue)
        db["midi faders"] = ModulePinInfo();
        for (int i = 0; i < 16; ++i)
            db["midi faders"].audioOuts.emplace_back("Fader " + juce::String(i+1), i, PinDataType::CV);

        // MIDI Knobs: All outputs are CV (blue)
        db["midi knobs"] = ModulePinInfo();
        for (int i = 0; i < 16; ++i)
            db["midi knobs"].audioOuts.emplace_back("Knob " + juce::String(i+1), i, PinDataType::CV);

        // MIDI Buttons: All outputs are Gate/Trigger (yellow)
        db["midi buttons"] = ModulePinInfo();
        for (int i = 0; i < 32; ++i)
            db["midi buttons"].audioOuts.emplace_back("Button " + juce::String(i+1), i, PinDataType::Gate);

        // MIDI Jog Wheel: Output is CV (blue)
        db["midi jog wheel"] = ModulePinInfo(
            {},
            { AudioPin("Value", 0, PinDataType::CV) },
            {}
        );
    }

    db["Debug"] = ModulePinInfo(
        { AudioPin("In", 0, PinDataType::Audio) },
        {}, // No outputs
        {}
    );

    db["InputDebug"] = ModulePinInfo(
        {}, // No inputs
        { AudioPin("Out", 0, PinDataType::Audio) },
        {}
    );

    // Tempo Clock
    db["tempo clock"] = ModulePinInfo(
        {
            AudioPin("BPM Mod", 0, PinDataType::CV),
            AudioPin("Tap", 1, PinDataType::Gate),
            AudioPin("Nudge+", 2, PinDataType::Gate),
            AudioPin("Nudge-", 3, PinDataType::Gate),
            AudioPin("Play", 4, PinDataType::Gate),
            AudioPin("Stop", 5, PinDataType::Gate),
            AudioPin("Reset", 6, PinDataType::Gate),
            AudioPin("Swing Mod", 7, PinDataType::CV)
        },
        {
            AudioPin("Clock", 0, PinDataType::Gate),
            AudioPin("Beat Trig", 1, PinDataType::Gate),
            AudioPin("Bar Trig", 2, PinDataType::Gate),
            AudioPin("Beat Gate", 3, PinDataType::Gate),
            AudioPin("Phase", 4, PinDataType::CV),
            AudioPin("BPM CV", 5, PinDataType::CV),
            AudioPin("Downbeat", 6, PinDataType::Gate)
        },
        {
            ModPin("BPM", "bpm_mod", PinDataType::CV),
            ModPin("Tap", "tap_mod", PinDataType::Gate),
            ModPin("Nudge+", "nudge_up_mod", PinDataType::Gate),
            ModPin("Nudge-", "nudge_down_mod", PinDataType::Gate),
            ModPin("Play", "play_mod", PinDataType::Gate),
            ModPin("Stop", "stop_mod", PinDataType::Gate),
            ModPin("Reset", "reset_mod", PinDataType::Gate),
            ModPin("Swing", "swing_mod", PinDataType::CV)
        }
    );

}





================================================================================
FILE: juce\Source\preset_creator\PresetManager.h
================================================================================


#pragma once
#include <juce_core/juce_core.h>
#include <vector>
#include <memory>

class PresetManager
{
public:
    struct PresetInfo
    {
        juce::String name;
        juce::File file;
        juce::String description;
        juce::StringArray tags;
    };

    struct DirectoryNode
    {
        juce::String name;
        juce::File directory;
        std::vector<PresetInfo> presets;
        std::vector<std::unique_ptr<DirectoryNode>> subdirectories;
    };

    PresetManager() : rootNode(std::make_unique<DirectoryNode>()) {}

    DirectoryNode* getRootNode() const { return rootNode.get(); }

    void scanDirectory(const juce::File& directory)
    {
        rootNode->name = directory.getFileName();
        rootNode->directory = directory;
        rootNode->presets.clear();
        rootNode->subdirectories.clear();
        scanRecursively(rootNode.get());
    }

    void clearCache()
    {
        rootNode = std::make_unique<DirectoryNode>();
    }

private:
    void scanRecursively(DirectoryNode* node)
    {
        if (!node->directory.isDirectory()) return;

        for (const auto& entry : juce::RangedDirectoryIterator(node->directory, false, "*", juce::File::findFilesAndDirectories))
        {
            const auto& file = entry.getFile();
            if (file.isDirectory())
            {
                auto subdir = std::make_unique<DirectoryNode>();
                subdir->name = file.getFileName();
                subdir->directory = file;
                scanRecursively(subdir.get());
                node->subdirectories.push_back(std::move(subdir));
            }
            else if (file.hasFileExtension(".xml"))
            {
                PresetInfo info;
                info.name = file.getFileNameWithoutExtension();
                info.file = file;
                if (auto xml = juce::parseXML(file))
                {
                    info.description = xml->getStringAttribute("description", "");
                    info.tags = juce::StringArray::fromTokens(xml->getStringAttribute("tags", ""), ",", "");
                }
                node->presets.push_back(info);
            }
        }
    }

    std::unique_ptr<DirectoryNode> rootNode;
};


================================================================================
FILE: juce\Source\preset_creator\PresetManager.cpp
================================================================================


#include "PresetManager.h"

PresetManager::PresetManager()
{
}

void PresetManager::scanDirectory(const juce::File& directory)
{
    if (!directory.exists() || !directory.isDirectory())
        return;
    
    // Find all .xml preset files
    juce::Array<juce::File> presetFiles;
    directory.findChildFiles(presetFiles, juce::File::findFiles, false, "*.xml");
    
    for (const auto& file : presetFiles)
    {
        PresetInfo info = extractMetadata(file);
        m_presets.push_back(info);
    }
    
    juce::Logger::writeToLog("[PresetManager] Scanned " + juce::String(m_presets.size()) + 
                            " presets from: " + directory.getFullPathName());
}

std::vector<PresetManager::PresetInfo> PresetManager::searchPresets(const juce::String& searchTerm) const
{
    std::vector<PresetInfo> results;
    
    for (const auto& preset : m_presets)
    {
        if (preset.matchesSearch(searchTerm))
            results.push_back(preset);
    }
    
    return results;
}

std::vector<PresetManager::PresetInfo> PresetManager::getPresetsByTag(const juce::String& tag) const
{
    std::vector<PresetInfo> results;
    
    for (const auto& preset : m_presets)
    {
        if (preset.tags.contains(tag))
            results.push_back(preset);
    }
    
    return results;
}

juce::StringArray PresetManager::getAllTags() const
{
    juce::StringArray allTags;
    
    for (const auto& preset : m_presets)
    {
        for (const auto& tag : preset.tags)
        {
            if (!allTags.contains(tag))
                allTags.add(tag);
        }
    }
    
    allTags.sort(true);
    return allTags;
}

juce::XmlElement* PresetManager::loadPreset(const juce::File& file)
{
    if (!file.exists())
        return nullptr;
    
    return juce::XmlDocument::parse(file).release();
}

bool PresetManager::savePreset(const juce::File& file, 
                               const juce::XmlElement& presetData,
                               const juce::String& description,
                               const juce::StringArray& tags)
{
    // Create a copy of the preset data and add metadata
    std::unique_ptr<juce::XmlElement> presetCopy(new juce::XmlElement(presetData));
    
    // Add metadata properties to the root element
    if (description.isNotEmpty())
        presetCopy->setAttribute("description", description);
    
    if (!tags.isEmpty())
        presetCopy->setAttribute("tags", tags.joinIntoString(","));
    
    // Write to file
    if (presetCopy->writeTo(file))
    {
        // Update cache
        PresetInfo info = extractMetadata(file);
        
        // Remove old entry if exists
        m_presets.erase(std::remove_if(m_presets.begin(), m_presets.end(),
            [&file](const PresetInfo& p) { return p.file == file; }), m_presets.end());
        
        // Add new entry
        m_presets.push_back(info);
        
        return true;
    }
    
    return false;
}

PresetManager::PresetInfo PresetManager::extractMetadata(const juce::File& file)
{
    PresetInfo info;
    info.file = file;
    info.name = file.getFileNameWithoutExtension();
    info.lastModified = file.getLastModificationTime();
    
    // Parse the XML to extract metadata
    std::unique_ptr<juce::XmlElement> xml = juce::XmlDocument::parse(file);
    
    if (xml != nullptr)
    {
        // Extract description
        info.description = xml->getStringAttribute("description", "");
        
        // Extract tags
        juce::String tagsStr = xml->getStringAttribute("tags", "");
        if (tagsStr.isNotEmpty())
        {
            info.tags.addTokens(tagsStr, ",", "");
            info.tags.trim();
        }
    }
    
    return info;
}



================================================================================
FILE: juce\Source\preset_creator\SampleManager.h
================================================================================


#pragma once
#include <juce_core/juce_core.h>
#include <juce_audio_formats/juce_audio_formats.h>
#include <vector>
#include <memory>

class SampleManager
{
public:
    struct SampleInfo
    {
        juce::String name;
        juce::File file;
        double durationSeconds;
        int sampleRate;
        int numChannels;
    };

    struct DirectoryNode
    {
        juce::String name;
        juce::File directory;
        std::vector<SampleInfo> samples;
        std::vector<std::unique_ptr<DirectoryNode>> subdirectories;
    };

    SampleManager() : rootNode(std::make_unique<DirectoryNode>())
    {
        formatManager.registerBasicFormats();
    }

    DirectoryNode* getRootNode() const { return rootNode.get(); }

    void scanDirectory(const juce::File& directory)
    {
        rootNode->name = directory.getFileName();
        rootNode->directory = directory;
        rootNode->samples.clear();
        rootNode->subdirectories.clear();
        scanRecursively(rootNode.get());
    }

    void clearCache()
    {
        rootNode = std::make_unique<DirectoryNode>();
    }

private:
    void scanRecursively(DirectoryNode* node)
    {
        if (!node->directory.isDirectory()) return;

        for (const auto& entry : juce::RangedDirectoryIterator(node->directory, false, "*", juce::File::findFilesAndDirectories))
        {
            const auto& file = entry.getFile();
            if (file.isDirectory())
            {
                auto subdir = std::make_unique<DirectoryNode>();
                subdir->name = file.getFileName();
                subdir->directory = file;
                scanRecursively(subdir.get());
                node->subdirectories.push_back(std::move(subdir));
            }
            else if (file.hasFileExtension(".wav") || file.hasFileExtension(".aif") || file.hasFileExtension(".flac") || file.hasFileExtension(".mp3") || file.hasFileExtension(".ogg"))
            {
                SampleInfo info;
                info.name = file.getFileNameWithoutExtension();
                info.file = file;
                if (auto* reader = formatManager.createReaderFor(file))
                {
                    info.durationSeconds = reader->lengthInSamples / reader->sampleRate;
                    info.sampleRate = (int)reader->sampleRate;
                    info.numChannels = (int)reader->numChannels;
                    delete reader;
                }
                node->samples.push_back(info);
            }
        }
    }
    
    juce::AudioFormatManager formatManager;
    std::unique_ptr<DirectoryNode> rootNode;
};


================================================================================
FILE: juce\Source\preset_creator\SampleManager.cpp
================================================================================


#include "SampleManager.h"

SampleManager::SampleManager()
{
    // Register common audio formats
    m_formatManager.registerBasicFormats();
}

void SampleManager::scanDirectory(const juce::File& directory, bool recursive)
{
    if (!directory.exists() || !directory.isDirectory())
        return;
    
    // Supported audio file extensions
    juce::String wildcardPattern = "*.wav;*.mp3;*.aif;*.aiff;*.flac;*.ogg";
    
    // Find all audio files
    juce::Array<juce::File> audioFiles;
    directory.findChildFiles(audioFiles, 
                             juce::File::findFiles, 
                             recursive, 
                             wildcardPattern);
    
    for (const auto& file : audioFiles)
    {
        SampleInfo info = extractMetadata(file);
        if (info.sampleRate > 0) // Valid audio file
            m_samples.push_back(info);
    }
    
    juce::Logger::writeToLog("[SampleManager] Scanned " + juce::String(m_samples.size()) + 
                            " samples from: " + directory.getFullPathName());
}

std::vector<SampleManager::SampleInfo> SampleManager::searchSamples(const juce::String& searchTerm) const
{
    std::vector<SampleInfo> results;
    
    for (const auto& sample : m_samples)
    {
        if (sample.matchesSearch(searchTerm))
            results.push_back(sample);
    }
    
    return results;
}

SampleManager::SampleInfo SampleManager::extractMetadata(const juce::File& file)
{
    SampleInfo info;
    info.file = file;
    info.name = file.getFileNameWithoutExtension();
    info.lastModified = file.getLastModificationTime();
    
    // Try to read audio file metadata
    std::unique_ptr<juce::AudioFormatReader> reader(m_formatManager.createReaderFor(file));
    
    if (reader != nullptr)
    {
        info.sampleRate = static_cast<int>(reader->sampleRate);
        info.numChannels = static_cast<int>(reader->numChannels);
        info.lengthInSamples = reader->lengthInSamples;
        
        if (info.sampleRate > 0)
            info.durationSeconds = info.lengthInSamples / static_cast<double>(info.sampleRate);
    }
    
    return info;
}



================================================================================
FILE: juce\Source\preset_creator\PresetCreatorApplication.h
================================================================================


#pragma once

#include <juce_gui_extra/juce_gui_extra.h>
#include <juce_audio_devices/juce_audio_devices.h>
#include <juce_audio_processors/juce_audio_processors.h>

class PresetCreatorApplication : public juce::JUCEApplication
{
public:
    const juce::String getApplicationName() override { return "Preset Creator"; }
    const juce::String getApplicationVersion() override { return "0.1.0"; }
    
    // Accessors for shared components
    juce::AudioDeviceManager& getAudioDeviceManager() { return audioDeviceManager; }
    juce::AudioPluginFormatManager& getPluginFormatManager() { return pluginFormatManager; }
    juce::KnownPluginList& getKnownPluginList() { return knownPluginList; }
    
    // Static getter for global access
    static PresetCreatorApplication& getApp()
    {
        return *dynamic_cast<PresetCreatorApplication*>(juce::JUCEApplication::getInstance());
    }
    
    juce::PropertiesFile* getProperties() { return appProperties.get(); }
    
    void initialise(const juce::String&) override;
    void shutdown() override;

    class MainWindow : public juce::DocumentWindow
    {
    public:
        MainWindow(juce::String name, 
                   juce::AudioDeviceManager& adm,
                   juce::AudioPluginFormatManager& fm,
                   juce::KnownPluginList& kl);
        void closeButtonPressed() override { juce::JUCEApplication::getInstance()->systemRequestedQuit(); }
        
    private:
        juce::AudioDeviceManager& deviceManager;
        juce::AudioPluginFormatManager& pluginFormatManager;
        juce::KnownPluginList& knownPluginList;
    };

private:
    // Shared components for the entire application
    juce::AudioDeviceManager audioDeviceManager;
    juce::AudioPluginFormatManager pluginFormatManager;
    juce::KnownPluginList knownPluginList;
    juce::File pluginScanListFile;
    
    std::unique_ptr<MainWindow> mainWindow;
    std::unique_ptr<juce::FileLogger> fileLogger;
    std::unique_ptr<juce::PropertiesFile> appProperties;
};



================================================================================
FILE: juce\Source\preset_creator\PresetCreatorComponent.h
================================================================================


#pragma once

#include <juce_gui_extra/juce_gui_extra.h>
#include <juce_audio_devices/juce_audio_devices.h>
#include <juce_audio_processors/juce_audio_processors.h>
#include <juce_audio_utils/juce_audio_utils.h>
#include "../audio/graph/ModularSynthProcessor.h"

class PresetCreatorComponent : public juce::Component,
                               private juce::Button::Listener,
                               private juce::Timer
{
public:
    PresetCreatorComponent(juce::AudioDeviceManager& deviceManager,
                           juce::AudioPluginFormatManager& formatManager,
                           juce::KnownPluginList& knownPluginList);
    ~PresetCreatorComponent() override;

    void paint (juce::Graphics&) override;
    void resized() override;
    
    // Unified playback control (audio engine + transport)
    void setMasterPlayState(bool shouldBePlaying);
    
    bool keyPressed (const juce::KeyPress& key) override;
    bool keyStateChanged (bool isKeyDown) override;
    void visibilityChanged() override;

    // ADD: Public function to show audio settings dialog
    void showAudioSettingsDialog();
    
    // Get MIDI activity indicator state
    int getMidiActivityFrames() const { return midiActivityFrames; }

private:
    int midiActivityFrames = 0; // For MIDI activity indicator

    void setWindowFileName(const juce::String& fileName);
    void buttonClicked (juce::Button*) override;
    void timerCallback() override;
    void refreshModulesList();
    void doConnect();
    void doSave();
    void doLoad();
    void startAudition();
    void stopAudition();

    juce::TextButton btnAddVCO { "Add VCO" };
    juce::TextButton btnAddVCF { "Add VCF" };
    juce::TextButton btnAddVCA { "Add VCA" };
    juce::TextButton btnConnect { "Connect" };
    juce::TextButton btnSave { "Save Preset" };
    juce::TextButton btnLoad { "Load Preset" };

    juce::ListBox listModules { "Modules", nullptr };
    struct ModulesModel : public juce::ListBoxModel
    {
        juce::StringArray rows;
        int getNumRows() override { return rows.size(); }
        void paintListBoxItem (int row, juce::Graphics& g, int w, int h, bool sel) override
        {
            g.fillAll (sel ? juce::Colours::dimgrey : juce::Colours::transparentBlack);
            g.setColour (juce::Colours::white);
            if (row >= 0 && row < rows.size()) g.drawText (rows[row], 6, 0, w - 12, h, juce::Justification::centredLeft);
        }
    } modulesModel;

    juce::ComboBox cbSrc, cbDst, cbSrcChan, cbDstChan;
    juce::TextEditor log;
    std::unique_ptr<juce::FileLogger> fileLogger;
    std::unique_ptr<class ImGuiNodeEditorComponent> editor;

    std::unique_ptr<ModularSynthProcessor> synth;
    double sampleRate { 48000.0 };
    int blockSize { 512 };

    std::unique_ptr<juce::FileChooser> saveChooser;
    std::unique_ptr<juce::FileChooser> loadChooser;

    // Unified spacebar control (toggle and momentary gate mode)
    juce::uint64 spacebarDownTime { 0 };
    bool wasLongPress { false };
    static constexpr int longPressThresholdMs = 250;

    juce::AudioDeviceManager& deviceManager;
    juce::AudioPluginFormatManager& pluginFormatManager;
    juce::KnownPluginList& knownPluginList;
    juce::AudioProcessorPlayer processorPlayer;
    bool auditioning { false };
};




================================================================================
FILE: juce\Source\preset_creator\PresetCreatorComponent.cpp
================================================================================


// RtLogger flush integrated via timer in component
#include "PresetCreatorComponent.h"
#include "ImGuiNodeEditorComponent.h"
#include "../utils/RtLogger.h"

PresetCreatorComponent::PresetCreatorComponent(juce::AudioDeviceManager& adm,
                                               juce::AudioPluginFormatManager& fm,
                                               juce::KnownPluginList& kl)
    : deviceManager(adm),
      pluginFormatManager(fm),
      knownPluginList(kl)
{
    juce::Logger::writeToLog("PresetCreatorComponent constructor starting...");
    addAndMakeVisible (log);

    // Replace list/combos UI with ImGui node editor
    juce::Logger::writeToLog("Attempting to create ImGuiNodeEditorComponent...");
    editor.reset (new ImGuiNodeEditorComponent(deviceManager));
    juce::Logger::writeToLog("ImGuiNodeEditorComponent created.");
    editor->onShowAudioSettings = [this]() { this->showAudioSettingsDialog(); };
    addAndMakeVisible (editor.get());
    log.setMultiLine (true); log.setReadOnly (true);

    juce::Logger::writeToLog("Creating ModularSynthProcessor...");
    synth = std::make_unique<ModularSynthProcessor>();
    
    // --- THIS IS THE FIX ---
    // Set the managers immediately so the synth is ready for state restoration.
    synth->setPluginFormatManager(&pluginFormatManager);
    synth->setKnownPluginList(&knownPluginList);
    juce::Logger::writeToLog("Plugin managers set on ModularSynthProcessor.");
    // --- END OF FIX ---
    
    juce::Logger::writeToLog("Setting model on editor...");
    if (editor != nullptr)
        editor->setModel (synth.get());
    synth->prepareToPlay (sampleRate, blockSize);

    // Use the shared AudioDeviceManager settings
    if (auto* dev = deviceManager.getCurrentAudioDevice())
    {
        sampleRate = dev->getCurrentSampleRate();
        blockSize = dev->getCurrentBufferSizeSamples();
        synth->prepareToPlay (sampleRate, blockSize);
        juce::Logger::writeToLog ("Audio device: " + dev->getName() +
                                   ", sr=" + juce::String (sampleRate) +
                                   ", bs=" + juce::String (blockSize));
    }
    // AudioProcessorPlayer lives in juce_audio_utils namespace path include; type is juce::AudioSourcePlayer for routing
    // Use AudioProcessorPlayer via juce_audio_utils module
    processorPlayer.setProcessor (synth.get());
    
    // --- THIS IS THE DEFINITIVE FIX ---
    // 1. Get the list of available MIDI input devices.
    auto midiInputs = juce::MidiInput::getAvailableDevices();
    if (!midiInputs.isEmpty())
    {
        // 2. Get the name of the first (default) MIDI input device.
        juce::String defaultDeviceName = midiInputs[0].name;

        // 3. Tell the device manager to enable this device.
        deviceManager.setMidiInputDeviceEnabled(defaultDeviceName, true);

        // 4. Register our processorPlayer to receive callbacks from this device.
        // The AudioProcessorPlayer will then forward the MIDI to the synth's processBlock.
        deviceManager.addMidiInputDeviceCallback(defaultDeviceName, &processorPlayer);
        juce::Logger::writeToLog("[MIDI] Registered processorPlayer as callback for: " + defaultDeviceName);
    }
    else
    {
        juce::Logger::writeToLog("[MIDI] No MIDI input devices found.");
    }
    // --- END OF FIX ---
    
    setWantsKeyboardFocus (true);

    // Setup FileLogger at the same path the user checks: <exe>/juce/logs/preset_creator_*.log
    {
        auto exeDir = juce::File::getSpecialLocation (juce::File::currentExecutableFile).getParentDirectory();
        auto juceLogsDir = exeDir.getChildFile ("juce").getChildFile ("logs");
        juceLogsDir.createDirectory();
        auto logName = juce::String ("preset_creator_") + juce::Time::getCurrentTime().formatted ("%Y-%m-%d_%H-%M-%S") + ".log";
        auto logFile = juceLogsDir.getChildFile (logName);
        fileLogger = std::make_unique<juce::FileLogger> (logFile, "Preset Creator Session", 10 * 1024 * 1024);
        if (fileLogger != nullptr)
            juce::Logger::setCurrentLogger (fileLogger.get());
        juce::Logger::writeToLog ("PresetCreator log file: " + logFile.getFullPathName());
    }
    // Init RT logger and start periodic flush
    RtLogger::init (2048, 256);
    
    // NOTE: Audio Settings button removed - now using menu integration
    
    juce::Logger::writeToLog ("PresetCreator constructed");
    startTimerHz (30);
    
    setWindowFileName({}); // Set the default title on startup
}

// ADD: Implementation of the audio settings dialog function
void PresetCreatorComponent::showAudioSettingsDialog()
{
    auto* component = new juce::AudioDeviceSelectorComponent(
        deviceManager, 0, 256, 0, 256, true, true, false, false);
    
    component->setSize(500, 450);

    juce::DialogWindow::LaunchOptions o;
    o.content.setOwned(component);
    o.dialogTitle                   = "Audio Settings";
    o.dialogBackgroundColour        = juce::Colours::darkgrey;
    o.escapeKeyTriggersCloseButton  = true;
    o.resizable                     = false;
    o.launchAsync();
}

void PresetCreatorComponent::setWindowFileName(const juce::String& fileName)
{
    // Find the parent window of this component
    if (auto* window = findParentComponentOfClass<juce::DocumentWindow>())
    {
        juce::String newTitle = "Preset Creator"; // The default title
        if (fileName.isNotEmpty())
        {
            newTitle += " - " + fileName; // Append the filename if one is provided
        }
        window->setName(newTitle);
    }
}

void PresetCreatorComponent::paint (juce::Graphics& g)
{
    g.fillAll (juce::Colours::black);
}

void PresetCreatorComponent::resized()
{
    for (auto* c : getChildren())
        if (dynamic_cast<ImGuiNodeEditorComponent*>(c) != nullptr)
            c->setBounds (0, 0, getWidth(), getHeight());
    
    // Audio Settings button removed - now using menu integration
    
    // Keep log overlay minimal for now
    log.setBounds (10, getHeight() - 160, getWidth() - 20, 150);
}

void PresetCreatorComponent::setMasterPlayState(bool shouldBePlaying)
{
    if (synth == nullptr)
        return;

    // 1. Control the Audio Engine (start/stop pulling audio)
    if (shouldBePlaying)
    {
        if (!auditioning)
        {
            deviceManager.addAudioCallback(&processorPlayer);
            auditioning = true;
        }
    }
    else
    {
        if (auditioning)
        {
            deviceManager.removeAudioCallback(&processorPlayer);
            auditioning = false;
        }
    }

    // 2. Control the synth's internal transport clock
    synth->setPlaying(shouldBePlaying);
}

PresetCreatorComponent::~PresetCreatorComponent()
{
    // ADD THIS BLOCK
    auto midiInputs = juce::MidiInput::getAvailableDevices();
    if (!midiInputs.isEmpty())
    {
        deviceManager.removeMidiInputDeviceCallback(midiInputs[0].name, &processorPlayer);
    }
    // END OF BLOCK

    stopAudition();
    processorPlayer.setProcessor (nullptr);
    juce::Logger::writeToLog ("PresetCreator destroyed");
    RtLogger::shutdown();
    juce::Logger::setCurrentLogger (nullptr);
}

void PresetCreatorComponent::buttonClicked (juce::Button* b)
{
    if (b == &btnAddVCO) { synth->addModule ("VCO"); synth->commitChanges(); refreshModulesList(); }
    else if (b == &btnAddVCF) { synth->addModule ("VCF"); synth->commitChanges(); refreshModulesList(); }
    else if (b == &btnAddVCA) { synth->addModule ("VCA"); synth->commitChanges(); refreshModulesList(); }
    else if (b == &btnConnect) { doConnect(); }
    else if (b == &btnSave) { doSave(); }
    else if (b == &btnLoad) { doLoad(); }
}

void PresetCreatorComponent::refreshModulesList()
{
    modulesModel.rows.clear();
    cbSrc.clear(); cbDst.clear();
    int idx = 1;
    for (auto [logicalId, type] : synth->getModulesInfo())
    {
        modulesModel.rows.add (juce::String ((int) logicalId) + " - " + type);
        cbSrc.addItem (juce::String ((int) logicalId) + " - " + type, idx);
        cbDst.addItem (juce::String ((int) logicalId) + " - " + type, idx);
        ++idx;
    }
    cbDst.addItem ("Output", 9999);
    listModules.updateContent();
}

void PresetCreatorComponent::doConnect()
{
    int selSrc = cbSrc.getSelectedId();
    int selDst = cbDst.getSelectedId();
    if (selSrc <= 0 || selDst <= 0) { log.insertTextAtCaret ("Select src/dst first\n"); return; }

    // Extract logical IDs from combo texts
    auto parseId = [] (const juce::String& s) -> juce::uint32 { return (juce::uint32) s.upToFirstOccurrenceOf(" ", false, false).getIntValue(); };
    juce::uint32 srcLogical = parseId (cbSrc.getText());
    juce::uint32 dstLogical = parseId (cbDst.getText());

    auto srcNode = synth->getNodeIdForLogical (srcLogical);
    juce::AudioProcessorGraph::NodeID dstNode;
    if (cbDst.getSelectedId() == 9999)
        dstNode = synth->getOutputNodeID();
    else
        dstNode = synth->getNodeIdForLogical (dstLogical);
    const int srcChan = cbSrcChan.getSelectedId() - 1;
    const int dstChan = cbDstChan.getSelectedId() - 1;
    if (srcNode.uid != 0 && dstNode.uid != 0)
    {
        if (synth->connect (srcNode, srcChan, dstNode, dstChan))
        {
            log.insertTextAtCaret ("Connected\n");
            synth->commitChanges();
        }
        else
        {
            log.insertTextAtCaret ("Connect failed\n");
        }
    }
}

void PresetCreatorComponent::doSave()
{
    // Default to project-root/Synth_presets
    juce::File startDir;
    {
        auto exeDir = juce::File::getSpecialLocation(juce::File::currentExecutableFile).getParentDirectory();
        auto dir = exeDir;
        for (int i = 0; i < 8 && dir.exists(); ++i)
        {
            auto candidate = dir.getSiblingFile("Synth_presets");
            if (candidate.exists() && candidate.isDirectory()) { startDir = candidate; break; }
            dir = dir.getParentDirectory();
        }
    }
    if (! startDir.exists()) startDir = juce::File();
    saveChooser = std::make_unique<juce::FileChooser> ("Save preset", startDir, "*.xml");
    saveChooser->launchAsync (juce::FileBrowserComponent::saveMode | juce::FileBrowserComponent::canSelectFiles,
        [this] (const juce::FileChooser& fc)
    {
        auto f = fc.getResult();
        if (f.exists() || f.getParentDirectory().exists())
        {
            // Ensure directory exists when saving into default folder
            f.getParentDirectory().createDirectory();
            
            // --- FIX: Temporarily unmute nodes to save original connections ---
            // When nodes are muted, their connections are replaced with bypass routing.
            // We must save the ORIGINAL connections, not the bypass connections.
            
            // 1. Get a list of all currently muted nodes from the editor
            std::vector<juce::uint32> currentlyMutedNodes;
            if (editor)
            {
                for (const auto& pair : editor->mutedNodeStates)
                {
                    currentlyMutedNodes.push_back(pair.first);
                }
                
                // 2. Temporarily UNMUTE all of them to restore the original connections
                for (juce::uint32 lid : currentlyMutedNodes)
                {
                    editor->unmuteNode(lid);
                }
            }
            
            // 3. CRITICAL: Force the synth to apply these connection changes immediately
            if (synth)
            {
                synth->commitChanges();
            }
            // At this point, the synth graph is in its "true", unmuted state
            
            // 4. NOW get the state - this will save the correct, original connections
            juce::MemoryBlock mb;
            synth->getStateInformation (mb);
            auto xml = juce::XmlDocument::parse (mb.toString());
            if (! xml) return;
            
            // 5. IMMEDIATELY RE-MUTE the nodes to return the editor to its visible state
            if (editor)
            {
                for (juce::uint32 lid : currentlyMutedNodes)
                {
                    editor->muteNode(lid);
                }
            }
            
            // 6. CRITICAL: Force the synth to apply the re-mute changes immediately
            if (synth)
            {
                synth->commitChanges();
            }
            // The synth graph is now back to its bypassed state for audio processing
            // --- END OF FIX ---
            
            juce::ValueTree presetVT = juce::ValueTree::fromXml (*xml);
            // Attach UI state as child (which correctly contains the "muted" flags)
            if (editor)
            {
                juce::ValueTree ui = editor->getUiValueTree();
                presetVT.addChild (ui, -1, nullptr);
            }
            // Write
            f.replaceWithText (presetVT.createXml()->toString());
            log.insertTextAtCaret ("Saved: " + f.getFullPathName() + "\n");
            
            setWindowFileName(f.getFileName()); // Update title bar with filename
        }
    });
}

void PresetCreatorComponent::doLoad()
{
    // Default to project-root/Synth_presets
    juce::File startDir;
    {
        auto exeDir = juce::File::getSpecialLocation(juce::File::currentExecutableFile).getParentDirectory();
        auto dir = exeDir;
        for (int i = 0; i < 8 && dir.exists(); ++i)
        {
            auto candidate = dir.getSiblingFile("Synth_presets");
            if (candidate.exists() && candidate.isDirectory()) { startDir = candidate; break; }
            dir = dir.getParentDirectory();
        }
    }
    if (! startDir.exists()) startDir = juce::File();
    loadChooser = std::make_unique<juce::FileChooser> ("Load preset", startDir, "*.xml");
    loadChooser->launchAsync (juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectFiles,
        [this] (const juce::FileChooser& fc) noexcept
    {
        try {
            auto f = fc.getResult();
            if (f.existsAsFile())
            {
                juce::MemoryBlock mb;
                f.loadFileAsData (mb);
                // First set the synth state
                synth->setStateInformation (mb.getData(), (int) mb.getSize());
                // Then parse and queue UI state for next frame (ensures editor exists and nodes are created)
                if (editor)
                {
                    if (auto xml = juce::XmlDocument::parse (mb.toString()))
                    {
                        auto vt = juce::ValueTree::fromXml (*xml);
                        auto ui = vt.getChildWithName ("NodeEditorUI");
                        if (ui.isValid())
                            editor->applyUiValueTreeNow (ui);
                    }
                }
                refreshModulesList();
                log.insertTextAtCaret ("Loaded: " + f.getFullPathName() + "\n");
                
                setWindowFileName(f.getFileName()); // Update title bar with filename
            }
        } catch (...) {
            juce::Logger::writeToLog ("[PresetCreator][FATAL] Exception in doLoad callback");
        }
    });
}

bool PresetCreatorComponent::keyPressed (const juce::KeyPress& key)
{
    if (key.getKeyCode() == juce::KeyPress::spaceKey)
    {
        if (spacebarDownTime == 0) // Only record time on the initial press
        {
            spacebarDownTime = juce::Time::getMillisecondCounter();
            wasLongPress = false;
        }
        return true;
    }
    return false;
}

bool PresetCreatorComponent::keyStateChanged (bool isKeyDown)
{
    juce::ignoreUnused (isKeyDown);

    if (!juce::KeyPress::isKeyCurrentlyDown(juce::KeyPress::spaceKey))
    {
        if (spacebarDownTime != 0) // Key was just released
        {
            auto pressDuration = juce::Time::getMillisecondCounter() - spacebarDownTime;
            if (pressDuration < longPressThresholdMs && !wasLongPress)
            {
                // SHORT PRESS (TOGGLE)
                if (synth)
                {
                    const bool isCurrentlyPlaying = synth->getTransportState().isPlaying;
                    setMasterPlayState(!isCurrentlyPlaying); // Use the unified function
                }
            }
            // If it was a long press, the timer callback will handle stopping.
        }
        spacebarDownTime = 0; // Reset for next press
    }
    return false;
}

void PresetCreatorComponent::visibilityChanged()
{
    juce::Logger::writeToLog (juce::String ("Component visible? ") + (isShowing() ? "yes" : "no"));
}

void PresetCreatorComponent::startAudition()
{
    if (auditioning) return;
    deviceManager.addAudioCallback (&processorPlayer);
    auditioning = true;
    log.insertTextAtCaret ("[Audition] Start (hold space)\n");
}

void PresetCreatorComponent::stopAudition()
{
    if (! auditioning) return;
    deviceManager.removeAudioCallback (&processorPlayer);
    auditioning = false;
    log.insertTextAtCaret ("[Audition] Stop\n");
}

void PresetCreatorComponent::timerCallback()
{
    RtLogger::flushToFileLogger();
    
    // Check for MIDI activity from the synth
    if (synth != nullptr && synth->hasMidiActivity())
        midiActivityFrames = 30;
    
    // Update MIDI activity indicator in editor
    if (editor != nullptr)
        editor->setMidiActivityFrames(midiActivityFrames);
    
    if (synth != nullptr)
    {
        // Check for long press activation
        if (spacebarDownTime != 0 && !wasLongPress)
        {
            auto pressDuration = juce::Time::getMillisecondCounter() - spacebarDownTime;
            if (pressDuration >= longPressThresholdMs)
            {
                wasLongPress = true;
                setMasterPlayState(true); // Use the unified function
            }
        }
        
        // Check for long press release
        if (wasLongPress && !juce::KeyPress::isKeyCurrentlyDown(juce::KeyPress::spaceKey))
        {
            setMasterPlayState(false); // Use the unified function
            wasLongPress = false;
            spacebarDownTime = 0;
        }
    }

    static int counter = 0;
    if ((++counter % 60) == 0)
        juce::Logger::writeToLog ("[Heartbeat] UI alive");
}


================================================================================
FILE: juce\CMakeLists.txt
================================================================================


cmake_minimum_required(VERSION 3.22)
project(ColliderAudioEngine VERSION 0.1.0)

# --- TTS Integration (Piper) ---

# 1. Set paths to pre-built Piper and ONNX Runtime
set(PIPER_DIR "${CMAKE_SOURCE_DIR}/../vendor/piper/piper" CACHE PATH "Path to Piper TTS")
set(ONNXRUNTIME_DIR "${CMAKE_SOURCE_DIR}/../vendor/onnxruntime" CACHE PATH "Path to ONNX Runtime")

if(NOT EXISTS "${PIPER_DIR}")
    message(WARNING "Piper TTS not found at ${PIPER_DIR}. TTS features will be limited.")
endif()

if(NOT EXISTS "${ONNXRUNTIME_DIR}")
    message(WARNING "ONNX Runtime not found at ${ONNXRUNTIME_DIR}. TTS features will be limited.")
endif()

# 2. Add SoundTouch library
set(SOUNDTOUCH_SOURCE_DIR "${CMAKE_SOURCE_DIR}/../soundtouch/source")
add_library(soundtouch STATIC
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/AAFilter.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/BPMDetect.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/FIFOSampleBuffer.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/FIRFilter.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/InterpolateCubic.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/InterpolateLinear.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/InterpolateShannon.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/PeakFinder.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/RateTransposer.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/SoundTouch.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/TDStretch.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/cpu_detect_x86.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/mmx_optimized.cpp
    ${SOUNDTOUCH_SOURCE_DIR}/SoundTouch/sse_optimized.cpp
)
target_include_directories(soundtouch PUBLIC 
    ${CMAKE_SOURCE_DIR}/../soundtouch/include
    ${CMAKE_SOURCE_DIR}/../soundtouch/source/SoundTouch
)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

include(FetchContent)

# ==============================================================================
# Third-Party Dependencies (Fetch Only)
# ==============================================================================

FetchContent_Declare(JUCE
    GIT_REPOSITORY https://github.com/juce-framework/JUCE.git
    GIT_TAG 7.0.9
)
set(JUCE_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
set(JUCE_BUILD_EXTRAS OFF CACHE BOOL "" FORCE)
FetchContent_MakeAvailable(JUCE)

FetchContent_Declare(imgui_fc
    GIT_REPOSITORY https://github.com/ocornut/imgui.git
    GIT_TAG v1.92.0
)
FetchContent_MakeAvailable(imgui_fc)

# imnodes uses find_package(imgui) in its CMake; build as sources instead
FetchContent_Declare(imnodes_fc
    GIT_REPOSITORY https://github.com/Nelarius/imnodes.git
    GIT_TAG b2ec254ce576ac3d42dfb7aef61deadbff8e7211
)
FetchContent_GetProperties(imnodes_fc)
if(NOT imnodes_fc_POPULATED)
  FetchContent_Populate(imnodes_fc)
endif()

# imgui_juce backend (dedicated JUCE bridge for ImGui)
FetchContent_Declare(imgui_juce_fc
    GIT_REPOSITORY https://github.com/Krasjet/imgui_juce.git
    GIT_TAG master
)
FetchContent_MakeAvailable(imgui_juce_fc)

# --------------------------------------------------------------
# Rubber Band (optional, real-time timestretcher/pitch-shifter)
# --------------------------------------------------------------
set(USE_RUBBERBAND ON CACHE BOOL "Enable Rubber Band time/pitch processing")
if (USE_RUBBERBAND)
  FetchContent_Declare(rubberband_fc
    GIT_REPOSITORY https://github.com/breakfastquay/rubberband.git
    GIT_TAG v3.3.0
  )
  FetchContent_MakeAvailable(rubberband_fc)
  # Build from single-file amalgamation to avoid external link issues
  # Use official amalgamated single-file build (works cross-platform)
  add_library(rubberband_single STATIC
    ${rubberband_fc_SOURCE_DIR}/single/RubberBandSingle.cpp
  )
  target_include_directories(rubberband_single PUBLIC
    ${rubberband_fc_SOURCE_DIR}
    ${rubberband_fc_SOURCE_DIR}/single
  )
  target_compile_definitions(rubberband_single PUBLIC
    NOMINMAX
    _USE_MATH_DEFINES
    RUBBERBAND_USE_R3=1
    RUBBERBAND_BUILD_FFT=KISSFFT
    RUBBERBAND_BUILD_RESAMPLER=NONE
  )
  set(RUBBERBAND_TARGET rubberband_single)
  set(RUBBERBAND_INCLUDE_DIR "${rubberband_fc_SOURCE_DIR}")
endif()

# ==============================================================================
# Main Engine App Target (Unchanged)
# ==============================================================================
juce_add_gui_app(ColliderApp
    PRODUCT_NAME "Collider Audio Engine"
    VERSION "0.1.0"
    COMPANY_NAME "Collider"
)

target_sources(ColliderApp PRIVATE
    Source/main.cpp
    Source/app/MainApplication.cpp
    Source/app/MainApplication.h
    Source/ui/MainComponent.cpp
    Source/ui/MainComponent.h
    Source/ui/TestHarnessComponent.cpp
    Source/ui/TestHarnessComponent.h
    Source/ui/VisualiserComponent.cpp
    Source/ui/VisualiserComponent.h
    Source/ui/DebugInfo.h
    Source/audio/AudioEngine.h
    Source/audio/AudioEngine.cpp
    Source/audio/voices/SampleVoiceProcessor.h
    Source/audio/voices/SampleVoiceProcessor.cpp
    Source/audio/voices/SynthVoiceProcessor.h
    Source/audio/voices/SynthVoiceProcessor.cpp
    Source/audio/voices/NoiseVoiceProcessor.h
    Source/audio/voices/NoiseVoiceProcessor.cpp
    Source/audio/voices/ModularVoice.h
    Source/audio/graph/VoiceProcessor.h
    Source/audio/graph/VoiceProcessor.cpp
    Source/audio/graph/ModularSynthProcessor.h
    Source/audio/graph/ModularSynthProcessor.cpp
    Source/audio/fx/FXChain.h
    Source/audio/fx/GainProcessor.h
    Source/audio/fx/GainProcessor.cpp
    Source/audio/assets/SampleBank.h
    Source/audio/assets/SampleBank.cpp
    Source/audio/modules/ModuleProcessor.h
    Source/audio/modules/ModuleProcessor.cpp
    Source/audio/modules/AudioInputModuleProcessor.h
    Source/audio/modules/AudioInputModuleProcessor.cpp
    Source/audio/modules/VCOModuleProcessor.h
    Source/audio/modules/VCOModuleProcessor.cpp
    Source/audio/modules/VCFModuleProcessor.h
    Source/audio/modules/VCFModuleProcessor.cpp
    Source/audio/modules/VCAModuleProcessor.h
    Source/audio/modules/VCAModuleProcessor.cpp
    Source/audio/modules/NoiseModuleProcessor.h
    Source/audio/modules/NoiseModuleProcessor.cpp
    Source/audio/modules/LFOModuleProcessor.h
    Source/audio/modules/LFOModuleProcessor.cpp
    Source/audio/modules/ADSRModuleProcessor.h
    Source/audio/modules/ADSRModuleProcessor.cpp
    Source/audio/modules/MixerModuleProcessor.h
    Source/audio/modules/MixerModuleProcessor.cpp
    Source/audio/modules/CVMixerModuleProcessor.h
    Source/audio/modules/CVMixerModuleProcessor.cpp
    Source/audio/modules/DelayModuleProcessor.h
    Source/audio/modules/DelayModuleProcessor.cpp
    Source/audio/modules/ReverbModuleProcessor.h
    Source/audio/modules/ReverbModuleProcessor.cpp
    Source/audio/modules/SAndHModuleProcessor.h
    Source/audio/modules/SAndHModuleProcessor.cpp
    Source/audio/modules/AttenuverterModuleProcessor.h
    Source/audio/modules/AttenuverterModuleProcessor.cpp
    Source/audio/modules/ScopeModuleProcessor.h
    Source/audio/modules/ScopeModuleProcessor.cpp
    Source/audio/modules/StepSequencerModuleProcessor.h
    Source/audio/modules/StepSequencerModuleProcessor.cpp
    Source/audio/modules/MultiSequencerModuleProcessor.h
    Source/audio/modules/MultiSequencerModuleProcessor.cpp
    Source/audio/modules/LagProcessorModuleProcessor.h
    Source/audio/modules/LagProcessorModuleProcessor.cpp
    Source/audio/modules/DeCrackleModuleProcessor.h
    Source/audio/modules/DeCrackleModuleProcessor.cpp
    Source/audio/modules/GraphicEQModuleProcessor.h
    Source/audio/modules/GraphicEQModuleProcessor.cpp
    Source/audio/modules/FrequencyGraphModuleProcessor.h
    Source/audio/modules/FrequencyGraphModuleProcessor.cpp
    Source/audio/modules/ChorusModuleProcessor.h
    Source/audio/modules/ChorusModuleProcessor.cpp
    Source/audio/modules/PhaserModuleProcessor.h
    Source/audio/modules/PhaserModuleProcessor.cpp
    Source/audio/modules/CompressorModuleProcessor.h
    Source/audio/modules/CompressorModuleProcessor.cpp
    Source/audio/modules/RecordModuleProcessor.h
    Source/audio/modules/RecordModuleProcessor.cpp
    Source/audio/modules/CommentModuleProcessor.h
    Source/audio/modules/CommentModuleProcessor.cpp
    Source/audio/modules/LimiterModuleProcessor.h
    Source/audio/modules/LimiterModuleProcessor.cpp
    Source/audio/modules/GateModuleProcessor.h
    Source/audio/modules/GateModuleProcessor.cpp
    Source/audio/modules/DriveModuleProcessor.h
    Source/audio/modules/DriveModuleProcessor.cpp
    Source/audio/modules/MathModuleProcessor.h
    Source/audio/modules/MathModuleProcessor.cpp
    Source/audio/modules/MapRangeModuleProcessor.h
    Source/audio/modules/MapRangeModuleProcessor.cpp
    Source/audio/modules/ComparatorModuleProcessor.h
    Source/audio/modules/ComparatorModuleProcessor.cpp
    Source/audio/modules/RandomModuleProcessor.h
    Source/audio/modules/RandomModuleProcessor.cpp
    Source/audio/modules/RateModuleProcessor.h
    Source/audio/modules/RateModuleProcessor.cpp
    Source/audio/modules/QuantizerModuleProcessor.h
    Source/audio/modules/QuantizerModuleProcessor.cpp
    Source/audio/modules/SequentialSwitchModuleProcessor.h
    Source/audio/modules/SequentialSwitchModuleProcessor.cpp
    Source/audio/modules/LogicModuleProcessor.h
    Source/audio/modules/LogicModuleProcessor.cpp
    Source/audio/modules/ClockDividerModuleProcessor.h
    Source/audio/modules/ClockDividerModuleProcessor.cpp
    Source/audio/modules/WaveshaperModuleProcessor.h
    Source/audio/modules/WaveshaperModuleProcessor.cpp
    Source/audio/modules/MultiBandShaperModuleProcessor.h
    Source/audio/modules/MultiBandShaperModuleProcessor.cpp
    Source/audio/modules/GranulatorModuleProcessor.h
    Source/audio/modules/GranulatorModuleProcessor.cpp
    Source/audio/modules/HarmonicShaperModuleProcessor.h
    Source/audio/modules/HarmonicShaperModuleProcessor.cpp
    Source/audio/modules/ValueModuleProcessor.h
    Source/audio/modules/ValueModuleProcessor.cpp
    Source/audio/modules/TimePitchModuleProcessor.h
    Source/audio/modules/TimePitchModuleProcessor.cpp
    Source/audio/modules/MIDIPlayerModuleProcessor.h
    Source/audio/modules/MIDIPlayerModuleProcessor.cpp
        Source/audio/modules/TrackMixerModuleProcessor.h
        Source/audio/modules/TrackMixerModuleProcessor.cpp
    Source/audio/modules/PolyVCOModuleProcessor.h
    Source/audio/modules/PolyVCOModuleProcessor.cpp
        Source/audio/modules/DebugModuleProcessor.h
        Source/audio/modules/DebugModuleProcessor.cpp
        Source/audio/modules/CommentModuleProcessor.h
        Source/audio/modules/CommentModuleProcessor.cpp
        Source/audio/modules/InputDebugModuleProcessor.h
        Source/audio/modules/InputDebugModuleProcessor.cpp
    Source/audio/modules/TTSPerformerModuleProcessor.h
    Source/audio/modules/TTSPerformerModuleProcessor.cpp
    Source/audio/modules/TimingData.h
    Source/audio/modules/SampleLoaderModuleProcessor.h
    Source/audio/modules/SampleLoaderModuleProcessor.cpp
    Source/audio/modules/FunctionGeneratorModuleProcessor.h
    Source/audio/modules/FunctionGeneratorModuleProcessor.cpp
    Source/audio/modules/BestPracticeNodeProcessor.h
    Source/audio/modules/BestPracticeNodeProcessor.cpp
    Source/audio/modules/VocalTractFilterModuleProcessor.h
    Source/audio/modules/VocalTractFilterModuleProcessor.cpp
    Source/audio/modules/VstHostModuleProcessor.h
    Source/audio/modules/VstHostModuleProcessor.cpp
    Source/audio/modules/ShapingOscillatorModuleProcessor.h
    Source/audio/modules/ShapingOscillatorModuleProcessor.cpp
    Source/audio/modules/InletModuleProcessor.h
    Source/audio/modules/InletModuleProcessor.cpp
    Source/audio/modules/OutletModuleProcessor.h
    Source/audio/modules/OutletModuleProcessor.cpp
    Source/audio/modules/MetaModuleProcessor.h
    Source/audio/modules/MetaModuleProcessor.cpp
    Source/audio/modules/SnapshotSequencerModuleProcessor.h
    Source/audio/modules/SnapshotSequencerModuleProcessor.cpp
    Source/audio/modules/MIDICVModuleProcessor.h
    Source/audio/modules/MIDICVModuleProcessor.cpp
    Source/audio/modules/MIDIFadersModuleProcessor.h
    Source/audio/modules/MIDIFadersModuleProcessor.cpp
    Source/audio/modules/MIDIKnobsModuleProcessor.h
    Source/audio/modules/MIDIKnobsModuleProcessor.cpp
    Source/audio/modules/MIDIButtonsModuleProcessor.h
    Source/audio/modules/MIDIButtonsModuleProcessor.cpp
    Source/audio/modules/MIDIJogWheelModuleProcessor.h
    Source/audio/modules/MIDIJogWheelModuleProcessor.cpp
    Source/audio/modules/TempoClockModuleProcessor.h
    Source/audio/modules/TempoClockModuleProcessor.cpp
    Source/ipc/IpcServer.cpp
    Source/ipc/IpcServer.h
    Source/ipc/OscClient.h
    Source/ipc/CommandBus.cpp
    Source/ipc/CommandBus.h
    Source/audio/utils/VoiceDeletionUtils.h
    Source/audio/dsp/TimePitchProcessor.h
    Source/utils/RtLogger.h
    Source/utils/RtLogger.cpp
)

target_compile_definitions(ColliderApp PRIVATE
    JUCE_APPLICATION_NAME_STRING="$<TARGET_PROPERTY:ColliderApp,PRODUCT_NAME>"
    JUCE_APPLICATION_VERSION_STRING="$<TARGET_PROPERTY:ColliderApp,VERSION>"
    JUCE_WEB_BROWSER=0 JUCE_USE_CURL=0
    JUCE_PLUGINHOST_VST3=1
    $<$<BOOL:${USE_RUBBERBAND}>:USE_RUBBERBAND=1>
    $<$<NOT:$<BOOL:${USE_RUBBERBAND}>>:USE_RUBBERBAND=0>
)

target_link_libraries(ColliderApp PRIVATE
    juce::juce_gui_extra
    juce::juce_audio_processors
    juce::juce_audio_utils
    juce::juce_audio_formats
    juce::juce_dsp
    juce::juce_osc
    soundtouch
    $<$<BOOL:${USE_RUBBERBAND}>:${RUBBERBAND_TARGET}>
    # Piper TTS libraries (pre-built)
    ${ONNXRUNTIME_DIR}/lib/onnxruntime.lib
)

# Add include directories for ColliderApp
target_include_directories(ColliderApp PRIVATE
    ${PIPER_DIR}
    ${ONNXRUNTIME_DIR}/include
    ${CMAKE_SOURCE_DIR}/../vendor/openvino_toolkit_windows_2025.3.0.19807.44526285f24_x86_64/samples/cpp/thirdparty/nlohmann_json/single_include
    ${CMAKE_SOURCE_DIR}/../soundtouch/include
    ${CMAKE_SOURCE_DIR}/../soundtouch/source/SoundTouch
    $<$<BOOL:${USE_RUBBERBAND}>:${RUBBERBAND_INCLUDE_DIR}>
)

# ==============================================================================
# Preset Creator App Target (Final Corrected Version)
# ==============================================================================

juce_add_gui_app(PresetCreatorApp
    PRODUCT_NAME "Preset Creator"
    VERSION "0.1.0"
    COMPANY_NAME "Collider"
)

target_sources(PresetCreatorApp PRIVATE
    # Your application sources
    Source/preset_creator/PresetCreatorMain.cpp
    Source/preset_creator/PinDatabase.h
    Source/preset_creator/PinDatabase.cpp
    Source/preset_creator/ImGuiNodeEditorComponent.h
    Source/preset_creator/ImGuiNodeEditorComponent.cpp
    Source/preset_creator/PresetCreatorComponent.h
    Source/preset_creator/PresetCreatorComponent.cpp
    Source/preset_creator/ControllerPresetManager.h
    Source/preset_creator/ControllerPresetManager.cpp

    # Add ImGui, imnodes, and the backend DIRECTLY as source files
    ${imgui_fc_SOURCE_DIR}/imgui.cpp
    ${imgui_fc_SOURCE_DIR}/imgui_draw.cpp
    ${imgui_fc_SOURCE_DIR}/imgui_tables.cpp
    ${imgui_fc_SOURCE_DIR}/imgui_widgets.cpp
    ${imgui_fc_SOURCE_DIR}/backends/imgui_impl_opengl2.cpp
    ${imnodes_fc_SOURCE_DIR}/imnodes.cpp

    # Your other reused engine modules
    Source/audio/graph/ModularSynthProcessor.h
    Source/audio/graph/ModularSynthProcessor.cpp
    Source/audio/modules/ModuleProcessor.h
    Source/audio/modules/ModuleProcessor.cpp
    Source/audio/modules/AudioInputModuleProcessor.h
    Source/audio/modules/AudioInputModuleProcessor.cpp
    Source/audio/modules/VCOModuleProcessor.h
    Source/audio/modules/VCOModuleProcessor.cpp
    Source/audio/modules/VCFModuleProcessor.h
    Source/audio/modules/VCFModuleProcessor.cpp
    Source/audio/modules/VCAModuleProcessor.h
    Source/audio/modules/VCAModuleProcessor.cpp
    Source/audio/modules/NoiseModuleProcessor.h
    Source/audio/modules/NoiseModuleProcessor.cpp
    Source/audio/modules/LFOModuleProcessor.h
    Source/audio/modules/LFOModuleProcessor.cpp
    Source/audio/modules/ADSRModuleProcessor.h
    Source/audio/modules/ADSRModuleProcessor.cpp
    Source/audio/modules/MixerModuleProcessor.h
    Source/audio/modules/MixerModuleProcessor.cpp
    Source/audio/modules/CVMixerModuleProcessor.h
    Source/audio/modules/CVMixerModuleProcessor.cpp
    Source/audio/modules/DelayModuleProcessor.h
    Source/audio/modules/DelayModuleProcessor.cpp
    Source/audio/modules/ReverbModuleProcessor.h
    Source/audio/modules/ReverbModuleProcessor.cpp
    Source/audio/modules/SAndHModuleProcessor.h
    Source/audio/modules/SAndHModuleProcessor.cpp
    Source/audio/modules/AttenuverterModuleProcessor.h
    Source/audio/modules/AttenuverterModuleProcessor.cpp
    Source/audio/modules/ScopeModuleProcessor.h
    Source/audio/modules/ScopeModuleProcessor.cpp
    Source/audio/modules/StepSequencerModuleProcessor.h
    Source/audio/modules/StepSequencerModuleProcessor.cpp
    Source/audio/modules/MathModuleProcessor.h
    Source/audio/modules/MathModuleProcessor.cpp
    Source/audio/modules/MapRangeModuleProcessor.h
    Source/audio/modules/MapRangeModuleProcessor.cpp
    Source/audio/modules/ComparatorModuleProcessor.h
    Source/audio/modules/ComparatorModuleProcessor.cpp
    Source/audio/modules/RandomModuleProcessor.h
    Source/audio/modules/RandomModuleProcessor.cpp
    Source/audio/modules/RateModuleProcessor.h
    Source/audio/modules/RateModuleProcessor.cpp
    Source/audio/modules/QuantizerModuleProcessor.h
    Source/audio/modules/QuantizerModuleProcessor.cpp
    Source/audio/modules/SequentialSwitchModuleProcessor.h
    Source/audio/modules/SequentialSwitchModuleProcessor.cpp
    Source/audio/modules/LogicModuleProcessor.h
    Source/audio/modules/LogicModuleProcessor.cpp
    Source/audio/modules/ClockDividerModuleProcessor.h
    Source/audio/modules/ClockDividerModuleProcessor.cpp
    Source/audio/modules/WaveshaperModuleProcessor.h
    Source/audio/modules/WaveshaperModuleProcessor.cpp
    Source/audio/modules/MultiBandShaperModuleProcessor.h
    Source/audio/modules/MultiBandShaperModuleProcessor.cpp
    Source/audio/modules/GranulatorModuleProcessor.h
    Source/audio/modules/GranulatorModuleProcessor.cpp
    Source/audio/modules/HarmonicShaperModuleProcessor.h
    Source/audio/modules/HarmonicShaperModuleProcessor.cpp
    Source/audio/modules/ValueModuleProcessor.h
    Source/audio/modules/ValueModuleProcessor.cpp
        Source/audio/modules/DebugModuleProcessor.h
        Source/audio/modules/DebugModuleProcessor.cpp
        Source/audio/modules/CommentModuleProcessor.h
        Source/audio/modules/CommentModuleProcessor.cpp
        Source/audio/modules/InputDebugModuleProcessor.h
        Source/audio/modules/InputDebugModuleProcessor.cpp
    Source/audio/modules/TimePitchModuleProcessor.h
    Source/audio/modules/TimePitchModuleProcessor.cpp
    Source/audio/modules/MIDIPlayerModuleProcessor.h
    Source/audio/modules/MIDIPlayerModuleProcessor.cpp
        Source/audio/modules/TrackMixerModuleProcessor.h
        Source/audio/modules/TrackMixerModuleProcessor.cpp
    Source/audio/modules/PolyVCOModuleProcessor.h
    Source/audio/modules/PolyVCOModuleProcessor.cpp
    
    Source/audio/modules/TTSPerformerModuleProcessor.h
    Source/audio/modules/TTSPerformerModuleProcessor.cpp
    Source/audio/modules/TimingData.h
    Source/audio/modules/SampleLoaderModuleProcessor.h
    Source/audio/modules/SampleLoaderModuleProcessor.cpp
    Source/audio/modules/FunctionGeneratorModuleProcessor.h
    Source/audio/modules/FunctionGeneratorModuleProcessor.cpp
    Source/audio/modules/BestPracticeNodeProcessor.h
    Source/audio/modules/BestPracticeNodeProcessor.cpp
    Source/audio/modules/ShapingOscillatorModuleProcessor.h
    Source/audio/modules/ShapingOscillatorModuleProcessor.cpp
    Source/audio/voices/SampleVoiceProcessor.h
    Source/audio/voices/SampleVoiceProcessor.cpp
    Source/audio/graph/VoiceProcessor.h
    Source/audio/graph/VoiceProcessor.cpp
    Source/audio/assets/SampleBank.h
    Source/audio/assets/SampleBank.cpp
    Source/utils/RtLogger.h
    Source/utils/RtLogger.cpp
    Source/audio/modules/VocalTractFilterModuleProcessor.h
    Source/audio/modules/VocalTractFilterModuleProcessor.cpp
    Source/audio/modules/VstHostModuleProcessor.h
    Source/audio/modules/VstHostModuleProcessor.cpp
    Source/audio/modules/MultiSequencerModuleProcessor.h
    Source/audio/modules/MultiSequencerModuleProcessor.cpp
    Source/audio/modules/LagProcessorModuleProcessor.h
    Source/audio/modules/LagProcessorModuleProcessor.cpp
    Source/audio/modules/DeCrackleModuleProcessor.h
    Source/audio/modules/DeCrackleModuleProcessor.cpp
    Source/audio/modules/GraphicEQModuleProcessor.h
    Source/audio/modules/GraphicEQModuleProcessor.cpp
    Source/audio/modules/FrequencyGraphModuleProcessor.h
    Source/audio/modules/FrequencyGraphModuleProcessor.cpp
    Source/audio/modules/ChorusModuleProcessor.h
    Source/audio/modules/ChorusModuleProcessor.cpp
    Source/audio/modules/PhaserModuleProcessor.h
    Source/audio/modules/PhaserModuleProcessor.cpp
    Source/audio/modules/CompressorModuleProcessor.h
    Source/audio/modules/CompressorModuleProcessor.cpp
    Source/audio/modules/RecordModuleProcessor.h
    Source/audio/modules/RecordModuleProcessor.cpp
    Source/audio/modules/CommentModuleProcessor.h
    Source/audio/modules/CommentModuleProcessor.cpp
    Source/audio/modules/LimiterModuleProcessor.h
    Source/audio/modules/LimiterModuleProcessor.cpp
    Source/audio/modules/GateModuleProcessor.h
    Source/audio/modules/GateModuleProcessor.cpp
    Source/audio/modules/DriveModuleProcessor.h
    Source/audio/modules/DriveModuleProcessor.cpp
    Source/audio/modules/InletModuleProcessor.h
    Source/audio/modules/InletModuleProcessor.cpp
    Source/audio/modules/OutletModuleProcessor.h
    Source/audio/modules/OutletModuleProcessor.cpp
    Source/audio/modules/MetaModuleProcessor.h
    Source/audio/modules/MetaModuleProcessor.cpp
    Source/audio/modules/SnapshotSequencerModuleProcessor.h
    Source/audio/modules/SnapshotSequencerModuleProcessor.cpp
    Source/audio/modules/MIDICVModuleProcessor.h
    Source/audio/modules/MIDICVModuleProcessor.cpp
    Source/audio/modules/MIDIFadersModuleProcessor.h
    Source/audio/modules/MIDIFadersModuleProcessor.cpp
    Source/audio/modules/MIDIKnobsModuleProcessor.h
    Source/audio/modules/MIDIKnobsModuleProcessor.cpp
    Source/audio/modules/MIDIButtonsModuleProcessor.h
    Source/audio/modules/MIDIButtonsModuleProcessor.cpp
    Source/audio/modules/MIDIJogWheelModuleProcessor.h
    Source/audio/modules/MIDIJogWheelModuleProcessor.cpp
    Source/audio/modules/TempoClockModuleProcessor.h
    Source/audio/modules/TempoClockModuleProcessor.cpp
)

# This target now needs to know where to find all the headers
target_include_directories(PresetCreatorApp PRIVATE
    ${imgui_fc_SOURCE_DIR}
    ${imgui_fc_SOURCE_DIR}/backends
    ${imnodes_fc_SOURCE_DIR}
    ${imgui_juce_fc_SOURCE_DIR}
    ${PIPER_DIR}
    ${ONNXRUNTIME_DIR}/include
    ${CMAKE_SOURCE_DIR}/../vendor/openvino_toolkit_windows_2025.3.0.19807.44526285f24_x86_64/samples/cpp/thirdparty/nlohmann_json/single_include
    ${CMAKE_SOURCE_DIR}/../soundtouch/include
    ${CMAKE_SOURCE_DIR}/../soundtouch/source/SoundTouch
    $<$<BOOL:${USE_RUBBERBAND}>:${RUBBERBAND_INCLUDE_DIR}>
)

# This target also needs the compile definitions
target_compile_definitions(PresetCreatorApp PRIVATE
    JUCE_APPLICATION_NAME_STRING="$<TARGET_PROPERTY:PresetCreatorApp,PRODUCT_NAME>"
    JUCE_APPLICATION_VERSION_STRING="$<TARGET_PROPERTY:PresetCreatorApp,VERSION>"
    JUCE_WEB_BROWSER=0 JUCE_USE_CURL=0
    JUCE_PLUGINHOST_VST3=1
    IMGUI_IMPL_JUCE_BEZEL=0
    IMGUI_DEFINE_MATH_OPERATORS
    IMNODES_NAMESPACE=ImNodes
    IMNODES_STATIC_DEFINE
    PRESET_CREATOR_UI=1
    $<$<BOOL:${USE_RUBBERBAND}>:USE_RUBBERBAND=1>
    $<$<NOT:$<BOOL:${USE_RUBBERBAND}>>:USE_RUBBERBAND=0>
)

target_link_libraries(PresetCreatorApp PRIVATE
    juce::juce_gui_extra
    juce::juce_opengl
    juce::juce_audio_devices
    juce::juce_audio_processors
    juce::juce_audio_utils
    juce::juce_audio_formats
    juce::juce_dsp
    imgui_impl_juce
    soundtouch
    $<$<BOOL:${USE_RUBBERBAND}>:${RUBBERBAND_TARGET}>
    # Piper TTS libraries (pre-built)
    ${ONNXRUNTIME_DIR}/lib/onnxruntime.lib
)

if(WIN32)
    # Copy Piper executable and DLLs to output directories
    add_custom_command(
        TARGET ColliderApp POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${PIPER_DIR}/piper.exe"
                "$<TARGET_FILE_DIR:ColliderApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${PIPER_DIR}/piper_phonemize.dll"
                "$<TARGET_FILE_DIR:ColliderApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${PIPER_DIR}/espeak-ng.dll"
                "$<TARGET_FILE_DIR:ColliderApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${ONNXRUNTIME_DIR}/lib/onnxruntime.dll"
                "$<TARGET_FILE_DIR:ColliderApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${ONNXRUNTIME_DIR}/lib/onnxruntime_providers_shared.dll"
                "$<TARGET_FILE_DIR:ColliderApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${PIPER_DIR}/espeak-ng-data"
                "$<TARGET_FILE_DIR:ColliderApp>/espeak-ng-data"
        COMMENT "Copying Piper TTS runtime files to ColliderApp output directory"
    )
    add_custom_command(
        TARGET PresetCreatorApp POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${PIPER_DIR}/piper.exe"
                "$<TARGET_FILE_DIR:PresetCreatorApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${PIPER_DIR}/piper_phonemize.dll"
                "$<TARGET_FILE_DIR:PresetCreatorApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${PIPER_DIR}/espeak-ng.dll"
                "$<TARGET_FILE_DIR:PresetCreatorApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${ONNXRUNTIME_DIR}/lib/onnxruntime.dll"
                "$<TARGET_FILE_DIR:PresetCreatorApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${ONNXRUNTIME_DIR}/lib/onnxruntime_providers_shared.dll"
                "$<TARGET_FILE_DIR:PresetCreatorApp>"
        COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${PIPER_DIR}/espeak-ng-data"
                "$<TARGET_FILE_DIR:PresetCreatorApp>/espeak-ng-data"
        COMMENT "Copying Piper TTS runtime files to PresetCreatorApp output directory"
    )
endif()


================================================================================
FILE: juce\Source\preset_creator\PresetCreatorMain.cpp
================================================================================


#include "PresetCreatorApplication.h"
#include "PresetCreatorComponent.h"
#include "../utils/RtLogger.h"

void PresetCreatorApplication::initialise(const juce::String&)
    {
        DBG("[PresetCreator] initialise() starting"); RtLogger::init();
        // Crash handler to capture unexpected exceptions
        std::set_terminate([]{
            auto bt = juce::SystemStats::getStackBacktrace();
            juce::Logger::writeToLog("[PresetCreator][FATAL] terminate called. Backtrace:\n" + bt);
            std::abort();
        });
        // Set up file logger for diagnostics
        auto logsDir = juce::File::getSpecialLocation (juce::File::currentExecutableFile)
                           .getParentDirectory().getChildFile ("juce").getChildFile ("logs");
        logsDir.createDirectory();
        auto logFile = logsDir.getChildFile ("preset_creator_" + juce::Time::getCurrentTime().formatted ("%Y-%m-%d_%H-%M-%S") + ".log");
        fileLogger = std::make_unique<juce::FileLogger> (logFile, "Preset Creator Session", 0);
        juce::Logger::setCurrentLogger (fileLogger.get());
        DBG("[PresetCreator] Logger initialised at: " + logFile.getFullPathName());
        juce::Logger::writeToLog("PresetCreatorApplication::initialise called");
        
        // ADD: Load persistent audio settings
        // Define where to store the settings file
        auto appDataDir = juce::File::getSpecialLocation(juce::File::userApplicationDataDirectory)
                                .getChildFile(getApplicationName());
        appDataDir.createDirectory(); // Ensure the directory exists
        auto settingsFile = appDataDir.getChildFile("audio_settings.xml");

        std::unique_ptr<juce::XmlElement> savedState;
        if (settingsFile.existsAsFile())
        {
            savedState = juce::XmlDocument::parse(settingsFile);
            juce::Logger::writeToLog("Loading audio settings from: " + settingsFile.getFullPathName());
        }
        else
        {
            juce::Logger::writeToLog("No saved audio settings found, using defaults");
        }
        
        // Pass the saved state to the device manager.
        // It will automatically use the saved settings or fall back to defaults.
        audioDeviceManager.initialise(2, 2, savedState.get(), true);
        
        // Initialize plugin management
        pluginFormatManager.addDefaultFormats();
        
        // Initialize application properties
        juce::PropertiesFile::Options options;
        options.applicationName = getApplicationName();
        options.filenameSuffix = ".settings";
        options.osxLibrarySubFolder = "Application Support";
        options.folderName = appDataDir.getFullPathName();
        appProperties = std::make_unique<juce::PropertiesFile>(options);
        
        // Define where to save the plugin list XML
        auto deadMansPedalFile = appDataDir.getChildFile("blacklisted_plugins.txt");
        pluginScanListFile = appDataDir.getChildFile("known_plugins.xml");
        
        // Load the list from the XML file
        if (pluginScanListFile.existsAsFile())
        {
            auto pluginListXml = juce::XmlDocument::parse(pluginScanListFile);
            if (pluginListXml != nullptr)
            {
                knownPluginList.recreateFromXml(*pluginListXml);
                juce::Logger::writeToLog("Loaded " + juce::String(knownPluginList.getNumTypes()) + " plugin(s) from cache");
            }
        }
        else
        {
            juce::Logger::writeToLog("No cached plugin list found");
        }
        
        juce::Logger::writeToLog("Attempting to create MainWindow...");
        mainWindow.reset (new MainWindow (getApplicationName(), 
                                         audioDeviceManager,
                                         pluginFormatManager,
                                         knownPluginList));
        juce::Logger::writeToLog("MainWindow created successfully");
}

void PresetCreatorApplication::shutdown()
{ 
        // Save persistent audio settings
        std::unique_ptr<juce::XmlElement> currentState(audioDeviceManager.createStateXml());

        if (currentState != nullptr)
        {
            // Define the same settings file path as in initialise()
            auto appDataDir = juce::File::getSpecialLocation(juce::File::userApplicationDataDirectory)
                                    .getChildFile(getApplicationName());
            auto settingsFile = appDataDir.getChildFile("audio_settings.xml");

            // Write the XML to the file
            if (currentState->writeTo(settingsFile))
            {
                juce::Logger::writeToLog("Audio settings saved to: " + settingsFile.getFullPathName());
            }
            else
            {
                juce::Logger::writeToLog("Failed to save audio settings to: " + settingsFile.getFullPathName());
            }
        }
        
        // Save plugin list
        if (auto pluginListXml = knownPluginList.createXml())
        {
            if (pluginListXml->writeTo(pluginScanListFile))
            {
                juce::Logger::writeToLog("Plugin list saved to: " + pluginScanListFile.getFullPathName());
            }
        }
        
        // Save application properties
        if (appProperties)
            appProperties->saveIfNeeded();
        
        RtLogger::shutdown(); 
        mainWindow = nullptr; 
        juce::Logger::setCurrentLogger (nullptr); 
        fileLogger = nullptr; 
}

PresetCreatorApplication::MainWindow::MainWindow(juce::String name, 
                                                 juce::AudioDeviceManager& adm,
                                                 juce::AudioPluginFormatManager& fm,
                                                 juce::KnownPluginList& kl)
    : DocumentWindow(name,
                     juce::Desktop::getInstance().getDefaultLookAndFeel()
                         .findColour(ResizableWindow::backgroundColourId),
                     DocumentWindow::allButtons),
      deviceManager(adm),
      pluginFormatManager(fm),
      knownPluginList(kl)
{
    juce::Logger::writeToLog("MainWindow constructor starting...");
    setUsingNativeTitleBar(true);
    juce::Logger::writeToLog("Attempting to create PresetCreatorComponent...");
    setContentOwned(new PresetCreatorComponent(deviceManager, pluginFormatManager, knownPluginList), true);
    juce::Logger::writeToLog("PresetCreatorComponent created and set.");
    centreWithSize(2600, 1080);
    setVisible(true);
    toFront(true);
    juce::Logger::writeToLog("MainWindow setup complete");
}

START_JUCE_APPLICATION (PresetCreatorApplication)




================================================================================
FILE: juce\Source\ui\TestHarnessComponent.cpp
================================================================================


#include "TestHarnessComponent.h"
#include "MainComponent.h"
#include "../audio/voices/NoiseVoiceProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include "../audio/voices/SynthVoiceProcessor.h"
#include "../audio/voices/SampleVoiceProcessor.h"
#include "../audio/voices/ModularVoice.h"
#include "../audio/utils/VoiceDeletionUtils.h"
#include "../audio/AudioEngine.h"
#include "../ipc/CommandBus.h"

static juce::TextEditor* gLoggerEditor = nullptr;

void OnScreenLogger::attach (juce::TextEditor* editor)
{
    gLoggerEditor = editor;
}

void OnScreenLogger::log (const juce::String& msg)
{
    if (gLoggerEditor != nullptr)
    {
        if (juce::MessageManager::getInstanceWithoutCreating() != nullptr
            && juce::MessageManager::getInstance()->isThisTheMessageThread())
        {
            gLoggerEditor->moveCaretToEnd();
            gLoggerEditor->insertTextAtCaret (msg + "\n");
        }
        else
        {
            juce::MessageManager::callAsync ([s = msg]
            {
                if (gLoggerEditor != nullptr)
                {
                    gLoggerEditor->moveCaretToEnd();
                    gLoggerEditor->insertTextAtCaret (s + "\n");
                }
            });
        }
    }
    juce::Logger::writeToLog (msg);
}

TestHarnessComponent::TestHarnessComponent(juce::AudioDeviceManager& adm)
    : deviceManager(adm)
{
    OnScreenLogger::attach (&logView);
    OnScreenLogger::log ("Harness: Constructor starting...");

    // Set initial harness window size once
    setSize (1600, 900); // More reasonable default size


    addAndMakeVisible (btnAudioSettings);
    addAndMakeVisible (btnCreateSynth);
    addAndMakeVisible (btnCreateSample);
    addAndMakeVisible (btnCreateNoise);
    addAndMakeVisible (btnCreateModular);
    addAndMakeVisible (btnLoadPreset);
    addAndMakeVisible (btnDestroy);
    addAndMakeVisible (btnDestroyRandom);
    addAndMakeVisible (btnDestroySelected);
    addAndMakeVisible (btnRandomPitch);
    addAndMakeVisible (btnRandomTime);
    addAndMakeVisible (btnResetFx);
    addAndMakeVisible (btnChaos);
    addAndMakeVisible (btnManualFx);
    addAndMakeVisible (lEngine);
    addAndMakeVisible (comboEngine);
    comboEngine.addItem ("RubberBand", 1);
    comboEngine.addItem ("Naive", 2);
    comboEngine.setSelectedId (1, juce::dontSendNotification);
    comboEngine.addListener (this);
    addAndMakeVisible (sliderGain);
    addAndMakeVisible (sliderPan);
    addAndMakeVisible (lblGain);
    addAndMakeVisible (lblPan);
    addAndMakeVisible (lblStatus);
    addAndMakeVisible (lblDevice);
    addAndMakeVisible (lblVoices);
    addAndMakeVisible (lblPeak);
    addAndMakeVisible (logView);
    addAndMakeVisible (listDirs);
    addAndMakeVisible (listSamples);
    addAndMakeVisible (listVoices);
    listDirs.setRowHeight (22);
    listSamples.setRowHeight (22);
    listVoices.setRowHeight (22);
    listDirs.setMultipleSelectionEnabled (false);
    listSamples.setMultipleSelectionEnabled (false);
    listVoices.setMultipleSelectionEnabled (false);
    listDirs.setModel (&dirModel);
    listSamples.setModel (&sampleModel);
    listVoices.setModel (&voiceModel);
    listDirs.getVerticalScrollBar().setAutoHide (false);
    listSamples.getVerticalScrollBar().setAutoHide (false);
    listVoices.getVerticalScrollBar().setAutoHide (false);
    auto initSlider = [] (juce::Slider& s, double min, double max, double def, double inc=0.001)
    {
        s.setRange (min, max, inc);
        s.setValue (def);
    };
    auto addL = [this] (juce::Label& l) { addAndMakeVisible (l); };
    auto addS = [this] (juce::Slider& s) { addAndMakeVisible (s); s.addListener (this); };

    // Initialize FX sliders, defaults to "dry" positions
    addL (lFilterCutoff); addS (sFilterCutoff); initSlider (sFilterCutoff, 20.0, 20000.0, 20000.0, 1.0);
    addL (lFilterRes);    addS (sFilterRes);    initSlider (sFilterRes, 1.0, 20.0, 1.0);

    addL (lChRate);  addS (sChRate);  initSlider (sChRate, 0.1, 10.0, 1.0);
    addL (lChDepth); addS (sChDepth); initSlider (sChDepth, 0.0, 1.0, 0.0);
    addL (lChMix);   addS (sChMix);   initSlider (sChMix, 0.0, 1.0, 0.0);

    addL (lPhRate);   addS (sPhRate);   initSlider (sPhRate, 0.01, 10.0, 0.5);
    addL (lPhDepth);  addS (sPhDepth);  initSlider (sPhDepth, 0.0, 1.0, 0.0);
    addL (lPhCentre); addS (sPhCentre); initSlider (sPhCentre, 20.0, 20000.0, 1000.0, 1.0);
    addL (lPhFb);     addS (sPhFb);     initSlider (sPhFb, -0.99, 0.99, 0.0);
    addL (lPhMix);    addS (sPhMix);    initSlider (sPhMix, 0.0, 1.0, 0.0);

    addL (lRvRoom); addS (sRvRoom); initSlider (sRvRoom, 0.0, 1.0, 0.0);
    addL (lRvDamp); addS (sRvDamp); initSlider (sRvDamp, 0.0, 1.0, 0.5);
    addL (lRvWidth);addS (sRvWidth);initSlider (sRvWidth,0.0, 1.0, 1.0);
    addL (lRvMix);  addS (sRvMix);  initSlider (sRvMix,  0.0, 1.0, 0.0);

    addL (lDlTime); addS (sDlTime); initSlider (sDlTime, 1.0, 2000.0, 0.0, 1.0);
    addL (lDlFb);   addS (sDlFb);   initSlider (sDlFb,   0.0, 0.95, 0.0);
    addL (lDlMix);  addS (sDlMix);  initSlider (sDlMix,  0.0, 1.0, 0.0);

    addL (lCpThresh); addS (sCpThresh); initSlider (sCpThresh, -60.0, 0.0, 0.0);
    addL (lCpRatio);  addS (sCpRatio);  initSlider (sCpRatio,  1.0, 20.0, 1.0);
    addL (lCpAtk);    addS (sCpAtk);    initSlider (sCpAtk,    0.1, 200.0, 10.0);
    addL (lCpRel);    addS (sCpRel);    initSlider (sCpRel,    5.0, 1000.0, 100.0);
    addL (lCpMake);   addS (sCpMake);   initSlider (sCpMake,  -12.0, 12.0, 0.0);

    addL (lLmThresh); addS (sLmThresh); initSlider (sLmThresh, -20.0, 0.0, 0.0);
    addL (lLmRel);    addS (sLmRel);    initSlider (sLmRel,     1.0, 200.0, 10.0);

    addL (lDrAmt); addS (sDrAmt); initSlider (sDrAmt, 0.0, 2.0, 0.0);
    addL (lDrMix); addS (sDrMix); initSlider (sDrMix, 0.0, 1.0, 0.0);

    addL (lGtThresh); addS (sGtThresh); initSlider (sGtThresh, -80.0, -20.0, -100.0);
    addL (lGtAtk);    addS (sGtAtk);    initSlider (sGtAtk,      0.1, 50.0, 1.0);
    addL (lGtRel);    addS (sGtRel);    initSlider (sGtRel,        5.0, 500.0, 50.0);

    addL (lTsRatio); addS (sTsRatio); initSlider (sTsRatio, 0.25, 6.0, 1.0);
    addL (lPtSemis); addS (sPtSemis); initSlider (sPtSemis, -24.0, 24.0, 0.0);
    addL (lPtRatio); addS (sPtRatio); initSlider (sPtRatio, 0.5, 2.0, 1.0);

    btnAudioSettings.addListener (this);
    btnCreateSynth.addListener (this);
    btnCreateSample.addListener (this);
    btnCreateNoise.addListener (this);
    btnCreateModular.addListener (this);
    btnLoadPreset.addListener (this);
    btnDestroy.addListener (this);
    btnDestroyRandom.addListener (this);
    btnDestroySelected.addListener (this);
    btnRandomPitch.addListener (this);
    btnRandomTime.addListener (this);
    btnResetFx.addListener (this);

    sliderGain.setRange (0.0, 1.0, 0.001);
    sliderGain.setSkewFactor (0.7);
    sliderGain.setValue (0.7);
    sliderGain.addListener (this);

    sliderPan.setRange (-1.0, 1.0, 0.001);
    sliderPan.setValue (0.0);
    sliderPan.addListener (this);

    lblStatus.setText ("Controlling Voice ID: -", juce::dontSendNotification);
    logView.setMultiLine (true); logView.setReadOnly (true); logView.setScrollbarsShown (true); logView.setCaretVisible (false);
    logView.setText ("[Harness] Ready\n");
    startTimerHz (15);

    // (Removed VCO verification instantiation and slider)

    // Load samples by searching upwards for 'audio/samples' from exe and CWD
    auto findSamplesDir = []() -> juce::File
    {
        juce::Array<juce::File> starts;
        starts.add (juce::File::getSpecialLocation (juce::File::currentExecutableFile).getParentDirectory());
        starts.add (juce::File::getCurrentWorkingDirectory());
        for (auto s : starts)
        {
            juce::File cur = s;
            for (int i = 0; i < 8; ++i)
            {
                juce::File candidate = cur.getChildFile ("audio").getChildFile ("samples");
                if (candidate.isDirectory())
                    return candidate;
                cur = cur.getParentDirectory();
            }
        }
        return {};
    };

    juce::File root = findSamplesDir();
    if (root.isDirectory())
    {
        OnScreenLogger::log ("[SampleBank] Searching samples in: " + root.getFullPathName());
        sampleBank.loadSamplesFromDirectory (root);
        samplesRoot = root;
        refreshDirectories();
        refreshSamples();
    }
    else
    {
        OnScreenLogger::log ("[SampleBank][WARN] Could not locate 'audio/samples' relative to exe or CWD.");
    }

    OnScreenLogger::log ("Harness: Constructor finished.");
}

// ----------- ListBoxModel (shared for both lists) -----------
int TestHarnessComponent::DirListModel::getNumRows() { return owner.dirNames.size(); }
void TestHarnessComponent::DirListModel::paintListBoxItem (int rowNumber, juce::Graphics& g, int width, int height, bool rowIsSelected)
{
    if (rowNumber < 0 || rowNumber >= owner.dirNames.size()) return;
    g.fillAll (rowIsSelected ? juce::Colours::dimgrey : juce::Colours::transparentBlack);
    g.setColour (juce::Colours::white);
    g.drawText (owner.dirNames[rowNumber], 6, 0, width - 12, height, juce::Justification::centredLeft);
}
void TestHarnessComponent::DirListModel::selectedRowsChanged (int /*lastRowSelected*/)
{
    owner.selectedDirIndex = owner.listDirs.getSelectedRow();
    owner.refreshSamples();
}
void TestHarnessComponent::DirListModel::listBoxItemClicked (int row, const juce::MouseEvent&)
{
    owner.selectedDirIndex = row;
    owner.listDirs.selectRow (row);
    owner.refreshSamples();
}
int TestHarnessComponent::SampleListModel::getNumRows() { return owner.sampleNames.size(); }
void TestHarnessComponent::SampleListModel::paintListBoxItem (int rowNumber, juce::Graphics& g, int width, int height, bool rowIsSelected)
{
    if (rowNumber < 0 || rowNumber >= owner.sampleNames.size()) return;
    g.fillAll (rowIsSelected ? juce::Colours::dimgrey : juce::Colours::transparentBlack);
    g.setColour (juce::Colours::white);
    g.drawText (owner.sampleNames[rowNumber], 6, 0, width - 12, height, juce::Justification::centredLeft);
}
void TestHarnessComponent::SampleListModel::selectedRowsChanged (int lastRowSelected)
{
    owner.selectedSampleIndex = lastRowSelected;
}

// -------- Voices list model --------
// --- VoiceListModel Methods ---
int TestHarnessComponent::VoiceListModel::getNumRows() { return (int)owner.engineVoices.size(); }

void TestHarnessComponent::VoiceListModel::paintListBoxItem (int rowNumber, juce::Graphics& g, int width, int height, bool rowIsSelected)
{
    g.fillAll (rowIsSelected ? juce::Colours::dimgrey : juce::Colours::transparentBlack);
    if (rowNumber >= 0 && rowNumber < (int)owner.engineVoices.size())
    {
        const auto& voiceInfo = owner.engineVoices[rowNumber];
        juce::String text = juce::String((juce::int64)voiceInfo.voiceId) + " - " + voiceInfo.voiceType;
        if (voiceInfo.displayName.isNotEmpty())
            text += " (" + voiceInfo.displayName + ")";
        g.setColour (juce::Colours::white);
        g.drawText (text, 6, 0, width - 12, height, juce::Justification::centredLeft);
    }
}

void TestHarnessComponent::VoiceListModel::listBoxItemClicked (int row, const juce::MouseEvent&)
{
    owner.listVoices.selectRow(row);
}

void TestHarnessComponent::VoiceListModel::selectedRowsChanged(int lastRowSelected)
{
    owner.setControlledVoiceByIndex(lastRowSelected);
}

void TestHarnessComponent::refreshDirectories()
{
    dirNames.clear(); dirPaths.clear();
    if (! samplesRoot.isDirectory()) return;
    auto sub = samplesRoot.findChildFiles (juce::File::findDirectories, false);
    sub.sort();
    for (auto& d : sub)
    {
        dirNames.add (d.getFileName());
        dirPaths.add (d);
    }
    listDirs.updateContent();
    if (selectedDirIndex < 0 && dirNames.size() > 0)
    {
        selectedDirIndex = 0;
        listDirs.selectRow (0);
    }
}

void TestHarnessComponent::refreshSamples()
{
    sampleNames.clear(); samplePaths.clear();
    if (selectedDirIndex >= 0 && selectedDirIndex < dirPaths.size())
    {
        auto dir = dirPaths[(int) selectedDirIndex];
        juce::Array<juce::File> files;
        files.addArray (dir.findChildFiles (juce::File::findFiles, false, "*.wav"));
        files.addArray (dir.findChildFiles (juce::File::findFiles, false, "*.aif"));
        files.addArray (dir.findChildFiles (juce::File::findFiles, false, "*.aiff"));
        files.sort();
        for (auto& f : files)
        {
            sampleNames.add (f.getFileName());
            samplePaths.add (f);
        }
    }
    listSamples.updateContent();
}

TestHarnessComponent::~TestHarnessComponent()
{
}

void TestHarnessComponent::setAudioEngine(AudioEngine* engine)
{
    audioEngine = engine;
    OnScreenLogger::log ("Harness: Connected to AudioEngine.");
}




void TestHarnessComponent::paint (juce::Graphics& g)
{
    g.fillAll (juce::Colours::black);
    g.setColour (juce::Colours::white);
    g.setFont (16.0f);
    g.drawFittedText ("Collider Audio Test Harness", getLocalBounds(), juce::Justification::centredTop, 1);
}

void TestHarnessComponent::resized()
{
	// Do not setSize() here; window size controlled in constructor and by host
	int x = 10, y = 40, w = juce::jmin (340, getWidth() - 20), h = 24, gap = 6;
    btnAudioSettings.setBounds (x, y, w, h); y += h + gap;
	btnCreateSynth.setBounds (x, y, w, h); y += h + gap;
	btnCreateSample.setBounds (x, y, w, h); y += h + gap;
	btnCreateNoise.setBounds (x, y, w, h); y += h + gap;
	btnCreateModular.setBounds (x, y, w, h); y += h + gap;
	btnLoadPreset.setBounds(x, y, w, h); y += h + gap;
	btnDestroy.setBounds (x, y, w, h); y += h + gap;
	btnDestroyRandom.setBounds (x, y, w, h); y += h + gap;
	btnDestroySelected.setBounds (x, y, w, h); y += h + gap;
	btnRandomPitch.setBounds (x, y, w, h); y += h + gap;
	btnRandomTime.setBounds (x, y, w, h); y += h + gap;
	btnResetFx.setBounds (x, y, w, h); y += h + gap;
	btnManualFx.setBounds (x, y, w, h); btnManualFx.setToggleState (true, juce::dontSendNotification); y += h + gap * 2;
    lEngine.setBounds (x, y, 70, h); comboEngine.setBounds (x + 75, y, w - 80, h); y += h + gap;

	lblGain.setBounds (x, y, 70, h); sliderGain.setBounds (x + 75, y, w - 80, h); y += h + gap;
	lblPan.setBounds (x, y, 70, h); sliderPan.setBounds (x + 75, y, w - 80, h); y += h + gap;
	btnChaos.setBounds (x, y, w, h); y += h + gap;
	lblStatus.setBounds (x, y, w, h); y += h + gap;
	lblDevice.setBounds (x, y, w, h); y += h + gap;
	lblVoices.setBounds (x, y, w, h); y += h + gap;
	lblPeak.setBounds (x, y, w, h); y += h + gap;

	// FX grid to the right with column wrap
	int gx = x + w + 20;
	int gy = 40;
	const int gw = 300;
	auto place = [&] (juce::Label& l, juce::Slider& s)
	{
		if (gy + h > getHeight() - 40)
		{
			gx += gw + 30;
			gy = 40;
		}
		l.setBounds (gx, gy, 100, h); s.setBounds (gx + 105, gy, gw - 110, h); gy += h + gap;
	};
	place (lFilterCutoff, sFilterCutoff);
	place (lFilterRes,    sFilterRes);
	place (lChRate,       sChRate);
	place (lChDepth,      sChDepth);
	place (lChMix,        sChMix);
	place (lPhRate,       sPhRate);
	place (lPhDepth,      sPhDepth);
	place (lPhCentre,     sPhCentre);
	place (lPhFb,         sPhFb);
	place (lPhMix,        sPhMix);
	place (lRvRoom,       sRvRoom);
	place (lRvDamp,       sRvDamp);
	place (lRvWidth,      sRvWidth);
	place (lRvMix,        sRvMix);
	place (lDlTime,       sDlTime);
	place (lDlFb,         sDlFb);
	place (lDlMix,        sDlMix);
	place (lCpThresh,     sCpThresh);
	place (lCpRatio,      sCpRatio);
	place (lCpAtk,        sCpAtk);
	place (lCpRel,        sCpRel);
	place (lCpMake,       sCpMake);
	place (lLmThresh,     sLmThresh);
	place (lLmRel,        sLmRel);
	place (lDrAmt,        sDrAmt);
	place (lDrMix,        sDrMix);
	place (lGtThresh,     sGtThresh);
	place (lGtAtk,        sGtAtk);
	place (lGtRel,        sGtRel);
	place (lTsRatio,      sTsRatio);
	place (lPtSemis,      sPtSemis);
	place (lPtRatio,      sPtRatio);

	int rightX = gx + gw + 30;
	int panelAreaW = getWidth() - (rightX + 40);
	int panelW = juce::jmin (500, panelAreaW / 2);
	int voicesW = juce::jmin (500, panelAreaW - panelW - 20);
	int totalH = getHeight() - 60;
	int dirsH = totalH / 2;
	int samH  = totalH - dirsH - 10;
	listDirs.setBounds (rightX, 40, panelW, dirsH);
	listSamples.setBounds (rightX, 40 + dirsH + 10, panelW, samH);
	listVoices.setBounds (rightX + panelW + 20, 40, voicesW, totalH);
	logView.setBounds (rightX + panelW + 20 + voicesW + 20, 40, getWidth() - (rightX + panelW + 20 + voicesW + 30), getHeight() - 50);
}

void TestHarnessComponent::comboBoxChanged (juce::ComboBox* c)
{
    if (c != &comboEngine) return;
    if (!audioEngine || controlledVoiceId == 0) return;
    // Send engine selection as a dedicated Update param understood by SampleVoiceProcessor via APVTS
    Command cmd; cmd.type = Command::Type::Update; cmd.voiceId = controlledVoiceId;
    cmd.paramName = "engine"; // mirrored by SampleLoader in Preset Creator
    cmd.paramValue = (float) (comboEngine.getSelectedId() == 2 ? 1.0f : 0.0f); // 0=RB, 1=Naive
    audioEngine->getCommandBus().enqueueLatest (cmd);
    OnScreenLogger::log ("[UI] Engine set to: " + comboEngine.getText());
}

void TestHarnessComponent::buttonClicked (juce::Button* b)
{
    // Ensure the engine is connected before sending any commands
    if (audioEngine == nullptr) {
        OnScreenLogger::log("[UI] ERROR: No AudioEngine connected!");
        return;
    }

    // --- Create Logic ---
    if (b == &btnCreateSynth || b == &btnCreateSample || b == &btnCreateNoise || b == &btnCreateModular)
    {
        Command cmd;
        cmd.type = Command::Type::Create;
        cmd.voiceId = juce::Time::getMillisecondCounterHiRes();

        if (b == &btnCreateSynth) {
            cmd.voiceType = "synth";
            OnScreenLogger::log("[UI] Sending CREATE command for Synth voice...");
            audioEngine->getCommandBus().enqueue(cmd);
        }
        else if (b == &btnCreateNoise) {
            cmd.voiceType = "noise";
            OnScreenLogger::log("[UI] Sending CREATE command for Noise voice...");
            audioEngine->getCommandBus().enqueue(cmd);
        }
        else if (b == &btnCreateModular) {
            cmd.voiceType = "modular";
            OnScreenLogger::log("[UI] Sending CREATE command for Modular voice...");
            audioEngine->getCommandBus().enqueue(cmd);
        }
        else if (b == &btnCreateSample) {
            if (selectedSampleIndex >= 0 && selectedSampleIndex < samplePaths.size()) {
                cmd.voiceType = "sample";
                cmd.resourceName = samplePaths[(int)selectedSampleIndex].getFullPathName();
                OnScreenLogger::log("[UI] Sending CREATE command for Sample voice: " + cmd.resourceName);
                audioEngine->getCommandBus().enqueue(cmd);
            } else {
                OnScreenLogger::log("[UI] No sample selected. Cannot create sample voice.");
            }
        }
    }
    // --- Load Preset for Modular ---
    else if (b == &btnLoadPreset)
    {
        // 1. Check if a voice is selected.
        if (controlledVoiceId == 0)
        {
            OnScreenLogger::log("[UI] ERROR: No voice selected to load preset into.");
            return;
        }

        // 2. Verify that the selected voice is a Modular voice.
        bool isModular = false;
        for (const auto& voiceInfo : engineVoices)
        {
            if (voiceInfo.voiceId == controlledVoiceId && voiceInfo.voiceType == "Modular")
            {
                isModular = true;
                break;
            }
        }

        if (!isModular)
        {
            OnScreenLogger::log("[UI] ERROR: The selected voice is not a Modular Synth.");
            return;
        }

        // 3. Launch the file chooser.
        loadChooser = std::make_unique<juce::FileChooser>("Load Modular Preset", juce::File{}, "*.xml");
        auto chooserFlags = juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectFiles;

        loadChooser->launchAsync(chooserFlags, [this](const juce::FileChooser& fc)
        {
            auto f = fc.getResult();
            if (f.existsAsFile())
            {
                // 4. Read file content and create the command.
                Command cmd;
                cmd.type = Command::Type::LoadPreset;
                cmd.voiceId = controlledVoiceId;
                cmd.presetData = f.loadFileAsString();

                // 5. Send the command to the engine.
                if (audioEngine)
                {
                    audioEngine->getCommandBus().enqueue(cmd);
                    OnScreenLogger::log("[UI] Sent LoadPreset command for voice " + juce::String((juce::int64)controlledVoiceId));
                }
            }
        });
    }

    // --- Destroy Logic ---
    else if (b == &btnDestroySelected || b == &btnDestroy) // Treat "Destroy" and "Destroy Selected" as the same action
    {
        if (controlledVoiceId != 0) {
            Command cmd;
            cmd.type = Command::Type::Destroy;
            cmd.voiceId = controlledVoiceId;
            audioEngine->getCommandBus().enqueue(cmd);
            OnScreenLogger::log("[UI] Sending DESTROY command for selected voice ID: " + juce::String((juce::int64)controlledVoiceId));
            controlledVoiceId = 0; // De-select the voice since it's being deleted
        } else {
            OnScreenLogger::log("[UI] No voice selected to destroy.");
        }
    }
    // --- Audio Settings Dialog ---
    else if (b == &btnAudioSettings)
    {
        if (audioSetupComp == nullptr)
        {
            audioSetupComp = std::make_unique<juce::AudioDeviceSelectorComponent>(
                deviceManager,
                0, 256,   // min/max inputs
                0, 256,   // min/max outputs
                true, false, false, false);
        }
        audioSetupComp->setSize(500, 450);
        juce::DialogWindow::LaunchOptions o;
        o.content.setOwned(audioSetupComp.get());
        o.content.get()->setSize(500, 450);
        o.dialogTitle = "Audio Settings";
        o.dialogBackgroundColour = juce::Colours::darkgrey;
        o.escapeKeyTriggersCloseButton = true;
        o.resizable = false;
        o.launchAsync();
    }
    else if (b == &btnDestroyRandom)
    {
        if (!engineVoices.empty()) {
            auto& rng = juce::Random::getSystemRandom();
            const int index = rng.nextInt((int)engineVoices.size());
            const juce::uint64 idToDestroy = engineVoices[index].voiceId;
            
            Command cmd;
            cmd.type = Command::Type::Destroy;
            cmd.voiceId = idToDestroy;
            audioEngine->getCommandBus().enqueue(cmd);
            OnScreenLogger::log("[UI] Sending DESTROY command for random voice ID: " + juce::String((juce::int64)idToDestroy));
            
            if (controlledVoiceId == idToDestroy) {
                controlledVoiceId = 0; // De-select if it was the one deleted
            }
        } else {
            OnScreenLogger::log("[UI] No voices to destroy at random.");
        }
    }
    else
    {
        OnScreenLogger::log("[UI] Button '" + b->getButtonText() + "' is not yet wired to the AudioEngine.");
    }
}

void TestHarnessComponent::sliderValueChanged (juce::Slider* s)
{
    if (isSyncingSliders) return;
    // Ensure the engine is connected before sending any commands
    if (audioEngine == nullptr) {
        OnScreenLogger::log("[UI] ERROR: No AudioEngine connected!");
        return;
    }

    // Create a lambda for sending update commands
    auto set = [this] (const char* id, double v)
    {
        OnScreenLogger::log("[UI LOG] Slider for '" + juce::String(id) + "' was moved.");
        
        if (audioEngine && controlledVoiceId != 0)
        {
            Command cmd;
            cmd.type = Command::Type::Update;
            cmd.voiceId = controlledVoiceId;
            cmd.paramName = id;
            cmd.paramValue = (float)v;
            audioEngine->getCommandBus().enqueue(cmd);
            OnScreenLogger::log("[UI LOG] Sent UPDATE command for '" + juce::String(id) + "' to AudioEngine.");
        }
        else
        {
            OnScreenLogger::log("[UI LOG] ERROR: No voice selected!");
        }
    };

    if (s == &sliderGain)
    {
        set("gain", sliderGain.getValue());
    }
    else if (s == &sliderPan)
    {
        set("pan", sliderPan.getValue());
    }
    else if (btnManualFx.getToggleState())
    {
        if (s == &sFilterCutoff) set ("filterCutoff", s->getValue());
        else if (s == &sFilterRes) set ("filterResonance", s->getValue());
        else if (s == &sChRate) set ("chorusRate", s->getValue());
        else if (s == &sChDepth) set ("chorusDepth", s->getValue());
        else if (s == &sChMix) set ("chorusMix", s->getValue());
        else if (s == &sPhRate) set ("phaserRate", s->getValue());
        else if (s == &sPhDepth) set ("phaserDepth", s->getValue());
        else if (s == &sPhCentre) set ("phaserCentre", s->getValue());
        else if (s == &sPhFb) set ("phaserFeedback", s->getValue());
        else if (s == &sPhMix) set ("phaserMix", s->getValue());
        else if (s == &sRvRoom) set ("reverbRoom", s->getValue());
        else if (s == &sRvDamp) set ("reverbDamp", s->getValue());
        else if (s == &sRvWidth) set ("reverbWidth", s->getValue());
        else if (s == &sRvMix) set ("reverbMix", s->getValue());
        else if (s == &sDlTime) set ("delayTimeMs", s->getValue());
        else if (s == &sDlFb) set ("delayFeedback", s->getValue());
        else if (s == &sDlMix) set ("delayMix", s->getValue());
        else if (s == &sCpThresh) set ("compThreshold", s->getValue());
        else if (s == &sCpRatio) set ("compRatio", s->getValue());
        else if (s == &sCpAtk) set ("compAttackMs", s->getValue());
        else if (s == &sCpRel) set ("compReleaseMs", s->getValue());
        else if (s == &sCpMake) set ("compMakeup", s->getValue());
        else if (s == &sLmThresh) set ("limitThreshold", s->getValue());
        else if (s == &sLmRel) set ("limitReleaseMs", s->getValue());
        else if (s == &sDrAmt) set ("driveAmount", s->getValue());
        else if (s == &sDrMix) set ("driveMix", s->getValue());
        else if (s == &sGtThresh) set ("gateThreshold", s->getValue());
        else if (s == &sGtAtk) set ("gateAttackMs", s->getValue());
        else if (s == &sGtRel) set ("gateReleaseMs", s->getValue());
        else if (s == &sTsRatio) set ("timeStretchRatio", s->getValue());
        else if (s == &sPtSemis) set ("pitchSemitones", s->getValue());
        else if (s == &sPtRatio) set ("pitchRatio", s->getValue());
    }
}

// --- Sync Timer ---
void TestHarnessComponent::timerCallback()
{
    if (audioEngine)
    {
        auto currentEngineVoices = audioEngine->getActiveVoicesInfo();
        // Check if the list has changed before updating the UI to prevent flickering
        if (currentEngineVoices.size() != engineVoices.size()) // A simple check is enough for now
        {
            engineVoices.clear();
            for (const auto& voice : currentEngineVoices)
            {
                AudioEngine::VoiceInfo info;
                info.voiceId = voice.voiceId;
                info.voiceType = voice.voiceType;
                info.displayName = voice.displayName;
                engineVoices.push_back(info);
            }
            listVoices.updateContent();
            lblVoices.setText("Voices: " + juce::String((int)engineVoices.size()), juce::dontSendNotification);
        }
        
        // Update peak level display
        auto stats = audioEngine->getRuntimeStats();
        lblPeak.setText("Peak: " + juce::String(stats.lastPeak, 3), juce::dontSendNotification);
        
        // Update device info display
        lblDevice.setText("Device: " + juce::String(stats.sampleRate, 0) + "Hz, " + 
                         juce::String(stats.blockSize) + " samples", juce::dontSendNotification);
        
        // Route engine logs to UI
        auto engineLogs = audioEngine->drainLogs();
        for (const auto& log : engineLogs) {
            OnScreenLogger::log(log);
        }
    }
}

void TestHarnessComponent::refreshVoicesList()
{
    listVoices.updateContent();
}

void TestHarnessComponent::syncSlidersWithSelectedVoice()
{
    if (!audioEngine || controlledVoiceId == 0) return;

    isSyncingSliders = true;

    auto syncSlider = [&](juce::Slider& slider, const juce::String& paramId)
    {
        float value = audioEngine->getVoiceParameterValue(controlledVoiceId, paramId);
        slider.setValue(value, juce::dontSendNotification);
    };

    // Core & Time/Pitch
    syncSlider(sliderGain, "gain");
    syncSlider(sliderPan, "pan");
    syncSlider(sTsRatio, "timeStretchRatio");
    syncSlider(sPtSemis, "pitchSemitones");
    syncSlider(sPtRatio, "pitchRatio");

    // Filter
    syncSlider(sFilterCutoff, "filterCutoff");
    syncSlider(sFilterRes,    "filterResonance");

    // Chorus
    syncSlider(sChRate,  "chorusRate");
    syncSlider(sChDepth, "chorusDepth");
    syncSlider(sChMix,   "chorusMix");

    // Phaser
    syncSlider(sPhRate,   "phaserRate");
    syncSlider(sPhDepth,  "phaserDepth");
    syncSlider(sPhCentre, "phaserCentre");
    syncSlider(sPhFb,     "phaserFeedback");
    syncSlider(sPhMix,    "phaserMix");

    // Reverb
    syncSlider(sRvRoom,  "reverbRoom");
    syncSlider(sRvDamp,  "reverbDamp");
    syncSlider(sRvWidth, "reverbWidth");
    syncSlider(sRvMix,   "reverbMix");

    // Delay
    syncSlider(sDlTime, "delayTimeMs");
    syncSlider(sDlFb,   "delayFeedback");
    syncSlider(sDlMix,  "delayMix");

    // Compressor
    syncSlider(sCpThresh, "compThreshold");
    syncSlider(sCpRatio,  "compRatio");
    syncSlider(sCpAtk,    "compAttackMs");
    syncSlider(sCpRel,    "compReleaseMs");
    syncSlider(sCpMake,   "compMakeup");

    // Limiter
    syncSlider(sLmThresh, "limitThreshold");
    syncSlider(sLmRel,    "limitReleaseMs");

    // Drive
    syncSlider(sDrAmt, "driveAmount");
    syncSlider(sDrMix, "driveMix");

    // Gate
    syncSlider(sGtThresh, "gateThreshold");
    syncSlider(sGtAtk,    "gateAttackMs");
    syncSlider(sGtRel,    "gateReleaseMs");

    isSyncingSliders = false;
}

// --- Control Logic ---
void TestHarnessComponent::setControlledVoiceByIndex (int index)
{
    if (index >= 0 && index < (int)engineVoices.size())
    {
        controlledVoiceId = engineVoices[index].voiceId;
        OnScreenLogger::log("[UI] Selected voice ID: " + juce::String((juce::int64)controlledVoiceId));
        syncSlidersWithSelectedVoice(); // Sync UI with voice parameters
    }
    else
    {
        controlledVoiceId = 0;
    }
    lblStatus.setText("Controlling Voice ID: " + (controlledVoiceId != 0 ? juce::String((juce::int64)controlledVoiceId) : "-"), juce::dontSendNotification);
}



================================================================================
FILE: juce\Source\ui\MainComponent.cpp
================================================================================


#include "MainComponent.h"
#include "../audio/AudioEngine.h"

struct ConnTimer : public juce::Timer {
    MainComponent& mc;
    ConnTimer (MainComponent& m) : mc (m) { startTimerHz (10); }
    void timerCallback() override {
        mc.connLabel.setText ("OSC: listening", juce::dontSendNotification);
    }
};

MainComponent::MainComponent()
    : testHarness(deviceManager) // Initialize testHarness with deviceManager in member initializer list
{
    // Create audio engine (OSC + graph, acts as AudioSource)
    audioEngine = std::make_unique<AudioEngine>(deviceManager);
    
    // Make the UI visible
    addAndMakeVisible(testHarness);
    
    // THIS IS THE CRITICAL CONNECTION:
    // Pass the engine pointer to the UI component.
    testHarness.setAudioEngine(audioEngine.get());

    // Open default audio device on this MainComponent (the AudioAppComponent)
    setAudioChannels (2, 2); // Request 2 input channels, 2 output channels

    setSize(1600, 900); // Set a default size for the main window
}

MainComponent::~MainComponent()
{
    // Close audio device on MainComponent
    shutdownAudio();
}

void MainComponent::paint (juce::Graphics& g)
{
    g.fillAll (juce::Colours::black);
    g.setColour (juce::Colours::white);
    g.setFont (16.0f);
    g.drawFittedText ("Collider Audio Engine (JUCE)", getLocalBounds(), juce::Justification::centredTop, 1);
}

void MainComponent::resized()
{
    // Make the TestHarnessComponent fill the entire window.
    testHarness.setBounds(getLocalBounds());
}

void MainComponent::prepareToPlay (int samplesPerBlockExpected, double sampleRate)
{
    juce::Logger::writeToLog ("[APP] MainComponent::prepareToPlay called");
    // Log current audio device selection for diagnostics
    {
        juce::AudioDeviceManager::AudioDeviceSetup setup; deviceManager.getAudioDeviceSetup (setup);
        auto* dev = deviceManager.getCurrentAudioDevice();
        juce::Logger::writeToLog ("[APP] Audio device: out='" + setup.outputDeviceName
                                  + "' sr=" + juce::String (dev ? dev->getCurrentSampleRate() : 0.0)
                                  + " bs=" + juce::String (dev ? dev->getCurrentBufferSizeSamples() : 0));
    }
    if (audioEngine)
        audioEngine->prepareToPlay (samplesPerBlockExpected, sampleRate);
}

void MainComponent::getNextAudioBlock (const juce::AudioSourceChannelInfo& bufferToFill)
{
    if (audioEngine)
        audioEngine->getNextAudioBlock (bufferToFill);
    else if (bufferToFill.buffer != nullptr)
        bufferToFill.buffer->clear();
}

void MainComponent::releaseResources()
{
    juce::Logger::writeToLog ("[APP] MainComponent::releaseResources called");
    if (audioEngine)
        audioEngine->releaseResources();
}




================================================================================
FILE: juce\Source\ui\MainComponent.h
================================================================================


#pragma once

#include <juce_gui_extra/juce_gui_extra.h>
#include <juce_audio_utils/juce_audio_utils.h>
#include "VisualiserComponent.h"
#include "TestHarnessComponent.h" // Add this include

// Forward declarations for audio stubs
class AudioEngine;
class CommandProcessor;

class MainComponent : public juce::AudioAppComponent
{
public:
    MainComponent();
    ~MainComponent() override;

    void paint (juce::Graphics&) override;
    void resized() override;

    // AudioAppComponent hooks (pass-through to AudioEngine)
    void prepareToPlay (int samplesPerBlockExpected, double sampleRate) override;
    void getNextAudioBlock (const juce::AudioSourceChannelInfo& bufferToFill) override;
    void releaseResources() override;

private:
    juce::Label statusLabel;
    juce::Slider masterVolumeSlider;
public:
    juce::Label connLabel;
    juce::Timer* timerHook { nullptr };
    std::unique_ptr<AudioEngine> audioEngine;
    TestHarnessComponent testHarness; // ADD THIS
    std::unique_ptr<VisualiserComponent> visualiser;
};




================================================================================
FILE: juce\Source\ui\VisualiserComponent.h
================================================================================


// Rationale: VisualiserComponent renders a minimal debug dashboard of the
// listener and active voices using the VisualiserState from AudioEngine.
#pragma once

#include <juce_gui_extra/juce_gui_extra.h>
#include "DebugInfo.h"

class AudioEngine;

class VisualiserComponent : public juce::Component, private juce::Timer
{
public:
    explicit VisualiserComponent (AudioEngine& engineRef);
    ~VisualiserComponent() override;

    void paint (juce::Graphics& g) override;
    void resized() override;

private:
    void timerCallback() override;
    juce::Point<int> worldToScreen (juce::Point<float> p) const;
    void drawLegend (juce::Graphics& g) const;

    AudioEngine& engine;
    // World coordinate bounds (from Python game): origin at (0,0), width=1920, height=1080
    juce::Rectangle<float> worldBounds { 0.0f, 0.0f, 1920.0f, 1080.0f };
};




================================================================================
FILE: juce\Source\ui\VisualiserComponent.cpp
================================================================================


#include "VisualiserComponent.h"
#include "DebugInfo.h"
#include "../audio/AudioEngine.h"

VisualiserComponent::VisualiserComponent (AudioEngine& engineRef)
    : engine (engineRef)
{
    startTimerHz (30);
}

VisualiserComponent::~VisualiserComponent()
{
    stopTimer();
}

void VisualiserComponent::timerCallback()
{
    repaint();
}

void VisualiserComponent::paint (juce::Graphics& g)
{
    g.fillAll (juce::Colours::black);

    auto state = engine.getVisualiserState();

    // Draw listener
    g.setColour (juce::Colours::white);
    auto lp = worldToScreen (state.listenerPosition);
    g.fillEllipse ((float) lp.x - 6.0f, (float) lp.y - 6.0f, 12.0f, 12.0f);

    // Draw voices
    for (auto& v : state.voices)
    {
        juce::Colour c = juce::Colours::grey;
        switch (v.state)
        {
            case VoiceDebugState::Playing:  c = juce::Colours::yellow; break;
            case VoiceDebugState::Stopping: c = juce::Colours::orange; break;
            case VoiceDebugState::Clipping: c = juce::Colours::red;    break;
            case VoiceDebugState::Prepared: c = juce::Colours::cornflowerblue; break;
            case VoiceDebugState::Silent:   c = juce::Colours::darkgrey; break;
            case VoiceDebugState::Error:    c = juce::Colours::deeppink; break;
            case VoiceDebugState::Created:  c = juce::Colours::lightblue; break;
        }
        g.setColour (c);
        auto p = worldToScreen (v.position);
        g.fillEllipse ((float) p.x - 4.0f, (float) p.y - 4.0f, 8.0f, 8.0f);
    }

    drawLegend (g);
}

void VisualiserComponent::resized()
{
}

juce::Point<int> VisualiserComponent::worldToScreen (juce::Point<float> p) const
{
    auto screen = getLocalBounds();
    const float wx0 = worldBounds.getX();
    const float wy0 = worldBounds.getY();
    const float wx1 = worldBounds.getRight();
    const float wy1 = worldBounds.getBottom();

    // Map X: [wx0, wx1] -> [screen.getX(), screen.getRight()]
    const float sx = juce::jmap (p.x, wx0, wx1, (float) screen.getX(), (float) screen.getRight());

    // Map Y (invert): game Y increases up, screen Y increases down
    // World Y=wy0 (bottom) should map to screen.getBottom()
    // World Y=wy1 (top)    should map to screen.getY()
    const float sy = juce::jmap (p.y, wy0, wy1, (float) screen.getBottom(), (float) screen.getY());

    const int ix = juce::jlimit (screen.getX(), screen.getRight(), (int) std::lround (sx));
    const int iy = juce::jlimit (screen.getY(), screen.getBottom(), (int) std::lround (sy));
    return { ix, iy };
}

void VisualiserComponent::drawLegend (juce::Graphics& g) const
{
    juce::Rectangle<int> panel (10, getHeight() - 110, 260, 100);
    g.setColour (juce::Colours::black.withAlpha (0.6f));
    g.fillRoundedRectangle (panel.toFloat(), 6.0f);
    g.setColour (juce::Colours::white);
    g.drawText ("Legend:", panel.removeFromTop (18), juce::Justification::left);

    auto row = [&](juce::Colour col, const juce::String& text, int y) {
        g.setColour (col); g.fillEllipse (14.0f, (float) y + 4.0f, 8.0f, 8.0f);
        g.setColour (juce::Colours::white); g.drawText (text, 30, y, 220, 16, juce::Justification::left);
    };
    int baseY = getHeight() - 88;
    row (juce::Colours::yellow, "Playing", baseY);
    row (juce::Colours::orange, "Stopping", baseY + 16);
    row (juce::Colours::red,    "Clipping", baseY + 32);
    row (juce::Colours::cornflowerblue, "Prepared", baseY + 48);
    row (juce::Colours::darkgrey, "Silent", baseY + 64);
}




================================================================================
FILE: juce\Source\ui\TestHarnessComponent.h
================================================================================


#pragma once

#include <juce_gui_extra/juce_gui_extra.h>
#include <juce_audio_utils/juce_audio_utils.h>
#include <juce_dsp/juce_dsp.h>
#include "../audio/graph/VoiceProcessor.h"
#include "../audio/assets/SampleBank.h"

// Forward declaration
class AudioEngine;
#include "../audio/AudioEngine.h"

// Simple on-screen logger used by the harness
struct OnScreenLogger
{
    static void attach (juce::TextEditor* editor);
    static void log (const juce::String& msg);
};

class TestHarnessComponent : public juce::Component, // Changed from AudioAppComponent
                             private juce::Button::Listener,
                             private juce::Slider::Listener,
                             private juce::ComboBox::Listener,
                             private juce::Timer
{
public:
    // Accept the shared AudioDeviceManager from the parent so we can show audio settings
    TestHarnessComponent(juce::AudioDeviceManager& adm);
    ~TestHarnessComponent() override;

    void prepareToPlay (int samplesPerBlockExpected, double sampleRate);
    void getNextAudioBlock (const juce::AudioSourceChannelInfo& bufferToFill);
    void releaseResources();

    void paint (juce::Graphics&) override;
    void resized() override;
    void timerCallback() override;
    
    // Connection to AudioEngine
    void setAudioEngine(AudioEngine* engine);
    // List models (nested types)
    struct DirListModel : public juce::ListBoxModel {
        DirListModel(TestHarnessComponent& ownerRef) : owner(ownerRef) {}
        int getNumRows() override;
        void paintListBoxItem (int rowNumber, juce::Graphics& g, int width, int height, bool rowIsSelected) override;
        void selectedRowsChanged (int lastRowSelected) override;
        void listBoxItemClicked (int row, const juce::MouseEvent&) override;
        TestHarnessComponent& owner;
    };
    struct SampleListModel : public juce::ListBoxModel {
        SampleListModel(TestHarnessComponent& ownerRef) : owner(ownerRef) {}
        int getNumRows() override;
        void paintListBoxItem (int rowNumber, juce::Graphics& g, int width, int height, bool rowIsSelected) override;
        void selectedRowsChanged (int lastRowSelected) override;
        TestHarnessComponent& owner;
    };

    struct VoiceListModel : public juce::ListBoxModel {
        VoiceListModel(TestHarnessComponent& ownerRef) : owner(ownerRef) {}
        int getNumRows() override;
        void paintListBoxItem (int rowNumber, juce::Graphics& g, int width, int height, bool rowIsSelected) override;
        void selectedRowsChanged (int lastRowSelected) override;
        void listBoxItemClicked (int row, const juce::MouseEvent&) override;
        TestHarnessComponent& owner;
    };

private:
    void buttonClicked (juce::Button* b) override;
    void sliderValueChanged (juce::Slider* s) override;
    void comboBoxChanged (juce::ComboBox* c) override;

    // AudioEngine connection
    AudioEngine* audioEngine = nullptr;
    
    // This vector will hold the synced voice list from the engine
    std::vector<AudioEngine::VoiceInfo> engineVoices;
    juce::uint64 controlledVoiceId { 0 };
    bool isSyncingSliders = false;

    juce::AudioBuffer<float> tempMixBuffer; // For manual mixing
    
    // --- Audio settings integration ---
    juce::AudioDeviceManager& deviceManager; // reference to shared device manager
    std::unique_ptr<juce::AudioDeviceSelectorComponent> audioSetupComp;
    juce::TextButton btnAudioSettings { "Audio Settings..." };
    SampleBank sampleBank; // To provide samples
    juce::TextButton btnCreateSynth { "Create Synth" };
    juce::TextButton btnCreateSample { "Create Sample" };
    juce::TextButton btnCreateNoise { "Create Noise" };
    juce::TextButton btnCreateModular { "Create Modular" };
    juce::TextButton btnLoadPreset { "Load Preset for Modular" };
    juce::TextButton btnDestroy { "Destroy Last Voice" };
    juce::TextButton btnDestroyRandom { "Destroy Random Voice" };
    juce::TextButton btnDestroySelected { "Destroy Selected Voice" };
    juce::TextButton btnRandomPitch { "Random Pitch" };
    juce::TextButton btnRandomTime { "Random Time" };
    juce::TextButton btnResetFx { "Reset FX Defaults" };
    juce::ToggleButton btnChaos { "Enable Chaos Mode" };
    juce::Slider sliderGain, sliderPan;
    juce::Label lblGain { {}, "Gain" }, lblPan { {}, "Pan" }, lblStatus;
    juce::Label lblDevice { {}, "Device: -" }, lblVoices { {}, "Voices: 0" }, lblPeak { {}, "Peak: 0.0" };
    juce::TextEditor logView;
    juce::ToggleButton btnManualFx { "Manual FX Control" };
    juce::Label lEngine { {}, "Engine" };
    juce::ComboBox comboEngine;

    // FX sliders
    juce::Slider sFilterCutoff, sFilterRes, sChRate, sChDepth, sChMix;
    juce::Slider sPhRate, sPhDepth, sPhCentre, sPhFb, sPhMix;
    juce::Slider sRvRoom, sRvDamp, sRvWidth, sRvMix;
    juce::Slider sDlTime, sDlFb, sDlMix;
    juce::Slider sCpThresh, sCpRatio, sCpAtk, sCpRel, sCpMake;
    juce::Slider sLmThresh, sLmRel;
    juce::Slider sDrAmt, sDrMix;
    juce::Slider sGtThresh, sGtAtk, sGtRel;
    juce::Slider sTsRatio, sPtSemis;

    juce::Label lFilterCutoff { {}, "Filt Cutoff" }, lFilterRes { {}, "Filt Q" }, lChRate { {}, "Ch Rate" }, lChDepth { {}, "Ch Depth" }, lChMix { {}, "Ch Mix" };
    juce::Label lPhRate { {}, "Ph Rate" }, lPhDepth { {}, "Ph Depth" }, lPhCentre { {}, "Ph Ctr" }, lPhFb { {}, "Ph FB" }, lPhMix { {}, "Ph Mix" };
    juce::Label lRvRoom { {}, "Rv Room" }, lRvDamp { {}, "Rv Damp" }, lRvWidth { {}, "Rv Width" }, lRvMix { {}, "Rv Mix" };
    juce::Label lDlTime { {}, "Dly ms" }, lDlFb { {}, "Dly FB" }, lDlMix { {}, "Dly Mix" };
    juce::Label lCpThresh { {}, "Cp Thr" }, lCpRatio { {}, "Cp Ratio" }, lCpAtk { {}, "Cp Atk" }, lCpRel { {}, "Cp Rel" }, lCpMake { {}, "Cp Make" };
    juce::Label lLmThresh { {}, "Lm Thr" }, lLmRel { {}, "Lm Rel" };
    juce::Label lDrAmt { {}, "Drv Amt" }, lDrMix { {}, "Drv Mix" };
    juce::Label lGtThresh { {}, "Gate Thr" }, lGtAtk { {}, "Gate Atk" }, lGtRel { {}, "Gate Rel" };
    juce::Label lTsRatio { {}, "Time" }, lPtSemis { {}, "Pitch" };
    juce::Slider sPtRatio; juce::Label lPtRatio { {}, "Pitch x" };

    // Sample loader UI
    juce::ListBox listDirs { "Folders" };
    juce::ListBox listSamples { "Samples" };
    juce::ListBox listVoices { "Voices" };
    DirListModel dirModel { *this };
    SampleListModel sampleModel { *this };
    VoiceListModel voiceModel { *this };
    juce::StringArray dirNames;
    juce::Array<juce::File> dirPaths;
    juce::StringArray sampleNames;
    juce::Array<juce::File> samplePaths;
    int selectedDirIndex { -1 };
    int selectedSampleIndex { -1 };
    juce::File samplesRoot;
    std::unique_ptr<juce::FileChooser> loadChooser;

    void refreshDirectories();
    void refreshSamples();
    void refreshVoicesList();
    void syncSlidersWithSelectedVoice();
    void setControlledVoiceByIndex (int index);

    juce::uint64 lastVoiceId { 0 };
    bool hasEngineConfirmedReady { false };
    double harnessStartMs { 0.0 };
    // (Adapter handles modular voices as normal VoiceProcessor instances)

    // (Removed VCO verification fields)
};




================================================================================
FILE: juce\Source\audio\modules\ADSRModuleProcessor.cpp
================================================================================


#include "ADSRModuleProcessor.h"

ADSRModuleProcessor::ADSRModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(6), true) // ch0 Gate, ch1 Trigger, ch2-5 mods
                        .withOutput("Output", juce::AudioChannelSet::quadraphonic(), true)),
      apvts (*this, nullptr, "ADSRParams", createParameterLayout())
{
    attackParam  = apvts.getRawParameterValue (paramIdAttack);
    decayParam   = apvts.getRawParameterValue (paramIdDecay);
    sustainParam = apvts.getRawParameterValue (paramIdSustain);
    releaseParam = apvts.getRawParameterValue (paramIdRelease);
    attackModParam  = apvts.getRawParameterValue (paramIdAttackMod);
    decayModParam   = apvts.getRawParameterValue (paramIdDecayMod);
    sustainModParam = apvts.getRawParameterValue (paramIdSustainMod);
    releaseModParam = apvts.getRawParameterValue (paramIdReleaseMod);
    
    // CORRECTED INITIALIZATION:
    // Create unique_ptrs to heap-allocated atomics for each output channel.
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Channel 0
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Channel 1
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Channel 2
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Channel 3
}

juce::AudioProcessorValueTreeState::ParameterLayout ADSRModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdAttack,  "Attack",  juce::NormalisableRange<float> (0.001f, 5.0f, 0.01f, 0.4f), 0.01f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdDecay,   "Decay",   juce::NormalisableRange<float> (0.001f, 5.0f, 0.01f, 0.4f), 0.1f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdSustain, "Sustain", juce::NormalisableRange<float> (0.0f, 1.0f), 0.7f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdRelease, "Release", juce::NormalisableRange<float> (0.001f, 5.0f, 0.01f, 0.4f), 0.2f));
    
    // Add modulation parameters
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdAttackMod,  "Attack Mod",  0.0f, 1.0f, 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdDecayMod,   "Decay Mod",   0.0f, 1.0f, 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdSustainMod, "Sustain Mod", 0.0f, 1.0f, 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdReleaseMod, "Release Mod", 0.0f, 1.0f, 0.0f));
    return { p.begin(), p.end() };
}

void ADSRModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sr = sampleRate > 0.0 ? sampleRate : 44100.0;
    eorPending = eocPending = 0; envLevel = 0.0f; lastGate = false; lastTrigger = false; stage = Stage::Idle;
}

void ADSRModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    // Read CV from input buses (if connected)
    float attackModCV = 0.5f;   // Default to neutral (0.5)
    float decayModCV = 0.5f;    // Default to neutral (0.5)
    float sustainModCV = 0.5f;  // Default to neutral (0.5)
    float releaseModCV = 0.5f;  // Default to neutral (0.5)
    
    // Get single bus for all modulation inputs
    auto inBus = getBusBuffer(buffer, true, 0);
    
    // Check if attack mod is connected and read CV (channel 2)
    if (isParamInputConnected(paramIdAttackMod) && inBus.getNumChannels() > 2)
        attackModCV = inBus.getReadPointer(2)[0]; // Read first sample
    
    // Check if decay mod is connected and read CV (channel 3)
    if (isParamInputConnected(paramIdDecayMod) && inBus.getNumChannels() > 3)
        decayModCV = inBus.getReadPointer(3)[0]; // Read first sample
    
    // Check if sustain mod is connected and read CV (channel 4)
    if (isParamInputConnected(paramIdSustainMod) && inBus.getNumChannels() > 4)
        sustainModCV = inBus.getReadPointer(4)[0]; // Read first sample
    
    // Check if release mod is connected and read CV (channel 5)
    if (isParamInputConnected(paramIdReleaseMod) && inBus.getNumChannels() > 5)
        releaseModCV = inBus.getReadPointer(5)[0]; // Read first sample

    const float aBase = attackParam  ? attackParam->load()  : 0.01f;
    const float dBase = decayParam   ? decayParam->load()   : 0.10f;
    const float sBase = sustainParam ? sustainParam->load() : 0.70f;
    const float rBase = releaseParam ? releaseParam->load() : 0.20f;

    // Relative modulation: 0.5 = neutral. Times scaled roughly 0.25x..4x; sustain +/-0.5.
    auto timeScale = [](float norm){ return juce::jlimit(0.25f, 4.0f, std::pow(2.0f, (norm - 0.5f) * 2.0f)); }; // 0.25..4.0
    auto sustDelta = [](float norm){ return juce::jlimit(-0.5f, 0.5f, norm - 0.5f); };

    // Apply CV modulation or fallback to parameter values
    const float aEff = juce::jlimit(0.001f, 5.0f, aBase * (isParamInputConnected(paramIdAttackMod) ? timeScale(attackModCV) : 1.0f));
    const float dEff = juce::jlimit(0.001f, 5.0f, dBase * (isParamInputConnected(paramIdDecayMod) ? timeScale(decayModCV) : 1.0f));
    const float sEff = juce::jlimit(0.0f,   1.0f, sBase + (isParamInputConnected(paramIdSustainMod) ? sustDelta(sustainModCV) : 0.0f));
    const float rEff = juce::jlimit(0.001f, 5.0f, rBase * (isParamInputConnected(paramIdReleaseMod) ? timeScale(releaseModCV) : 1.0f));

    // Ensure UI reflects effective modulation in tooltips (optional debug)

    const float atkSec = aEff;
    const float decSec = dEff;
    const float susLvl = sEff;
    const float relSec = rEff;

    // Gate input from bus 0 channel 0; Trigger from bus 0 channel 1
    const float* gateIn = inBus.getNumChannels() > 0 ? inBus.getReadPointer (0) : nullptr;
    const float* trigIn = inBus.getNumChannels() > 1 ? inBus.getReadPointer (1) : nullptr;

    // Clear only our output bus before writing envelope
    auto out = getBusBuffer (buffer, false, 0);
    float* envOut = out.getWritePointer (0);
    float* invOut = out.getNumChannels() > 1 ? out.getWritePointer (1) : envOut;
    float* eorGate = out.getNumChannels() > 2 ? out.getWritePointer (2) : nullptr;
    float* eocGate = out.getNumChannels() > 3 ? out.getWritePointer (3) : nullptr;
    const int n = buffer.getNumSamples();

    for (int i = 0; i < n; ++i)
    {
        const bool trigHigh = trigIn != nullptr ? (trigIn[i] > 0.5f) : false;
        const bool gateHigh = gateIn != nullptr ? (gateIn[i] > 0.5f) : false;
        const bool trigRise = (trigHigh && ! lastTrigger);
        lastTrigger = trigHigh;

        if (trigRise) { stage = Stage::Attack; }
        else {
            if (gateHigh && ! lastGate) stage = Stage::Attack;
            else if (! gateHigh && lastGate && stage != Stage::Idle) stage = Stage::Release;
        }
        lastGate = gateHigh;
        const bool wasActive = (stage != Stage::Idle);

        // advance envelope one sample
        const float dt = 1.0f / (float) sr;
        switch (stage)
        {
            case Stage::Idle: envLevel = 0.0f; break;
            case Stage::Attack: {
                const float rate = (atkSec <= 0.0005f) ? 1.0f : dt / atkSec;
                envLevel += rate;
                if (envLevel >= 1.0f) { envLevel = 1.0f; stage = Stage::Decay; }
            } break;
            case Stage::Decay: {
                const float target = susLvl;
                const float rate = (decSec <= 0.0005f) ? 1.0f : dt / decSec;
                envLevel += (target - envLevel) * rate;
                if (std::abs(envLevel - target) < 0.0005f) { envLevel = target; stage = Stage::Sustain; }
            } break;
            case Stage::Sustain: {
                envLevel = susLvl;
                if (!gateHigh) stage = Stage::Release;
            } break;
            case Stage::Release: {
                const float rate = (relSec <= 0.0005f) ? 1.0f : dt / relSec;
                envLevel += (0.0f - envLevel) * rate;
                if (envLevel <= 0.0005f) { envLevel = 0.0f; stage = Stage::Idle; }
            } break;
        }
        const bool isActive = (stage != Stage::Idle);
        
        // EOR/EOC pulses
        if (wasActive && !isActive) { eorPending = (int) std::round (0.001f * (float)sr); }
        // EOC when we arrive at sustain level (end of attack/decay) OR when we return to Idle
        static bool atSustainPrev = false;
        const bool atSustainNow = (stage == Stage::Sustain);
        if (atSustainNow && !atSustainPrev) { eocPending = (int) std::round (0.001f * (float)sr); }
        if (!isActive && stage == Stage::Idle && wasActive) { eocPending = (int) std::round (0.001f * (float)sr); }
        atSustainPrev = atSustainNow;
        const float eorValue = (eorPending > 0 ? 1.0f : 0.0f);
        const float eocValue = (eocPending > 0 ? 1.0f : 0.0f);
        if (eorPending > 0) --eorPending;
        if (eocPending > 0) --eocPending;
        
        envOut[i] = envLevel;
        invOut[i] = 1.0f - envLevel;
        if (eorGate != nullptr) eorGate[i] = eorValue;
        if (eocGate != nullptr) eocGate[i] = eocValue;
    }

    // Inspector values: use block peak magnitude to capture fast changes
    if (lastOutputValues.size() >= 4)
    {
        auto peakAbs = [&](int ch){ if (ch >= out.getNumChannels()) return 0.0f; const float* p = out.getReadPointer(ch); float m=0.0f; for (int i=0;i<n;++i) m = juce::jmax(m, std::abs(p[i])); return m; };
        if (lastOutputValues[0]) lastOutputValues[0]->store(peakAbs(0));
        if (lastOutputValues[1]) lastOutputValues[1]->store(peakAbs(1));
        if (lastOutputValues[2]) lastOutputValues[2]->store(peakAbs(2));
        if (lastOutputValues[3]) lastOutputValues[3]->store(peakAbs(3));
    }

    // Store live modulated values for UI display
    setLiveParamValue("attack_live", aEff);
    setLiveParamValue("decay_live", dEff);
    setLiveParamValue("sustain_live", sEff);
    setLiveParamValue("release_live", rEff);
}

// Parameter bus contract implementation
bool ADSRModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All inputs are on bus 0
    if (paramId == paramIdAttackMod)  { outChannelIndexInBus = 2; return true; }  // Attack Mod
    if (paramId == paramIdDecayMod)   { outChannelIndexInBus = 3; return true; }  // Decay Mod
    if (paramId == paramIdSustainMod) { outChannelIndexInBus = 4; return true; }  // Sustain Mod
    if (paramId == paramIdReleaseMod) { outChannelIndexInBus = 5; return true; }  // Release Mod
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\ADSRModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_audio_basics/juce_audio_basics.h>

class ADSRModuleProcessor : public ModuleProcessor
{
public:
    // Parameter ID constants
    static constexpr auto paramIdAttack = "attack";
    static constexpr auto paramIdDecay = "decay";
    static constexpr auto paramIdSustain = "sustain";
    static constexpr auto paramIdRelease = "release";
    static constexpr auto paramIdAttackMod = "attack_mod";
    static constexpr auto paramIdDecayMod = "decay_mod";
    static constexpr auto paramIdSustainMod = "sustain_mod";
    static constexpr auto paramIdReleaseMod = "release_mod";

    ADSRModuleProcessor();
    ~ADSRModuleProcessor() override = default;

    const juce::String getName() const override { return "adsr"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        // Get live modulated values for display
        bool isAttackModulated = isParamModulated(paramIdAttackMod);
        bool isDecayModulated = isParamModulated(paramIdDecayMod);
        bool isSustainModulated = isParamModulated(paramIdSustainMod);
        bool isReleaseModulated = isParamModulated(paramIdReleaseMod);
        
        float a = isAttackModulated ? getLiveParamValueFor("attack_mod", "attack_live", attackParam->load()) : (attackParam != nullptr ? attackParam->load() : 0.01f);
        float d = isDecayModulated ? getLiveParamValueFor("decay_mod", "decay_live", decayParam->load()) : (decayParam != nullptr ? decayParam->load() : 0.1f);
        float s = isSustainModulated ? getLiveParamValueFor("sustain_mod", "sustain_live", sustainParam->load()) : (sustainParam != nullptr ? sustainParam->load() : 0.7f);
        float r = isReleaseModulated ? getLiveParamValueFor("release_mod", "release_live", releaseParam->load()) : (releaseParam != nullptr ? releaseParam->load() : 0.2f);
        
        ImGui::PushItemWidth (itemWidth);
        
        // Attack
        if (isAttackModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Attack (s)",  &a, 0.001f, 5.0f, "%.3f", ImGuiSliderFlags_Logarithmic)) if (!isAttackModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdAttack)))  *p = a;
        if (!isAttackModulated) adjustParamOnWheel (ap.getParameter(paramIdAttack), "attack", a);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isAttackModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Decay
        if (isDecayModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Decay (s)",   &d, 0.001f, 5.0f, "%.3f", ImGuiSliderFlags_Logarithmic)) if (!isDecayModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDecay)))   *p = d;
        if (!isDecayModulated) adjustParamOnWheel (ap.getParameter(paramIdDecay), "decay", d);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isDecayModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Sustain
        if (isSustainModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Sustain", &s, 0.0f, 1.0f)) if (!isSustainModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdSustain))) *p = s;
        if (!isSustainModulated) adjustParamOnWheel (ap.getParameter(paramIdSustain), "sustain", s);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isSustainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Release
        if (isReleaseModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Release (s)", &r, 0.001f, 5.0f, "%.3f", ImGuiSliderFlags_Logarithmic)) if (!isReleaseModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRelease))) *p = r;
        if (!isReleaseModulated) adjustParamOnWheel (ap.getParameter(paramIdRelease), "release", r);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isReleaseModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("Gate In", 0);
        helpers.drawAudioInputPin("Trigger In", 1);
        
        helpers.drawAudioInputPin("Attack Mod", 2);
        helpers.drawAudioInputPin("Decay Mod", 3);
        helpers.drawAudioInputPin("Sustain Mod", 4);
        helpers.drawAudioInputPin("Release Mod", 5);
        helpers.drawAudioOutputPin("Env Out", 0);
        helpers.drawAudioOutputPin("Inv Out", 1);
        helpers.drawAudioOutputPin("EOR Gate", 2);
        helpers.drawAudioOutputPin("EOC Gate", 3);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Gate In";
            case 1: return "Trigger In";
            case 2: return "Attack Mod";
            case 3: return "Decay Mod";
            case 4: return "Sustain Mod";
            case 5: return "Release Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Env Out";
            case 1: return "Inv Out";
            case 2: return "EOR Gate";
            case 3: return "EOC Gate";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* attackParam { nullptr };
    std::atomic<float>* decayParam { nullptr };
    std::atomic<float>* sustainParam { nullptr };
    std::atomic<float>* releaseParam { nullptr };
    std::atomic<float>* attackModParam { nullptr };
    std::atomic<float>* decayModParam { nullptr };
    std::atomic<float>* sustainModParam { nullptr };
    std::atomic<float>* releaseModParam { nullptr };
    // Simple RT-safe envelope state (custom, replaces juce::ADSR to avoid surprises)
    enum class Stage { Idle, Attack, Decay, Sustain, Release };
    Stage stage { Stage::Idle };
    float envLevel { 0.0f };
    bool lastGate { false };
    bool lastTrigger { false };
    int eorPending { 0 };
    int eocPending { 0 };
    double sr { 44100.0 };
};




================================================================================
FILE: juce\Source\audio\modules\AttenuverterModuleProcessor.cpp
================================================================================


#include "AttenuverterModuleProcessor.h"

AttenuverterModuleProcessor::AttenuverterModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // 0-1: Audio In, 2: Amount Mod
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "AttenuverterParams", createParameterLayout())
{
    amountParam = apvts.getRawParameterValue ("amount");
    rectifyParam = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("rectify"));
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout AttenuverterModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("amount", "Amount", juce::NormalisableRange<float> (-10.0f, 10.0f), 1.0f));
    // Add a non-automatable, hidden parameter for rectification mode
    params.push_back (std::make_unique<juce::AudioParameterBool> ("rectify", "Rectify", false));
    return { params.begin(), params.end() };
}

void AttenuverterModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (sampleRate, samplesPerBlock);
}

void AttenuverterModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    auto in  = getBusBuffer (buffer, true, 0);
    auto out = getBusBuffer (buffer, false, 0);
    
    const float baseGain = amountParam != nullptr ? amountParam->load() : 1.0f;
    const bool shouldRectify = rectifyParam != nullptr ? rectifyParam->get() : false;
    const int nSamps = buffer.getNumSamples();
    
    // Check if amount is modulated and get from unified input bus
    const bool isAmountModulated = isParamInputConnected("amount");
    const float* modSignal = isAmountModulated && in.getNumChannels() > 2 ? in.getReadPointer(2) : nullptr;
    
    for (int ch = 0; ch < out.getNumChannels(); ++ch)
    {
        const float* s = in.getReadPointer (juce::jmin(ch, in.getNumChannels()-1));
        float* d = out.getWritePointer (ch);
        for (int i = 0; i < nSamps; ++i)
        {
            float sample = s[i];
            if (shouldRectify)
                sample = std::abs(sample);
            
            // Apply modulation if connected
            float currentGain = baseGain;
            if (isAmountModulated && modSignal)
                currentGain = juce::jmap(modSignal[i], 0.0f, 1.0f, -10.0f, 10.0f);
            
            // Update telemetry for live UI feedback (throttled to every 64 samples)
            if ((i & 0x3F) == 0) {
                setLiveParamValue("amount_live", currentGain);
            }
                
            d[i] = sample * currentGain;
        }
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(out.getSample(0, nSamps - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(out.getSample(1, nSamps - 1));
    }
}

bool AttenuverterModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "amount")
    {
        outChannelIndexInBus = 2;
        return true;
    }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\AttenuverterModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class AttenuverterModuleProcessor : public ModuleProcessor
{
public:
    AttenuverterModuleProcessor();
    ~AttenuverterModuleProcessor() override = default;

    const juce::String getName() const override { return "attenuverter"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float amt = amountParam != nullptr ? amountParam->load() : 1.0f;
        ImGui::PushItemWidth (itemWidth);
        
        bool isAmountModulated = isParamModulated("amount");
        if (isAmountModulated) {
            amt = getLiveParamValueFor("amount", "amount_live", amt);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Amount", &amt, -10.0f, 10.0f)) {
            if (!isAmountModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("amount"))) *p = amt;
            }
        }
        if (!isAmountModulated) adjustParamOnWheel (ap.getParameter ("amount"), "amount", amt);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isAmountModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);
        helpers.drawAudioInputPin("Amount Mod", 2);
        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* amountParam { nullptr }; // -1..1
    juce::AudioParameterBool* rectifyParam { nullptr }; // Rectify mode for Audio-to-CV conversion
};




================================================================================
FILE: juce\Source\audio\modules\AudioInputModuleProcessor.cpp
================================================================================


#include "AudioInputModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout AudioInputModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterInt>(paramIdNumChannels, "Channels", 1, MAX_CHANNELS, 2));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdGateThreshold, "Gate Threshold", 0.0f, 1.0f, 0.1f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdTriggerThreshold, "Trigger Threshold", 0.0f, 1.0f, 0.5f));

    // Create a parameter for each potential channel mapping
    for (int i = 0; i < MAX_CHANNELS; ++i)
    {
        params.push_back(std::make_unique<juce::AudioParameterInt>("channelMap" + juce::String(i), "Channel " + juce::String(i + 1) + " Source", 0, 255, i));
    }
    return { params.begin(), params.end() };
}

AudioInputModuleProcessor::AudioInputModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("In", juce::AudioChannelSet::discreteChannels(MAX_CHANNELS), true)
                        .withOutput("Out", juce::AudioChannelSet::discreteChannels(MAX_CHANNELS + 3), true)), // +3 for Gate, Trig, EOP
      apvts(*this, nullptr, "AudioInputParams", createParameterLayout())
{
    numChannelsParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter(paramIdNumChannels));
    
    gateThresholdParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdGateThreshold));
    triggerThresholdParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdTriggerThreshold));

    channelMappingParams.resize(MAX_CHANNELS);
    for (int i = 0; i < MAX_CHANNELS; ++i)
    {
        channelMappingParams[i] = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("channelMap" + juce::String(i)));
    }

    lastOutputValues.resize(MAX_CHANNELS + 3); // +3 for new outputs
    channelLevels.resize(MAX_CHANNELS);
    for (int i = 0; i < MAX_CHANNELS + 3; ++i)
    {
        if (i < (int)channelLevels.size()) channelLevels[i] = std::make_unique<std::atomic<float>>(0.0f);
        lastOutputValues[i] = std::make_unique<std::atomic<float>>(0.0f);
    }
    
    peakState.resize(MAX_CHANNELS, PeakState::SILENT);
    lastTriggerState.resize(MAX_CHANNELS, false);
    silenceCounter.resize(MAX_CHANNELS, 0);
    eopPulseRemaining.resize(MAX_CHANNELS, 0);
    trigPulseRemaining.resize(MAX_CHANNELS, 0);
}

void AudioInputModuleProcessor::prepareToPlay(double, int)
{
    // Reset all state variables
    std::fill(peakState.begin(), peakState.end(), PeakState::SILENT);
    std::fill(lastTriggerState.begin(), lastTriggerState.end(), false);
    std::fill(silenceCounter.begin(), silenceCounter.end(), 0);
    std::fill(eopPulseRemaining.begin(), eopPulseRemaining.end(), 0);
    std::fill(trigPulseRemaining.begin(), trigPulseRemaining.end(), 0);
}

void AudioInputModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int activeChannels = numChannelsParam ? numChannelsParam->get() : 2;
    const int numSamples = buffer.getNumSamples();
    const double sampleRate = getSampleRate();
    
    const float gateThresh = gateThresholdParam ? gateThresholdParam->get() : 0.1f;
    const float trigThresh = triggerThresholdParam ? triggerThresholdParam->get() : 0.5f;

    const int gateOutChannel = MAX_CHANNELS + 0;
    const int trigOutChannel = MAX_CHANNELS + 1;
    const int eopOutChannel  = MAX_CHANNELS + 2;

    auto* gateOut = outBus.getNumChannels() > gateOutChannel ? outBus.getWritePointer(gateOutChannel) : nullptr;
    auto* trigOut = outBus.getNumChannels() > trigOutChannel ? outBus.getWritePointer(trigOutChannel) : nullptr;
    auto* eopOut  = outBus.getNumChannels() > eopOutChannel  ? outBus.getWritePointer(eopOutChannel)  : nullptr;
    
    // Perform CV analysis on Channel 0 only, BEFORE the main loop
    if (activeChannels > 0 && inBus.getNumChannels() > 0)
    {
        const float* inData = inBus.getReadPointer(0); // Always use the first channel for analysis

        for (int s = 0; s < numSamples; ++s)
        {
            const float sampleAbs = std::abs(inData[s]);

            // GATE LOGIC
            if (gateOut) gateOut[s] = (sampleAbs > gateThresh) ? 1.0f : 0.0f;

            // TRIGGER LOGIC
            bool isAboveTrig = sampleAbs > trigThresh;
            if (isAboveTrig && !lastTriggerState[0]) {
                trigPulseRemaining[0] = (int)(0.001 * sampleRate); // 1ms pulse
            }
            lastTriggerState[0] = isAboveTrig;

            if (trigOut) {
                trigOut[s] = (trigPulseRemaining[0] > 0) ? 1.0f : 0.0f;
                if (trigPulseRemaining[0] > 0) --trigPulseRemaining[0];
            }

            // EOP LOGIC
            if (peakState[0] == PeakState::PEAK) {
                if (sampleAbs < gateThresh) {
                    silenceCounter[0]++;
                    if (silenceCounter[0] >= MIN_SILENCE_SAMPLES) {
                        peakState[0] = PeakState::SILENT;
                        eopPulseRemaining[0] = (int)(0.001 * sampleRate); // Fire 1ms pulse
                    }
                } else {
                    silenceCounter[0] = 0;
                }
            } else { // PeakState::SILENT
                if (sampleAbs > gateThresh) {
                    peakState[0] = PeakState::PEAK;
                    silenceCounter[0] = 0;
                }
            }

            if (eopOut) {
                eopOut[s] = (eopPulseRemaining[0] > 0) ? 1.0f : 0.0f;
                if (eopPulseRemaining[0] > 0) --eopPulseRemaining[0];
            }
        }
    }

    // Now, loop through the active channels for pass-through and metering
    for (int i = 0; i < activeChannels; ++i)
    {
        if (i < inBus.getNumChannels() && i < outBus.getNumChannels())
        {
            outBus.copyFrom(i, 0, inBus, i, 0, numSamples);
            
            float peakForMeter = inBus.getMagnitude(i, 0, numSamples);
            if (i < (int)channelLevels.size() && channelLevels[i]) {
                channelLevels[i]->store(peakForMeter);
            }
            
            if (i < (int)lastOutputValues.size() && lastOutputValues[i] && numSamples > 0)
                lastOutputValues[i]->store(outBus.getSample(i, numSamples - 1));
        }
    }
    
    // Clear any unused audio output channels (but NOT the CV channels)
    for (int i = activeChannels; i < MAX_CHANNELS; ++i)
    {
        if (i < outBus.getNumChannels())
            outBus.clear(i, 0, numSamples);
        if (i < (int)channelLevels.size() && channelLevels[i])
            channelLevels[i]->store(0.0f);
    }
    
    // Update the inspector values for the new CV outs
    if (numSamples > 0)
    {
        if (gateOut && lastOutputValues[gateOutChannel]) lastOutputValues[gateOutChannel]->store(gateOut[numSamples-1]);
        if (trigOut && lastOutputValues[trigOutChannel]) lastOutputValues[trigOutChannel]->store(trigOut[numSamples-1]);
        if (eopOut && lastOutputValues[eopOutChannel]) lastOutputValues[eopOutChannel]->store(eopOut[numSamples-1]);
    }
}

juce::ValueTree AudioInputModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("AudioInputState");
    vt.setProperty("deviceName", selectedDeviceName, nullptr);
    vt.addChild(apvts.state.createCopy(), -1, nullptr);
    return vt;
}

void AudioInputModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("AudioInputState"))
    {
        selectedDeviceName = vt.getProperty("deviceName", "").toString();
        auto params = vt.getChildWithName(apvts.state.getType());
        if (params.isValid())
        {
            apvts.replaceState(params);
        }
    }
}

juce::String AudioInputModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel < MAX_CHANNELS)
        return "HW In " + juce::String(channel + 1);
    return {};
}

juce::String AudioInputModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == MAX_CHANNELS + 0) return "Gate";
    if (channel == MAX_CHANNELS + 1) return "Trigger";
    if (channel == MAX_CHANNELS + 2) return "EOP";

    if (channel < MAX_CHANNELS)
        return "Out " + juce::String(channel + 1);
    return {};
}

#if defined(PRESET_CREATOR_UI)
// The actual UI drawing will be handled by a special case in ImGuiNodeEditorComponent,
// so this can remain empty.
void AudioInputModuleProcessor::drawParametersInNode(float, const std::function<bool(const juce::String&)>&, const std::function<void()>&)
{
    // UI is custom-drawn in ImGuiNodeEditorComponent.cpp
}

void AudioInputModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Dynamically draw output pins based on the number of active channels
    int numChannels = numChannelsParam ? numChannelsParam->get() : 2;
    for (int i = 0; i < numChannels; ++i)
    {
        helpers.drawAudioOutputPin(("Out " + juce::String(i + 1)).toRawUTF8(), i);
    }
    
    // Draw CV outputs
    helpers.drawAudioOutputPin("Gate", MAX_CHANNELS + 0);
    helpers.drawAudioOutputPin("Trigger", MAX_CHANNELS + 1);
    helpers.drawAudioOutputPin("EOP", MAX_CHANNELS + 2);
}
#endif


================================================================================
FILE: juce\Source\audio\modules\AudioInputModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <vector>

class AudioInputModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_CHANNELS = 16;
    
    // Parameter ID constants
    static constexpr auto paramIdNumChannels = "numChannels";
    static constexpr auto paramIdGateThreshold = "gateThreshold";
    static constexpr auto paramIdTriggerThreshold = "triggerThreshold";

    AudioInputModuleProcessor();
    ~AudioInputModuleProcessor() override = default;

    const juce::String getName() const override { return "audio input"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Override labels for better pin naming
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

    // Extra state for device name and parameters
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    // Device name access for UI
    juce::String getSelectedDeviceName() const { return selectedDeviceName; }
    void setSelectedDeviceName(const juce::String& name) { selectedDeviceName = name; }

    // Real-time level metering for UI (one per channel)
    std::vector<std::unique_ptr<std::atomic<float>>> channelLevels;
    
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    // Parameter pointers
    juce::AudioParameterInt* numChannelsParam { nullptr };
    std::vector<juce::AudioParameterInt*> channelMappingParams;
    juce::String selectedDeviceName;
    
    juce::AudioParameterFloat* gateThresholdParam { nullptr };
    juce::AudioParameterFloat* triggerThresholdParam { nullptr };

    // State for signal analysis
    enum class PeakState { SILENT, PEAK };
    std::vector<PeakState> peakState;
    std::vector<bool> lastTriggerState;
    std::vector<int> silenceCounter;
    std::vector<int> eopPulseRemaining;
    std::vector<int> trigPulseRemaining;

    static constexpr int MIN_SILENCE_SAMPLES = 480; // ~10ms at 48kHz
};



================================================================================
FILE: juce\Source\audio\modules\BestPracticeNodeProcessor.cpp
================================================================================


#include "BestPracticeNodeProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout BestPracticeNodeProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdFrequency, "Frequency",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdWaveform, "Waveform",
        juce::StringArray { "Sine", "Saw", "Square" }, 0));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdDrive, "Drive",
        juce::NormalisableRange<float>(1.0f, 50.0f, 0.01f, 0.5f), 1.0f));

    return { params.begin(), params.end() };
}

BestPracticeNodeProcessor::BestPracticeNodeProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(5), true)
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "BestPracticeParams", createParameterLayout())
{
    frequencyParam = apvts.getRawParameterValue(paramIdFrequency);
    waveformParam  = apvts.getRawParameterValue(paramIdWaveform);
    driveParam     = apvts.getRawParameterValue(paramIdDrive);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));

    oscillator.initialise([](float x){ return std::sin(x); }, 128);
}

void BestPracticeNodeProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 1 };
    oscillator.prepare(spec);

    smoothedFrequency.reset(sampleRate, 0.01);
    smoothedDrive.reset(sampleRate, 0.01);
}

void BestPracticeNodeProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto inBus  = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const bool isFreqMod  = isParamInputConnected(paramIdFrequencyMod);
    const bool isWaveMod  = isParamInputConnected(paramIdWaveformMod);
    const bool isDriveMod = isParamInputConnected(paramIdDriveMod);

    const float* audioInL = inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* audioInR = inBus.getNumChannels() > 1 ? inBus.getReadPointer(1) : nullptr;
    const float* freqCV   = isFreqMod  && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* waveCV   = isWaveMod  && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* driveCV  = isDriveMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    auto* outL = outBus.getNumChannels() > 0 ? outBus.getWritePointer(0) : nullptr;
    auto* outR = outBus.getNumChannels() > 1 ? outBus.getWritePointer(1) : outL;

    const float baseFrequency = frequencyParam != nullptr ? frequencyParam->load() : 440.0f;
    const int   baseWaveform  = waveformParam  != nullptr ? (int) waveformParam->load()  : 0;
    const float baseDrive     = driveParam     != nullptr ? driveParam->load()     : 1.0f;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float currentFreq = baseFrequency;
        if (isFreqMod && freqCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, freqCV[i]);
            constexpr float fMin = 20.0f;
            constexpr float fMax = 20000.0f;
            const float spanOct = std::log2(fMax / fMin);
            currentFreq = fMin * std::pow(2.0f, cv * spanOct);
        }

        int currentWave = baseWaveform;
        if (isWaveMod && waveCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, waveCV[i]);
            currentWave = (int) (cv * 2.99f);
        }

        float currentDrive = baseDrive;
        if (isDriveMod && driveCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, driveCV[i]);
            currentDrive = juce::jmap(cv, 1.0f, 50.0f);
        }

        smoothedFrequency.setTargetValue(currentFreq);
        smoothedDrive.setTargetValue(currentDrive);

        if (currentWaveform != currentWave)
        {
            if (currentWave == 0)      oscillator.initialise([](float x){ return std::sin(x); }, 128);
            else if (currentWave == 1) oscillator.initialise([](float x){ return (x / juce::MathConstants<float>::pi); }, 128);
            else                       oscillator.initialise([](float x){ return x < 0.0f ? -1.0f : 1.0f; }, 128);
            currentWaveform = currentWave;
        }

        oscillator.setFrequency(smoothedFrequency.getNextValue(), false);
        const float osc = oscillator.processSample(0.0f);
        const float shaped = std::tanh(osc * smoothedDrive.getNextValue());

        const float inL = audioInL ? audioInL[i] : 1.0f;
        const float inR = audioInR ? audioInR[i] : inL;

        const float outSampleL = shaped * inL;
        const float outSampleR = shaped * inR;

        if (outL) outL[i] = outSampleL;
        if (outR) outR[i] = outSampleR;

        if ((i & 0x3F) == 0)
        {
            setLiveParamValue("frequency_live", smoothedFrequency.getCurrentValue());
            setLiveParamValue("waveform_live", (float) currentWave);
            setLiveParamValue("drive_live", smoothedDrive.getCurrentValue());
        }
    }

    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getNumChannels() > 0 ? outBus.getSample(0, buffer.getNumSamples() - 1) : 0.0f);
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getNumChannels() > 1 ? outBus.getSample(1, buffer.getNumSamples() - 1) : 0.0f);
    }
}

#if defined(PRESET_CREATOR_UI)
void BestPracticeNodeProcessor::drawParametersInNode (float itemWidth,
                                                      const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                      const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    const bool freqIsMod = isParamModulated(paramIdFrequencyMod);
    float freq = freqIsMod ? getLiveParamValueFor(paramIdFrequencyMod, "frequency_live", frequencyParam ? frequencyParam->load() : 440.0f)
                           : (frequencyParam ? frequencyParam->load() : 440.0f);

    int wave = (int) (waveformParam ? waveformParam->load() : 0.0f);
    if (isParamModulated(paramIdWaveformMod))
        wave = (int) getLiveParamValueFor(paramIdWaveformMod, "waveform_live", (float) wave);

    const bool driveIsMod = isParamModulated(paramIdDriveMod);
    float drive = driveIsMod ? getLiveParamValueFor(paramIdDriveMod, "drive_live", driveParam ? driveParam->load() : 1.0f)
                             : (driveParam ? driveParam->load() : 1.0f);

    ImGui::PushItemWidth(itemWidth);

    if (freqIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Frequency", &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic))
    {
        if (!freqIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = freq;
    }
    if (!freqIsMod) adjustParamOnWheel(ap.getParameter(paramIdFrequency), "frequencyHz", freq);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (freqIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    const bool waveIsMod = isParamModulated(paramIdWaveformMod);
    if (waveIsMod) ImGui::BeginDisabled();
    if (ImGui::Combo("Waveform", &wave, "Sine\0Saw\0Square\0\0"))
    {
        if (!waveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWaveform))) *p = wave;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (waveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (driveIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Drive", &drive, 1.0f, 50.0f, "%.2f", ImGuiSliderFlags_Logarithmic))
    {
        if (!driveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDrive))) *p = drive;
    }
    if (!driveIsMod) adjustParamOnWheel(ap.getParameter(paramIdDrive), "drive", drive);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (driveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void BestPracticeNodeProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Freq Mod", 2);
    helpers.drawAudioInputPin("Wave Mod", 3);
    helpers.drawAudioInputPin("Drive Mod", 4);

    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}

juce::String BestPracticeNodeProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "In L";
        case 1: return "In R";
        case 2: return "Freq Mod";
        case 3: return "Wave Mod";
        case 4: return "Drive Mod";
        default: return {};
    }
}

juce::String BestPracticeNodeProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out L";
        case 1: return "Out R";
        default: return {};
    }
}
#endif

bool BestPracticeNodeProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0;
    if (paramId == paramIdFrequencyMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdWaveformMod)  { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdDriveMod)     { outChannelIndexInBus = 4; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\BestPracticeNodeProcessor.h
================================================================================


#pragma once

/**
 * @file BestPracticeNodeProcessor.h
 * @brief Reference implementation demonstrating proper module naming conventions
 *
 * ## IMPORTANT: Module Naming Convention Standard
 *
 * This file serves as the definitive reference for the correct module naming convention
 * used throughout the Collider modular synthesizer system.
 *
 * ### The Problem We Solved
 * Previously, the system had inconsistent naming conventions:
 * - Module factory registered modules with lowercase names (e.g., "polyvco", "compressor")
 * - Module getName() methods returned PascalCase names (e.g., "PolyVCO", "Compressor")
 * - Module pin database used a mix of lowercase and PascalCase keys
 *
 * This caused pin color-coding failures because the UI couldn't find modules in the database.
 *
 * ### The Solution: Unified Lowercase Convention
 * We standardized on a **lowercase with spaces** naming convention:
 *
 * 1. **Module Factory Registration**: All modules registered as lowercase (e.g., "polyvco")
 * 2. **getName() Return Values**: All modules return lowercase names (e.g., "polyvco")
 * 3. **Pin Database Keys**: All keys are lowercase (e.g., "polyvco")
 * 4. **No Aliases Needed**: Single source of truth eliminates ambiguity
 *
 * ### Pattern for New Modules
 * When creating new modules, follow this exact pattern:
 *
 * ```cpp
 * class NewModuleProcessor : public ModuleProcessor
 * {
 * public:
 *     const juce::String getName() const override { return "new module"; }
 *     // ... rest of implementation
 * };
 * ```
 *
 * Register in ModularSynthProcessor.cpp:
 * ```cpp
 * reg("new module", []{ return std::make_unique<NewModuleProcessor>(); });
 * ```
 *
 * Add to pin database in ImGuiNodeEditorComponent.cpp:
 * ```cpp
 * modulePinDatabase["new module"] = ModulePinInfo(...);
 * ```
 *
 * ### Why This Works
 * - Module factory uses lowercase names as the canonical "type"
 * - getName() returns the same lowercase name for consistency
 * - UI looks up modules by their lowercase type in the pin database
 * - All lookups succeed because keys are standardized
 * - Pin colors display correctly (green for audio, blue for CV, yellow for gate)
 *
 * This pattern ensures robust, maintainable code and eliminates naming-related bugs.
 */

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <cmath>

class BestPracticeNodeProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdFrequency    = "frequency";
    static constexpr auto paramIdWaveform     = "waveform";
    static constexpr auto paramIdDrive        = "drive";
    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdFrequencyMod = "frequency_mod";
    static constexpr auto paramIdWaveformMod  = "waveform_mod";
    static constexpr auto paramIdDriveMod     = "drive_mod";

    BestPracticeNodeProcessor();
    ~BestPracticeNodeProcessor() override = default;

    const juce::String getName() const override { return "best practice"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Oscillator<float> oscillator;

    // Cached parameter pointers
    std::atomic<float>* frequencyParam { nullptr };
    std::atomic<float>* waveformParam  { nullptr };
    std::atomic<float>* driveParam     { nullptr };

    // Smoothed values to prevent zipper noise
    juce::SmoothedValue<float> smoothedFrequency;
    juce::SmoothedValue<float> smoothedDrive;

    int currentWaveform = -1;
};




================================================================================
FILE: juce\Source\audio\modules\ChorusModuleProcessor.cpp
================================================================================


#include "ChorusModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout ChorusModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRate, "Rate", 0.05f, 5.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDepth, "Depth", 0.0f, 1.0f, 0.25f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMix, "Mix", 0.0f, 1.0f, 0.5f));
    
    return { params.begin(), params.end() };
}

ChorusModuleProcessor::ChorusModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(5), true) // 0-1: Audio In, 2: Rate Mod, 3: Depth Mod, 4: Mix Mod
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "ChorusParams", createParameterLayout())
{
    rateParam = apvts.getRawParameterValue(paramIdRate);
    depthParam = apvts.getRawParameterValue(paramIdDepth);
    mixParam = apvts.getRawParameterValue(paramIdMix);

    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void ChorusModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2; // Process in stereo

    chorus.prepare(spec);
    chorus.reset();
}

void ChorusModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // Get handles to the input and output buses
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    // The Chorus DSP object works in-place, so we first copy the dry input to the output.
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }

    // --- Get Modulation CVs from unified input bus ---
    const bool isRateMod = isParamInputConnected(paramIdRateMod);
    const bool isDepthMod = isParamInputConnected(paramIdDepthMod);
    const bool isMixMod = isParamInputConnected(paramIdMixMod);

    const float* rateCV = isRateMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* depthCV = isDepthMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* mixCV = isMixMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    // --- Get Base Parameter Values ---
    const float baseRate = rateParam->load();
    const float baseDepth = depthParam->load();
    const float baseMix = mixParam->load();

    // We can process per-block if not modulated, or per-sample if modulated.
    // For simplicity and responsiveness, we'll just update the parameters once per block
    // using the first sample of the CV input. A per-sample loop could be used for audio-rate modulation.
    
    float finalRate = baseRate;
    if (isRateMod && rateCV) {
        // Map CV (0..1) to the full rate range, applied as an offset
        finalRate += juce::jmap(rateCV[0], 0.0f, 1.0f, -baseRate, 5.0f - baseRate);
    }

    float finalDepth = baseDepth;
    if (isDepthMod && depthCV) {
        finalDepth = juce::jlimit(0.0f, 1.0f, depthCV[0]); // Absolute control
    }

    float finalMix = baseMix;
    if (isMixMod && mixCV) {
        finalMix = juce::jlimit(0.0f, 1.0f, mixCV[0]); // Absolute control
    }
    
    // --- Update the DSP Object ---
    chorus.setRate(juce::jlimit(0.05f, 5.0f, finalRate));
    chorus.setDepth(juce::jlimit(0.0f, 1.0f, finalDepth));
    chorus.setMix(juce::jlimit(0.0f, 1.0f, finalMix));

    // --- Process the Audio ---
    // The context works on the output buffer, which now contains the dry signal.
    juce::dsp::AudioBlock<float> block(outBus);
    juce::dsp::ProcessContextReplacing<float> context(block);
    chorus.process(context);

    // --- Update UI Telemetry ---
    setLiveParamValue("rate_live", finalRate);
    setLiveParamValue("depth_live", finalDepth);
    setLiveParamValue("mix_live", finalMix);
    
    // --- Update Tooltips ---
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool ChorusModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdRateMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdDepthMod) { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdMixMod) { outChannelIndexInBus = 4; return true; }
    return false;
}

juce::String ChorusModuleProcessor::getAudioInputLabel(int channel) const
{
    // Bus 0 (Stereo Audio In)
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    // Bus 1-3 (Mono Mod In) - We need to calculate the absolute channel index
    if (channel == 2) return "Rate Mod";
    if (channel == 3) return "Depth Mod";
    if (channel == 4) return "Mix Mod";
    return {};
}

juce::String ChorusModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void ChorusModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    // Rate Slider
    bool isRateMod = isParamModulated(paramIdRateMod);
    float rate = isRateMod ? getLiveParamValueFor(paramIdRateMod, "rate_live", rateParam->load()) : rateParam->load();
    if (isRateMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Rate", &rate, 0.05f, 5.0f, "%.2f Hz"))
        if (!isRateMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRate)) = rate;
    if (!isRateMod) adjustParamOnWheel(ap.getParameter(paramIdRate), "rate", rate);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isRateMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Depth Slider
    bool isDepthMod = isParamModulated(paramIdDepthMod);
    float depth = isDepthMod ? getLiveParamValueFor(paramIdDepthMod, "depth_live", depthParam->load()) : depthParam->load();
    if (isDepthMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Depth", &depth, 0.0f, 1.0f, "%.2f"))
        if (!isDepthMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDepth)) = depth;
    if (!isDepthMod) adjustParamOnWheel(ap.getParameter(paramIdDepth), "depth", depth);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isDepthMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Mix Slider
    bool isMixMod = isParamModulated(paramIdMixMod);
    float mix = isMixMod ? getLiveParamValueFor(paramIdMixMod, "mix_live", mixParam->load()) : mixParam->load();
    if (isMixMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Mix", &mix, 0.0f, 1.0f, "%.2f"))
        if (!isMixMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMix)) = mix;
    if (!isMixMod) adjustParamOnWheel(ap.getParameter(paramIdMix), "mix", mix);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isMixMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void ChorusModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Rate Mod", 2);
    helpers.drawAudioInputPin("Depth Mod", 3);
    helpers.drawAudioInputPin("Mix Mod", 4);

    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\ChorusModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class ChorusModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs for APVTS and modulation routing
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdDepth = "depth";
    static constexpr auto paramIdMix = "mix";
    // Virtual IDs for modulation inputs
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdDepthMod = "depth_mod";
    static constexpr auto paramIdMixMod = "mix_mod";

    ChorusModuleProcessor();
    ~ChorusModuleProcessor() override = default;

    const juce::String getName() const override { return "chorus"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // The core JUCE DSP chorus object
    juce::dsp::Chorus<float> chorus;

    // Cached atomic pointers to parameters for real-time access
    std::atomic<float>* rateParam { nullptr };
    std::atomic<float>* depthParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\ClockDividerModuleProcessor.cpp
================================================================================


#include "ClockDividerModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout ClockDividerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gateThreshold", "Gate Threshold", juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f), 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "hysteresis", "Hysteresis", juce::NormalisableRange<float>(0.0f, 0.5f, 0.0001f), 0.05f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "pulseWidth", "Pulse Width", juce::NormalisableRange<float>(0.01f, 1.0f, 0.0001f), 0.5f));
    return { params.begin(), params.end() };
}

ClockDividerModuleProcessor::ClockDividerModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Clock In", juce::AudioChannelSet::mono(), true)
                        .withInput("Reset", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::discreteChannels(6), true)),
      apvts(*this, nullptr, "ClockDivParams", createParameterLayout())
{
    gateThresholdParam = apvts.getRawParameterValue("gateThreshold");
    hysteresisParam    = apvts.getRawParameterValue("hysteresis");
    pulseWidthParam    = apvts.getRawParameterValue("pulseWidth");
    // ADD THIS BLOCK:
    for (int i = 0; i < 6; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void ClockDividerModuleProcessor::prepareToPlay(double sr, int)
{
    sampleRate = sr;
    clockCount = 0;
    div2State = div4State = div8State = false;
    currentClockInterval = sampleRate; // Default to 1 second
    samplesSinceLastClock = 0;
    multiplierPhase[0] = multiplierPhase[1] = multiplierPhase[2] = 0.0;
    lastInputState = false;
    schmittStateClock = false;
    schmittStateReset = false;
    for (int i = 0; i < 6; ++i) pulseSamplesRemaining[i] = 0;
}

void ClockDividerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto inClock = getBusBuffer(buffer, true, 0);
    auto inReset = getBusBuffer(buffer, true, 1);
    auto out = getBusBuffer(buffer, false, 0);

    const float* clockIn = inClock.getReadPointer(0);
    const float* resetIn = inReset.getNumChannels() > 0 ? inReset.getReadPointer(0) : nullptr;
    float* div2Out = out.getWritePointer(0);
    float* div4Out = out.getWritePointer(1);
    float* div8Out = out.getWritePointer(2);
    float* mul2Out = out.getWritePointer(3);
    float* mul3Out = out.getWritePointer(4);
    float* mul4Out = out.getWritePointer(5);

    const float gateThresh = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
    const float hyst = hysteresisParam != nullptr ? hysteresisParam->load() : 0.05f;
    const float highThresh = juce::jlimit(0.0f, 1.0f, gateThresh + hyst);
    const float lowThresh  = juce::jlimit(0.0f, 1.0f, gateThresh - hyst);
    const float pulseWidth = pulseWidthParam != nullptr ? pulseWidthParam->load() : 0.5f;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        // Schmitt trigger for clock
        const float vin = clockIn[i];
        if (!schmittStateClock && vin >= highThresh) schmittStateClock = true;
        else if (schmittStateClock && vin <= lowThresh) schmittStateClock = false;

        // Optional reset
        bool doReset = false;
        if (resetIn != nullptr)
        {
            const float vr = resetIn[i];
            if (!schmittStateReset && vr >= highThresh) { schmittStateReset = true; doReset = true; }
            else if (schmittStateReset && vr <= lowThresh) schmittStateReset = false;
        }

        if (doReset)
        {
            clockCount = 0;
            div2State = div4State = div8State = false;
            samplesSinceLastClock = 0;
            multiplierPhase[0] = multiplierPhase[1] = multiplierPhase[2] = 0.0;
            for (int k = 0; k < 6; ++k) pulseSamplesRemaining[k] = 0;
        }

        samplesSinceLastClock++;

        // --- Division on rising edge ---
        if (schmittStateClock && !lastInputState)
        {
            currentClockInterval = samplesSinceLastClock;
            samplesSinceLastClock = 0;
            
            clockCount++;
            if (clockCount % 2 == 0) { div2State = !div2State; pulseSamplesRemaining[0] = (int) juce::jmax(1.0, currentClockInterval * 0.5 * pulseWidth); }
            if (clockCount % 4 == 0) { div4State = !div4State; pulseSamplesRemaining[1] = (int) juce::jmax(1.0, currentClockInterval * 1.0 * pulseWidth); }
            if (clockCount % 8 == 0) { div8State = !div8State; pulseSamplesRemaining[2] = (int) juce::jmax(1.0, currentClockInterval * 2.0 * pulseWidth); }
        }
        lastInputState = schmittStateClock;

        // Gate/trigger shaping using pulse width
        div2Out[i] = pulseSamplesRemaining[0]-- > 0 ? 1.0f : 0.0f;
        div4Out[i] = pulseSamplesRemaining[1]-- > 0 ? 1.0f : 0.0f;
        div8Out[i] = pulseSamplesRemaining[2]-- > 0 ? 1.0f : 0.0f;

        // --- Multiplication via phase ---
        if (currentClockInterval > 0)
        {
            double phaseInc = 1.0 / currentClockInterval;
            
            // x2
            multiplierPhase[0] += phaseInc * 2.0;
            if (multiplierPhase[0] >= 1.0) multiplierPhase[0] -= 1.0;
            mul2Out[i] = (multiplierPhase[0] < pulseWidth) ? 1.0f : 0.0f;

            // x3
            multiplierPhase[1] += phaseInc * 3.0;
            if (multiplierPhase[1] >= 1.0) multiplierPhase[1] -= 1.0;
            mul3Out[i] = (multiplierPhase[1] < pulseWidth) ? 1.0f : 0.0f;

            // x4
            multiplierPhase[2] += phaseInc * 4.0;
            if (multiplierPhase[2] >= 1.0) multiplierPhase[2] -= 1.0;
            mul4Out[i] = (multiplierPhase[2] < pulseWidth) ? 1.0f : 0.0f;
        }
    }
    
    // ADD THIS BLOCK:
    if (lastOutputValues.size() >= 6)
    {
        for (int i = 0; i < 6; ++i)
            if (lastOutputValues[i])
                lastOutputValues[i]->store(out.getSample(i, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void ClockDividerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated);
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);
    float gateThresh = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
    if (ImGui::SliderFloat("Gate Thresh", &gateThresh, 0.0f, 1.0f, "%.3f")) { if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gateThreshold"))) *p = gateThresh; onModificationEnded(); }
    float hyst = hysteresisParam != nullptr ? hysteresisParam->load() : 0.05f;
    if (ImGui::SliderFloat("Hysteresis", &hyst, 0.0f, 0.5f, "%.4f")) { if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("hysteresis"))) *p = hyst; onModificationEnded(); }
    float pw = pulseWidthParam != nullptr ? pulseWidthParam->load() : 0.5f;
    if (ImGui::SliderFloat("Pulse Width", &pw, 0.01f, 1.0f, "%.3f")) { if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("pulseWidth"))) *p = pw; onModificationEnded(); }
    double bpm = (currentClockInterval > 0.0) ? (60.0 * sampleRate / currentClockInterval) : 0.0;
    ImGui::Text("Clock: %.1f BPM", bpm);
    ImGui::PopItemWidth();
}

void ClockDividerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Clock In", 0);
    helpers.drawAudioInputPin("Reset", 1);
    helpers.drawAudioOutputPin("/2", 0);
    helpers.drawAudioOutputPin("/4", 1);
    helpers.drawAudioOutputPin("/8", 2);
    helpers.drawAudioOutputPin("x2", 3);
    helpers.drawAudioOutputPin("x3", 4);
    helpers.drawAudioOutputPin("x4", 5);
}
#endif


================================================================================
FILE: juce\Source\audio\modules\ClockDividerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class ClockDividerModuleProcessor : public ModuleProcessor
{
public:
    ClockDividerModuleProcessor();
    ~ClockDividerModuleProcessor() override = default;

    const juce::String getName() const override { return "clockdivider"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Clock In";
            case 1: return "Reset";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "/2";
            case 1: return "/4";
            case 2: return "/8";
            case 3: return "x2";
            case 4: return "x3";
            case 5: return "x4";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;

    // Parameters
    std::atomic<float>* gateThresholdParam { nullptr };
    std::atomic<float>* hysteresisParam { nullptr };
    std::atomic<float>* pulseWidthParam { nullptr }; // fraction of base period [0..1]

    // Division state
    int clockCount { 0 };
    bool div2State { false }, div4State { false }, div8State { false };

    // Multiplication state
    double sampleRate { 48000.0 };
    double currentClockInterval { 0.0 };
    int samplesSinceLastClock { 0 };
    double multiplierPhase[3] { 0.0, 0.0, 0.0 }; // For x2, x3, x4

    bool lastInputState { false };

    // Pulse generation state (samples remaining high)
    int pulseSamplesRemaining[6] { 0, 0, 0, 0, 0, 0 };
    
    // Schmitt trigger state for clock and reset
    bool schmittStateClock { false };
    bool schmittStateReset { false };
};


================================================================================
FILE: juce\Source\audio\modules\CommentModuleProcessor.cpp
================================================================================


#include "CommentModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#include <imnodes.h>
#endif

CommentModuleProcessor::CommentModuleProcessor()
    : ModuleProcessor(BusesProperties()), // No audio inputs or outputs
      apvts(*this, nullptr, "CommentParams", createParameterLayout())
{
    // Initialize text buffers
    snprintf(titleBuffer, sizeof(titleBuffer), "Comment");
    textBuffer[0] = '\0';
}

juce::AudioProcessorValueTreeState::ParameterLayout CommentModuleProcessor::createParameterLayout() {
    return {}; // No audio parameters are needed
}

void CommentModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&) {
    buffer.clear(); // This module produces no sound
}

// Save the comment's content and dimensions to the preset file
juce::ValueTree CommentModuleProcessor::getExtraStateTree() const {
    juce::ValueTree vt("CommentState");
    vt.setProperty("title", juce::String(titleBuffer), nullptr);
    vt.setProperty("text", juce::String(textBuffer), nullptr);
    vt.setProperty("width", nodeWidth, nullptr);
    vt.setProperty("height", nodeHeight, nullptr);
    return vt;
}

// Load the comment's content and dimensions from a preset file
void CommentModuleProcessor::setExtraStateTree(const juce::ValueTree& vt) {
    if (vt.hasType("CommentState")) {
        strncpy(titleBuffer, vt.getProperty("title", "Comment").toString().toRawUTF8(), sizeof(titleBuffer) - 1);
        strncpy(textBuffer, vt.getProperty("text", "").toString().toRawUTF8(), sizeof(textBuffer) - 1);
        nodeWidth = (float)vt.getProperty("width", 250.0);
        nodeHeight = (float)vt.getProperty("height", 150.0);
        // Note: Node dimensions will be applied in drawParametersInNode when the UI is rendered
    }
}

#if defined(PRESET_CREATOR_UI)
void CommentModuleProcessor::drawParametersInNode(float, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    // Clamp to reasonable bounds (defensive)
    nodeWidth = juce::jlimit(150.0f, 800.0f, nodeWidth);
    nodeHeight = juce::jlimit(100.0f, 600.0f, nodeHeight);

    // Draw content in a child with our exact size
    ImGui::BeginChild("CommentContent", ImVec2(nodeWidth, nodeHeight), true,
                      ImGuiWindowFlags_NoScrollbar | ImGuiWindowFlags_NoScrollWithMouse);

    // Title Input - ensure null termination
    titleBuffer[sizeof(titleBuffer) - 1] = '\0';
    if (ImGui::InputText("##title", titleBuffer, sizeof(titleBuffer)))
    {
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    }

    // Body Input - ensure null termination and use our exact size
    textBuffer[sizeof(textBuffer) - 1] = '\0';
    const ImVec2 textAreaSize(nodeWidth - 16.0f, nodeHeight - 70.0f);
    if (ImGui::InputTextMultiline("##text", textBuffer, sizeof(textBuffer), textAreaSize))
    {
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    }

    // Draw resize handle in bottom-right corner
    const ImVec2 resizeHandleSize(16.0f, 16.0f);
    ImVec2 crMax = ImGui::GetWindowContentRegionMax();
    ImVec2 winPos = ImGui::GetWindowPos();
    ImVec2 handleScreenPos = ImVec2(winPos.x + crMax.x - resizeHandleSize.x, winPos.y + crMax.y - resizeHandleSize.y);
    
    ImGui::SetCursorScreenPos(handleScreenPos); // <<< THIS IS THE PROBLEMATIC CALL
    ImGui::InvisibleButton("##resize", resizeHandleSize);
    const bool isResizing = ImGui::IsItemActive() && ImGui::IsMouseDragging(ImGuiMouseButton_Left);

    if (isResizing)
    {
        const ImVec2 delta = ImGui::GetMouseDragDelta(ImGuiMouseButton_Left);
        nodeWidth = juce::jlimit(150.0f, 800.0f, nodeWidth + delta.x);
        nodeHeight = juce::jlimit(100.0f, 600.0f, nodeHeight + delta.y);
        ImGui::ResetMouseDragDelta(ImGuiMouseButton_Left);
        wasBeingResizedLastFrame = true;
    }
    else if (wasBeingResizedLastFrame)
    {
        // Just finished resizing, trigger undo snapshot
        wasBeingResizedLastFrame = false;
        onModificationEnded();
    }

    // Draw resize handle indicator
    const ImVec2 handleStart(handleScreenPos.x + 4, handleScreenPos.y + 4);
    const ImVec2 handleEnd(handleScreenPos.x + resizeHandleSize.x - 4, handleScreenPos.y + resizeHandleSize.y - 4);
    ImGui::GetWindowDrawList()->AddTriangleFilled(
        ImVec2(handleStart.x, handleEnd.y),
        ImVec2(handleEnd.x, handleEnd.y),
        ImVec2(handleEnd.x, handleStart.y),
        ImGui::GetColorU32(ImGuiCol_ResizeGrip));

    // <<< FIX 1: Satisfy the assertion by forcing ImGui to update its boundaries >>>
    ImGui::Dummy(ImVec2(1.0f, 1.0f));

    // <<< FIX 2: Correctly end the child window we started >>>
    ImGui::EndChild();
}
#endif


================================================================================
FILE: juce\Source\audio\modules\CommentModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class CommentModuleProcessor : public ModuleProcessor
{
public:
    CommentModuleProcessor();
    ~CommentModuleProcessor() override = default;

    const juce::String getName() const override { return "comment"; }

    void prepareToPlay(double, int) override {}
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers&) override {} // This node has no pins
#endif

    // Public buffers for UI interaction
    char titleBuffer[64];
    char textBuffer[2048];
    float nodeWidth = 250.0f;  // A more standard default width
    float nodeHeight = 150.0f; // A more standard default height

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

#if defined(PRESET_CREATOR_UI)
    bool wasBeingResizedLastFrame = false;
#endif
};


================================================================================
FILE: juce\Source\audio\modules\ComparatorModuleProcessor.cpp
================================================================================


#include "ComparatorModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout ComparatorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>("threshold", "Threshold", 0.0f, 1.0f, 0.5f));
    return { p.begin(), p.end() };
}

ComparatorModuleProcessor::ComparatorModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("In", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "ComparatorParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue("threshold");
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void ComparatorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto* in = buffer.getReadPointer(0);
    auto* out = buffer.getWritePointer(0);
    const float threshold = thresholdParam->load();

    for (int i = 0; i < buffer.getNumSamples(); ++i)
        out[i] = (in[i] >= threshold) ? 1.0f : 0.0f;

    if (!lastOutputValues.empty())
        lastOutputValues[0]->store(out[buffer.getNumSamples() - 1]);
}

#if defined(PRESET_CREATOR_UI)
void ComparatorModuleProcessor::drawParametersInNode(float itemWidth,
                                                    const std::function<bool(const juce::String& /*paramId*/)>&,
                                                    const std::function<void()>& onModificationEnded)
{
    float t = thresholdParam->load();
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderFloat("Threshold", &t, 0.0f, 1.0f))
        *thresholdParam = t;
    if (ImGui::IsItemDeactivatedAfterEdit())
        onModificationEnded();
    ImGui::PopItemWidth();
}

void ComparatorModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In", 0);
    helpers.drawAudioOutputPin("Out", 0);
}
#endif




================================================================================
FILE: juce\Source\audio\modules\ComparatorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class ComparatorModuleProcessor : public ModuleProcessor
{
public:
    ComparatorModuleProcessor();
    ~ComparatorModuleProcessor() override = default;

    const juce::String getName() const override { return "comparator"; }
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void prepareToPlay(double, int) override {}
    void releaseResources() override {}

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth,
                              const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* thresholdParam { nullptr };
};

================================================================================
FILE: juce\Source\audio\modules\CompressorModuleProcessor.cpp
================================================================================


#include "CompressorModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout CompressorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdThreshold, "Threshold", -60.0f, 0.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRatio, "Ratio", 1.0f, 20.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdAttack, "Attack", 0.1f, 200.0f, 10.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRelease, "Release", 5.0f, 1000.0f, 100.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMakeup, "Makeup Gain", -12.0f, 12.0f, 0.0f));
    
    return { params.begin(), params.end() };
}

CompressorModuleProcessor::CompressorModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(7), true) // 0-1: Audio In, 2-6: Threshold/Ratio/Attack/Release/Makeup Mods
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "CompressorParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue(paramIdThreshold);
    ratioParam = apvts.getRawParameterValue(paramIdRatio);
    attackParam = apvts.getRawParameterValue(paramIdAttack);
    releaseParam = apvts.getRawParameterValue(paramIdRelease);
    makeupParam = apvts.getRawParameterValue(paramIdMakeup);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void CompressorModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2;

    compressor.prepare(spec);
    compressor.reset();
}

void CompressorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    // Copy input to output for in-place processing
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }

    // --- Update DSP Parameters from unified input bus (once per block) ---
    float finalThreshold = thresholdParam->load();
    if (isParamInputConnected(paramIdThresholdMod) && inBus.getNumChannels() > 2)
        finalThreshold = juce::jmap(inBus.getSample(2, 0), 0.0f, 1.0f, -60.0f, 0.0f);
        
    float finalRatio = ratioParam->load();
    if (isParamInputConnected(paramIdRatioMod) && inBus.getNumChannels() > 3)
        finalRatio = juce::jmap(inBus.getSample(3, 0), 0.0f, 1.0f, 1.0f, 20.0f);

    float finalAttack = attackParam->load();
    if (isParamInputConnected(paramIdAttackMod) && inBus.getNumChannels() > 4)
        finalAttack = juce::jmap(inBus.getSample(4, 0), 0.0f, 1.0f, 0.1f, 200.0f);

    float finalRelease = releaseParam->load();
    if (isParamInputConnected(paramIdReleaseMod) && inBus.getNumChannels() > 5)
        finalRelease = juce::jmap(inBus.getSample(5, 0), 0.0f, 1.0f, 5.0f, 1000.0f);
        
    float finalMakeup = makeupParam->load();
    if (isParamInputConnected(paramIdMakeupMod) && inBus.getNumChannels() > 6)
        finalMakeup = juce::jmap(inBus.getSample(6, 0), 0.0f, 1.0f, -12.0f, 12.0f);

    compressor.setThreshold(finalThreshold);
    compressor.setRatio(finalRatio);
    compressor.setAttack(finalAttack);
    compressor.setRelease(finalRelease);
    
    // --- Process the Audio ---
    juce::dsp::AudioBlock<float> block(outBus);
    juce::dsp::ProcessContextReplacing<float> context(block);
    compressor.process(context);

    // Apply makeup gain
    outBus.applyGain(juce::Decibels::decibelsToGain(finalMakeup));

    // --- Update UI Telemetry & Tooltips ---
    setLiveParamValue("threshold_live", finalThreshold);
    setLiveParamValue("ratio_live", finalRatio);
    setLiveParamValue("attack_live", finalAttack);
    setLiveParamValue("release_live", finalRelease);
    setLiveParamValue("makeup_live", finalMakeup);
    
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool CompressorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdThresholdMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdRatioMod)     { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdAttackMod)    { outChannelIndexInBus = 4; return true; }
    if (paramId == paramIdReleaseMod)   { outChannelIndexInBus = 5; return true; }
    if (paramId == paramIdMakeupMod)    { outChannelIndexInBus = 6; return true; }
    return false;
}

juce::String CompressorModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    // Modulation bus starts at channel 2
    if (channel == 2) return "Thresh Mod";
    if (channel == 3) return "Ratio Mod";
    if (channel == 4) return "Attack Mod";
    if (channel == 5) return "Release Mod";
    if (channel == 6) return "Makeup Mod";
    return {};
}

juce::String CompressorModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void CompressorModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    // Lambda that correctly handles modulation
    auto drawSlider = [&](const char* label, const juce::String& paramId, const juce::String& modId, float min, float max, const char* format) {
        bool isMod = isParamModulated(modId);
        float value = isMod ? getLiveParamValueFor(modId, paramId + juce::String("_live"), ap.getRawParameterValue(paramId)->load())
                            : ap.getRawParameterValue(paramId)->load();
        
        if (isMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(label, &value, min, max, format))
            if (!isMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        if (!isMod) adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    };

    drawSlider("Threshold", paramIdThreshold, paramIdThresholdMod, -60.0f, 0.0f, "%.1f dB");
    drawSlider("Ratio", paramIdRatio, paramIdRatioMod, 1.0f, 20.0f, "%.1f : 1");
    drawSlider("Attack", paramIdAttack, paramIdAttackMod, 0.1f, 200.0f, "%.1f ms");
    drawSlider("Release", paramIdRelease, paramIdReleaseMod, 5.0f, 1000.0f, "%.0f ms");
    drawSlider("Makeup", paramIdMakeup, paramIdMakeupMod, -12.0f, 12.0f, "%.1f dB");

    ImGui::PopItemWidth();
}

void CompressorModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Thresh Mod", 2);
    helpers.drawAudioInputPin("Ratio Mod", 3);
    helpers.drawAudioInputPin("Attack Mod", 4);
    helpers.drawAudioInputPin("Release Mod", 5);
    helpers.drawAudioInputPin("Makeup Mod", 6);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\CompressorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class CompressorModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdThreshold = "threshold";
    static constexpr auto paramIdRatio = "ratio";
    static constexpr auto paramIdAttack = "attack";
    static constexpr auto paramIdRelease = "release";
    static constexpr auto paramIdMakeup = "makeup";

    // Virtual IDs for modulation inputs
    static constexpr auto paramIdThresholdMod = "threshold_mod";
    static constexpr auto paramIdRatioMod = "ratio_mod";
    static constexpr auto paramIdAttackMod = "attack_mod";
    static constexpr auto paramIdReleaseMod = "release_mod";
    static constexpr auto paramIdMakeupMod = "makeup_mod";

    CompressorModuleProcessor();
    ~CompressorModuleProcessor() override = default;

    const juce::String getName() const override { return "compressor"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // The core JUCE DSP Compressor object
    juce::dsp::Compressor<float> compressor;

    // Cached atomic pointers to parameters
    std::atomic<float>* thresholdParam { nullptr };
    std::atomic<float>* ratioParam { nullptr };
    std::atomic<float>* attackParam { nullptr };
    std::atomic<float>* releaseParam { nullptr };
    std::atomic<float>* makeupParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\CVMixerModuleProcessor.cpp
================================================================================


#include "CVMixerModuleProcessor.h"

CVMixerModuleProcessor::CVMixerModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("CV Inputs", juce::AudioChannelSet::discreteChannels(4), true)  // Bus 0: A, B, C, D
        .withInput ("Crossfade Mod", juce::AudioChannelSet::mono(), true)           // Bus 1
        .withInput ("Level A Mod", juce::AudioChannelSet::mono(), true)             // Bus 2
        .withInput ("Level C Mod", juce::AudioChannelSet::mono(), true)             // Bus 3
        .withInput ("Level D Mod", juce::AudioChannelSet::mono(), true)             // Bus 4
        .withOutput("Outputs", juce::AudioChannelSet::discreteChannels(2), true)),  // Bus 0: Mix Out, Inv Out
      apvts (*this, nullptr, "CVMixerParams", createParameterLayout())
{
    crossfadeParam = apvts.getRawParameterValue ("crossfade");
    levelAParam    = apvts.getRawParameterValue ("levelA");
    levelCParam    = apvts.getRawParameterValue ("levelC");
    levelDParam    = apvts.getRawParameterValue ("levelD");

    // Initialize value tooltips for the two outputs
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Mix Out
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Inv Out
}

juce::AudioProcessorValueTreeState::ParameterLayout CVMixerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    
    // Crossfade: -1 = full A, 0 = equal mix, +1 = full B
    p.push_back (std::make_unique<juce::AudioParameterFloat> (
        "crossfade", "Crossfade A/B", 
        juce::NormalisableRange<float> (-1.0f, 1.0f, 0.001f), 0.0f));
    
    // Level A: master level for the A/B crossfade section (0..1)
    p.push_back (std::make_unique<juce::AudioParameterFloat> (
        "levelA", "Level A/B", 
        juce::NormalisableRange<float> (0.0f, 1.0f, 0.001f), 1.0f));
    
    // Level C: bipolar for adding/subtracting input C
    p.push_back (std::make_unique<juce::AudioParameterFloat> (
        "levelC", "Level C", 
        juce::NormalisableRange<float> (-1.0f, 1.0f, 0.001f), 0.0f));
    
    // Level D: bipolar for adding/subtracting input D
    p.push_back (std::make_unique<juce::AudioParameterFloat> (
        "levelD", "Level D", 
        juce::NormalisableRange<float> (-1.0f, 1.0f, 0.001f), 0.0f));
    
    return { p.begin(), p.end() };
}

void CVMixerModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (sampleRate, samplesPerBlock);
}

void CVMixerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    // Get input and output buses
    auto cvInputs = getBusBuffer(buffer, true, 0);  // 4 discrete channels: A, B, C, D
    auto outputs = getBusBuffer(buffer, false, 0);  // 2 discrete channels: Mix Out, Inv Out
    
    const int numSamples = buffer.getNumSamples();
    
    // Read modulation CV values (first sample of each mod bus)
    float crossfadeMod = 0.0f;
    float levelAMod = 0.0f;
    float levelCMod = 0.0f;
    float levelDMod = 0.0f;
    
    if (isParamInputConnected("crossfade"))
    {
        const auto& modBus = getBusBuffer(buffer, true, 1);
        if (modBus.getNumChannels() > 0)
            crossfadeMod = modBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("levelA"))
    {
        const auto& modBus = getBusBuffer(buffer, true, 2);
        if (modBus.getNumChannels() > 0)
            levelAMod = modBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("levelC"))
    {
        const auto& modBus = getBusBuffer(buffer, true, 3);
        if (modBus.getNumChannels() > 0)
            levelCMod = modBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("levelD"))
    {
        const auto& modBus = getBusBuffer(buffer, true, 4);
        if (modBus.getNumChannels() > 0)
            levelDMod = modBus.getReadPointer(0)[0];
    }
    
    // Determine final parameter values (modulated or from parameters)
    float crossfade = 0.0f;
    if (isParamInputConnected("crossfade"))
    {
        // Map CV [0,1] to crossfade [-1, 1]
        crossfade = -1.0f + crossfadeMod * 2.0f;
    }
    else
    {
        crossfade = crossfadeParam != nullptr ? crossfadeParam->load() : 0.0f;
    }
    
    float levelA = 0.0f;
    if (isParamInputConnected("levelA"))
    {
        // Map CV [0,1] to levelA [0, 1]
        levelA = levelAMod;
    }
    else
    {
        levelA = levelAParam != nullptr ? levelAParam->load() : 1.0f;
    }
    
    float levelC = 0.0f;
    if (isParamInputConnected("levelC"))
    {
        // Map CV [0,1] to levelC [-1, 1]
        levelC = -1.0f + levelCMod * 2.0f;
    }
    else
    {
        levelC = levelCParam != nullptr ? levelCParam->load() : 0.0f;
    }
    
    float levelD = 0.0f;
    if (isParamInputConnected("levelD"))
    {
        // Map CV [0,1] to levelD [-1, 1]
        levelD = -1.0f + levelDMod * 2.0f;
    }
    else
    {
        levelD = levelDParam != nullptr ? levelDParam->load() : 0.0f;
    }
    
    // Get read pointers for all inputs (may be null if not connected)
    const float* inA = cvInputs.getNumChannels() > 0 ? cvInputs.getReadPointer(0) : nullptr;
    const float* inB = cvInputs.getNumChannels() > 1 ? cvInputs.getReadPointer(1) : nullptr;
    const float* inC = cvInputs.getNumChannels() > 2 ? cvInputs.getReadPointer(2) : nullptr;
    const float* inD = cvInputs.getNumChannels() > 3 ? cvInputs.getReadPointer(3) : nullptr;
    
    // Get write pointers for outputs
    float* mixOut = outputs.getNumChannels() > 0 ? outputs.getWritePointer(0) : nullptr;
    float* invOut = outputs.getNumChannels() > 1 ? outputs.getWritePointer(1) : nullptr;
    
    // Process each sample
    for (int i = 0; i < numSamples; ++i)
    {
        // Read input samples (0.0 if not connected)
        const float a = inA ? inA[i] : 0.0f;
        const float b = inB ? inB[i] : 0.0f;
        const float c = inC ? inC[i] : 0.0f;
        const float d = inD ? inD[i] : 0.0f;
        
        // 1. Linear crossfade between A and B
        // Convert crossfade from [-1, 1] to mix amount [0, 1]
        const float mixAmount = (crossfade + 1.0f) * 0.5f;
        const float crossfaded_AB = (a * (1.0f - mixAmount)) + (b * mixAmount);
        
        // 2. Apply master level for the A/B section
        const float final_AB = crossfaded_AB * levelA;
        
        // 3. Sum all inputs with their respective levels
        const float finalMix = final_AB + (c * levelC) + (d * levelD);
        
        // 4. Write to outputs
        if (mixOut) mixOut[i] = finalMix;
        if (invOut) invOut[i] = -finalMix;
    }
    
    // Store live modulated values for UI display
    setLiveParamValue("crossfade_live", crossfade);
    setLiveParamValue("levelA_live", levelA);
    setLiveParamValue("levelC_live", levelC);
    setLiveParamValue("levelD_live", levelD);
    
    // Update tooltips with last sample values
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0] && mixOut) lastOutputValues[0]->store(mixOut[numSamples - 1]);
        if (lastOutputValues[1] && invOut) lastOutputValues[1]->store(invOut[numSamples - 1]);
    }
}

#if defined(PRESET_CREATOR_UI)
void CVMixerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float crossfade = crossfadeParam != nullptr ? crossfadeParam->load() : 0.0f;
    float levelA = levelAParam != nullptr ? levelAParam->load() : 1.0f;
    float levelC = levelCParam != nullptr ? levelCParam->load() : 0.0f;
    float levelD = levelDParam != nullptr ? levelDParam->load() : 0.0f;

    ImGui::PushItemWidth (itemWidth);

    // Crossfade A/B (horizontal slider)
    bool isCrossfadeModulated = isParamModulated("crossfade");
    if (isCrossfadeModulated) {
        crossfade = getLiveParamValueFor("crossfade", "crossfade_live", crossfade);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("A <-> B", &crossfade, -1.0f, 1.0f)) {
        if (!isCrossfadeModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("crossfade"))) *p = crossfade;
        }
    }
    if (!isCrossfadeModulated) adjustParamOnWheel (ap.getParameter ("crossfade"), "crossfade", crossfade);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isCrossfadeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::Spacing();

    // Level A (master level for A/B section)
    bool isLevelAModulated = isParamModulated("levelA");
    if (isLevelAModulated) {
        levelA = getLiveParamValueFor("levelA", "levelA_live", levelA);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Level A/B", &levelA, 0.0f, 1.0f)) {
        if (!isLevelAModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("levelA"))) *p = levelA;
        }
    }
    if (!isLevelAModulated) adjustParamOnWheel (ap.getParameter ("levelA"), "levelA", levelA);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isLevelAModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Level C (bipolar)
    bool isLevelCModulated = isParamModulated("levelC");
    if (isLevelCModulated) {
        levelC = getLiveParamValueFor("levelC", "levelC_live", levelC);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Level C", &levelC, -1.0f, 1.0f)) {
        if (!isLevelCModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("levelC"))) *p = levelC;
        }
    }
    if (!isLevelCModulated) adjustParamOnWheel (ap.getParameter ("levelC"), "levelC", levelC);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isLevelCModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Level D (bipolar)
    bool isLevelDModulated = isParamModulated("levelD");
    if (isLevelDModulated) {
        levelD = getLiveParamValueFor("levelD", "levelD_live", levelD);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Level D", &levelD, -1.0f, 1.0f)) {
        if (!isLevelDModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("levelD"))) *p = levelD;
        }
    }
    if (!isLevelDModulated) adjustParamOnWheel (ap.getParameter ("levelD"), "levelD", levelD);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isLevelDModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}
#endif

void CVMixerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Audio inputs
    helpers.drawAudioInputPin("In A", 0);
    helpers.drawAudioInputPin("In B", 1);
    helpers.drawAudioInputPin("In C", 2);
    helpers.drawAudioInputPin("In D", 3);

    // Modulation inputs
    int busIdx, chanInBus;
    if (getParamRouting("crossfade", busIdx, chanInBus))
        helpers.drawAudioInputPin("Crossfade Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("levelA", busIdx, chanInBus))
        helpers.drawAudioInputPin("Level A Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("levelC", busIdx, chanInBus))
        helpers.drawAudioInputPin("Level C Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("levelD", busIdx, chanInBus))
        helpers.drawAudioInputPin("Level D Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

    // Outputs
    helpers.drawAudioOutputPin("Mix Out", 0);
    helpers.drawAudioOutputPin("Inv Out", 1);
}

bool CVMixerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outChannelIndexInBus = 0;
    if (paramId == "crossfade") { outBusIndex = 1; return true; }
    if (paramId == "levelA")    { outBusIndex = 2; return true; }
    if (paramId == "levelC")    { outBusIndex = 3; return true; }
    if (paramId == "levelD")    { outBusIndex = 4; return true; }
    return false;
}



================================================================================
FILE: juce\Source\audio\modules\CVMixerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

/**
 * CVMixerModuleProcessor - A dedicated mixer for control voltages (CV/modulation signals).
 * 
 * Features:
 * - Linear crossfading between two inputs (A and B) for precise morphing
 * - Additional summing inputs (C and D) with bipolar level controls
 * - Inverted output for signal polarity flipping
 * - Designed for CV signals with mathematically predictable linear operations
 */
class CVMixerModuleProcessor : public ModuleProcessor
{
public:
    CVMixerModuleProcessor();
    ~CVMixerModuleProcessor() override = default;

    const juce::String getName() const override { return "cv mixer"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In A";
            case 1: return "In B";
            case 2: return "In C";
            case 3: return "In D";
            case 4: return "Crossfade Mod";
            case 5: return "Level A Mod";
            case 6: return "Level C Mod";
            case 7: return "Level D Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Mix Out";
            case 1: return "Inv Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* crossfadeParam { nullptr };  // -1..1 (A to B)
    std::atomic<float>* levelAParam { nullptr };     // 0..1 (master level for A/B crossfade)
    std::atomic<float>* levelCParam { nullptr };     // -1..1 (bipolar for C)
    std::atomic<float>* levelDParam { nullptr };     // -1..1 (bipolar for D)
};



================================================================================
FILE: juce\Source\audio\modules\DebugModuleProcessor.cpp
================================================================================


#include "DebugModuleProcessor.h"
#include "../../utils/RtLogger.h"
#include "../graph/ModularSynthProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#include "../../preset_creator/PinDatabase.h"
#endif

juce::AudioProcessorValueTreeState::ParameterLayout DebugModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    return { params.begin(), params.end() };
}

DebugModuleProcessor::DebugModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("In", juce::AudioChannelSet::discreteChannels(8), true)),
      apvts(*this, nullptr, "DebugParams", createParameterLayout())
{
    fifoBuffer.resize(2048);
}

void DebugModuleProcessor::prepareToPlay(double sampleRate, int /*samplesPerBlock*/)
{
    currentSampleRate = (sampleRate > 0.0 ? sampleRate : 44100.0);
    totalSamples = 0;
    for (auto& v : lastReported) v = 0.0f;
    droppedEvents.store(0);
    for (auto& s : stats) { s.last = 0.0f; s.min = 1e9f; s.max = -1e9f; s.rmsAcc = 0.0f; s.rmsCount = 0; }
}

void DebugModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    const int numSamples = buffer.getNumSamples();
    const int channels = juce::jmin(getTotalNumInputChannels(), 8);

    int eventsThisBlock = 0;

    for (int ch = 0; ch < channels; ++ch)
    {
        if (! pinEnabled[(size_t) ch])
            continue;

        auto in = getBusBuffer(buffer, true, 0); // single bus, multi-channel
        const float value = in.getMagnitude(ch, 0, numSamples);

        const float delta = std::abs(value - lastReported[(size_t) ch]);
        if (delta >= threshold && eventsThisBlock < maxEventsPerBlock)
        {
            int start1, size1, start2, size2;
            fifo.prepareToWrite(1, start1, size1, start2, size2);
            if (size1 > 0)
            {
                fifoBuffer[(size_t) start1] = DebugEvent{ (juce::uint8) ch, value, totalSamples };
                fifo.finishedWrite(1);
                lastReported[(size_t) ch] = value;
                ++eventsThisBlock;
            }
            else
            {
                droppedEvents.fetch_add(1);
            }
        }
    }

    totalSamples += (juce::uint64) numSamples;
}

#if defined(PRESET_CREATOR_UI)
void DebugModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)> & /*isParamModulated*/, const std::function<void()> & /*onModificationEnded*/)
{
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::Checkbox("Pause", &uiPaused)) {}
    ImGui::SameLine(); ImGui::Text("Dropped: %u", droppedEvents.load());
    ImGui::SliderFloat("Threshold", &threshold, 0.0f, 0.05f, "%.4f");
    ImGui::SliderInt("Max events/block", &maxEventsPerBlock, 1, 512);
    if (ImGui::Button("Clear")) { uiEvents.clear(); for (auto& s : stats) { s.min = 1e9f; s.max = -1e9f; s.rmsAcc = 0.0f; s.rmsCount = 0; } }
    ImGui::SameLine();
    if (ImGui::Button("Copy CSV"))
    {
        // Build connection map from parent synth (src module/channel for each Debug input channel)
        juce::String csv;
        csv << "time_seconds,src_logical_id,src_module,src_channel,src_label,dst_logical_id,dst_module,dst_channel,dst_label,value\n";

        auto* synth = getParent();
        juce::uint32 selfLid = 0;
        std::array<std::vector<std::pair<juce::uint32,int>>, 8> chanSources; // per dst channel: list of (srcLid, srcChan)
        std::map<juce::uint32, juce::String> lidToType;
        if (synth != nullptr)
        {
            for (const auto& p : synth->getModulesInfo())
            {
                if (synth->getModuleForLogical(p.first) == this) { selfLid = p.first; break; }
            }
            for (const auto& p : synth->getModulesInfo()) lidToType[p.first] = p.second;
            if (selfLid != 0)
            {
                for (const auto& c : synth->getConnectionsInfo())
                {
                    if (!c.dstIsOutput && c.dstLogicalId == selfLid && c.dstChan >= 0 && c.dstChan < 8)
                        chanSources[(size_t) c.dstChan].push_back({ c.srcLogicalId, c.srcChan });
                }
            }
        }

        auto outputLabelFor = [&](const juce::String& moduleType, int channel, ModuleProcessor* mp) -> juce::String
        {
#if defined(PRESET_CREATOR_UI)
            auto it = getModulePinDatabase().find(moduleType);
            if (it != getModulePinDatabase().end())
            {
                for (const auto& ap : it->second.audioOuts)
                    if (ap.channel == channel) return ap.name;
            }
#endif
            return mp ? mp->getAudioOutputLabel(channel) : juce::String();
        };

        for (const auto& ev : uiEvents)
        {
            const double tSec = (currentSampleRate > 0.0 ? (double) ev.sampleCounter / currentSampleRate : 0.0);
            const int dstChan = (int) ev.pinIndex; // 0-based
            const juce::String dstModule = "Debug";
            if (synth != nullptr && selfLid != 0 && !chanSources[(size_t) dstChan].empty())
            {
                for (const auto& src : chanSources[(size_t) dstChan])
                {
                    ModuleProcessor* srcMp = synth->getModuleForLogical(src.first);
                    const juce::String srcName = lidToType.count(src.first) ? lidToType[src.first] : (srcMp ? srcMp->getName() : juce::String("<unknown>"));
                    const juce::String srcLabel = outputLabelFor(srcName, src.second, srcMp);
                    const juce::String dstLabel = getAudioInputLabel(dstChan);
                    csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcName << "," << juce::String(src.second) << "," << srcLabel
                        << "," << juce::String((int) selfLid) << "," << dstModule << "," << juce::String(dstChan) << "," << dstLabel << "," << juce::String(ev.value, 6) << "\n";
                }
            }
            else
            {
                const juce::String dstLabel = getAudioInputLabel(dstChan);
                csv << juce::String(tSec, 6) << ",,,,,," << juce::String((int) selfLid) << "," << dstModule << "," << juce::String(dstChan) << "," << dstLabel << "," << juce::String(ev.value, 6) << "\n";
            }
        }
        const juce::String copy = std::move(csv);
        std::string utf8 = copy.toStdString();
        ImGui::SetClipboardText(utf8.c_str());
    }
    ImGui::SameLine();
    if (ImGui::Button("Export CSV"))
    {
        static juce::String lastExportPath;
        juce::File dir = juce::File::getSpecialLocation(juce::File::userDocumentsDirectory)
                              .getChildFile("ColliderDebugLogs");
        if (! dir.exists()) (void) dir.createDirectory();
        juce::File file = dir.getNonexistentChildFile("debug_log", ".csv");
        juce::FileOutputStream out (file);
        if (out.openedOk())
        {
            // Build mapping like in Copy CSV
            juce::String csv;
            csv << "time_seconds,src_logical_id,src_module,src_channel,src_label,dst_logical_id,dst_module,dst_channel,dst_label,value\n";
            auto* synth = getParent();
            juce::uint32 selfLid = 0;
            std::array<std::vector<std::pair<juce::uint32,int>>, 8> chanSources;
            std::map<juce::uint32, juce::String> lidToType;
            if (synth != nullptr)
            {
                for (const auto& p : synth->getModulesInfo())
                {
                    if (synth->getModuleForLogical(p.first) == this) { selfLid = p.first; break; }
                }
                for (const auto& p : synth->getModulesInfo()) lidToType[p.first] = p.second;
                if (selfLid != 0)
                {
                    for (const auto& c : synth->getConnectionsInfo())
                    {
                    if (!c.dstIsOutput && c.dstLogicalId == selfLid && c.dstChan >= 0 && c.dstChan < 8)
                        chanSources[(size_t) c.dstChan].push_back({ c.srcLogicalId, c.srcChan });
                    }
                }
            }

            auto outputLabelFor = [&](const juce::String& moduleType, int channel, ModuleProcessor* mp) -> juce::String
            {
#if defined(PRESET_CREATOR_UI)
                auto it = getModulePinDatabase().find(moduleType);
                if (it != getModulePinDatabase().end())
                {
                    for (const auto& ap : it->second.audioOuts)
                        if (ap.channel == channel) return ap.name;
                }
#endif
                return mp ? mp->getAudioOutputLabel(channel) : juce::String();
            };

            for (const auto& ev : uiEvents)
            {
                const double tSec = (currentSampleRate > 0.0 ? (double) ev.sampleCounter / currentSampleRate : 0.0);
                const int dstChan = (int) ev.pinIndex;
                const juce::String dstModule = "Debug";
                if (synth != nullptr && selfLid != 0 && !chanSources[(size_t) dstChan].empty())
                {
                    for (const auto& src : chanSources[(size_t) dstChan])
                    {
                        ModuleProcessor* srcMp = synth->getModuleForLogical(src.first);
                        const juce::String srcName = lidToType.count(src.first) ? lidToType[src.first] : (srcMp ? srcMp->getName() : juce::String("<unknown>"));
                        const juce::String srcLabel = outputLabelFor(srcName, src.second, srcMp);
                        const juce::String dstLabel = getAudioInputLabel(dstChan);
                        csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcName << "," << juce::String(src.second) << "," << srcLabel
                            << "," << juce::String((int) selfLid) << "," << dstModule << "," << juce::String(dstChan) << "," << dstLabel << "," << juce::String(ev.value, 6) << "\n";
                    }
                }
                else
                {
                    const juce::String dstLabel = getAudioInputLabel(dstChan);
                    csv << juce::String(tSec, 6) << ",,,,,," << juce::String((int) selfLid) << "," << dstModule << "," << juce::String(dstChan) << "," << dstLabel << "," << juce::String(ev.value, 6) << "\n";
                }
            }
            out.writeText (csv, false, false, "\n");
            out.flush();
            lastExportPath = file.getFullPathName();
        }
        if (lastExportPath.isNotEmpty())
        {
            ImGui::SameLine();
            ImGui::TextUnformatted(lastExportPath.toRawUTF8());
        }
    }
    ImGui::PopItemWidth();

    // Drain FIFO
    int ready = fifo.getNumReady();
    while (ready > 0)
    {
        int start1, size1, start2, size2;
        fifo.prepareToRead(ready, start1, size1, start2, size2);
        auto consume = [&](int start, int size)
        {
            for (int i = 0; i < size; ++i)
            {
                const auto& ev = fifoBuffer[(size_t) (start + i)];
                // update stats
                auto& s = stats[(size_t) ev.pinIndex];
                s.last = ev.value;
                s.min = std::min(s.min, ev.value);
                s.max = std::max(s.max, ev.value);
                s.rmsAcc += ev.value * ev.value;
                s.rmsCount += 1;
                if (! uiPaused)
                    uiEvents.push_back(ev);
            }
        };
        if (size1 > 0) consume(start1, size1);
        if (size2 > 0) consume(start2, size2);
        fifo.finishedRead(size1 + size2);
        ready -= (size1 + size2);
    }

    // Bound UI list
    constexpr size_t kMaxUiEvents = 1000;
    if (uiEvents.size() > kMaxUiEvents)
        uiEvents.erase(uiEvents.begin(), uiEvents.begin() + (uiEvents.size() - kMaxUiEvents));

    // Live per-pin row
    if (ImGui::BeginTable("dbg_stats", 8, ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_RowBg))
    {
        for (int ch = 0; ch < 8; ++ch)
        {
            ImGui::TableNextColumn();
            const auto& s = stats[(size_t) ch];
            const float rms = s.rmsCount > 0 ? std::sqrt(s.rmsAcc / (float) s.rmsCount) : 0.0f;
            ImGui::Text("%d: %.3f\nmin %.3f\nmax %.3f\nrms %.3f", ch+1, s.last, s.min, s.max, rms);
        }
        ImGui::EndTable();
    }

    // Log view
    ImGui::Text("Events (newest first):");
    ImGui::BeginChild("##dbg_log", ImVec2(itemWidth, 160), true, ImGuiWindowFlags_HorizontalScrollbar);
    for (auto it = uiEvents.rbegin(); it != uiEvents.rend(); ++it)
    {
        // Convert sampleCounter to time in seconds for quick reference
        const double tSec = (currentSampleRate > 0.0 ? (double) it->sampleCounter / currentSampleRate : 0.0);
        ImGui::Text("t=%.3fs pin=%u val=%.4f", tSec, (unsigned) it->pinIndex + 1u, it->value);
    }
    ImGui::EndChild();
}

void DebugModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // One bus with 8 channels, editor pins refer to channel indices 0..7
    helpers.drawAudioInputPin("In 1", 0);
    helpers.drawAudioInputPin("In 2", 1);
    helpers.drawAudioInputPin("In 3", 2);
    helpers.drawAudioInputPin("In 4", 3);
    helpers.drawAudioInputPin("In 5", 4);
    helpers.drawAudioInputPin("In 6", 5);
    helpers.drawAudioInputPin("In 7", 6);
    helpers.drawAudioInputPin("In 8", 7);
}
#endif





================================================================================
FILE: juce\Source\audio\modules\DebugModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_core/juce_core.h>
#include <array>

struct DebugEvent
{
    juce::uint8 pinIndex;       // 0..7
    float value;                // captured value (e.g., peak)
    juce::uint64 sampleCounter; // sample-accurate timestamp
};

class DebugModuleProcessor : public ModuleProcessor
{
public:
    DebugModuleProcessor();
    ~DebugModuleProcessor() override = default;

    const juce::String getName() const override { return "debug"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    // Audio-thread state
    double currentSampleRate { 44100.0 };
    juce::uint64 totalSamples { 0 };
    std::array<float, 8> lastReported { { 0,0,0,0,0,0,0,0 } };
    std::array<uint8_t, 8> pinEnabled { { 1,1,1,1,1,1,1,1 } };
    float threshold { 0.001f };
    int maxEventsPerBlock { 64 };

    // Lock-free SPSC queue
    juce::AbstractFifo fifo { 2048 };
    std::vector<DebugEvent> fifoBuffer; // size == fifo.getTotalSize()
    std::atomic<uint32_t> droppedEvents { 0 };

    // UI-thread state
    struct PinStats { float last { 0.0f }; float min { 1e9f }; float max { -1e9f }; float rmsAcc { 0.0f }; int rmsCount { 0 }; };
    std::array<PinStats, 8> stats;
    std::vector<DebugEvent> uiEvents; // bounded list
    bool uiPaused { false };
};




================================================================================
FILE: juce\Source\audio\modules\DeCrackleModuleProcessor.cpp
================================================================================


#include "DeCrackleModuleProcessor.h"

DeCrackleModuleProcessor::DeCrackleModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Input", juce::AudioChannelSet::stereo(), true)
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "DeCrackleParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue("threshold");
    smoothingTimeMsParam = apvts.getRawParameterValue("smoothing_time");
    amountParam = apvts.getRawParameterValue("amount");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout DeCrackleModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    // Threshold: 0.01 to 1.0
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "threshold", "Threshold",
        juce::NormalisableRange<float>(0.01f, 1.0f),
        0.1f));
    
    // Smoothing time: 0.1ms to 20.0ms (logarithmic)
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "smoothing_time", "Smoothing Time",
        juce::NormalisableRange<float>(0.1f, 20.0f, 0.0f, 0.3f),
        5.0f));
    
    // Amount (dry/wet): 0.0 to 1.0
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "amount", "Amount",
        juce::NormalisableRange<float>(0.0f, 1.0f),
        1.0f));
    
    return { params.begin(), params.end() };
}

void DeCrackleModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(samplesPerBlock);
    currentSampleRate = sampleRate;
    
    // Reset state
    for (int ch = 0; ch < 2; ++ch)
    {
        lastInputSample[ch] = 0.0f;
        lastOutputSample[ch] = 0.0f;
        smoothingSamplesRemaining[ch] = 0;
    }
}

void DeCrackleModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto in = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);
    
    const int nSamps = buffer.getNumSamples();
    const int numChannels = juce::jmin(out.getNumChannels(), 2);
    
    // Get parameter values
    const float threshold = thresholdParam != nullptr ? thresholdParam->load() : 0.1f;
    const float smoothingMs = smoothingTimeMsParam != nullptr ? smoothingTimeMsParam->load() : 5.0f;
    const float wet = amountParam != nullptr ? amountParam->load() : 1.0f;
    const float dry = 1.0f - wet;
    
    // Calculate smoothing coefficient
    // Use a fixed, fast coefficient for the smoothing
    const float smoothingCoeff = 0.1f;
    
    for (int ch = 0; ch < numChannels; ++ch)
    {
        const float* input = in.getReadPointer(juce::jmin(ch, in.getNumChannels() - 1));
        float* output = out.getWritePointer(ch);
        
        for (int i = 0; i < nSamps; ++i)
        {
            float inputSample = input[i];
            
            // 1. Detect Crackle (discontinuity)
            float delta = std::abs(inputSample - lastInputSample[ch]);
            if (delta > threshold)
            {
                // A crackle is detected. Activate smoothing for a short period.
                smoothingSamplesRemaining[ch] = static_cast<int>(smoothingMs * 0.001f * currentSampleRate);
            }
            
            // 2. Apply Smoothing if Active
            float processedSample;
            if (smoothingSamplesRemaining[ch] > 0)
            {
                // Apply fast slew to smooth the transition
                lastOutputSample[ch] += (inputSample - lastOutputSample[ch]) * smoothingCoeff;
                processedSample = lastOutputSample[ch];
                smoothingSamplesRemaining[ch]--;
            }
            else
            {
                // No smoothing needed, output is the same as input
                processedSample = inputSample;
                lastOutputSample[ch] = inputSample;
            }
            
            // 3. Apply Dry/Wet Mix
            output[i] = (inputSample * dry) + (processedSample * wet);
            
            // 4. Store last input sample for the next iteration's delta calculation
            lastInputSample[ch] = inputSample;
        }
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(out.getSample(0, nSamps - 1));
        if (lastOutputValues[1] && numChannels > 1) lastOutputValues[1]->store(out.getSample(1, nSamps - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
bool DeCrackleModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    juce::ignoreUnused(paramId, outBusIndex, outChannelIndexInBus);
    // No modulation inputs for this module
    return false;
}
#endif



================================================================================
FILE: juce\Source\audio\modules\DeCrackleModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class DeCrackleModuleProcessor : public ModuleProcessor
{
public:
    DeCrackleModuleProcessor();
    ~DeCrackleModuleProcessor() override = default;

    const juce::String getName() const override { return "de-crackle"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        float threshold = thresholdParam != nullptr ? thresholdParam->load() : 0.1f;
        float smoothingMs = smoothingTimeMsParam != nullptr ? smoothingTimeMsParam->load() : 5.0f;
        float amount = amountParam != nullptr ? amountParam->load() : 1.0f;
        
        ImGui::PushItemWidth(itemWidth);
        
        // Threshold slider
        if (ImGui::SliderFloat("Threshold", &threshold, 0.01f, 1.0f, "%.3f")) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("threshold"))) *p = threshold;
        }
        adjustParamOnWheel(ap.getParameter("threshold"), "threshold", threshold);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        // Smoothing time slider
        if (ImGui::SliderFloat("Smoothing (ms)", &smoothingMs, 0.1f, 20.0f, "%.2f", ImGuiSliderFlags_Logarithmic)) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("smoothing_time"))) *p = smoothingMs;
        }
        adjustParamOnWheel(ap.getParameter("smoothing_time"), "smoothing_time", smoothingMs);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        // Amount (dry/wet) slider
        if (ImGui::SliderFloat("Amount", &amount, 0.0f, 1.0f, "%.2f")) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("amount"))) *p = amount;
        }
        adjustParamOnWheel(ap.getParameter("amount"), "amount", amount);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);
        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* thresholdParam { nullptr };
    std::atomic<float>* smoothingTimeMsParam { nullptr };
    std::atomic<float>* amountParam { nullptr };
    
    // State variables for discontinuity detection (per channel)
    float lastInputSample[2] { 0.0f, 0.0f };
    float lastOutputSample[2] { 0.0f, 0.0f };
    int smoothingSamplesRemaining[2] { 0, 0 };
    
    double currentSampleRate { 44100.0 };
};



================================================================================
FILE: juce\Source\audio\modules\DelayModuleProcessor.cpp
================================================================================


#include "DelayModuleProcessor.h"

DelayModuleProcessor::DelayModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("In", juce::AudioChannelSet::stereo(), true)
        .withInput ("Time Mod", juce::AudioChannelSet::mono(), true)
        .withInput ("Feedback Mod", juce::AudioChannelSet::mono(), true)
        .withInput ("Mix Mod", juce::AudioChannelSet::mono(), true)
        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "DelayParams", createParameterLayout())
{
    timeMsParam   = apvts.getRawParameterValue ("timeMs");
    feedbackParam = apvts.getRawParameterValue ("feedback");
    mixParam      = apvts.getRawParameterValue ("mix");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
    
    // Initialize smoothed values
    timeSm.reset(400.0f);
    feedbackSm.reset(0.4f);
    mixSm.reset(0.3f);
}

juce::AudioProcessorValueTreeState::ParameterLayout DelayModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("timeMs",  "Time (ms)", juce::NormalisableRange<float> (1.0f, 2000.0f, 0.01f, 0.4f), 400.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("feedback","Feedback",  juce::NormalisableRange<float> (0.0f, 0.95f), 0.4f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("mix",     "Mix",       juce::NormalisableRange<float> (0.0f, 1.0f), 0.3f));
    return { p.begin(), p.end() };
}

void DelayModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sr = sampleRate;
    maxDelaySamples = (int) std::ceil (2.0 * sr); // allow up to 2s safely
    dlL.setMaximumDelayInSamples (maxDelaySamples);
    dlR.setMaximumDelayInSamples (maxDelaySamples);
    juce::dsp::ProcessSpec spec { sr, (juce::uint32) samplesPerBlock, 1 };
    dlL.prepare (spec);
    dlR.prepare (spec);
    dlL.reset(); dlR.reset();
    
    // Set smoothing time for parameters (20ms for delay time, 10ms for others)
    timeSm.reset(sampleRate, 0.02);
    feedbackSm.reset(sampleRate, 0.01);
    mixSm.reset(sampleRate, 0.01);
    
    juce::Logger::writeToLog ("[Delay] prepare sr=" + juce::String (sr) + " maxSamps=" + juce::String (maxDelaySamples));
}

void DelayModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    // PER-SAMPLE FIX: Get pointers to modulation CV inputs, if they are connected
    const bool isTimeMod = isParamInputConnected("timeMs");
    const bool isFeedbackMod = isParamInputConnected("feedback");
    const bool isMixMod = isParamInputConnected("mix");

    const float* timeCV = isTimeMod ? getBusBuffer(buffer, true, 1).getReadPointer(0) : nullptr;
    const float* feedbackCV = isFeedbackMod ? getBusBuffer(buffer, true, 2).getReadPointer(0) : nullptr;
    const float* mixCV = isMixMod ? getBusBuffer(buffer, true, 3).getReadPointer(0) : nullptr;

    // Get base parameter values ONCE
    const float baseTimeMs = timeMsParam != nullptr ? timeMsParam->load() : 400.0f;
    const float baseFeedback = feedbackParam != nullptr ? feedbackParam->load() : 0.4f;
    const float baseMix = mixParam != nullptr ? mixParam->load() : 0.3f;

    // Variables to store last calculated values for UI feedback
    float lastTimeMs = baseTimeMs;
    float lastFeedback = baseFeedback;
    float lastMix = baseMix;

    auto processChannel = [&] (int ch)
    {
        float* d = buffer.getWritePointer (ch);
        for (int i = 0; i < buffer.getNumSamples(); ++i)
        {
            // PER-SAMPLE FIX: Calculate effective parameters FOR THIS SAMPLE
            float timeMs = baseTimeMs;
            if (isTimeMod && timeCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, timeCV[i]);
                // ADDITIVE MODULATION FIX: Add CV offset to base delay time
                const float octaveRange = 3.0f; // CV can modulate +/- 3 octaves of delay time
                const float octaveOffset = (cv - 0.5f) * octaveRange; // Center around 0, range [-1.5, +1.5] octaves
                timeMs = baseTimeMs * std::pow(2.0f, octaveOffset);
                timeMs = juce::jlimit(1.0f, 2000.0f, timeMs);
            }
            
            // Apply smoothing to delay time to prevent clicks
            timeSm.setTargetValue(timeMs);
            timeMs = timeSm.getNextValue();
            
            // Store for UI feedback
            lastTimeMs = timeMs;
            
            float fb = baseFeedback;
            if (isFeedbackMod && feedbackCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, feedbackCV[i]);
                // ADDITIVE MODULATION FIX: Add CV offset to base feedback
                const float feedbackRange = 0.3f; // CV can modulate feedback by +/- 0.3
                const float feedbackOffset = (cv - 0.5f) * feedbackRange; // Center around 0
                fb = baseFeedback + feedbackOffset;
                fb = juce::jlimit(0.0f, 0.95f, fb);
            }
            
            // Apply smoothing to feedback to prevent zipper noise
            feedbackSm.setTargetValue(fb);
            fb = feedbackSm.getNextValue();
            
            // Store for UI feedback
            lastFeedback = fb;
            
            float mix = baseMix;
            if (isMixMod && mixCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, mixCV[i]);
                // ADDITIVE MODULATION FIX: Add CV offset to base mix
                const float mixRange = 0.5f; // CV can modulate mix by +/- 0.5
                const float mixOffset = (cv - 0.5f) * mixRange; // Center around 0
                mix = baseMix + mixOffset;
                mix = juce::jlimit(0.0f, 1.0f, mix);
            }
            
            // Apply smoothing to mix to prevent zipper noise
            mixSm.setTargetValue(mix);
            mix = mixSm.getNextValue();
            
            // Store for UI feedback
            lastMix = mix;
            
            // Calculate delay samples for this sample
            float delaySamps = (timeMs / 1000.0f) * (float) sr;
            delaySamps = juce::jlimit (1.0f, (float) (maxDelaySamples - 1), delaySamps);
            
            // Set delay for this sample
            dlL.setDelay (delaySamps); dlR.setDelay (delaySamps);
            
            // Process this sample
            const float in = d[i];
            const float delayed = (ch == 0 ? dlL.popSample (0, delaySamps) : dlR.popSample (0, delaySamps));
            if (ch == 0) dlL.pushSample (0, in + delayed * fb); else dlR.pushSample (0, in + delayed * fb);
            d[i] = in * (1.0f - mix) + delayed * mix;
        }
    };
    processChannel (0);
    if (buffer.getNumChannels() > 1) processChannel (1);
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(buffer.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(buffer.getSample(1, buffer.getNumSamples() - 1));
    }

    // Store live modulated values for UI display
    setLiveParamValue("timeMs_live", lastTimeMs);
    setLiveParamValue("feedback_live", lastFeedback);
    setLiveParamValue("mix_live", lastMix);
}

// Parameter bus contract implementation
bool DelayModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outChannelIndexInBus = 0;
    if (paramId == "timeMs")   { outBusIndex = 1; return true; }
    if (paramId == "feedback") { outBusIndex = 2; return true; }
    if (paramId == "mix")      { outBusIndex = 3; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\DelayModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class DelayModuleProcessor : public ModuleProcessor
{
public:
    DelayModuleProcessor();
    ~DelayModuleProcessor() override = default;

    const juce::String getName() const override { return "delay"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        // Get live modulated values for display
        bool isTimeModulated = isParamModulated("timeMs");
        bool isFbModulated = isParamModulated("feedback");
        bool isMixModulated = isParamModulated("mix");
        
        // Use correct mod param IDs (same as parameter IDs)
        float timeMs = isTimeModulated ? getLiveParamValueFor("timeMs", "timeMs_live", timeMsParam->load()) : (timeMsParam != nullptr ? timeMsParam->load() : 400.0f);
        float fb = isFbModulated ? getLiveParamValueFor("feedback", "feedback_live", feedbackParam->load()) : (feedbackParam != nullptr ? feedbackParam->load() : 0.4f);
        float mix = isMixModulated ? getLiveParamValueFor("mix", "mix_live", mixParam->load()) : (mixParam != nullptr ? mixParam->load() : 0.3f);
        ImGui::PushItemWidth (itemWidth);

        // Time
        if (isTimeModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Time (ms)", &timeMs, 1.0f, 2000.0f, "%.1f")) if (!isTimeModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("timeMs"))) *p = timeMs;
        if (!isTimeModulated) adjustParamOnWheel (ap.getParameter ("timeMs"), "timeMs", timeMs);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isTimeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Feedback
        if (isFbModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Feedback", &fb, 0.0f, 0.95f)) if (!isFbModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("feedback"))) *p = fb;
        if (!isFbModulated) adjustParamOnWheel (ap.getParameter ("feedback"), "feedback", fb);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isFbModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Mix
        if (isMixModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Mix", &mix, 0.0f, 1.0f)) if (!isMixModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("mix"))) *p = mix;
        if (!isMixModulated) adjustParamOnWheel (ap.getParameter ("mix"), "mix", mix);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMixModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);

        // CORRECTED MODULATION PINS - Use absolute channel indices
        int busIdx, chanInBus;
        if (getParamRouting("timeMs", busIdx, chanInBus))
            helpers.drawAudioInputPin("Time Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("feedback", busIdx, chanInBus))
            helpers.drawAudioInputPin("Feedback Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("mix", busIdx, chanInBus))
            helpers.drawAudioInputPin("Mix Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Time Mod";
            case 3: return "Feedback Mod";
            case 4: return "Mix Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::DelayLine<float, juce::dsp::DelayLineInterpolationTypes::Lagrange3rd> dlL { 48000 }, dlR { 48000 };
    std::atomic<float>* timeMsParam { nullptr };
    std::atomic<float>* feedbackParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
    double sr { 48000.0 };
    int maxDelaySamples { 48000 };
    
    // Smoothed values to prevent clicks and zipper noise
    juce::SmoothedValue<float> timeSm;
    juce::SmoothedValue<float> feedbackSm;
    juce::SmoothedValue<float> mixSm;
};




================================================================================
FILE: juce\Source\audio\modules\DriveModuleProcessor.cpp
================================================================================


#include "DriveModuleProcessor.h"
#include <cmath> // For std::tanh

juce::AudioProcessorValueTreeState::ParameterLayout DriveModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDrive, "Drive", 0.0f, 2.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMix, "Mix", 0.0f, 1.0f, 1.0f));
    
    return { params.begin(), params.end() };
}

DriveModuleProcessor::DriveModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Audio In", juce::AudioChannelSet::stereo(), true)
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "DriveParams", createParameterLayout())
{
    driveParam = apvts.getRawParameterValue(paramIdDrive);
    mixParam = apvts.getRawParameterValue(paramIdMix);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void DriveModuleProcessor::prepareToPlay(double /*sampleRate*/, int samplesPerBlock)
{
    tempBuffer.setSize(2, samplesPerBlock);
}

void DriveModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);
    
    const float driveAmount = driveParam->load();
    const float mixAmount = mixParam->load();

    // Copy input to output
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }
    
    const int numChannels = juce::jmin(numInputChannels, numOutputChannels);

    // If drive is zero and mix is fully dry, we can skip processing entirely.
    if (driveAmount <= 0.001f && mixAmount <= 0.001f)
    {
        // Update output values for tooltips
        if (lastOutputValues.size() >= 2)
        {
            if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
            if (lastOutputValues[1] && numChannels > 1) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
        }
        return;
    }

    // --- Dry/Wet Mix Implementation (inspired by VoiceProcessor.cpp) ---
    // 1. Make a copy of the original (dry) signal.
    tempBuffer.makeCopyOf(outBus);

    // 2. Apply the distortion to the temporary buffer to create the wet signal.
    const float k = juce::jlimit(0.0f, 10.0f, driveAmount) * 5.0f;
    for (int ch = 0; ch < tempBuffer.getNumChannels(); ++ch)
    {
        auto* data = tempBuffer.getWritePointer(ch);
        for (int i = 0; i < tempBuffer.getNumSamples(); ++i)
        {
            data[i] = std::tanh(k * data[i]);
        }
    }

    // 3. Blend the dry and wet signals in the main output buffer.
    const float dryLevel = 1.0f - mixAmount;
    const float wetLevel = mixAmount;

    for (int ch = 0; ch < numChannels; ++ch)
    {
        // First, scale the original (dry) signal down.
        outBus.applyGain(ch, 0, buffer.getNumSamples(), dryLevel);
        // Then, add the scaled wet signal from our temporary buffer.
        outBus.addFrom(ch, 0, tempBuffer, ch, 0, buffer.getNumSamples(), wetLevel);
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1] && numChannels > 1) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool DriveModuleProcessor::getParamRouting(const juce::String& /*paramId*/, int& /*outBusIndex*/, int& /*outChannelIndexInBus*/) const
{
    // No modulation inputs in this version
    return false;
}

juce::String DriveModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    return {};
}

juce::String DriveModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void DriveModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, float min, float max, const char* format) {
        float value = ap.getRawParameterValue(paramId)->load();
        if (ImGui::SliderFloat(label, &value, min, max, format))
            *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    };

    drawSlider("Drive", paramIdDrive, 0.0f, 2.0f, "%.2f");
    drawSlider("Mix", paramIdMix, 0.0f, 1.0f, "%.2f");

    ImGui::PopItemWidth();
}

void DriveModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\DriveModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class DriveModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdDrive = "drive";
    static constexpr auto paramIdMix = "mix";

    DriveModuleProcessor();
    ~DriveModuleProcessor() override = default;

    const juce::String getName() const override { return "drive"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // A temporary buffer is needed to properly implement the dry/wet mix
    juce::AudioBuffer<float> tempBuffer;

    // Cached atomic pointers to parameters
    std::atomic<float>* driveParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\FrequencyGraphModuleProcessor.cpp
================================================================================


#include "FrequencyGraphModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#endif

juce::AudioProcessorValueTreeState::ParameterLayout FrequencyGraphModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDecay, "Decay Time", 0.90f, 0.999f, 0.98f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdSubThreshold, "Sub Threshold", -96.0f, 0.0f, -24.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdBassThreshold, "Bass Threshold", -96.0f, 0.0f, -24.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMidThreshold, "Mid Threshold", -96.0f, 0.0f, -24.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdHighThreshold, "High Threshold", -96.0f, 0.0f, -24.0f));
    return { params.begin(), params.end() };
}

FrequencyGraphModuleProcessor::FrequencyGraphModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("In", juce::AudioChannelSet::mono(), true)
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)
          .withOutput("CV Out", juce::AudioChannelSet::discreteChannels(TotalCVOutputs), true)),
      apvts(*this, nullptr, "FreqGraphParams", createParameterLayout()),
      fft(fftOrder),
      window(fftSize, juce::dsp::WindowingFunction<float>::hann),
      abstractFifo(128)
{
    fftInputBuffer.resize(fftSize, 0.0f);
    fftData.resize(fftSize * 2, 0.0f);

    fifoBuffer.resize(128);
    for (auto& frame : fifoBuffer) { frame.resize(fftSize / 2 + 1, 0.0f); }
    latestFftData.resize(fftSize / 2 + 1, -100.0f);
    peakHoldData.resize(fftSize / 2 + 1, -100.0f);

    decayParam = apvts.getRawParameterValue(paramIdDecay);
    subThresholdParam = apvts.getRawParameterValue(paramIdSubThreshold);
    bassThresholdParam = apvts.getRawParameterValue(paramIdBassThreshold);
    midThresholdParam = apvts.getRawParameterValue(paramIdMidThreshold);
    highThresholdParam = apvts.getRawParameterValue(paramIdHighThreshold);
    
    juce::Logger::writeToLog("[FrequencyGraph] Constructor: Instance created.");
}

void FrequencyGraphModuleProcessor::prepareToPlay(double sampleRate, int /*samplesPerBlock*/)
{
    samplesAccumulated = 0;
    abstractFifo.reset();
    std::fill(latestFftData.begin(), latestFftData.end(), -100.0f);
    std::fill(peakHoldData.begin(), peakHoldData.end(), -100.0f);
    for(auto& analyser : bandAnalysers)
    {
        analyser.lastGateState = false;
        analyser.triggerSamplesRemaining = 0;
    }
    juce::Logger::writeToLog("[FrequencyGraph] prepareToPlay: State reset for sample rate " + juce::String(sampleRate));
}

void FrequencyGraphModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& /*midi*/)
{
    juce::ScopedNoDenormals noDenormals;

    auto inBus = getBusBuffer(buffer, true, 0);
    auto audioOutBus = getBusBuffer(buffer, false, 0); // Audio is on bus 0
    auto cvOutBus = getBusBuffer(buffer, false, 1);    // CV is on bus 1

    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // --- Logging Setup ---
    static int debugCounter = 0;
    const bool shouldLog = ((debugCounter++ % 100) == 0);

    if (shouldLog && inBus.getNumChannels() > 0)
    {
        float inputRms = inBus.getRMSLevel(0, 0, numSamples);
        juce::Logger::writeToLog("[GraphicEQ Debug] At Entry - Input RMS: " + juce::String(inputRms, 6));
    }

    // --- CRITICAL FIX: Capture input audio BEFORE any write operations ---
    juce::AudioBuffer<float> inputCopy(2, numSamples);
    if (inBus.getNumChannels() > 0)
    {
        inputCopy.copyFrom(0, 0, inBus, 0, 0, numSamples);
        if (inBus.getNumChannels() > 1)
            inputCopy.copyFrom(1, 0, inBus, 1, 0, numSamples);
        else
            inputCopy.copyFrom(1, 0, inBus, 0, 0, numSamples); // duplicate mono to R
    }
    else
    {
        inputCopy.clear();
    }
    // --- END OF CRITICAL FIX ---

    // --- FFT Processing (uses its own safe buffer) ---
    const double sampleRate = getSampleRate();
    const float* inputData = inputCopy.getReadPointer(0); // Analyze the mono sum from our safe copy
    if (inputData)
    {
        bandAnalysers[0].thresholdDb = subThresholdParam->load();
        bandAnalysers[1].thresholdDb = bassThresholdParam->load();
        bandAnalysers[2].thresholdDb = midThresholdParam->load();
        bandAnalysers[3].thresholdDb = highThresholdParam->load();
        
        int inputSamplesConsumed = 0;
        
        while (inputSamplesConsumed < numSamples)
        {
            const int samplesToCopy = std::min(numSamples - inputSamplesConsumed, fftSize - samplesAccumulated);
            
            std::copy(inputData + inputSamplesConsumed,
                      inputData + inputSamplesConsumed + samplesToCopy,
                      fftInputBuffer.begin() + samplesAccumulated);
            
            samplesAccumulated += samplesToCopy;
            inputSamplesConsumed += samplesToCopy;

            if (samplesAccumulated >= fftSize)
            {
                std::fill(fftData.begin(), fftData.end(), 0.0f);
                std::copy(fftInputBuffer.begin(), fftInputBuffer.end(), fftData.begin());
                window.multiplyWithWindowingTable(fftData.data(), fftSize);
                fft.performFrequencyOnlyForwardTransform(fftData.data());

                float bandEnergyDb[4] = { -100.0f, -100.0f, -100.0f, -100.0f };
                const float bandRanges[] = { 60, 250, 2000, 8000, 22000 };
                int currentBand = 0;
                float maxInBand = 0.0f;

                for (int bin = 1; bin < fftSize / 2 + 1; ++bin)
                {
                    float freq = (float)bin * (float)sampleRate / (float)fftSize;
                    if (freq > bandRanges[currentBand])
                    {
                        float normalizedMagnitude = maxInBand / (float)fftSize;
                        bandEnergyDb[currentBand] = juce::Decibels::gainToDecibels(normalizedMagnitude, -100.0f);
                        currentBand++;
                        maxInBand = 0.0f;
                        if (currentBand >= 4) break;
                    }
                    maxInBand = std::max(maxInBand, fftData[bin]);
                }

                for (int band = 0; band < 4; ++band)
                {
                    bool gateState = bandEnergyDb[band] > bandAnalysers[band].thresholdDb;
                    if (gateState && !bandAnalysers[band].lastGateState)
                    {
                        bandAnalysers[band].triggerSamplesRemaining = (int)(sampleRate * 0.001);
                    }
                    bandAnalysers[band].lastGateState = gateState;
                }

                int start1, size1, start2, size2;
                abstractFifo.prepareToWrite(1, start1, size1, start2, size2);
                if (size1 > 0)
                {
                    for (int bin = 0; bin < fftSize / 2 + 1; ++bin)
                    {
                        float magnitude = fftData[bin] / (float)fftSize;
                        fifoBuffer[start1][bin] = juce::Decibels::gainToDecibels(magnitude, -100.0f);
                    }
                    abstractFifo.finishedWrite(1);
                }

                std::move(fftInputBuffer.begin() + hopSize, fftInputBuffer.end(), fftInputBuffer.begin());
                samplesAccumulated -= hopSize;
            }
        }
    }
    
    // --- Copy Captured Input to AUDIO Output Bus for Passthrough ---
    if (audioOutBus.getNumChannels() > 0)
    {
        audioOutBus.copyFrom(0, 0, inputCopy, 0, 0, numSamples);
        if (audioOutBus.getNumChannels() > 1)
            audioOutBus.copyFrom(1, 0, inputCopy, 1, 0, numSamples);
    }
    else
    {
        audioOutBus.clear();
    }
    
    // --- WRITE CV/GATE OUTPUTS ---
    cvOutBus.clear();
    for (int i = 0; i < numSamples; ++i)
    {
        for (int band = 0; band < 4; ++band)
        {
            if (cvOutBus.getNumChannels() > (1 + band * 2))
            {
                float* gateOut = cvOutBus.getWritePointer(band * 2);
                float* trigOut = cvOutBus.getWritePointer(band * 2 + 1);
                gateOut[i] = bandAnalysers[band].lastGateState ? 1.0f : 0.0f;
                trigOut[i] = (bandAnalysers[band].triggerSamplesRemaining > 0) ? 1.0f : 0.0f;
            }
        }
        
        for (auto& analyser : bandAnalysers)
        {
            if (analyser.triggerSamplesRemaining > 0)
            {
                analyser.triggerSamplesRemaining--;
            }
        }
    }
}

#if defined(PRESET_CREATOR_UI)

void FrequencyGraphModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    if (!isFrozen && abstractFifo.getNumReady() > 0)
    {
        int start1, size1, start2, size2;
        abstractFifo.prepareToRead(1, start1, size1, start2, size2);
        if (size1 > 0) { latestFftData = fifoBuffer[start1]; }
        abstractFifo.finishedRead(1);
    }
    
    float decayFactor = decayParam->load();
    for (size_t i = 0; i < latestFftData.size(); ++i)
    {
        if (latestFftData[i] > peakHoldData[i])
        {
            peakHoldData[i] = latestFftData[i];
        }
        else
        {
            peakHoldData[i] = peakHoldData[i] * decayFactor + (1.0f - decayFactor) * -100.0f;
        }
        peakHoldData[i] = juce::jmax(-100.0f, peakHoldData[i]);
    }

    const float graphWidth = 400.0f;
    const float graphHeight = 200.0f;
    ImGui::Dummy(ImVec2(graphWidth, graphHeight));
    ImVec2 p0 = ImGui::GetItemRectMin();
    ImVec2 p1 = ImGui::GetItemRectMax();
    auto* drawList = ImGui::GetWindowDrawList();
    
    // --- Define the dB range with more headroom ---
    const float minDb = -96.0f;
    const float maxDb = 24.0f;

    // --- FIX 1: Add a clipping rectangle WITHOUT intersecting with parent ---
    // The 'false' parameter means don't intersect with current clip rect
    drawList->PushClipRect(p0, p1, false);

    // Draw background and grid lines
    drawList->AddRectFilled(p0, p1, IM_COL32(20, 22, 24, 255));
    
    // --- Adjust grid lines for the new range ---
    for (int db = 12; db >= (int)minDb; db -= 12)
    {
        float y = juce::jmap((float)db, minDb, maxDb, p1.y, p0.y);
        drawList->AddLine(ImVec2(p0.x, y), ImVec2(p1.x, y), IM_COL32(50, 55, 60, 255));
        if (db <= 12) // Only draw labels within the old visible range to avoid clutter
        {
            drawList->AddText(ImGui::GetFont(), ImGui::GetFontSize() * 0.8f, ImVec2(p0.x + 4, y - 14), IM_COL32(150, 150, 150, 255), juce::String(db).toRawUTF8());
        }
    }
    const float freqs[] = { 30, 100, 300, 1000, 3000, 10000, 20000 };
    for (float freq : freqs)
    {
        float x = juce::jmap(std::log10(freq), std::log10(20.0f), std::log10(22000.0f), p0.x, p1.x);
        drawList->AddLine(ImVec2(x, p0.y), ImVec2(x, p1.y), IM_COL32(50, 55, 60, 255));
    }
    
    // --- FIX 2: Draw two separate lines instead of a filled polygon ---
    // Helper lambda to draw a line graph from a data vector
    auto drawLineGraph = [&](const std::vector<float>& data, ImU32 color, float thickness) {
        if (data.size() < 2) return;
        for (size_t i = 1; i < data.size(); ++i)
        {
            float freq_prev = (float)(i - 1) * (float)getSampleRate() / (float)fftSize;
            float freq_curr = (float)i * (float)getSampleRate() / (float)fftSize;

            if (freq_curr < 20.0f) continue;
            if (freq_prev > 22000.0f) break;

            float x_prev = p0.x + (std::log10(freq_prev) - std::log10(20.0f)) / (std::log10(22000.0f) - std::log10(20.0f)) * graphWidth;
            // Use new dB range for data plotting
            float y_prev = p1.y + (data[i - 1] - minDb) / (maxDb - minDb) * (p0.y - p1.y);

            float x_curr = p0.x + (std::log10(freq_curr) - std::log10(20.0f)) / (std::log10(22000.0f) - std::log10(20.0f)) * graphWidth;
            float y_curr = p1.y + (data[i] - minDb) / (maxDb - minDb) * (p0.y - p1.y);
            
            drawList->AddLine(ImVec2(x_prev, y_prev), ImVec2(x_curr, y_curr), color, thickness);
        }
    };

    // Draw the peak-hold line (dimmer, in the background)
    drawLineGraph(peakHoldData, IM_COL32(255, 150, 80, 150), 1.5f);

    // Draw the live FFT data line (brighter, on top)
    drawLineGraph(latestFftData, IM_COL32(120, 170, 255, 220), 2.0f);
    
    // Border and clip cleanup
    drawList->AddRect(p0, p1, IM_COL32(80, 80, 80, 255));
    drawList->PopClipRect(); // Pop the clipping rectangle

    ImGui::PushItemWidth(itemWidth);
    
    ImGui::Checkbox("Freeze", &isFrozen);
    
    auto& ap = getAPVTS();
    float decay = decayParam->load();
    if (ImGui::SliderFloat("Decay", &decay, 0.90f, 0.999f, "%.3f", ImGuiSliderFlags_Logarithmic)) {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(FrequencyGraphModuleProcessor::paramIdDecay)))
        {
            *p = decay;
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();

    auto drawThresholdSlider = [&](const char* label, std::atomic<float>* param, const char* paramId) {
        float val = param->load();
        if (ImGui::SliderFloat(label, &val, -96.0f, 0.0f, "%.1f dB")) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)))
            {
                *p = val;
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        // Use new dB range for threshold line plotting
        float y = juce::jmap(val, minDb, maxDb, p1.y, p0.y);
        drawList->AddLine(ImVec2(p0.x, y), ImVec2(p1.x, y), IM_COL32(255, 100, 100, 150), 1.5f);
    };

    drawThresholdSlider("Sub Thr", subThresholdParam, FrequencyGraphModuleProcessor::paramIdSubThreshold);
    drawThresholdSlider("Bass Thr", bassThresholdParam, FrequencyGraphModuleProcessor::paramIdBassThreshold);
    drawThresholdSlider("Mid Thr", midThresholdParam, FrequencyGraphModuleProcessor::paramIdMidThreshold);
    drawThresholdSlider("High Thr", highThresholdParam, FrequencyGraphModuleProcessor::paramIdHighThreshold);

    ImGui::PopItemWidth();

    if (ImGui::IsItemHovered(ImGuiHoveredFlags_RectOnly))
    {
        ImVec2 mousePos = ImGui::GetMousePos();
        if (ImGui::IsMousePosValid(&mousePos) && mousePos.x >= p0.x && mousePos.x <= p1.x && mousePos.y >= p0.y && mousePos.y <= p1.y)
        {
            float mouseFreq = std::pow(10.0f, juce::jmap(mousePos.x, p0.x, p1.x, std::log10(20.0f), std::log10(22000.0f)));
            // Use new dB range for tooltip calculation
            float mouseDb = juce::jmap(mousePos.y, p1.y, p0.y, minDb, maxDb);
            ImGui::BeginTooltip();
            ImGui::Text("%.1f Hz", mouseFreq);
            ImGui::Text("%.1f dB", mouseDb);
            ImGui::EndTooltip();
        }
    }
}

void FrequencyGraphModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawParallelPins("In", 0, "Out L", 0);
    helpers.drawParallelPins(nullptr, -1, "Out R", 1);
    ImGui::Spacing();
    helpers.drawParallelPins(nullptr, -1, "Sub Gate", 2);
    helpers.drawParallelPins(nullptr, -1, "Sub Trig", 3);
    helpers.drawParallelPins(nullptr, -1, "Bass Gate", 4);
    helpers.drawParallelPins(nullptr, -1, "Bass Trig", 5);
    helpers.drawParallelPins(nullptr, -1, "Mid Gate", 6);
    helpers.drawParallelPins(nullptr, -1, "Mid Trig", 7);
    helpers.drawParallelPins(nullptr, -1, "High Gate", 8);
    helpers.drawParallelPins(nullptr, -1, "High Trig", 9);
}

#endif

juce::String FrequencyGraphModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In";
    return {};
}

juce::String FrequencyGraphModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    
    int cvChannel = channel - 2;
    if (cvChannel >= 0)
    {
        switch (cvChannel)
        {
            case SubGate: return "Sub Gate";
            case SubTrig: return "Sub Trig";
            case BassGate: return "Bass Gate";
            case BassTrig: return "Bass Trig";
            case MidGate: return "Mid Gate";
            case MidTrig: return "Mid Trig";
            case HighGate: return "High Gate";
            case HighTrig: return "High Trig";
            default: return {};
        }
    }
    return {};
}

bool FrequencyGraphModuleProcessor::getParamRouting(const juce::String&, int&, int&) const
{
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\FrequencyGraphModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <vector>

class FrequencyGraphModuleProcessor : public ModuleProcessor
{
public:
    static constexpr auto paramIdDecay = "decay";
    static constexpr auto paramIdSubThreshold = "subThreshold";
    static constexpr auto paramIdBassThreshold = "bassThreshold";
    static constexpr auto paramIdMidThreshold = "midThreshold";
    static constexpr auto paramIdHighThreshold = "highThreshold";
    
    // CV Output channels are on Bus 1
    enum CVOutputChannel
    {
        SubGate = 0, SubTrig,
        BassGate, BassTrig,
        MidGate, MidTrig,
        HighGate, HighTrig,
        TotalCVOutputs // This will be 8
    };

    FrequencyGraphModuleProcessor();
    ~FrequencyGraphModuleProcessor() override = default;

    const juce::String getName() const override { return "frequency graph"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    static constexpr int fftOrder = 11;
    static constexpr int fftSize = 1 << fftOrder;
    static constexpr int hopSize = fftSize / 4;

    juce::dsp::FFT fft;
    juce::dsp::WindowingFunction<float> window;
    
    std::vector<float> fftInputBuffer;
    std::vector<float> fftData;
    int samplesAccumulated = 0;

    juce::AbstractFifo abstractFifo;
    std::vector<std::vector<float>> fifoBuffer;

    std::vector<float> latestFftData;
    std::vector<float> peakHoldData;
    bool isFrozen = false;

    struct BandAnalyser
    {
        float thresholdDb = -24.0f;
        bool lastGateState = false;
        int triggerSamplesRemaining = 0;
    };
    std::array<BandAnalyser, 4> bandAnalysers;

    std::atomic<float>* decayParam { nullptr };
    std::atomic<float>* subThresholdParam { nullptr };
    std::atomic<float>* bassThresholdParam { nullptr };
    std::atomic<float>* midThresholdParam { nullptr };
    std::atomic<float>* highThresholdParam { nullptr };
};


================================================================================
FILE: juce\Source\audio\modules\FunctionGeneratorModuleProcessor.cpp
================================================================================


#include "FunctionGeneratorModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#endif

// <<< FIX: Removed all "_mod" parameters. They should NOT be part of the APVTS.
juce::AudioProcessorValueTreeState::ParameterLayout FunctionGeneratorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdRate, "Rate",
        juce::NormalisableRange<float>(0.1f, 100.0f, 0.01f, 0.25f), 1.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdMode, "Mode",
        juce::StringArray{"Free (Hz)", "Sync"}, 0));

    params.push_back(std::make_unique<juce::AudioParameterBool>(
        paramIdLoop, "Loop", true)); // <<< FIX: Changed default to true for more immediate sound

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdSlew, "Slew",
        juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.0f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdGateThresh, "Gate Thresh",
        juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.5f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdTrigThresh, "Trig Thresh",
        juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.5f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdPitchBase, "Pitch Base (st)",
        juce::NormalisableRange<float>(-24.0f, 24.0f, 0.01f), 0.0f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdValueMult, "Value Mult",
        juce::NormalisableRange<float>(0.0f, 10.0f, 0.01f, 0.5f), 1.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdCurveSelect, "Curve Select",
        juce::StringArray{"Blue", "Red", "Green"}, 0));

    return { params.begin(), params.end() };
}

FunctionGeneratorModuleProcessor::FunctionGeneratorModuleProcessor()
    : ModuleProcessor(BusesProperties()
                          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(10), true)
                          .withOutput("Outputs", juce::AudioChannelSet::discreteChannels(13), true)),
      apvts(*this, nullptr, "FunctionGeneratorParams", createParameterLayout())
{
    // Initialize all three curves to default shapes
    for (int curveIndex = 0; curveIndex < 3; ++curveIndex)
    {
        curves[curveIndex].resize(CURVE_RESOLUTION);
        for (int i = 0; i < CURVE_RESOLUTION; ++i)
        {
            float x = (float)i / (float)(CURVE_RESOLUTION - 1);
            switch (curveIndex)
            {
                case 0: curves[curveIndex][i] = x; break; // Blue curve - ramp up
                case 1: curves[curveIndex][i] = 1.0f - x; break; // Red curve - ramp down
                case 2: curves[curveIndex][i] = 0.5f + 0.5f * std::sin(x * juce::MathConstants<float>::twoPi); break; // Green curve - sine wave
            }
        }
    }

    // Cache parameter pointers
    rateParam = apvts.getRawParameterValue(paramIdRate);
    modeParam = apvts.getRawParameterValue(paramIdMode);
    loopParam = apvts.getRawParameterValue(paramIdLoop);
    slewParam = apvts.getRawParameterValue(paramIdSlew);
    gateThreshParam = apvts.getRawParameterValue(paramIdGateThresh);
    trigThreshParam = apvts.getRawParameterValue(paramIdTrigThresh);
    pitchBaseParam = apvts.getRawParameterValue(paramIdPitchBase);
    valueMultParam = apvts.getRawParameterValue(paramIdValueMult);
    curveSelectParam = apvts.getRawParameterValue(paramIdCurveSelect);

    for (int i = 0; i < 13; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void FunctionGeneratorModuleProcessor::prepareToPlay(double sr, int)
{
    sampleRate = sr;
    phase = 0.0;
    lastPhase = 0.0;
    
    smoothedSlew.reset(sampleRate, 0.01);
    smoothedRate.reset(sampleRate, 0.01);
    smoothedGateThresh.reset(sampleRate, 0.001);
    smoothedTrigThresh.reset(sampleRate, 0.001);
    smoothedPitchBase.reset(sampleRate, 0.01);
    smoothedValueMult.reset(sampleRate, 0.01);
}

void FunctionGeneratorModuleProcessor::setTimingInfo(const TransportState& state)
{
    m_currentTransport = state;
}

void FunctionGeneratorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const bool isRateMod = isParamInputConnected(paramIdRateMod);
    const bool isSlewMod = isParamInputConnected(paramIdSlewMod);
    const bool isGateThreshMod = isParamInputConnected(paramIdGateThreshMod);
    const bool isGateConnected = isParamInputConnected(paramIdGateIn);
    const bool isTrigThreshMod = isParamInputConnected(paramIdTrigThreshMod);
    const bool isPitchBaseMod = isParamInputConnected(paramIdPitchBaseMod);
    const bool isValueMultMod = isParamInputConnected(paramIdValueMultMod);
    const bool isCurveSelectMod = isParamInputConnected(paramIdCurveSelectMod);

    const float* gateIn = inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* triggerIn = inBus.getNumChannels() > 1 ? inBus.getReadPointer(1) : nullptr;
    const float* syncIn = inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* rateCV = isRateMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* slewCV = isSlewMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;
    const float* gateThreshCV = isGateThreshMod && inBus.getNumChannels() > 5 ? inBus.getReadPointer(5) : nullptr;
    const float* trigThreshCV = isTrigThreshMod && inBus.getNumChannels() > 6 ? inBus.getReadPointer(6) : nullptr;
    const float* pitchBaseCV = isPitchBaseMod && inBus.getNumChannels() > 7 ? inBus.getReadPointer(7) : nullptr;
    const float* valueMultCV = isValueMultMod && inBus.getNumChannels() > 8 ? inBus.getReadPointer(8) : nullptr;
    const float* curveSelectCV = isCurveSelectMod && inBus.getNumChannels() > 9 ? inBus.getReadPointer(9) : nullptr;

    const float baseRate = rateParam->load();
    const int baseMode = static_cast<int>(modeParam->load());
    const bool baseLoop = loopParam->load() > 0.5f;
    const float baseSlew = slewParam->load();
    const float baseGateThresh = gateThreshParam->load();
    const float baseTrigThresh = trigThreshParam->load();
    const float basePitchBase = pitchBaseParam->load();
    const float baseValueMult = valueMultParam->load();
    const int baseCurveSelect = static_cast<int>(curveSelectParam->load());

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float effectiveRate = baseRate;
        if (isRateMod && rateCV) {
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            effectiveRate = juce::jmap(cv, 0.1f, 100.0f);
        }

        float effectiveSlew = baseSlew;
        if (isSlewMod && slewCV) effectiveSlew = juce::jlimit(0.0f, 1.0f, slewCV[i]);

        float effectiveGateThresh = baseGateThresh;
        if (isGateThreshMod && gateThreshCV) effectiveGateThresh = juce::jlimit(0.0f, 1.0f, gateThreshCV[i]);

        float effectiveTrigThresh = baseTrigThresh;
        if (isTrigThreshMod && trigThreshCV) effectiveTrigThresh = juce::jlimit(0.0f, 1.0f, trigThreshCV[i]);

        float effectivePitchBase = basePitchBase;
        if (isPitchBaseMod && pitchBaseCV) effectivePitchBase = juce::jlimit(-24.0f, 24.0f, pitchBaseCV[i] * 48.0f - 24.0f);

        float effectiveValueMult = baseValueMult;
        if (isValueMultMod && valueMultCV) effectiveValueMult = juce::jlimit(0.0f, 10.0f, valueMultCV[i] * 10.0f);

        int effectiveCurveSelect = baseCurveSelect;
        if (isCurveSelectMod && curveSelectCV) {
            const float cv = juce::jlimit(0.0f, 1.0f, curveSelectCV[i]);
            effectiveCurveSelect = static_cast<int>(cv * 2.99f);
        }

        smoothedRate.setTargetValue(effectiveRate);
        smoothedSlew.setTargetValue(effectiveSlew);
        smoothedGateThresh.setTargetValue(effectiveGateThresh);
        smoothedTrigThresh.setTargetValue(effectiveTrigThresh);
        smoothedPitchBase.setTargetValue(effectivePitchBase);
        smoothedValueMult.setTargetValue(effectiveValueMult);

        // Get the NEXT smoothed value for all parameters that need it. THIS IS THE FIX.
        const float smoothedRateValue = smoothedRate.getNextValue();
        const float smoothedSlewValue = smoothedSlew.getNextValue();
        const float smoothedGateThreshValue = smoothedGateThresh.getNextValue();
        const float smoothedTrigThreshValue = smoothedTrigThresh.getNextValue();
        const float smoothedPitchBaseValue = smoothedPitchBase.getNextValue();
        const float smoothedValueMultValue = smoothedValueMult.getNextValue();

        bool currentGateState = true; // Default to 'true' (always running)
        if (isGateConnected && gateIn)
        {
            // If a cable is connected, let it take control
            currentGateState = (gateIn[i] > smoothedTrigThreshValue);
        }
        bool triggerRising = triggerIn && (triggerIn[i] > smoothedTrigThreshValue) && !lastTriggerState;
        bool syncRising = syncIn && (syncIn[i] > 0.5f) && !lastSyncState;
        
        bool endOfCycle = false;

        if (baseMode == 1 && m_currentTransport.isPlaying) // Sync mode
        {
            const int divisionIndex = 3; // Fixed to 1/4 note for now (you can add a parameter later)
            static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
            const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];
            
            double currentBeat = m_currentTransport.songPositionBeats + (i / sampleRate / 60.0 * m_currentTransport.bpm);
            phase = std::fmod(currentBeat * beatDivision, 1.0);
            
            if (phase < lastPhase) // Loop point
            {
                endOfCycle = true;
            }
            lastPhase = phase;
        }
        else // Free (Hz) mode or not playing
        {
            if (currentGateState) {
                phase += smoothedRateValue / sampleRate;
            }
            if (syncRising) {
                phase = 0.0;
            }
            if (phase >= 1.0) {
                if (baseLoop) {
                    phase = std::fmod(phase, 1.0);
                    endOfCycle = true;
                } else {
                    phase = 1.0;
                }
            }
        }
        
        // Look up all three curves, plus the selected one for slewing
        float blueValue = interpolateCurve(0, static_cast<float>(phase));
        float redValue = interpolateCurve(1, static_cast<float>(phase));
        float greenValue = interpolateCurve(2, static_cast<float>(phase));

        targetValue = interpolateCurve(effectiveCurveSelect, static_cast<float>(phase));

        // Apply slew using a simplified, standard one-pole filter logic
        float slewCoeff = 1.0f - std::exp(-1.0f / (0.001f + smoothedSlewValue * smoothedSlewValue * (float)sampleRate));
        currentValue += (targetValue - currentValue) * slewCoeff;
        
        float outputs[13];
        generateOutputs(currentValue, blueValue, redValue, greenValue, endOfCycle, outputs, smoothedGateThreshValue, smoothedPitchBaseValue, smoothedValueMultValue);

        for (int ch = 0; ch < 13 && ch < outBus.getNumChannels(); ++ch) {
            outBus.getWritePointer(ch)[i] = outputs[ch];
        }

        lastTriggerState = triggerIn && (triggerIn[i] > smoothedTrigThreshValue);
        lastGateState = currentGateState;
        lastSyncState = syncIn && (syncIn[i] > 0.5f);

        if ((i & 63) == 0) {
            setLiveParamValue("rate_live", smoothedRate.getCurrentValue());
            setLiveParamValue("slew_live", smoothedSlew.getCurrentValue());
            setLiveParamValue("gateThresh_live", smoothedGateThresh.getCurrentValue());
            setLiveParamValue("trigThresh_live", smoothedTrigThresh.getCurrentValue());
            setLiveParamValue("pitchBase_live", smoothedPitchBase.getCurrentValue());
            setLiveParamValue("valueMult_live", smoothedValueMult.getCurrentValue());
            setLiveParamValue("curveSelect_live", static_cast<float>(effectiveCurveSelect));
        }
    }

    if (lastOutputValues.size() >= 13) {
        for (int ch = 0; ch < 13 && ch < outBus.getNumChannels(); ++ch) {
            if (lastOutputValues[ch]) {
                lastOutputValues[ch]->store(outBus.getSample(ch, buffer.getNumSamples() - 1));
            }
        }
    }
}

float FunctionGeneratorModuleProcessor::interpolateCurve(int curveIndex, float p)
{
    if (curveIndex < 0 || curveIndex >= 3) return 0.0f;
    const auto& curve = curves[curveIndex];
    float scaledPhase = p * (CURVE_RESOLUTION - 1);
    int index = static_cast<int>(scaledPhase);
    float fraction = scaledPhase - index;
    if (index >= CURVE_RESOLUTION - 1) return curve[CURVE_RESOLUTION - 1];
    float y1 = curve[index];
    float y2 = curve[index + 1];
    return y1 + fraction * (y2 - y1);
}

void FunctionGeneratorModuleProcessor::generateOutputs(float selectedValue, float blueValue, float redValue, float greenValue, bool eoc, float* outs, float gateThresh, float pitchBase, float valueMult)
{
    // --- Existing Outputs (based on selected curve) ---
    outs[0] = selectedValue; // Value
    outs[1] = 1.0f - selectedValue; // Inverted
    outs[2] = selectedValue * 2.0f - 1.0f; // Bipolar
    
    float pitchBaseOffset = pitchBase / 12.0f;
    outs[3] = pitchBaseOffset + selectedValue * valueMult; // Pitch
    
    bool gateHigh = selectedValue > gateThresh;
    outs[4] = gateHigh ? 1.0f : 0.0f; // Gate
    
    if (gateHigh && !lastGateOut) outs[5] = 1.0f; // Trigger
    else outs[5] = 0.0f;
    lastGateOut = gateHigh;
    
    if (eoc) { // End of Cycle
        eocPulseRemaining = static_cast<int>(sampleRate * 0.001); // 1ms pulse
    }
    outs[6] = (eocPulseRemaining > 0) ? 1.0f : 0.0f;
    if (eocPulseRemaining > 0) --eocPulseRemaining;

    // --- New Dedicated Curve Outputs ---
    outs[7] = blueValue;
    outs[8] = pitchBaseOffset + blueValue * valueMult;

    outs[9] = redValue;
    outs[10] = pitchBaseOffset + redValue * valueMult;

    outs[11] = greenValue;
    outs[12] = pitchBaseOffset + greenValue * valueMult;
}

#if defined(PRESET_CREATOR_UI)
void FunctionGeneratorModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue(paramIdMode)->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdMode)))
            *p = sync ? 1 : 0;
        onModificationEnded();
    }
    
    if (sync)
    {
        // NOTE: We haven't added a "rate_division" parameter to this module yet.
        // For now, it will be fixed at 1/4 note. This UI is a placeholder.
        ImGui::BeginDisabled();
        ImGui::TextUnformatted("Division: 1/4 Note (fixed)");
        ImGui::EndDisabled();
    }
    else
    {
        // Rate slider (only show in free-running mode)
        const bool rateIsMod = isParamModulated(paramIdRateMod);
        float rate = rateIsMod ? getLiveParamValueFor(paramIdRateMod, "rate_live", rateParam->load()) : rateParam->load();
        if (rateIsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Rate", &rate, 0.1f, 100.0f, "%.2f Hz", ImGuiSliderFlags_Logarithmic)) {
            if (!rateIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRate)) = rate;
        }
        if (!rateIsMod) adjustParamOnWheel(ap.getParameter(paramIdRate), "rate", rate);
        if (ImGui::IsItemDeactivatedAfterEdit() && !rateIsMod) onModificationEnded();
        if (rateIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }
    
    // Loop (No modulation for this parameter)
    bool loop = loopParam->load() > 0.5f;
    if (ImGui::Checkbox("Loop", &loop)) {
        *dynamic_cast<juce::AudioParameterBool*>(ap.getParameter(paramIdLoop)) = loop;
        onModificationEnded();
    }
    
    // Slew
    const bool slewIsMod = isParamModulated(paramIdSlewMod);
    float slew = slewIsMod ? getLiveParamValueFor(paramIdSlewMod, "slew_live", slewParam->load()) : slewParam->load();
    if (slewIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Slew", &slew, 0.0f, 1.0f, "%.3f")) {
        if (!slewIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdSlew)) = slew;
    }
    if (!slewIsMod) adjustParamOnWheel(ap.getParameter(paramIdSlew), "slew", slew);
    if (ImGui::IsItemDeactivatedAfterEdit() && !slewIsMod) onModificationEnded();
    if (slewIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Gate Thresh
    const bool gateThreshIsMod = isParamModulated(paramIdGateThreshMod);
    float gateThresh = gateThreshIsMod ? getLiveParamValueFor(paramIdGateThreshMod, "gateThresh_live", gateThreshParam->load()) : gateThreshParam->load();
    if (gateThreshIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Gate Thr", &gateThresh, 0.0f, 1.0f, "%.2f")) {
        if (!gateThreshIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdGateThresh)) = gateThresh;
    }
    if (!gateThreshIsMod) adjustParamOnWheel(ap.getParameter(paramIdGateThresh), "gateThresh", gateThresh);
    if (ImGui::IsItemDeactivatedAfterEdit() && !gateThreshIsMod) onModificationEnded();
    if (gateThreshIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Trig Thresh
    const bool trigThreshIsMod = isParamModulated(paramIdTrigThreshMod);
    float trigThresh = trigThreshIsMod ? getLiveParamValueFor(paramIdTrigThreshMod, "trigThresh_live", trigThreshParam->load()) : trigThreshParam->load();
    if (trigThreshIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Trig Thr", &trigThresh, 0.0f, 1.0f, "%.2f")) {
        if (!trigThreshIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdTrigThresh)) = trigThresh;
    }
    if (!trigThreshIsMod) adjustParamOnWheel(ap.getParameter(paramIdTrigThresh), "trigThresh", trigThresh);
    if (ImGui::IsItemDeactivatedAfterEdit() && !trigThreshIsMod) onModificationEnded();
    if (trigThreshIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Pitch Base
    const bool pitchBaseIsMod = isParamModulated(paramIdPitchBaseMod);
    float pitchBase = pitchBaseIsMod ? getLiveParamValueFor(paramIdPitchBaseMod, "pitchBase_live", pitchBaseParam->load()) : pitchBaseParam->load();
    if (pitchBaseIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Pitch Base", &pitchBase, -24.0f, 24.0f, "%.1f st")) {
        if (!pitchBaseIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdPitchBase)) = pitchBase;
    }
    if (!pitchBaseIsMod) adjustParamOnWheel(ap.getParameter(paramIdPitchBase), "pitchBase", pitchBase);
    if (ImGui::IsItemDeactivatedAfterEdit() && !pitchBaseIsMod) onModificationEnded();
    if (pitchBaseIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Value Mult
    const bool valueMultIsMod = isParamModulated(paramIdValueMultMod);
    float valueMult = valueMultIsMod ? getLiveParamValueFor(paramIdValueMultMod, "valueMult_live", valueMultParam->load()) : valueMultParam->load();
    if (valueMultIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Value Mult", &valueMult, 0.0f, 10.0f, "%.2f")) {
        if (!valueMultIsMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdValueMult)) = valueMult;
    }
    if (!valueMultIsMod) adjustParamOnWheel(ap.getParameter(paramIdValueMult), "valueMult", valueMult);
    if (ImGui::IsItemDeactivatedAfterEdit() && !valueMultIsMod) onModificationEnded();
    if (valueMultIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // --- CURVE CANVAS LOGIC (Moved to the end to fix UI interaction) ---

    // Curve Selection
    int activeEditorCurve = static_cast<int>(curveSelectParam->load());
    if (isParamInputConnected(paramIdCurveSelectMod)) {
        activeEditorCurve = static_cast<int>(getLiveParamValueFor(paramIdCurveSelectMod, "curveSelect_live", (float)activeEditorCurve));
    }
    if (ImGui::Button("Blue")) { if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdCurveSelect))) *p = 0; onModificationEnded(); }
    ImGui::SameLine();
    if (ImGui::Button("Red")) { if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdCurveSelect))) *p = 1; onModificationEnded(); }
    ImGui::SameLine();
    if (ImGui::Button("Green")) { if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdCurveSelect))) *p = 2; onModificationEnded(); }
    
    // Canvas Setup
    ImGui::Dummy(ImVec2(0.0f, 5.0f));
    ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();
    ImVec2 canvas_sz = ImVec2(itemWidth, 150.0f);
    ImVec2 canvas_p1 = ImVec2(canvas_p0.x + canvas_sz.x, canvas_p0.y + canvas_sz.y);
    ImDrawList* draw_list = ImGui::GetWindowDrawList();
    draw_list->AddRectFilled(canvas_p0, canvas_p1, IM_COL32(30, 30, 30, 255));
    draw_list->AddRect(canvas_p0, canvas_p1, IM_COL32(150, 150, 150, 255));
    
    // Mouse interaction for drawing on the canvas
    ImGui::InvisibleButton("canvas", canvas_sz, ImGuiButtonFlags_MouseButtonLeft);
    const bool is_hovered = ImGui::IsItemHovered();
    const bool is_active = ImGui::IsItemActive();
    if (is_hovered && ImGui::IsMouseClicked(ImGuiMouseButton_Left)) {
        isDragging = true;
        lastMousePosInCanvas = ImVec2(ImGui::GetIO().MousePos.x - canvas_p0.x, ImGui::GetIO().MousePos.y - canvas_p0.y);
    }
    if (ImGui::IsMouseReleased(ImGuiMouseButton_Left)) {
        if (isDragging) onModificationEnded();
        isDragging = false;
        lastMousePosInCanvas = ImVec2(-1, -1);
    }
    if (isDragging && is_active) {
        ImVec2 current_pos = ImVec2(ImGui::GetIO().MousePos.x - canvas_p0.x, ImGui::GetIO().MousePos.y - canvas_p0.y);
        int idx0 = static_cast<int>((lastMousePosInCanvas.x / canvas_sz.x) * CURVE_RESOLUTION);
        int idx1 = static_cast<int>((current_pos.x / canvas_sz.x) * CURVE_RESOLUTION);
        idx0 = juce::jlimit(0, CURVE_RESOLUTION - 1, idx0);
        idx1 = juce::jlimit(0, CURVE_RESOLUTION - 1, idx1);
        if (idx0 > idx1) std::swap(idx0, idx1);
        for (int i = idx0; i <= idx1; ++i) {
            float t = (idx1 == idx0) ? 1.0f : (float)(i - idx0) / (float)(idx1 - idx0);
            float y_pos = juce::jmap(t, lastMousePosInCanvas.y, current_pos.y);
            curves[activeEditorCurve][i] = 1.0f - juce::jlimit(0.0f, 1.0f, y_pos / canvas_sz.y);
        }
        lastMousePosInCanvas = current_pos;
    }
    
    // Draw curves
    const ImU32 colors[] = { IM_COL32(100, 150, 255, 255), IM_COL32(255, 100, 100, 255), IM_COL32(100, 255, 150, 255) };
    for (int c = 0; c < 3; ++c) {
        ImU32 color = colors[c];
        if (c != activeEditorCurve) color = (color & 0x00FFFFFF) | (100 << 24);
        for (int i = 0; i < CURVE_RESOLUTION - 1; ++i) {
            ImVec2 p1 = ImVec2(canvas_p0.x + ((float)i / (CURVE_RESOLUTION - 1)) * canvas_sz.x, canvas_p0.y + (1.0f - curves[c][i]) * canvas_sz.y);
            ImVec2 p2 = ImVec2(canvas_p0.x + ((float)(i + 1) / (CURVE_RESOLUTION - 1)) * canvas_sz.x, canvas_p0.y + (1.0f - curves[c][i+1]) * canvas_sz.y);
            draw_list->AddLine(p1, p2, color, 2.0f);
        }
    }
    
    // Draw Gate Threshold line (Yellow)
    const float gate_line_y = canvas_p0.y + (1.0f - gateThresh) * canvas_sz.y;
    draw_list->AddLine(ImVec2(canvas_p0.x, gate_line_y), ImVec2(canvas_p1.x, gate_line_y), IM_COL32(255, 255, 0, 200), 2.0f);

    // Draw Trigger Threshold line (Red)
    const float trig_line_y = canvas_p0.y + (1.0f - trigThresh) * canvas_sz.y;
    draw_list->AddLine(ImVec2(canvas_p0.x, trig_line_y), ImVec2(canvas_p1.x, trig_line_y), IM_COL32(255, 0, 0, 200), 2.0f);
    
    // Draw playhead
    float playhead_x = canvas_p0.x + phase * canvas_sz.x;
    draw_list->AddLine(ImVec2(playhead_x, canvas_p0.y), ImVec2(playhead_x, canvas_p1.y), IM_COL32(255, 255, 0, 200));

    ImGui::Dummy(canvas_sz);
    
    ImGui::PopItemWidth(); // <<< FIX: Added to match the PushItemWidth at the top.
}



juce::String FunctionGeneratorModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Gate In";
        case 1: return "Trigger In";
        case 2: return "Sync In";
        case 3: return "Rate Mod";
        case 4: return "Slew Mod";
        case 5: return "Gate Thresh Mod";
        case 6: return "Trig Thresh Mod";
        case 7: return "Pitch Base Mod";
        case 8: return "Value Mult Mod";
        case 9: return "Curve Select Mod";
        default: return {};
    }
}

juce::String FunctionGeneratorModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Value";
        case 1: return "Inverted";
        case 2: return "Bipolar";
        case 3: return "Pitch";
        case 4: return "Gate";
        case 5: return "Trigger";
        case 6: return "End of Cycle";
        case 7: return "Blue Value";
        case 8: return "Blue Pitch";
        case 9: return "Red Value";
        case 10: return "Red Pitch";
        case 11: return "Green Value";
        case 12: return "Green Pitch";
        default: return {};
    }
}

#endif

bool FunctionGeneratorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdGateIn) { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdRateMod) { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdSlewMod) { outChannelIndexInBus = 4; return true; }
    if (paramId == paramIdGateThreshMod) { outChannelIndexInBus = 5; return true; }
    if (paramId == paramIdTrigThreshMod) { outChannelIndexInBus = 6; return true; }
    if (paramId == paramIdPitchBaseMod) { outChannelIndexInBus = 7; return true; }
    if (paramId == paramIdValueMultMod) { outChannelIndexInBus = 8; return true; }
    if (paramId == paramIdCurveSelectMod) { outChannelIndexInBus = 9; return true; }
    
    return false;
}

// --- State management functions for saving/loading ---
juce::ValueTree FunctionGeneratorModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("FunctionGeneratorState");
    // Save the mode parameter
    vt.setProperty("mode", apvts.getRawParameterValue("mode")->load(), nullptr);
    // Save the curve points
    for (int c = 0; c < curves.size(); ++c)
    {
        juce::ValueTree points("CurvePoints_" + juce::String(c));
        for (int i = 0; i < curves[c].size(); ++i)
        {
            points.setProperty("p" + juce::String(i), curves[c][i], nullptr);
        }
        vt.addChild(points, -1, nullptr);
    }
    return vt;
}

void FunctionGeneratorModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("FunctionGeneratorState"))
    {
        // Restore the mode parameter
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("mode")))
            *p = (bool)vt.getProperty("mode", false);
        // Restore the curve points
        for (int c = 0; c < curves.size(); ++c)
        {
            auto points = vt.getChildWithName("CurvePoints_" + juce::String(c));
            if (points.isValid())
            {
                curves[c].resize(CURVE_RESOLUTION);
                for (int i = 0; i < CURVE_RESOLUTION; ++i)
                {
                    curves[c][i] = (float)points.getProperty("p" + juce::String(i), 0.0);
                }
            }
        }
    }
}

================================================================================
FILE: juce\Source\audio\modules\FunctionGeneratorModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>
#include <vector>

class FunctionGeneratorModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdMode = "mode";
    static constexpr auto paramIdLoop = "loop";
    static constexpr auto paramIdSlew = "slew";
    static constexpr auto paramIdGateThresh = "gateThresh";
    static constexpr auto paramIdTrigThresh = "trigThresh";
    static constexpr auto paramIdPitchBase = "pitchBase";
    static constexpr auto paramIdValueMult = "valueMult";
    static constexpr auto paramIdCurveSelect = "curveSelect";

    // Virtual ID for direct input connection checking
    static constexpr auto paramIdGateIn = "gate_in";

    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdSlewMod = "slew_mod";
    static constexpr auto paramIdGateThreshMod = "gateThresh_mod";
    static constexpr auto paramIdTrigThreshMod = "trigThresh_mod";
    static constexpr auto paramIdPitchBaseMod = "pitchBase_mod";
    static constexpr auto paramIdValueMultMod = "valueMult_mod";
    static constexpr auto paramIdCurveSelectMod = "curveSelect_mod";

    FunctionGeneratorModuleProcessor();
    ~FunctionGeneratorModuleProcessor() override = default;

    const juce::String getName() const override { return "function generator"; }

    // --- Core functions ---
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    
    void setTimingInfo(const TransportState& state) override;
    
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // --- State management for saving/loading the drawn curves ---
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

    // --- UI drawing functions ---
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    
    // --- REFACTORED drawIoPins ---
    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Group global inputs with primary outputs
        helpers.drawParallelPins("Gate In", 0, "Value", 0);
        helpers.drawParallelPins("Trigger In", 1, "Inverted", 1);
        helpers.drawParallelPins("Sync In", 2, "Bipolar", 2);
        helpers.drawParallelPins("Rate Mod", 3, "Pitch", 3);
        helpers.drawParallelPins("Slew Mod", 4, "Gate", 4);
        helpers.drawParallelPins("Gate Thresh Mod", 5, "Trigger", 5);
        helpers.drawParallelPins("Trig Thresh Mod", 6, "End of Cycle", 6);
        
        // Remaining global inputs
        helpers.drawAudioInputPin("Pitch Base Mod", 7);
        helpers.drawAudioInputPin("Value Mult Mod", 8);
        helpers.drawAudioInputPin("Curve Select Mod", 9);

        ImGui::Spacing(); // Add a visual separator

        // Dedicated curve outputs
        helpers.drawAudioOutputPin("Blue Value", 7);
        helpers.drawAudioOutputPin("Blue Pitch", 8);
        helpers.drawAudioOutputPin("Red Value", 9);
        helpers.drawAudioOutputPin("Red Pitch", 10);
        helpers.drawAudioOutputPin("Green Value", 11);
        helpers.drawAudioOutputPin("Green Pitch", 12);
    }

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    // --- Core state for the curves ---
    std::array<std::vector<float>, 3> curves;
    static constexpr int CURVE_RESOLUTION = 256;

    // --- DSP State ---
    double phase{ 0.0 };
    double lastPhase{ 0.0 };
    double sampleRate{ 44100.0 };
    bool lastTriggerState{ false };
    bool lastGateState{ false };
    bool lastSyncState{ false };
    float currentValue{ 0.0f };
    float targetValue{ 0.0f };
    bool isRunning{ false };
    bool lastGateOut{ false };
    int eocPulseRemaining{ 0 };

    TransportState m_currentTransport;
    
    // --- Smoothed values ---
    juce::SmoothedValue<float> smoothedSlew;
    juce::SmoothedValue<float> smoothedRate;
    juce::SmoothedValue<float> smoothedGateThresh;
    juce::SmoothedValue<float> smoothedTrigThresh;
    juce::SmoothedValue<float> smoothedPitchBase;
    juce::SmoothedValue<float> smoothedValueMult;

    // --- Parameter Pointers ---
    std::atomic<float>* rateParam{ nullptr };
    std::atomic<float>* modeParam{ nullptr };
    std::atomic<float>* loopParam{ nullptr };
    std::atomic<float>* slewParam{ nullptr };
    std::atomic<float>* gateThreshParam{ nullptr };
    std::atomic<float>* trigThreshParam{ nullptr };
    std::atomic<float>* pitchBaseParam{ nullptr };
    std::atomic<float>* valueMultParam{ nullptr };
    std::atomic<float>* curveSelectParam{ nullptr };

    // --- Helper functions ---
    float interpolateCurve(int curveIndex, float phase);
    void generateOutputs(float selectedValue, float blueValue, float redValue, float greenValue, bool endOfCycle, float* outputs, float gateThresh, float pitchBase, float valueMult);

#if defined(PRESET_CREATOR_UI)
    // State for the interactive drawing canvas
    bool isDragging{ false };
    ImVec2 lastMousePosInCanvas{ -1, -1 };
#endif
};

================================================================================
FILE: juce\Source\audio\modules\GateModuleProcessor.cpp
================================================================================


#include "GateModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout GateModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdThreshold, "Threshold", -80.0f, 0.0f, -40.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdAttack, "Attack", 0.1f, 100.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRelease, "Release", 5.0f, 1000.0f, 50.0f));
    
    return { params.begin(), params.end() };
}

GateModuleProcessor::GateModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Audio In", juce::AudioChannelSet::stereo(), true)
          // For now, no modulation inputs. Can be added later if desired.
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "GateParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue(paramIdThreshold);
    attackParam = apvts.getRawParameterValue(paramIdAttack);
    releaseParam = apvts.getRawParameterValue(paramIdRelease);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void GateModuleProcessor::prepareToPlay(double newSampleRate, int /*samplesPerBlock*/)
{
    currentSampleRate = newSampleRate;
    envelope = 0.0f;
}

void GateModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // Copy input to output
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }
    
    const int numChannels = juce::jmin(numInputChannels, numOutputChannels);

    // Get parameters
    const float thresholdLinear = juce::Decibels::decibelsToGain(thresholdParam->load());
    // Convert attack/release times from ms to a per-sample coefficient
    const float attackCoeff = 1.0f - std::exp(-1.0f / (attackParam->load() * 0.001f * (float)currentSampleRate));
    const float releaseCoeff = 1.0f - std::exp(-1.0f / (releaseParam->load() * 0.001f * (float)currentSampleRate));

    auto* leftData = outBus.getWritePointer(0);
    auto* rightData = numChannels > 1 ? outBus.getWritePointer(1) : nullptr;

    for (int i = 0; i < numSamples; ++i)
    {
        // Get the magnitude of the input signal (mono or stereo)
        float magnitude = std::abs(leftData[i]);
        if (rightData)
            magnitude = std::max(magnitude, std::abs(rightData[i]));

        // Determine if the gate should be open or closed
        float target = (magnitude >= thresholdLinear) ? 1.0f : 0.0f;

        // Move the envelope towards the target using the appropriate attack or release time
        if (target > envelope)
            envelope += (target - envelope) * attackCoeff;
        else
            envelope += (target - envelope) * releaseCoeff;
        
        // Apply the envelope as a gain to the signal
        leftData[i] *= envelope;
        if (rightData)
            rightData[i] *= envelope;
    }

    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(leftData[numSamples - 1]);
        if (lastOutputValues[1] && rightData) lastOutputValues[1]->store(rightData[numSamples - 1]);
    }
}

bool GateModuleProcessor::getParamRouting(const juce::String& /*paramId*/, int& /*outBusIndex*/, int& /*outChannelIndexInBus*/) const
{
    // No modulation inputs in this version
    return false;
}

juce::String GateModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    return {};
}

juce::String GateModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void GateModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, float min, float max, const char* format) {
        float value = ap.getRawParameterValue(paramId)->load();
        if (ImGui::SliderFloat(label, &value, min, max, format))
            *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    };

    drawSlider("Threshold", paramIdThreshold, -80.0f, 0.0f, "%.1f dB");
    drawSlider("Attack", paramIdAttack, 0.1f, 100.0f, "%.1f ms");
    drawSlider("Release", paramIdRelease, 5.0f, 1000.0f, "%.0f ms");

    ImGui::PopItemWidth();
}

void GateModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\GateModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class GateModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdThreshold = "threshold";
    static constexpr auto paramIdAttack = "attack";
    static constexpr auto paramIdRelease = "release";

    GateModuleProcessor();
    ~GateModuleProcessor() override = default;

    const juce::String getName() const override { return "gate"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // Cached atomic pointers to parameters
    std::atomic<float>* thresholdParam { nullptr };
    std::atomic<float>* attackParam { nullptr };
    std::atomic<float>* releaseParam { nullptr };

    // DSP state for the envelope follower
    float envelope { 0.0f };
    double currentSampleRate { 48000.0 };
};



================================================================================
FILE: juce\Source\audio\modules\GranulatorModuleProcessor.cpp
================================================================================


#include "GranulatorModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout GranulatorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDensity, "Density (Hz)", juce::NormalisableRange<float>(0.1f, 100.0f, 0.01f, 0.3f), 10.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdSize, "Size (ms)", juce::NormalisableRange<float>(5.0f, 500.0f, 0.01f, 0.4f), 100.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdPosition, "Position", 0.0f, 1.0f, 0.5f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdSpread, "Spread", 0.0f, 1.0f, 0.1f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdPitch, "Pitch (st)", -24.0f, 24.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdPitchRandom, "Pitch Rand", 0.0f, 12.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdPanRandom, "Pan Rand", 0.0f, 1.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdGate, "Gate", 0.0f, 1.0f, 1.0f));
    return { p.begin(), p.end() };
}

GranulatorModuleProcessor::GranulatorModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(8), true) // Audio L/R, Trig, Density, Size, Position, Pitch, Gate
          .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "GranulatorParams", createParameterLayout())
{
    densityParam      = apvts.getRawParameterValue(paramIdDensity);
    sizeParam         = apvts.getRawParameterValue(paramIdSize);
    positionParam     = apvts.getRawParameterValue(paramIdPosition);
    spreadParam       = apvts.getRawParameterValue(paramIdSpread);
    pitchParam        = apvts.getRawParameterValue(paramIdPitch);
    pitchRandomParam  = apvts.getRawParameterValue(paramIdPitchRandom);
    panRandomParam    = apvts.getRawParameterValue(paramIdPanRandom);
    gateParam         = apvts.getRawParameterValue(paramIdGate);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void GranulatorModuleProcessor::prepareToPlay(double sampleRate, int)
{
    const int bufferSeconds = 2;
    sourceBuffer.setSize(2, (int)(sampleRate * bufferSeconds));
    sourceBuffer.clear();
    sourceWritePos = 0;

    smoothedDensity.reset(sampleRate, 0.05);
    smoothedSize.reset(sampleRate, 0.05);
    smoothedPosition.reset(sampleRate, 0.05);
    smoothedPitch.reset(sampleRate, 0.05);
    smoothedGate.reset(sampleRate, 0.002);

    for (auto& grain : grainPool)
        grain.isActive = false;
}

void GranulatorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    const double sr = getSampleRate();

    // Get modulation CVs
    const bool isTriggerConnected = isParamInputConnected(paramIdTriggerIn);
    const float* trigCV = inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* densityCV = isParamInputConnected(paramIdDensityMod) && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* sizeCV = isParamInputConnected(paramIdSizeMod) && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;
    const float* posCV = isParamInputConnected(paramIdPositionMod) && inBus.getNumChannels() > 5 ? inBus.getReadPointer(5) : nullptr;
    const float* pitchCV = isParamInputConnected(paramIdPitchMod) && inBus.getNumChannels() > 6 ? inBus.getReadPointer(6) : nullptr;
    const float* gateCV = isParamInputConnected(paramIdGateMod) && inBus.getNumChannels() > 7 ? inBus.getReadPointer(7) : nullptr;

    // Get base parameters
    const float baseDensity = densityParam->load();
    const float baseSize = sizeParam->load();
    const float basePos = positionParam->load();
    const float basePitch = pitchParam->load();
    const float baseGate = gateParam->load();

    for (int i = 0; i < numSamples; ++i)
    {
        // 1. Record incoming audio to circular buffer
        sourceBuffer.setSample(0, sourceWritePos, inBus.getSample(0, i));
        sourceBuffer.setSample(1, sourceWritePos, inBus.getSample(1, i));

        // 2. Handle triggers
        // Default to ON if the trigger input is not connected.
        bool isGenerating = !isTriggerConnected;
        if (isTriggerConnected && trigCV != nullptr) {
            // If connected, follow the gate signal.
            isGenerating = trigCV[i] > 0.5f;
        }
        
        // 3. Update smoothed parameters
        float density = baseDensity * (densityCV ? juce::jmap(densityCV[i], 0.0f, 1.0f, 0.5f, 2.0f) : 1.0f);
        float sizeMs = baseSize * (sizeCV ? juce::jmap(sizeCV[i], 0.0f, 1.0f, 0.1f, 2.0f) : 1.0f);
        float position = basePos + (posCV ? posCV[i] - 0.5f : 0.0f);
        float pitch = basePitch + (pitchCV ? juce::jmap(pitchCV[i], 0.0f, 1.0f, -12.0f, 12.0f) : 0.0f);
        float gate = gateCV ? juce::jlimit(0.0f, 1.0f, gateCV[i]) : baseGate;
        
        smoothedDensity.setTargetValue(density);
        smoothedSize.setTargetValue(sizeMs);
        smoothedPosition.setTargetValue(position);
        smoothedPitch.setTargetValue(pitch);
        smoothedGate.setTargetValue(gate);

        // 4. Spawn new grains
        if (isGenerating && --samplesUntilNextGrain <= 0) {
            for (int j = 0; j < (int)grainPool.size(); ++j) {
                if (!grainPool[j].isActive) {
                    launchGrain(j, smoothedDensity.getNextValue(), smoothedSize.getNextValue(),
                                smoothedPosition.getNextValue(), spreadParam->load(),
                                smoothedPitch.getNextValue(), pitchRandomParam->load(), panRandomParam->load());
                    break;
                }
            }
            float currentDensity = smoothedDensity.getCurrentValue();
            samplesUntilNextGrain = (currentDensity > 0.1f) ? (int)(sr / currentDensity) : (int)sr;
        }

        // 5. Process active grains
        float sampleL = 0.0f, sampleR = 0.0f;
        for (auto& grain : grainPool) {
            if (grain.isActive) {
                int readPosInt = (int)grain.readPosition;
                float fraction = (float)(grain.readPosition - readPosInt);
                
                // Linear interpolation
                float sL = sourceBuffer.getSample(0, readPosInt) * (1.0f - fraction) + sourceBuffer.getSample(0, (readPosInt + 1) % sourceBuffer.getNumSamples()) * fraction;
                float sR = sourceBuffer.getSample(1, readPosInt) * (1.0f - fraction) + sourceBuffer.getSample(1, (readPosInt + 1) % sourceBuffer.getNumSamples()) * fraction;

                // Hann window envelope
                float envelope = 0.5f * (1.0f - std::cos(2.0f * juce::MathConstants<float>::pi * (float)(grain.totalLifetime - grain.samplesRemaining) / (float)grain.totalLifetime));
                
                sampleL += sL * envelope * grain.panL;
                sampleR += sR * envelope * grain.panR;

                grain.readPosition += grain.increment;
                if (grain.readPosition >= sourceBuffer.getNumSamples())
                    grain.readPosition -= sourceBuffer.getNumSamples();
                
                if (--grain.samplesRemaining <= 0)
                    grain.isActive = false;
            }
        }
        
        // 6. Apply gate and write to output
        float gateValue = smoothedGate.getNextValue();
        outBus.setSample(0, i, sampleL * gateValue);
        outBus.setSample(1, i, sampleR * gateValue);

        sourceWritePos = (sourceWritePos + 1) % sourceBuffer.getNumSamples();
    }
    
    // Update telemetry
    setLiveParamValue("density_live", smoothedDensity.getCurrentValue());
    setLiveParamValue("size_live", smoothedSize.getCurrentValue());
    setLiveParamValue("position_live", smoothedPosition.getCurrentValue());
    setLiveParamValue("pitch_live", smoothedPitch.getCurrentValue());
    setLiveParamValue("gate_live", smoothedGate.getCurrentValue());
    
    if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, numSamples - 1));
    if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, numSamples - 1));
}

void GranulatorModuleProcessor::launchGrain(int grainIndex, float density, float size, float position, float spread, float pitch, float pitchRandom, float panRandom)
{
    auto& grain = grainPool[grainIndex];
    const double sr = getSampleRate();

    grain.totalLifetime = grain.samplesRemaining = (int)((size / 1000.0f) * sr);
    if (grain.samplesRemaining == 0) return;

    float posOffset = (random.nextFloat() - 0.5f) * spread;
    grain.readPosition = (sourceWritePos - (int)(juce::jlimit(0.0f, 1.0f, position + posOffset) * sourceBuffer.getNumSamples()) + sourceBuffer.getNumSamples()) % sourceBuffer.getNumSamples();

    float pitchOffset = (random.nextFloat() - 0.5f) * pitchRandom;
    grain.increment = std::pow(2.0, (pitch + pitchOffset) / 12.0);

    float pan = (random.nextFloat() - 0.5f) * panRandom;
    grain.panL = std::cos((pan + 1.0f) * juce::MathConstants<float>::pi * 0.25f);
    grain.panR = std::sin((pan + 1.0f) * juce::MathConstants<float>::pi * 0.25f);

    grain.isActive = true;
}

#if defined(PRESET_CREATOR_UI)
void GranulatorModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, const juce::String& modId, float min, float max, const char* format, int flags = 0) {
        bool isMod = isParamModulated(modId);
        float value = isMod ? getLiveParamValueFor(modId, paramId + "_live", ap.getRawParameterValue(paramId)->load())
                            : ap.getRawParameterValue(paramId)->load();
        
        if (isMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(label, &value, min, max, format, flags))
            if (!isMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        if (!isMod) adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    };

    drawSlider("Density", paramIdDensity, paramIdDensityMod, 0.1f, 100.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic);
    drawSlider("Size", paramIdSize, paramIdSizeMod, 5.0f, 500.0f, "%.0f ms", ImGuiSliderFlags_Logarithmic);
    drawSlider("Position", paramIdPosition, paramIdPositionMod, 0.0f, 1.0f, "%.2f");
    drawSlider("Spread", paramIdSpread, "", 0.0f, 1.0f, "%.2f");
    drawSlider("Pitch", paramIdPitch, paramIdPitchMod, -24.0f, 24.0f, "%.1f st");
    drawSlider("Pitch Rand", paramIdPitchRandom, "", 0.0f, 12.0f, "%.1f st");
    drawSlider("Pan Rand", paramIdPanRandom, "", 0.0f, 1.0f, "%.2f");
    drawSlider("Gate", paramIdGate, paramIdGateMod, 0.0f, 1.0f, "%.2f");

    ImGui::PopItemWidth();
}

void GranulatorModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Trigger In", 2);
    helpers.drawAudioInputPin("Density Mod", 3);
    helpers.drawAudioInputPin("Size Mod", 4);
    helpers.drawAudioInputPin("Position Mod", 5);
    helpers.drawAudioInputPin("Pitch Mod", 6);
    helpers.drawAudioInputPin("Gate Mod", 7);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif

bool GranulatorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus.
    if (paramId == paramIdTriggerIn)    { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdDensityMod)   { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdSizeMod)      { outChannelIndexInBus = 4; return true; }
    if (paramId == paramIdPositionMod)  { outChannelIndexInBus = 5; return true; }
    if (paramId == paramIdPitchMod)     { outChannelIndexInBus = 6; return true; }
    if (paramId == paramIdGateMod)      { outChannelIndexInBus = 7; return true; }
    return false;
}

juce::String GranulatorModuleProcessor::getAudioInputLabel(int channel) const
{
    switch(channel) {
        case 0: return "In L";
        case 1: return "In R";
        case 2: return "Trigger In";
        case 3: return "Density Mod";
        case 4: return "Size Mod";
        case 5: return "Position Mod";
        case 6: return "Pitch Mod";
        case 7: return "Gate Mod";
        default: return {};
    }
}

================================================================================
FILE: juce\Source\audio\modules\GranulatorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class GranulatorModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs for APVTS
    static constexpr auto paramIdDensity      = "density";
    static constexpr auto paramIdSize         = "size";
    static constexpr auto paramIdPosition     = "position";
    static constexpr auto paramIdSpread       = "spread";
    static constexpr auto paramIdPitch        = "pitch";
    static constexpr auto paramIdPitchRandom  = "pitchRandom";
    static constexpr auto paramIdPanRandom    = "panRandom";
    static constexpr auto paramIdGate         = "gate";

    // Virtual IDs for modulation inputs, used for routing
    static constexpr auto paramIdTriggerIn    = "trigger_in_mod";
    static constexpr auto paramIdDensityMod   = "density_mod";
    static constexpr auto paramIdSizeMod      = "size_mod";
    static constexpr auto paramIdPositionMod  = "position_mod";
    static constexpr auto paramIdPitchMod     = "pitch_mod";
    static constexpr auto paramIdGateMod      = "gate_mod";

    GranulatorModuleProcessor();
    ~GranulatorModuleProcessor() override = default;

    const juce::String getName() const override { return "granulator"; }

    // --- JUCE AudioProcessor Overrides ---
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // --- UI & Routing Overrides ---
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;

private:
    // --- Internal Implementation ---
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    void launchGrain(int grainIndex, float density, float size, float position, float spread, float pitch, float pitchRandom, float panRandom);

    // --- APVTS & Parameters ---
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* densityParam      { nullptr };
    std::atomic<float>* sizeParam         { nullptr };
    std::atomic<float>* positionParam     { nullptr };
    std::atomic<float>* spreadParam       { nullptr };
    std::atomic<float>* pitchParam        { nullptr };
    std::atomic<float>* pitchRandomParam  { nullptr };
    std::atomic<float>* panRandomParam    { nullptr };
    std::atomic<float>* gateParam         { nullptr };

    // --- Grain State ---
    struct Grain
    {
        bool isActive { false };
        double readPosition { 0.0 };
        double increment { 1.0 };
        int samplesRemaining { 0 };
        int totalLifetime { 0 };
        float panL { 0.707f };
        float panR { 0.707f };
    };
    std::array<Grain, 64> grainPool;
    juce::Random random;

    // --- Audio Buffering ---
    juce::AudioBuffer<float> sourceBuffer;
    int sourceWritePos { 0 };
    int samplesUntilNextGrain { 0 };

    // --- Parameter Smoothing ---
    juce::SmoothedValue<float> smoothedDensity, smoothedSize, smoothedPosition, smoothedPitch, smoothedGate;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(GranulatorModuleProcessor)
};


================================================================================
FILE: juce\Source\audio\modules\GraphicEQModuleProcessor.cpp
================================================================================


#include "GraphicEQModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout GraphicEQModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    // Create a gain parameter for each of the 8 bands
    // FIX: Expand the range to allow for a more effective mute.
    // JUCE's decibelsToGain handles large negative numbers gracefully.
    for (int i = 0; i < 8; ++i)
    {
        juce::String paramID = "gainBand" + juce::String(i + 1);
        juce::String paramName = "Gain " + juce::String(centerFrequencies[i], 0) + " Hz";
        // Change the range from -12.0f to -60.0f. The default remains 0.0f.
        params.push_back(std::make_unique<juce::AudioParameterFloat>(paramID, paramName, -60.0f, 12.0f, 0.0f));
    }

    // FIX: Ensure correct default values are set for all parameters.
    params.push_back(std::make_unique<juce::AudioParameterFloat>("outputLevel", "Output Level", -24.0f, 24.0f, 0.0f));

    // --- NEW PARAMETERS ---
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gateThreshold", "Gate Threshold",
        juce::NormalisableRange<float>(-60.0f, 0.0f, 0.1f), -30.0f));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "triggerThreshold", "Trigger Threshold",
        juce::NormalisableRange<float>(-60.0f, 0.0f, 0.1f), -6.0f));
    // --- END OF NEW PARAMETERS ---

    return { params.begin(), params.end() };
}

GraphicEQModuleProcessor::GraphicEQModuleProcessor()
    : ModuleProcessor(BusesProperties()
          // Single unified input bus: Channels 0-1 (Audio In L/R), 2-9 (Band Mods), 10-11 (Gate/Trig Thresh Mods)
          .withInput("Audio In", juce::AudioChannelSet::discreteChannels(12), true)
          // --- THE FIX: Define TWO separate output busses ---
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)
          .withOutput("CV Out", juce::AudioChannelSet::discreteChannels(TotalCVOutputs), true)),
      apvts(*this, nullptr, "GraphicEQParams", createParameterLayout())
{
    for (int i = 0; i < 8; ++i)
    {
        bandGainParams[i] = apvts.getRawParameterValue("gainBand" + juce::String(i + 1));
    }
    outputLevelParam = apvts.getRawParameterValue("outputLevel");
    gateThresholdParam = apvts.getRawParameterValue("gateThreshold");
    triggerThresholdParam = apvts.getRawParameterValue("triggerThreshold");

    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void GraphicEQModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2; // Process in stereo

    processorChain.prepare(spec);
    processorChain.reset();

    // CRITICAL: Initialize all filter coefficients with unity gain (0 dB) to prevent uninitialized state
    const float q = 1.414f;
    *processorChain.get<0>().state = *juce::dsp::IIR::Coefficients<float>::makeLowShelf(sampleRate, centerFrequencies[0], q, 1.0f);
    *processorChain.get<1>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[1], q, 1.0f);
    *processorChain.get<2>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[2], q, 1.0f);
    *processorChain.get<3>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[3], q, 1.0f);
    *processorChain.get<4>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[4], q, 1.0f);
    *processorChain.get<5>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[5], q, 1.0f);
    *processorChain.get<6>().state = *juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[6], q, 1.0f);
    *processorChain.get<7>().state = *juce::dsp::IIR::Coefficients<float>::makeHighShelf(sampleRate, centerFrequencies[7], q, 1.0f);

    // Reset gate/trigger state
    lastTriggerState = false;
    triggerPulseSamplesRemaining = 0;
}

void GraphicEQModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    juce::ScopedNoDenormals noDenormals;

    auto inBus = getBusBuffer(buffer, true, 0);
    auto audioOutBus = getBusBuffer(buffer, false, 0); // Audio is on bus 0
    auto cvOutBus = getBusBuffer(buffer, false, 1);    // CV is on bus 1

    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // --- Logging Setup ---
    // Log only once every 100 blocks to avoid spamming the log file.
    static int debugCounter = 0;
    const bool shouldLog = ((debugCounter++ % 100) == 0);

    // LOG POINT 1: Check input signal at entry
    if (shouldLog && inBus.getNumChannels() > 0)
    {
        float inputRms = inBus.getRMSLevel(0, 0, numSamples);
        juce::Logger::writeToLog("[GraphicEQ Debug] At Entry - Input RMS: " + juce::String(inputRms, 6));
    }

    // --- CRITICAL FIX: Capture input audio BEFORE any write operations ---
    // Create a temporary buffer to hold a copy of the stereo input (true stereo path)
    juce::AudioBuffer<float> inputCopy(2, numSamples);
    if (inBus.getNumChannels() > 0)
    {
        inputCopy.copyFrom(0, 0, inBus, 0, 0, numSamples);
        if (inBus.getNumChannels() > 1)
            inputCopy.copyFrom(1, 0, inBus, 1, 0, numSamples);
        else
            inputCopy.copyFrom(1, 0, inBus, 0, 0, numSamples); // duplicate mono to R
    }
    else
    {
        inputCopy.clear();
    }
    // --- END OF CRITICAL FIX ---

    // --- 1. Gate/Trigger Analysis (now on the SAFE captured input signal) ---
    // Read threshold parameters and check for modulation CVs
    float gateThreshDb = gateThresholdParam->load();
    float trigThreshDb = triggerThresholdParam->load();

    // Check for modulation on gate threshold (channel 10)
    if (isParamInputConnected("gateThreshold") && inBus.getNumChannels() > 10)
    {
        float modCV = inBus.getSample(10, 0);
        gateThreshDb = juce::jmap(modCV, 0.0f, 1.0f, -60.0f, 0.0f);
        setLiveParamValue("gateThreshold_live", gateThreshDb);
    }

    // Check for modulation on trigger threshold (channel 11)
    if (isParamInputConnected("triggerThreshold") && inBus.getNumChannels() > 11)
    {
        float modCV = inBus.getSample(11, 0);
        trigThreshDb = juce::jmap(modCV, 0.0f, 1.0f, -60.0f, 0.0f);
        setLiveParamValue("triggerThreshold_live", trigThreshDb);
    }

    const float gateThreshLin = juce::Decibels::decibelsToGain(gateThreshDb);
    const float trigThreshLin = juce::Decibels::decibelsToGain(trigThreshDb);

    // --- 2. Write Gate/Trigger CVs (using a mono sum of the captured stereo input) ---
    if (cvOutBus.getNumChannels() >= 2)
    {
        float* gateOut = cvOutBus.getWritePointer(GateOut);
        float* trigOut = cvOutBus.getWritePointer(TrigOut);

        for (int i = 0; i < numSamples; ++i)
        {
            float monoSample = 0.5f * (inputCopy.getSample(0, i) + inputCopy.getSample(1, i));
            float sampleAbs = std::abs(monoSample);

            // Gate output
            gateOut[i] = sampleAbs > gateThreshLin ? 1.0f : 0.0f;

            // Trigger output (edge detection with pulse)
            bool isAboveTrig = sampleAbs > trigThreshLin;
            if (isAboveTrig && !lastTriggerState) {
                triggerPulseSamplesRemaining = (int)(getSampleRate() * 0.001); // 1ms pulse
            }
            lastTriggerState = isAboveTrig;

            trigOut[i] = (triggerPulseSamplesRemaining > 0) ? 1.0f : 0.0f;
            if (triggerPulseSamplesRemaining > 0) triggerPulseSamplesRemaining--;
        }
    }

    // --- 3. Copy Captured Input to AUDIO Output Bus (true stereo) ---
    if (audioOutBus.getNumChannels() >= 2)
    {
        audioOutBus.copyFrom(0, 0, inputCopy, 0, 0, numSamples);
        audioOutBus.copyFrom(1, 0, inputCopy, 1, 0, numSamples);
    }
    else if (audioOutBus.getNumChannels() == 1)
    {
        audioOutBus.copyFrom(0, 0, inputCopy, 0, 0, numSamples);
    }
    else
    {
        audioOutBus.clear();
    }

    // LOG POINT 2: Check signal after copying to output bus
    if (shouldLog && audioOutBus.getNumChannels() > 0)
    {
        float afterCopyRms = audioOutBus.getRMSLevel(0, 0, numSamples);
        juce::Logger::writeToLog("[GraphicEQ Debug] After Copy - Audio Out RMS: " + juce::String(afterCopyRms, 6));
    }

    // --- 4. Update Filter Coefficients ---
    double sampleRate = getSampleRate();
    const float q = 1.414f;

    for (int bandIndex = 0; bandIndex < 8; ++bandIndex)
    {
        float gainDb = bandGainParams[bandIndex]->load();
        juce::String paramId = "gainBand" + juce::String(bandIndex + 1);

        // Check for modulation CV on this band (channels 2-9)
        int modChannel = 2 + bandIndex;
        if (isParamInputConnected(paramId) && inBus.getNumChannels() > modChannel)
        {
            float modCV = inBus.getSample(modChannel, 0);
            gainDb = juce::jmap(modCV, 0.0f, 1.0f, -60.0f, 12.0f);
            setLiveParamValue(paramId + "_live", gainDb);
        }

        float gainLinear = juce::Decibels::decibelsToGain(gainDb);

        // LOG POINT 3: Log filter parameters for Band 1 as a sample
        if (shouldLog && bandIndex == 0)
        {
            juce::Logger::writeToLog("[GraphicEQ Debug] Band 1 - Gain (dB): " + juce::String(gainDb, 2) + 
                                   ", Gain (Linear): " + juce::String(gainLinear, 6));
        }

        // CRITICAL FIX: ProcessorDuplicator needs the shared_ptr, not dereferenced coefficients
        if (bandIndex == 0)
        {
            *processorChain.get<0>().state = *juce::dsp::IIR::Coefficients<float>::makeLowShelf(sampleRate, centerFrequencies[bandIndex], q, gainLinear);
        }
        else if (bandIndex == 7)
        {
            *processorChain.get<7>().state = *juce::dsp::IIR::Coefficients<float>::makeHighShelf(sampleRate, centerFrequencies[bandIndex], q, gainLinear);
        }
        else if (bandIndex >= 1 && bandIndex <= 6) // Peak filters for bands 1-6
        {
            auto newCoefficients = juce::dsp::IIR::Coefficients<float>::makePeakFilter(sampleRate, centerFrequencies[bandIndex], q, gainLinear);
            switch (bandIndex)
            {
                case 1: *processorChain.get<1>().state = *newCoefficients; break;
                case 2: *processorChain.get<2>().state = *newCoefficients; break;
                case 3: *processorChain.get<3>().state = *newCoefficients; break;
                case 4: *processorChain.get<4>().state = *newCoefficients; break;
                case 5: *processorChain.get<5>().state = *newCoefficients; break;
                case 6: *processorChain.get<6>().state = *newCoefficients; break;
            }
        }
    }

    // --- 5. Process Entire Chain in Series (in-place on audioOutBus) ---
    if (audioOutBus.getNumChannels() > 0)
    {
        juce::dsp::AudioBlock<float> audioBlock(audioOutBus.getArrayOfWritePointers(), 
                                                 std::min(2, audioOutBus.getNumChannels()), 
                                                 numSamples);
        juce::dsp::ProcessContextReplacing<float> context(audioBlock);
        processorChain.process(context);

        // LOG POINT 4: Check signal after processing through filter chain
        if (shouldLog)
        {
            float afterChainRms = audioOutBus.getRMSLevel(0, 0, numSamples);
            juce::Logger::writeToLog("[GraphicEQ Debug] After Filter Chain - Audio Out RMS: " + juce::String(afterChainRms, 6));
        }

        // --- 6. Apply Output Gain ---
        float outputGain = juce::Decibels::decibelsToGain(outputLevelParam->load());
        audioOutBus.applyGain(0, 0, numSamples, outputGain);
        if (audioOutBus.getNumChannels() > 1)
            audioOutBus.applyGain(1, 0, numSamples, outputGain);

        // LOG POINT 5: Check final signal after output gain
        if (shouldLog)
        {
            float finalRms = audioOutBus.getRMSLevel(0, 0, numSamples);
            float outputGainDb = outputLevelParam->load();
            juce::Logger::writeToLog("[GraphicEQ Debug] After Output Gain - Audio Out RMS: " + juce::String(finalRms, 6) + 
                                   ", Output Gain (dB): " + juce::String(outputGainDb, 2));
        }
    }
}

bool GraphicEQModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // All inputs are now on Bus 0 with the following layout:
    // Channels 0-1: Audio In L/R
    // Channels 2-9: Band 1-8 Gain Mods
    // Channel 10: Gate Threshold Mod
    // Channel 11: Trigger Threshold Mod

    if (paramId.startsWith("gainBand"))
    {
        int bandIndex = paramId.substring(8).getIntValue() - 1;
        if (bandIndex >= 0 && bandIndex < 8)
        {
            outBusIndex = 0;
            outChannelIndexInBus = 2 + bandIndex; // Start at channel 2
            return true;
        }
    }

    if (paramId == "gateThreshold") { outBusIndex = 0; outChannelIndexInBus = 10; return true; }
    if (paramId == "triggerThreshold") { outBusIndex = 0; outChannelIndexInBus = 11; return true; }

    return false;
}

juce::String GraphicEQModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    if (channel >= 2 && channel < 10) return "Band " + juce::String(channel - 1) + " Mod";
    // --- NEW ---
    if (channel == 10) return "Gate Thr Mod";
    if (channel == 11) return "Trig Thr Mod";
    return {};
}

juce::String GraphicEQModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    // --- NEW ---
    if (channel == 2) return "Gate Out";
    if (channel == 3) return "Trig Out";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void GraphicEQModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    // --- 1. Draw EQ Band Sliders ---
    const int numBands = 8;
    const float sliderWidth = itemWidth / (float)numBands * 0.9f;
    const float sliderHeight = 100.0f;

    ImGui::PushItemWidth(sliderWidth);
    for (int i = 0; i < numBands; ++i)
    {
        if (i > 0) ImGui::SameLine();
        ImGui::PushID(i);
        ImGui::BeginGroup();

        juce::String paramId = "gainBand" + juce::String(i + 1);
        const bool isMod = isParamModulated(paramId);
        float gainDb = isMod ? getLiveParamValueFor(paramId, "gainBand" + juce::String(i + 1) + "_live", bandGainParams[i]->load())
                             : bandGainParams[i]->load();

        if (isMod) ImGui::BeginDisabled();
        if (ImGui::VSliderFloat("##eq", ImVec2(sliderWidth, sliderHeight), &gainDb, -60.0f, 12.0f, ""))
        {
            if (!isMod)
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)))
                {
                    *p = gainDb;
                }
            }
        }
        if (!isMod) adjustParamOnWheel(apvts.getParameter(paramId), paramId, gainDb);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) ImGui::EndDisabled();

        juce::String label = (centerFrequencies[i] < 1000) ? juce::String(centerFrequencies[i], 0) : juce::String(centerFrequencies[i] / 1000.0f, 1) + "k";
        float labelWidth = ImGui::CalcTextSize(label.toRawUTF8()).x;
        float offset = (sliderWidth - labelWidth) * 0.5f;
        if (offset > 0) ImGui::SetCursorPosX(ImGui::GetCursorPosX() + offset);
        ImGui::TextUnformatted(label.toRawUTF8());

        ImGui::EndGroup();
        ImGui::PopID();
    }
    ImGui::PopItemWidth();

    // --- 2. Draw Control Parameters ---
    ImGui::PushItemWidth(itemWidth);

    // Gate Threshold (modulatable)
    const bool isGateMod = isParamModulated("gateThreshold");
    float gateThresh = isGateMod ? getLiveParamValueFor("gateThreshold", "gateThreshold_live", gateThresholdParam->load())
                                 : gateThresholdParam->load();
    if (isGateMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Gate Threshold", &gateThresh, -60.0f, 0.0f, "%.1f dB")) {
        if (!isGateMod) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gateThreshold")))
            {
                *p = gateThresh;
            }
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isGateMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Trigger Threshold (modulatable)
    const bool isTrigMod = isParamModulated("triggerThreshold");
    float trigThresh = isTrigMod ? getLiveParamValueFor("triggerThreshold", "triggerThreshold_live", triggerThresholdParam->load())
                                 : triggerThresholdParam->load();
    if (isTrigMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Trigger Threshold", &trigThresh, -60.0f, 0.0f, "%.1f dB")) {
        if (!isTrigMod) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("triggerThreshold")))
            {
                *p = trigThresh;
            }
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isTrigMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Output Level
    float outLevel = outputLevelParam->load();
    if (ImGui::SliderFloat("Output Level", &outLevel, -24.0f, 24.0f, "%.1f dB"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outputLevel")))
        {
            *p = outLevel;
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }

    ImGui::PopItemWidth();
}

void GraphicEQModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // All inputs on Bus 0 (channels 0-11)
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);

    // Band gain modulation inputs (channels 2-9)
    for (int i = 0; i < 8; ++i)
    {
        helpers.drawAudioInputPin(("Band " + juce::String(i + 1) + " Mod").toRawUTF8(), 2 + i);
    }

    // Threshold modulation inputs (channels 10-11)
    helpers.drawAudioInputPin("Gate Thr Mod", 10);
    helpers.drawAudioInputPin("Trig Thr Mod", 11);

    // Output pins
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
    helpers.drawAudioOutputPin("Gate Out", 2);
    helpers.drawAudioOutputPin("Trig Out", 3);
}
#endif

void GraphicEQModuleProcessor::getStateInformation(juce::MemoryBlock& destData)
{
    // Get the current state of all parameters from the APVTS.
    auto state = apvts.copyState();
    // Create an XML representation of the state.
    std::unique_ptr<juce::XmlElement> xml(state.createXml());
    // Copy the XML data to the destination memory block.
    copyXmlToBinary(*xml, destData);
}

void GraphicEQModuleProcessor::setStateInformation(const void* data, int sizeInBytes)
{
    // Try to get an XML representation from the raw data.
    std::unique_ptr<juce::XmlElement> xmlState(getXmlFromBinary(data, sizeInBytes));

    // If the XML is valid and has the correct tag...
    if (xmlState != nullptr)
        if (xmlState->hasTagName(apvts.state.getType()))
            // ...replace the current APVTS state with the new one.
            apvts.replaceState(juce::ValueTree::fromXml(*xmlState));
}



================================================================================
FILE: juce\Source\audio\modules\GraphicEQModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class GraphicEQModuleProcessor : public ModuleProcessor
{
public:
    enum CVOutputChannel
    {
        GateOut = 0,
        TrigOut,
        TotalCVOutputs // = 2
    };

    GraphicEQModuleProcessor();
    ~GraphicEQModuleProcessor() override = default;

    const juce::String getName() const override { return "graphic eq"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    void getStateInformation(juce::MemoryBlock& destData) override;
    void setStateInformation(const void* data, int sizeInBytes) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // A chain of 8 stereo IIR filters, one for each band.
    using FilterBand = juce::dsp::ProcessorDuplicator<juce::dsp::IIR::Filter<float>, juce::dsp::IIR::Coefficients<float>>;
    using EQChain = juce::dsp::ProcessorChain<FilterBand, FilterBand, FilterBand, FilterBand, FilterBand, FilterBand, FilterBand, FilterBand>;
    EQChain processorChain;

    // Store atomic pointers to all 8 band gain parameters and the output level
    std::array<std::atomic<float>*, 8> bandGainParams;
    std::atomic<float>* outputLevelParam { nullptr };
    std::atomic<float>* gateThresholdParam { nullptr };
    std::atomic<float>* triggerThresholdParam { nullptr };

    // Define the fixed center frequencies for our 8 bands
    static constexpr std::array<float, 8> centerFrequencies = { 63.0f, 125.0f, 250.0f, 500.0f, 1000.0f, 2000.0f, 4000.0f, 8000.0f };

    // Gate/Trigger state tracking (audio-thread only)
    bool lastTriggerState = false;
    int triggerPulseSamplesRemaining = 0;
};



================================================================================
FILE: juce\Source\audio\modules\HarmonicShaperModuleProcessor.cpp
================================================================================


#include "HarmonicShaperModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout HarmonicShaperModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    // --- Global Parameters ---
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMasterFreq, "Master Frequency",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMasterDrive, "Master Drive", 0.0f, 1.0f, 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdOutputGain, "Output Gain",
        juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.5f));

    // --- Per-Oscillator Parameters ---
    for (int i = 0; i < NUM_OSCILLATORS; ++i)
    {
        auto idx = juce::String(i + 1);
        params.push_back(std::make_unique<juce::AudioParameterFloat>("ratio_" + idx, "Ratio " + idx,
            juce::NormalisableRange<float>(0.125f, 16.0f, 0.001f, 0.25f), (float)(i + 1)));
        params.push_back(std::make_unique<juce::AudioParameterFloat>("detune_" + idx, "Detune " + idx, -100.0f, 100.0f, 0.0f));
        params.push_back(std::make_unique<juce::AudioParameterChoice>("waveform_" + idx, "Waveform " + idx,
            juce::StringArray{ "Sine", "Saw", "Square", "Triangle" }, 0));
        params.push_back(std::make_unique<juce::AudioParameterFloat>("drive_" + idx, "Drive " + idx, 0.0f, 1.0f, 0.5f));
        params.push_back(std::make_unique<juce::AudioParameterFloat>("level_" + idx, "Level " + idx, 0.0f, 1.0f, i == 0 ? 1.0f : 0.0f));
    }

    return { params.begin(), params.end() };
}

HarmonicShaperModuleProcessor::HarmonicShaperModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withInput("Audio In", juce::AudioChannelSet::stereo(), true)
        .withInput("Modulation", juce::AudioChannelSet::discreteChannels(2), true) // Freq, Drive
        .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "HarmonicShaperParams", createParameterLayout())
{
    // Cache global parameter pointers
    masterFreqParam = apvts.getRawParameterValue(paramIdMasterFreq);
    masterDriveParam = apvts.getRawParameterValue(paramIdMasterDrive);
    outputGainParam = apvts.getRawParameterValue(paramIdOutputGain);

    // Initialize oscillators and cache per-oscillator parameter pointers
    for (int i = 0; i < NUM_OSCILLATORS; ++i)
    {
        oscillators[i].initialise([](float x) { return std::sin(x); }, 128);
        currentWaveforms[i] = -1; // Force initial waveform setup

        auto idx = juce::String(i + 1);
        ratioParams[i] = apvts.getRawParameterValue("ratio_" + idx);
        detuneParams[i] = apvts.getRawParameterValue("detune_" + idx);
        waveformParams[i] = apvts.getRawParameterValue("waveform_" + idx);
        driveParams[i] = apvts.getRawParameterValue("drive_" + idx);
        levelParams[i] = apvts.getRawParameterValue("level_" + idx);
    }
}

void HarmonicShaperModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec{ sampleRate, (juce::uint32)samplesPerBlock, 1 };
    for (auto& osc : oscillators)
    {
        osc.prepare(spec);
    }
    smoothedMasterFreq.reset(sampleRate, 0.02);
    smoothedMasterDrive.reset(sampleRate, 0.02);
}

void HarmonicShaperModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto audioInBus = getBusBuffer(buffer, true, 0);
    auto modInBus = getBusBuffer(buffer, true, 1);
    auto outBus = getBusBuffer(buffer, false, 0);

    const bool isFreqMod = isParamInputConnected(paramIdMasterFreqMod);
    const bool isDriveMod = isParamInputConnected(paramIdMasterDriveMod);

    const float* freqCV = isFreqMod && modInBus.getNumChannels() > 0 ? modInBus.getReadPointer(0) : nullptr;
    const float* driveCV = isDriveMod && modInBus.getNumChannels() > 1 ? modInBus.getReadPointer(1) : nullptr;

    const float baseFrequency = masterFreqParam->load();
    const float baseMasterDrive = masterDriveParam->load();
    const float outputGain = outputGainParam->load();
    
    auto* outL = outBus.getWritePointer(0);
    auto* outR = outBus.getNumChannels() > 1 ? outBus.getWritePointer(1) : outL;
    
    const float* inL = audioInBus.getReadPointer(0);
    const float* inR = audioInBus.getNumChannels() > 1 ? audioInBus.getReadPointer(1) : inL;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        // === 1. Calculate Global Modulated Parameters (per-sample) ===
        float currentMasterFreq = baseFrequency;
        if (freqCV) {
            const float cv = juce::jlimit(0.0f, 1.0f, freqCV[i]);
            const float spanOct = std::log2(20000.0f / 20.0f);
            currentMasterFreq = 20.0f * std::pow(2.0f, cv * spanOct);
        }
        smoothedMasterFreq.setTargetValue(currentMasterFreq);

        float currentMasterDrive = baseMasterDrive;
        if (driveCV) {
            currentMasterDrive = juce::jlimit(0.0f, 1.0f, driveCV[i]);
        }
        smoothedMasterDrive.setTargetValue(currentMasterDrive);
        
        // === 2. Generate and Sum the 8 Oscillators ===
        float carrierSample = 0.0f;
        const float smoothedFreq = smoothedMasterFreq.getNextValue();
        const float smoothedDrive = smoothedMasterDrive.getNextValue();

        for (int osc = 0; osc < NUM_OSCILLATORS; ++osc)
        {
            const float level = levelParams[osc]->load();
            if (level <= 0.001f) continue; // Skip silent oscillators

            const int waveform = (int)waveformParams[osc]->load();
            if (currentWaveforms[osc] != waveform)
            {
                if (waveform == 0)      oscillators[osc].initialise([](float x) { return std::sin(x); });
                else if (waveform == 1) oscillators[osc].initialise([](float x) { return x / juce::MathConstants<float>::pi; });
                else if (waveform == 2) oscillators[osc].initialise([](float x) { return x < 0.0f ? -1.0f : 1.0f; });
                else                    oscillators[osc].initialise([](float x) { return 2.0f / juce::MathConstants<float>::pi * std::asin(std::sin(x)); });
                currentWaveforms[osc] = waveform;
            }

            const float frequency = smoothedFreq * ratioParams[osc]->load() + detuneParams[osc]->load();
            oscillators[osc].setFrequency(juce::jlimit(1.0f, (float)getSampleRate() * 0.5f, frequency), true);

            const float oscSample = oscillators[osc].processSample(0.0f);
            const float drive = driveParams[osc]->load() * smoothedDrive;
            const float shapedSample = std::tanh(oscSample * (1.0f + drive * 9.0f));
            carrierSample += shapedSample * level;
        }

        // Soft-clip the summed carrier signal to prevent extreme levels while preserving harmonic richness
        carrierSample = std::tanh(carrierSample);
        
        // === 3. Modulate Input with Carrier and Apply Gain ===
        outL[i] = inL[i] * carrierSample * outputGain;
        outR[i] = inR[i] * carrierSample * outputGain;

        // === 4. Update UI Telemetry (Throttled) ===
        if ((i & 63) == 0) {
            setLiveParamValue("masterFrequency_live", smoothedFreq);
            setLiveParamValue("masterDrive_live", smoothedDrive);
        }
    }
}

#if defined(PRESET_CREATOR_UI)

void HarmonicShaperModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    // --- Global Controls ---
    const bool freqIsMod = isParamModulated(paramIdMasterFreqMod);
    float freq = freqIsMod ? getLiveParamValueFor(paramIdMasterFreqMod, "masterFrequency_live", masterFreqParam->load()) : masterFreqParam->load();

    const bool driveIsMod = isParamModulated(paramIdMasterDriveMod);
    float drive = driveIsMod ? getLiveParamValueFor(paramIdMasterDriveMod, "masterDrive_live", masterDriveParam->load()) : masterDriveParam->load();

    float gain = outputGainParam->load();

    ImGui::PushItemWidth(itemWidth);

    if (freqIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Master Freq", &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic)) {
        if (!freqIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMasterFreq))) *p = freq;
    }
    if (!freqIsMod) adjustParamOnWheel(ap.getParameter(paramIdMasterFreq), "masterFreqHz", freq);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (freqIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (driveIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Master Drive", &drive, 0.0f, 1.0f, "%.2f")) {
        if (!driveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMasterDrive))) *p = drive;
    }
    if (!driveIsMod) adjustParamOnWheel(ap.getParameter(paramIdMasterDrive), "masterDrive", drive);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (driveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (ImGui::SliderFloat("Output Gain", &gain, 0.0f, 1.0f, "%.2f")) {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdOutputGain))) *p = gain;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    ImGui::PopItemWidth(); // Pop width for global controls

    // --- Per-Oscillator Controls ---
    ImGui::Text("Oscillators");
    
    for (int i = 0; i < NUM_OSCILLATORS; ++i)
    {
        auto idx = juce::String(i + 1);
        ImGui::PushID(i);
        ImGui::Text("Oscillator %d", i + 1);
        
        // --- START OF THE ACTUAL FIX: Manual Layout for each control ---
        // Define an alignment position for the sliders
        const float label_width = 80.0f;
        const float control_width = itemWidth - label_width - ImGui::GetStyle().ItemSpacing.x;

        // Level
        float level = levelParams[i]->load();
        ImGui::Text("Level"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::SliderFloat("##level", &level, 0.0f, 1.0f, "%.2f"))
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("level_" + idx))) *p = level;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();

        // Ratio
        float ratio = ratioParams[i]->load();
        ImGui::Text("Ratio"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::SliderFloat("##ratio", &ratio, 0.125f, 16.0f, "%.3fx", ImGuiSliderFlags_Logarithmic))
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("ratio_" + idx))) *p = ratio;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();

        // Detune
        float detune = detuneParams[i]->load();
        ImGui::Text("Detune"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::SliderFloat("##detune", &detune, -100.0f, 100.0f, "%.2f cents"))
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("detune_" + idx))) *p = detune;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();

        // Waveform
        int wave = (int)waveformParams[i]->load();
        ImGui::Text("Waveform"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::Combo("##wave", &wave, "Sine\0Saw\0Square\0Triangle\0\0"))
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("waveform_" + idx))) *p = wave;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();
        
        // Drive
        float oscDrive = driveParams[i]->load();
        ImGui::Text("Drive"); ImGui::SameLine(label_width); ImGui::PushItemWidth(control_width);
        if (ImGui::SliderFloat("##drive", &oscDrive, 0.0f, 1.0f, "%.2f"))
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("drive_" + idx))) *p = oscDrive;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        ImGui::PopItemWidth();

        ImGui::PopID();
    }
}

void HarmonicShaperModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Freq Mod", 2);
    helpers.drawAudioInputPin("Drive Mod", 3);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}

juce::String HarmonicShaperModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel) {
        case 0: return "In L";
        case 1: return "In R";
        case 2: return "Freq Mod";
        case 3: return "Drive Mod";
        default: return {};
    }
}

juce::String HarmonicShaperModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel) {
        case 0: return "Out L";
        case 1: return "Out R";
        default: return {};
    }
}

#endif // PRESET_CREATOR_UI

bool HarmonicShaperModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // Modulation inputs are on bus 1
    outBusIndex = 1; 
    if (paramId == paramIdMasterFreqMod) { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdMasterDriveMod) { outChannelIndexInBus = 1; return true; }
    return false;
}



================================================================================
FILE: juce\Source\audio\modules\HarmonicShaperModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class HarmonicShaperModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int NUM_OSCILLATORS = 8;

    // --- Parameter IDs ---
    static constexpr auto paramIdMasterFreq   = "masterFrequency";
    static constexpr auto paramIdMasterDrive  = "masterDrive";
    static constexpr auto paramIdOutputGain   = "outputGain";
    // Modulation targets
    static constexpr auto paramIdMasterFreqMod = "masterFrequency_mod";
    static constexpr auto paramIdMasterDriveMod = "masterDrive_mod";

    HarmonicShaperModuleProcessor();
    ~HarmonicShaperModuleProcessor() override = default;

    const juce::String getName() const override { return "harmonic shaper"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    std::array<juce::dsp::Oscillator<float>, NUM_OSCILLATORS> oscillators;
    std::array<int, NUM_OSCILLATORS> currentWaveforms;

    // --- Cached Parameter Pointers ---
    std::atomic<float>* masterFreqParam { nullptr };
    std::atomic<float>* masterDriveParam { nullptr };
    std::atomic<float>* outputGainParam { nullptr };
    std::array<std::atomic<float>*, NUM_OSCILLATORS> ratioParams;
    std::array<std::atomic<float>*, NUM_OSCILLATORS> detuneParams;
    std::array<std::atomic<float>*, NUM_OSCILLATORS> waveformParams;
    std::array<std::atomic<float>*, NUM_OSCILLATORS> driveParams;
    std::array<std::atomic<float>*, NUM_OSCILLATORS> levelParams;

    // --- Smoothed Values for Zipper-Free Modulation ---
    juce::SmoothedValue<float> smoothedMasterFreq;
    juce::SmoothedValue<float> smoothedMasterDrive;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(HarmonicShaperModuleProcessor);
};



================================================================================
FILE: juce\Source\audio\modules\InletModuleProcessor.cpp
================================================================================


#include "InletModuleProcessor.h"

InletModuleProcessor::InletModuleProcessor()
    : ModuleProcessor(BusesProperties()
                      .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "InletParams", createParameterLayout()),
      customLabel("Inlet")
{
    // Initialize output value tracking
    lastOutputValues.clear();
    for (int i = 0; i < 2; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout InletModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    
    layout.add(std::make_unique<juce::AudioParameterInt>(
        paramIdChannelCount,
        "Channel Count",
        1, 16, 2
    ));
    
    return layout;
}

void InletModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void InletModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // If we have an incoming buffer from the parent MetaModule, copy it
    if (incomingBuffer != nullptr && incomingBuffer->getNumSamples() > 0)
    {
        const int numChannelsToCopy = juce::jmin(buffer.getNumChannels(), incomingBuffer->getNumChannels());
        const int numSamplesToCopy = juce::jmin(buffer.getNumSamples(), incomingBuffer->getNumSamples());
        
        for (int ch = 0; ch < numChannelsToCopy; ++ch)
        {
            buffer.copyFrom(ch, 0, *incomingBuffer, ch, 0, numSamplesToCopy);
        }
        
        // Update output telemetry
        if (lastOutputValues.size() >= 2)
        {
            lastOutputValues[0]->store(buffer.getMagnitude(0, 0, buffer.getNumSamples()));
            if (buffer.getNumChannels() > 1)
                lastOutputValues[1]->store(buffer.getMagnitude(1, 0, buffer.getNumSamples()));
        }
    }
    else
    {
        // No incoming buffer - output silence
        buffer.clear();
    }
}

juce::ValueTree InletModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("InletState");
    vt.setProperty("customLabel", customLabel, nullptr);
    return vt;
}

void InletModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("InletState"))
    {
        customLabel = vt.getProperty("customLabel", "Inlet").toString();
    }
}

#if defined(PRESET_CREATOR_UI)
void InletModuleProcessor::drawParametersInNode(float itemWidth,
                                                const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated, onModificationEnded);
    
    auto& ap = getAPVTS();
    
    ImGui::PushItemWidth(itemWidth);
    
    // Label editor
    char labelBuf[64];
    strncpy(labelBuf, customLabel.toRawUTF8(), sizeof(labelBuf) - 1);
    labelBuf[sizeof(labelBuf) - 1] = '\0';
    
    if (ImGui::InputText("Label", labelBuf, sizeof(labelBuf)))
    {
        customLabel = juce::String(labelBuf);
    }
    
    // Channel count
    int channelCount = 2;
    if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
        channelCount = p->get();
    
    if (ImGui::SliderInt("Channels", &channelCount, 1, 16))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
            *p = channelCount;
    }
    
    ImGui::PopItemWidth();
}
#endif



================================================================================
FILE: juce\Source\audio\modules\InletModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

/**
    InletModuleProcessor - Acts as a signal inlet for Meta Modules
    
    This module has no inputs (inside the meta module) and provides outputs
    that represent signals coming from outside the meta module.
    
    From the outside perspective, the MetaModule will have input pins that
    correspond to these Inlet modules inside.
*/
class InletModuleProcessor : public ModuleProcessor
{
public:
    static constexpr auto paramIdLabel = "label";
    static constexpr auto paramIdChannelCount = "channelCount";
    
    InletModuleProcessor();
    ~InletModuleProcessor() override = default;

    const juce::String getName() const override { return "Inlet"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Store the buffer passed from the parent MetaModule
    void setIncomingBuffer(const juce::AudioBuffer<float>* buffer) { incomingBuffer = buffer; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth,
                              const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Inlets have no inputs, only outputs
        auto& ap = getAPVTS();
        int channelCount = 2;
        if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
            channelCount = p->get();
            
        for (int i = 0; i < channelCount; ++i)
            helpers.drawAudioOutputPin(juce::String("Out " + juce::String(i + 1)).toRawUTF8(), i);
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        return juce::String("Out ") + juce::String(channel + 1);
    }
#endif

    // Extra state for label
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    const juce::AudioBuffer<float>* incomingBuffer { nullptr };
    juce::String customLabel;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(InletModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\InputDebugModuleProcessor.cpp
================================================================================


#include "InputDebugModuleProcessor.h"
#include "../graph/ModularSynthProcessor.h"

static juce::AudioProcessorValueTreeState::ParameterLayout makeLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    // No parameters for now; could add per-pin enables later
    return { params.begin(), params.end() };
}

juce::AudioProcessorValueTreeState::ParameterLayout InputDebugModuleProcessor::createParameterLayout()
{
    return makeLayout();
}

InputDebugModuleProcessor::InputDebugModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput ("Tap In",  juce::AudioChannelSet::discreteChannels(8), true)
                        .withOutput("Tap Out", juce::AudioChannelSet::discreteChannels(8), true)),
      apvts(*this, nullptr, "InputDebugParams", createParameterLayout()),
      abstractFifo(4096)
{
    fifoBackingStore.resize(4096);
    for (auto& v : lastValues) v = 0.0f;
    for (auto& v : lastReportedValues) v = 0.0f;
}

void InputDebugModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(samplesPerBlock);
    currentSampleRate = (sampleRate > 0.0 ? sampleRate : 44100.0);
    totalSamplesProcessed = 0;
    droppedEvents.store(0, std::memory_order_relaxed);
}

void InputDebugModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto in  = getBusBuffer(buffer, true,  0);
    auto out = getBusBuffer(buffer, false, 0);
    const int numChannels = juce::jmin(in.getNumChannels(), out.getNumChannels());
    const int numSamples = buffer.getNumSamples();

    // Transparent pass-through
    for (int ch = 0; ch < numChannels; ++ch)
        out.copyFrom(ch, 0, in, ch, 0, numSamples);

    // Log changes with threshold + hysteresis
    for (int ch = 0; ch < numChannels; ++ch)
    {
        const float v = in.getMagnitude(ch, 0, numSamples);
        const float last = lastReportedValues[(size_t) ch];
        const float delta = std::abs(v - last);

        if (delta > CHANGE_THRESHOLD || (delta > HYSTERESIS && v != lastValues[(size_t) ch]))
        {
            int start1, size1, start2, size2;
            abstractFifo.prepareToWrite(1, start1, size1, start2, size2);
            if (size1 > 0)
            {
                fifoBackingStore[(size_t) start1] = InputDebugEvent{ totalSamplesProcessed, ch, v };
                abstractFifo.finishedWrite(1);
                lastReportedValues[(size_t) ch] = v;
            }
            else
            {
                droppedEvents.fetch_add(1, std::memory_order_relaxed);
            }
        }
        lastValues[(size_t) ch] = v;
    }

    totalSamplesProcessed += (juce::uint64) numSamples;
}

#if defined(PRESET_CREATOR_UI)
void InputDebugModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)> & /*isParamModulated*/, const std::function<void()> & /*onModificationEnded*/)
{
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::Checkbox("Pause", &isPaused)) {}
    ImGui::SameLine(); ImGui::Text("Dropped: %u", droppedEvents.load());

    if (ImGui::Button("Copy CSV"))
    {
        juce::String csv;
        csv << "time_seconds,src_logical_id,src_module,src_channel,src_label,src_value,tap_module,tap_input,tap_output,dst_logical_id,dst_module,dst_channel,dst_label,tap_value,delta\n";

        auto* synth = getParent();
        juce::uint32 selfLid = 0;
        std::map<juce::uint32, juce::String> lidToType;
        if (synth != nullptr)
        {
            for (const auto& p : synth->getModulesInfo())
            {
                lidToType[p.first] = p.second;
                if (synth->getModuleForLogical(p.first) == this) selfLid = p.first;
            }
        }

        // Build upstream/downstream maps for each tap channel
        std::array<std::vector<std::pair<juce::uint32,int>>, 8> upstream;   // for each ch, sources feeding Tap In ch
        std::array<std::vector<std::pair<juce::uint32,int>>, 8> downstream; // for each ch, destinations fed by Tap Out ch
        if (synth != nullptr && selfLid != 0)
        {
            for (const auto& c : synth->getConnectionsInfo())
            {
                if (!c.dstIsOutput && c.dstLogicalId == selfLid)
                    upstream[(size_t) c.dstChan].push_back({ c.srcLogicalId, c.srcChan });
                if (c.srcLogicalId == selfLid)
                    downstream[(size_t) c.srcChan].push_back({ c.dstLogicalId, c.dstChan });
            }
        }

        auto outLabelFor = [&](juce::uint32 lid, int ch) -> juce::String
        {
            if (synth == nullptr || lid == 0) return {};
            if (auto* mp = synth->getModuleForLogical(lid)) return mp->getAudioOutputLabel(ch);
            return {};
        };
        auto inLabelFor = [&](juce::uint32 lid, int ch) -> juce::String
        {
            if (synth == nullptr || lid == 0) return {};
            if (auto* mp = synth->getModuleForLogical(lid)) return mp->getAudioInputLabel(ch);
            return {};
        };

        for (const auto& ev : displayedEvents)
        {
            const double tSec = (currentSampleRate > 0.0 ? (double) ev.sampleCounter / currentSampleRate : 0.0);
            const int ch = ev.pinIndex;
            const juce::String tapInLabel = getAudioInputLabel(ch);
            const juce::String tapOutLabel = getAudioOutputLabel(ch);

            if (synth != nullptr && selfLid != 0)
            {
                if (!upstream[(size_t) ch].empty())
                {
                    for (const auto& src : upstream[(size_t) ch])
                    {
                        const juce::String srcType = lidToType.count(src.first) ? lidToType[src.first] : juce::String("<unknown>");
                        const juce::String srcLabel = outLabelFor(src.first, src.second);
                        float srcVal = 0.0f; if (auto* srcMp = synth->getModuleForLogical(src.first)) srcVal = srcMp->getOutputChannelValue(src.second);
                        const float tapVal = ev.value;
                        const float delta = tapVal - srcVal;
                        if (!downstream[(size_t) ch].empty())
                        {
                            for (const auto& dst : downstream[(size_t) ch])
                            {
                                const juce::String dstType = lidToType.count(dst.first) ? lidToType[dst.first] : juce::String("<unknown>");
                                const juce::String dstLabel = inLabelFor(dst.first, dst.second);
                                csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcType << "," << juce::String(src.second) << "," << srcLabel << "," << juce::String(srcVal, 6)
                                    << ",Input Debug," << tapInLabel << "," << tapOutLabel << "," << juce::String((int) dst.first) << "," << dstType << "," << juce::String(dst.second) << "," << dstLabel << "," << juce::String(tapVal, 6) << "," << juce::String(delta, 6) << "\n";
                            }
                        }
                        else
                        {
                            csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcType << "," << juce::String(src.second) << "," << srcLabel << "," << juce::String(srcVal, 6)
                                << ",Input Debug," << tapInLabel << "," << tapOutLabel << ",,,,," << juce::String(tapVal, 6) << "," << juce::String(tapVal - srcVal, 6) << "\n";
                        }
                    }
                }
                else
                {
                    // No upstream
                    if (!downstream[(size_t) ch].empty())
                    {
                        for (const auto& dst : downstream[(size_t) ch])
                        {
                            const juce::String dstType = lidToType.count(dst.first) ? lidToType[dst.first] : juce::String("<unknown>");
                            const juce::String dstLabel = inLabelFor(dst.first, dst.second);
                            csv << juce::String(tSec, 6) << ",,,,,,Input Debug," << tapInLabel << "," << tapOutLabel << "," << juce::String((int) dst.first) << "," << dstType << "," << juce::String(dst.second) << "," << dstLabel << "," << juce::String(ev.value, 6) << "," << juce::String() << "\n";
                        }
                    }
                    else
                    {
                        csv << juce::String(tSec, 6) << ",,,,,,Input Debug," << tapInLabel << "," << tapOutLabel << ",,,," << juce::String(ev.value, 6) << "," << juce::String() << "\n";
                    }
                }
            }
        }

        std::string utf8 = csv.toStdString();
        ImGui::SetClipboardText(utf8.c_str());
    }
    ImGui::SameLine();
    if (ImGui::Button("Export CSV"))
    {
        juce::File dir = juce::File::getSpecialLocation(juce::File::userDocumentsDirectory).getChildFile("ColliderDebugLogs");
        if (!dir.exists()) (void) dir.createDirectory();
        juce::File file = dir.getNonexistentChildFile("input_debug_log", ".csv");
        juce::FileOutputStream out(file);
        if (out.openedOk())
        {
            juce::String csv;
            csv << "time_seconds,src_logical_id,src_module,src_channel,src_label,src_value,tap_module,tap_input,tap_output,dst_logical_id,dst_module,dst_channel,dst_label,tap_value,delta\n";

            auto* synth = getParent();
            juce::uint32 selfLid = 0;
            std::map<juce::uint32, juce::String> lidToType;
            if (synth != nullptr)
            {
                for (const auto& p : synth->getModulesInfo())
                {
                    lidToType[p.first] = p.second;
                    if (synth->getModuleForLogical(p.first) == this) selfLid = p.first;
                }
            }

            std::array<std::vector<std::pair<juce::uint32,int>>, 8> upstream;
            std::array<std::vector<std::pair<juce::uint32,int>>, 8> downstream;
            if (synth != nullptr && selfLid != 0)
            {
                for (const auto& c : synth->getConnectionsInfo())
                {
                    if (!c.dstIsOutput && c.dstLogicalId == selfLid)
                        upstream[(size_t) c.dstChan].push_back({ c.srcLogicalId, c.srcChan });
                    if (c.srcLogicalId == selfLid)
                        downstream[(size_t) c.srcChan].push_back({ c.dstLogicalId, c.dstChan });
                }
            }

            auto outLabelFor = [&](juce::uint32 lid, int ch) -> juce::String
            {
                if (synth == nullptr || lid == 0) return {};
                if (auto* mp = synth->getModuleForLogical(lid)) return mp->getAudioOutputLabel(ch);
                return {};
            };
            auto inLabelFor = [&](juce::uint32 lid, int ch) -> juce::String
            {
                if (synth == nullptr || lid == 0) return {};
                if (auto* mp = synth->getModuleForLogical(lid)) return mp->getAudioInputLabel(ch);
                return {};
            };

            for (const auto& ev : displayedEvents)
            {
                const double tSec = (currentSampleRate > 0.0 ? (double) ev.sampleCounter / currentSampleRate : 0.0);
                const int ch = ev.pinIndex;
                const juce::String tapInLabel = getAudioInputLabel(ch);
                const juce::String tapOutLabel = getAudioOutputLabel(ch);

                if (synth != nullptr && selfLid != 0)
                {
                    if (!upstream[(size_t) ch].empty())
                    {
                        for (const auto& src : upstream[(size_t) ch])
                        {
                            const juce::String srcType = lidToType.count(src.first) ? lidToType[src.first] : juce::String("<unknown>");
                            const juce::String srcLabel = outLabelFor(src.first, src.second);
                            float srcVal = 0.0f; if (auto* srcMp = synth->getModuleForLogical(src.first)) srcVal = srcMp->getOutputChannelValue(src.second);
                            const float tapVal = ev.value;
                            const float delta = tapVal - srcVal;
                            if (!downstream[(size_t) ch].empty())
                            {
                                for (const auto& dst : downstream[(size_t) ch])
                                {
                                    const juce::String dstType = lidToType.count(dst.first) ? lidToType[dst.first] : juce::String("<unknown>");
                                    const juce::String dstLabel = inLabelFor(dst.first, dst.second);
                                    csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcType << "," << juce::String(src.second) << "," << srcLabel << "," << juce::String(srcVal, 6)
                                        << ",Input Debug," << tapInLabel << "," << tapOutLabel << "," << juce::String((int) dst.first) << "," << dstType << "," << juce::String(dst.second) << "," << dstLabel << "," << juce::String(tapVal, 6) << "," << juce::String(delta, 6) << "\n";
                                }
                            }
                            else
                            {
                                csv << juce::String(tSec, 6) << "," << juce::String((int) src.first) << "," << srcType << "," << juce::String(src.second) << "," << srcLabel << "," << juce::String(srcVal, 6)
                                    << ",Input Debug," << tapInLabel << "," << tapOutLabel << ",,,,," << juce::String(tapVal, 6) << "," << juce::String(tapVal - srcVal, 6) << "\n";
                            }
                        }
                    }
                    else
                    {
                        if (!downstream[(size_t) ch].empty())
                        {
                            for (const auto& dst : downstream[(size_t) ch])
                            {
                                const juce::String dstType = lidToType.count(dst.first) ? lidToType[dst.first] : juce::String("<unknown>");
                                const juce::String dstLabel = inLabelFor(dst.first, dst.second);
                                csv << juce::String(tSec, 6) << ",,,,,,Input Debug," << tapInLabel << "," << tapOutLabel << "," << juce::String((int) dst.first) << "," << dstType << "," << juce::String(dst.second) << "," << dstLabel << "," << juce::String(ev.value, 6) << "," << juce::String() << "\n";
                            }
                        }
                        else
                        {
                            csv << juce::String(tSec, 6) << ",,,,,,Input Debug," << tapInLabel << "," << tapOutLabel << ",,,," << juce::String(ev.value, 6) << "," << juce::String() << "\n";
                        }
                    }
                }
            }

            out.writeText(csv, false, false, "\n");
            out.flush();
        }
    }
    ImGui::PopItemWidth();

    // Drain FIFO into displayedEvents
    int available = abstractFifo.getNumReady();
    while (available > 0)
    {
        int start1, size1, start2, size2;
        abstractFifo.prepareToRead(available, start1, size1, start2, size2);
        auto consume = [&](int start, int size)
        {
            for (int i = 0; i < size; ++i)
            {
                const auto& ev = fifoBackingStore[(size_t) (start + i)];
                if (!isPaused)
                    displayedEvents.push_back(ev);
            }
        };
        if (size1 > 0) consume(start1, size1);
        if (size2 > 0) consume(start2, size2);
        abstractFifo.finishedRead(size1 + size2);
        available -= (size1 + size2);
    }

    if (displayedEvents.size() > MAX_DISPLAYED_EVENTS)
        displayedEvents.erase(displayedEvents.begin(), displayedEvents.begin() + (displayedEvents.size() - MAX_DISPLAYED_EVENTS));
}

void InputDebugModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // 8-channel pass-through
    for (int ch = 0; ch < 8; ++ch)
    {
        helpers.drawAudioInputPin((juce::String("Tap In ") + juce::String(ch + 1)).toRawUTF8(), ch);
    }
    for (int ch = 0; ch < 8; ++ch)
    {
        helpers.drawAudioOutputPin((juce::String("Tap Out ") + juce::String(ch + 1)).toRawUTF8(), ch);
    }
}
#endif




================================================================================
FILE: juce\Source\audio\modules\InputDebugModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_core/juce_core.h>
#include <array>
#include <vector>
#include <atomic>

struct InputDebugEvent
{
    juce::uint64 sampleCounter; // Sample-accurate timestamp
    int pinIndex;               // Which input pin (0-indexed)
    float value;                // The signal's value (magnitude)
};

class InputDebugModuleProcessor : public ModuleProcessor
{
public:
    InputDebugModuleProcessor();
    ~InputDebugModuleProcessor() override = default;

    const juce::String getName() const override { return "input debug"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    // Labels for pins for Debug CSV enrichment
    juce::String getAudioInputLabel(int channel) const override
    {
        return juce::String("Tap In ") + juce::String(channel + 1);
    }
    juce::String getAudioOutputLabel(int channel) const override
    {
        return juce::String("Tap Out ") + juce::String(channel + 1);
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    // --- Thread-safe communication ---
    juce::AbstractFifo abstractFifo;
    std::vector<InputDebugEvent> fifoBackingStore;
    std::atomic<uint32_t> droppedEvents { 0 };

    // --- State for the audio thread ---
    double currentSampleRate { 44100.0 };
    juce::uint64 totalSamplesProcessed { 0 };
    std::array<float, 8> lastValues{};          // Last measured per input
    std::array<float, 8> lastReportedValues{};  // Last reported/logged
    static constexpr float CHANGE_THRESHOLD = 0.001f;
    static constexpr float HYSTERESIS = 0.0001f;

    // --- State for the UI thread ---
    std::vector<InputDebugEvent> displayedEvents;
    static constexpr size_t MAX_DISPLAYED_EVENTS = 500;
    bool isPaused { false };
};




================================================================================
FILE: juce\Source\audio\modules\LagProcessorModuleProcessor.cpp
================================================================================


#include "LagProcessorModuleProcessor.h"

LagProcessorModuleProcessor::LagProcessorModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Signal In", juce::AudioChannelSet::mono(), true)
                        .withInput ("Rise Mod", juce::AudioChannelSet::mono(), true)
                        .withInput ("Fall Mod", juce::AudioChannelSet::mono(), true)
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts (*this, nullptr, "LagProcessorParams", createParameterLayout())
{
    riseTimeParam = apvts.getRawParameterValue("rise_time");
    fallTimeParam = apvts.getRawParameterValue("fall_time");
    modeParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("mode"));
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout LagProcessorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    // Rise time: 0.1ms to 4000ms (logarithmic)
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rise_time", "Rise Time",
        juce::NormalisableRange<float>(0.1f, 4000.0f, 0.0f, 0.3f),
        10.0f));
    
    // Fall time: 0.1ms to 4000ms (logarithmic)
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "fall_time", "Fall Time",
        juce::NormalisableRange<float>(0.1f, 4000.0f, 0.0f, 0.3f),
        10.0f));
    
    // Mode: Slew Limiter or Envelope Follower
    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        "mode", "Mode",
        juce::StringArray{"Slew Limiter", "Envelope Follower"},
        0));
    
    return { params.begin(), params.end() };
}

void LagProcessorModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(samplesPerBlock);
    currentSampleRate = sampleRate;
    currentOutput = 0.0f;
}

void LagProcessorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto signalIn = getBusBuffer(buffer, true, 0);
    auto riseModIn = getBusBuffer(buffer, true, 1);
    auto fallModIn = getBusBuffer(buffer, true, 2);
    auto out = getBusBuffer(buffer, false, 0);
    
    const int nSamps = buffer.getNumSamples();
    
    // Get base parameter values
    float baseRiseMs = riseTimeParam != nullptr ? riseTimeParam->load() : 10.0f;
    float baseFallMs = fallTimeParam != nullptr ? fallTimeParam->load() : 10.0f;
    const int mode = modeParam != nullptr ? modeParam->getIndex() : 0;
    
    // Check for modulation
    const bool isRiseModulated = isParamInputConnected("rise_time_mod");
    const bool isFallModulated = isParamInputConnected("fall_time_mod");
    
    const float* riseModSignal = isRiseModulated ? riseModIn.getReadPointer(0) : nullptr;
    const float* fallModSignal = isFallModulated ? fallModIn.getReadPointer(0) : nullptr;
    
    const float* input = signalIn.getReadPointer(0);
    float* output = out.getWritePointer(0);
    
    for (int i = 0; i < nSamps; ++i)
    {
        // Get modulated rise/fall times if connected
        float riseMs = baseRiseMs;
        float fallMs = baseFallMs;
        
        if (isRiseModulated && riseModSignal) {
            // Map CV (0..1) to time range (0.1..4000ms) logarithmically
            riseMs = 0.1f * std::pow(40000.0f, riseModSignal[i]);
            riseMs = juce::jlimit(0.1f, 4000.0f, riseMs);
        }
        
        if (isFallModulated && fallModSignal) {
            fallMs = 0.1f * std::pow(40000.0f, fallModSignal[i]);
            fallMs = juce::jlimit(0.1f, 4000.0f, fallMs);
        }
        
        // Update telemetry (throttled)
        if ((i & 0x3F) == 0) {
            setLiveParamValue("rise_time_live", riseMs);
            setLiveParamValue("fall_time_live", fallMs);
        }
        
        // Calculate smoothing coefficients
        // Formula: coeff = 1.0 - exp(-1.0 / (time_in_seconds * sampleRate))
        float riseCoeff = 1.0f - std::exp(-1.0f / (riseMs * 0.001f * static_cast<float>(currentSampleRate)));
        float fallCoeff = 1.0f - std::exp(-1.0f / (fallMs * 0.001f * static_cast<float>(currentSampleRate)));
        
        // Get target value based on mode
        float inputSample = input[i];
        float targetValue = inputSample;
        
        if (mode == 1) // Envelope Follower
        {
            // Rectify the signal to extract amplitude envelope
            targetValue = std::abs(inputSample);
        }
        
        // Apply smoothing
        if (targetValue > currentOutput) // Rising
        {
            currentOutput += (targetValue - currentOutput) * riseCoeff;
        }
        else // Falling
        {
            currentOutput += (targetValue - currentOutput) * fallCoeff;
        }
        
        output[i] = currentOutput;
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 1 && lastOutputValues[0]) {
        lastOutputValues[0]->store(currentOutput);
    }
}

#if defined(PRESET_CREATOR_UI)
bool LagProcessorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "rise_time_mod")
    {
        outBusIndex = 1; // "Rise Mod" is Bus 1
        outChannelIndexInBus = 0;
        return true;
    }
    else if (paramId == "fall_time_mod")
    {
        outBusIndex = 2; // "Fall Mod" is Bus 2
        outChannelIndexInBus = 0;
        return true;
    }
    return false;
}
#endif



================================================================================
FILE: juce\Source\audio\modules\LagProcessorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class LagProcessorModuleProcessor : public ModuleProcessor
{
public:
    LagProcessorModuleProcessor();
    ~LagProcessorModuleProcessor() override = default;

    const juce::String getName() const override { return "lag processor"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        // Get current parameter values
        float riseMs = riseTimeParam != nullptr ? riseTimeParam->load() : 10.0f;
        float fallMs = fallTimeParam != nullptr ? fallTimeParam->load() : 10.0f;
        int modeIdx = modeParam != nullptr ? modeParam->getIndex() : 0;
        
        // Check for modulation
        bool isRiseModulated = isParamModulated("rise_time_mod");
        bool isFallModulated = isParamModulated("fall_time_mod");
        
        if (isRiseModulated) {
            riseMs = getLiveParamValueFor("rise_time_mod", "rise_time_live", riseMs);
        }
        if (isFallModulated) {
            fallMs = getLiveParamValueFor("fall_time_mod", "fall_time_live", fallMs);
        }
        
        ImGui::PushItemWidth(itemWidth);
        
        // Mode selector
        const char* modeNames[] = { "Slew Limiter", "Envelope Follower" };
        if (ImGui::Combo("Mode", &modeIdx, modeNames, 2)) {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("mode"))) {
                *p = modeIdx;
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        // Rise Time (or Attack in Envelope Follower mode)
        const char* riseLabel = (modeIdx == 0) ? "Rise Time (ms)" : "Attack (ms)";
        if (isRiseModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(riseLabel, &riseMs, 0.1f, 4000.0f, "%.2f", ImGuiSliderFlags_Logarithmic)) {
            if (!isRiseModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("rise_time"))) *p = riseMs;
            }
        }
        if (!isRiseModulated) adjustParamOnWheel(ap.getParameter("rise_time"), "rise_time", riseMs);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isRiseModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        // Fall Time (or Release in Envelope Follower mode)
        const char* fallLabel = (modeIdx == 0) ? "Fall Time (ms)" : "Release (ms)";
        if (isFallModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(fallLabel, &fallMs, 0.1f, 4000.0f, "%.2f", ImGuiSliderFlags_Logarithmic)) {
            if (!isFallModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("fall_time"))) *p = fallMs;
            }
        }
        if (!isFallModulated) adjustParamOnWheel(ap.getParameter("fall_time"), "fall_time", fallMs);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isFallModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("Signal In", 0);
        helpers.drawAudioInputPin("Rise Mod", 1);
        helpers.drawAudioInputPin("Fall Mod", 2);
        helpers.drawAudioOutputPin("Smoothed Out", 0);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Signal In";
            case 1: return "Rise Mod";
            case 2: return "Fall Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        if (channel == 0) return "Smoothed Out";
        return juce::String("Out ") + juce::String(channel + 1);
    }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* riseTimeParam { nullptr };  // milliseconds
    std::atomic<float>* fallTimeParam { nullptr };  // milliseconds
    juce::AudioParameterChoice* modeParam { nullptr };
    
    // State variables for smoothing algorithm
    float currentOutput { 0.0f };
    double currentSampleRate { 44100.0 };
};



================================================================================
FILE: juce\Source\audio\modules\LFOModuleProcessor.cpp
================================================================================


#include "LFOModuleProcessor.h"

LFOModuleProcessor::LFOModuleProcessor()
    // CORRECTED: Use a single input bus with 3 discrete channels
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // ch0:Rate, ch1:Depth, ch2:Wave
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "LFOParams", createParameterLayout())
{
    rateParam = apvts.getRawParameterValue(paramIdRate);
    depthParam = apvts.getRawParameterValue(paramIdDepth);
    bipolarParam = apvts.getRawParameterValue(paramIdBipolar);
    waveParam = apvts.getRawParameterValue(paramIdWave);
    syncParam = apvts.getRawParameterValue(paramIdSync);
    rateDivisionParam = apvts.getRawParameterValue(paramIdRateDivision);
    
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    
    osc.initialise([](float x) { return std::sin(x); }, 128);
}

juce::AudioProcessorValueTreeState::ParameterLayout LFOModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRate, "Rate", juce::NormalisableRange<float>(0.05f, 20.0f, 0.01f, 0.3f), 1.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDepth, "Depth", juce::NormalisableRange<float>(0.0f, 1.0f), 0.5f));
    p.push_back(std::make_unique<juce::AudioParameterBool>(paramIdBipolar, "Bipolar", true));
    p.push_back(std::make_unique<juce::AudioParameterChoice>(paramIdWave, "Wave", juce::StringArray{ "Sine", "Tri", "Saw" }, 0));
    p.push_back(std::make_unique<juce::AudioParameterBool>(paramIdSync, "Sync", false));
    p.push_back(std::make_unique<juce::AudioParameterChoice>(paramIdRateDivision, "Division", 
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3)); // Default: 1/4 note
    return { p.begin(), p.end() };
}

void LFOModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec{ sampleRate, (juce::uint32)samplesPerBlock, 2 };
    osc.prepare(spec);
}

void LFOModuleProcessor::setTimingInfo(const TransportState& state)
{
    m_currentTransport = state;
}

void LFOModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto out = getBusBuffer(buffer, false, 0);

    // CORRECTED: All inputs are on a single bus at index 0
    auto inBus = getBusBuffer(buffer, true, 0);
    
    // CORRECTED: Use the _mod IDs to check for connections
    const bool isRateMod = isParamInputConnected(paramIdRateMod);
    const bool isDepthMod = isParamInputConnected(paramIdDepthMod);
    const bool isWaveMod = isParamInputConnected(paramIdWaveMod);

    // CORRECTED: Read CVs from the correct channels on the single input bus
    const float* rateCV = isRateMod && inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* depthCV = isDepthMod && inBus.getNumChannels() > 1 ? inBus.getReadPointer(1) : nullptr;
    const float* waveCV = isWaveMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;

    const float baseRate = rateParam->load();
    const float baseDepth = depthParam->load();
    const int baseWave = static_cast<int>(waveParam->load());
    const bool bipolar = bipolarParam->load() > 0.5f;
    const bool syncEnabled = syncParam->load() > 0.5f;
    int rateDivisionIndex = static_cast<int>(rateDivisionParam->load());
    // If a global division is broadcast by a master clock, adopt it when sync is enabled
    if (syncEnabled && m_currentTransport.globalDivisionIndex >= 0)
        rateDivisionIndex = m_currentTransport.globalDivisionIndex;

    // Rate division map: 1/32, 1/16, 1/8, 1/4, 1/2, 1, 2, 4, 8
    static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
    const double beatDivision = divisions[juce::jlimit(0, 8, rateDivisionIndex)];

    float lastRate = baseRate, lastDepth = baseDepth;
    int lastWave = baseWave;

    for (int i = 0; i < out.getNumSamples(); ++i)
    {
        float finalRate = baseRate;
        if (isRateMod && rateCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            finalRate = baseRate * std::pow(4.0f, cv - 0.5f); // Modulate by +/- 2 octaves
        }
        
        float depth = baseDepth;
        if (isDepthMod && depthCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, depthCV[i]);
            depth = juce::jlimit(0.0f, 1.0f, baseDepth + (cv - 0.5f)); // Additive modulation
        }
        
        int w = baseWave;
        if (isWaveMod && waveCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, waveCV[i]);
            w = static_cast<int>(cv * 2.99f); // Absolute control
        }

        lastRate = finalRate;
        lastDepth = depth;
        lastWave = w;
        
        if (currentWaveform != w) {
            if (w == 0)      osc.initialise ([](float x){ return std::sin(x); }, 128);
            else if (w == 1) osc.initialise ([](float x){ return 2.0f / juce::MathConstants<float>::pi * std::asin(std::sin(x)); }, 128);
            else             osc.initialise ([](float x){ return (x / juce::MathConstants<float>::pi); }, 128);
            currentWaveform = w;
        }
        
        float lfoSample = 0.0f;
        
        if (syncEnabled && m_currentTransport.isPlaying)
        {
            // Transport-synced mode: calculate phase directly from song position
            double phase = std::fmod(m_currentTransport.songPositionBeats * beatDivision, 1.0);
            double phaseRadians = phase * juce::MathConstants<double>::twoPi;
            
            // Generate waveform based on phase
            if (w == 0) // Sine
                lfoSample = std::sin(phaseRadians);
            else if (w == 1) // Triangle
                lfoSample = 2.0f / juce::MathConstants<float>::pi * std::asin(std::sin(phaseRadians));
            else // Saw
                lfoSample = (phaseRadians / juce::MathConstants<float>::pi);
        }
        else
        {
            // Free-running mode: use internal oscillator
            osc.setFrequency(finalRate);
            lfoSample = osc.processSample(0.0f);
        }
        
        const float finalSample = (bipolar ? lfoSample : (lfoSample * 0.5f + 0.5f)) * depth;

        out.setSample(0, i, finalSample);
    }
    
    // Update inspector values
    updateOutputTelemetry(out);

    // Store live modulated values for UI display
    setLiveParamValue("rate_live", lastRate);
    setLiveParamValue("depth_live", lastDepth);
    setLiveParamValue("wave_live", (float)lastWave);
}

// CORRECTED: Clean, unambiguous routing for a single multi-channel input bus
bool LFOModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus.
    if (paramId == paramIdRateMod) { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdDepthMod) { outChannelIndexInBus = 1; return true; }
    if (paramId == paramIdWaveMod) { outChannelIndexInBus = 2; return true; }
    return false;
}

#if defined(PRESET_CREATOR_UI)

void LFOModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    
    bool isRateModulated = isParamInputConnected(paramIdRateMod);
    bool isDepthModulated = isParamInputConnected(paramIdDepthMod);
    bool isWaveModulated = isParamInputConnected(paramIdWaveMod);
    
    float rate = isRateModulated ? getLiveParamValueFor(paramIdRateMod, "rate_live", rateParam->load()) : rateParam->load();
    float depth = isDepthModulated ? getLiveParamValueFor(paramIdDepthMod, "depth_live", depthParam->load()) : depthParam->load();
    int wave = isWaveModulated ? (int)getLiveParamValueFor(paramIdWaveMod, "wave_live", (float)static_cast<int>(waveParam->load())) : static_cast<int>(waveParam->load());
    bool bipolar = bipolarParam->load() > 0.5f;
    
    ImGui::PushItemWidth(itemWidth);

    if (isRateModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Rate", &rate, 0.05f, 20.0f, "%.2f Hz", ImGuiSliderFlags_Logarithmic)) if (!isRateModulated) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRate)) = rate;
    if (ImGui::IsItemDeactivatedAfterEdit() && !isRateModulated) onModificationEnded();
    if (isRateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    if (isDepthModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Depth", &depth, 0.0f, 1.0f)) if (!isDepthModulated) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDepth)) = depth;
    if (ImGui::IsItemDeactivatedAfterEdit() && !isDepthModulated) onModificationEnded();
    if (isDepthModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (isWaveModulated) ImGui::BeginDisabled();
    if (ImGui::Combo("Wave", &wave, "Sine\0Tri\0Saw\0\0")) if (!isWaveModulated) *dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWave)) = wave;
    if (ImGui::IsItemDeactivatedAfterEdit() && !isWaveModulated) onModificationEnded();
    if (isWaveModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (ImGui::Checkbox("Bipolar", &bipolar)) *dynamic_cast<juce::AudioParameterBool*>(ap.getParameter(paramIdBipolar)) = bipolar;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();

    // Transport sync controls
    bool sync = syncParam->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync)) *dynamic_cast<juce::AudioParameterBool*>(ap.getParameter(paramIdSync)) = sync;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    
    if (sync)
    {
        int division = static_cast<int>(rateDivisionParam->load());
        const char* items[] = { "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" };
        if (ImGui::Combo("Division", &division, items, (int)(sizeof(items)/sizeof(items[0]))))
            *dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdRateDivision)) = division;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    }

    ImGui::PopItemWidth();
}

void LFOModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Rate Mod", 0);
    helpers.drawAudioInputPin("Depth Mod", 1);
    helpers.drawAudioInputPin("Wave Mod", 2);
    helpers.drawAudioOutputPin("Out", 0);
}

juce::String LFOModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Rate Mod";
        case 1: return "Depth Mod";
        case 2: return "Wave Mod";
        default: return {};
    }
}

juce::String LFOModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out";
        default: return {};
    }
}
#endif

================================================================================
FILE: juce\Source\audio\modules\LFOModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class LFOModuleProcessor : public ModuleProcessor
{
public:
    // Parameter ID constants
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdDepth = "depth";
    static constexpr auto paramIdWave = "wave";
    static constexpr auto paramIdBipolar = "bipolar";
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdDepthMod = "depth_mod";
    static constexpr auto paramIdWaveMod = "wave_mod";
    static constexpr auto paramIdSync = "sync";
    static constexpr auto paramIdRateDivision = "rate_division";

    LFOModuleProcessor();
    ~LFOModuleProcessor() override = default;

    const juce::String getName() const override { return "lfo"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    // Transport sync support
    void setTimingInfo(const TransportState& state) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Oscillator<float> osc;
    
    // Cached parameter pointers
    std::atomic<float>* rateParam{ nullptr };
    std::atomic<float>* depthParam{ nullptr };
    std::atomic<float>* bipolarParam{ nullptr };
    std::atomic<float>* waveParam{ nullptr };
    std::atomic<float>* syncParam{ nullptr };
    std::atomic<float>* rateDivisionParam{ nullptr };
    
    int currentWaveform = -1;
    TransportState m_currentTransport;
};

================================================================================
FILE: juce\Source\audio\modules\LimiterModuleProcessor.cpp
================================================================================


#include "LimiterModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout LimiterModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdThreshold, "Threshold", -20.0f, 0.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRelease, "Release", 1.0f, 200.0f, 10.0f));
    
    return { params.begin(), params.end() };
}

LimiterModuleProcessor::LimiterModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(4), true) // 0-1: Audio In, 2: Threshold Mod, 3: Release Mod
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "LimiterParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue(paramIdThreshold);
    releaseParam = apvts.getRawParameterValue(paramIdRelease);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void LimiterModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2;

    limiter.prepare(spec);
    limiter.reset();
}

void LimiterModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    // Copy input to output for in-place processing
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }

    // --- Update DSP Parameters from unified input bus (once per block) ---
    float finalThreshold = thresholdParam->load();
    if (isParamInputConnected(paramIdThresholdMod) && inBus.getNumChannels() > 2)
        finalThreshold = juce::jmap(inBus.getSample(2, 0), 0.0f, 1.0f, -20.0f, 0.0f);
        
    float finalRelease = releaseParam->load();
    if (isParamInputConnected(paramIdReleaseMod) && inBus.getNumChannels() > 3)
        finalRelease = juce::jmap(inBus.getSample(3, 0), 0.0f, 1.0f, 1.0f, 200.0f);

    limiter.setThreshold(finalThreshold);
    limiter.setRelease(finalRelease);
    
    // --- Process the Audio ---
    juce::dsp::AudioBlock<float> block(outBus);
    juce::dsp::ProcessContextReplacing<float> context(block);
    limiter.process(context);

    // --- Update UI Telemetry & Tooltips ---
    setLiveParamValue("threshold_live", finalThreshold);
    setLiveParamValue("release_live", finalRelease);
    
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool LimiterModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdThresholdMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdReleaseMod)   { outChannelIndexInBus = 3; return true; }
    return false;
}

juce::String LimiterModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    if (channel == 2) return "Thresh Mod";
    if (channel == 3) return "Release Mod";
    return {};
}

juce::String LimiterModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void LimiterModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, const juce::String& modId, float min, float max, const char* format) {
        bool isMod = isParamModulated(modId);
        float value = isMod ? getLiveParamValueFor(modId, paramId + "_live", ap.getRawParameterValue(paramId)->load())
                            : ap.getRawParameterValue(paramId)->load();
        
        if (isMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(label, &value, min, max, format))
            if (!isMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        if (!isMod) adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    };

    drawSlider("Threshold", paramIdThreshold, paramIdThresholdMod, -20.0f, 0.0f, "%.1f dB");
    drawSlider("Release", paramIdRelease, paramIdReleaseMod, 1.0f, 200.0f, "%.0f ms");

    ImGui::PopItemWidth();
}

void LimiterModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Thresh Mod", 2);
    helpers.drawAudioInputPin("Release Mod", 3);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\LimiterModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class LimiterModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdThreshold = "threshold";
    static constexpr auto paramIdRelease = "release";

    // Virtual IDs for modulation inputs
    static constexpr auto paramIdThresholdMod = "threshold_mod";
    static constexpr auto paramIdReleaseMod = "release_mod";

    LimiterModuleProcessor();
    ~LimiterModuleProcessor() override = default;

    const juce::String getName() const override { return "limiter"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // The core JUCE DSP Limiter object
    juce::dsp::Limiter<float> limiter;

    // Cached atomic pointers to parameters
    std::atomic<float>* thresholdParam { nullptr };
    std::atomic<float>* releaseParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\LogicModuleProcessor.cpp
================================================================================


#include "LogicModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout LogicModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    // Operation selector: 0=AND, 1=OR, 2=XOR, 3=NOT A
    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        "operation", "Operation", juce::StringArray({"AND", "OR", "XOR", "NOT A"}), 0));

    // Gate threshold for interpreting gates
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gateThreshold", "Gate Threshold", juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f), 0.5f));

    return {params.begin(), params.end()};
}

LogicModuleProcessor::LogicModuleProcessor()
    : ModuleProcessor(BusesProperties()
                          .withInput("In A", juce::AudioChannelSet::mono(), true)
                          .withInput("In B", juce::AudioChannelSet::mono(), true)
                          .withOutput("AND", juce::AudioChannelSet::mono(), true)
                          .withOutput("OR", juce::AudioChannelSet::mono(), true)
                          .withOutput("XOR", juce::AudioChannelSet::mono(), true)
                          .withOutput("NOT A", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "LogicParams", createParameterLayout())
{
    operationParam = apvts.getRawParameterValue("operation");
    gateThresholdParam = apvts.getRawParameterValue("gateThreshold");
    
    // Initialize lastOutputValues for cable inspector (4 outputs)
    for (int i = 0; i < 4; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void LogicModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void LogicModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto inA = getBusBuffer(buffer, true, 0);  // Input A
    auto inB = getBusBuffer(buffer, true, 1);  // Input B
    auto outAND = getBusBuffer(buffer, false, 0);  // AND output
    auto outOR = getBusBuffer(buffer, false, 1);   // OR output
    auto outXOR = getBusBuffer(buffer, false, 2);  // XOR output
    auto outNOTA = getBusBuffer(buffer, false, 3); // NOT A output

    const int numSamples = buffer.getNumSamples();
    const float gateThresh = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
    const float* aData = inA.getReadPointer(0);
    const float* bData = inB.getReadPointer(0);

    float* andData = outAND.getWritePointer(0);
    float* orData = outOR.getWritePointer(0);
    float* xorData = outXOR.getWritePointer(0);
    float* notAData = outNOTA.getWritePointer(0);

    // Process each sample
    for (int i = 0; i < numSamples; ++i)
    {
        const float a = aData[i] > gateThresh ? 1.0f : 0.0f;  // Gate threshold
        const float b = bData[i] > gateThresh ? 1.0f : 0.0f;  // Gate threshold

        // Perform all logical operations
        andData[i] = (a > 0.5f && b > 0.5f) ? 1.0f : 0.0f;   // A AND B
        orData[i] = (a > 0.5f || b > 0.5f) ? 1.0f : 0.0f;    // A OR B
        xorData[i] = ((a > 0.5f) != (b > 0.5f)) ? 1.0f : 0.0f; // A XOR B
        notAData[i] = (a > 0.5f) ? 0.0f : 1.0f;              // NOT A
    }
}

void LogicModuleProcessor::getStateInformation(juce::MemoryBlock& destData)
{
    auto state = apvts.copyState();
    std::unique_ptr<juce::XmlElement> xml(state.createXml());
    copyXmlToBinary(*xml, destData);
}

void LogicModuleProcessor::setStateInformation(const void* data, int sizeInBytes)
{
    std::unique_ptr<juce::XmlElement> xmlState(getXmlFromBinary(data, sizeInBytes));
    if (xmlState.get() != nullptr)
        if (xmlState->hasTagName(apvts.state.getType()))
            apvts.replaceState(juce::ValueTree::fromXml(*xmlState));
}

bool LogicModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "operation") { outBusIndex = 2; outChannelIndexInBus = 0; return true; }
    return false;
}

#if defined(PRESET_CREATOR_UI)
void LogicModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    
    int operation = static_cast<int>(operationParam->load());
    const char* operationNames[] = {"AND", "OR", "XOR", "NOT A"};
    
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::Combo("Operation", &operation, operationNames, 4))
    {
        *operationParam = static_cast<float>(operation);
        onModificationEnded();
    }
    float gateThresh = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
    if (ImGui::SliderFloat("Gate Thresh", &gateThresh, 0.0f, 1.0f, "%.3f"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gateThreshold"))) *p = gateThresh;
        onModificationEnded();
    }
    ImGui::PopItemWidth();
}

void LogicModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In A", 0);
    helpers.drawAudioInputPin("In B", 1);
    helpers.drawAudioOutputPin("AND", 0);
    helpers.drawAudioOutputPin("OR", 1);
    helpers.drawAudioOutputPin("XOR", 2);
    helpers.drawAudioOutputPin("NOT A", 3);
}
#endif

================================================================================
FILE: juce\Source\audio\modules\LogicModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

/**
    A logic utility module that performs boolean operations on Gate signals.

    This module takes two Gate inputs and provides outputs for various logical
    operations: AND, OR, XOR, and NOT. Useful for creating complex gate patterns
    and conditional triggers in modular patches.
*/
class LogicModuleProcessor : public ModuleProcessor
{
public:
    LogicModuleProcessor();
    ~LogicModuleProcessor() override = default;

    const juce::String getName() const override { return "logic"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi) override;

    void getStateInformation(juce::MemoryBlock& destData) override;
    void setStateInformation(const void* data, int sizeInBytes) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    /**
        Maps parameter IDs to their corresponding modulation bus and channel indices.
        
        @param paramId              The parameter ID to query.
        @param outBusIndex          Receives the bus index for modulation.
        @param outChannelIndexInBus Receives the channel index within the bus.
        @returns                    True if the parameter supports modulation.
    */
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // Parameters
    std::atomic<float>* operationParam { nullptr };
    std::atomic<float>* gateThresholdParam { nullptr };
};

================================================================================
FILE: juce\Source\audio\modules\MapRangeModuleProcessor.cpp
================================================================================


#include "MapRangeModuleProcessor.h"

MapRangeModuleProcessor::MapRangeModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("In", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::discreteChannels(3), true)),
      apvts(*this, nullptr, "MapRangeParams", createParameterLayout())
{
    inMinParam  = apvts.getRawParameterValue("inMin");
    inMaxParam  = apvts.getRawParameterValue("inMax");
    outMinParam = apvts.getRawParameterValue("outMin");
    outMaxParam = apvts.getRawParameterValue("outMax");
    normMinParam = apvts.getRawParameterValue("normMin");
    normMaxParam = apvts.getRawParameterValue("normMax");
    
    // Cache new CV parameters
    cvMinParam = apvts.getRawParameterValue("cvMin");
    cvMaxParam = apvts.getRawParameterValue("cvMax");
    
    // Initialize storage for the three output pins (Norm Out, Raw Out, CV Out)
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout MapRangeModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>("inMin", "Input Min", juce::NormalisableRange<float>(-100.0f, 100.0f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("inMax", "Input Max", juce::NormalisableRange<float>(-100.0f, 100.0f), 1.0f));
    // Bipolar Norm Out range [-1, 1]
    params.push_back(std::make_unique<juce::AudioParameterFloat>("normMin", "Norm Min", juce::NormalisableRange<float>(-1.0f, 1.0f, 0.0001f), -1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("normMax", "Norm Max", juce::NormalisableRange<float>(-1.0f, 1.0f, 0.0001f), 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("outMin", "Output Min", juce::NormalisableRange<float>(-10000.0f, 10000.0f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("outMax", "Output Max", juce::NormalisableRange<float>(-10000.0f, 10000.0f), 1.0f));
    
    // Add new CV parameters
    params.push_back(std::make_unique<juce::AudioParameterFloat>("cvMin", "CV Min", juce::NormalisableRange<float>(0.0f, 1.0f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("cvMax", "CV Max", juce::NormalisableRange<float>(0.0f, 1.0f), 1.0f));
    
    return { params.begin(), params.end() };
}

void MapRangeModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void MapRangeModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto in = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);
    // Ensure we present audio on a conventional stereo bus for downstream audio nodes.
    // Norm Out (0) is intended for CV; Raw Out (1) is wide-range audio.
    // Duplicate Raw Out into both L/R when the main graph expects stereo.
    
    const float inMin = inMinParam->load();
    const float inMax = inMaxParam->load();
    const float normMin = normMinParam->load();
    const float normMax = normMaxParam->load();
    const float outMin = outMinParam->load();
    const float outMax = outMaxParam->load();
    const float cvMin = cvMinParam->load();
    const float cvMax = cvMaxParam->load();
    
    const float inRange = inMax - inMin;
    const float outRange = outMax - outMin;
    
    // Get pointers to all three output channels: 0 for Norm (CV), 1 for Raw (audio), 2 for CV
    float* normDst = out.getWritePointer(0);
    float* rawDst = out.getNumChannels() > 1 ? out.getWritePointer(1) : nullptr;
    float* cvDst = out.getNumChannels() > 2 ? out.getWritePointer(2) : nullptr;

    if (std::abs(inRange) < 0.0001f)
    {
        // Handle division by zero: output the middle of the output range.
        const float rawVal = (outMin + outMax) * 0.5f;
        const float normVal = 0.5f;
        const float cvVal = (cvMin + cvMax) * 0.5f;
        for (int i = 0; i < buffer.getNumSamples(); ++i) {
            normDst[i] = normVal;
            if (rawDst) rawDst[i] = rawVal;
            if (cvDst) cvDst[i] = cvVal;
        }
        lastInputValue.store(inMin);
        lastOutputValue.store(rawVal);
        lastCvOutputValue.store(cvVal);
    }
    else
    {
        const float* src = in.getReadPointer(0);
        float sumInput = 0.0f;
        float sumOutput = 0.0f;
        float sumCvOutput = 0.0f;
        
        for (int i = 0; i < buffer.getNumSamples(); ++i)
        {
            // 1. Clamp and normalize the input signal (0..1 range)
            float clampedInput = juce::jlimit(inMin, inMax, src[i]);
            float normalizedInput = 0.0f;
            if (std::abs(inRange) > 1e-9f)
                normalizedInput = (clampedInput - inMin) / inRange;
            
            // 2. Calculate the three separate outputs from the normalized value
            float rawOutputVal = juce::jmap(normalizedInput, outMin, outMax);
            float cvOutputVal = juce::jmap(normalizedInput, cvMin, cvMax);
            
            // 3. Write to the respective output channels
            const float norm01 = juce::jlimit(0.0f, 1.0f, normalizedInput);
            const float normVal = juce::jmap(norm01, normMin, normMax);
            normDst[i] = normVal;              // Norm Out (bipolar CV)
            if (rawDst) rawDst[i] = rawOutputVal; // Raw Out (audio)
            if (cvDst)  cvDst[i]  = cvOutputVal;  // CV Out
            
            sumInput += clampedInput;
            sumOutput += rawOutputVal;
            sumCvOutput += cvOutputVal;
        }
        
    lastInputValue.store(sumInput / (float) buffer.getNumSamples());
    lastOutputValue.store(sumOutput / (float) buffer.getNumSamples());
    lastCvOutputValue.store(sumCvOutput / (float) buffer.getNumSamples());

    // Store live parameter values for UI display (currently no modulation, so store parameter values)
    setLiveParamValue("inMin_live", inMin);
    setLiveParamValue("inMax_live", inMax);
    setLiveParamValue("normMin_live", normMin);
    setLiveParamValue("normMax_live", normMax);
    setLiveParamValue("outMin_live", outMin);
    setLiveParamValue("outMax_live", outMax);
    setLiveParamValue("cvMin_live", cvMin);
    setLiveParamValue("cvMax_live", cvMax);
    }

    // Update the hover-value display for all three output pins
    if (lastOutputValues.size() >= 3)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(out.getSample(0, buffer.getNumSamples() - 1));
        if (out.getNumChannels() > 1 && lastOutputValues[1]) lastOutputValues[1]->store(out.getSample(1, buffer.getNumSamples() - 1));
        if (out.getNumChannels() > 2 && lastOutputValues[2]) lastOutputValues[2]->store(out.getSample(2, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void MapRangeModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float inMin = inMinParam->load();
    float inMax = inMaxParam->load();
    float normMin = normMinParam->load();
    float normMax = normMaxParam->load();
    float outMin = outMinParam->load();
    float outMax = outMaxParam->load();
    float cvMin = cvMinParam->load();
    float cvMax = cvMaxParam->load();

    ImGui::PushItemWidth(itemWidth);
    
    // Input Range Sliders
    if (ImGui::SliderFloat("Input Min", &inMin, -100.0f, 100.0f))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("inMin"))) *p = inMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("inMin"), "inMin", inMin);
    
    if (ImGui::SliderFloat("Input Max", &inMax, -100.0f, 100.0f))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("inMax"))) *p = inMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("inMax"), "inMax", inMax);
    

    // Norm Out precise bipolar range [-1, 1]
    if (ImGui::SliderFloat("Norm Min", &normMin, -1.0f, 1.0f, "%.4f"))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("normMin"))) *p = normMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("normMin"), "normMin", normMin);

    if (ImGui::SliderFloat("Norm Max", &normMax, -1.0f, 1.0f, "%.4f"))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("normMax"))) *p = normMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("normMax"), "normMax", normMax);

    // CV Output Range Sliders (0.0-1.0 range)
    if (ImGui::SliderFloat("CV Min", &cvMin, 0.0f, 1.0f))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("cvMin"))) *p = cvMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("cvMin"), "cvMin", cvMin);
    
    if (ImGui::SliderFloat("CV Max", &cvMax, 0.0f, 1.0f))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("cvMax"))) *p = cvMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("cvMax"), "cvMax", cvMax);


    // Raw Output Range Sliders (wide range)
    if (ImGui::SliderFloat("Output Min", &outMin, -10000.0f, 10000.0f, "%.1f", ImGuiSliderFlags_Logarithmic))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMin"))) *p = outMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("outMin"), "outMin", outMin);
    
    if (ImGui::SliderFloat("Output Max", &outMax, -10000.0f, 10000.0f, "%.1f", ImGuiSliderFlags_Logarithmic))
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outMax"))) *p = outMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter("outMax"), "outMax", outMax);


    // Output value displays
    ImGui::Text("Input:     %.2f", getLastInputValue());
    ImGui::Text("Raw Out:   %.2f", getLastOutputValue());
    ImGui::Text("CV Out:    %.2f", getLastCvOutputValue());

    ImGui::PopItemWidth();
}

void MapRangeModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Input", 0);
    helpers.drawAudioOutputPin("Norm Out", 0);
    helpers.drawAudioOutputPin("Raw Out", 1);
    helpers.drawAudioOutputPin("CV Out", 2);
}
#endif

float MapRangeModuleProcessor::getLastInputValue() const
{
    return lastInputValue.load();
}

float MapRangeModuleProcessor::getLastOutputValue() const
{
    return lastOutputValue.load();
}

float MapRangeModuleProcessor::getLastCvOutputValue() const
{
    return lastCvOutputValue.load();
}


================================================================================
FILE: juce\Source\audio\modules\MapRangeModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class MapRangeModuleProcessor : public ModuleProcessor
{
public:
    MapRangeModuleProcessor();
    ~MapRangeModuleProcessor() override = default;

    const juce::String getName() const override { return "maprange"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    float getLastInputValue() const;
    float getLastOutputValue() const;
    float getLastCvOutputValue() const;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Input";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Norm Out";
            case 1: return "Raw Out";
            case 2: return "CV Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* inMinParam { nullptr };
    std::atomic<float>* inMaxParam { nullptr };
    std::atomic<float>* outMinParam { nullptr };
    std::atomic<float>* outMaxParam { nullptr };
    // Norm Out bipolar range [-1, 1]
    std::atomic<float>* normMinParam { nullptr };
    std::atomic<float>* normMaxParam { nullptr };
    
    // New CV parameters
    std::atomic<float>* cvMinParam { nullptr };
    std::atomic<float>* cvMaxParam { nullptr };

    std::atomic<float> lastInputValue { 0.0f };
    std::atomic<float> lastOutputValue { 0.0f };
    std::atomic<float> lastCvOutputValue { 0.0f };
};


================================================================================
FILE: juce\Source\audio\modules\MathModuleProcessor.cpp
================================================================================


#include "MathModuleProcessor.h"

MathModuleProcessor::MathModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("In A", juce::AudioChannelSet::mono(), true)
                        .withInput ("In B", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::mono(), true)),
      apvts (*this, nullptr, "MathParams", createParameterLayout())
{
    valueAParam    = apvts.getRawParameterValue ("valueA");
    valueBParam    = apvts.getRawParameterValue ("valueB");
    operationParam = apvts.getRawParameterValue ("operation");
    
    // ADD THIS:
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout MathModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    // Enhanced operation list with 17 mathematical functions
    p.push_back (std::make_unique<juce::AudioParameterChoice> ("operation", "Operation", 
        juce::StringArray { 
            "Add", "Subtract", "Multiply", "Divide",
            "Min", "Max", "Power", "Sqrt(A)",
            "Sin(A)", "Cos(A)", "Tan(A)",
            "Abs(A)", "Modulo", "Fract(A)", "Int(A)",
            "A > B", "A < B"
        }, 0));
    // New Value A slider default
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("valueA", "Value A", juce::NormalisableRange<float> (-100.0f, 100.0f), 0.0f));
    // Expanded Value B range from -100 to 100 for more creative possibilities
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("valueB", "Value B", juce::NormalisableRange<float> (-100.0f, 100.0f), 0.0f));
    return { p.begin(), p.end() };
}

void MathModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (sampleRate, samplesPerBlock);
}

void MathModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);

    auto inA = getBusBuffer (buffer, true, 0);
    auto out = getBusBuffer (buffer, false, 0);

    // CORRECTED LOGIC:
    auto inB = getBusBuffer(buffer, true, 1);
    // Use robust connection detection
    const bool inAConnected = isParamInputConnected("valueA");
    const bool inBConnected = isParamInputConnected("valueB");

    const float valueA = valueAParam != nullptr ? valueAParam->load() : 0.0f;
    const float valueB = valueBParam->load();
    const int operation = static_cast<int>(operationParam->load());
    
    const float* srcA = inA.getNumChannels() > 0 ? inA.getReadPointer (0) : nullptr;
    const float* srcB = inBConnected ? inB.getReadPointer (0) : nullptr;
    float* dst = out.getWritePointer (0);

    float sum = 0.0f;
    float sumA = 0.0f;
    float sumB = 0.0f;
    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float valA = inAConnected && srcA != nullptr ? srcA[i] : valueA;
        float valB = inBConnected ? srcB[i] : valueB;

        // Enhanced mathematical operations with 17 different functions
        switch (operation)
        {
            case 0:  dst[i] = valA + valB; break; // Add
            case 1:  dst[i] = valA - valB; break; // Subtract
            case 2:  dst[i] = valA * valB; break; // Multiply
            case 3:  dst[i] = (std::abs(valB) < 1e-9f) ? 0.0f : (valA / valB); break; // Divide (safe)
            case 4:  dst[i] = std::min(valA, valB); break; // Min
            case 5:  dst[i] = std::max(valA, valB); break; // Max
            case 6:  dst[i] = std::pow(valA, valB); break; // Power
            case 7:  dst[i] = std::sqrt(std::abs(valA)); break; // Sqrt(A) - only on A
            case 8:  dst[i] = std::sin(valA * juce::MathConstants<float>::twoPi); break; // Sin(A) - only on A
            case 9:  dst[i] = std::cos(valA * juce::MathConstants<float>::twoPi); break; // Cos(A) - only on A
            case 10: dst[i] = std::tan(valA * juce::MathConstants<float>::pi); break; // Tan(A) - only on A
            case 11: dst[i] = std::abs(valA); break; // Abs(A) - only on A
            case 12: dst[i] = (std::abs(valB) < 1e-9f) ? 0.0f : std::fmod(valA, valB); break; // Modulo (safe)
            case 13: dst[i] = valA - std::trunc(valA); break; // Fract(A) - only on A
            case 14: dst[i] = std::trunc(valA); break; // Int(A) - only on A
            case 15: dst[i] = (valA > valB) ? 1.0f : 0.0f; break; // A > B
            case 16: dst[i] = (valA < valB) ? 1.0f : 0.0f; break; // A < B
        }
        sum += dst[i];
        sumA += valA;
        sumB += valB;
        
        // Update telemetry for live UI feedback (throttled to every 64 samples)
        if ((i & 0x3F) == 0) {
            setLiveParamValue("valueA_live", valA);
            setLiveParamValue("valueB_live", valB);
            setLiveParamValue("operation_live", static_cast<float>(operation));
        }
    }
    lastValue.store(sum / (float) buffer.getNumSamples());
    lastValueA.store(sumA / (float) buffer.getNumSamples());
    lastValueB.store(sumB / (float) buffer.getNumSamples());
    
    // ADD THIS BLOCK:
    if (!lastOutputValues.empty() && lastOutputValues[0])
    {
        lastOutputValues[0]->store(out.getSample(0, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void MathModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    int op = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("operation"))) op = p->getIndex();
    float valA = valueAParam != nullptr ? valueAParam->load() : 0.0f;
    float valB = valueBParam != nullptr ? valueBParam->load() : 0.0f;
    
    ImGui::PushItemWidth (itemWidth);
    
    // Operation combo box (no modulation input, so no live feedback needed)
    if (ImGui::Combo ("Operation", &op, 
        "Add\0Subtract\0Multiply\0Divide\0"
        "Min\0Max\0Power\0Sqrt(A)\0"
        "Sin(A)\0Cos(A)\0Tan(A)\0"
        "Abs(A)\0Modulo\0Fract(A)\0Int(A)\0"
        "A > B\0A < B\0\0"))
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("operation"))) *p = op;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();

    // Value A slider with live modulation feedback
    bool isValueAModulated = isParamModulated("valueA");
    if (isValueAModulated) {
        valA = getLiveParamValueFor("valueA", "valueA_live", valA);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Value A", &valA, -100.0f, 100.0f)) {
        if (!isValueAModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("valueA"))) *p = valA;
        }
    }
    if (!isValueAModulated) adjustParamOnWheel (ap.getParameter("valueA"), "valueA", valA);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isValueAModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Value B slider with live modulation feedback
    bool isValueBModulated = isParamModulated("valueB");
    if (isValueBModulated) {
        valB = getLiveParamValueFor("valueB", "valueB_live", valB);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Value B", &valB, -100.0f, 100.0f)) {
        if (!isValueBModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("valueB"))) *p = valB;
        }
    }
    if (!isValueBModulated) adjustParamOnWheel (ap.getParameter("valueB"), "valueB", valB);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isValueBModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::Text("In A: %.2f", getLastValueA());
    ImGui::Text("In B: %.2f", getLastValueB());
    ImGui::Text("Out: %.2f", getLastValue());

    ImGui::PopItemWidth();
}

void MathModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In A", 0);
    helpers.drawAudioInputPin("In B", 1);
    helpers.drawAudioOutputPin("Out", 0);
}
#endif

float MathModuleProcessor::getLastValue() const
{
    return lastValue.load();
}

float MathModuleProcessor::getLastValueA() const
{
    return lastValueA.load();
}

float MathModuleProcessor::getLastValueB() const
{
    return lastValueB.load();
}

bool MathModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "valueA") { outBusIndex = 0; outChannelIndexInBus = 0; return true; }
    if (paramId == "valueB") { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    return false;
}

================================================================================
FILE: juce\Source\audio\modules\MathModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class MathModuleProcessor : public ModuleProcessor
{
public:
    MathModuleProcessor();
    ~MathModuleProcessor() override = default;

    const juce::String getName() const override { return "math"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In A";
            case 1: return "In B";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

    float getLastValue() const;
    float getLastValueA() const;
    float getLastValueB() const;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* valueAParam { nullptr };
    std::atomic<float>* valueBParam { nullptr };
    std::atomic<float>* operationParam { nullptr };

    std::atomic<float> lastValue { 0.0f };
    std::atomic<float> lastValueA { 0.0f };
    std::atomic<float> lastValueB { 0.0f };
};


================================================================================
FILE: juce\Source\audio\modules\MetaModuleProcessor.cpp
================================================================================


#include "MetaModuleProcessor.h"

MetaModuleProcessor::MetaModuleProcessor()
    : ModuleProcessor(BusesProperties()
                      .withInput("Input", juce::AudioChannelSet::stereo(), true)
                      .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "MetaModuleParams", createParameterLayout()),
      metaModuleLabel("Meta Module")
{
    // Create the internal graph
    internalGraph = std::make_unique<ModularSynthProcessor>();
    
    // Initialize output value tracking (default 2 channels)
    lastOutputValues.clear();
    for (int i = 0; i < 2; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout MetaModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    
    // Initially empty - parameters will be added dynamically when exposing internal parameters
    // For now, just have a bypass parameter
    layout.add(std::make_unique<juce::AudioParameterBool>(
        "bypass",
        "Bypass",
        false
    ));
    
    return layout;
}

void MetaModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    if (internalGraph)
    {
        internalGraph->prepareToPlay(sampleRate, samplesPerBlock);
    }
    
    // Prepare inlet/outlet buffers
    updateInletOutletCache();
    
    inletBuffers.clear();
    outletBuffers.clear();
    
    for (int i = 0; i < cachedInletCount; ++i)
    {
        inletBuffers.emplace_back(2, samplesPerBlock);
    }
    
    for (int i = 0; i < cachedOutletCount; ++i)
    {
        outletBuffers.emplace_back(2, samplesPerBlock);
    }
}

void MetaModuleProcessor::releaseResources()
{
    if (internalGraph)
    {
        internalGraph->releaseResources();
    }
}

void MetaModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    if (!internalGraph)
    {
        buffer.clear();
        return;
    }
    
    // Logging example (throttled to avoid spam)
    static int frameCounter = 0;
    if ((frameCounter++ % 100) == 0) {
        juce::Logger::writeToLog("[META_PROC] Processing block for Meta Module " + juce::String((int)getLogicalId()));
        juce::Logger::writeToLog("  - Copying " + juce::String(buffer.getNumChannels()) + " channels to internal inlets.");
    }
    
    // Check bypass
    if (auto* bypassParam = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("bypass")))
    {
        if (*bypassParam)
        {
            // Bypass: just pass through input to output
            return;
        }
    }
    
    // 1. Get all inlet nodes and feed them with our input buffer
    auto inlets = getInletNodes();
    for (size_t i = 0; i < inlets.size() && i < inletBuffers.size(); ++i)
    {
        if (inlets[i])
        {
            // Copy relevant channels from main input to this inlet's buffer
            const int startChannel = (int)i * 2; // Each inlet gets 2 channels
            const int numChannels = juce::jmin(2, buffer.getNumChannels() - startChannel);
            
            if (numChannels > 0 && startChannel < buffer.getNumChannels())
            {
                inletBuffers[i].setSize(numChannels, buffer.getNumSamples(), false, false, true);
                
                for (int ch = 0; ch < numChannels; ++ch)
                {
                    inletBuffers[i].copyFrom(ch, 0, buffer, startChannel + ch, 0, buffer.getNumSamples());
                }
                
                inlets[i]->setIncomingBuffer(&inletBuffers[i]);
            }
        }
    }
    
    // 2. Process the internal graph
    juce::AudioBuffer<float> internalBuffer(buffer.getNumChannels(), buffer.getNumSamples());
    internalBuffer.clear();
    
    internalGraph->processBlock(internalBuffer, midi);
    
    if ((frameCounter % 100) == 0) {
        juce::Logger::writeToLog("  - Copying audio from internal outlets to main output buffer.");
    }
    
    // 3. Collect outputs from outlet nodes
    auto outlets = getOutletNodes();
    buffer.clear(); // Clear before accumulating
    
    for (size_t i = 0; i < outlets.size(); ++i)
    {
        if (outlets[i])
        {
            const auto& outletBuffer = outlets[i]->getOutputBuffer();
            const int startChannel = (int)i * 2; // Each outlet provides 2 channels
            const int numChannels = juce::jmin(outletBuffer.getNumChannels(), buffer.getNumChannels() - startChannel);
            
            if (numChannels > 0 && startChannel < buffer.getNumChannels())
            {
                for (int ch = 0; ch < numChannels; ++ch)
                {
                    buffer.addFrom(startChannel + ch, 0, outletBuffer, ch, 0, 
                                  juce::jmin(buffer.getNumSamples(), outletBuffer.getNumSamples()));
                }
            }
        }
    }
    
    // 4. Update output telemetry
    if (lastOutputValues.size() >= 2)
    {
        lastOutputValues[0]->store(buffer.getMagnitude(0, 0, buffer.getNumSamples()));
        if (buffer.getNumChannels() > 1)
            lastOutputValues[1]->store(buffer.getMagnitude(1, 0, buffer.getNumSamples()));
    }
}

void MetaModuleProcessor::updateInletOutletCache()
{
    cachedInletCount = 0;
    cachedOutletCount = 0;
    
    if (internalGraph)
    {
        auto modules = internalGraph->getModulesInfo();
        for (const auto& [logicalId, typeName] : modules)
        {
            if (typeName.equalsIgnoreCase("inlet"))
                cachedInletCount++;
            else if (typeName.equalsIgnoreCase("outlet"))
                cachedOutletCount++;
        }
    }
}

std::vector<InletModuleProcessor*> MetaModuleProcessor::getInletNodes() const
{
    std::vector<InletModuleProcessor*> inlets;
    
    if (internalGraph)
    {
        auto modules = internalGraph->getModulesInfo();
        for (const auto& [logicalId, typeName] : modules)
        {
            if (typeName.equalsIgnoreCase("inlet"))
            {
                if (auto* module = internalGraph->getModuleForLogical(logicalId))
                {
                    if (auto* inlet = dynamic_cast<InletModuleProcessor*>(module))
                    {
                        inlets.push_back(inlet);
                    }
                }
            }
        }
    }
    
    return inlets;
}

std::vector<OutletModuleProcessor*> MetaModuleProcessor::getOutletNodes() const
{
    std::vector<OutletModuleProcessor*> outlets;
    
    if (internalGraph)
    {
        auto modules = internalGraph->getModulesInfo();
        for (const auto& [logicalId, typeName] : modules)
        {
            if (typeName.equalsIgnoreCase("outlet"))
            {
                if (auto* module = internalGraph->getModuleForLogical(logicalId))
                {
                    if (auto* outlet = dynamic_cast<OutletModuleProcessor*>(module))
                    {
                        outlets.push_back(outlet);
                    }
                }
            }
        }
    }
    
    return outlets;
}

juce::ValueTree MetaModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("MetaModuleState");
    vt.setProperty("label", metaModuleLabel, nullptr);
    
    // Save the complete state of the internal graph
    if (internalGraph)
    {
        juce::MemoryBlock graphState;
        internalGraph->getStateInformation(graphState);
        
        // Convert to base64 for safe storage in ValueTree
        juce::MemoryOutputStream mos;
        juce::Base64::convertToBase64(mos, graphState.getData(), graphState.getSize());
        vt.setProperty("internalGraphState", mos.toString(), nullptr);
    }
    
    return vt;
}

void MetaModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("MetaModuleState"))
    {
        metaModuleLabel = vt.getProperty("label", "Meta Module").toString();
        
        // Restore the internal graph state
        juce::String base64State = vt.getProperty("internalGraphState", "").toString();
        if (base64State.isNotEmpty() && internalGraph)
        {
            juce::MemoryOutputStream mos;
            if (juce::Base64::convertFromBase64(mos, base64State))
            {
                const auto* data = static_cast<const void*>(mos.getData());
                const int size = (int)mos.getDataSize();
                
                internalGraph->setStateInformation(data, size);
                
                // Update our cached info
                updateInletOutletCache();
                
                // Rebuild bus layout if needed
                rebuildBusLayout();
            }
        }
    }
}

void MetaModuleProcessor::rebuildBusLayout()
{
    // This is a simplified version - in a full implementation, you would
    // dynamically rebuild the AudioProcessor's bus layout based on inlet/outlet counts
    // For now, we use a fixed stereo bus layout
}

#if defined(PRESET_CREATOR_UI)
void MetaModuleProcessor::drawParametersInNode(float itemWidth,
                                               const std::function<bool(const juce::String& paramId)>&,
                                               const std::function<void()>& onModificationEnded)
{
    // FIX #1: Constrain widget widths to prevent infinite scaling
    ImGui::PushItemWidth(itemWidth);
    
    // Label editor
    char labelBuf[64];
    strncpy(labelBuf, metaModuleLabel.toRawUTF8(), sizeof(labelBuf) - 1);
    labelBuf[sizeof(labelBuf) - 1] = '\0';
    
    if (ImGui::InputText("Label", labelBuf, sizeof(labelBuf)))
    {
        metaModuleLabel = juce::String(labelBuf);
        if (ImGui::IsItemDeactivatedAfterEdit())
            onModificationEnded();
    }
    
    // Bypass
    bool bypass = false;
    if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("bypass")))
        bypass = *p;
    
    if (ImGui::Checkbox("Bypass", &bypass))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("bypass")))
            *p = bypass;
        onModificationEnded();
    }
    
    ImGui::Separator();
    
    // Get stats from the internal graph
    int numModules = 0, numInlets = 0, numOutlets = 0;
    if (internalGraph)
    {
        for (const auto& modInfo : internalGraph->getModulesInfo())
        {
            if (modInfo.second.equalsIgnoreCase("inlet"))
                numInlets++;
            else if (modInfo.second.equalsIgnoreCase("outlet"))
                numOutlets++;
            else
                numModules++;
        }
    }
    
    // Info display
    ImGui::Text("Internal Graph:");
    ImGui::Text("  Modules: %d", numModules);
    ImGui::Text("  Inlets: %d", numInlets);
    ImGui::Text("  Outlets: %d", numOutlets);
    
    // FIX #2: Set atomic flag when button is clicked
    if (ImGui::Button("Edit Internal Patch", ImVec2(itemWidth, 0)))
    {
        juce::Logger::writeToLog("[MetaModule] Edit button clicked for L-ID " + juce::String((int)getLogicalId()));
        editRequested = true;
    }
    
    ImGui::PopItemWidth();
}

void MetaModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Draw input pins for each inlet
    auto inlets = getInletNodes();
    int inChannel = 0;
    for (size_t i = 0; i < inlets.size(); ++i)
    {
        if (inlets[i])
        {
            juce::String label = "In " + juce::String(i + 1);
            helpers.drawAudioInputPin(label.toRawUTF8(), inChannel++);
        }
    }
    
    // Draw output pins for each outlet
    auto outlets = getOutletNodes();
    int outChannel = 0;
    for (size_t i = 0; i < outlets.size(); ++i)
    {
        if (outlets[i])
        {
            juce::String label = "Out " + juce::String(i + 1);
            helpers.drawAudioOutputPin(label.toRawUTF8(), outChannel++);
        }
    }
}

juce::String MetaModuleProcessor::getAudioInputLabel(int channel) const
{
    auto inlets = getInletNodes();
    if (juce::isPositiveAndBelow(channel, (int)inlets.size()) && inlets[channel])
    {
        // Use the inlet's custom label if available
        return juce::String("In ") + juce::String(channel + 1);
    }
    return juce::String("In ") + juce::String(channel + 1);
}

juce::String MetaModuleProcessor::getAudioOutputLabel(int channel) const
{
    auto outlets = getOutletNodes();
    if (juce::isPositiveAndBelow(channel, (int)outlets.size()) && outlets[channel])
    {
        // Use the outlet's custom label if available
        return juce::String("Out ") + juce::String(channel + 1);
    }
    return juce::String("Out ") + juce::String(channel + 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\MetaModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include "../graph/ModularSynthProcessor.h"
#include "InletModuleProcessor.h"
#include "OutletModuleProcessor.h"
#include <memory>

/**
    MetaModuleProcessor - A recursive container module for sub-patching
    
    This module contains a complete ModularSynthProcessor instance internally,
    allowing users to create complex patches and collapse them into single,
    reusable modules.
    
    Architecture:
    - Contains an internal ModularSynthProcessor graph
    - Uses InletModuleProcessor nodes inside to represent external inputs
    - Uses OutletModuleProcessor nodes inside to represent external outputs
    - Can expose selected internal parameters as its own parameters
*/
class MetaModuleProcessor : public ModuleProcessor
{
public:
    MetaModuleProcessor();
    ~MetaModuleProcessor() override = default;

    const juce::String getName() const override { return "Meta Module"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Access to the internal graph for UI editing
    ModularSynthProcessor* getInternalGraph() const { return internalGraph.get(); }
    
    // State management for the internal graph
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    // UI interaction flag - set when user clicks "Edit Internal Patch" button
    std::atomic<bool> editRequested { false };

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth,
                              const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override;

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    // Helper to get inlet/outlet nodes
    std::vector<InletModuleProcessor*> getInletNodes() const;
    std::vector<OutletModuleProcessor*> getOutletNodes() const;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::unique_ptr<ModularSynthProcessor> internalGraph;
    
    // Temporary buffers for inlet/outlet communication
    std::vector<juce::AudioBuffer<float>> inletBuffers;
    std::vector<juce::AudioBuffer<float>> outletBuffers;
    
    // Cached inlet/outlet counts (updated when internal graph changes)
    int cachedInletCount { 0 };
    int cachedOutletCount { 0 };
    
    // Label for this meta module
    juce::String metaModuleLabel;
    
    // Rebuild bus layout based on inlets/outlets
    void rebuildBusLayout();
    
    // Update cached inlet/outlet information
    void updateInletOutletCache();

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(MetaModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\MIDIButtonsModuleProcessor.cpp
================================================================================


#include "MIDIButtonsModuleProcessor.h"
#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ControllerPresetManager.h"
#endif

juce::AudioProcessorValueTreeState::ParameterLayout MIDIButtonsModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    layout.add(std::make_unique<juce::AudioParameterInt>("numButtons", "Number of Buttons", 1, MAX_BUTTONS, 16));
    layout.add(std::make_unique<juce::AudioParameterInt>("midiChannel", "MIDI Channel", 0, 16, 0)); // 0 = Omni
    return layout;
}

MIDIButtonsModuleProcessor::MIDIButtonsModuleProcessor()
    : ModuleProcessor(BusesProperties().withOutput("Outputs", juce::AudioChannelSet::discreteChannels(MAX_BUTTONS), true)),
      apvts(*this, nullptr, "MIDIButtonsParams", createParameterLayout())
{
    numButtonsParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numButtons"));
    midiChannelParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("midiChannel"));
    
    for (int i = 0; i < MAX_BUTTONS; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void MIDIButtonsModuleProcessor::prepareToPlay(double, int)
{
    learningIndex = -1;  // Reset learn state
}

void MIDIButtonsModuleProcessor::releaseResources()
{
}

void MIDIButtonsModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    int numActive = numButtonsParam ? numButtonsParam->get() : MAX_BUTTONS;
    int channelFilter = midiChannelParam ? midiChannelParam->get() : 0;
    
    // Process incoming MIDI CC messages
    for (const auto metadata : midiMessages)
    {
        auto msg = metadata.getMessage();
        
        // Channel filtering: If channel is set (not 0/Omni), only process messages from that channel
        if (channelFilter != 0 && msg.getChannel() != channelFilter)
            continue;
        
        if (!msg.isController()) continue;
        
        int ccNumber = msg.getControllerNumber();
        float ccValue = msg.getControllerValue() / 127.0f;
        
        // Handle MIDI Learn
        if (learningIndex != -1 && learningIndex < numActive)
        {
            mappings[learningIndex].midiCC = ccNumber;
            learningIndex = -1;  // Stop learning
        }
        
        // Update mapped buttons
        for (int i = 0; i < numActive; ++i)
        {
            if (mappings[i].midiCC == ccNumber)
            {
                bool isPressed = ccValue > 0.5f;
                
                switch (mappings[i].mode)
                {
                    case ButtonMode::Gate:
                        mappings[i].currentValue = isPressed ? 1.0f : 0.0f;
                        break;
                        
                    case ButtonMode::Toggle:
                        if (isPressed && !mappings[i].toggleState)  // Rising edge
                            mappings[i].currentValue = 1.0f - mappings[i].currentValue;
                        mappings[i].toggleState = isPressed;
                        break;
                        
                    case ButtonMode::Trigger:
                        if (isPressed && mappings[i].triggerSamplesRemaining <= 0)
                            mappings[i].triggerSamplesRemaining = (int)(getSampleRate() * 0.005);  // 5ms pulse
                        break;
                }
            }
        }
    }
    
    // Write current values to output buffer
    for (int i = 0; i < MAX_BUTTONS; ++i)
    {
        float val = 0.0f;
        
        if (i < numActive)
        {
            if (mappings[i].mode == ButtonMode::Trigger)
            {
                val = (mappings[i].triggerSamplesRemaining > 0) ? 1.0f : 0.0f;
                if (mappings[i].triggerSamplesRemaining > 0)
                    mappings[i].triggerSamplesRemaining--;
            }
            else
            {
                val = mappings[i].currentValue;
            }
        }
        
        buffer.setSample(i, 0, val);
        
        // Fill rest of block with same value
        if (buffer.getNumSamples() > 1)
            juce::FloatVectorOperations::fill(buffer.getWritePointer(i) + 1, val, buffer.getNumSamples() - 1);
        
        lastOutputValues[i]->store(val);
    }
}

juce::ValueTree MIDIButtonsModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("MIDIButtonsState");
    
    // Save the name of the controller preset that is currently active
    #if defined(PRESET_CREATOR_UI)
    vt.setProperty("controllerPreset", activeControllerPresetName, nullptr);
    #endif
    
    // Save the MIDI channel from the APVTS parameter
    if (midiChannelParam)
        vt.setProperty("midiChannel", midiChannelParam->get(), nullptr);
    
    // Save the actual mapping data
    for (int i = 0; i < MAX_BUTTONS; ++i)
    {
        juce::ValueTree mapping("Mapping");
        mapping.setProperty("index", i, nullptr);
        mapping.setProperty("cc", mappings[i].midiCC, nullptr);
        mapping.setProperty("mode", (int)mappings[i].mode, nullptr);
        vt.addChild(mapping, -1, nullptr);
    }
    return vt;
}

void MIDIButtonsModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("MIDIButtonsState"))
    {
        // Load the name of the controller preset
        #if defined(PRESET_CREATOR_UI)
        activeControllerPresetName = vt.getProperty("controllerPreset", "").toString();
        #endif
        
        // Load the MIDI channel and update the APVTS parameter
        if (midiChannelParam)
            *midiChannelParam = (int)vt.getProperty("midiChannel", 0);
        
        // Load the actual mapping data
        for (const auto& child : vt)
        {
            if (child.hasType("Mapping"))
            {
                int index = child.getProperty("index", -1);
                if (index >= 0 && index < MAX_BUTTONS)
                {
                    mappings[index].midiCC = child.getProperty("cc", -1);
                    mappings[index].mode = (ButtonMode)(int)child.getProperty("mode", 0);
                }
            }
        }
    }
}

std::vector<DynamicPinInfo> MIDIButtonsModuleProcessor::getDynamicOutputPins() const
{
    std::vector<DynamicPinInfo> pins;
    int numActive = numButtonsParam ? numButtonsParam->get() : MAX_BUTTONS;
    
    for (int i = 0; i < numActive; ++i)
    {
        juce::String label = "Button " + juce::String(i + 1);
        pins.push_back(DynamicPinInfo(label, i, PinDataType::Gate));
    }
    
    return pins;
}

#if defined(PRESET_CREATOR_UI)

// Helper function for tooltip with help marker
static void HelpMarker(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

ImVec4 MIDIButtonsModuleProcessor::getModeColor(ButtonMode mode, float brightness) const
{
    // Gate: Green, Toggle: Blue, Trigger: Orange
    switch (mode)
    {
        case ButtonMode::Gate:
            return ImColor::HSV(0.33f, brightness, brightness).Value;  // Green
        case ButtonMode::Toggle:
            return ImColor::HSV(0.60f, brightness, brightness).Value;  // Blue
        case ButtonMode::Trigger:
            return ImColor::HSV(0.08f, brightness, brightness).Value;  // Orange
        default:
            return ImVec4(0.5f, 0.5f, 0.5f, 1.0f);
    }
}

void MIDIButtonsModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);
    
    // === PRESET MANAGEMENT UI ===
    auto& presetManager = ControllerPresetManager::get();
    const auto& presetNames = presetManager.getPresetNamesFor(ControllerPresetManager::ModuleType::Buttons);
    
    // UI SYNCHRONIZATION: On first draw after loading, find the index for the saved preset name
    if (activeControllerPresetName.isNotEmpty())
    {
        selectedPresetIndex = presetNames.indexOf(activeControllerPresetName);
        activeControllerPresetName = ""; // Clear so we only do this once
    }
    
    ImGui::Text("Controller Preset");
    
    // Create a C-style array of char pointers for the ImGui combo box
    std::vector<const char*> names;
    for (const auto& name : presetNames)
        names.push_back(name.toRawUTF8());
    
    // Draw the dropdown menu
    if (ImGui::Combo("##PresetCombo", &selectedPresetIndex, names.data(), (int)names.size()))
    {
        // When a preset is selected, load it and update our state
        if (selectedPresetIndex >= 0 && selectedPresetIndex < (int)presetNames.size())
        {
            activeControllerPresetName = presetNames[selectedPresetIndex];
            juce::ValueTree presetData = presetManager.loadPreset(ControllerPresetManager::ModuleType::Buttons, activeControllerPresetName);
            setExtraStateTree(presetData);
            onModificationEnded(); // Create an undo state
        }
    }
    
    // "Save" button and text input popup
    ImGui::SameLine();
    if (ImGui::Button("Save##preset"))
    {
        ImGui::OpenPopup("Save Button Preset");
    }
    
    // "Delete" button
    ImGui::SameLine();
    if (ImGui::Button("Delete##preset"))
    {
        if (selectedPresetIndex >= 0 && selectedPresetIndex < (int)presetNames.size())
        {
            presetManager.deletePreset(ControllerPresetManager::ModuleType::Buttons, presetNames[selectedPresetIndex]);
            selectedPresetIndex = -1; // Deselect
            activeControllerPresetName = ""; // Clear active name
        }
    }
    
    if (ImGui::BeginPopup("Save Button Preset"))
    {
        ImGui::InputText("Preset Name", presetNameBuffer, sizeof(presetNameBuffer));
        if (ImGui::Button("Save New##confirm"))
        {
            juce::String name(presetNameBuffer);
            if (name.isNotEmpty())
            {
                presetManager.savePreset(ControllerPresetManager::ModuleType::Buttons, name, getExtraStateTree());
                activeControllerPresetName = name; // Mark this new preset as active
                selectedPresetIndex = presetNames.indexOf(activeControllerPresetName); // Resync UI
                ImGui::CloseCurrentPopup();
            }
        }
        ImGui::SameLine();
        if (ImGui::Button("Cancel##preset"))
        {
            ImGui::CloseCurrentPopup();
        }
        ImGui::EndPopup();
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === HEADER SECTION ===
    if (numButtonsParam)
    {
        int numButtons = numButtonsParam->get();
        ImGui::SetNextItemWidth(120);
        if (ImGui::SliderInt("##numbuttons", &numButtons, 1, MAX_BUTTONS))
        {
            *numButtonsParam = numButtons;
            onModificationEnded();
        }
        ImGui::SameLine();
        ImGui::Text("Buttons");
        ImGui::SameLine();
        HelpMarker("Number of active buttons (1-32). Drag to adjust.");
    }
    
    // MIDI Channel filter control
    if (midiChannelParam)
    {
        int channel = midiChannelParam->get();
        ImGui::SetNextItemWidth(120);
        if (ImGui::SliderInt("##midichannel", &channel, 0, 16))
        {
            *midiChannelParam = channel;
            onModificationEnded();
        }
        ImGui::SameLine();
        ImGui::Text(channel == 0 ? "Ch: Omni (All)" : juce::String("Ch: " + juce::String(channel)).toRawUTF8());
        ImGui::SameLine();
        HelpMarker("MIDI Channel filter. 0 = Omni (all channels), 1-16 = specific channel only.");
    }
    
    // View mode selector
    ImGui::Spacing();
    if (ImGui::RadioButton("Visual", viewMode == ViewMode::Visual)) viewMode = ViewMode::Visual;
    ImGui::SameLine();
    if (ImGui::RadioButton("Compact", viewMode == ViewMode::Compact)) viewMode = ViewMode::Compact;
    ImGui::SameLine();
    if (ImGui::RadioButton("Table", viewMode == ViewMode::Table)) viewMode = ViewMode::Table;
    ImGui::SameLine();
    HelpMarker("Visual: Button grid with mode colors\nCompact: Linear list view\nTable: Detailed table view\n\nColors: Green=Gate, Blue=Toggle, Orange=Trigger");
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === DRAW SELECTED VIEW ===
    int numActive = numButtonsParam ? numButtonsParam->get() : MAX_BUTTONS;
    
    switch (viewMode)
    {
        case ViewMode::Visual:
            drawVisualButtons(numActive, onModificationEnded);
            break;
        case ViewMode::Compact:
            drawCompactList(numActive, onModificationEnded);
            break;
        case ViewMode::Table:
            drawTableView(numActive, onModificationEnded);
            break;
    }
    
    ImGui::PopItemWidth();
}

void MIDIButtonsModuleProcessor::drawVisualButtons(int numActive, const std::function<void()>& onModificationEnded)
{
    // Draw buttons in grid (8 per row)
    const int buttonsPerRow = 8;
    const float buttonSize = 32.0f;
    const float spacing = 4.0f;
    
    ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));
    
    for (int row = 0; row < (numActive + buttonsPerRow - 1) / buttonsPerRow; ++row)
    {
        if (row > 0) ImGui::Spacing();
        
        for (int col = 0; col < buttonsPerRow; ++col)
        {
            int i = row * buttonsPerRow + col;
            if (i >= numActive) break;
            
            if (col > 0) ImGui::SameLine();
            
            auto& map = mappings[i];
            ImGui::PushID(i);
            
            bool hasMapping = (map.midiCC != -1);
            
            // Button colors based on state
            ImVec4 color, colorHovered, colorActive;
            
            // Override with orange if learning
            if (learningIndex == i)
            {
                color = ImVec4(1.0f, 0.5f, 0.0f, 1.0f);
                colorHovered = ImVec4(1.0f, 0.6f, 0.1f, 1.0f);
                colorActive = ImVec4(1.0f, 0.7f, 0.2f, 1.0f);
            }
            // Dimmed gray for unassigned (but still clickable!)
            else if (!hasMapping)
            {
                color = ImVec4(0.3f, 0.3f, 0.3f, 1.0f);       // Dark gray
                colorHovered = ImVec4(0.4f, 0.4f, 0.4f, 1.0f); // Lighter on hover
                colorActive = ImVec4(0.5f, 0.5f, 0.5f, 1.0f);  // Even lighter when clicked
            }
            // Highlight if button is ON
            else if (map.currentValue > 0.5f)
            {
                color = getModeColor(map.mode, 0.9f);
                colorHovered = getModeColor(map.mode, 1.0f);
                colorActive = getModeColor(map.mode, 1.0f);
            }
            // Normal assigned button
            else
            {
                color = getModeColor(map.mode, 0.6f);
                colorHovered = getModeColor(map.mode, 0.7f);
                colorActive = getModeColor(map.mode, 0.8f);
            }
            
            ImGui::PushStyleColor(ImGuiCol_Button, color);
            ImGui::PushStyleColor(ImGuiCol_ButtonHovered, colorHovered);
            ImGui::PushStyleColor(ImGuiCol_ButtonActive, colorActive);
            
            // Button label showing number
            char label[16];
            snprintf(label, sizeof(label), "%d##btn", i + 1);
            
            // Left-click enters learn mode (ALWAYS clickable, even if unassigned!)
            if (ImGui::Button(label, ImVec2(buttonSize, buttonSize)))
            {
                learningIndex = i;
            }
            
            // Tooltips
            if (learningIndex == i)
            {
                ImGui::SetTooltip("Learning Button %d...\nPress a MIDI button to assign", i + 1);
            }
            else if (ImGui::IsItemHovered())
            {
                if (hasMapping)
                {
                    const char* modeName = map.mode == ButtonMode::Gate ? "Gate" :
                                           map.mode == ButtonMode::Toggle ? "Toggle" : "Trigger";
                    ImGui::SetTooltip("Button %d\nCC: %d\nMode: %s\nValue: %.1f\n\nClick to learn new CC",
                                      i + 1, map.midiCC, modeName, map.currentValue);
                }
                else
                {
                    ImGui::SetTooltip("Button %d\nNo MIDI CC assigned\n\nClick to learn CC", i + 1);
                }
            }
            
            ImGui::PopStyleColor(3);
            ImGui::PopID();
        }
    }
    
    ImGui::PopStyleVar();
    
    // Learning and mode controls below buttons
    if (learningIndex >= 0 && learningIndex < numActive)
    {
        ImGui::Spacing();
        ImGui::Spacing();
        ImGui::Text("Learning Button %d...", learningIndex + 1);
        if (ImGui::Button("Cancel Learning##cancel", ImVec2(150, 0)))
            learningIndex = -1;
        ImGui::SameLine();
        
        // Mode selector while learning
        auto& map = mappings[learningIndex];
        const char* modes[] = { "Gate", "Toggle", "Trigger" };
        int currentMode = (int)map.mode;
        ImGui::SetNextItemWidth(100);
        if (ImGui::Combo("##learnmode", &currentMode, modes, 3))
        {
            map.mode = (ButtonMode)currentMode;
            onModificationEnded();
        }
    }
    else
    {
        ImGui::Spacing();
        ImGui::TextDisabled("Click a button to learn its MIDI CC");
    }
}

void MIDIButtonsModuleProcessor::drawCompactList(int numActive, const std::function<void()>& onModificationEnded)
{
    ImGui::TextDisabled("Click 'Learn' then press a MIDI button/pad");
    ImGui::Spacing();
    
    for (int i = 0; i < numActive; ++i)
    {
        auto& map = mappings[i];
        ImGui::PushID(i);
        
        // Button indicator with mode color
        ImVec4 color = getModeColor(map.mode, 0.8f);
        ImGui::PushStyleColor(ImGuiCol_Text, color);
        ImGui::Text(map.currentValue > 0.5f ? "[X]" : "[ ]");
        ImGui::PopStyleColor();
        
        ImGui::SameLine();
        ImGui::Text("B%d", i + 1);
        ImGui::SameLine();
        ImGui::Text("CC:%3d", map.midiCC != -1 ? map.midiCC : 0);
        if (map.midiCC == -1)
        {
            ImGui::SameLine();
            ImGui::TextDisabled("(unassigned)");
        }
        
        ImGui::SameLine();
        
        // Learn button
        if (learningIndex == i)
        {
            ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(1.0f, 0.5f, 0.0f, 1.0f));
            ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(1.0f, 0.6f, 0.1f, 1.0f));
            if (ImGui::Button("Learning...##btn", ImVec2(90, 0)))
                learningIndex = -1;
            ImGui::PopStyleColor(2);
        }
        else
        {
            if (ImGui::Button("Learn##btn", ImVec2(90, 0)))
                learningIndex = i;
        }
        
        // Mode combo
        ImGui::SameLine();
        const char* modes[] = { "Gate", "Toggle", "Trigger" };
        int currentMode = (int)map.mode;
        ImGui::SetNextItemWidth(90);
        if (ImGui::Combo("##mode", &currentMode, modes, 3))
        {
            map.mode = (ButtonMode)currentMode;
            onModificationEnded();
        }
        
        ImGui::PopID();
    }
}

void MIDIButtonsModuleProcessor::drawTableView(int numActive, const std::function<void()>& onModificationEnded)
{
    ImGui::TextDisabled("Detailed view with all parameters");
    ImGui::Spacing();
    
    ImGuiTableFlags flags = ImGuiTableFlags_SizingFixedFit |
                            ImGuiTableFlags_NoHostExtendX |
                            ImGuiTableFlags_Borders |
                            ImGuiTableFlags_RowBg |
                            ImGuiTableFlags_Resizable;
    
    float rowHeight = ImGui::GetTextLineHeightWithSpacing() + 4;
    float tableHeight = rowHeight * (numActive + 1.5f);
    
    if (ImGui::BeginTable("##buttons_table", 5, flags, ImVec2(0, tableHeight)))
    {
        ImGui::TableSetupColumn("Button", ImGuiTableColumnFlags_WidthFixed, 60);
        ImGui::TableSetupColumn("CC", ImGuiTableColumnFlags_WidthFixed, 35);
        ImGui::TableSetupColumn("State", ImGuiTableColumnFlags_WidthFixed, 45);
        ImGui::TableSetupColumn("Learn", ImGuiTableColumnFlags_WidthFixed, 70);
        ImGui::TableSetupColumn("Mode", ImGuiTableColumnFlags_WidthFixed, 80);
        ImGui::TableHeadersRow();
        
        for (int i = 0; i < numActive; ++i)
        {
            auto& map = mappings[i];
            ImGui::PushID(i);
            
            ImGui::TableNextRow();
            
            // Column 0: Button number
            ImGui::TableNextColumn();
            ImVec4 color = getModeColor(map.mode, 0.9f);
            ImGui::PushStyleColor(ImGuiCol_Text, color);
            ImGui::Text("Button %d", i + 1);
            ImGui::PopStyleColor();
            
            // Column 1: CC number
            ImGui::TableNextColumn();
            if (map.midiCC != -1)
                ImGui::Text("%d", map.midiCC);
            else
                ImGui::TextDisabled("--");
            
            // Column 2: State
            ImGui::TableNextColumn();
            ImGui::Text(map.currentValue > 0.5f ? "ON" : "OFF");
            
            // Column 3: Learn button
            ImGui::TableNextColumn();
            if (learningIndex == i)
            {
                ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(1.0f, 0.5f, 0.0f, 1.0f));
                if (ImGui::Button("Learning##btn"))
                    learningIndex = -1;
                ImGui::PopStyleColor();
            }
            else
            {
                if (ImGui::Button("Learn##btn"))
                    learningIndex = i;
            }
            
            // Column 4: Mode
            ImGui::TableNextColumn();
            const char* modes[] = { "Gate", "Toggle", "Trigger" };
            int currentMode = (int)map.mode;
            ImGui::PushItemWidth(-1);
            if (ImGui::Combo("##mode", &currentMode, modes, 3))
            {
                map.mode = (ButtonMode)currentMode;
                onModificationEnded();
            }
            ImGui::PopItemWidth();
            
            ImGui::PopID();
        }
        
        ImGui::EndTable();
    }
}

void MIDIButtonsModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    juce::ignoreUnused(helpers);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\MIDIButtonsModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <array>

class MIDIButtonsModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_BUTTONS = 32;
    
    MIDIButtonsModuleProcessor();
    ~MIDIButtonsModuleProcessor() override = default;
    
    const juce::String getName() const override { return "MIDI Buttons"; }
    
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    std::vector<DynamicPinInfo> getDynamicOutputPins() const override;
    
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    enum class ButtonMode { Gate, Toggle, Trigger };
    enum class ViewMode { Visual, Compact, Table };
    
    struct ControlMapping
    {
        int midiCC = -1;  // -1 means unassigned
        float currentValue = 0.0f;
        ButtonMode mode = ButtonMode::Gate;
        bool toggleState = false;
        int triggerSamplesRemaining = 0;
    };
    
    std::array<ControlMapping, MAX_BUTTONS> mappings;
    int learningIndex = -1;  // Index of button currently in learn mode
    
#if defined(PRESET_CREATOR_UI)
    ViewMode viewMode = ViewMode::Visual;  // UI view mode
    
    // Preset UI state
    int selectedPresetIndex = -1;
    char presetNameBuffer[128] = {};
    juce::String activeControllerPresetName;  // Name of currently active preset
    
    void drawVisualButtons(int numActive, const std::function<void()>& onModificationEnded);
    void drawCompactList(int numActive, const std::function<void()>& onModificationEnded);
    void drawTableView(int numActive, const std::function<void()>& onModificationEnded);
    ImVec4 getModeColor(ButtonMode mode, float brightness) const;
#endif
    
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;
    juce::AudioParameterInt* numButtonsParam { nullptr };
    juce::AudioParameterInt* midiChannelParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\MIDICVModuleProcessor.cpp
================================================================================


#include "MIDICVModuleProcessor.h"

MIDICVModuleProcessor::MIDICVModuleProcessor()
    : ModuleProcessor(
        juce::AudioProcessor::BusesProperties()
            .withOutput("Main", juce::AudioChannelSet::discreteChannels(6), true)
            .withOutput("Mod", juce::AudioChannelSet::discreteChannels(64), true)
    ),
      dummyApvts(*this, nullptr, "DummyParams", createParameterLayout())
{
    // No parameters needed - this module is purely MIDI->CV conversion
    
    // Initialize last output values for telemetry
    lastOutputValues.resize(6);
    for (auto& val : lastOutputValues)
        val = std::make_unique<std::atomic<float>>(0.0f);
}

void MIDICVModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    // Reset MIDI state
    midiState = MIDIState();
    
    juce::Logger::writeToLog("[MIDI CV] Prepared to play at " + juce::String(sampleRate) + " Hz");
}

void MIDICVModuleProcessor::releaseResources()
{
}

void MIDICVModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    if (buffer.getNumChannels() < 6)
    {
        buffer.clear();
        return;
    }
    
    // --- NEW, MORE DETAILED LOGGING ---
    if (!midiMessages.isEmpty())
    {
        juce::Logger::writeToLog("[MIDI CV] Processing " + juce::String(midiMessages.getNumEvents()) + " incoming MIDI events.");
    }
    // --- END OF NEW LOGGING ---

    for (const auto metadata : midiMessages)
    {
        const auto msg = metadata.getMessage();
        
        // Use getDescription() for a detailed, human-readable log
        juce::Logger::writeToLog("[MIDI CV] Received: " + msg.getDescription());

        if (msg.isNoteOn())
        {
            midiState.currentNote = msg.getNoteNumber();
            midiState.currentVelocity = msg.getVelocity() / 127.0f;
            midiState.gateHigh = true;
        }
        else if (msg.isNoteOff())
        {
            if (msg.getNoteNumber() == midiState.currentNote)
            {
                midiState.gateHigh = false;
            }
        }
        else if (msg.isController())
        {
            if (msg.getControllerNumber() == 1) // Mod Wheel
            {
                midiState.modWheel = msg.getControllerValue() / 127.0f;
            }
        }
        else if (msg.isPitchWheel())
        {
            midiState.pitchBend = (msg.getPitchWheelValue() - 8192) / 8192.0f;
        }
        else if (msg.isAftertouch())
        {
            midiState.aftertouch = msg.getAfterTouchValue() / 127.0f;
        }
    }
    
    // Generate CV outputs for the entire block
    // Channel 0: Pitch CV (1V/octave)
    // Channel 1: Gate (0 or 1)
    // Channel 2: Velocity (0-1)
    // Channel 3: Mod Wheel (0-1)
    // Channel 4: Pitch Bend (-1 to +1)
    // Channel 5: Aftertouch (0-1)
    
    const int numSamples = buffer.getNumSamples();
    
    // Pitch CV
    const float pitchCv = midiState.currentNote >= 0 ? midiNoteToCv(midiState.currentNote) : 0.0f;
    buffer.getWritePointer(0)[0] = pitchCv;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(0)[i] = pitchCv;
    
    // Gate
    const float gateValue = midiState.gateHigh ? 1.0f : 0.0f;
    buffer.getWritePointer(1)[0] = gateValue;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(1)[i] = gateValue;
    
    // Velocity
    buffer.getWritePointer(2)[0] = midiState.currentVelocity;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(2)[i] = midiState.currentVelocity;
    
    // Mod Wheel
    buffer.getWritePointer(3)[0] = midiState.modWheel;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(3)[i] = midiState.modWheel;
    
    // Pitch Bend
    buffer.getWritePointer(4)[0] = midiState.pitchBend;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(4)[i] = midiState.pitchBend;
    
    // Aftertouch
    buffer.getWritePointer(5)[0] = midiState.aftertouch;
    for (int i = 1; i < numSamples; ++i)
        buffer.getWritePointer(5)[i] = midiState.aftertouch;
    
    // Update telemetry
    if (lastOutputValues.size() >= 6)
    {
        lastOutputValues[0]->store(pitchCv);
        lastOutputValues[1]->store(gateValue);
        lastOutputValues[2]->store(midiState.currentVelocity);
        lastOutputValues[3]->store(midiState.modWheel);
        lastOutputValues[4]->store(midiState.pitchBend);
        lastOutputValues[5]->store(midiState.aftertouch);
    }
}

float MIDICVModuleProcessor::midiNoteToCv(int noteNumber) const
{
    // 1V/octave standard: C4 (MIDI note 60) = 0V
    // Each semitone = 1/12 V
    return (noteNumber - 60) / 12.0f;
}

#if defined(PRESET_CREATOR_UI)

// Helper function for tooltip with help marker
static void HelpMarkerCV(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

void MIDICVModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&)
{
    ImGui::PushItemWidth(itemWidth);
    
    // === MIDI INPUT STATUS ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "MIDI Input Status");
    ImGui::Spacing();
    
    // Get current values from telemetry
    float pitchCV = lastOutputValues.size() > 0 ? lastOutputValues[0]->load() : 0.0f;
    float gateValue = lastOutputValues.size() > 1 ? lastOutputValues[1]->load() : 0.0f;
    float velocity = lastOutputValues.size() > 2 ? lastOutputValues[2]->load() : 0.0f;
    float modWheel = lastOutputValues.size() > 3 ? lastOutputValues[3]->load() : 0.0f;
    float pitchBend = lastOutputValues.size() > 4 ? lastOutputValues[4]->load() : 0.0f;
    float aftertouch = lastOutputValues.size() > 5 ? lastOutputValues[5]->load() : 0.0f;
    
    // Convert pitch CV back to MIDI note for display
    int midiNote = midiState.currentNote;
    bool hasNote = (midiNote >= 0);
    
    // === NOTE DISPLAY ===
    ImGui::Text("Note:");
    ImGui::SameLine();
    if (hasNote)
    {
        // Note name conversion (C4 = 60)
        static const char* noteNames[] = { "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B" };
        int octave = (midiNote / 12) - 1;
        const char* noteName = noteNames[midiNote % 12];
        
        ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.2f, 1.0f, 0.5f, 1.0f)); // Bright green
        ImGui::Text("%s%d (#%d)", noteName, octave, midiNote);
        ImGui::PopStyleColor();
    }
    else
    {
        ImGui::TextDisabled("---");
    }
    
    // === GATE INDICATOR ===
    ImGui::Text("Gate:");
    ImGui::SameLine();
    if (gateValue > 0.5f)
    {
        // Animated gate indicator
        float phase = (float)std::fmod(ImGui::GetTime() * 2.0, 1.0);
        float brightness = 0.6f + 0.4f * std::sin(phase * 6.28318f);
        ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f * brightness, 0.3f * brightness, 0.3f * brightness, 1.0f));
        ImGui::Text("ON");
        ImGui::PopStyleColor();
    }
    else
    {
        ImGui::TextDisabled("OFF");
    }
    
    ImGui::Spacing();
    
    // === LIVE VALUE DISPLAYS ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Live Values");
    ImGui::Spacing();
    
    // Velocity with progress bar
    ImGui::Text("Vel");
    ImGui::SameLine();
    ImGui::SetNextItemWidth(100);
    ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.55f, 0.7f, velocity).Value);
    ImGui::ProgressBar(velocity, ImVec2(0, 0), juce::String(velocity, 2).toRawUTF8());
    ImGui::PopStyleColor();
    ImGui::SameLine();
    HelpMarkerCV("MIDI Note Velocity (0-1)");
    
    // Mod Wheel with progress bar
    ImGui::Text("Mod");
    ImGui::SameLine();
    ImGui::SetNextItemWidth(100);
    ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.15f, 0.7f, modWheel).Value);
    ImGui::ProgressBar(modWheel, ImVec2(0, 0), juce::String(modWheel, 2).toRawUTF8());
    ImGui::PopStyleColor();
    ImGui::SameLine();
    HelpMarkerCV("Mod Wheel (CC#1, 0-1)");
    
    // Pitch Bend with centered bar
    ImGui::Text("Bend");
    ImGui::SameLine();
    ImGui::SetNextItemWidth(100);
    float normalizedBend = (pitchBend + 1.0f) / 2.0f; // -1..1 -> 0..1
    ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.0f, 0.7f, std::abs(pitchBend)).Value);
    ImGui::ProgressBar(normalizedBend, ImVec2(0, 0), juce::String(pitchBend, 2).toRawUTF8());
    ImGui::PopStyleColor();
    ImGui::SameLine();
    HelpMarkerCV("Pitch Bend (-1 to +1)");
    
    // Aftertouch with progress bar
    ImGui::Text("AT");
    ImGui::SameLine();
    ImGui::SetNextItemWidth(100);
    ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.85f, 0.7f, aftertouch).Value);
    ImGui::ProgressBar(aftertouch, ImVec2(0, 0), juce::String(aftertouch, 2).toRawUTF8());
    ImGui::PopStyleColor();
    ImGui::SameLine();
    HelpMarkerCV("Channel Aftertouch (0-1)");
    
    ImGui::Spacing();
    
    // === CV OUTPUT INFO ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "CV Output");
    ImGui::Spacing();
    
    ImGui::Text("Pitch CV: %.3f V", pitchCV);
    ImGui::SameLine();
    HelpMarkerCV("1V/octave standard\nC4 (MIDI note 60) = 0V");
    
    ImGui::PopItemWidth();
}

void MIDICVModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioOutputPin("Pitch", 0);
    helpers.drawAudioOutputPin("Gate", 1);
    helpers.drawAudioOutputPin("Velocity", 2);
    helpers.drawAudioOutputPin("Mod Wheel", 3);
    helpers.drawAudioOutputPin("Pitch Bend", 4);
    helpers.drawAudioOutputPin("Aftertouch", 5);
}
#endif

================================================================================
FILE: juce\Source\audio\modules\MIDICVModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <juce_audio_basics/juce_audio_basics.h>

/**
 * @brief MIDI to CV/Gate Converter Module
 * * Converts incoming MIDI messages to CV and Gate signals:
 * - Pitch: MIDI note number converted to 1V/octave standard
 * - Gate: High when note is held, low when released
 * - Velocity: MIDI velocity normalized to 0-1
 * - Mod Wheel: CC#1 normalized to 0-1
 * - Pitch Bend: Pitch bend wheel normalized to -1 to +1
 * - Aftertouch: Channel pressure normalized to 0-1
 * * This module allows MIDI keyboards and controllers to drive the modular synth.
 */
class MIDICVModuleProcessor : public ModuleProcessor
{
public:
    MIDICVModuleProcessor();
    ~MIDICVModuleProcessor() override = default;

    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages) override;
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    const juce::String getName() const override { return "MIDI CV"; }
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return dummyApvts; }

#if defined(PRESET_CREATOR_UI)
    // ADD THESE TWO FUNCTION DECLARATIONS
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    // Current MIDI state
    struct MIDIState
    {
        int currentNote = -1;        // -1 = no note playing
        float currentVelocity = 0.0f;
        float modWheel = 0.0f;
        float pitchBend = 0.0f;      // -1 to +1
        float aftertouch = 0.0f;
        bool gateHigh = false;
    } midiState;

    // Dummy APVTS to satisfy base class requirement
    juce::AudioProcessorValueTreeState dummyApvts;
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout() { return {}; }

    // Convert MIDI note number to CV (1V/octave, where C4 = 60 = 0V)
    float midiNoteToCv(int noteNumber) const;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(MIDICVModuleProcessor)
};

================================================================================
FILE: juce\Source\audio\modules\MIDIFadersModuleProcessor.cpp
================================================================================


#include "MIDIFadersModuleProcessor.h"
#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ControllerPresetManager.h"
#endif

juce::AudioProcessorValueTreeState::ParameterLayout MIDIFadersModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    layout.add(std::make_unique<juce::AudioParameterInt>("numFaders", "Number of Faders", 1, MAX_FADERS, 8));
    layout.add(std::make_unique<juce::AudioParameterInt>("midiChannel", "MIDI Channel", 0, 16, 0)); // 0 = Omni (all channels)
    return layout;
}

MIDIFadersModuleProcessor::MIDIFadersModuleProcessor()
    : ModuleProcessor(BusesProperties().withOutput("Outputs", juce::AudioChannelSet::discreteChannels(MAX_FADERS), true)),
      apvts(*this, nullptr, "MIDIFadersParams", createParameterLayout())
{
    numFadersParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numFaders"));
    midiChannelParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("midiChannel"));
    
    for (int i = 0; i < MAX_FADERS; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void MIDIFadersModuleProcessor::prepareToPlay(double, int)
{
    learningIndex = -1;  // Reset learn state
}

void MIDIFadersModuleProcessor::releaseResources()
{
}

void MIDIFadersModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    int numActive = numFadersParam ? numFadersParam->get() : MAX_FADERS;
    int channelFilter = midiChannelParam ? midiChannelParam->get() : 0; // 0 = Omni (all channels)
    
    // Process incoming MIDI CC messages
    for (const auto metadata : midiMessages)
    {
        auto msg = metadata.getMessage();
        
        // Channel filtering: If channel is set (not 0/Omni), only process messages from that channel
        if (channelFilter != 0 && msg.getChannel() != channelFilter)
            continue; // Skip messages from other channels
        
        if (!msg.isController()) continue;
        
        int ccNumber = msg.getControllerNumber();
        float ccValue = msg.getControllerValue() / 127.0f;
        
        // Handle MIDI Learn
        if (learningIndex != -1 && learningIndex < numActive)
        {
            mappings[learningIndex].midiCC = ccNumber;
            learningIndex = -1;  // Stop learning
        }
        
        // Update mapped faders
        for (int i = 0; i < numActive; ++i)
        {
            if (mappings[i].midiCC == ccNumber)
            {
                mappings[i].currentValue = juce::jmap(ccValue, mappings[i].minVal, mappings[i].maxVal);
            }
        }
    }
    
    // Write current values to output buffer
    for (int i = 0; i < MAX_FADERS; ++i)
    {
        float val = (i < numActive) ? mappings[i].currentValue : 0.0f;
        buffer.setSample(i, 0, val);
        
        // Fill rest of block with same value
        if (buffer.getNumSamples() > 1)
            juce::FloatVectorOperations::fill(buffer.getWritePointer(i) + 1, val, buffer.getNumSamples() - 1);
        
        lastOutputValues[i]->store(val);
    }
    
    // DEBUG: Log first 3 channel values periodically
    static int debugCounter = 0;
    if (debugCounter == 0 || debugCounter % 240 == 0)
    {
        juce::String dbgMsg = "[MIDI Faders CV Output #" + juce::String(debugCounter) + "] ";
        dbgMsg += "ch0=" + juce::String(mappings[0].currentValue, 3) + " ";
        dbgMsg += "ch1=" + juce::String(mappings[1].currentValue, 3) + " ";
        dbgMsg += "ch2=" + juce::String(mappings[2].currentValue, 3) + " | ";
        dbgMsg += "CC0=" + juce::String(mappings[0].midiCC) + " ";
        dbgMsg += "CC1=" + juce::String(mappings[1].midiCC) + " ";
        dbgMsg += "CC2=" + juce::String(mappings[2].midiCC);
        juce::Logger::writeToLog(dbgMsg);
    }
    debugCounter++;
}

juce::ValueTree MIDIFadersModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("MIDIFadersState");
    
    // Save the name of the controller preset that is currently active
    #if defined(PRESET_CREATOR_UI)
    vt.setProperty("controllerPreset", activeControllerPresetName, nullptr);
    #endif
    
    // Save the MIDI channel from the APVTS parameter
    if (midiChannelParam)
        vt.setProperty("midiChannel", midiChannelParam->get(), nullptr);
    
    // Save the actual mapping data
    for (int i = 0; i < MAX_FADERS; ++i)
    {
        juce::ValueTree mapping("Mapping");
        mapping.setProperty("index", i, nullptr);
        mapping.setProperty("cc", mappings[i].midiCC, nullptr);
        mapping.setProperty("min", mappings[i].minVal, nullptr);
        mapping.setProperty("max", mappings[i].maxVal, nullptr);
        vt.addChild(mapping, -1, nullptr);
    }
    return vt;
}

void MIDIFadersModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("MIDIFadersState"))
    {
        // Load the name of the controller preset
        #if defined(PRESET_CREATOR_UI)
        activeControllerPresetName = vt.getProperty("controllerPreset", "").toString();
        #endif
        
        // Load the MIDI channel and update the APVTS parameter
        if (midiChannelParam)
            *midiChannelParam = (int)vt.getProperty("midiChannel", 0);
        
        // Load the actual mapping data
        for (const auto& child : vt)
        {
            if (child.hasType("Mapping"))
            {
                int index = child.getProperty("index", -1);
                if (index >= 0 && index < MAX_FADERS)
                {
                    mappings[index].midiCC = child.getProperty("cc", -1);
                    mappings[index].minVal = child.getProperty("min", 0.0f);
                    mappings[index].maxVal = child.getProperty("max", 1.0f);
                }
            }
        }
    }
}

std::vector<DynamicPinInfo> MIDIFadersModuleProcessor::getDynamicOutputPins() const
{
    std::vector<DynamicPinInfo> pins;
    int numActive = numFadersParam ? numFadersParam->get() : MAX_FADERS;
    
    for (int i = 0; i < numActive; ++i)
    {
        juce::String label = "Fader " + juce::String(i + 1);
        pins.push_back(DynamicPinInfo(label, i, PinDataType::CV));
    }
    
    return pins;
}

#if defined(PRESET_CREATOR_UI)

// Helper function for tooltip with help marker
static void HelpMarker(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

void MIDIFadersModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);
    
    // === PRESET MANAGEMENT UI ===
    auto& presetManager = ControllerPresetManager::get();
    const auto& presetNames = presetManager.getPresetNamesFor(ControllerPresetManager::ModuleType::Faders);
    
    // UI SYNCHRONIZATION: On first draw after loading, find the index for the saved preset name
    if (activeControllerPresetName.isNotEmpty())
    {
        selectedPresetIndex = presetNames.indexOf(activeControllerPresetName);
        activeControllerPresetName = ""; // Clear so we only do this once
    }
    
    ImGui::Text("Controller Preset");
    
    // Create a C-style array of char pointers for the ImGui combo box
    std::vector<const char*> names;
    for (const auto& name : presetNames)
        names.push_back(name.toRawUTF8());
    
    // Draw the dropdown menu
    if (ImGui::Combo("##PresetCombo", &selectedPresetIndex, names.data(), (int)names.size()))
    {
        // When a preset is selected, load it and update our state
        if (selectedPresetIndex >= 0 && selectedPresetIndex < (int)presetNames.size())
        {
            activeControllerPresetName = presetNames[selectedPresetIndex];
            juce::ValueTree presetData = presetManager.loadPreset(ControllerPresetManager::ModuleType::Faders, activeControllerPresetName);
            setExtraStateTree(presetData);
            onModificationEnded(); // Create an undo state
        }
    }
    
    // "Save" button and text input popup
    ImGui::SameLine();
    if (ImGui::Button("Save##preset"))
    {
        ImGui::OpenPopup("Save Fader Preset");
    }
    
    // "Delete" button
    ImGui::SameLine();
    if (ImGui::Button("Delete##preset"))
    {
        if (selectedPresetIndex >= 0 && selectedPresetIndex < (int)presetNames.size())
        {
            presetManager.deletePreset(ControllerPresetManager::ModuleType::Faders, presetNames[selectedPresetIndex]);
            selectedPresetIndex = -1; // Deselect
            activeControllerPresetName = ""; // Clear active name
        }
    }
    
    if (ImGui::BeginPopup("Save Fader Preset"))
    {
        ImGui::InputText("Preset Name", presetNameBuffer, sizeof(presetNameBuffer));
        if (ImGui::Button("Save New##confirm"))
        {
            juce::String name(presetNameBuffer);
            if (name.isNotEmpty())
            {
                presetManager.savePreset(ControllerPresetManager::ModuleType::Faders, name, getExtraStateTree());
                activeControllerPresetName = name; // Mark this new preset as active
                selectedPresetIndex = presetNames.indexOf(activeControllerPresetName); // Resync UI
                ImGui::CloseCurrentPopup();
            }
        }
        ImGui::SameLine();
        if (ImGui::Button("Cancel##preset"))
        {
            ImGui::CloseCurrentPopup();
        }
        ImGui::EndPopup();
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === HEADER SECTION ===
    // (No SeparatorText - node already has title bar, and it extends beyond bounds)
    
    // Number of faders control
    if (numFadersParam)
    {
        int numFaders = numFadersParam->get();
        ImGui::SetNextItemWidth(120);
        if (ImGui::SliderInt("##numfaders", &numFaders, 1, MAX_FADERS))
        {
            *numFadersParam = numFaders;
            onModificationEnded();
        }
        ImGui::SameLine();
        ImGui::Text("Faders");
        ImGui::SameLine();
        HelpMarker("Number of active faders (1-16). Drag to adjust.");
    }
    
    // MIDI Channel filter control
    if (midiChannelParam)
    {
        int channel = midiChannelParam->get();
        ImGui::SetNextItemWidth(120);
        if (ImGui::SliderInt("##midichannel", &channel, 0, 16))
        {
            *midiChannelParam = channel;
            onModificationEnded();
        }
        ImGui::SameLine();
        ImGui::Text(channel == 0 ? "Ch: Omni (All)" : juce::String("Ch: " + juce::String(channel)).toRawUTF8());
        ImGui::SameLine();
        HelpMarker("MIDI Channel filter. 0 = Omni (all channels), 1-16 = specific channel only.");
    }
    
    // View mode selector
    ImGui::Spacing();
    if (ImGui::RadioButton("Visual", viewMode == ViewMode::Visual)) viewMode = ViewMode::Visual;
    ImGui::SameLine();
    if (ImGui::RadioButton("Compact", viewMode == ViewMode::Compact)) viewMode = ViewMode::Compact;
    ImGui::SameLine();
    if (ImGui::RadioButton("Table", viewMode == ViewMode::Table)) viewMode = ViewMode::Table;
    ImGui::SameLine();
    HelpMarker("Visual: Vertical sliders with color coding\nCompact: Linear list view\nTable: Detailed table view");
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === DRAW SELECTED VIEW ===
    int numActive = numFadersParam ? numFadersParam->get() : MAX_FADERS;
    
    switch (viewMode)
    {
        case ViewMode::Visual:
            drawVisualFaders(numActive, onModificationEnded);
            break;
        case ViewMode::Compact:
            drawCompactList(numActive, onModificationEnded);
            break;
        case ViewMode::Table:
            drawTableView(numActive, onModificationEnded);
            break;
    }
    
    ImGui::PopItemWidth();
}

void MIDIFadersModuleProcessor::drawVisualFaders(int numActive, const std::function<void()>& onModificationEnded)
{
    // Draw vertical sliders in rows (8 per row)
    const int fadersPerRow = 8;
    const float faderWidth = 22.0f;
    const float faderHeight = 140.0f;
    const float spacing = 4.0f;
    
    ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));
    
    for (int row = 0; row < (numActive + fadersPerRow - 1) / fadersPerRow; ++row)
    {
        if (row > 0) ImGui::Spacing();
        
        ImGui::BeginGroup();
        
        // Draw faders in this row
        for (int col = 0; col < fadersPerRow; ++col)
        {
            int i = row * fadersPerRow + col;
            if (i >= numActive) break;
            
            if (col > 0) ImGui::SameLine();
            
            auto& map = mappings[i];
            ImGui::PushID(i);
            
            // Color coding using HSV
            float hue = static_cast<float>(i) / static_cast<float>(MAX_FADERS);
            ImVec4 colorBg = ImColor::HSV(hue, 0.5f, 0.5f);
            ImVec4 colorHovered = ImColor::HSV(hue, 0.6f, 0.6f);
            ImVec4 colorActive = ImColor::HSV(hue, 0.7f, 0.7f);
            ImVec4 colorGrab = ImColor::HSV(hue, 0.9f, 0.9f);
            
            // Special color for learning state
            if (learningIndex == i)
            {
                colorBg = ImVec4(1.0f, 0.5f, 0.0f, 0.8f);      // Orange
                colorHovered = ImVec4(1.0f, 0.6f, 0.1f, 0.9f);
                colorActive = ImVec4(1.0f, 0.7f, 0.2f, 1.0f);
                colorGrab = ImVec4(1.0f, 0.8f, 0.3f, 1.0f);
            }
            
            ImGui::PushStyleColor(ImGuiCol_FrameBg, colorBg);
            ImGui::PushStyleColor(ImGuiCol_FrameBgHovered, colorHovered);
            ImGui::PushStyleColor(ImGuiCol_FrameBgActive, colorActive);
            ImGui::PushStyleColor(ImGuiCol_SliderGrab, colorGrab);
            
            // Vertical slider
            float displayValue = map.currentValue;
            bool hasMapping = (map.midiCC != -1);
            
            if (!hasMapping)
                ImGui::BeginDisabled();
            
            if (ImGui::VSliderFloat("##fader", ImVec2(faderWidth, faderHeight), &displayValue, 
                                     map.minVal, map.maxVal, ""))
            {
                // Manual control (not recommended for MIDI input, but allows testing)
                map.currentValue = displayValue;
            }
            
            // Tooltip showing value and CC
            if (ImGui::IsItemActive() || ImGui::IsItemHovered())
            {
                ImGui::SetTooltip("Fader %d\nCC: %d\nValue: %.3f\nRange: %.1f - %.1f", 
                                  i + 1, map.midiCC, map.currentValue, map.minVal, map.maxVal);
            }
            
            if (!hasMapping)
            {
                ImGui::EndDisabled();
                if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenDisabled))
                    ImGui::SetTooltip("Fader %d\nNo MIDI CC assigned\nClick Learn button below", i + 1);
            }
            
            ImGui::PopStyleColor(4);
            ImGui::PopID();
        }
        
        ImGui::EndGroup();
        
        // Draw labels and learn buttons below faders
        for (int col = 0; col < fadersPerRow; ++col)
        {
            int i = row * fadersPerRow + col;
            if (i >= numActive) break;
            
            if (col > 0) ImGui::SameLine();
            
            auto& map = mappings[i];
            ImGui::PushID(i + 1000); // Different ID space
            
            ImGui::BeginGroup();
            
            // Label with CC number
            if (map.midiCC != -1)
            {
                ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.8f, 1.0f, 0.8f, 1.0f)); // Light green
                ImGui::Text("F%d", i + 1);
                ImGui::Text("CC%d", map.midiCC);
                ImGui::PopStyleColor();
            }
            else
            {
                ImGui::TextDisabled("F%d", i + 1);
                ImGui::TextDisabled("---");
            }
            
            // Learn button (smaller for visual mode)
            if (learningIndex == i)
            {
                ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(1.0f, 0.5f, 0.0f, 1.0f));
                ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(1.0f, 0.6f, 0.1f, 1.0f));
                if (ImGui::Button("Stop##btn", ImVec2(faderWidth, 0)))
                    learningIndex = -1;
                ImGui::PopStyleColor(2);
            }
            else
            {
                if (ImGui::Button("Lrn##btn", ImVec2(faderWidth, 0)))
                    learningIndex = i;
            }
            
            ImGui::EndGroup();
            ImGui::PopID();
        }
    }
    
    ImGui::PopStyleVar();
}

void MIDIFadersModuleProcessor::drawCompactList(int numActive, const std::function<void()>& onModificationEnded)
{
    ImGui::TextDisabled("Click 'Learn' then move a MIDI control");
    ImGui::Spacing();
    
    for (int i = 0; i < numActive; ++i)
    {
        auto& map = mappings[i];
        ImGui::PushID(i);
        
        // Fader label with live value indicator
        float normalizedValue = (map.maxVal != map.minVal) ? 
            (map.currentValue - map.minVal) / (map.maxVal - map.minVal) : 0.0f;
        normalizedValue = juce::jlimit(0.0f, 1.0f, normalizedValue);
        
        ImGui::Text("F%d", i + 1);
        ImGui::SameLine();
        
        // Value progress bar
        ImGui::SetNextItemWidth(60);
        float hue = static_cast<float>(i) / static_cast<float>(MAX_FADERS);
        ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(hue, 0.7f, 0.7f).Value);
        ImGui::ProgressBar(normalizedValue, ImVec2(0, 0), "");
        ImGui::PopStyleColor();
        
        ImGui::SameLine();
        ImGui::Text("CC:%3d", map.midiCC != -1 ? map.midiCC : 0);
        if (map.midiCC == -1)
        {
            ImGui::SameLine();
            ImGui::TextDisabled("(unassigned)");
        }
        
        ImGui::SameLine();
        
        // Learn button with visual feedback
        if (learningIndex == i)
        {
            ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(1.0f, 0.5f, 0.0f, 1.0f));
            ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(1.0f, 0.6f, 0.1f, 1.0f));
            if (ImGui::Button("Learning...##btn", ImVec2(90, 0)))
                learningIndex = -1;
            ImGui::PopStyleColor(2);
        }
        else
        {
            if (ImGui::Button("Learn##btn", ImVec2(90, 0)))
                learningIndex = i;
        }
        
        // Range control on same line
        ImGui::SameLine();
        ImGui::SetNextItemWidth(140);
        ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp;
        if (ImGui::DragFloatRange2("##range", &map.minVal, &map.maxVal, 0.01f, -10.0f, 10.0f, 
                                    "%.1f", "%.1f", flags))
        {
            onModificationEnded();
        }
        if (ImGui::IsItemHovered())
            ImGui::SetTooltip("Min: %.2f, Max: %.2f", map.minVal, map.maxVal);
        
        ImGui::PopID();
    }
}

void MIDIFadersModuleProcessor::drawTableView(int numActive, const std::function<void()>& onModificationEnded)
{
    ImGui::TextDisabled("Detailed view with all parameters");
    ImGui::Spacing();
    
    // CRITICAL: NoHostExtendX requires NO ScrollX/ScrollY!
    // Solution: Use fixed outer height, no -FLT_MIN in cells
    ImGuiTableFlags flags = ImGuiTableFlags_SizingFixedFit |     // Auto-fit columns to content
                            ImGuiTableFlags_NoHostExtendX |      // Don't extend beyond available width  
                            ImGuiTableFlags_Borders | 
                            ImGuiTableFlags_RowBg | 
                            ImGuiTableFlags_Resizable;
    
    // Fixed height outer size (NO ScrollY flag, just clip content)
    float rowHeight = ImGui::GetTextLineHeightWithSpacing() + 4;
    float tableHeight = rowHeight * (numActive + 1.5f);  // +1.5 for header + padding
    
    if (ImGui::BeginTable("##faders_table", 6, flags, ImVec2(0, tableHeight)))
    {
        // All columns use WidthFixed (required for NoHostExtendX to work)
        ImGui::TableSetupColumn("Fader", ImGuiTableColumnFlags_WidthFixed, 50);
        ImGui::TableSetupColumn("CC", ImGuiTableColumnFlags_WidthFixed, 30);
        ImGui::TableSetupColumn("Value", ImGuiTableColumnFlags_WidthFixed, 55);
        ImGui::TableSetupColumn("Learn", ImGuiTableColumnFlags_WidthFixed, 70);
        ImGui::TableSetupColumn("Min", ImGuiTableColumnFlags_WidthFixed, 45);
        ImGui::TableSetupColumn("Max", ImGuiTableColumnFlags_WidthFixed, 45);
        ImGui::TableHeadersRow();
        
        // Draw rows
        for (int i = 0; i < numActive; ++i)
        {
            auto& map = mappings[i];
            ImGui::PushID(i);
            
            ImGui::TableNextRow();
            
            // Column 0: Fader number
            ImGui::TableNextColumn();
            float hue = static_cast<float>(i) / static_cast<float>(MAX_FADERS);
            ImGui::PushStyleColor(ImGuiCol_Text, ImColor::HSV(hue, 0.8f, 1.0f).Value);
            ImGui::Text("Fader %d", i + 1);
            ImGui::PopStyleColor();
            
            // Column 1: CC number
            ImGui::TableNextColumn();
            if (map.midiCC != -1)
                ImGui::Text("%d", map.midiCC);
            else
                ImGui::TextDisabled("--");
            
            // Column 2: Current value
            ImGui::TableNextColumn();
            ImGui::Text("%.3f", map.currentValue);
            
            // Column 3: Learn button (NO -FLT_MIN, let column width control it)
            ImGui::TableNextColumn();
            if (learningIndex == i)
            {
                ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(1.0f, 0.5f, 0.0f, 1.0f));
                if (ImGui::Button("Learning##btn"))  // ##btn ensures unique ID with PushID(i)
                    learningIndex = -1;
                ImGui::PopStyleColor();
            }
            else
            {
                if (ImGui::Button("Learn##btn"))  // ##btn ensures unique ID with PushID(i)
                    learningIndex = i;
            }
            
            // Column 4: Min value (NO SetNextItemWidth, let column control it)
            ImGui::TableNextColumn();
            ImGui::PushItemWidth(-1);  // -1 = fill available width in THIS cell
            if (ImGui::DragFloat("##min", &map.minVal, 0.01f, -10.0f, map.maxVal, "%.1f"))
                onModificationEnded();
            ImGui::PopItemWidth();
            
            // Column 5: Max value (NO SetNextItemWidth, let column control it)
            ImGui::TableNextColumn();
            ImGui::PushItemWidth(-1);  // -1 = fill available width in THIS cell
            if (ImGui::DragFloat("##max", &map.maxVal, 0.01f, map.minVal, 10.0f, "%.1f"))
                onModificationEnded();
            ImGui::PopItemWidth();
            
            ImGui::PopID();
        }
        
        ImGui::EndTable();
    }
}

void MIDIFadersModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Pins are drawn by the node editor automatically based on getIoPins()
    // This function is intentionally empty to avoid duplicate pin rendering
    juce::ignoreUnused(helpers);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\MIDIFadersModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <array>

class MIDIFadersModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_FADERS = 16;
    
    MIDIFadersModuleProcessor();
    ~MIDIFadersModuleProcessor() override = default;
    
    const juce::String getName() const override { return "MIDI Faders"; }
    
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    std::vector<DynamicPinInfo> getDynamicOutputPins() const override;
    
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    enum class ViewMode { Visual, Compact, Table };
    
    struct ControlMapping
    {
        int midiCC = -1;  // -1 means unassigned
        float minVal = 0.0f;
        float maxVal = 1.0f;
        float currentValue = 0.0f;
    };
    
    std::array<ControlMapping, MAX_FADERS> mappings;
    int learningIndex = -1;  // Index of fader currently in learn mode
    
#if defined(PRESET_CREATOR_UI)
    ViewMode viewMode = ViewMode::Visual;  // UI view mode
    
    // Preset UI state
    int selectedPresetIndex = -1;
    char presetNameBuffer[128] = {};
    juce::String activeControllerPresetName;  // Name of currently active preset
    
    void drawVisualFaders(int numActive, const std::function<void()>& onModificationEnded);
    void drawCompactList(int numActive, const std::function<void()>& onModificationEnded);
    void drawTableView(int numActive, const std::function<void()>& onModificationEnded);
#endif
    
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;
    juce::AudioParameterInt* numFadersParam { nullptr };
    juce::AudioParameterInt* midiChannelParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\MIDIJogWheelModuleProcessor.cpp
================================================================================


#include "MIDIJogWheelModuleProcessor.h"
#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ControllerPresetManager.h"
#endif

juce::AudioProcessorValueTreeState::ParameterLayout MIDIJogWheelModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    layout.add(std::make_unique<juce::AudioParameterChoice>("increment", "Increment", juce::StringArray{"0.001", "0.01", "0.1", "1.0", "10.0", "100.0"}, 2)); // Default to 0.1
    layout.add(std::make_unique<juce::AudioParameterFloat>("resetValue", "Reset Value", -100000.0f, 100000.0f, 0.0f));
    layout.add(std::make_unique<juce::AudioParameterInt>("midiChannel", "MIDI Channel", 0, 16, 1)); // Default to Channel 1
    return layout;
}

MIDIJogWheelModuleProcessor::MIDIJogWheelModuleProcessor()
    : ModuleProcessor(BusesProperties().withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "MIDIJogWheelParams", createParameterLayout())
{
    incrementParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("increment"));
    resetValueParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("resetValue"));
    midiChannelParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("midiChannel"));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void MIDIJogWheelModuleProcessor::prepareToPlay(double, int)
{
    isLearning = false;
    mapping.lastRelativeValue = -1;
}

void MIDIJogWheelModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    int channelFilter = midiChannelParam ? midiChannelParam->get() : 0;
    static const float increments[] = {0.001f, 0.01f, 0.1f, 1.0f, 10.0f, 100.0f};
    float incrementSize = increments[incrementParam->getIndex()];

    for (const auto metadata : midiMessages)
    {
        auto msg = metadata.getMessage();
        
        // Channel filtering
        if (channelFilter != 0 && msg.getChannel() != channelFilter)
            continue;
        
        if (!msg.isController()) continue;
        
        int ccNumber = msg.getControllerNumber();
        int value = msg.getControllerValue();
        
        // Learn mode: capture the first CC we see
        if (isLearning)
        {
            mapping.midiCC = ccNumber;
            isLearning = false;
            mapping.lastRelativeValue = -1; // Reset delta calculation
        }
        
        // Process the learned/assigned CC
        if (mapping.midiCC != -1 && ccNumber == mapping.midiCC)
        {
            // DELTA CALCULATION: This is the key to making encoders work!
            if (mapping.lastRelativeValue != -1)
            {
                // Calculate the change from last value
                int delta = value - mapping.lastRelativeValue;
                
                // Handle wraparound (encoder going from 127 to 0 or 0 to 127)
                if (delta > 64)
                    delta -= 128;  // e.g., 127 -> 2 = -3, not +129
                else if (delta < -64)
                    delta += 128;  // e.g., 2 -> 127 = +3, not -125
                
                // Apply the delta scaled by increment size
                mapping.currentValue += (float)delta * incrementSize;
            }
            
            // Store current value for next comparison
            mapping.lastRelativeValue = value;
        }
    }
    
    // Write output
    buffer.setSample(0, 0, mapping.currentValue);
    if (buffer.getNumSamples() > 1)
        juce::FloatVectorOperations::fill(buffer.getWritePointer(0) + 1, mapping.currentValue, buffer.getNumSamples() - 1);
    
    lastOutputValues[0]->store(mapping.currentValue);
}

juce::ValueTree MIDIJogWheelModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("MIDIJogWheelState");
    
    #if defined(PRESET_CREATOR_UI)
    vt.setProperty("controllerPreset", activeControllerPresetName, nullptr);
    #endif
    
    if (midiChannelParam)
        vt.setProperty("midiChannel", midiChannelParam->get(), nullptr);
    
    vt.setProperty("midiCC", mapping.midiCC, nullptr);
    vt.setProperty("currentValue", mapping.currentValue, nullptr);
    return vt;
}

void MIDIJogWheelModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("MIDIJogWheelState"))
    {
        #if defined(PRESET_CREATOR_UI)
        activeControllerPresetName = vt.getProperty("controllerPreset", "").toString();
        #endif
        
        if (midiChannelParam)
            *midiChannelParam = (int)vt.getProperty("midiChannel", 1);
        
        mapping.midiCC = vt.getProperty("midiCC", -1);
        mapping.currentValue = vt.getProperty("currentValue", 0.0f);
        mapping.lastRelativeValue = -1; // Reset delta tracking on load
    }
}

std::vector<DynamicPinInfo> MIDIJogWheelModuleProcessor::getDynamicOutputPins() const
{
    std::vector<DynamicPinInfo> pins;
    pins.push_back(DynamicPinInfo("Value", 0, PinDataType::CV));
    return pins;
}

#if defined(PRESET_CREATOR_UI)

static void HelpMarker(const char* desc)
{
    ImGui::SameLine();
    ImGui::TextDisabled("(?)");
    if (ImGui::IsItemHovered())
    {
        ImGui::BeginTooltip();
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

void MIDIJogWheelModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);
    
    // === PRESET MANAGEMENT UI ===
    auto& presetManager = ControllerPresetManager::get();
    const auto& presetNames = presetManager.getPresetNamesFor(ControllerPresetManager::ModuleType::JogWheel);
    
    if (activeControllerPresetName.isNotEmpty())
    {
        selectedPresetIndex = presetNames.indexOf(activeControllerPresetName);
        activeControllerPresetName = "";
    }
    
    ImGui::Text("Controller Preset");
    
    std::vector<const char*> names;
    for (const auto& name : presetNames)
        names.push_back(name.toRawUTF8());
    
    if (ImGui::Combo("##PresetCombo", &selectedPresetIndex, names.data(), (int)names.size()))
    {
        if (selectedPresetIndex >= 0 && selectedPresetIndex < (int)presetNames.size())
        {
            activeControllerPresetName = presetNames[selectedPresetIndex];
            juce::ValueTree presetData = presetManager.loadPreset(ControllerPresetManager::ModuleType::JogWheel, activeControllerPresetName);
            setExtraStateTree(presetData);
            onModificationEnded();
        }
    }
    
    ImGui::SameLine();
    if (ImGui::Button("Save##preset"))
        ImGui::OpenPopup("Save JogWheel Preset");
    
    ImGui::SameLine();
    if (ImGui::Button("Delete##preset"))
    {
        if (selectedPresetIndex >= 0 && selectedPresetIndex < (int)presetNames.size())
        {
            presetManager.deletePreset(ControllerPresetManager::ModuleType::JogWheel, presetNames[selectedPresetIndex]);
            selectedPresetIndex = -1;
            activeControllerPresetName = "";
        }
    }
    
    if (ImGui::BeginPopup("Save JogWheel Preset"))
    {
        ImGui::InputText("Preset Name", presetNameBuffer, sizeof(presetNameBuffer));
        if (ImGui::Button("Save New##confirm"))
        {
            juce::String name(presetNameBuffer);
            if (name.isNotEmpty())
            {
                presetManager.savePreset(ControllerPresetManager::ModuleType::JogWheel, name, getExtraStateTree());
                activeControllerPresetName = name;
                selectedPresetIndex = presetNames.indexOf(activeControllerPresetName);
                ImGui::CloseCurrentPopup();
            }
        }
        ImGui::SameLine();
        if (ImGui::Button("Cancel##preset"))
            ImGui::CloseCurrentPopup();
        ImGui::EndPopup();
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === HEADER ===
    ImGui::Text("MIDI Jog Wheel / Infinite Encoder");
    ImGui::SameLine();
    HelpMarker("Uses delta calculation for smooth infinite rotation.\nWorks with encoders that send changing CC values.");
    
    // === STATUS & LEARN ===
    if (mapping.midiCC != -1)
    {
        ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.5f, 1.0f, 0.5f, 1.0f));
        ImGui::Text("Assigned to CC %d", mapping.midiCC);
        ImGui::PopStyleColor();
    }
    else
    {
        ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 0.5f, 0.5f, 1.0f));
        ImGui::Text("Not Assigned");
        ImGui::PopStyleColor();
    }
    
    ImGui::Spacing();
    
    if (isLearning)
    {
        ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(1.0f, 0.6f, 0.0f, 1.0f));
        if (ImGui::Button("Learning... (turn jog wheel)", ImVec2(itemWidth, 0)))
            isLearning = false;
        ImGui::PopStyleColor();
    }
    else
    {
        if (ImGui::Button("Learn MIDI CC", ImVec2(itemWidth, 0)))
        {
            isLearning = true;
            mapping.lastRelativeValue = -1;
        }
    }
    ImGui::SameLine();
    HelpMarker("Click, then turn your jog wheel to assign it.\nWorks with any encoder CC (82, 86, etc.)");
    
    // MIDI Channel
    if (midiChannelParam)
    {
        int channel = midiChannelParam->get();
        ImGui::SetNextItemWidth(120);
        if (ImGui::SliderInt("##midichannel", &channel, 0, 16))
        {
            *midiChannelParam = channel;
            onModificationEnded();
        }
        ImGui::SameLine();
        ImGui::Text(channel == 0 ? "Ch: Omni (All)" : juce::String("Ch: " + juce::String(channel)).toRawUTF8());
        ImGui::SameLine();
        HelpMarker("MIDI Channel. 0 = Omni, 1-16 = specific channel.");
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === CONFIGURATION ===
    ImGui::Text("Configuration");
    
    int incrementIdx = incrementParam->getIndex();
    const char* incrementNames[] = { "0.001", "0.01", "0.1", "1.0", "10.0", "100.0" };
    ImGui::SetNextItemWidth(itemWidth);
    if (ImGui::Combo("Increment", &incrementIdx, incrementNames, 6))
    {
        *incrementParam = incrementIdx;
        onModificationEnded();
    }
    ImGui::SameLine();
    HelpMarker("Step size per tick. Start with 0.1 for testing.");
    
    float resetVal = resetValueParam->get();
    ImGui::SetNextItemWidth(itemWidth);
    if (ImGui::InputFloat("Reset Value", &resetVal))
        *resetValueParam = resetVal;
    if (ImGui::IsItemDeactivatedAfterEdit())
        onModificationEnded();
    
    if (ImGui::Button("Reset to Value", ImVec2(itemWidth, 0)))
    {
        mapping.currentValue = resetValueParam->get();
        onModificationEnded();
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === VALUE DISPLAY ===
    ImGui::Separator();
    ImGui::Text("Current Value: %.3f", mapping.currentValue);
    
    // Circular display
    const float canvasWidth = juce::jmin(itemWidth, 150.0f);
    const ImVec2 canvasSize(canvasWidth, canvasWidth);
    ImVec2 p0 = ImGui::GetCursorScreenPos();
    ImVec2 center(p0.x + canvasSize.x * 0.5f, p0.y + canvasSize.y * 0.5f);
    float radius = canvasSize.x * 0.42f;
    auto* drawList = ImGui::GetWindowDrawList();
    
    drawList->PushClipRect(p0, ImVec2(p0.x + canvasSize.x, p0.y + canvasSize.y), true);
    drawList->AddCircleFilled(center, radius + 4.0f, IM_COL32(30, 30, 30, 255), 64);
    drawList->AddCircle(center, radius, IM_COL32(100, 100, 100, 255), 64, 2.0f);
    
    float normalizedValue = std::fmod(mapping.currentValue, 1.0f);
    if (normalizedValue < 0.0f) normalizedValue += 1.0f;
    
    float angle = normalizedValue * juce::MathConstants<float>::twoPi - juce::MathConstants<float>::halfPi;
    ImVec2 handEnd(center.x + std::cos(angle) * radius * 0.85f, 
                   center.y + std::sin(angle) * radius * 0.85f);
    drawList->AddLine(center, handEnd, IM_COL32(100, 180, 255, 255), 4.0f);
    drawList->AddCircleFilled(center, 6.0f, IM_COL32(100, 180, 255, 255));
    
    for (int i = 0; i < 4; ++i)
    {
        float tickAngle = (i * juce::MathConstants<float>::halfPi) - juce::MathConstants<float>::halfPi;
        ImVec2 tickStart(center.x + std::cos(tickAngle) * (radius - 8.0f),
                        center.y + std::sin(tickAngle) * (radius - 8.0f));
        ImVec2 tickEnd(center.x + std::cos(tickAngle) * radius,
                      center.y + std::sin(tickAngle) * radius);
        drawList->AddLine(tickStart, tickEnd, IM_COL32(120, 120, 120, 255), 2.0f);
    }
    
    drawList->PopClipRect();
    ImGui::InvisibleButton("##jogwheel", canvasSize);
    
    ImGui::PopItemWidth();
}

void MIDIJogWheelModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioOutputPin("Value", 0);
}

#endif


================================================================================
FILE: juce\Source\audio\modules\MIDIJogWheelModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"

class MIDIJogWheelModuleProcessor : public ModuleProcessor
{
public:
    MIDIJogWheelModuleProcessor();
    ~MIDIJogWheelModuleProcessor() override = default;
    
    const juce::String getName() const override { return "MIDI Jog Wheel"; }
    
    void prepareToPlay(double, int) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    std::vector<DynamicPinInfo> getDynamicOutputPins() const override;
    
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    struct ControlMapping
    {
        int midiCC = -1;         // The main CC to track (learn mode)
        float currentValue = 0.0f;
        int lastRelativeValue = -1;  // For delta calculation
    };
    
    ControlMapping mapping;
    bool isLearning = false;
    
#if defined(PRESET_CREATOR_UI)
    int selectedPresetIndex = -1;
    char presetNameBuffer[128] = {};
    juce::String activeControllerPresetName;
#endif
    
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;

    juce::AudioParameterChoice* incrementParam { nullptr };
    juce::AudioParameterFloat* resetValueParam { nullptr };
    juce::AudioParameterInt* midiChannelParam { nullptr };
};


================================================================================
FILE: juce\Source\audio\modules\MIDIKnobsModuleProcessor.cpp
================================================================================


#include "MIDIKnobsModuleProcessor.h"
#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ControllerPresetManager.h"
#endif

juce::AudioProcessorValueTreeState::ParameterLayout MIDIKnobsModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    layout.add(std::make_unique<juce::AudioParameterInt>("numKnobs", "Number of Knobs", 1, MAX_KNOBS, 8));
    layout.add(std::make_unique<juce::AudioParameterInt>("midiChannel", "MIDI Channel", 0, 16, 0)); // 0 = Omni
    return layout;
}

MIDIKnobsModuleProcessor::MIDIKnobsModuleProcessor()
    : ModuleProcessor(BusesProperties().withOutput("Outputs", juce::AudioChannelSet::discreteChannels(MAX_KNOBS), true)),
      apvts(*this, nullptr, "MIDIKnobsParams", createParameterLayout())
{
    numKnobsParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numKnobs"));
    midiChannelParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("midiChannel"));
    
    for (int i = 0; i < MAX_KNOBS; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void MIDIKnobsModuleProcessor::prepareToPlay(double, int)
{
    learningIndex = -1;  // Reset learn state
}

void MIDIKnobsModuleProcessor::releaseResources()
{
}

void MIDIKnobsModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    int numActive = numKnobsParam ? numKnobsParam->get() : MAX_KNOBS;
    int channelFilter = midiChannelParam ? midiChannelParam->get() : 0;
    
    // Process incoming MIDI CC messages
    for (const auto metadata : midiMessages)
    {
        auto msg = metadata.getMessage();
        
        // Channel filtering: If channel is set (not 0/Omni), only process messages from that channel
        if (channelFilter != 0 && msg.getChannel() != channelFilter)
            continue;
        
        if (!msg.isController()) continue;
        
        int ccNumber = msg.getControllerNumber();
        float ccValue = msg.getControllerValue() / 127.0f;
        
        // Handle MIDI Learn
        if (learningIndex != -1 && learningIndex < numActive)
        {
            mappings[learningIndex].midiCC = ccNumber;
            learningIndex = -1;  // Stop learning
        }
        
        // Update mapped knobs
        for (int i = 0; i < numActive; ++i)
        {
            if (mappings[i].midiCC == ccNumber)
            {
                mappings[i].currentValue = juce::jmap(ccValue, mappings[i].minVal, mappings[i].maxVal);
            }
        }
    }
    
    // Write current values to output buffer
    for (int i = 0; i < MAX_KNOBS; ++i)
    {
        float val = (i < numActive) ? mappings[i].currentValue : 0.0f;
        buffer.setSample(i, 0, val);
        
        // Fill rest of block with same value
        if (buffer.getNumSamples() > 1)
            juce::FloatVectorOperations::fill(buffer.getWritePointer(i) + 1, val, buffer.getNumSamples() - 1);
        
        lastOutputValues[i]->store(val);
    }
}

juce::ValueTree MIDIKnobsModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("MIDIKnobsState");
    
    // Save the name of the controller preset that is currently active
    #if defined(PRESET_CREATOR_UI)
    vt.setProperty("controllerPreset", activeControllerPresetName, nullptr);
    #endif
    
    // Save the MIDI channel from the APVTS parameter
    if (midiChannelParam)
        vt.setProperty("midiChannel", midiChannelParam->get(), nullptr);
    
    // Save the actual mapping data
    for (int i = 0; i < MAX_KNOBS; ++i)
    {
        juce::ValueTree mapping("Mapping");
        mapping.setProperty("index", i, nullptr);
        mapping.setProperty("cc", mappings[i].midiCC, nullptr);
        mapping.setProperty("min", mappings[i].minVal, nullptr);
        mapping.setProperty("max", mappings[i].maxVal, nullptr);
        vt.addChild(mapping, -1, nullptr);
    }
    return vt;
}

void MIDIKnobsModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("MIDIKnobsState"))
    {
        // Load the name of the controller preset
        #if defined(PRESET_CREATOR_UI)
        activeControllerPresetName = vt.getProperty("controllerPreset", "").toString();
        #endif
        
        // Load the MIDI channel and update the APVTS parameter
        if (midiChannelParam)
            *midiChannelParam = (int)vt.getProperty("midiChannel", 0);
        
        // Load the actual mapping data
        for (const auto& child : vt)
        {
            if (child.hasType("Mapping"))
            {
                int index = child.getProperty("index", -1);
                if (index >= 0 && index < MAX_KNOBS)
                {
                    mappings[index].midiCC = child.getProperty("cc", -1);
                    mappings[index].minVal = child.getProperty("min", 0.0f);
                    mappings[index].maxVal = child.getProperty("max", 1.0f);
                }
            }
        }
    }
}

std::vector<DynamicPinInfo> MIDIKnobsModuleProcessor::getDynamicOutputPins() const
{
    std::vector<DynamicPinInfo> pins;
    int numActive = numKnobsParam ? numKnobsParam->get() : MAX_KNOBS;
    
    for (int i = 0; i < numActive; ++i)
    {
        juce::String label = "Knob " + juce::String(i + 1);
        pins.push_back(DynamicPinInfo(label, i, PinDataType::CV));
    }
    
    return pins;
}

#if defined(PRESET_CREATOR_UI)

// Helper function for tooltip with help marker
static void HelpMarker(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

void MIDIKnobsModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);
    
    // === PRESET MANAGEMENT UI ===
    auto& presetManager = ControllerPresetManager::get();
    const auto& presetNames = presetManager.getPresetNamesFor(ControllerPresetManager::ModuleType::Knobs);
    
    // UI SYNCHRONIZATION: On first draw after loading, find the index for the saved preset name
    if (activeControllerPresetName.isNotEmpty())
    {
        selectedPresetIndex = presetNames.indexOf(activeControllerPresetName);
        activeControllerPresetName = ""; // Clear so we only do this once
    }
    
    ImGui::Text("Controller Preset");
    
    // Create a C-style array of char pointers for the ImGui combo box
    std::vector<const char*> names;
    for (const auto& name : presetNames)
        names.push_back(name.toRawUTF8());
    
    // Draw the dropdown menu
    if (ImGui::Combo("##PresetCombo", &selectedPresetIndex, names.data(), (int)names.size()))
    {
        // When a preset is selected, load it and update our state
        if (selectedPresetIndex >= 0 && selectedPresetIndex < (int)presetNames.size())
        {
            activeControllerPresetName = presetNames[selectedPresetIndex];
            juce::ValueTree presetData = presetManager.loadPreset(ControllerPresetManager::ModuleType::Knobs, activeControllerPresetName);
            setExtraStateTree(presetData);
            onModificationEnded(); // Create an undo state
        }
    }
    
    // "Save" button and text input popup
    ImGui::SameLine();
    if (ImGui::Button("Save##preset"))
    {
        ImGui::OpenPopup("Save Knob Preset");
    }
    
    // "Delete" button
    ImGui::SameLine();
    if (ImGui::Button("Delete##preset"))
    {
        if (selectedPresetIndex >= 0 && selectedPresetIndex < (int)presetNames.size())
        {
            presetManager.deletePreset(ControllerPresetManager::ModuleType::Knobs, presetNames[selectedPresetIndex]);
            selectedPresetIndex = -1; // Deselect
            activeControllerPresetName = ""; // Clear active name
        }
    }
    
    if (ImGui::BeginPopup("Save Knob Preset"))
    {
        ImGui::InputText("Preset Name", presetNameBuffer, sizeof(presetNameBuffer));
        if (ImGui::Button("Save New##confirm"))
        {
            juce::String name(presetNameBuffer);
            if (name.isNotEmpty())
            {
                presetManager.savePreset(ControllerPresetManager::ModuleType::Knobs, name, getExtraStateTree());
                activeControllerPresetName = name; // Mark this new preset as active
                selectedPresetIndex = presetNames.indexOf(activeControllerPresetName); // Resync UI
                ImGui::CloseCurrentPopup();
            }
        }
        ImGui::SameLine();
        if (ImGui::Button("Cancel##preset"))
        {
            ImGui::CloseCurrentPopup();
        }
        ImGui::EndPopup();
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === HEADER SECTION ===
    // Number of knobs control
    if (numKnobsParam)
    {
        int numKnobs = numKnobsParam->get();
        ImGui::SetNextItemWidth(120);
        if (ImGui::SliderInt("##numknobs", &numKnobs, 1, MAX_KNOBS))
        {
            *numKnobsParam = numKnobs;
            onModificationEnded();
        }
        ImGui::SameLine();
        ImGui::Text("Knobs");
        ImGui::SameLine();
        HelpMarker("Number of active knobs (1-16). Drag to adjust.");
    }
    
    // MIDI Channel filter control
    if (midiChannelParam)
    {
        int channel = midiChannelParam->get();
        ImGui::SetNextItemWidth(120);
        if (ImGui::SliderInt("##midichannel", &channel, 0, 16))
        {
            *midiChannelParam = channel;
            onModificationEnded();
        }
        ImGui::SameLine();
        ImGui::Text(channel == 0 ? "Ch: Omni (All)" : juce::String("Ch: " + juce::String(channel)).toRawUTF8());
        ImGui::SameLine();
        HelpMarker("MIDI Channel filter. 0 = Omni (all channels), 1-16 = specific channel only.");
    }
    
    // View mode selector
    ImGui::Spacing();
    if (ImGui::RadioButton("Visual", viewMode == ViewMode::Visual)) viewMode = ViewMode::Visual;
    ImGui::SameLine();
    if (ImGui::RadioButton("Compact", viewMode == ViewMode::Compact)) viewMode = ViewMode::Compact;
    ImGui::SameLine();
    if (ImGui::RadioButton("Table", viewMode == ViewMode::Table)) viewMode = ViewMode::Table;
    ImGui::SameLine();
    HelpMarker("Visual: Horizontal sliders with color coding\nCompact: Linear list view\nTable: Detailed table view");
    
    ImGui::Spacing();
    ImGui::Spacing();  // Double spacing for visual separation
    
    // === DRAW SELECTED VIEW ===
    int numActive = numKnobsParam ? numKnobsParam->get() : MAX_KNOBS;
    
    switch (viewMode)
    {
        case ViewMode::Visual:
            drawVisualKnobs(numActive, onModificationEnded);
            break;
        case ViewMode::Compact:
            drawCompactList(numActive, onModificationEnded);
            break;
        case ViewMode::Table:
            drawTableView(numActive, onModificationEnded);
            break;
    }
    
    ImGui::PopItemWidth();
}

void MIDIKnobsModuleProcessor::drawVisualKnobs(int numActive, const std::function<void()>& onModificationEnded)
{
    // Draw horizontal sliders in a grid (4 per row)
    const int knobsPerRow = 4;
    const float sliderWidth = 120.0f;
    const float sliderHeight = 18.0f;
    const float spacing = 8.0f;
    
    ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));
    
    for (int row = 0; row < (numActive + knobsPerRow - 1) / knobsPerRow; ++row)
    {
        if (row > 0) ImGui::Spacing();
        
        for (int col = 0; col < knobsPerRow; ++col)
        {
            int i = row * knobsPerRow + col;
            if (i >= numActive) break;
            
            if (col > 0) ImGui::SameLine();
            
            auto& map = mappings[i];
            ImGui::PushID(i);
            
            ImGui::BeginGroup();
            
            // Label with CC number
            float hue = static_cast<float>(i) / static_cast<float>(MAX_KNOBS);
            if (map.midiCC != -1)
            {
                ImGui::PushStyleColor(ImGuiCol_Text, ImColor::HSV(hue, 0.8f, 1.0f).Value);
                ImGui::Text("K%d:CC%d", i + 1, map.midiCC);
                ImGui::PopStyleColor();
            }
            else
            {
                ImGui::TextDisabled("K%d:---", i + 1);
            }
            
            // Horizontal slider with color coding
            ImVec4 colorBg = ImColor::HSV(hue, 0.5f, 0.5f);
            ImVec4 colorHovered = ImColor::HSV(hue, 0.6f, 0.6f);
            ImVec4 colorActive = ImColor::HSV(hue, 0.7f, 0.7f);
            ImVec4 colorGrab = ImColor::HSV(hue, 0.9f, 0.9f);
            
            // Special color for learning state
            if (learningIndex == i)
            {
                colorBg = ImVec4(1.0f, 0.5f, 0.0f, 0.8f);
                colorHovered = ImVec4(1.0f, 0.6f, 0.1f, 0.9f);
                colorActive = ImVec4(1.0f, 0.7f, 0.2f, 1.0f);
                colorGrab = ImVec4(1.0f, 0.8f, 0.3f, 1.0f);
            }
            
            ImGui::PushStyleColor(ImGuiCol_FrameBg, colorBg);
            ImGui::PushStyleColor(ImGuiCol_FrameBgHovered, colorHovered);
            ImGui::PushStyleColor(ImGuiCol_FrameBgActive, colorActive);
            ImGui::PushStyleColor(ImGuiCol_SliderGrab, colorGrab);
            
            float displayValue = map.currentValue;
            bool hasMapping = (map.midiCC != -1);
            
            if (!hasMapping)
                ImGui::BeginDisabled();
            
            ImGui::SetNextItemWidth(sliderWidth);
            if (ImGui::SliderFloat("##slider", &displayValue, map.minVal, map.maxVal, "%.2f"))
            {
                map.currentValue = displayValue;
            }
            
            if (ImGui::IsItemActive() || ImGui::IsItemHovered())
            {
                ImGui::SetTooltip("Knob %d\nCC: %d\nValue: %.3f\nRange: %.1f - %.1f",
                                  i + 1, map.midiCC, map.currentValue, map.minVal, map.maxVal);
            }
            
            if (!hasMapping)
            {
                ImGui::EndDisabled();
                if (ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenDisabled))
                    ImGui::SetTooltip("Knob %d\nNo MIDI CC assigned\nClick Learn button below", i + 1);
            }
            
            ImGui::PopStyleColor(4);
            
            // Learn button below slider
            if (learningIndex == i)
            {
                ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(1.0f, 0.5f, 0.0f, 1.0f));
                ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(1.0f, 0.6f, 0.1f, 1.0f));
                if (ImGui::Button("Stop##btn", ImVec2(sliderWidth, 0)))
                    learningIndex = -1;
                ImGui::PopStyleColor(2);
            }
            else
            {
                if (ImGui::Button("Learn##btn", ImVec2(sliderWidth, 0)))
                    learningIndex = i;
            }
            
            ImGui::EndGroup();
            ImGui::PopID();
        }
    }
    
    ImGui::PopStyleVar();
}

void MIDIKnobsModuleProcessor::drawCompactList(int numActive, const std::function<void()>& onModificationEnded)
{
    ImGui::TextDisabled("Click 'Learn' then move a MIDI control");
    ImGui::Spacing();
    
    for (int i = 0; i < numActive; ++i)
    {
        auto& map = mappings[i];
        ImGui::PushID(i);
        
        // Knob label with live value indicator
        float normalizedValue = (map.maxVal != map.minVal) ?
            (map.currentValue - map.minVal) / (map.maxVal - map.minVal) : 0.0f;
        normalizedValue = juce::jlimit(0.0f, 1.0f, normalizedValue);
        
        ImGui::Text("K%d", i + 1);
        ImGui::SameLine();
        
        // Value progress bar
        ImGui::SetNextItemWidth(60);
        float hue = static_cast<float>(i) / static_cast<float>(MAX_KNOBS);
        ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(hue, 0.7f, 0.7f).Value);
        ImGui::ProgressBar(normalizedValue, ImVec2(0, 0), "");
        ImGui::PopStyleColor();
        
        ImGui::SameLine();
        ImGui::Text("CC:%3d", map.midiCC != -1 ? map.midiCC : 0);
        if (map.midiCC == -1)
        {
            ImGui::SameLine();
            ImGui::TextDisabled("(unassigned)");
        }
        
        ImGui::SameLine();
        
        // Learn button with visual feedback
        if (learningIndex == i)
        {
            ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(1.0f, 0.5f, 0.0f, 1.0f));
            ImGui::PushStyleColor(ImGuiCol_ButtonHovered, ImVec4(1.0f, 0.6f, 0.1f, 1.0f));
            if (ImGui::Button("Learning...##btn", ImVec2(90, 0)))
                learningIndex = -1;
            ImGui::PopStyleColor(2);
        }
        else
        {
            if (ImGui::Button("Learn##btn", ImVec2(90, 0)))
                learningIndex = i;
        }
        
        // Range control on same line
        ImGui::SameLine();
        ImGui::SetNextItemWidth(140);
        ImGuiSliderFlags flags = ImGuiSliderFlags_AlwaysClamp;
        if (ImGui::DragFloatRange2("##range", &map.minVal, &map.maxVal, 0.01f, -10.0f, 10.0f,
                                    "%.1f", "%.1f", flags))
        {
            onModificationEnded();
        }
        if (ImGui::IsItemHovered())
            ImGui::SetTooltip("Min: %.2f, Max: %.2f", map.minVal, map.maxVal);
        
        ImGui::PopID();
    }
}

void MIDIKnobsModuleProcessor::drawTableView(int numActive, const std::function<void()>& onModificationEnded)
{
    ImGui::TextDisabled("Detailed view with all parameters");
    ImGui::Spacing();
    
    ImGuiTableFlags flags = ImGuiTableFlags_SizingFixedFit |
                            ImGuiTableFlags_NoHostExtendX |
                            ImGuiTableFlags_Borders |
                            ImGuiTableFlags_RowBg |
                            ImGuiTableFlags_Resizable;
    
    float rowHeight = ImGui::GetTextLineHeightWithSpacing() + 4;
    float tableHeight = rowHeight * (numActive + 1.5f);
    
    if (ImGui::BeginTable("##knobs_table", 6, flags, ImVec2(0, tableHeight)))
    {
        ImGui::TableSetupColumn("Knob", ImGuiTableColumnFlags_WidthFixed, 50);
        ImGui::TableSetupColumn("CC", ImGuiTableColumnFlags_WidthFixed, 30);
        ImGui::TableSetupColumn("Value", ImGuiTableColumnFlags_WidthFixed, 55);
        ImGui::TableSetupColumn("Learn", ImGuiTableColumnFlags_WidthFixed, 70);
        ImGui::TableSetupColumn("Min", ImGuiTableColumnFlags_WidthFixed, 45);
        ImGui::TableSetupColumn("Max", ImGuiTableColumnFlags_WidthFixed, 45);
        ImGui::TableHeadersRow();
        
        for (int i = 0; i < numActive; ++i)
        {
            auto& map = mappings[i];
            ImGui::PushID(i);
            
            ImGui::TableNextRow();
            
            // Column 0: Knob number
            ImGui::TableNextColumn();
            float hue = static_cast<float>(i) / static_cast<float>(MAX_KNOBS);
            ImGui::PushStyleColor(ImGuiCol_Text, ImColor::HSV(hue, 0.8f, 1.0f).Value);
            ImGui::Text("Knob %d", i + 1);
            ImGui::PopStyleColor();
            
            // Column 1: CC number
            ImGui::TableNextColumn();
            if (map.midiCC != -1)
                ImGui::Text("%d", map.midiCC);
            else
                ImGui::TextDisabled("--");
            
            // Column 2: Current value
            ImGui::TableNextColumn();
            ImGui::Text("%.3f", map.currentValue);
            
            // Column 3: Learn button
            ImGui::TableNextColumn();
            if (learningIndex == i)
            {
                ImGui::PushStyleColor(ImGuiCol_Button, ImVec4(1.0f, 0.5f, 0.0f, 1.0f));
                if (ImGui::Button("Learning##btn"))
                    learningIndex = -1;
                ImGui::PopStyleColor();
            }
            else
            {
                if (ImGui::Button("Learn##btn"))
                    learningIndex = i;
            }
            
            // Column 4: Min value
            ImGui::TableNextColumn();
            ImGui::PushItemWidth(-1);
            if (ImGui::DragFloat("##min", &map.minVal, 0.01f, -10.0f, map.maxVal, "%.1f"))
                onModificationEnded();
            ImGui::PopItemWidth();
            
            // Column 5: Max value
            ImGui::TableNextColumn();
            ImGui::PushItemWidth(-1);
            if (ImGui::DragFloat("##max", &map.maxVal, 0.01f, map.minVal, 10.0f, "%.1f"))
                onModificationEnded();
            ImGui::PopItemWidth();
            
            ImGui::PopID();
        }
        
        ImGui::EndTable();
    }
}

void MIDIKnobsModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    juce::ignoreUnused(helpers);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\MIDIKnobsModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <array>

class MIDIKnobsModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_KNOBS = 16;
    
    MIDIKnobsModuleProcessor();
    ~MIDIKnobsModuleProcessor() override = default;
    
    const juce::String getName() const override { return "MIDI Knobs"; }
    
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    std::vector<DynamicPinInfo> getDynamicOutputPins() const override;
    
#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    enum class ViewMode { Visual, Compact, Table };
    
    struct ControlMapping
    {
        int midiCC = -1;  // -1 means unassigned
        float minVal = 0.0f;
        float maxVal = 1.0f;
        float currentValue = 0.0f;
    };
    
    std::array<ControlMapping, MAX_KNOBS> mappings;
    int learningIndex = -1;  // Index of knob currently in learn mode
    
#if defined(PRESET_CREATOR_UI)
    ViewMode viewMode = ViewMode::Visual;  // UI view mode
    
    // Preset UI state
    int selectedPresetIndex = -1;
    char presetNameBuffer[128] = {};
    juce::String activeControllerPresetName;  // Name of currently active preset
    
    void drawVisualKnobs(int numActive, const std::function<void()>& onModificationEnded);
    void drawCompactList(int numActive, const std::function<void()>& onModificationEnded);
    void drawTableView(int numActive, const std::function<void()>& onModificationEnded);
#endif
    
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;
    juce::AudioParameterInt* numKnobsParam { nullptr };
    juce::AudioParameterInt* midiChannelParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\MIDIPlayerModuleProcessor.cpp
================================================================================


#include "MIDIPlayerModuleProcessor.h"

MIDIPlayerModuleProcessor::MIDIPlayerModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withInput("Speed Mod", juce::AudioChannelSet::mono(), true)
        .withInput("Pitch Mod", juce::AudioChannelSet::mono(), true)
        .withInput("Velocity Mod", juce::AudioChannelSet::mono(), true)
        .withInput("Reset Mod", juce::AudioChannelSet::mono(), true)
        .withInput("Loop Mod", juce::AudioChannelSet::mono(), true)
        .withOutput("Output", juce::AudioChannelSet::discreteChannels(kTotalOutputs), true))
    , apvts(*this, nullptr, "MIDIPlayerParameters", createParameterLayout())
{
    // Initialize parameter pointers
    speedParam = apvts.getRawParameterValue(SPEED_PARAM);
    pitchParam = apvts.getRawParameterValue(PITCH_PARAM);
    tempoParam = apvts.getRawParameterValue(TEMPO_PARAM);
    trackParam = apvts.getRawParameterValue(TRACK_PARAM);
    loopParam = apvts.getRawParameterValue(LOOP_PARAM);
    speedModParam = apvts.getRawParameterValue(SPEED_MOD_PARAM);
    pitchModParam = apvts.getRawParameterValue(PITCH_MOD_PARAM);
    velocityModParam = apvts.getRawParameterValue(VELOCITY_MOD_PARAM);
    
    // Initialize output values
    lastOutputValues.resize(kTotalOutputs);
    for (auto& value : lastOutputValues)
        value = std::make_unique<std::atomic<float>>(0.0f);
}

juce::AudioProcessorValueTreeState::ParameterLayout MIDIPlayerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> parameters;
    
    // Playback Controls
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        SPEED_PARAM, "Speed", 0.25f, 4.0f, 1.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        PITCH_PARAM, "Pitch", -24.0f, 24.0f, 0.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        TEMPO_PARAM, "Tempo", 60.0f, 200.0f, 120.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterInt>(
        TRACK_PARAM, "Track", 0, 31, 0));
    parameters.push_back(std::make_unique<juce::AudioParameterBool>(
        LOOP_PARAM, "Loop", true));
    
    // Modulation Inputs
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        SPEED_MOD_PARAM, "Speed Mod", 0.0f, 1.0f, 0.5f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        PITCH_MOD_PARAM, "Pitch Mod", 0.0f, 1.0f, 0.5f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        VELOCITY_MOD_PARAM, "Velocity Mod", 0.0f, 1.0f, 0.5f));
    
    return { parameters.begin(), parameters.end() };
}

void MIDIPlayerModuleProcessor::prepareToPlay(double sampleRate, int maximumExpectedSamplesPerBlock)
{
    juce::Logger::writeToLog("[MIDI Player] prepareToPlay sr=" + juce::String(sampleRate) + ", block=" + juce::String(maximumExpectedSamplesPerBlock));
}

void MIDIPlayerModuleProcessor::releaseResources()
{
    // Nothing to release for MIDI Player
}

void MIDIPlayerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    const juce::ScopedLock lock (midiDataLock);
    // Get a dedicated view of the multi-channel output bus
    auto outBus = getBusBuffer(buffer, false, 0);
    outBus.clear(); // Start with a clean slate

    if (!hasMIDIFileLoaded()) {
        return; // Exit if no MIDI file is loaded
    }
    
    const int numSamples = outBus.getNumSamples();
    const double sampleRate = getSampleRate();
    const double deltaTime = numSamples / sampleRate;

    // --- 1. Update Playback Time ---
    float speed = speedParam->load();
    if (isParamInputConnected("speed"))
        speed *= juce::jmap(getBusBuffer(buffer, true, 0).getReadPointer(0)[0], 0.0f, 1.0f, 0.25f, 4.0f);
    
    // Store live speed value for UI
    setLiveParamValue("speed_live", speed);
    
    if (double seek = pendingSeekTime.load(); seek >= 0.0) {
        currentPlaybackTime = juce::jlimit(0.0, totalDuration, seek);
        pendingSeekTime.store(-1.0);
    }
    currentPlaybackTime += deltaTime * speed;

    // Handle Reset and Loop modulation
    bool shouldReset = false;
    bool shouldLoop = loopParam->load() > 0.5f;
    
    if (isParamInputConnected("reset")) {
        const auto& resetModBus = getBusBuffer(buffer, true, 3);
        if (resetModBus.getNumChannels() > 0) {
            float resetCV = resetModBus.getReadPointer(0)[0];
            if (resetCV > 0.5f && lastResetCV <= 0.5f) { // Rising edge
                shouldReset = true;
            }
            lastResetCV = resetCV;
        }
    }
    
    if (isParamInputConnected("loop")) {
        const auto& loopModBus = getBusBuffer(buffer, true, 4);
        if (loopModBus.getNumChannels() > 0) {
            float loopCV = loopModBus.getReadPointer(0)[0];
            shouldLoop = loopCV > 0.5f;
        }
    }
    
    // Apply reset
    if (shouldReset) {
        currentPlaybackTime = 0.0;
    }
    
    // Apply loop behavior
    if (currentPlaybackTime >= totalDuration && shouldLoop) {
        currentPlaybackTime = std::fmod(currentPlaybackTime, totalDuration);
    }

    // --- RESET SEARCH HINTS on loop or seek ---
    if (currentPlaybackTime < previousPlaybackTime)
    {
        std::fill(lastNoteIndexHint.begin(), lastNoteIndexHint.end(), 0);
    }
    previousPlaybackTime = currentPlaybackTime;

    // --- 2. Generate Outputs for Each Active MIDI Track ---
    const int tracksToProcess = std::min((int)activeTrackIndices.size(), kMaxTracks);
    if (tracksToProcess == 0)
    {
        // Debug in Collider: no active tracks, nothing to output
        static int ctr = 0; if ((ctr++ & 0x3F) == 0)
            juce::Logger::writeToLog("[MIDI Player] No active tracks; check preset load and activeTrackIndices");
    }
    for (int i = 0; i < tracksToProcess; ++i)
    {
        const int sourceTrackIndex = activeTrackIndices[i];
        
        // --- REPLACED with EFFICIENT SEARCH ---
        const NoteData* activeNote = nullptr;
        if (sourceTrackIndex < (int)notesByTrack.size())
        {
            auto& trackNotes = notesByTrack[sourceTrackIndex];
            int& searchIndex = lastNoteIndexHint[sourceTrackIndex];

            // Fast-forward past notes that have already ended
            while (searchIndex < (int)trackNotes.size() && trackNotes[searchIndex].endTime < currentPlaybackTime)
            {
                searchIndex++;
            }

            // Now, search from the hint to find the active note (last-note priority)
            double latestStart = -1.0;
            for (int j = searchIndex; j < (int)trackNotes.size(); ++j)
            {
                const auto& note = trackNotes[j];
                if (note.startTime > currentPlaybackTime) break; // Notes are sorted, so we can stop early

                if (currentPlaybackTime >= note.startTime && currentPlaybackTime <= note.endTime) {
                    if (note.startTime > latestStart) {
                        latestStart = note.startTime;
                        activeNote = &note;
                    }
                }
            }
        }
        // --- END OF EFFICIENT SEARCH ---

        // Calculate the four CV values for this track
        float pitchOut = 0.0f, gateOut = 0.0f, velOut = 0.0f, trigOut = 0.0f;
        if (activeNote) {
            pitchOut = (float)noteNumberToCV(activeNote->noteNumber);
            gateOut = 1.0f;
            velOut = activeNote->velocity / 127.0f;
            // Generate a 10ms trigger at the start of the note
            if (std::abs(currentPlaybackTime - activeNote->startTime) < 0.01) {
                trigOut = 1.0f;
            }
        }
        
        // Apply global pitch modulation
        float pitchOffset = pitchParam->load();
        if (isParamInputConnected("pitch"))
            pitchOffset += juce::jmap(getBusBuffer(buffer, true, 1).getReadPointer(0)[0], 0.0f, 1.0f, -24.0f, 24.0f);
        pitchOut = juce::jlimit(0.0f, 1.0f, pitchOut + (pitchOffset / 60.0f));
        
        // Store live pitch value for UI
        setLiveParamValue("pitch_live", pitchOffset);
    
    // Store live loop value for UI
    setLiveParamValue("loop_live", shouldLoop ? 1.0f : 0.0f);

    // --- 3. Ensure tooltip storage capacity ---
    const int requiredChannels = outBus.getNumChannels();
    if ((int) lastOutputValues.size() < requiredChannels)
    {
        const size_t oldSize = lastOutputValues.size();
        lastOutputValues.resize((size_t) requiredChannels);
        for (size_t i = oldSize; i < lastOutputValues.size(); ++i)
            lastOutputValues[i] = std::make_unique<std::atomic<float>>(0.0f);
    }

    // --- 4. Write to the Correct Output Channels ---
        const int pitchChan = i * kOutputsPerTrack + 0;
        const int gateChan  = i * kOutputsPerTrack + 1;
        const int velChan   = i * kOutputsPerTrack + 2;
        const int trigChan  = i * kOutputsPerTrack + 3;

        // This is the reliable way to write: check if channel exists, get pointer, then fill.
        if (pitchChan < outBus.getNumChannels())
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(pitchChan), pitchOut, numSamples);
        if (pitchChan < (int) lastOutputValues.size() && lastOutputValues[(size_t) pitchChan])
            lastOutputValues[(size_t) pitchChan]->store(pitchOut);
    }
        if (gateChan < outBus.getNumChannels())
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(gateChan), gateOut, numSamples);
        if (gateChan < (int) lastOutputValues.size() && lastOutputValues[(size_t) gateChan])
            lastOutputValues[(size_t) gateChan]->store(gateOut);
    }
        if (velChan < outBus.getNumChannels())
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(velChan), velOut, numSamples);
        if (velChan < (int) lastOutputValues.size() && lastOutputValues[(size_t) velChan])
            lastOutputValues[(size_t) velChan]->store(velOut);
    }
        if (trigChan < outBus.getNumChannels())
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(trigChan), trigOut, numSamples);
        if (trigChan < (int) lastOutputValues.size() && lastOutputValues[(size_t) trigChan])
            lastOutputValues[(size_t) trigChan]->store(trigOut);
    }
    }
    
    // --- 5. Write Global Outputs ---
    if (kClockChannelIndex < outBus.getNumChannels()) {
        float tempo = tempoParam->load();
        double beatTime = 60.0 / tempo;
        double clockPhase = std::fmod(currentPlaybackTime, beatTime) / beatTime;
        float clockValue = (clockPhase < 0.1f) ? 1.0f : 0.0f;
        juce::FloatVectorOperations::fill(outBus.getWritePointer(kClockChannelIndex), clockValue, numSamples);
        if (kClockChannelIndex < (int) lastOutputValues.size() && lastOutputValues[(size_t) kClockChannelIndex])
            lastOutputValues[(size_t) kClockChannelIndex]->store(clockValue);
    }

    // --- NEWLY ADDED BLOCK TO FIX THE "NUM TRACKS" OUTPUT ---
    if (kNumTracksChannelIndex < outBus.getNumChannels()) {
        // The value is the number of tracks with notes, normalized over the max possible tracks.
        const float numTracksValue = (float)activeTrackIndices.size() / (float)kMaxTracks;
        juce::FloatVectorOperations::fill(outBus.getWritePointer(kNumTracksChannelIndex), numTracksValue, numSamples);
        
        if (kNumTracksChannelIndex < (int)lastOutputValues.size() && lastOutputValues[(size_t)kNumTracksChannelIndex])
            lastOutputValues[(size_t)kNumTracksChannelIndex]->store(numTracksValue);
    }
    
    // --- RAW NUM TRACKS OUTPUT ---
    if (kRawNumTracksChannelIndex < outBus.getNumChannels()) {
        const float rawNumTracksValue = (float)activeTrackIndices.size();
        juce::FloatVectorOperations::fill(outBus.getWritePointer(kRawNumTracksChannelIndex), rawNumTracksValue, numSamples);
        
        if (kRawNumTracksChannelIndex < (int)lastOutputValues.size() && lastOutputValues[(size_t)kRawNumTracksChannelIndex])
            lastOutputValues[(size_t)kRawNumTracksChannelIndex]->store(rawNumTracksValue);
    }
    // --- END OF FIX ---
}

void MIDIPlayerModuleProcessor::updatePlaybackTime(double deltaTime)
{
    currentPlaybackTime += deltaTime;
    
    // Handle looping
    if (currentPlaybackTime >= totalDuration && isLooping)
    {
        currentPlaybackTime = std::fmod(currentPlaybackTime, totalDuration);
    }
    else if (currentPlaybackTime >= totalDuration)
    {
        currentPlaybackTime = totalDuration;
    }
}

void MIDIPlayerModuleProcessor::generateCVOutputs()
{
    // Reset outputs
    // Keep last pitchCV to avoid dropping to zero between notes
    gateLevel = 0.0f;
    velocityLevel = 0.0f;
    triggerPulse = false;
    
    // Debug logging (only every 1000 samples to avoid spam)
    static int debugCounter = 0;
    if (++debugCounter % 1000 == 0)
    {
        juce::Logger::writeToLog("[MIDI Player] Debug - Time: " + juce::String(currentPlaybackTime, 3) + 
                                "s, Track: " + juce::String(currentTrackIndex) + 
                                ", Total notes: " + juce::String(getTotalNoteCount()));
    }
    
    // Find active note(s) at current time and apply mono priority: last note on
    int activeNotes = 0;
    const NoteData* chosenNote = nullptr;
    double latestStart = -1.0;
    
    // Use efficient search for the current track
    if (currentTrackIndex < (int)notesByTrack.size())
    {
        const auto& trackNotes = notesByTrack[currentTrackIndex];
        for (const auto& note : trackNotes)
        {
            if (currentPlaybackTime >= note.startTime && currentPlaybackTime <= note.endTime)
            {
                activeNotes++;
                // Prefer the most recent onset; tie-breaker by higher velocity
                if (note.startTime > latestStart || (std::abs(note.startTime - latestStart) < 1e-6 && chosenNote != nullptr && note.velocity > chosenNote->velocity))
                {
                    latestStart = note.startTime;
                    chosenNote = &note;
                }
            }
        }
    }
    
    if (chosenNote != nullptr)
    {
        pitchCV = (float) noteNumberToCV(chosenNote->noteNumber);
        gateLevel = 1.0f;
        velocityLevel = chosenNote->velocity / 127.0f;
        
        if (debugCounter % 1000 == 0)
        {
            juce::Logger::writeToLog("[MIDI Player] Active note - MIDI Note: " + juce::String(chosenNote->noteNumber) +
                                    ", Velocity: " + juce::String(chosenNote->velocity) +
                                    ", CV: " + juce::String(pitchCV, 3));
        }
        
        if (std::abs(currentPlaybackTime - chosenNote->startTime) < 0.01)
        {
            triggerPulse = true;
        }
    }
    
    // Fallback: if selected track has zero notes at all, try track 0
    if (activeNotes == 0 && currentTrackIndex != 0 && currentTrackIndex < (int) trackInfos.size() && trackInfos[(size_t) currentTrackIndex].noteCount == 0)
    {
        if (0 < (int)notesByTrack.size())
        {
            const auto& track0Notes = notesByTrack[0];
            for (const auto& note : track0Notes)
            {
                if (currentPlaybackTime >= note.startTime && currentPlaybackTime <= note.endTime)
                {
                    // Note is active
                    pitchCV = (float) noteNumberToCV(note.noteNumber);
                    gateLevel = 1.0f;
                    velocityLevel = note.velocity / 127.0f;
                    
                    if (debugCounter % 1000 == 0)
                    {
                        juce::Logger::writeToLog("[MIDI Player] FALLBACK to track 0 - MIDI Note: " + juce::String(note.noteNumber));
                    }
                    break;
                }
            }
        }
    }
    
    // Debug track information
    if (debugCounter % 1000 == 0)
    {
        juce::Logger::writeToLog("[MIDI Player] Current track: " + juce::String(currentTrackIndex) + 
                                ", Total tracks: " + juce::String(getNumTracks()));
        
        for (int t = 0; t < getNumTracks(); ++t)
        {
            int notesInTrack = 0;
            if (t < (int)notesByTrack.size())
            {
                notesInTrack = (int)notesByTrack[t].size();
            }
            if (notesInTrack > 0)
            {
                juce::String trackName = (t < trackInfos.size()) ? trackInfos[t].name : "Track " + juce::String(t);
                juce::Logger::writeToLog("[MIDI Player] " + trackName + ": " + juce::String(notesInTrack) + " notes");
            }
        }
        
        if (activeNotes == 0 && currentTrackIndex < trackInfos.size())
        {
            const auto& info = trackInfos[currentTrackIndex];
            juce::Logger::writeToLog("[MIDI Player] WARNING: No active notes in " + info.name + 
                                    " (has " + juce::String(info.noteCount) + " total notes)");
        }
    }
    
    // Generate clock output (quarter note pulses)
    float tempo = tempoParam->load();
    double beatTime = 60.0 / tempo;
    double clockPhase = std::fmod(currentPlaybackTime, beatTime) / beatTime;
    clockOutput = (clockPhase < 0.1f) ? 1.0f : 0.0f; // 10% duty cycle
}

double MIDIPlayerModuleProcessor::noteNumberToCV(int noteNumber) const
{
    // Map MIDI note range C2..C7 (36..96) to 0..1 linearly
    // Notes below C2 clamp to 0, above C7 clamp to 1
    const double minNote = 36.0; // C2
    const double maxNote = 96.0; // C7
    if (noteNumber <= minNote) return 0.0;
    if (noteNumber >= maxNote) return 1.0;
    return (noteNumber - minNote) / (maxNote - minNote);
}

int MIDIPlayerModuleProcessor::getTotalNoteCount() const
{
    int totalNotes = 0;
    for (const auto& trackNotes : notesByTrack) {
        totalNotes += (int)trackNotes.size();
    }
    return totalNotes;
}

void MIDIPlayerModuleProcessor::parseMIDIFile()
{
    if (!midiFile)
        return;
    
    // Build new state off-thread, then swap under lock
    std::vector<std::vector<NoteData>> newNotesByTrack;
    std::vector<TrackInfo> newTrackInfos;
    std::vector<int> newActiveTrackIndices;
    double newTotalDuration = 0.0;

    newNotesByTrack.clear();
    newNotesByTrack.resize (midiFile->getNumTracks());
    
    for (int track = 0; track < midiFile->getNumTracks(); ++track)
    {
        const auto* sequence = midiFile->getTrack (track);
        if (! sequence) continue;
        
        for (int event = 0; event < sequence->getNumEvents(); ++event)
        {
            const auto& message = sequence->getEventPointer(event)->message;
            if (message.isNoteOn() && message.getVelocity() > 0)
            {
                double startTime = message.getTimeStamp();
                double endTime = startTime + 1.0;
                for (int searchEvent = event + 1; searchEvent < sequence->getNumEvents(); ++searchEvent)
                {
                    const auto& searchMessage = sequence->getEventPointer(searchEvent)->message;
                    if ((searchMessage.isNoteOff() || (searchMessage.isNoteOn() && searchMessage.getVelocity() == 0)) &&
                        searchMessage.getNoteNumber() == message.getNoteNumber())
                    {
                        endTime = searchMessage.getTimeStamp();
                        break;
                    }
                }
                if (endTime - startTime < 0.05)
                    endTime = startTime + 0.05;

                NoteData note;
                const double ticksPerQuarter = midiFile->getTimeFormat();
                const double tempo = tempoParam ? (double) tempoParam->load() : 120.0;
                const double secondsPerTick = (60.0 / tempo) / ticksPerQuarter;
                note.startTime = startTime * secondsPerTick;
                note.endTime   = endTime   * secondsPerTick;
                note.noteNumber = message.getNoteNumber();
                note.velocity   = message.getVelocity();
                note.trackIndex = track;
                newNotesByTrack[track].push_back (note);
                newTotalDuration = std::max (newTotalDuration, note.endTime);
            }
        }
    }

    newTrackInfos.clear();
    newTrackInfos.resize (midiFile->getNumTracks());
    newActiveTrackIndices.clear();
    int newNumActiveTracks = 0;
    
    for (int track = 0; track < midiFile->getNumTracks(); ++track)
    {
        TrackInfo info;
        info.name = "Track " + juce::String (track + 1);
        info.noteCount = (int) newNotesByTrack[track].size();
        info.hasNotes = (info.noteCount > 0);
        if (const auto* sequence = midiFile->getTrack (track))
        {
            for (int i = 0; i < sequence->getNumEvents(); ++i)
            {
                const auto& msg = sequence->getEventPointer(i)->message;
                if (msg.isTrackNameEvent()) { info.name = msg.getTextFromTextMetaEvent(); break; }
            }
        }
        newTrackInfos[track] = info;
        if (info.hasNotes)
        {
            ++newNumActiveTracks;
            if ((int) newActiveTrackIndices.size() < kMaxTracks)
                newActiveTrackIndices.push_back (track);
        }
    }

    {
        const juce::ScopedLock lock (midiDataLock);
        notesByTrack.swap (newNotesByTrack);
        trackInfos.swap (newTrackInfos);
        activeTrackIndices.swap (newActiveTrackIndices);
        totalDuration = newTotalDuration;
        lastNoteIndexHint.assign (midiFile->getNumTracks(), 0);
        previousPlaybackTime = -1.0;
        numActiveTracks = newNumActiveTracks;
    }

    int totalNotes = 0;
    for (const auto& tn : notesByTrack) totalNotes += (int) tn.size();
    juce::Logger::writeToLog ("[MIDI Player] Parsed " + juce::String (totalNotes) +
                              " notes from " + juce::String (midiFile->getNumTracks()) + " tracks");
    juce::Logger::writeToLog ("[MIDI Player] Time format: " + juce::String (midiFile->getTimeFormat()) +
                              " ticks/quarter, Total duration: " + juce::String (totalDuration, 3) + "s");
}

void MIDIPlayerModuleProcessor::loadMIDIFile(const juce::File& file)
{
    auto newMidiFile = std::make_unique<juce::MidiFile>();
    
    juce::FileInputStream inputStream(file);
    if (inputStream.openedOk() && newMidiFile->readFrom(inputStream))
    {
        {
            const juce::ScopedLock lock (midiDataLock);
            midiFile = std::move(newMidiFile);
            currentMIDIFileName = file.getFileName();
            currentMIDIFilePath = file.getFullPathName();
            currentPlaybackTime = 0.0;
            previousPlaybackTime = -1.0;
            lastNoteIndexHint.clear();
        }
        parseMIDIFile();
        
        juce::Logger::writeToLog("[MIDI Player] Loaded MIDI file: " + currentMIDIFileName);
        
        // --- ADD THIS LINE ---
        // If a new file is loaded, signal to the UI that connections may need to be updated.
        connectionUpdateRequested = true;
    }
    else
    {
        juce::Logger::writeToLog("[MIDI Player] Failed to load MIDI file: " + file.getFullPathName());
    }
}

#if defined(PRESET_CREATOR_UI)

// Helper function for tooltip with help marker
static void HelpMarkerPlayer(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

void MIDIPlayerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);
    
    // === MIDI FILE SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "MIDI File");
    ImGui::Spacing();
    
    if (hasMIDIFileLoaded())
    {
        // Show file info with better formatting
        ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.5f, 1.0f, 0.7f, 1.0f)); // Green
        ImGui::Text("📄 %s", currentMIDIFileName.toRawUTF8());
        ImGui::PopStyleColor();
        ImGui::Text("Tracks: %d | Notes: %d", getNumTracks(), getTotalNoteCount());
        ImGui::Text("Duration: %.1fs", totalDuration);
    }
    else
    {
        // If NO MIDI file is loaded, draw a dedicated, colored dropzone.
        ImVec2 dropZoneSize = ImVec2(itemWidth, 60.0f);
        
        // Use a purple color to match the MIDI browser theme
        ImGui::PushStyleColor(ImGuiCol_Button, IM_COL32(180, 120, 255, 100));
        ImGui::Button("##dropzone_midi", dropZoneSize);
        ImGui::PopStyleColor();
        
        // Draw text centered on top of the button
        const char* text = "Drop MIDI File Here";
        ImVec2 textSize = ImGui::CalcTextSize(text);
        ImVec2 textPos = ImGui::GetItemRectMin();
        textPos.x += (dropZoneSize.x - textSize.x) * 0.5f;
        textPos.y += (dropZoneSize.y - textSize.y) * 0.5f;
        ImGui::GetWindowDrawList()->AddText(textPos, IM_COL32_WHITE, text);

        // Make THIS BUTTON the drop target
        if (ImGui::BeginDragDropTarget())
        {
            if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_MIDI_PATH"))
            {
                const char* path = (const char*)payload->Data;
                loadMIDIFile(juce::File(path));
                onModificationEnded(); // Create an undo state
            }
            ImGui::EndDragDropTarget();
        }
    }
    
    // Load MIDI File Button with tooltip
    if (ImGui::Button("Load MIDI", ImVec2(itemWidth, 0)))
    {
        juce::File startDir;
        {
            // Look for the project root (where juce folder is)
            auto appFile = juce::File::getSpecialLocation(juce::File::currentApplicationFile);
            auto dir = appFile.getParentDirectory();
            for (int i = 0; i < 10 && dir.exists(); ++i)
            {
                // Look for the juce folder, then go up one level to find audio/MIDI
                if (dir.getChildFile("juce").isDirectory())
                {
                    auto candidate = dir.getChildFile("audio").getChildFile("MIDI");
                    if (candidate.exists() && candidate.isDirectory())
                    {
                        startDir = candidate;
                        break;
                    }
                }
                dir = dir.getParentDirectory();
            }
        }
        if (!startDir.exists()) startDir = juce::File();
        
        fileChooser = std::make_unique<juce::FileChooser>("Select MIDI File", startDir, "*.mid;*.midi");
        auto chooserFlags = juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectFiles;
        fileChooser->launchAsync(chooserFlags, [this](const juce::FileChooser& fc)
        {
            try {
                auto file = fc.getResult();
                if (file != juce::File{})
                {
                    juce::Logger::writeToLog("[MIDI Player] User selected file: " + file.getFullPathName());
                    loadMIDIFile(file);
                }
            } catch (...) {
                juce::Logger::writeToLog("[MIDI Player][FATAL] Exception during file chooser callback");
            }
        });
    }
    ImGui::SameLine();
    HelpMarkerPlayer("Load a MIDI file (.mid, .midi)\nSupports multi-track MIDI sequences");
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === PLAYBACK CONTROLS SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Playback");
    ImGui::Spacing();
    
    // Speed control with modulation indicator
    bool speedModulated = isParamModulated("speed");
    float speed = speedParam->load();
    if (speedModulated) {
        speed = getLiveParamValueFor("speed", "speed_live", speed);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Speed", &speed, 0.25f, 4.0f, "%.2fx"))
    {
        if (!speedModulated) {
            apvts.getParameter(SPEED_PARAM)->setValueNotifyingHost(apvts.getParameterRange(SPEED_PARAM).convertTo0to1(speed));
            onModificationEnded();
        }
    }
    if (speedModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::SameLine();
    HelpMarkerPlayer("Playback speed multiplier\n0.25x = quarter speed, 4x = quad speed");
    
    // Pitch control with modulation indicator
    bool pitchModulated = isParamModulated("pitch");
    float pitch = pitchParam->load();
    if (pitchModulated) {
        pitch = getLiveParamValueFor("pitch", "pitch_live", pitch);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Pitch", &pitch, -24.0f, 24.0f, "%.1f st"))
    {
        if (!pitchModulated) {
            apvts.getParameter(PITCH_PARAM)->setValueNotifyingHost(apvts.getParameterRange(PITCH_PARAM).convertTo0to1(pitch));
            onModificationEnded();
        }
    }
    if (pitchModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::SameLine();
    HelpMarkerPlayer("Pitch shift in semitones\n-12 = octave down, +12 = octave up");
    
    // Tempo control
    float tempo = tempoParam->load();
    if (ImGui::SliderFloat("Tempo", &tempo, 60.0f, 200.0f, "%.0f BPM"))
    {
        apvts.getParameter(TEMPO_PARAM)->setValueNotifyingHost(apvts.getParameterRange(TEMPO_PARAM).convertTo0to1(tempo));
        onModificationEnded();
    }
    ImGui::SameLine();
    HelpMarkerPlayer("MIDI file tempo in beats per minute");
    
    // Loop checkbox
    bool loopModulated = isParamModulated("loop");
    bool loop = loopParam->load() > 0.5f;
    if (loopModulated) {
        loop = getLiveParamValueFor("loop", "loop_live", loop ? 1.0f : 0.0f) > 0.5f;
        ImGui::BeginDisabled();
    }
    if (ImGui::Checkbox("Loop", &loop))
    {
        if (!loopModulated) {
            apvts.getParameter(LOOP_PARAM)->setValueNotifyingHost(loop ? 1.0f : 0.0f);
            isLooping = loop;
            onModificationEnded();
        }
    }
    if (loopModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::SameLine();
    HelpMarkerPlayer("Enable looping playback");
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === TRACK SELECTION SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Track Selection");
    ImGui::Spacing();
    
    int track = (int)trackParam->load();
    int maxTrack = std::max(0, getNumTracks() - 1);
    
    // Clamp track to valid range and normalize parameter if out of range
    if (track > maxTrack) {
        track = 0;
        auto normZero = apvts.getParameterRange(TRACK_PARAM).convertTo0to1(0.0f);
        apvts.getParameter(TRACK_PARAM)->setValueNotifyingHost(normZero);
        currentTrackIndex = 0;
    }
    
    if (getNumTracks() > 0)
    {
        // Keep preview label alive during BeginCombo call
        juce::String previewLabel;
        if (track >= 0 && track < (int) trackInfos.size())
        {
            const auto& info = trackInfos[(size_t) track];
            previewLabel = info.name + " (" + juce::String(info.noteCount) + " notes)";
        }
        const char* previewText = previewLabel.isNotEmpty() ? previewLabel.toRawUTF8() : "No Track";
        
        if (ImGui::BeginCombo("Track", previewText))
        {
            for (int i = 0; i < getNumTracks(); ++i)
            {
                if (i < (int) trackInfos.size())
                {
                    const auto& info = trackInfos[(size_t) i];
                    juce::String label = info.name + " (" + juce::String(info.noteCount) + " notes)";
                    bool isSelected = (track == i);
                    
                    if (ImGui::Selectable(label.toRawUTF8(), isSelected))
                    {
                        track = i;
                        float norm = apvts.getParameterRange(TRACK_PARAM).convertTo0to1((float) track);
                        apvts.getParameter(TRACK_PARAM)->setValueNotifyingHost(norm);
                        currentTrackIndex = track;
                        onModificationEnded();
                        juce::Logger::writeToLog("[MIDI Player] Selected track " + juce::String(track) + ": " + info.name + " (" + juce::String(info.noteCount) + " notes)");
                    }
                    
                    if (isSelected)
                        ImGui::SetItemDefaultFocus();
                }
            }
            ImGui::EndCombo();
        }
        ImGui::SameLine();
        HelpMarkerPlayer("Select which MIDI track to play\nShows track name and note count");
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    // === TIMELINE SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Timeline");
    ImGui::Spacing();
    
    if (totalDuration > 0.0)
    {
        // Playhead slider
        float t = (float) currentPlaybackTime;
        if (ImGui::SliderFloat("Time", &t, 0.0f, (float) totalDuration, "%.2fs"))
        {
            pendingSeekTime.store((double) t);
            juce::Logger::writeToLog("[MIDI Player] Seek requested: " + juce::String(t, 2) + "s");
            onModificationEnded();
        }
        ImGui::SameLine();
        HelpMarkerPlayer("Drag to seek, or click Reset button below");
        
        // Progress bar visualization
        float progress = (float)(currentPlaybackTime / totalDuration);
        ImGui::PushStyleColor(ImGuiCol_PlotHistogram, ImColor::HSV(0.6f, 0.7f, 0.8f).Value);
        ImGui::ProgressBar(progress, ImVec2(itemWidth, 0), "");
        ImGui::PopStyleColor();
    }
    
    // Reset button
    if (ImGui::Button("Reset", ImVec2(itemWidth, 0)))
    {
        pendingSeekTime.store(0.0);
        juce::Logger::writeToLog("[MIDI Player] Playback reset to start");
    }
    
    ImGui::Spacing();
    ImGui::Spacing();
    
    // === QUICK ROUTING SECTION ===
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Quick Routing");
    ImGui::Spacing();
    
    // Connect to Samplers
    if (ImGui::Button("→ Samplers", ImVec2(itemWidth * 0.48f, 0)))
    {
        autoConnectTriggered = true;
    }
    if (ImGui::IsItemHovered())
        ImGui::SetTooltip("Auto-connect each track to a Sample Loader module");
    
    ImGui::SameLine();
    
    // Connect to PolyVCO
    if (ImGui::Button("→ PolyVCO", ImVec2(itemWidth * 0.48f, 0)))
    {
        autoConnectVCOTriggered = true;
    }
    if (ImGui::IsItemHovered())
        ImGui::SetTooltip("Auto-connect to a Polyphonic VCO for synthesis");
    
    // Hybrid mode (full width)
    if (ImGui::Button("→ Hybrid", ImVec2(itemWidth, 0)))
    {
        autoConnectHybridTriggered = true;
    }
    if (ImGui::IsItemHovered())
        ImGui::SetTooltip("Connect to both PolyVCO and Sample Loaders");
    
    // Add visible drop target area when MIDI is loaded (for hot-swapping)
    if (hasMIDIFileLoaded())
    {
        ImGui::Spacing();
        ImGui::Separator();
        
        // Draw a colored button as a visible drop zone for hot-swapping
        ImVec2 swapZoneSize = ImVec2(itemWidth, 50.0f);
        ImGui::PushStyleColor(ImGuiCol_Button, IM_COL32(180, 120, 255, 60));
        ImGui::Button("##dropzone_midi_swap", swapZoneSize);
        ImGui::PopStyleColor();
        
        // Draw text centered on the button
        const char* text = "Drop to Swap MIDI";
        ImVec2 textSize = ImGui::CalcTextSize(text);
        ImVec2 textPos = ImGui::GetItemRectMin();
        textPos.x += (swapZoneSize.x - textSize.x) * 0.5f;
        textPos.y += (swapZoneSize.y - textSize.y) * 0.5f;
        ImGui::GetWindowDrawList()->AddText(textPos, IM_COL32(200, 200, 200, 255), text);
        
        // Make THIS BUTTON the drop target for hot-swapping MIDI files
        if (ImGui::BeginDragDropTarget())
        {
            if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_MIDI_PATH"))
            {
                const char* path = (const char*)payload->Data;
                loadMIDIFile(juce::File(path));
                onModificationEnded();
            }
            ImGui::EndDragDropTarget();
        }
    }
    
    ImGui::PopItemWidth();
}
#endif

void MIDIPlayerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // --- Global Inputs & Outputs (In Parallel) ---
    helpers.drawParallelPins("Speed Mod", 0, "Clock", kClockChannelIndex);
    helpers.drawParallelPins("Pitch Mod", 1, "Num Tracks", kNumTracksChannelIndex);
    helpers.drawParallelPins("Velocity Mod", 2, "Raw Num Tracks", kRawNumTracksChannelIndex);
    helpers.drawParallelPins("Reset Mod", 3, nullptr, 0);
    helpers.drawParallelPins("Loop Mod", 4, nullptr, 0);
    
    // --- Per-Track Outputs (Inputs side will be blank) ---
    int outIndex = 0;
    const int tracksToShow = std::min((int) activeTrackIndices.size(), kMaxTracks);

    for (int t = 0; t < tracksToShow; ++t)
    {
        const int srcTrack = activeTrackIndices[(size_t) t];
        juce::String base = (srcTrack < (int) trackInfos.size() && trackInfos[(size_t) srcTrack].name.isNotEmpty())
            ? trackInfos[(size_t) srcTrack].name : (juce::String("Track ") + juce::String(srcTrack+1));
        
        // Draw each track output on its own line, but on the right side of the node
        helpers.drawParallelPins(nullptr, 0, (base + " Pitch").toRawUTF8(),    outIndex++);
        helpers.drawParallelPins(nullptr, 0, (base + " Gate").toRawUTF8(),     outIndex++);
        helpers.drawParallelPins(nullptr, 0, (base + " Velocity").toRawUTF8(), outIndex++);
        helpers.drawParallelPins(nullptr, 0, (base + " Trigger").toRawUTF8(),  outIndex++);
    }
}

juce::String MIDIPlayerModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Speed Mod";
        case 1: return "Pitch Mod";
        case 2: return "Velocity Mod";
        case 3: return "Reset Mod";
        case 4: return "Loop Mod";
        default: return juce::String("In ") + juce::String(channel + 1);
    }
}

juce::String MIDIPlayerModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == kClockChannelIndex) return "Clock";
    if (channel == kNumTracksChannelIndex) return "Num Tracks";
    if (channel == kRawNumTracksChannelIndex) return "Raw Num Tracks";
    
    // Per-track outputs (Pitch/Gate/Velocity/Trigger)
    const int trackIndex = channel / kOutputsPerTrack;
    const int outputType = channel % kOutputsPerTrack;
    
    if (trackIndex < (int)activeTrackIndices.size())
    {
        const int srcTrack = activeTrackIndices[(size_t)trackIndex];
        juce::String base = (srcTrack < (int)trackInfos.size() && trackInfos[(size_t)srcTrack].name.isNotEmpty())
            ? trackInfos[(size_t)srcTrack].name : (juce::String("Track ") + juce::String(srcTrack+1));
        
        switch (outputType)
        {
            case 0: return base + " Pitch";
            case 1: return base + " Gate";
            case 2: return base + " Velocity";
            case 3: return base + " Trigger";
        }
    }
    
    return "Out " + juce::String(channel + 1);
}

// Parameter bus contract implementation
bool MIDIPlayerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "speed") { outBusIndex = 0; outChannelIndexInBus = 0; return true; }
    if (paramId == "pitch") { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    if (paramId == "velocity") { outBusIndex = 2; outChannelIndexInBus = 0; return true; }
    if (paramId == "reset") { outBusIndex = 3; outChannelIndexInBus = 0; return true; }
    if (paramId == "loop") { outBusIndex = 4; outChannelIndexInBus = 0; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\MIDIPlayerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_audio_basics/juce_audio_basics.h>

class MIDIPlayerModuleProcessor : public ModuleProcessor
{
public:
    // ADD THIS ENUM
    enum class AutoConnectState { None, Samplers, PolyVCO, Hybrid };
    
    static constexpr int kMaxTracks = 24;          // hard cap for output channels
    static constexpr int kOutputsPerTrack = 4;     // Pitch, Gate, Velocity, Trigger
    static constexpr int kClockChannelIndex = kMaxTracks * kOutputsPerTrack;        // 96
    static constexpr int kNumTracksChannelIndex = kClockChannelIndex + 1;           // 97
    static constexpr int kRawNumTracksChannelIndex = kNumTracksChannelIndex + 1;    // 98
    static constexpr int kTotalOutputs = kRawNumTracksChannelIndex + 1;             // 99
    static constexpr const char* SPEED_PARAM = "speed";
    static constexpr const char* PITCH_PARAM = "pitch";
    static constexpr const char* TEMPO_PARAM = "tempo";
    static constexpr const char* TRACK_PARAM = "track";
    static constexpr const char* LOOP_PARAM = "loop";
    static constexpr const char* SPEED_MOD_PARAM = "speed_mod";
    static constexpr const char* PITCH_MOD_PARAM = "pitch_mod";
    static constexpr const char* VELOCITY_MOD_PARAM = "velocity_mod";

    MIDIPlayerModuleProcessor();
    ~MIDIPlayerModuleProcessor() override = default;

    const juce::String getName() const override { return "midi player"; }
    
    // Auto-connect trigger flags
    std::atomic<bool> autoConnectTriggered { false };
    std::atomic<bool> autoConnectVCOTriggered { false };
    std::atomic<bool> autoConnectHybridTriggered { false };

    // ADD THESE TWO LINES
    std::atomic<AutoConnectState> lastAutoConnectState { AutoConnectState::None };
    std::atomic<bool> connectionUpdateRequested { false };

    void prepareToPlay(double sampleRate, int maximumExpectedSamplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

    // UI Methods
    #if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    #endif

    // Pin labeling
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

    // MIDI File Management
    void loadMIDIFile(const juce::File& file);
    bool hasMIDIFileLoaded() const { return midiFile != nullptr && midiFile->getNumTracks() > 0; }
    juce::String getCurrentMIDIFileName() const { return currentMIDIFileName; }
    juce::String getCurrentMIDIFileFullPath() const { return currentMIDIFilePath; }

    // Piano Roll Data Access
    struct NoteData
    {
        double startTime;
        double endTime;
        int noteNumber;
        int velocity;
        int trackIndex;
    };
    
    struct TrackInfo
    {
        juce::String name;
        int noteCount;
        bool hasNotes;
    };
    
    const std::vector<std::vector<NoteData>>& getNotesByTrack() const { return notesByTrack; }
    const std::vector<TrackInfo>& getTrackInfos() const { return trackInfos; }
    const std::vector<int>& getActiveTrackIndices() const { return activeTrackIndices; }
    double getTotalDuration() const { return totalDuration; }
    int getNumTracks() const { return midiFile ? midiFile->getNumTracks() : 0; }
    int getTotalNoteCount() const;

private:
    // Protects cross-thread access to MIDI data structures
    juce::CriticalSection midiDataLock;

    juce::AudioProcessorValueTreeState apvts;
    
    // MIDI File Data
    std::unique_ptr<juce::MidiFile> midiFile;
    juce::String currentMIDIFileName;
    juce::String currentMIDIFilePath;
    
    // --- MODIFIED DATA STRUCTURES ---
    // Replace the single flat vector of notes with a per-track structure
    std::vector<std::vector<NoteData>> notesByTrack;
    std::vector<TrackInfo> trackInfos;
    double totalDuration { 0.0 };
    int numActiveTracks { 0 };
    std::vector<int> activeTrackIndices; // map active output group -> source track index
    
    // Playback State
    double currentPlaybackTime { 0.0 };
    double playbackSpeed { 1.0 };
    int currentTrackIndex { 0 };
    bool isLooping { true };
    
    // --- ADD NEW STATE VARIABLES FOR EFFICIENT SEARCH ---
    std::vector<int> lastNoteIndexHint; // Remembers the last search position for each track
    double previousPlaybackTime { -1.0 }; // Used to detect when playback loops or seeks
    
    // Output Values (legacy single-track summary retained for diagnostics, not routed)
    float pitchCV { 0.0f };
    float gateLevel { 0.0f };
    float velocityLevel { 0.0f };
    bool triggerPulse { false };
    float clockOutput { 0.0f };
    float numTracksOutput { 0.0f };
    std::atomic<double> pendingSeekTime { -1.0 };
    float lastResetCV { 0.0f }; // For reset modulation edge detection
    
    // Parameter Pointers
    std::atomic<float>* speedParam { nullptr };
    std::atomic<float>* pitchParam { nullptr };
    std::atomic<float>* tempoParam { nullptr };
    std::atomic<float>* trackParam { nullptr };
    std::atomic<float>* loopParam { nullptr };
    std::atomic<float>* speedModParam { nullptr };
    std::atomic<float>* pitchModParam { nullptr };
    std::atomic<float>* velocityModParam { nullptr };
    
    // File Chooser
    std::unique_ptr<juce::FileChooser> fileChooser;
    
    // Internal Methods
    void parseMIDIFile();
    void updatePlaybackTime(double deltaTime);
    void generateCVOutputs();
    double noteNumberToCV(int noteNumber) const;
    juce::ValueTree getExtraStateTree() const override
    {
        juce::ValueTree vt ("MIDIPlayerExtra");
        vt.setProperty ("fileName", currentMIDIFileName, nullptr);
        vt.setProperty ("filePath", currentMIDIFilePath, nullptr);
        vt.setProperty ("track", currentTrackIndex, nullptr);
        return vt;
    }
    void setExtraStateTree(const juce::ValueTree& vt) override
    {
        if (! vt.isValid() || ! vt.hasType ("MIDIPlayerExtra")) return;
        currentMIDIFileName = vt.getProperty ("fileName").toString();
        currentMIDIFilePath = vt.getProperty ("filePath").toString();
        currentTrackIndex = (int) vt.getProperty ("track", 0);
        if (currentMIDIFilePath.isNotEmpty())
        {
            juce::File f (currentMIDIFilePath);
            if (f.existsAsFile())
                loadMIDIFile (f);
        }
        if (auto* p = apvts.getParameter(TRACK_PARAM))
        {
            float norm = apvts.getParameterRange(TRACK_PARAM).convertTo0to1((float) currentTrackIndex);
            p->setValueNotifyingHost(norm);
        }
    }
    
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
};


================================================================================
FILE: juce\Source\audio\modules\MixerModuleProcessor.cpp
================================================================================


#include "MixerModuleProcessor.h"

// Corrected constructor with two separate stereo inputs
MixerModuleProcessor::MixerModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("In A", juce::AudioChannelSet::stereo(), true)  // Bus 0
        .withInput ("In B", juce::AudioChannelSet::stereo(), true)  // Bus 1
        .withInput ("Gain Mod", juce::AudioChannelSet::mono(), true)
        .withInput ("Pan Mod", juce::AudioChannelSet::mono(), true)
        .withInput ("X-Fade Mod", juce::AudioChannelSet::mono(), true)
        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "MixerParams", createParameterLayout())
{
    gainParam      = apvts.getRawParameterValue ("gain");
    panParam       = apvts.getRawParameterValue ("pan");
    crossfadeParam = apvts.getRawParameterValue ("crossfade"); // Get the new parameter

    // Initialize value tooltips for the stereo output
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

// Updated parameter layout with the new crossfade slider
juce::AudioProcessorValueTreeState::ParameterLayout MixerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("gain", "Gain", juce::NormalisableRange<float> (-60.0f, 6.0f, 0.01f), 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("pan",  "Pan",  juce::NormalisableRange<float> (-1.0f, 1.0f), 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("crossfade",  "Crossfade",  juce::NormalisableRange<float> (-1.0f, 1.0f), 0.0f)); // A <-> B
    return { p.begin(), p.end() };
}

void MixerModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (sampleRate, samplesPerBlock);
}

// Completely rewritten processBlock for crossfading
void MixerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    auto inA = getBusBuffer(buffer, true, 0);
    auto inB = getBusBuffer(buffer, true, 1);
    auto out = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    const int numChannels = out.getNumChannels();

    // Read CV from input buses (if connected)
    float gainModCV = 0.0f;
    float panModCV = 0.0f;
    float crossfadeModCV = 0.0f;
    
    // Check if gain mod bus is connected and read CV
    if (isParamInputConnected("gain"))
    {
        const auto& gainModBus = getBusBuffer(buffer, true, 2);
        if (gainModBus.getNumChannels() > 0)
            gainModCV = gainModBus.getReadPointer(0)[0]; // Read first sample
    }
    
    // Check if pan mod bus is connected and read CV
    if (isParamInputConnected("pan"))
    {
        const auto& panModBus = getBusBuffer(buffer, true, 3);
        if (panModBus.getNumChannels() > 0)
            panModCV = panModBus.getReadPointer(0)[0]; // Read first sample
    }
    
    // Check if crossfade mod bus is connected and read CV
    if (isParamInputConnected("x-fade"))
    {
        const auto& crossfadeModBus = getBusBuffer(buffer, true, 4);
        if (crossfadeModBus.getNumChannels() > 0)
            crossfadeModCV = crossfadeModBus.getReadPointer(0)[0]; // Read first sample
    }

    // Apply modulation or use parameter values
    float crossfade = 0.0f;
    if (isParamInputConnected("x-fade"))
    {
        // Map CV [0,1] to crossfade [-1, 1]
        crossfade = -1.0f + crossfadeModCV * (1.0f - (-1.0f));
    }
    else
    {
        crossfade = crossfadeParam != nullptr ? crossfadeParam->load() : 0.0f;
    }

    // Use a constant power law for a smooth crossfade without volume dips
    const float mixAngle = (crossfade * 0.5f + 0.5f) * juce::MathConstants<float>::halfPi;
    const float gainA = std::cos(mixAngle);
    const float gainB = std::sin(mixAngle);

    // Perform the crossfade into the output buffer
    for (int ch = 0; ch < numChannels; ++ch)
    {
        const float* srcA = (ch < inA.getNumChannels()) ? inA.getReadPointer(ch) : nullptr;
        const float* srcB = (ch < inB.getNumChannels()) ? inB.getReadPointer(ch) : nullptr;
        float* dst = out.getWritePointer(ch);
        
        for (int i = 0; i < numSamples; ++i)
        {
            const float a = srcA ? srcA[i] : 0.0f;
            const float b = srcB ? srcB[i] : 0.0f;
            dst[i] = a * gainA + b * gainB;
        }
    }

    // Now, apply the master gain and pan to the mixed signal in the output buffer
    float masterGain = 0.0f;
    if (isParamInputConnected("gain"))
    {
        // Map CV [0,1] to gain [-60, 6] dB
        float gainDb = -60.0f + gainModCV * (6.0f - (-60.0f));
        masterGain = juce::Decibels::decibelsToGain(gainDb);
    }
    else
    {
        masterGain = juce::Decibels::decibelsToGain(gainParam != nullptr ? gainParam->load() : 0.0f);
    }
    
    float pan = 0.0f;
    if (isParamInputConnected("pan"))
    {
        // Map CV [0,1] to pan [-1, 1]
        pan = -1.0f + panModCV * (1.0f - (-1.0f));
    }
    else
    {
        pan = panParam != nullptr ? panParam->load() : 0.0f;
    }
    const float panAngleMaster = (pan * 0.5f + 0.5f) * juce::MathConstants<float>::halfPi;
    const float lGain = masterGain * std::cos(panAngleMaster);
    const float rGain = masterGain * std::sin(panAngleMaster);

    out.applyGain(0, 0, numSamples, lGain);
    if (numChannels > 1)
        out.applyGain(1, 0, numSamples, rGain);

    // Store live modulated values for UI display
    setLiveParamValue("crossfade_live", crossfade);
    setLiveParamValue("gain_live", isParamInputConnected("gain") ? (-60.0f + gainModCV * 66.0f) : (gainParam != nullptr ? gainParam->load() : 0.0f));
    setLiveParamValue("pan_live", pan);

    // Update tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(out.getSample(0, numSamples - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(out.getSample(1, numSamples - 1));
    }
}

// Updated UI drawing code
#if defined(PRESET_CREATOR_UI)
void MixerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float gainDb = gainParam != nullptr ? gainParam->load() : 0.0f;
    float pan = panParam != nullptr ? panParam->load() : 0.0f;
    float crossfade = crossfadeParam != nullptr ? crossfadeParam->load() : 0.0f;

    ImGui::PushItemWidth (itemWidth);

    // New Crossfade Slider
    bool isXfModulated = isParamModulated("x-fade");
    if (isXfModulated) {
        crossfade = getLiveParamValueFor("x-fade", "crossfade_live", crossfade);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("A <-> B", &crossfade, -1.0f, 1.0f)) if (!isXfModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("crossfade"))) *p = crossfade;
    if (!isXfModulated) adjustParamOnWheel (ap.getParameter ("crossfade"), "crossfade", crossfade);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isXfModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }


    // Existing Gain and Pan Sliders
    bool isGainModulated = isParamModulated("gain");
    if (isGainModulated) {
        gainDb = getLiveParamValueFor("gain", "gain_live", gainDb);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Gain dB", &gainDb, -60.0f, 6.0f)) if (!isGainModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gain"))) *p = gainDb;
    if (!isGainModulated) adjustParamOnWheel (ap.getParameter ("gain"), "gainDb", gainDb);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isGainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    bool isPanModulated = isParamModulated("pan");
    if (isPanModulated) {
        pan = getLiveParamValueFor("pan", "pan_live", pan);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat ("Pan", &pan, -1.0f, 1.0f)) if (!isPanModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("pan")))  *p = pan;
    if (!isPanModulated) adjustParamOnWheel (ap.getParameter ("pan"), "pan", pan);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isPanModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}
#endif

void MixerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In A L", 0);
    helpers.drawAudioInputPin("In A R", 1);
    helpers.drawAudioInputPin("In B L", 2);
    helpers.drawAudioInputPin("In B R", 3);

    int busIdx, chanInBus;
    if (getParamRouting("gain", busIdx, chanInBus))
        helpers.drawAudioInputPin("Gain Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("pan", busIdx, chanInBus))
        helpers.drawAudioInputPin("Pan Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("crossfade", busIdx, chanInBus))
        helpers.drawAudioInputPin("X-Fade Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}

bool MixerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outChannelIndexInBus = 0;
    if (paramId == "gain")      { outBusIndex = 2; return true; }
    if (paramId == "pan")       { outBusIndex = 3; return true; }
    if (paramId == "crossfade" || paramId == "x-fade") { outBusIndex = 4; return true; }
    return false;
}

================================================================================
FILE: juce\Source\audio\modules\MixerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class MixerModuleProcessor : public ModuleProcessor
{
public:
    MixerModuleProcessor();
    ~MixerModuleProcessor() override = default;

    const juce::String getName() const override { return "mixer"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In A L";
            case 1: return "In A R";
            case 2: return "In B L";
            case 3: return "In B R";
            case 4: return "Gain Mod";
            case 5: return "Pan Mod";
            case 6: return "X-Fade Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
    
    // Parameter bus contract implementation

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* gainParam { nullptr };       // dB
    std::atomic<float>* panParam { nullptr };        // -1..1
    std::atomic<float>* crossfadeParam { nullptr };  // <<< ADD THIS LINE
};

================================================================================
FILE: juce\Source\audio\modules\ModuleProcessor.cpp
================================================================================


#include "ModuleProcessor.h"
#include "../graph/ModularSynthProcessor.h"
#include <unordered_set>


bool ModuleProcessor::getParamRouting(const juce::String& /*paramId*/, int& /*outBusIndex*/, int& /*outChannelIndexInBus*/) const
{
    return false;
}

bool ModuleProcessor::isParamInputConnected(const juce::String& paramId) const
{
    auto* synth = parentSynth;
    if (synth == nullptr)
        return false;

    juce::uint32 myLogicalId = storedLogicalId;
    if (myLogicalId == 0)
    {
        for (const auto& info : synth->getModulesInfo())
        {
            if (synth->getModuleForLogical (info.first) == this)
            {
                myLogicalId = info.first;
                break;
            }
        }
        if (myLogicalId == 0)
            return false;
    }

    int busIndex = -1;
    int chanInBus = -1;
    if (!getParamRouting(paramId, busIndex, chanInBus))
        return false;

    int absoluteChannel = chanInBus;
    if (busIndex > 0)
    {
        int sum = 0;
        const int numInputBuses = getBusCount(true);
        for (int b = 0; b < numInputBuses && b < busIndex; ++b)
            sum += getChannelCountOfBus(true, b);
        absoluteChannel = sum + chanInBus;
    }

    for (const auto& c : synth->getConnectionsInfo())
        if (c.dstLogicalId == myLogicalId && c.dstChan == absoluteChannel)
            return true;

    // Fallback: if stored logicalId yields no match, re-resolve by pointer and retry once.
    {
        juce::uint32 ptrResolvedId = 0;
        for (const auto& info : synth->getModulesInfo())
        {
            if (synth->getModuleForLogical(info.first) == this)
            {
                ptrResolvedId = info.first;
                break;
            }
        }
        if (ptrResolvedId != 0 && ptrResolvedId != myLogicalId)
        {
            for (const auto& c : synth->getConnectionsInfo())
            {
                if (c.dstLogicalId == ptrResolvedId && c.dstChan == absoluteChannel)
                {
                    const_cast<ModuleProcessor*>(this)->setLogicalId(ptrResolvedId);
                    return true;
                }
            }
        }
    }

    return false;
}


================================================================================
FILE: juce\Source\audio\modules\ModuleProcessor.h
================================================================================


#pragma once

#include <juce_audio_processors/juce_audio_processors.h>
#include <functional> // Required for std::function
#include <vector>
#include <map>
#include <unordered_map>
#include <atomic>

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#include <cmath>
#endif

// <<< TRANSPORT STATE FOR GLOBAL CLOCK >>>
// Transport state struct shared by all modules
struct TransportState {
    bool isPlaying = false;
    double bpm = 120.0;
    double songPositionBeats = 0.0;
    double songPositionSeconds = 0.0;
    // Optional global division broadcast from a master tempo/clock (-1 means inactive)
    int globalDivisionIndex = -1;
};

// <<< ALL PIN-RELATED DEFINITIONS ARE NOW CENTRALIZED HERE >>>

// Defines the data type of a modulation or audio signal
enum class PinDataType { CV, Audio, Gate, Raw };

// Describes a single audio/CV input or output pin
struct AudioPin
{
    juce::String name;
    int channel;
    PinDataType type;
    
    AudioPin(const juce::String& n, int ch, PinDataType t) : name(n), channel(ch), type(t) {}
};

// Renamed to avoid conflict with ImGuiNodeEditorComponent's PinInfo
struct DynamicPinInfo {
    juce::String name;
    int channel;
    PinDataType type;

    // Constructor to allow brace-initialization
    DynamicPinInfo(const juce::String& n, int c, PinDataType t) : name(n), channel(c), type(t) {}
};

// Describes a single modulation input pin targeting a parameter
struct ModPin
{
    juce::String name;
    juce::String paramId;
    PinDataType type;
    
    ModPin(const juce::String& n, const juce::String& p, PinDataType t) : name(n), paramId(p), type(t) {}
};

// A collection of all pins for a given module type
struct ModulePinInfo
{
    std::vector<AudioPin> audioIns;
    std::vector<AudioPin> audioOuts;
    std::vector<ModPin> modIns;
    ModulePinInfo() = default;
    ModulePinInfo(std::initializer_list<AudioPin> ins,
                  std::initializer_list<AudioPin> outs,
                  std::initializer_list<ModPin> mods)
        : audioIns(ins), audioOuts(outs), modIns(mods) {}
};

// Forward declaration for NodePinHelpers
class ModuleProcessor;

// Helper struct passed to modules for drawing their pins
struct NodePinHelpers
{
    std::function<void(const char* label, int channel)> drawAudioInputPin;
    std::function<void(const char* label, int channel)> drawAudioOutputPin;
    std::function<void(const char* inLabel, int inChannel, const char* outLabel, int outChannel)> drawParallelPins;
    std::function<void(ModuleProcessor* module)> drawIoPins;
};

class ModularSynthProcessor; // forward declaration

/**
    An abstract base class for all modular synthesizer components.

    This class enforces a common interface for modules, ensuring they can be
    managed by the ModularSynthProcessor. The key requirement is providing access
    to the module's own parameter state via getAPVTS().
*/
class ModuleProcessor : public juce::AudioProcessor
{
public:
    ModuleProcessor(const BusesProperties& ioLayouts) : juce::AudioProcessor(ioLayouts) {}
    ~ModuleProcessor() override = default;

    // Parent container link (set by ModularSynthProcessor when node is created)
    void setParent(ModularSynthProcessor* parent) { parentSynth = parent; }
    ModularSynthProcessor* getParent() const { return parentSynth; }

    // Pure virtual method that all concrete modules MUST implement.
    // This is crucial for the parameter proxy system.
    virtual juce::AudioProcessorValueTreeState& getAPVTS() = 0;

    // Optional UI hook for drawing parameters inside nodes (used by Preset Creator)
    virtual void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
    {
        juce::ignoreUnused(itemWidth, isParamModulated, onModificationEnded);
    }

    // Optional UI hook for drawing IO pins inside nodes
    virtual void drawIoPins(const NodePinHelpers& /*helpers*/) {}


    // Get the current output value for a channel (for visualization)
    virtual float getOutputChannelValue(int channel) const
    {
        if (juce::isPositiveAndBelow(channel, (int)lastOutputValues.size()) && lastOutputValues[channel])
            return lastOutputValues[channel]->load();
        return 0.0f;
    }
    
    // Helper method to update output telemetry with peak magnitude
    // Call this at the end of processBlock to update visualization values
    void updateOutputTelemetry(const juce::AudioBuffer<float>& buffer)
    {
        const int numChannels = juce::jmin(buffer.getNumChannels(), (int)lastOutputValues.size());
        for (int ch = 0; ch < numChannels; ++ch)
        {
            if (lastOutputValues[ch])
            {
                // Use peak magnitude (max absolute value) for better visualization
                const float peak = buffer.getMagnitude(ch, 0, buffer.getNumSamples());
                lastOutputValues[ch]->store(peak, std::memory_order_relaxed);
            }
        }
    }

    // Standardized labels for module audio I/O channels (override per module if needed)
    virtual juce::String getAudioInputLabel(int channel) const
    {
        return juce::String("In ") + juce::String(channel + 1);
    }

    virtual juce::String getAudioOutputLabel(int channel) const
    {
        return juce::String("Out ") + juce::String(channel + 1);
    }

    // Stable logical ID assigned by ModularSynthProcessor upon node creation.
    void setLogicalId(juce::uint32 id) { storedLogicalId = id; }
    juce::uint32 getLogicalId() const { return storedLogicalId; }

    // === COMPREHENSIVE DIAGNOSTICS SYSTEM ===
    
    // Get detailed connection information for debugging
    virtual juce::String getConnectionDiagnostics() const
    {
        juce::String result = "=== CONNECTION DIAGNOSTICS ===\n";
        
        // Bus layout info
        result += "Input Buses: " + juce::String(getBusCount(true)) + "\n";
        result += "Output Buses: " + juce::String(getBusCount(false)) + "\n";
        
        for (int bus = 0; bus < getBusCount(true); ++bus)
        {
            auto busName = getBus(true, bus)->getName();
            auto numChannels = getBus(true, bus)->getNumberOfChannels();
            result += "  Input Bus " + juce::String(bus) + ": \"" + busName + "\" (" + juce::String(numChannels) + " channels)\n";
        }
        
        for (int bus = 0; bus < getBusCount(false); ++bus)
        {
            auto busName = getBus(false, bus)->getName();
            auto numChannels = getBus(false, bus)->getNumberOfChannels();
            result += "  Output Bus " + juce::String(bus) + ": \"" + busName + "\" (" + juce::String(numChannels) + " channels)\n";
        }
        
        return result;
    }
    
    // Get parameter routing diagnostics
    virtual juce::String getParameterRoutingDiagnostics() const
    {
        juce::String result = "=== PARAMETER ROUTING DIAGNOSTICS ===\n";
        
        // Note: This method is const, so we can't access getAPVTS() directly
        // We'll return a placeholder for now
        result += "Parameter routing diagnostics require non-const access.\n";
        result += "Use getModuleDiagnostics() from ModularSynthProcessor instead.\n";
        
        return result;
    }
    
    // Get live parameter values for debugging
    virtual juce::String getLiveParameterDiagnostics() const
    {
        juce::String result = "=== LIVE PARAMETER VALUES ===\n";
        
        for (const auto& pair : paramLiveValues)
        {
            result += "  " + pair.first + ": " + juce::String(pair.second.load(), 4) + "\n";
        }
        
        return result;
    }
    
    // Get comprehensive module diagnostics
    virtual juce::String getAllDiagnostics() const
    {
        juce::String result = "=== MODULE DIAGNOSTICS ===\n";
        result += "Module Type: " + getName() + "\n\n";
        result += getConnectionDiagnostics() + "\n";
        result += getParameterRoutingDiagnostics() + "\n";
        result += getLiveParameterDiagnostics();
        return result;
    }


    /**
        Resolves a parameter's string ID to its modulation bus and channel.

        This is a virtual function that each module must override to declare which of its
        parameters can be modulated by an external signal. The function maps parameter IDs
        to their corresponding input bus and channel indices within that bus.

        @param paramId              The string ID of the parameter to query (e.g., "cutoff", "frequency").
        @param outBusIndex          Receives the index of the input bus used for modulation.
        @param outChannelIndexInBus Receives the channel index within that bus.
        @returns                    True if the parameter supports modulation, false otherwise.
        
        @see isParamInputConnected
    */
    virtual bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const;

    /**
        Checks if a parameter's modulation input is connected in the synth graph.

        This is the single, reliable method for a module's audio thread to determine
        if it should use an incoming CV signal instead of its internal parameter value.
        The function internally uses getParamRouting() to resolve the parameter to its
        bus/channel location, then queries the parent synth's connection graph.

        @param paramId The string ID of the parameter to check (e.g., "cutoff", "frequency").
        @returns       True if a cable is connected to this parameter's modulation input.
        
        @see getParamRouting
    */
    bool isParamInputConnected(const juce::String& paramId) const;

    // --- Live telemetry for UI (thread-safe, lock-free) ---
    void setLiveParamValue(const juce::String& paramId, float value)
    {
        auto result = paramLiveValues.try_emplace(paramId, value);
        if (!result.second)
            result.first->second.store(value, std::memory_order_relaxed);
    }

    float getLiveParamValue(const juce::String& paramId, float fallback) const
    {
        // FIX: Only return the "live" (modulated) value if the corresponding
        // modulation input is actually connected. Otherwise, always return the
        // fallback, which is the base parameter's real value.
        if (isParamInputConnected(paramId))
        {
            if (auto it = paramLiveValues.find(paramId); it != paramLiveValues.end())
                return it->second.load(std::memory_order_relaxed);
        }
        return fallback;
    }

    // New helper: decouple the connectivity check (modParamId) from the live value key (liveKey).
    // This allows UI code to ask "is X_mod connected?" while reading the corresponding
    // live telemetry stored under a different key like "X_live".
    float getLiveParamValueFor(const juce::String& modParamId,
                               const juce::String& liveKey,
                               float fallback) const
    {
        if (isParamInputConnected(modParamId))
        {
            if (auto it = paramLiveValues.find(liveKey); it != paramLiveValues.end())
                return it->second.load(std::memory_order_relaxed);
        }
        return fallback;
    }

    // Optional extra state hooks for modules that need to persist non-parameter data
    // Default: return invalid tree / ignore.
    virtual juce::ValueTree getExtraStateTree() const { return {}; }
    virtual void setExtraStateTree(const juce::ValueTree&) {}
    
    // Optional timing info hook for modules that need global clock/transport
    // Default: ignore (modules that don't need timing can skip implementing this)
    virtual void setTimingInfo(const TransportState& state) { juce::ignoreUnused(state); }
    
    // Optional dynamic pin interface for modules with variable I/O (e.g., polyphonic modules)
    // Default: return empty vector (no dynamic pins)
    virtual std::vector<DynamicPinInfo> getDynamicInputPins() const { return {}; }
    virtual std::vector<DynamicPinInfo> getDynamicOutputPins() const { return {}; }

public:
    // OPTION 9: Make public for TTS debugging
    // Live, modulated parameter values for UI feedback
    std::unordered_map<juce::String, std::atomic<float>> paramLiveValues;

protected:
    // Thread-safe storage for last known output values (for tooltips)
    std::vector<std::unique_ptr<std::atomic<float>>> lastOutputValues;

#if defined(PRESET_CREATOR_UI)

    static void adjustParamOnWheel (juce::RangedAudioParameter* parameter,
                                    const juce::String& idOrName,
                                    float displayedValue)
    {
        if (parameter == nullptr) return;
        if (! ImGui::IsItemHovered()) return;
        const float wheel = ImGui::GetIO().MouseWheel;
        if (wheel == 0.0f) return;

        if (auto* pf = dynamic_cast<juce::AudioParameterFloat*>(parameter))
        {
            // No right-click editing here; modules can add InputFloat next to sliders

            const auto& range = pf->range;
            const float span = range.end - range.start;
            const juce::String id = idOrName.toLowerCase();

            float step = span / 200.0f; // default ~0.5% of range
            if (span <= 1.0f) step = 0.01f;
            // Custom: fine tune for sequencer steps
            if (id.contains ("step"))
            {
                step = 0.05f;
            }
            if (id.contains ("hz") || id.contains ("freq") || id.contains ("cutoff") || id.contains ("rate"))
            {
                const float v = std::max (1.0f, std::abs (displayedValue));
                step = std::max (1.0f, std::pow (10.0f, std::floor (std::log10 (v)) - 1.0f));
            }
            else if (id.contains ("ms") || id.contains ("time"))
            {
                const float v = std::max (1.0f, std::abs (displayedValue));
                step = std::max (0.1f, std::pow (10.0f, std::floor (std::log10 (v)) - 1.0f));
            }
            else if (id.contains ("db") || id.contains ("gain"))
            {
                step = 0.5f;
            }
            else if (id.contains ("mix") || id.contains ("depth") || id.contains ("amount") || id.contains ("resonance") || id.contains ("q") || id.contains ("size") || id.contains ("damp") || id.contains ("pan") || id.contains ("threshold"))
            {
                step = 0.01f;
            }

            float newVal = pf->get() + (wheel > 0 ? step : -step);
            newVal = juce::jlimit (range.start, range.end, newVal);
            *pf = newVal;
        }
        else if (auto* pc = dynamic_cast<juce::AudioParameterChoice*>(parameter))
        {
            int idx = pc->getIndex();
            idx += (ImGui::GetIO().MouseWheel > 0 ? 1 : -1);
            idx = juce::jlimit (0, pc->choices.size() - 1, idx);
            *pc = idx;
        }
        else if (auto* pi = dynamic_cast<juce::AudioParameterInt*>(parameter))
        {
            int currentVal = pi->get();
            int newVal = currentVal + (wheel > 0 ? 1 : -1);
            const auto& range = pi->getNormalisableRange();
            newVal = juce::jlimit((int)range.start, (int)range.end, newVal);
            *pi = newVal;
        }
        else if (auto* pb = dynamic_cast<juce::AudioParameterBool*>(parameter))
        {
            // Optional: toggle on strong scroll
            juce::ignoreUnused (pb);
        }
    }

#endif

public:
    //==============================================================================
    // Helper function to convert bus index and channel-in-bus to absolute channel index
    //==============================================================================
    int getChannelIndexInProcessBlockBuffer(bool isInput, int busIndex, int channelIndexInBus) const
    {
        int absoluteChannel = channelIndexInBus;
        if (busIndex > 0)
        {
            int sum = 0;
            const int numBuses = getBusCount(isInput);
            for (int b = 0; b < numBuses && b < busIndex; ++b)
                sum += getChannelCountOfBus(isInput, b);
            absoluteChannel = sum + channelIndexInBus;
        }
        return absoluteChannel;
    }

    //==============================================================================
    // Provide default implementations for the pure virtuals to reduce boilerplate
    // in concrete module classes.
    //==============================================================================
    const juce::String getName() const override { return "Module"; }
    bool acceptsMidi() const override { return false; }
    bool producesMidi() const override { return false; }
    double getTailLengthSeconds() const override { return 0.0; }
    juce::AudioProcessorEditor* createEditor() override { return nullptr; }
    bool hasEditor() const override { return false; }
    int getNumPrograms() override { return 1; }
    int getCurrentProgram() override { return 0; }
    void setCurrentProgram (int) override {}
    const juce::String getProgramName (int) override { return {}; }
    void changeProgramName (int, const juce::String&) override {}
    void getStateInformation (juce::MemoryBlock&) override {}
    void setStateInformation (const void*, int) override {}

private:
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (ModuleProcessor)

protected:
    ModularSynthProcessor* parentSynth { nullptr };
    juce::uint32 storedLogicalId { 0 };
};

================================================================================
FILE: juce\Source\audio\modules\MultiBandShaperModuleProcessor.cpp
================================================================================


#include "MultiBandShaperModuleProcessor.h"
#include <cmath>

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#endif

juce::AudioProcessorValueTreeState::ParameterLayout MultiBandShaperModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    // Create a Drive parameter for each band (0 = mute, 100 = max drive)
    for (int i = 0; i < NUM_BANDS; ++i)
    {
        auto paramId = "drive_" + juce::String(i + 1);
        auto paramName = "Drive " + juce::String(i + 1);
        params.push_back(std::make_unique<juce::AudioParameterFloat>(
            paramId, paramName,
            juce::NormalisableRange<float>(0.0f, 100.0f, 0.01f, 0.3f), 1.0f));
    }

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "outputGain", "Output Gain",
        juce::NormalisableRange<float>(-24.0f, 24.0f, 0.1f), 0.0f));

    return { params.begin(), params.end() };
}

MultiBandShaperModuleProcessor::MultiBandShaperModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(2 + NUM_BANDS + 1), true) // 0-1: Audio In, 2-9: Drive Mods, 10: Gain Mod
          .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "MultiBandShaperParams", createParameterLayout())
{
    for (int i = 0; i < NUM_BANDS; ++i)
    {
        driveParams[i] = apvts.getRawParameterValue("drive_" + juce::String(i + 1));
    }
    outputGainParam = apvts.getRawParameterValue("outputGain");

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void MultiBandShaperModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32)samplesPerBlock, 1 }; // Mono spec for each filter

    const float q = 1.41f; // Standard Q value for reasonable band separation

    for (int band = 0; band < NUM_BANDS; ++band)
    {
        for (int ch = 0; ch < 2; ++ch)
        {
            filters[band][ch].prepare(spec);
            filters[band][ch].reset(); // Ensure clean state
            filters[band][ch].coefficients = juce::dsp::IIR::Coefficients<float>::makeBandPass(
                sampleRate, centerFreqs[band], q);
        }
    }
    
    bandBuffer.setSize(2, samplesPerBlock, false, true, true); // Clear and allocate
    sumBuffer.setSize(2, samplesPerBlock, false, true, true); // Clear and allocate
}

void MultiBandShaperModuleProcessor::releaseResources()
{
    // Reset all filters to ensure clean state when stopped
    for (int band = 0; band < NUM_BANDS; ++band)
    {
        for (int ch = 0; ch < 2; ++ch)
        {
            filters[band][ch].reset();
        }
    }
}

void MultiBandShaperModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    sumBuffer.clear();

    for (int band = 0; band < NUM_BANDS; ++band)
    {
        // 1. Filter the original signal to isolate this band
        for (int ch = 0; ch < 2; ++ch)
        {
            bandBuffer.copyFrom(ch, 0, inBus, ch, 0, numSamples);
        }

        // Apply filters per channel
        for (int ch = 0; ch < 2; ++ch)
        {
            float* data = bandBuffer.getWritePointer(ch);
            for (int i = 0; i < numSamples; ++i)
            {
                data[i] = filters[band][ch].processSample(data[i]);
            }
        }

        // 2. Apply waveshaping to the filtered band
        float drive = driveParams[band]->load();
        
        // Check for modulation input from unified input bus (channels 2-9)
        if (isParamInputConnected("drive_" + juce::String(band + 1)))
        {
            int modChannel = 2 + band; // Channels 2-9 are drive mods for bands 0-7
            if (inBus.getNumChannels() > modChannel)
            {
                // Simple 0..1 CV to full drive range mapping (0-100)
                float modValue = inBus.getSample(modChannel, 0);
                drive = juce::jmap(modValue, 0.0f, 1.0f, 0.0f, 100.0f);
            }
        }
        setLiveParamValue("drive_" + juce::String(band + 1) + "_live", drive);

        // Skip processing if drive is zero (band is muted)
        if (drive > 0.001f) // Use a small threshold instead of 0.0f
        {
            // Apply tanh waveshaping
            for (int ch = 0; ch < 2; ++ch)
            {
                float* data = bandBuffer.getWritePointer(ch);
                for (int i = 0; i < numSamples; ++i)
                {
                    data[i] = std::tanh(data[i] * drive);
                }
            }

            // 3. Add the shaped band to the final mix
            sumBuffer.addFrom(0, 0, bandBuffer, 0, 0, numSamples);
            sumBuffer.addFrom(1, 0, bandBuffer, 1, 0, numSamples);
        }
    }

    // 4. Apply output gain and copy to the final output bus
    float gainDb = outputGainParam->load();
    
    // Check for modulation on output gain from unified input bus
    if (isParamInputConnected("outputGain"))
    {
        int gainModChannel = 2 + NUM_BANDS; // Channel 10
        if (inBus.getNumChannels() > gainModChannel)
        {
            float modValue = inBus.getSample(gainModChannel, 0);
            gainDb = juce::jmap(modValue, 0.0f, 1.0f, -24.0f, 24.0f);
        }
    }
    setLiveParamValue("outputGain_live", gainDb);
    
    const float finalGain = juce::Decibels::decibelsToGain(gainDb);
    outBus.copyFrom(0, 0, sumBuffer, 0, 0, numSamples);
    outBus.copyFrom(1, 0, sumBuffer, 1, 0, numSamples);
    outBus.applyGain(finalGain);
    
    if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, numSamples - 1));
    if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, numSamples - 1));
}

bool MultiBandShaperModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId.startsWith("drive_"))
    {
        int bandNum = paramId.getTrailingIntValue(); // e.g., "drive_5" -> 5
        if (bandNum > 0 && bandNum <= NUM_BANDS)
        {
            outChannelIndexInBus = 2 + (bandNum - 1); // Channels 2-9 for drives 1-8
            return true;
        }
    }
    if (paramId == "outputGain")
    {
        outChannelIndexInBus = 2 + NUM_BANDS; // Channel 10 for output gain
        return true;
    }
    return false;
}

juce::String MultiBandShaperModuleProcessor::getAudioInputLabel(int channel) const
{
    // Bus 0: Audio In
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    
    // Bus 1: Mod In (channels are relative to the start of the bus)
    // Absolute channel index = channel - numChannelsInBus0
    int modChannel = channel - 2; // Bus 0 has 2 channels (stereo)
    if (modChannel >= 0 && modChannel < NUM_BANDS)
    {
        return "Drive " + juce::String(modChannel + 1) + " Mod";
    }
    if (modChannel == NUM_BANDS)
    {
        return "Gain Mod";
    }
    
    return {};
}

#if defined(PRESET_CREATOR_UI)
void MultiBandShaperModuleProcessor::drawParametersInNode(
    float itemWidth,
    const std::function<bool(const juce::String&)>& isParamModulated,
    const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    const float centerFreqs[NUM_BANDS] = { 60.0f, 150.0f, 400.0f, 1000.0f, 2400.0f, 5000.0f, 10000.0f, 16000.0f };

    // --- NEW: Vertical Slider Bank Layout ---
    const float sliderWidth = itemWidth / (float)NUM_BANDS * 0.85f;
    const float sliderHeight = 80.0f;

    for (int i = 0; i < NUM_BANDS; ++i)
    {
        if (i > 0) ImGui::SameLine();

        const auto paramId = "drive_" + juce::String(i + 1);
        auto* driveParamPtr = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId));
        if (!driveParamPtr) continue;

        const bool isDriveModulated = isParamInputConnected(paramId); // Use correct isParamInputConnected
        float drive = isDriveModulated ? getLiveParamValueFor(paramId, paramId + "_live", driveParamPtr->get()) : driveParamPtr->get();

        ImGui::PushID(i);
        ImGui::BeginGroup();

        if (isDriveModulated) ImGui::BeginDisabled();
        
        if (ImGui::VSliderFloat("##drive", ImVec2(sliderWidth, sliderHeight), &drive, 0.0f, 100.0f, "", ImGuiSliderFlags_Logarithmic))
        {
            if (!isDriveModulated) *driveParamPtr = drive;
        }
        
        if (!isDriveModulated) adjustParamOnWheel(driveParamPtr, "drive", drive);
        if (ImGui::IsItemDeactivatedAfterEdit() && !isDriveModulated) { onModificationEnded(); }
        if (isDriveModulated) ImGui::EndDisabled();

        // Draw labels below the slider
        ImGui::Text("%.1f", drive);
        ImGui::Text("%dHz", (int)centerFreqs[i]);
        if (isDriveModulated) { ImGui::SameLine(); ImGui::TextUnformatted("(m)"); }

        ImGui::EndGroup();
        ImGui::PopID();
    }


    // Output Gain Slider (remains horizontal)
    auto* gainParamPtr = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("outputGain"));
    const bool isGainModulated = isParamInputConnected("outputGain");
    float gain = isGainModulated ? getLiveParamValueFor("outputGain", "outputGain_live", gainParamPtr->get()) : gainParamPtr->get();
    
    if (isGainModulated) ImGui::BeginDisabled();
    
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderFloat("Output (dB)", &gain, -24.0f, 24.0f, "%.1f dB"))
    {
        if (!isGainModulated) *gainParamPtr = gain;
    }
    if (!isGainModulated) adjustParamOnWheel(gainParamPtr, "gain", gain);
    if (ImGui::IsItemDeactivatedAfterEdit() && !isGainModulated) { onModificationEnded(); }
    ImGui::PopItemWidth();
    
    if (isGainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
}

void MultiBandShaperModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
    
    ImGui::Spacing(); // Add a little space before mod inputs

    for (int i = 0; i < NUM_BANDS; ++i)
    {
        auto paramId = "drive_" + juce::String(i + 1);
        int busIdx, chanInBus;
        if (getParamRouting(paramId, busIdx, chanInBus))
        {
            helpers.drawAudioInputPin(("Drive " + juce::String(i + 1) + " Mod").toRawUTF8(), getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        }
    }
    
    // Draw output gain modulation input
    int busIdx, chanInBus;
    if (getParamRouting("outputGain", busIdx, chanInBus))
    {
        helpers.drawAudioInputPin("Gain Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    }
}
#endif



================================================================================
FILE: juce\Source\audio\modules\MultiBandShaperModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class MultiBandShaperModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int NUM_BANDS = 8;

    MultiBandShaperModuleProcessor();
    ~MultiBandShaperModuleProcessor() override = default;

    const juce::String getName() const override { return "8bandshaper"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;

    // A filter for each band (stereo)
    using IIRFilter = juce::dsp::IIR::Filter<float>;
    std::array<std::array<IIRFilter, 2>, NUM_BANDS> filters; // [band][channel]
    
    // A parameter pointer for each band's drive
    std::array<std::atomic<float>*, NUM_BANDS> driveParams;
    std::atomic<float>* outputGainParam { nullptr };

    // Pre-allocated working buffers to avoid real-time memory allocation
    juce::AudioBuffer<float> bandBuffer;
    juce::AudioBuffer<float> sumBuffer;
    
    // Center frequencies for the 8 bands
    static constexpr float centerFreqs[NUM_BANDS] = { 
        60.0f, 150.0f, 400.0f, 1000.0f, 2400.0f, 5000.0f, 10000.0f, 16000.0f 
    };
};



================================================================================
FILE: juce\Source\audio\modules\MultiSequencerModuleProcessor.cpp
================================================================================


#include "MultiSequencerModuleProcessor.h"
#include <iostream>
#include <array>

#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#endif

using APVTS = juce::AudioProcessorValueTreeState;

// This function is a direct copy from the original StepSequencerModuleProcessor.cpp
static juce::NormalisableRange<float> makeRateRange()
{
    juce::NormalisableRange<float> r (0.1f, 20.0f, 0.01f, 0.5f);
    return r;
}

// This function is a direct copy from the original StepSequencerModuleProcessor.cpp
APVTS::ParameterLayout MultiSequencerModuleProcessor::createParameterLayout()
{
	std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps", "Number of Steps", 1, MAX_STEPS, 8));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("rate", "Rate", makeRateRange(), 2.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateLength", "Gate Length", juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateThreshold", "Gate Threshold", juce::NormalisableRange<float> (0.0f, 1.0f, 0.001f), 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("rate_mod", "Rate Mod", 0.0f, 1.0f, 0.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateLength_mod", "Gate Length Mod", 0.0f, 1.0f, 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("numSteps_mod", "Num Steps Mod", 0.0f, 1.0f, 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps_max", "Num Steps Max", 1, MAX_STEPS, MAX_STEPS));
    
    // Transport sync parameters
    params.push_back(std::make_unique<juce::AudioParameterBool>("sync", "Sync to Transport", false));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("rate_division", "Division", 
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3));
    
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        const juce::String pid = "step" + juce::String (i + 1);
        params.push_back (std::make_unique<juce::AudioParameterFloat> (pid, pid, juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
        const juce::String modPid = "step" + juce::String(i + 1) + "_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(modPid, modPid, 0.0f, 1.0f, 0.5f));
        const juce::String trigPid = "step" + juce::String(i + 1) + "_trig";
        params.push_back(std::make_unique<juce::AudioParameterBool>(trigPid, trigPid, false));
        const juce::String trigModPid = "step" + juce::String(i + 1) + "_trig_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(trigModPid, trigModPid, 0.0f, 1.0f, 0.5f));
        const juce::String gatePid = "step" + juce::String(i + 1) + "_gate";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(gatePid, gatePid, 0.0f, 1.0f, 0.8f));
        const juce::String gateModPid = "step" + juce::String(i + 1) + "_gate_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(gateModPid, gateModPid, 0.0f, 1.0f, 0.5f));
	}
	return { params.begin(), params.end() };
}

MultiSequencerModuleProcessor::MultiSequencerModuleProcessor()
    // <<< CHANGE 1: Update the output bus to add per-step outputs
    : ModuleProcessor (BusesProperties()
                           .withInput("Inputs", juce::AudioChannelSet::discreteChannels(2 + 4 + (MAX_STEPS * 3)), true)
                           .withOutput ("Outputs", juce::AudioChannelSet::discreteChannels(6 + (MAX_STEPS * 3)), true)),
      apvts (*this, nullptr, "SeqParams", createParameterLayout())
{
    numStepsParam      = apvts.getRawParameterValue ("numSteps");
    rateParam          = apvts.getRawParameterValue ("rate");
    gateLengthParam    = apvts.getRawParameterValue ("gateLength");
    gateThresholdParam = apvts.getRawParameterValue ("gateThreshold");
    rateModParam       = apvts.getRawParameterValue ("rate_mod");
    gateLengthModParam = apvts.getRawParameterValue ("gateLength_mod");
    numStepsModParam   = apvts.getRawParameterValue ("numSteps_mod");
    stepsModMaxParam   = apvts.getRawParameterValue ("numSteps_max");
    
    pitchParams.resize (MAX_STEPS);
	stepModParams.resize(MAX_STEPS);
	stepTrigParams.resize(MAX_STEPS);
    stepTrigModParams.resize(MAX_STEPS);
    stepGateParams.resize(MAX_STEPS);
	for (int i = 0; i < MAX_STEPS; ++i)
	{
        pitchParams[i] = apvts.getRawParameterValue ("step" + juce::String (i + 1));
		stepModParams[i] = apvts.getRawParameterValue("step" + juce::String(i + 1) + "_mod");
		stepTrigParams[i] = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("step" + juce::String(i + 1) + "_trig"));
        stepTrigModParams[i] = apvts.getRawParameterValue("step" + juce::String(i + 1) + "_trig_mod");
        stepGateParams[i] = apvts.getRawParameterValue("step" + juce::String(i + 1) + "_gate");
	}

    // <<< CHANGE 2: Initialize for all 54 outputs
    for (int i = 0; i < 6 + (MAX_STEPS * 3); ++i)
		lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void MultiSequencerModuleProcessor::prepareToPlay (double newSampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sampleRate = newSampleRate > 0.0 ? newSampleRate : 44100.0;
	phase = 0.0;
}

void MultiSequencerModuleProcessor::setTimingInfo(const TransportState& state)
{
    // Check if the transport has just started playing
    if (state.isPlaying && !wasPlaying)
    {
        // Reset to the beginning when play is pressed
        currentStep.store(0);
        phase = 0.0;
    }
    wasPlaying = state.isPlaying;
    
    m_currentTransport = state;
}

juce::ValueTree MultiSequencerModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("SequencerState");
    vt.setProperty("sync", apvts.getRawParameterValue("sync")->load(), nullptr);
    vt.setProperty("rate_division", apvts.getRawParameterValue("rate_division")->load(), nullptr);
    return vt;
}

void MultiSequencerModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("SequencerState"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync")))
            *p = (bool)vt.getProperty("sync", false);
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division")))
            *p = (int)vt.getProperty("rate_division", 3);
    }
}

void MultiSequencerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    // --- PART 1: The original, working StepSequencer logic for "Live" outputs ---
    juce::ignoreUnused (midi);
    if (rateParam == nullptr || numStepsParam == nullptr || gateLengthParam == nullptr)
    {
        buffer.clear();
        return;
    }

    const int numSamples = buffer.getNumSamples();
    const auto& inputBus = getBusBuffer(buffer, true, 0);
    auto* pitchOut       = buffer.getWritePointer(0);
    auto* gateOut        = buffer.getNumChannels() > 1 ? buffer.getWritePointer(1) : nullptr;
    auto* gateNuancedOut = buffer.getNumChannels() > 2 ? buffer.getWritePointer(2) : nullptr;
    auto* velocityOut    = buffer.getNumChannels() > 3 ? buffer.getWritePointer(3) : nullptr;
    auto* modOut         = buffer.getNumChannels() > 4 ? buffer.getWritePointer(4) : nullptr;
    auto* trigOut        = buffer.getNumChannels() > 5 ? buffer.getWritePointer(5) : nullptr;
    
    const bool isRateMod = isParamInputConnected("rate_mod");
    const bool isGateLenMod = isParamInputConnected("gateLength_mod");
    const bool isStepsMod = isParamInputConnected("numSteps_mod");
    const float* rateCV = isRateMod && inputBus.getNumChannels() > 2 ? inputBus.getReadPointer(2) : nullptr;
    const float* gateLenCV = isGateLenMod && inputBus.getNumChannels() > 3 ? inputBus.getReadPointer(3) : nullptr;
    const float* stepsCV = isStepsMod && inputBus.getNumChannels() > 4 ? inputBus.getReadPointer(4) : nullptr;
    
    const float baseRate = rateParam->load();
    const float baseGate = gateLengthParam->load();
    const int baseSteps = (int) numStepsParam->load();
    const int boundMax = stepsModMaxParam != nullptr ? juce::jlimit (1, MAX_STEPS, (int) stepsModMaxParam->load()) : MAX_STEPS;
    const float gateThreshold = gateThresholdParam != nullptr ? juce::jlimit(0.0f, 1.0f, gateThresholdParam->load()) : 0.5f;

    // --- UI Telemetry Bootstrap (from old StepSequencer) ---
    // Publish per-step live values for ALL steps this block (use first-sample snapshot)
    {
        const int totalCh = inputBus.getNumChannels();
        for (int si = 0; si < MAX_STEPS; ++si)
        {
            // Absolute channel for per-step value mod: 6..21
            const int ch = 6 + si;
            const bool hasCh = totalCh > ch;
            const float base = (pitchParams.size() > (size_t) si && pitchParams[si] != nullptr) ? pitchParams[si]->load() : 0.0f;
            float live = base;
            if (hasCh && isParamInputConnected("step" + juce::String(si + 1) + "_mod"))
            {
                const float cv0 = inputBus.getReadPointer(ch)[0];
                live = juce::jlimit(0.0f, 1.0f, base + (cv0 - 0.5f));
            }
            setLiveParamValue("step_live_" + juce::String(si + 1), live);

            // Per-step gate live values: channels 38..53
            const int gateCh = 38 + si;
            const bool hasGateCh = totalCh > gateCh;
            const float baseGateVal = (stepGateParams.size() > (size_t) si && stepGateParams[si] != nullptr) ? stepGateParams[si]->load() : 0.8f;
            float liveGate = baseGateVal;
            if (hasGateCh && isParamInputConnected("step" + juce::String(si + 1) + "_gate_mod"))
            {
                const float cv0 = inputBus.getReadPointer(gateCh)[0];
                liveGate = juce::jlimit(0.0f, 1.0f, baseGateVal + (cv0 - 0.5f));
            }
            setLiveParamValue("gate_live_" + juce::String(si + 1), liveGate);

            // Per-step trigger live values: channels 22..37
            const int trigCh = 22 + si;
            const bool hasTrigCh = totalCh > trigCh;
            const bool baseTrig = (stepTrigParams.size() > (size_t) si && stepTrigParams[si] != nullptr) ? (bool)(*stepTrigParams[si]) : false;
            bool liveTrig = baseTrig;
            if (hasTrigCh && isParamInputConnected("step" + juce::String(si + 1) + "_trig_mod"))
            {
                const float cv0 = inputBus.getReadPointer(trigCh)[0];
                liveTrig = cv0 > 0.5f;
            }
            setLiveParamValue("trig_live_" + juce::String(si + 1), liveTrig ? 1.0f : 0.0f);
        }
    }

    bool stepAdvanced = false;
    float lastRateLive = baseRate;
    float lastGateLive = baseGate;
    float lastGateThresholdLive = gateThreshold;
    int   lastStepsLive = baseSteps;

	for (int i = 0; i < numSamples; ++i)
	{
        int activeSteps = baseSteps;
        if (isStepsMod && stepsCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, stepsCV[i]);
            const int mapped = 1 + (int) std::round(cv * (MAX_STEPS - 1));
            activeSteps = juce::jlimit(1, boundMax, mapped);
        }
        if (currentStep.load() >= activeSteps)
            currentStep.store(0);
        
        float rate = baseRate;
        if (isRateMod && rateCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            const float modRateHz = 0.01f + cv * (50.0f - 0.01f);
            rate = modRateHz;
        }
        lastRateLive = rate;
        
        float gateLen = baseGate;
        if (isGateLenMod && gateLenCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, gateLenCV[i]);
            gateLen = juce::jlimit(0.0f, 1.0f, cv);
        }
        lastGateLive = gateLen;
        
        float gateThresholdLive = gateThreshold;
        if (isGateLenMod && gateLenCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, gateLenCV[i]);
            gateThresholdLive = juce::jlimit(0.0f, 1.0f, cv);
        }
        lastGateThresholdLive = gateThresholdLive;
        
        // --- Transport Sync Logic ---
        const bool syncEnabled = apvts.getRawParameterValue("sync")->load() > 0.5f;

        if (syncEnabled && m_currentTransport.isPlaying)
        {
            // SYNC MODE: Use the global beat position
            const int divisionIndex = (int)apvts.getRawParameterValue("rate_division")->load();
            static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
            const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];
            
            // Calculate which step we should be on based on song position
            const int totalSteps = juce::jlimit(1, MAX_STEPS, activeSteps);
            const int stepForBeat = static_cast<int>(std::fmod(m_currentTransport.songPositionBeats * beatDivision, totalSteps));

            if (stepForBeat != currentStep.load())
            {
                currentStep.store(stepForBeat);
                stepAdvanced = true;
            }
        }
        else
        {
            // FREE-RUNNING MODE: Use the internal phase clock
            const double phaseInc = (sampleRate > 0.0 ? (double) rate / sampleRate : 0.0);
            phase += phaseInc;
            if (phase >= 1.0)
            {
                phase -= 1.0;
                const int next = (currentStep.load() + 1) % juce::jlimit (1, MAX_STEPS, activeSteps);
                currentStep.store(next);
                stepAdvanced = true;
            }
        }
        lastStepsLive = activeSteps;

        const int currentStepIndex = currentStep.load();
        const float sliderValue = pitchParams[currentStepIndex] != nullptr ? pitchParams[currentStepIndex]->load() : 0.0f;
        
        float rawModValue = 0.5f;
        const auto stepModId = "step" + juce::String(currentStepIndex + 1) + "_mod";
        if (isParamInputConnected(stepModId))
        {
            const int modChannel = 6 + currentStepIndex;
            if (inputBus.getNumChannels() > modChannel)
                rawModValue = inputBus.getReadPointer(modChannel)[i];
        }
        const float modValue = rawModValue - 0.5f;
        const float pitchValue = juce::jlimit (0.0f, 1.0f, sliderValue + modValue);
        
        float stepGateLevel = (stepGateParams[currentStepIndex] != nullptr) ? stepGateParams[currentStepIndex]->load() : 0.8f;
        const auto gateModId = "step" + juce::String(currentStepIndex + 1) + "_gate_mod";
        if (isParamInputConnected(gateModId))
        {
            const int gateModChannel = 38 + currentStepIndex;
            if (inputBus.getNumChannels() > gateModChannel)
            {
                const float cv = inputBus.getReadPointer(gateModChannel)[i];
                stepGateLevel = juce::jlimit(0.0f, 1.0f, stepGateLevel + (cv - 0.5f));
            }
        }

        const bool isGateOn = (stepGateLevel >= gateThresholdLive);
        if (isGateOn && !previousGateOn) {
            gateFadeProgress = 0.0f;
        } else if (!isGateOn && previousGateOn) {
            gateFadeProgress = 0.0f;
        }
        
        const float fadeIncrement = sampleRate > 0.0f ? (1000.0f / GATE_FADE_TIME_MS) / sampleRate : 0.0f;
        gateFadeProgress = juce::jmin(1.0f, gateFadeProgress + fadeIncrement);
        const float fadeMultiplier = isGateOn ? gateFadeProgress : (1.0f - gateFadeProgress);
        
        const float gateBinaryValue = (phase < gateLen) && isGateOn ? fadeMultiplier : 0.0f;
        const float gateNuancedValue = (phase < gateLen) && isGateOn ? (stepGateLevel * fadeMultiplier) : 0.0f;
        previousGateOn = isGateOn;
        
        bool trigActive = (stepTrigParams[currentStepIndex]) ? (bool)(*stepTrigParams[currentStepIndex]) : false;
        const auto trigModId = "step" + juce::String(currentStepIndex + 1) + "_trig_mod";
        if (isParamInputConnected(trigModId))
        {
            const int trigModChannel = 22 + currentStepIndex;
            if (inputBus.getNumChannels() > trigModChannel)
            {
                if (inputBus.getReadPointer(trigModChannel)[i] > 0.5f) trigActive = true;
            }
        }
        
        if (stepAdvanced) {
            pendingTriggerSamples = trigActive ? (int) std::round (0.001 * sampleRate) : 0;
            stepAdvanced = false;
        }

        pitchOut[i] = pitchValue;
        if (gateOut) gateOut[i] = gateBinaryValue;
        if (gateNuancedOut) gateNuancedOut[i] = gateNuancedValue;
        if (velocityOut) velocityOut[i] = 0.85f;
        if (modOut) modOut[i] = 0.0f;
        if (trigOut) {
            trigOut[i] = (pendingTriggerSamples > 0) ? 1.0f : 0.0f;
            if (pendingTriggerSamples > 0) --pendingTriggerSamples;
        }
    }
    setLiveParamValue("rate_live", lastRateLive);
    setLiveParamValue("gateLength_live", lastGateLive);
    setLiveParamValue("gateThreshold_live", lastGateThresholdLive);
    setLiveParamValue("steps_live", (float) lastStepsLive);

    // --- PART 2: NEW Logic to populate the parallel static outputs ---
    auto outBus = getBusBuffer(buffer, false, 0);
    for (int step = 0; step < lastStepsLive; ++step)
    {
        const float baseValue = pitchParams[step] ? pitchParams[step]->load() : 0.0f;
        float liveValue = baseValue;
        const int modChannel = 6 + step;
        if (isParamInputConnected("step" + juce::String(step + 1) + "_mod") && inputBus.getNumChannels() > modChannel) {
            liveValue = juce::jlimit(0.0f, 1.0f, baseValue + (inputBus.getReadPointer(modChannel)[0] - 0.5f));
        }

        const bool baseTrig = stepTrigParams[step] ? (bool)(*stepTrigParams[step]) : false;
        bool liveTrig = baseTrig;
        const int trigModChannel = 22 + step;
        if (isParamInputConnected("step" + juce::String(step + 1) + "_trig_mod") && inputBus.getNumChannels() > trigModChannel) {
            liveTrig = inputBus.getReadPointer(trigModChannel)[0] > 0.5f;
        }

        // --- THE FIX IS HERE ---
        // The trigger is only high if it's enabled AND the playhead is on this step.
        const float trigOutputValue = (liveTrig && step == currentStep.load()) ? 1.0f : 0.0f;

        float gateLevel = stepGateParams[step] ? stepGateParams[step]->load() : 0.8f;
        const int gateModChannel = 38 + step;
        if (isParamInputConnected("step" + juce::String(step + 1) + "_gate_mod") && inputBus.getNumChannels() > gateModChannel) {
             const float cv = inputBus.getReadPointer(gateModChannel)[0];
             gateLevel = juce::jlimit(0.0f, 1.0f, gateLevel + (cv - 0.5f));
        }

        int pitchOutChannel = 7 + step * 3 + 0;
        int gateOutChannel  = 7 + step * 3 + 1;
        int trigOutChannel  = 7 + step * 3 + 2;

        // Fill the buffers with the correct values
        if (pitchOutChannel < outBus.getNumChannels())
            juce::FloatVectorOperations::fill(outBus.getWritePointer(pitchOutChannel), liveValue, numSamples);
            
        if (gateOutChannel < outBus.getNumChannels())
            juce::FloatVectorOperations::fill(outBus.getWritePointer(gateOutChannel), gateLevel, numSamples);

        if (trigOutChannel < outBus.getNumChannels())
            juce::FloatVectorOperations::fill(outBus.getWritePointer(trigOutChannel), trigOutputValue, numSamples);
    }
    
    // --- Write the number of active steps to the Num Steps output pin (channel 6) ---
    if (outBus.getNumChannels() > 6)
    {
        juce::FloatVectorOperations::fill(outBus.getWritePointer(6), (float)lastStepsLive, numSamples);
    }
    
    if (lastOutputValues.size() >= (size_t)outBus.getNumChannels()) {
        for (int ch = 0; ch < outBus.getNumChannels(); ++ch)
            if (lastOutputValues[ch]) lastOutputValues[ch]->store(outBus.getSample(ch, numSamples - 1));
    }
}


#if defined(PRESET_CREATOR_UI)
// ... The rest of your file (drawParametersInNode, etc.) remains unchanged ...
void MultiSequencerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    // This is the full, working UI code from the original StepSequencer, with buttons added.
    auto& ap = getAPVTS();
    int activeSteps = numStepsParam ? (int)numStepsParam->load() : 8;
    const int boundMaxUi = stepsModMaxParam ? juce::jlimit(1, MAX_STEPS, (int)stepsModMaxParam->load()) : MAX_STEPS;
    const bool stepsAreModulated = isParamInputConnected("numSteps_mod");
    if (stepsAreModulated) {
        activeSteps = juce::jlimit(1, boundMaxUi, (int)std::round(getLiveParamValueFor("numSteps_mod", "steps_live", (float)activeSteps)));
    }
    int displayedSteps = activeSteps;
    if (stepsAreModulated) ImGui::BeginDisabled();
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderInt("Steps", &displayedSteps, 1, boundMaxUi)) {
        if (!stepsAreModulated) if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter("numSteps"))) *p = displayedSteps;
    }
    if (!stepsAreModulated) adjustParamOnWheel(ap.getParameter("numSteps"), "numSteps", (float)displayedSteps);
    if (ImGui::IsItemDeactivatedAfterEdit() && !stepsAreModulated) onModificationEnded();
    ImGui::PopItemWidth();
    if (stepsAreModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    const int shown = juce::jlimit(1, MAX_STEPS, displayedSteps);
    const float sliderW = itemWidth / (float)juce::jmax(8, shown) * 0.8f;
    
    ImGui::PushItemWidth(sliderW);
    for (int i = 0; i < shown; ++i) {
        if (i > 0) ImGui::SameLine();
        float baseValue = (pitchParams[i]) ? pitchParams[i]->load() : 0.5f;
        const auto modPid = "step" + juce::String(i + 1) + "_mod";
        const bool modConnected = isParamInputConnected(modPid);
        float liveValue = getLiveParamValueFor(modPid, "step_live_" + juce::String(i + 1), baseValue);
        float sliderValue = modConnected ? liveValue : baseValue;
        const bool isActive = (i == currentStep.load());
        if (isActive) {
            ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.3f, 0.7f, 1.0f, 1.0f));
            ImGui::PushStyleColor(ImGuiCol_SliderGrab, ImVec4(0.9f, 0.9f, 0.9f, 1.0f));
        }
        ImGui::PushID(i);
        if (modConnected) ImGui::BeginDisabled();
        if (ImGui::VSliderFloat("##s", ImVec2(sliderW, 60.0f), &sliderValue, 0.0f, 1.0f, "")) {
            if (!modConnected) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("step" + juce::String(i + 1)))) *p = sliderValue;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        if (!modConnected) {
            if (ImGui::IsItemHovered()) {
                float wheel = ImGui::GetIO().MouseWheel;
                if (wheel != 0.0f) {
                    if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("step" + juce::String(i + 1)))) *p = juce::jlimit(0.0f, 1.0f, baseValue + (wheel > 0 ? 0.05f : -0.05f));
                }
            }
        }
        if (modConnected) ImGui::EndDisabled();
        if (isActive) ImGui::PopStyleColor(2);
        ImGui::PopID();
    }
	ImGui::PopItemWidth();

	ImGui::PushItemWidth(sliderW);
    ImVec2 gate_sliders_p0 = ImGui::GetCursorScreenPos();
    for (int i = 0; i < shown; ++i) {
		if (i > 0) ImGui::SameLine();
        ImGui::PushID(2000 + i);
        float baseGateValue = (stepGateParams[i]) ? stepGateParams[i]->load() : 0.8f;
        const auto modPid = "step" + juce::String(i + 1) + "_gate_mod";
        const bool modConnected = isParamInputConnected(modPid);
        float sliderValue = modConnected ? getLiveParamValueFor(modPid, "gate_live_" + juce::String(i + 1), baseGateValue) : baseGateValue;
        const bool isActive = (i == currentStep.load());
        if (isActive) ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 0.7f, 0.3f, 1.0f));
        if (modConnected) ImGui::BeginDisabled();
        if (ImGui::VSliderFloat("##g", ImVec2(sliderW, 60.0f), &sliderValue, 0.0f, 1.0f, "")) {
            if (!modConnected && stepGateParams[i]) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("step" + juce::String(i + 1) + "_gate"))) *p = sliderValue;
		}
		if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        if (!modConnected) {
            if (ImGui::IsItemHovered()) {
                float wheel = ImGui::GetIO().MouseWheel;
                if (wheel != 0.0f) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("step" + juce::String(i + 1) + "_gate"))) *p = juce::jlimit(0.0f, 1.0f, sliderValue + (wheel > 0 ? 0.05f : -0.05f));
            }
        }
        if (modConnected) ImGui::EndDisabled();
		if (isActive) ImGui::PopStyleColor();
		ImGui::PopID();
	}
	ImGui::PopItemWidth();
    
    const bool gtIsModulatedForLine = isParamInputConnected("gateLength_mod");
    const float threshold_value = gtIsModulatedForLine ? getLiveParamValueFor("gateLength_mod", "gateThreshold_live", (gateThresholdParam ? gateThresholdParam->load() : 0.5f)) : (gateThresholdParam ? gateThresholdParam->load() : 0.5f);
    const float slider_height = 60.0f;
    const float row_width = (sliderW * shown) + (ImGui::GetStyle().ItemSpacing.x * (shown - 1));
    const float line_y = gate_sliders_p0.y + (1.0f - threshold_value) * slider_height;
    ImGui::GetWindowDrawList()->AddLine(ImVec2(gate_sliders_p0.x, line_y), ImVec2(gate_sliders_p0.x + row_width, line_y), IM_COL32(255, 255, 0, 200), 2.0f);
    
    ImGui::Text("Current Step: %d", currentStep.load() + 1);
    
    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue("sync")->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(ap.getParameter("sync"))) *p = sync;
        onModificationEnded();
    }

    ImGui::PushItemWidth(itemWidth);
    if (sync)
    {
        int division = (int)apvts.getRawParameterValue("rate_division")->load();
        if (ImGui::Combo("Division", &division, "1/32\0""1/16\0""1/8\0""1/4\0""1/2\0""1\0""2\0""4\0""8\0\0"))
        {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("rate_division"))) *p = division;
            onModificationEnded();
        }
    }
    else
    {
        // Rate slider (only shown in free-running mode)
        const bool isRateModulated = isParamInputConnected("rate_mod");
        float rateDisplay = isRateModulated ? getLiveParamValueFor("rate_mod", "rate_live", rateParam->load()) : rateParam->load();
        
        if (isRateModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Rate (Hz)", &rateDisplay, 0.1f, 20.0f, "%.2f")) {
            if (!isRateModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("rate"))) *p = rateDisplay;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        if (!isRateModulated) adjustParamOnWheel(ap.getParameter("rate"), "rate", rateDisplay);
        if (isRateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }
    ImGui::PopItemWidth();
    // --- END SYNC CONTROLS ---

    ImGui::PushItemWidth(itemWidth);

    const bool gtIsModulated = isParamInputConnected("gateLength_mod");
    float gtEff = gtIsModulated ? getLiveParamValueFor("gateLength_mod", "gateThreshold_live", (gateThresholdParam ? gateThresholdParam->load() : 0.5f)) : (gateThresholdParam ? gateThresholdParam->load() : 0.5f);
    if (gtIsModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Gate Threshold", &gtEff, 0.0f, 1.0f)) {
        if (!gtIsModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gateThreshold"))) *p = gtEff;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (!gtIsModulated) adjustParamOnWheel(ap.getParameter("gateThreshold"), "gateThreshold", gtEff);
    if (gtIsModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::PopItemWidth();

    {
        for (int i = 0; i < shown; ++i) {
            if (i > 0) ImGui::SameLine();
            bool baseTrig = (stepTrigParams.size() > (size_t)i && stepTrigParams[i]) ? (bool)(*stepTrigParams[i]) : false;
            const auto trigModId = "step" + juce::String(i + 1) + "_trig_mod";
            const bool trigIsModulated = isParamInputConnected(trigModId);
            bool displayTrig = trigIsModulated ? getLiveParamValueFor(trigModId, "trig_live_" + juce::String(i + 1), baseTrig ? 1.0f : 0.0f) > 0.5f : baseTrig;
            if (trigIsModulated) ImGui::BeginDisabled();
            ImGui::PushID(1000 + i);
            ImGui::SetNextItemWidth(sliderW);
            ImGui::PushItemWidth(sliderW);
            if (ImGui::Checkbox("##trig", &displayTrig) && !trigIsModulated && stepTrigParams[i]) *stepTrigParams[i] = displayTrig;
            ImGui::PopItemWidth();
            float used = ImGui::GetItemRectSize().x;
            if (used < sliderW) { ImGui::SameLine(0.0f, 0.0f); ImGui::Dummy(ImVec2(sliderW - used, 0.0f)); }
            if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
            ImGui::PopID();
            if (trigIsModulated) ImGui::EndDisabled();
        }
    }
    
    // ADDED: Auto-connect buttons
    if (ImGui::Button("Connect to Samplers", ImVec2(itemWidth, 0))) { autoConnectSamplersTriggered = true; }
    if (ImGui::Button("Connect to PolyVCO", ImVec2(itemWidth, 0))) { autoConnectVCOTriggered = true; }
}

void MultiSequencerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    const int boundMaxPins = stepsModMaxParam ? juce::jlimit(1, MAX_STEPS, (int)stepsModMaxParam->load()) : MAX_STEPS;
    int activeSteps = numStepsParam ? (int)numStepsParam->load() : 8;
    if (isParamInputConnected("numSteps_mod")) {
        activeSteps = juce::jlimit(1, boundMaxPins, (int)std::round(getLiveParamValueFor("numSteps_mod", "steps_live", (float)activeSteps)));
    } else {
        activeSteps = juce::jlimit(1, boundMaxPins, activeSteps);
    }
    
    // --- Section 1: Global Inputs & Live Outputs (In Parallel) ---
    helpers.drawParallelPins("Mod In L", 0, "Pitch", 0);
    helpers.drawParallelPins("Mod In R", 1, "Gate", 1);
    helpers.drawParallelPins("Rate Mod", 2, "Gate Nuanced", 2);
    helpers.drawParallelPins("Gate Mod", 3, "Velocity", 3);
    helpers.drawParallelPins("Steps Mod", 4, "Mod", 4);
    
    // This output has no corresponding global input; use nullptr for input
    helpers.drawParallelPins(nullptr, -1, "Trigger", 5);
    
    // Num Steps output (Raw pin type, no corresponding input)
    helpers.drawAudioOutputPin("Num Steps", 6);

    // --- Section 2: Per-Step Inputs & Outputs (In Parallel) ---
    for (int i = 0; i < activeSteps; ++i)
    {
        const juce::String stepStr = " " + juce::String(i + 1);

        // Pitch I/O for this step
        helpers.drawParallelPins(("Step" + stepStr + " Mod").toRawUTF8(), 6 + i, 
                                ("Pitch" + stepStr).toRawUTF8(), 7 + i * 3 + 0);
        
        // Gate I/O for this step
        helpers.drawParallelPins(("Step" + stepStr + " Gate Mod").toRawUTF8(), 38 + i, 
                                ("Gate" + stepStr).toRawUTF8(), 7 + i * 3 + 1);

        // Trigger I/O for this step
        helpers.drawParallelPins(("Step" + stepStr + " Trig Mod").toRawUTF8(), 22 + i, 
                                ("Trig" + stepStr).toRawUTF8(), 7 + i * 3 + 2);
	}
}
#endif

juce::String MultiSequencerModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel) {
        case 0: return "Pitch";
        case 1: return "Gate";
        case 2: return "Gate Nuanced";
        case 3: return "Velocity";
        case 4: return "Mod";
        case 5: return "Trigger";
        case 6: return "Num Steps";
    }
    int stepChannel = channel - 7;
    if (stepChannel >= 0 && stepChannel < MAX_STEPS * 3) {
        int step = (stepChannel / 3) + 1;
        int outputType = stepChannel % 3;
        switch (outputType) {
            case 0: return "Pitch " + juce::String(step);
            case 1: return "Gate " + juce::String(step);
            case 2: return "Trig " + juce::String(step);
        }
    }
	return {};
}

juce::String MultiSequencerModuleProcessor::getAudioInputLabel(int channel) const {
    switch (channel) {
        case 0: return "Mod In L";
        case 1: return "Mod In R";
        case 2: return "Rate Mod";
        case 3: return "Gate Mod";
        case 4: return "Steps Mod";
    }
    if (channel >= 6 && channel < 6 + MAX_STEPS) return "Step " + juce::String(channel - 5) + " Mod";
    if (channel >= 22 && channel < 22 + MAX_STEPS) return "Step " + juce::String(channel - 21) + " Trig Mod";
    if (channel >= 38 && channel < 38 + MAX_STEPS) return "Step " + juce::String(channel - 37) + " Gate Mod";
	return {};
}

bool MultiSequencerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const {
	outBusIndex = 0;
    if (paramId == "rate_mod") { outChannelIndexInBus = 2; return true; }
    if (paramId == "gateLength_mod") { outChannelIndexInBus = 3; return true; }
    if (paramId == "numSteps_mod") { outChannelIndexInBus = 4; return true; }
    if (paramId.startsWith("step") && paramId.endsWith("_mod") && !paramId.endsWith("_trig_mod") && !paramId.endsWith("_gate_mod")) {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false).upToFirstOccurrenceOf("_mod", false, false).getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS) { outChannelIndexInBus = 6 + (stepNum - 1); return true; }
    }
    if (paramId.startsWith("step") && paramId.endsWith("_trig_mod")) {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false).upToFirstOccurrenceOf("_trig_mod", false, false).getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS) { outChannelIndexInBus = 22 + (stepNum - 1); return true; }
    }
    if (paramId.startsWith("step") && paramId.endsWith("_gate_mod")) {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false).upToFirstOccurrenceOf("_gate_mod", false, false).getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS) { outChannelIndexInBus = 38 + (stepNum - 1); return true; }
	}
	return false;
}


================================================================================
FILE: juce\Source\audio\modules\MultiSequencerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class MultiSequencerModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_STEPS = 16;
    MultiSequencerModuleProcessor();
    ~MultiSequencerModuleProcessor() override = default;

    const juce::String getName() const override { return "multi sequencer"; }

    void prepareToPlay (double newSampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // State management for transport settings
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree&) override;

    juce::String getAudioOutputLabel(int channel) const override;
    juce::String getAudioInputLabel(int channel) const override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    std::atomic<bool> autoConnectSamplersTriggered { false };
    std::atomic<bool> autoConnectVCOTriggered { false };

    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

protected:
    void setTimingInfo(const TransportState& state) override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<int> currentStep { 0 };
    double phase { 0.0 };
    double sampleRate { 44100.0 };

    TransportState m_currentTransport;
    bool wasPlaying = false;

    std::atomic<float>* rateParam { nullptr };
    std::atomic<float>* gateLengthParam { nullptr };
    std::atomic<float>* gateThresholdParam { nullptr };
    std::atomic<float>* rateModParam { nullptr };
    std::atomic<float>* gateLengthModParam { nullptr };
    std::atomic<float>* numStepsModParam { nullptr };
    std::atomic<float>* stepsModMaxParam { nullptr };
    std::vector<std::atomic<float>*> pitchParams;
    std::vector<std::atomic<float>*> stepModParams;
    std::vector<juce::AudioParameterBool*> stepTrigParams;
    std::vector<std::atomic<float>*> stepTrigModParams;
    std::vector<std::atomic<float>*> stepGateParams;
    std::atomic<float>* numStepsParam { nullptr };
    int pendingTriggerSamples { 0 };
    bool previousGateOn { false };
    float gateFadeProgress { 0.0f };
    static constexpr float GATE_FADE_TIME_MS = 5.0f;
};

================================================================================
FILE: juce\Source\audio\modules\NoiseModuleProcessor.cpp
================================================================================


#include "NoiseModuleProcessor.h"

// --- Parameter Layout Definition ---
juce::AudioProcessorValueTreeState::ParameterLayout NoiseModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdColour, "Colour", juce::StringArray{ "White", "Pink", "Brown" }, 0));
        
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdLevel, "Level dB", juce::NormalisableRange<float>(-60.0f, 6.0f, 0.1f), -12.0f));

    return { params.begin(), params.end() };
}

// --- Constructor ---
NoiseModuleProcessor::NoiseModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withInput("Modulation", juce::AudioChannelSet::discreteChannels(2), true) // ch0: Level, ch1: Colour
        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "NoiseParams", createParameterLayout())
{
    levelDbParam = apvts.getRawParameterValue(paramIdLevel);
    colourParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter(paramIdColour));

    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

// --- Audio Processing Setup ---
void NoiseModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec{ sampleRate, (juce::uint32)samplesPerBlock, 2 };

    // Pink noise is ~-3dB/octave. A simple 1-pole low-pass can approximate this.
    pinkFilter.coefficients = juce::dsp::IIR::Coefficients<float>::makeFirstOrderLowPass(sampleRate, 1000.0);
    
    // Brown noise is ~-6dB/octave. A stronger low-pass.
    brownFilter.coefficients = juce::dsp::IIR::Coefficients<float>::makeFirstOrderLowPass(sampleRate, 250.0);
    
    pinkFilter.prepare(spec);
    brownFilter.prepare(spec);
    pinkFilter.reset();
    brownFilter.reset();
}

// --- Main Audio Processing Block ---
void NoiseModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto modInBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();

    // --- Get Modulation CVs ---
    // CORRECTED: Use the _mod parameter IDs to check for connections
    const bool isLevelModulated = isParamInputConnected(paramIdLevelMod);
    const bool isColourModulated = isParamInputConnected(paramIdColourMod);

    const float* levelCV = isLevelModulated && modInBus.getNumChannels() > 0 ? modInBus.getReadPointer(0) : nullptr;
    const float* colourCV = isColourModulated && modInBus.getNumChannels() > 1 ? modInBus.getReadPointer(1) : nullptr;

    // --- Get Base Parameter Values ---
    const float baseLevelDb = levelDbParam->load();
    const int baseColour = colourParam->getIndex();

    // --- Per-Sample Processing for Responsive Modulation ---
    for (int i = 0; i < numSamples; ++i)
    {
        // 1. Calculate effective parameter values for this sample
        float effectiveLevelDb = baseLevelDb;
        if (isLevelModulated && levelCV != nullptr) {
            // CV maps 0..1 to the full dB range
            effectiveLevelDb = juce::jmap(levelCV[i], 0.0f, 1.0f, -60.0f, 6.0f);
        }

        int effectiveColour = baseColour;
        if (isColourModulated && colourCV != nullptr) {
            // CV maps 0..1 to the 3 choices
            effectiveColour = static_cast<int>(juce::jlimit(0.0f, 1.0f, colourCV[i]) * 2.99f);
        }

        // 2. Generate raw white noise
        float sample = random.nextFloat() * 2.0f - 1.0f;

        // 3. Filter noise based on effective colour
        switch (effectiveColour)
        {
            case 0: /* White noise, no filter */ break;
            case 1: sample = pinkFilter.processSample(sample); break;
            case 2: sample = brownFilter.processSample(sample); break;
        }

        // 4. Apply gain
        sample *= juce::Decibels::decibelsToGain(effectiveLevelDb);

        // 5. Write to mono output
        outBus.setSample(0, i, sample);

        // 6. Update telemetry for UI (throttled)
        if ((i & 0x3F) == 0) // Every 64 samples
        {
            setLiveParamValue("level_live", effectiveLevelDb);
            setLiveParamValue("colour_live", (float)effectiveColour);
        }
    }

    // --- Update Inspector Values (peak magnitude) ---
    updateOutputTelemetry(buffer);
}

bool NoiseModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation inputs are on the first bus
    
    // CORRECTED: Map the virtual _mod IDs to physical channels
    if (paramId == paramIdLevelMod)  { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdColourMod) { outChannelIndexInBus = 1; return true; }
    
    return false;
}

#if defined(PRESET_CREATOR_UI)
// --- UI Drawing Logic ---

void NoiseModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    // --- Get values for display, checking for modulation ---
    // CORRECTED: Use the _mod parameter IDs to check for modulation
    bool levelIsModulated = isParamModulated(paramIdLevelMod);
    float levelDb = levelIsModulated ? getLiveParamValueFor(paramIdLevelMod, "level_live", levelDbParam->load()) : levelDbParam->load();

    bool colourIsModulated = isParamModulated(paramIdColourMod);
    int colourIndex = colourIsModulated ? (int)getLiveParamValueFor(paramIdColourMod, "colour_live", (float)colourParam->getIndex()) : colourParam->getIndex();

    ImGui::PushItemWidth(itemWidth);

    // --- Colour Dropdown ---
    if (colourIsModulated) ImGui::BeginDisabled();
    if (ImGui::Combo("Colour", &colourIndex, "White\0Pink\0Brown\0\0"))
    {
        if (!colourIsModulated) *colourParam = colourIndex;
    }
    if (ImGui::IsItemDeactivatedAfterEdit() && !colourIsModulated) { onModificationEnded(); }
    if (colourIsModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // --- Level Slider ---
    if (levelIsModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Level dB", &levelDb, -60.0f, 6.0f, "%.3f"))
    {
        if (!levelIsModulated) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdLevel)) = levelDb;
    }
    if (ImGui::IsItemDeactivatedAfterEdit() && !levelIsModulated) { onModificationEnded(); }
    if (!levelIsModulated) adjustParamOnWheel(ap.getParameter(paramIdLevel), "level", levelDb);
    if (levelIsModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void NoiseModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Level Mod", 0);
    helpers.drawAudioInputPin("Colour Mod", 1);
    helpers.drawAudioOutputPin("Out", 0);
}

// --- Pin Label and Routing Definitions ---

juce::String NoiseModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Level Mod";
        case 1: return "Colour Mod";
        default: return {};
    }
}

juce::String NoiseModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out";
        default: return {};
    }
}
#endif

================================================================================
FILE: juce\Source\audio\modules\NoiseModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

/**
 * @class NoiseModuleProcessor
 * @brief Generates white, pink, or brown noise with controllable level.
 *
 * This module acts as a sound source, providing different colors of noise. Both the
 * noise color and the output level can be modulated via CV inputs.
 */
class NoiseModuleProcessor : public ModuleProcessor
{
public:
    // Parameter ID constants for APVTS and modulation routing
    static constexpr auto paramIdLevel = "level";
    static constexpr auto paramIdColour = "colour";
    // ADDED: Virtual parameter IDs for modulation inputs
    static constexpr auto paramIdLevelMod = "level_mod";
    static constexpr auto paramIdColourMod = "colour_mod";

    NoiseModuleProcessor();
    ~NoiseModuleProcessor() override = default;

    const juce::String getName() const override { return "noise"; }

    // --- Audio Processing ---
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    // --- Required by ModuleProcessor ---
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // --- Parameter Modulation Routing ---
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    // --- UI Drawing and Pin Definitions ---
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;

    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;

    // --- Parameters ---
    std::atomic<float>* levelDbParam{ nullptr };
    juce::AudioParameterChoice* colourParam{ nullptr };

    // --- DSP State ---
    juce::Random random;
    juce::dsp::IIR::Filter<float> pinkFilter;  // Simple filter to approximate pink noise
    juce::dsp::IIR::Filter<float> brownFilter; // Simple filter to approximate brown noise

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(NoiseModuleProcessor)
};

================================================================================
FILE: juce\Source\audio\modules\OutletModuleProcessor.cpp
================================================================================


#include "OutletModuleProcessor.h"

OutletModuleProcessor::OutletModuleProcessor()
    : ModuleProcessor(BusesProperties()
                      .withInput("Input", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "OutletParams", createParameterLayout()),
      customLabel("Outlet")
{
}

juce::AudioProcessorValueTreeState::ParameterLayout OutletModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;
    
    layout.add(std::make_unique<juce::AudioParameterInt>(
        paramIdChannelCount,
        "Channel Count",
        1, 16, 2
    ));
    
    return layout;
}

void OutletModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate);
    cachedBuffer.setSize(2, samplesPerBlock);
}

void OutletModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // Cache the incoming buffer so the parent MetaModule can read it
    cachedBuffer.makeCopyOf(buffer);
}

juce::ValueTree OutletModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("OutletState");
    vt.setProperty("customLabel", customLabel, nullptr);
    return vt;
}

void OutletModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("OutletState"))
    {
        customLabel = vt.getProperty("customLabel", "Outlet").toString();
    }
}

#if defined(PRESET_CREATOR_UI)
void OutletModuleProcessor::drawParametersInNode(float itemWidth,
                                                 const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                 const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated, onModificationEnded);
    
    auto& ap = getAPVTS();
    
    ImGui::PushItemWidth(itemWidth);
    
    // Label editor
    char labelBuf[64];
    strncpy(labelBuf, customLabel.toRawUTF8(), sizeof(labelBuf) - 1);
    labelBuf[sizeof(labelBuf) - 1] = '\0';
    
    if (ImGui::InputText("Label", labelBuf, sizeof(labelBuf)))
    {
        customLabel = juce::String(labelBuf);
    }
    
    // Channel count
    int channelCount = 2;
    if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
        channelCount = p->get();
    
    if (ImGui::SliderInt("Channels", &channelCount, 1, 16))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
            *p = channelCount;
    }
    
    ImGui::PopItemWidth();
}
#endif



================================================================================
FILE: juce\Source\audio\modules\OutletModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

/**
    OutletModuleProcessor - Acts as a signal outlet for Meta Modules
    
    This module has inputs but no outputs (inside the meta module).
    It collects signals from inside the meta module that should be
    sent to the outside.
    
    From the outside perspective, the MetaModule will have output pins that
    correspond to these Outlet modules inside.
*/
class OutletModuleProcessor : public ModuleProcessor
{
public:
    static constexpr auto paramIdLabel = "label";
    static constexpr auto paramIdChannelCount = "channelCount";
    
    OutletModuleProcessor();
    ~OutletModuleProcessor() override = default;

    const juce::String getName() const override { return "Outlet"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Get the processed buffer to send to the parent MetaModule's output
    const juce::AudioBuffer<float>& getOutputBuffer() const { return cachedBuffer; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth,
                              const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Outlets have inputs but no outputs
        auto& ap = getAPVTS();
        int channelCount = 2;
        if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter(paramIdChannelCount)))
            channelCount = p->get();
            
        for (int i = 0; i < channelCount; ++i)
            helpers.drawAudioInputPin(juce::String("In " + juce::String(i + 1)).toRawUTF8(), i);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        return juce::String("In ") + juce::String(channel + 1);
    }
#endif

    // Extra state for label
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::AudioBuffer<float> cachedBuffer;
    juce::String customLabel;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(OutletModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\PhaserModuleProcessor.cpp
================================================================================


#include "PhaserModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout PhaserModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRate, "Rate", 0.01f, 10.0f, 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdDepth, "Depth", 0.0f, 1.0f, 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdCentreHz, "Centre Freq",
        juce::NormalisableRange<float>(20.0f, 10000.0f, 1.0f, 0.25f), 1000.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdFeedback, "Feedback", -0.95f, 0.95f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMix, "Mix", 0.0f, 1.0f, 0.5f));
    
    return { params.begin(), params.end() };
}

PhaserModuleProcessor::PhaserModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(7), true) // 0-1: Audio In, 2: Rate Mod, 3: Depth Mod, 4: Centre Mod, 5: Feedback Mod, 6: Mix Mod
          .withOutput("Audio Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "PhaserParams", createParameterLayout())
{
    rateParam = apvts.getRawParameterValue(paramIdRate);
    depthParam = apvts.getRawParameterValue(paramIdDepth);
    centreHzParam = apvts.getRawParameterValue(paramIdCentreHz);
    feedbackParam = apvts.getRawParameterValue(paramIdFeedback);
    mixParam = apvts.getRawParameterValue(paramIdMix);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
}

void PhaserModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec;
    spec.sampleRate = sampleRate;
    spec.maximumBlockSize = samplesPerBlock;
    spec.numChannels = 2; // Process in stereo

    phaser.prepare(spec);
    phaser.reset();
    
    tempBuffer.setSize(2, samplesPerBlock);
}

void PhaserModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    // Copy dry input to the output buffer to start
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = buffer.getNumSamples();

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }
    
    const int numChannels = juce::jmin(numInputChannels, numOutputChannels);

    // --- Get Modulation CVs from unified input bus ---
    auto readCv = [&](const juce::String& paramId, int channelIndex) -> float {
        if (isParamInputConnected(paramId) && inBus.getNumChannels() > channelIndex) {
            return inBus.getReadPointer(channelIndex)[0]; // Read first sample
        }
        return -1.0f; // Use a sentinel to indicate no CV
    };

    float rateCv = readCv(paramIdRateMod, 2);
    float depthCv = readCv(paramIdDepthMod, 3);
    float centreCv = readCv(paramIdCentreHzMod, 4);
    float feedbackCv = readCv(paramIdFeedbackMod, 5);
    float mixCv = readCv(paramIdMixMod, 6);

    // --- Update DSP Parameters (once per block) ---
    float finalRate = (rateCv >= 0.0f) ? juce::jmap(rateCv, 0.0f, 1.0f, 0.01f, 10.0f) : rateParam->load();
    float finalDepth = (depthCv >= 0.0f) ? depthCv : depthParam->load();
    float finalCentre = (centreCv >= 0.0f) ? juce::jmap(centreCv, 0.0f, 1.0f, 20.0f, 10000.0f) : centreHzParam->load();
    float finalFeedback = (feedbackCv >= 0.0f) ? juce::jmap(feedbackCv, 0.0f, 1.0f, -0.95f, 0.95f) : feedbackParam->load();
    float finalMix = (mixCv >= 0.0f) ? mixCv : mixParam->load();

    phaser.setRate(finalRate);
    phaser.setDepth(finalDepth);
    phaser.setCentreFrequency(finalCentre);
    phaser.setFeedback(finalFeedback);
    
    // --- Process the Audio with Dry/Wet Mix ---
    // The JUCE Phaser's built-in mix is not ideal for this use case.
    // We'll implement a manual dry/wet mix for better results, like in VoiceProcessor.cpp
    tempBuffer.makeCopyOf(outBus); // Copy the dry signal

    juce::dsp::AudioBlock<float> block(tempBuffer);
    juce::dsp::ProcessContextReplacing<float> context(block);
    phaser.process(context); // Process to get the fully wet signal

    // Manually blend the original dry signal (in outBus) with the wet signal (in tempBuffer)
    for (int ch = 0; ch < numChannels; ++ch)
    {
        outBus.applyGain(ch, 0, buffer.getNumSamples(), 1.0f - finalMix);
        outBus.addFrom(ch, 0, tempBuffer, ch, 0, buffer.getNumSamples(), finalMix);
    }
    
    // --- Update UI Telemetry ---
    setLiveParamValue("rate_live", finalRate);
    setLiveParamValue("depth_live", finalDepth);
    setLiveParamValue("centreHz_live", finalCentre);
    setLiveParamValue("feedback_live", finalFeedback);
    setLiveParamValue("mix_live", finalMix);

    // --- Update Tooltips ---
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, buffer.getNumSamples() - 1));
    }
}

bool PhaserModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == paramIdRateMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdDepthMod) { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdCentreHzMod) { outChannelIndexInBus = 4; return true; }
    if (paramId == paramIdFeedbackMod) { outChannelIndexInBus = 5; return true; }
    if (paramId == paramIdMixMod) { outChannelIndexInBus = 6; return true; }
    return false;
}

juce::String PhaserModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    if (channel == 2) return "Rate Mod";
    if (channel == 3) return "Depth Mod";
    if (channel == 4) return "Centre Mod";
    if (channel == 5) return "Feedback Mod";
    if (channel == 6) return "Mix Mod";
    return {};
}

juce::String PhaserModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Out L";
    if (channel == 1) return "Out R";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void PhaserModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    ImGui::PushItemWidth(itemWidth);

    auto drawSlider = [&](const char* label, const juce::String& paramId, const juce::String& modId, float min, float max, const char* format, ImGuiSliderFlags flags = 0)
    {
        bool isMod = isParamModulated(modId);
        float value = isMod ? getLiveParamValueFor(modId, paramId + "_live", ap.getRawParameterValue(paramId)->load())
                            : ap.getRawParameterValue(paramId)->load();
        
        if (isMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(label, &value, min, max, format, flags))
            if (!isMod) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramId)) = value;
        if (!isMod) adjustParamOnWheel(ap.getParameter(paramId), paramId, value);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    };

    drawSlider("Rate", paramIdRate, paramIdRateMod, 0.01f, 10.0f, "%.2f Hz", 0);
    drawSlider("Depth", paramIdDepth, paramIdDepthMod, 0.0f, 1.0f, "%.2f", 0);
    drawSlider("Centre", paramIdCentreHz, paramIdCentreHzMod, 20.0f, 10000.0f, "%.0f Hz", ImGuiSliderFlags_Logarithmic);
    drawSlider("Feedback", paramIdFeedback, paramIdFeedbackMod, -0.95f, 0.95f, "%.2f", 0);
    drawSlider("Mix", paramIdMix, paramIdMixMod, 0.0f, 1.0f, "%.2f", 0);

    ImGui::PopItemWidth();
}

void PhaserModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Rate Mod", 2);
    helpers.drawAudioInputPin("Depth Mod", 3);
    helpers.drawAudioInputPin("Centre Mod", 4);
    helpers.drawAudioInputPin("Feedback Mod", 5);
    helpers.drawAudioInputPin("Mix Mod", 6);
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif



================================================================================
FILE: juce\Source\audio\modules\PhaserModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class PhaserModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdDepth = "depth";
    static constexpr auto paramIdCentreHz = "centreHz";
    static constexpr auto paramIdFeedback = "feedback";
    static constexpr auto paramIdMix = "mix";

    // Virtual IDs for modulation inputs
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdDepthMod = "depth_mod";
    static constexpr auto paramIdCentreHzMod = "centreHz_mod";
    static constexpr auto paramIdFeedbackMod = "feedback_mod";
    static constexpr auto paramIdMixMod = "mix_mod";

    PhaserModuleProcessor();
    ~PhaserModuleProcessor() override = default;

    const juce::String getName() const override { return "phaser"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // The core JUCE DSP phaser object
    juce::dsp::Phaser<float> phaser;

    // A temporary buffer for implementing the dry/wet mix, inspired by VoiceProcessor.cpp
    juce::AudioBuffer<float> tempBuffer;

    // Cached atomic pointers to parameters for real-time access
    std::atomic<float>* rateParam { nullptr };
    std::atomic<float>* depthParam { nullptr };
    std::atomic<float>* centreHzParam { nullptr };
    std::atomic<float>* feedbackParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
};



================================================================================
FILE: juce\Source\audio\modules\PolyVCOModuleProcessor.cpp
================================================================================


#include "PolyVCOModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout PolyVCOModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;

    // The single parameter for controlling the voice count.
    p.push_back(std::make_unique<juce::AudioParameterInt>("numVoices", "Num Voices", 1, MAX_VOICES, 8));

    // Create all 32 potential per-voice parameters up-front.
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        const auto idx = juce::String(i + 1);
        p.push_back(std::make_unique<juce::AudioParameterFloat>("freq_" + idx, "Frequency " + idx,
            juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));
        p.push_back(std::make_unique<juce::AudioParameterChoice>("wave_" + idx, "Waveform " + idx,
            juce::StringArray{ "Sine", "Saw", "Square" }, 0));
        p.push_back(std::make_unique<juce::AudioParameterFloat>("gate_" + idx, "Gate " + idx, 0.0f, 1.0f, 1.0f));
    }
    return { p.begin(), p.end() };
}


PolyVCOModuleProcessor::PolyVCOModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Mod In", juce::AudioChannelSet::discreteChannels(1 + (MAX_VOICES * 3)), true) // 1 for NumVoices + 3 for each voice (Freq, Wave, Gate)
          .withOutput("Out", juce::AudioChannelSet::discreteChannels(MAX_VOICES), true)),
      apvts(*this, nullptr, "PolyVCOParams", createParameterLayout())
{
    numVoicesParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numVoices"));
    
    // RACE CONDITION FIX: Pre-initialize all oscillators for each waveform type
    // This avoids dangerous memory allocations on the audio thread
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        sineOscillators[i].initialise([](float x) { return std::sin(x); }, 128);
        sawOscillators[i].initialise([](float x) { return x / juce::MathConstants<float>::pi; }, 128);
        squareOscillators[i].initialise([](float x) { return x < 0.0f ? -1.0f : 1.0f; }, 128);
        currentWaveforms[i] = -1; // Initialize to invalid state
    }

    voiceFreqParams.resize(MAX_VOICES);
    voiceWaveParams.resize(MAX_VOICES);
    voiceGateParams.resize(MAX_VOICES);
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        const auto idx = juce::String(i + 1);
        voiceFreqParams[i] = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("freq_" + idx));
        voiceWaveParams[i] = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("wave_" + idx));
        voiceGateParams[i] = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("gate_" + idx));
    }
    
    // ADD THIS LINE: Initialize all waveforms to -1 (an invalid state) to force setup on first block
    currentWaveforms.fill(-1);
    
    // Initialize lastOutputValues for cable inspector
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    }
}

void PolyVCOModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32)samplesPerBlock, 1 }; // Mono spec
    
    // Prepare all pre-initialized oscillators
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        sineOscillators[i].prepare(spec);
        sawOscillators[i].prepare(spec);
        squareOscillators[i].prepare(spec);
        smoothedGateLevels[i] = 0.0f;
        gateEnvelope[i] = 0.0f;
        gateOnState[i] = 0;
    }
}

void PolyVCOModuleProcessor::releaseResources()
{
    // Nothing to release for PolyVCO
}

void PolyVCOModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    auto modInBus = getBusBuffer(buffer, true, 0);
    auto outBus   = getBusBuffer(buffer, false, 0);

    juce::ScopedNoDenormals noDenormals;

    constexpr float GATE_ATTACK_SECONDS = 0.001f;
    constexpr float GATE_RELEASE_SECONDS = 0.002f;
    const float gateAttackCoeff = (float)((1.0 - std::exp(-1.0 / juce::jmax(1.0, getSampleRate() * GATE_ATTACK_SECONDS))));
    const float gateReleaseCoeff = (float)((1.0 - std::exp(-1.0 / juce::jmax(1.0, getSampleRate() * GATE_RELEASE_SECONDS))));

    const bool isNumVoicesModulated = isParamInputConnected("numVoices");
    std::array<bool, MAX_VOICES> freqIsModulated, waveIsModulated, gateIsModulated;
    
    for (int i = 0; i < MAX_VOICES; ++i)
    {
        const juce::String idx = juce::String(i + 1);
        freqIsModulated[i] = isParamInputConnected("freq_" + idx);
        waveIsModulated[i] = isParamInputConnected("wave_" + idx);
        gateIsModulated[i] = isParamInputConnected("gate_" + idx);
    }

    std::array<float, MAX_VOICES> lastFreq {};
    std::array<int,   MAX_VOICES> lastWave {};
    std::array<float, MAX_VOICES> lastGate {};

    int finalActiveVoices = numVoicesParam != nullptr ? numVoicesParam->get() : 1;
    for (int sample = 0; sample < outBus.getNumSamples(); ++sample)
    {
        int activeVoices = numVoicesParam != nullptr ? numVoicesParam->get() : 1;
        if (isNumVoicesModulated)
        {
            const float modValue = modInBus.getReadPointer(0)[sample];
            activeVoices = juce::roundToInt(modValue);
            activeVoices = juce::jlimit(1, MAX_VOICES, activeVoices);
        }
        finalActiveVoices = activeVoices;

        for (int voice = 0; voice < activeVoices; ++voice)
        {
            float freq = voiceFreqParams[voice] != nullptr ? voiceFreqParams[voice]->get() : 440.0f;
            int   waveChoice = voiceWaveParams[voice] != nullptr ? voiceWaveParams[voice]->getIndex() : 0;
            
            float freqModCV = 0.0f; // Default to 0 if not connected/modulated
            if (freqIsModulated[voice])
            {
                int chan = 1 + voice;
                if (chan < modInBus.getNumChannels())
                {
                    freqModCV = modInBus.getReadPointer(chan)[sample];
                    const float cv01 = (freqModCV >= 0.0f && freqModCV <= 1.0f) ? freqModCV : (freqModCV + 1.0f) * 0.5f;
                    constexpr float fMin = 20.0f, fMax = 20000.0f;
                    freq = fMin * std::pow(2.0f, juce::jlimit(0.0f, 1.0f, cv01) * std::log2(fMax / fMin));
                }
            }
            if (waveIsModulated[voice])
            {
                int chan = 1 + MAX_VOICES + voice;
                if (chan < modInBus.getNumChannels())
                    waveChoice = static_cast<int>(juce::jlimit(0.0f, 1.0f, (modInBus.getReadPointer(chan)[sample] + 1.0f) * 0.5f) * 2.99f);
            }
            
            // --- THIS IS THE DEFINITIVE FIX ---
            float finalGateMultiplier = 0.0f;
            if (gateIsModulated[voice])
            {
                // MODE 1: Gate is modulated by an external signal (e.g., ADSR).
                // Use the incoming CV directly as the envelope.
                int chan = 1 + (2 * MAX_VOICES) + voice;
                if (chan < modInBus.getNumChannels())
                {
                    float gateCV = modInBus.getReadPointer(chan)[sample];
                    // Apply light smoothing to the direct CV to prevent clicks.
                    gateEnvelope[voice] += (gateCV - gateEnvelope[voice]) * 0.005f; 
                    finalGateMultiplier = gateEnvelope[voice];
                }
            }
            else
            {
                // MODE 2: Gate is NOT modulated. Use the internal slider as a threshold
                // against the signal from the 'Freq Mod' input.
                float gateThreshold = voiceGateParams[voice] != nullptr ? voiceGateParams[voice]->get() : 0.5f;
                float gateTarget = (freqModCV > gateThreshold) ? 1.0f : 0.0f;
                
                // Use the fast attack/release envelope for a snappy response.
                const float coeff = (gateTarget > gateEnvelope[voice]) ? gateAttackCoeff : gateReleaseCoeff;
                gateEnvelope[voice] += coeff * (gateTarget - gateEnvelope[voice]);
                finalGateMultiplier = gateEnvelope[voice];
            }
            // --- END OF FIX ---

            juce::dsp::Oscillator<float>* currentOscillator = nullptr;
            if (waveChoice == 0)      currentOscillator = &sineOscillators[voice];
            else if (waveChoice == 1) currentOscillator = &sawOscillators[voice];
            else                      currentOscillator = &squareOscillators[voice];

            if (currentWaveforms[voice] != waveChoice)
            {
                currentWaveforms[voice] = waveChoice;
            }

            currentOscillator->setFrequency(freq, false);
            const float sampleValue = currentOscillator->processSample(0.0f);
            
            outBus.setSample(voice, sample, sampleValue * finalGateMultiplier);

            lastFreq[voice] = freq;
            lastWave[voice] = waveChoice;
            lastGate[voice] = finalGateMultiplier; // Store the actual applied gain
        }
        
        for (int voice = activeVoices; voice < MAX_VOICES; ++voice)
        {
            outBus.setSample(voice, sample, 0.0f);
        }
    }

    for (int voice = 0; voice < finalActiveVoices; ++voice)
    {
        const auto idxStr = juce::String(voice + 1);
        setLiveParamValue("freq_" + idxStr + "_live", lastFreq[voice]);
        setLiveParamValue("wave_" + idxStr + "_live", (float) lastWave[voice]);
        setLiveParamValue("gate_" + idxStr + "_live", lastGate[voice]);
    }
    
    // Update lastOutputValues for cable inspector
    if (lastOutputValues.size() >= (size_t)finalActiveVoices)
    {
        for (int voice = 0; voice < finalActiveVoices; ++voice)
        {
            if (lastOutputValues[voice])
            {
                lastOutputValues[voice]->store(outBus.getSample(voice, outBus.getNumSamples() - 1));
            }
        }
    }

    setLiveParamValue("numVoices_live", (float)finalActiveVoices);
}

std::vector<DynamicPinInfo> PolyVCOModuleProcessor::getDynamicInputPins() const
{
    std::vector<DynamicPinInfo> pins;
    const int activeVoices = getEffectiveNumVoices(); // Use the new helper
    
    // Always include the NumVoices modulation input
    pins.push_back({ "NumVoices Mod", 0, PinDataType::Raw });
    
    // Add per-voice modulation inputs for active voices only
    for (int i = 0; i < activeVoices; ++i)
    {
        const juce::String idx = juce::String(i + 1);
        
        // Frequency modulation (channels 1-32)
        pins.push_back({ "Freq " + idx + " Mod", 1 + i, PinDataType::CV });
        
        // Waveform modulation (channels 33-64)
        pins.push_back({ "Wave " + idx + " Mod", 1 + MAX_VOICES + i, PinDataType::CV });
        
        // Gate modulation (channels 65-96)
        pins.push_back({ "Gate " + idx + " Mod", 1 + (2 * MAX_VOICES) + i, PinDataType::Gate });
    }
    return pins;
}

std::vector<DynamicPinInfo> PolyVCOModuleProcessor::getDynamicOutputPins() const
{
    std::vector<DynamicPinInfo> pins;
    const int activeVoices = getEffectiveNumVoices(); // Use the new helper
    pins.reserve((size_t)activeVoices);
    for (int i = 0; i < activeVoices; ++i)
    {
        pins.push_back({ "Voice " + juce::String(i + 1), i, PinDataType::Audio });
    }
    return pins;
}

int PolyVCOModuleProcessor::getEffectiveNumVoices() const
{
    if (isParamInputConnected("numVoices"))
    {
        // If modulated, get the live value from the audio thread.
        return (int)getLiveParamValueFor("numVoices", "numVoices_live", (float)(numVoicesParam ? numVoicesParam->get() : 1));
    }
    
    // Otherwise, return the slider's base value.
    return numVoicesParam ? numVoicesParam->get() : 1;
}

#if defined(PRESET_CREATOR_UI)
void PolyVCOModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                 const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);
    auto& ap = getAPVTS();

    // --- Master Voice Count Control with Live Feedback ---
    const bool isCountModulated = isParamModulated("numVoices");
    int displayedVoices = isCountModulated ? (int)getLiveParamValueFor("numVoices", "numVoices_live", (float)(numVoicesParam != nullptr ? numVoicesParam->get() : 1))
                                           : (numVoicesParam != nullptr ? numVoicesParam->get() : 1);

    if (isCountModulated) ImGui::BeginDisabled();
    if (ImGui::SliderInt("Num Voices", &displayedVoices, 1, MAX_VOICES)) {
        if (!isCountModulated) {
            *numVoicesParam = displayedVoices;
            onModificationEnded();
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit() && !isCountModulated) { onModificationEnded(); }
    if (!isCountModulated) {
        adjustParamOnWheel(ap.getParameter("numVoices"), "numVoices", (float)displayedVoices);
    }
    if (isCountModulated) { 
        ImGui::EndDisabled(); 
        ImGui::SameLine(); 
        ImGui::TextUnformatted("(mod)");
    }

    // --- Per-Voice Controls (rows follow live voice count when modded) ---
    const int activeVoices = juce::jlimit(1, MAX_VOICES,
        (int)(isCountModulated ? getLiveParamValueFor("numVoices", "numVoices_live", (float)getEffectiveNumVoices())
                               : (float)getEffectiveNumVoices()));
    for (int i = 0; i < activeVoices; ++i)
    {
        const auto idx = juce::String(i + 1);
        ImGui::PushID(i);

        // Frequency Slider with live feedback
        const bool isFreqModulated = isParamModulated("freq_" + idx);
        float freq = isFreqModulated ? getLiveParamValueFor("freq_" + idx, "freq_" + idx + "_live", (voiceFreqParams[i] != nullptr ? voiceFreqParams[i]->get() : 440.0f))
                                     : (voiceFreqParams[i] != nullptr ? voiceFreqParams[i]->get() : 440.0f);
        if (isFreqModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(("Freq " + idx).toRawUTF8(), &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic)) {
            if (!isFreqModulated) *voiceFreqParams[i] = freq;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && !isFreqModulated) onModificationEnded();
        if (!isFreqModulated) adjustParamOnWheel(ap.getParameter("freq_" + idx), "freq_" + idx, freq);
        if (isFreqModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Waveform Combo with live feedback
        const bool isWaveModulated = isParamModulated("wave_" + idx);
        int wave = isWaveModulated ? (int)getLiveParamValueFor("wave_" + idx, "wave_" + idx + "_live", (float)(voiceWaveParams[i] != nullptr ? voiceWaveParams[i]->getIndex() : 0))
                                   : (voiceWaveParams[i] != nullptr ? voiceWaveParams[i]->getIndex() : 0);
        if (isWaveModulated) ImGui::BeginDisabled();
        if (ImGui::Combo(("Wave " + idx).toRawUTF8(), &wave, "Sine\0Saw\0Square\0\0")) {
            if (!isWaveModulated) *voiceWaveParams[i] = wave;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && !isWaveModulated) onModificationEnded();
        if (isWaveModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Gate Slider with live feedback
        const bool isGateModulated = isParamModulated("gate_" + idx);
        float gate = isGateModulated ? getLiveParamValueFor("gate_" + idx, "gate_" + idx + "_live", (voiceGateParams[i] != nullptr ? voiceGateParams[i]->get() : 1.0f))
                                     : (voiceGateParams[i] != nullptr ? voiceGateParams[i]->get() : 1.0f);
        if (isGateModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat(("Gate " + idx).toRawUTF8(), &gate, 0.0f, 1.0f, "%.2f")) {
            if (!isGateModulated) *voiceGateParams[i] = gate;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && !isGateModulated) onModificationEnded();
        if (!isGateModulated) adjustParamOnWheel(ap.getParameter("gate_" + idx), "gate_" + idx, gate);
        if (isGateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopID();
    }
    ImGui::PopItemWidth();
}
#endif

#if defined(PRESET_CREATOR_UI)
void PolyVCOModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("NumVoices Mod", 0);
    
    const int activeVoices = getEffectiveNumVoices(); // Use the new helper
    for (int i = 0; i < activeVoices; ++i)
    {
        const juce::String idx = juce::String(i + 1);
        
        helpers.drawAudioInputPin(("Freq " + idx).toRawUTF8(), 1 + i);
        helpers.drawAudioInputPin(("Wave " + idx).toRawUTF8(), 1 + MAX_VOICES + i);
        helpers.drawAudioInputPin(("Gate " + idx).toRawUTF8(), 1 + (2 * MAX_VOICES) + i);
        
        helpers.drawAudioOutputPin(("Voice " + idx).toRawUTF8(), i);
    }
}
#endif

juce::String PolyVCOModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "Num Voices Mod";
    
    // Frequency modulation buses (channels 1-32)
    if (channel >= 1 && channel <= MAX_VOICES)
    {
        return "Freq " + juce::String(channel) + " Mod";
    }
    
    // Waveform modulation buses (channels 33-64)
    if (channel >= MAX_VOICES + 1 && channel <= 2 * MAX_VOICES)
    {
        return "Wave " + juce::String(channel - MAX_VOICES) + " Mod";
    }
    
    // Gate modulation buses (channels 65-96)
    if (channel >= 2 * MAX_VOICES + 1 && channel <= 3 * MAX_VOICES)
    {
        return "Gate " + juce::String(channel - 2 * MAX_VOICES) + " Mod";
    }
    
    return juce::String("In ") + juce::String(channel + 1);
}

// Parameter bus contract implementation
#if defined(PRESET_CREATOR_UI)

#endif

bool PolyVCOModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // ALL modulation uses the single input bus at index 0.

    if (paramId == "numVoices") { outChannelIndexInBus = 0; return true; }

    if (paramId.startsWith("freq_"))
    {
        outChannelIndexInBus = paramId.getTrailingIntValue(); // 1 to 32
        return (outChannelIndexInBus > 0 && outChannelIndexInBus <= MAX_VOICES);
    }
    if (paramId.startsWith("wave_"))
    {
        outChannelIndexInBus = MAX_VOICES + paramId.getTrailingIntValue(); // 33 to 64
        return (outChannelIndexInBus > MAX_VOICES && outChannelIndexInBus <= 2 * MAX_VOICES);
    }
    if (paramId.startsWith("gate_"))
    {
        outChannelIndexInBus = (2 * MAX_VOICES) + paramId.getTrailingIntValue(); // 65 to 96
        return (outChannelIndexInBus > 2 * MAX_VOICES && outChannelIndexInBus <= 3 * MAX_VOICES);
    }

    return false;
}


================================================================================
FILE: juce\Source\audio\modules\PolyVCOModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <array>

class PolyVCOModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_VOICES = 32;

    PolyVCOModuleProcessor();
    ~PolyVCOModuleProcessor() override = default;

    const juce::String getName() const override { return "polyvco"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;
    
    // Dynamic pin interface for variable voice count
    std::vector<DynamicPinInfo> getDynamicInputPins() const override;
    std::vector<DynamicPinInfo> getDynamicOutputPins() const override;
    
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    // Parameter bus contract implementation (must be available in Collider too)
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    int getEffectiveNumVoices() const;
    
    juce::String getAudioInputLabel(int channel) const override;

    juce::AudioProcessorValueTreeState apvts;

    // Global control
    juce::AudioParameterInt* numVoicesParam { nullptr };

    // Per-voice parameters
    std::vector<juce::AudioParameterFloat*> voiceFreqParams;
    std::vector<juce::AudioParameterChoice*> voiceWaveParams;
    std::vector<juce::AudioParameterFloat*> voiceGateParams;

    // DSP engines - pre-initialized for each waveform to avoid audio thread allocations
    std::array<juce::dsp::Oscillator<float>, MAX_VOICES> sineOscillators;
    std::array<juce::dsp::Oscillator<float>, MAX_VOICES> sawOscillators;
    std::array<juce::dsp::Oscillator<float>, MAX_VOICES> squareOscillators;
    
    // Track the current waveform for each voice
    std::array<int, MAX_VOICES> currentWaveforms;
    
    // --- ADD GATE SMOOTHING ---
    std::array<float, MAX_VOICES> smoothedGateLevels {};

    // Clickless gate: per-voice envelope and hysteresis state
    std::array<float, MAX_VOICES> gateEnvelope {};
    std::array<uint8_t, MAX_VOICES> gateOnState {}; // 0/1 with hysteresis
};


================================================================================
FILE: juce\Source\audio\modules\QuantizerModuleProcessor.cpp
================================================================================


#include "QuantizerModuleProcessor.h"

QuantizerModuleProcessor::QuantizerModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // 0: Audio In, 1: Scale Mod, 2: Root Mod
                        .withOutput("Out", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "QuantizerParams", createParameterLayout())
{
    scaleParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("scale"));
    rootNoteParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("rootNote"));
    scaleModParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("scale_mod"));
    rootModParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("root_mod"));

    // Define scales as semitone offsets from the root
    scales.push_back({ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 }); // Chromatic
    scales.push_back({ 0, 2, 4, 5, 7, 9, 11 }); // Major
    scales.push_back({ 0, 2, 3, 5, 7, 8, 10 }); // Natural Minor
    scales.push_back({ 0, 2, 4, 7, 9 }); // Major Pentatonic
    scales.push_back({ 0, 3, 5, 7, 10 }); // Minor Pentatonic
    
    // ADD THIS:
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout QuantizerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterChoice>("scale", "Scale",
        juce::StringArray{ "Chromatic", "Major", "Natural Minor", "Major Pentatonic", "Minor Pentatonic" }, 0));
    p.push_back(std::make_unique<juce::AudioParameterInt>("rootNote", "Root Note", 0, 11, 0)); // 0=C, 1=C#, etc.
    p.push_back(std::make_unique<juce::AudioParameterFloat>("scale_mod", "Scale Mod", 0.0f, 1.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>("root_mod", "Root Mod", 0.0f, 1.0f, 0.0f));
    return { p.begin(), p.end() };
}

void QuantizerModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void QuantizerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto in = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);

    // Read CV from unified input bus (if connected)
    float scaleModCV = 0.0f;
    float rootModCV = 0.0f;
    
    // Check if scale mod is connected and read CV from channel 1
    if (isParamInputConnected("scale_mod") && in.getNumChannels() > 1)
    {
        scaleModCV = in.getReadPointer(1)[0];
    }
    
    // Check if root mod is connected and read CV from channel 2
    if (isParamInputConnected("root_mod") && in.getNumChannels() > 2)
    {
        rootModCV = in.getReadPointer(2)[0];
    }

    // Apply modulation or use parameter values
    float scaleModValue = 0.0f;
    if (isParamInputConnected("scale_mod")) // Scale Mod bus connected
    {
        scaleModValue = scaleModCV;
    }
    else
    {
        scaleModValue = scaleModParam != nullptr ? scaleModParam->get() : 0.0f;
    }
    
    float rootModValue = 0.0f;
    if (isParamInputConnected("root_mod")) // Root Mod bus connected
    {
        rootModValue = rootModCV;
    }
    else
    {
        rootModValue = rootModParam != nullptr ? rootModParam->get() : 0.0f;
    }

    // Calculate final scale index, wrapping around if necessary
    int finalScaleIdx = (scaleParam != nullptr ? scaleParam->getIndex() : 0) + static_cast<int>(scaleModValue * (float)scales.size());
    finalScaleIdx = finalScaleIdx % (int)scales.size();

    // Calculate final root note, wrapping around the 12-semitone octave
    int finalRootNote = (rootNoteParam != nullptr ? rootNoteParam->get() : 0) + static_cast<int>(rootModValue * 12.0f);
    finalRootNote = finalRootNote % 12;

    const auto& currentScale = scales[finalScaleIdx];
    const float rootNote = (float)finalRootNote;

    const float* src = in.getReadPointer(0);
    float* dst = out.getWritePointer(0);
    
    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        const float inputCV = juce::jlimit(0.0f, 1.0f, src[i]);
        
        // Map 0..1 CV to a 5-octave range (60 semitones)
        const float totalSemitones = inputCV * 60.0f;
        const int octave = static_cast<int>(totalSemitones / 12.0f);
        const float noteInOctave = totalSemitones - (octave * 12.0f);
        
        // Find the closest note in the scale
        float closestNote = currentScale[0];
        float minDistance = 12.0f;
        for (float scaleNote : currentScale)
        {
            float distance = std::abs(noteInOctave - scaleNote);
            if (distance < minDistance)
            {
                minDistance = distance;
                closestNote = scaleNote;
            }
        }
        
        // Combine octave, root, and quantized note, then map back to 0..1 CV
        float finalSemitones = (octave * 12.0f) + closestNote + rootNote;
        dst[i] = juce::jlimit(0.0f, 1.0f, finalSemitones / 60.0f);
    }
    
    // Store live modulated values for UI display
    setLiveParamValue("scale_live", static_cast<float>(finalScaleIdx));
    setLiveParamValue("root_live", static_cast<float>(finalRootNote));

    // ADD THIS BLOCK:
    if (!lastOutputValues.empty() && lastOutputValues[0])
    {
        lastOutputValues[0]->store(out.getSample(0, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void QuantizerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    int scale = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("scale"))) scale = p->getIndex();
    int root = 0; if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter("rootNote"))) root = *p;

    const char* scales = "Chromatic\0Major\0Natural Minor\0Major Pentatonic\0Minor Pentatonic\0\0";
    const char* notes = "C\0C#\0D\0D#\0E\0F\0F#\0G\0G#\0A\0A#\0B\0\0";
    
    ImGui::PushItemWidth(itemWidth);

    // Scale Combo Box
    bool isScaleModulated = isParamModulated("scale_mod");
    if (isScaleModulated) {
        scale = static_cast<int>(getLiveParamValueFor("scale_mod", "scale_live", static_cast<float>(scale)));
        ImGui::BeginDisabled();
    }
    if (ImGui::Combo("Scale", &scale, scales)) if (!isScaleModulated) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("scale"))) *p = scale;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isScaleModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Root Note Combo Box
    bool isRootModulated = isParamModulated("root_mod");
    if (isRootModulated) {
        root = static_cast<int>(getLiveParamValueFor("root_mod", "root_live", static_cast<float>(root)));
        ImGui::BeginDisabled();
    }
    if (ImGui::Combo("Root", &root, notes)) if (!isRootModulated) if (auto* p = dynamic_cast<juce::AudioParameterInt*>(ap.getParameter("rootNote"))) *p = root;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isRootModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    ImGui::PopItemWidth();
}
#endif

void QuantizerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In", 0);
    
    int busIdx, chanInBus;
    if (getParamRouting("scale_mod", busIdx, chanInBus))
        helpers.drawAudioInputPin("Scale Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("root_mod", busIdx, chanInBus))
        helpers.drawAudioInputPin("Root Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    
    helpers.drawAudioOutputPin("Out", 0);
}

bool QuantizerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "scale_mod") { outChannelIndexInBus = 1; return true; }
    if (paramId == "root_mod")  { outChannelIndexInBus = 2; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\QuantizerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class QuantizerModuleProcessor : public ModuleProcessor
{
public:
    QuantizerModuleProcessor();
    ~QuantizerModuleProcessor() override = default;

    const juce::String getName() const override { return "quantizer"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In";
            case 1: return "Scale Mod";
            case 2: return "Root Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
    
    // Parameter bus contract implementation

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    
    // Parameter pointers
    juce::AudioParameterChoice* scaleParam { nullptr };
    juce::AudioParameterInt* rootNoteParam { nullptr };
    juce::AudioParameterFloat* scaleModParam { nullptr };
    juce::AudioParameterFloat* rootModParam { nullptr };

    // Scale definitions
    std::vector<std::vector<float>> scales;
};


================================================================================
FILE: juce\Source\audio\modules\RandomModuleProcessor.cpp
================================================================================


#include "RandomModuleProcessor.h"
#include <cmath>

juce::AudioProcessorValueTreeState::ParameterLayout RandomModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdCvMin, "CV Min", 0.0f, 1.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdCvMax, "CV Max", 0.0f, 1.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdNormMin, "Norm Min", 0.0f, 1.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdNormMax, "Norm Max", 0.0f, 1.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMin, "Min", -100.0f, 100.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdMax, "Max", -100.0f, 100.0f, 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdSlew, "Slew", juce::NormalisableRange<float>(0.0f, 1.0f, 0.001f, 0.5f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdRate, "Rate", juce::NormalisableRange<float>(0.1f, 50.0f, 0.01f, 0.3f), 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(paramIdTrigThreshold, "Trig Threshold", 0.0f, 1.0f, 0.5f));
    
    // Transport sync parameters
    params.push_back(std::make_unique<juce::AudioParameterBool>("sync", "Sync to Transport", false));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("rate_division", "Division",
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3));
    
    return { params.begin(), params.end() };
}

RandomModuleProcessor::RandomModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::disabled(), true)
                        .withOutput("Outputs", juce::AudioChannelSet::discreteChannels(5), true)),
      apvts(*this, nullptr, "RandomParams", createParameterLayout())
{
    minParam = apvts.getRawParameterValue(paramIdMin);
    maxParam = apvts.getRawParameterValue(paramIdMax);
    cvMinParam = apvts.getRawParameterValue(paramIdCvMin);
    cvMaxParam = apvts.getRawParameterValue(paramIdCvMax);
    normMinParam = apvts.getRawParameterValue(paramIdNormMin);
    normMaxParam = apvts.getRawParameterValue(paramIdNormMax);
    slewParam = apvts.getRawParameterValue(paramIdSlew);
    rateParam = apvts.getRawParameterValue(paramIdRate);
    trigThresholdParam = apvts.getRawParameterValue(paramIdTrigThreshold);
    for (int i = 0; i < 5; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void RandomModuleProcessor::prepareToPlay(double newSampleRate, int)
{
    sampleRate = newSampleRate;
    phase = 1.0;
    lastScaledBeats = 0.0;
    trigPulseRemaining = 0;
    smoothedSlew.reset(newSampleRate, 0.01);
    smoothedSlew.setCurrentAndTargetValue(slewParam->load());
    // Initialize with a random value
    const float minVal = minParam->load();
    const float maxVal = maxParam->load();
    targetValue = currentValue = minVal + rng.nextFloat() * (maxVal - minVal);
    const float cvMinVal = cvMinParam->load();
    const float cvMaxVal = cvMaxParam->load();
    targetValueCV = currentValueCV = cvMinVal + rng.nextFloat() * (cvMaxVal - cvMinVal);
}

void RandomModuleProcessor::setTimingInfo(const TransportState& state)
{
    m_currentTransport = state;
}

void RandomModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto outBus = getBusBuffer(buffer, false, 0);
    outBus.clear();
    const int numSamples = buffer.getNumSamples();

    const float baseRate = rateParam->load();
    const float baseSlew = slewParam->load();
    const float minVal = minParam->load();
    const float maxVal = maxParam->load();
    const float cvMinVal = cvMinParam->load();
    const float cvMaxVal = cvMaxParam->load();
    const float normMinVal = normMinParam->load();
    const float normMaxVal = normMaxParam->load();
    const float trigThreshold = trigThresholdParam->load();

    // Get sync parameters
    const bool syncEnabled = apvts.getRawParameterValue("sync")->load() > 0.5f;
    const int divisionIndex = (int)apvts.getRawParameterValue("rate_division")->load();
    static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
    const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];

    auto* normOut = outBus.getWritePointer(0);
    auto* rawOut  = outBus.getWritePointer(1);
    auto* cvOut   = outBus.getWritePointer(2);
    auto* boolOut = outBus.getWritePointer(3);
    auto* trigOut = outBus.getWritePointer(4);

    for (int i = 0; i < numSamples; ++i)
    {
        bool triggerNewValue = false;
        if (syncEnabled && m_currentTransport.isPlaying)
        {
            // SYNC MODE
            double beatsNow = m_currentTransport.songPositionBeats + (i / sampleRate / 60.0 * m_currentTransport.bpm);
            double scaledBeats = beatsNow * beatDivision;
            if (static_cast<long long>(scaledBeats) > static_cast<long long>(lastScaledBeats))
            {
                triggerNewValue = true;
            }
            lastScaledBeats = scaledBeats;
        }
        else
        {
            // FREE-RUNNING MODE
            phase += (double)baseRate / sampleRate;
            if (phase >= 1.0)
            {
                phase -= 1.0;
                triggerNewValue = true;
            }
        }

        if (triggerNewValue)
        {
            targetValue = minVal + rng.nextFloat() * (maxVal - minVal);
            targetValueCV = cvMinVal + rng.nextFloat() * (cvMaxVal - cvMinVal);
            if (currentValueCV >= trigThreshold) {
                trigPulseRemaining = (int) std::max(1.0, sampleRate * 0.001);
            }
        }

        smoothedSlew.setTargetValue(baseSlew);
        float effectiveSlew = smoothedSlew.getNextValue();
        if (effectiveSlew <= 0.0001f) {
            currentValue = targetValue;
            currentValueCV = targetValueCV;
        } else {
            const float slewCoeff = (float)(1.0 - std::exp(-1.0 / (effectiveSlew * (float)sampleRate)));
            currentValue += (targetValue - currentValue) * slewCoeff;
            currentValueCV += (targetValueCV - currentValueCV) * slewCoeff;
        }
        
        float tempNormalized = (std::abs(maxVal - minVal) < 1e-6f) ? 0.5f : (currentValue - minVal) / (maxVal - minVal);
        float normalizedValue = juce::jmap(tempNormalized, 0.0f, 1.0f, normMinVal, normMaxVal);
        
        normOut[i] = normalizedValue;
        rawOut[i]  = currentValue;
        cvOut[i]   = currentValueCV;
        boolOut[i] = (currentValueCV >= trigThreshold) ? 1.0f : 0.0f;
        
        trigOut[i] = (trigPulseRemaining > 0) ? 1.0f : 0.0f;
        if (trigPulseRemaining > 0) --trigPulseRemaining;
    }
    
    lastNormalizedOutputValue.store(normOut[numSamples - 1]);
    lastOutputValue.store(rawOut[numSamples - 1]);
    lastCvOutputValue.store(cvOut[numSamples - 1]);
    lastBoolOutputValue.store(boolOut[numSamples - 1]);
    lastTrigOutputValue.store(trigOut[numSamples - 1]);
    
    // Update lastOutputValues for cable inspector
    if (lastOutputValues.size() >= 5)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(normOut[numSamples - 1]);
        if (lastOutputValues[1]) lastOutputValues[1]->store(rawOut[numSamples - 1]);
        if (lastOutputValues[2]) lastOutputValues[2]->store(cvOut[numSamples - 1]);
        if (lastOutputValues[3]) lastOutputValues[3]->store(boolOut[numSamples - 1]);
        if (lastOutputValues[4]) lastOutputValues[4]->store(trigOut[numSamples - 1]);
    }
}

juce::ValueTree RandomModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("RandomState");
    vt.setProperty("sync", apvts.getRawParameterValue("sync")->load(), nullptr);
    vt.setProperty("rate_division", apvts.getRawParameterValue("rate_division")->load(), nullptr);
    return vt;
}

void RandomModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("RandomState"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync")))
            *p = (bool)vt.getProperty("sync", false);
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division")))
            *p = (int)vt.getProperty("rate_division", 3);
    }
}

#if defined(PRESET_CREATOR_UI)
void RandomModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated);
    
    auto& ap = getAPVTS();
    float cvMin = cvMinParam->load();
    float cvMax = cvMaxParam->load();
    float normMin = normMinParam->load();
    float normMax = normMaxParam->load();
    float minVal = minParam->load();
    float maxVal = maxParam->load();
    float slew = slewParam->load();
    float rate = rateParam->load();
    float trigThreshold = trigThresholdParam->load();

    ImGui::PushItemWidth(itemWidth);

    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue("sync")->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(ap.getParameter("sync")))
            *p = sync;
        onModificationEnded();
    }
    
    if (sync)
    {
        int division = (int)apvts.getRawParameterValue("rate_division")->load();
        if (ImGui::Combo("Division", &division, "1/32\0""1/16\0""1/8\0""1/4\0""1/2\0""1\0""2\0""4\0""8\0\0"))
        {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("rate_division")))
                *p = division;
            onModificationEnded();
        }
    }
    else
    {
        // Rate slider (only show in free-running mode)
        if (ImGui::SliderFloat("Rate", &rate, 0.1f, 50.0f, "%.3f Hz", ImGuiSliderFlags_Logarithmic)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdRate)) = rate;
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        adjustParamOnWheel(ap.getParameter(paramIdRate), "rate", rate);
    }

    if (ImGui::SliderFloat("Slew", &slew, 0.0f, 1.0f, "%.3f")) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdSlew)) = slew;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdSlew), "slew", slew);
    
    if (ImGui::SliderFloat("CV Min", &cvMin, 0.0f, 1.0f)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdCvMin)) = cvMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdCvMin), "cvMin", cvMin);

    if (ImGui::SliderFloat("CV Max", &cvMax, 0.0f, 1.0f)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdCvMax)) = cvMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdCvMax), "cvMax", cvMax);

    if (ImGui::SliderFloat("Norm Min", &normMin, 0.0f, 1.0f)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdNormMin)) = normMin;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdNormMin), "normMin", normMin);

    if (ImGui::SliderFloat("Norm Max", &normMax, 0.0f, 1.0f)) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdNormMax)) = normMax;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdNormMax), "normMax", normMax);

    if (ImGui::SliderFloat("Min", &minVal, -100.0f, 100.0f, "%.3f")) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMin)) = minVal;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdMin), "min", minVal);

    if (ImGui::SliderFloat("Max", &maxVal, -100.0f, 100.0f, "%.3f")) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdMax)) = maxVal;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdMax), "max", maxVal);
    
    if (ImGui::SliderFloat("Trig Threshold", &trigThreshold, 0.0f, 1.0f, "%.2f")) *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdTrigThreshold)) = trigThreshold;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    adjustParamOnWheel(ap.getParameter(paramIdTrigThreshold), "trigThreshold", trigThreshold);

    ImGui::Text("Raw Output:        %.2f", getLastOutputValue());
    ImGui::Text("Normalized Output: %.2f", getLastNormalizedOutputValue());
    ImGui::Text("CV Output:         %.2f", getLastCvOutputValue());
    ImGui::Text("Bool Output:       %s", (getLastBoolOutputValue() > 0.5f) ? "On" : "Off");
    ImGui::Text("Trig Output:       %s", (getLastTrigOutputValue() > 0.5f) ? "On" : "Off");

    ImGui::PopItemWidth();
}

void RandomModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioOutputPin("Norm Out", 0);
    helpers.drawAudioOutputPin("Raw Out", 1);
    helpers.drawAudioOutputPin("CV Out", 2);
    helpers.drawAudioOutputPin("Bool Out", 3);
    helpers.drawAudioOutputPin("Trig Out", 4);
}

juce::String RandomModuleProcessor::getAudioInputLabel(int) const { return {}; }

juce::String RandomModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel) {
        case 0: return "Norm Out";
        case 1: return "Raw Out";
        case 2: return "CV Out";
        case 3: return "Bool Out";
        case 4: return "Trig Out";
        default: return {};
    }
}

bool RandomModuleProcessor::getParamRouting(const juce::String&, int&, int&) const { return false; }
#endif

float RandomModuleProcessor::getLastOutputValue() const { return lastOutputValue.load(); }
float RandomModuleProcessor::getLastNormalizedOutputValue() const { return lastNormalizedOutputValue.load(); }
float RandomModuleProcessor::getLastCvOutputValue() const { return lastCvOutputValue.load(); }
float RandomModuleProcessor::getLastBoolOutputValue() const { return lastBoolOutputValue.load(); }
float RandomModuleProcessor::getLastTrigOutputValue() const { return lastTrigOutputValue.load(); }


================================================================================
FILE: juce\Source\audio\modules\RandomModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class RandomModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdMin = "min";
    static constexpr auto paramIdMax = "max";
    static constexpr auto paramIdCvMin = "cvMin";
    static constexpr auto paramIdCvMax = "cvMax";
    static constexpr auto paramIdNormMin = "normMin";
    static constexpr auto paramIdNormMax = "normMax";
    static constexpr auto paramIdSlew = "slew";
    static constexpr auto paramIdRate = "rate";
    static constexpr auto paramIdTrigThreshold = "trigThreshold";

    RandomModuleProcessor();
    ~RandomModuleProcessor() override = default;

    const juce::String getName() const override { return "random"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // State management for transport settings
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree&) override;

    // UI Display Helpers
    float getLastOutputValue() const;
    float getLastNormalizedOutputValue() const;
    float getLastCvOutputValue() const;
    float getLastBoolOutputValue() const;
    float getLastTrigOutputValue() const;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    void setTimingInfo(const TransportState& state) override;
    
    juce::AudioProcessorValueTreeState apvts;
    juce::Random rng;

    TransportState m_currentTransport;
    
    // Parameter Pointers
    std::atomic<float>* minParam{ nullptr };
    std::atomic<float>* maxParam{ nullptr };
    std::atomic<float>* cvMinParam{ nullptr };
    std::atomic<float>* cvMaxParam{ nullptr };
    std::atomic<float>* normMinParam{ nullptr };
    std::atomic<float>* normMaxParam{ nullptr };
    std::atomic<float>* slewParam{ nullptr };
    std::atomic<float>* rateParam{ nullptr };
    std::atomic<float>* trigThresholdParam{ nullptr };
    
    // DSP State
    float currentValue{ 0.0f };
    float targetValue{ 0.0f };
    float currentValueCV{ 0.0f };
    float targetValueCV{ 0.0f };
    double sampleRate{ 44100.0 };
    double phase{ 0.0 };
    double lastScaledBeats{ 0.0 };
    int trigPulseRemaining { 0 };
    
    juce::SmoothedValue<float> smoothedSlew;
    
    // Telemetry for UI
    std::atomic<float> lastOutputValue{ 0.0f };
    std::atomic<float> lastNormalizedOutputValue{ 0.0f };
    std::atomic<float> lastCvOutputValue{ 0.0f };
    std::atomic<float> lastBoolOutputValue{ 0.0f };
    std::atomic<float> lastTrigOutputValue { 0.0f };
};

================================================================================
FILE: juce\Source\audio\modules\RateModuleProcessor.cpp
================================================================================


#include "RateModuleProcessor.h"

RateModuleProcessor::RateModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Rate Mod", juce::AudioChannelSet::mono(), true)
                        .withOutput("Out", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "RateParams", createParameterLayout())
{
    baseRateParam = apvts.getRawParameterValue("baseRate");
    multiplierParam = apvts.getRawParameterValue("multiplier");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out
}

juce::AudioProcessorValueTreeState::ParameterLayout RateModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>("baseRate", "Base Rate", juce::NormalisableRange<float>(0.1f, 20.0f, 0.01f), 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("multiplier", "Multiplier", juce::NormalisableRange<float>(0.1f, 10.0f, 0.01f), 1.0f));
    return { params.begin(), params.end() };
}

void RateModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void RateModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    auto in = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);
    
    const float* src = in.getNumChannels() > 0 ? in.getReadPointer(0) : nullptr;
    float* dst = out.getWritePointer(0);
    
    const float baseRate = baseRateParam->load();
    const float multiplier = multiplierParam->load();
    
    float sumOutput = 0.0f;
    
    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float modulation = 0.0f;
        if (src != nullptr)
        {
            // Convert audio input (-1 to 1) to modulation range (-0.5 to +0.5)
            modulation = src[i] * 0.5f;
        }
        
        // Calculate final rate: baseRate * multiplier * (1 + modulation)
        float finalRate = baseRate * multiplier * (1.0f + modulation);
        finalRate = juce::jlimit(0.01f, 50.0f, finalRate); // Clamp to reasonable range
        
        // Update telemetry for live UI feedback (throttled to every 64 samples)
        if ((i & 0x3F) == 0) {
            setLiveParamValue("baseRate_live", baseRate);
            setLiveParamValue("multiplier_live", multiplier);
        }
        
        // Normalize the rate to 0.0..1.0 for modulation routing
        // Map 0.01..50.0 Hz -> 0.0..1.0
        const float normalizedRate = juce::jlimit (0.0f, 1.0f, (finalRate - 0.01f) / (50.0f - 0.01f));
        dst[i] = normalizedRate;
        sumOutput += finalRate;
    }
    
    lastOutputValue.store(sumOutput / (float) buffer.getNumSamples());
    
    // Update output values for tooltips
    if (!lastOutputValues.empty() && lastOutputValues[0])
    {
        lastOutputValues[0]->store(out.getSample(0, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void RateModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float baseRate = baseRateParam->load();
    float multiplier = multiplierParam->load();

    ImGui::PushItemWidth(itemWidth);
    
    // Base Rate slider with live modulation feedback
    bool isBaseRateModulated = isParamModulated("baseRate");
    if (isBaseRateModulated) {
        baseRate = getLiveParamValueFor("baseRate", "baseRate_live", baseRate);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Base Rate", &baseRate, 0.1f, 20.0f)) {
        if (!isBaseRateModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("baseRate"))) *p = baseRate;
        }
    }
    if (!isBaseRateModulated) adjustParamOnWheel(ap.getParameter("baseRate"), "baseRate", baseRate);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isBaseRateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Multiplier slider with live modulation feedback
    bool isMultiplierModulated = isParamModulated("multiplier");
    if (isMultiplierModulated) {
        multiplier = getLiveParamValueFor("multiplier", "multiplier_live", multiplier);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Multiplier", &multiplier, 0.1f, 10.0f)) {
        if (!isMultiplierModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("multiplier"))) *p = multiplier;
        }
    }
    if (!isMultiplierModulated) adjustParamOnWheel(ap.getParameter("multiplier"), "multiplier", multiplier);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (isMultiplierModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::Text("Output: %.2f Hz", getLastOutputValue());
    
    ImGui::PopItemWidth();
}
#endif

void RateModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Mod In", 0);
    helpers.drawAudioOutputPin("Out", 0);
}

float RateModuleProcessor::getLastOutputValue() const
{
    return lastOutputValue.load();
}

// Parameter bus contract implementation
bool RateModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    if (paramId == "baseRate") { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\RateModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class RateModuleProcessor : public ModuleProcessor
{
public:
    RateModuleProcessor();
    ~RateModuleProcessor() override = default;

    const juce::String getName() const override { return "rate"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    float getLastOutputValue() const;
    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Rate Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* baseRateParam { nullptr };
    std::atomic<float>* multiplierParam { nullptr };
    
    std::atomic<float> lastOutputValue { 0.0f };
};


================================================================================
FILE: juce\Source\audio\modules\RecordModuleProcessor.cpp
================================================================================


#include "RecordModuleProcessor.h"
#include "../graph/ModularSynthProcessor.h"

// --- WriterThread with Corrected File Logic ---

RecordModuleProcessor::WriterThread::WriterThread(RecordModuleProcessor& o)
    : juce::Thread("Audio Recorder Thread"), owner(o)
{
}

RecordModuleProcessor::WriterThread::~WriterThread()
{
    stopThread(5000);
}

// This function is now private and runs ONLY on the background thread
bool RecordModuleProcessor::WriterThread::doStartRecording()
{
    const juce::ScopedLock lock(writerLock);
    if (writer != nullptr)
        return false;

    juce::File file;
    {
        const juce::ScopedLock startLock(owner.startRequestLock);
        file = owner.pendingFileToRecord;
        owner.startRequestPending = false;
    }

    // --- CRITICAL FIX #1: Auto-increment logic now happens AFTER extension is added ---
    juce::String chosenExtension = "." + owner.formatParam->getCurrentChoiceName().toLowerCase();
    juce::File fileWithExt = file.withFileExtension(chosenExtension);
    
    juce::File fileToUse = fileWithExt;
    if (fileToUse.existsAsFile())
    {
        int counter = 1;
        juce::String originalName = fileWithExt.getFileNameWithoutExtension();
        while (fileToUse.existsAsFile())
        {
            juce::String counterStr = juce::String(counter++).paddedLeft('0', 3);
            fileToUse = fileWithExt.getSiblingFile(originalName + "_" + counterStr + chosenExtension);
        }
    }
    // --- END OF FIX ---

    auto* format = owner.formatManager.findFormatForFileExtension(fileToUse.getFileExtension());
    if (format == nullptr)
        return false;

    auto fileStream = std::make_unique<juce::FileOutputStream>(fileToUse);
    if (!fileStream->openedOk())
        return false;

    writer.reset(format->createWriterFor(fileStream.release(),
                                         owner.getSampleRate(),
                                         2, // Stereo
                                         24, // Bit depth
                                         {}, 0));
    if (writer != nullptr)
    {
        owner.currentFileRecording = fileToUse.getFullPathName();
        owner.totalSamplesRecorded = 0;
        owner.waveformData.clear();
        owner.abstractFifo.reset();
        owner.isRecording = true;
        owner.isPaused = false;
        return true;
    }
    return false;
}

void RecordModuleProcessor::WriterThread::stopRecording()
{
    owner.isRecording = false;
    notify();
}

void RecordModuleProcessor::WriterThread::run()
{
    while (!threadShouldExit())
    {
        if (owner.startRequestPending.load())
        {
            doStartRecording();
        }

        bool hasAudioToProcess = owner.abstractFifo.getNumReady() > 0;
        bool shouldFinalize = !owner.isRecording.load() && !hasAudioToProcess && (writer != nullptr);

        if (hasAudioToProcess)
        {
            const juce::ScopedLock lock(writerLock);
            if (writer != nullptr)
            {
                int samplesAvailable = owner.abstractFifo.getNumReady();
                if (samplesAvailable > 0)
                {
                    juce::AudioBuffer<float> tempBuffer(2, samplesAvailable);
                    auto read = owner.abstractFifo.read(samplesAvailable);
                    tempBuffer.copyFrom(0, 0, owner.fifoBuffer, 0, read.startIndex1, read.blockSize1);
                    tempBuffer.copyFrom(1, 0, owner.fifoBuffer, 0, read.startIndex1, read.blockSize1);
                    if (read.blockSize2 > 0)
                    {
                        tempBuffer.copyFrom(0, read.blockSize1, owner.fifoBuffer, 0, read.startIndex2, read.blockSize2);
                        tempBuffer.copyFrom(1, read.blockSize1, owner.fifoBuffer, 0, read.startIndex2, read.blockSize2);
                    }
                    writer->writeFromAudioSampleBuffer(tempBuffer, 0, samplesAvailable);
                }
            }
        }
        else if (shouldFinalize)
        {
            const juce::ScopedLock lock(writerLock);
            if (writer != nullptr)
            {
                writer.reset();
                owner.currentFileRecording = "";
            }
            wait(-1);
        }
        else
        {
            wait(50);
        }
    }
    
    if (writer != nullptr)
        writer.reset();
}

// --- RecordModuleProcessor Implementation ---

juce::AudioProcessorValueTreeState::ParameterLayout RecordModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterChoice>("format", "Format", juce::StringArray{"WAV", "AIFF", "FLAC"}, 0));
    return { params.begin(), params.end() };
}

RecordModuleProcessor::RecordModuleProcessor()
    : ModuleProcessor(BusesProperties().withInput("In", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "RecordParams", createParameterLayout()),
      waveformFifoBuffer(4096),
      writerThread(*this)
{
    formatManager.registerBasicFormats();
    formatManager.registerFormat(new juce::FlacAudioFormat(), true);
    formatParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("format"));
    writerThread.startThread();
    
#if defined(PRESET_CREATOR_UI)
    saveDirectory = juce::File::getSpecialLocation(juce::File::userMusicDirectory);
#endif
    
    waveformFifo.setTotalSize(4096);
}

RecordModuleProcessor::~RecordModuleProcessor()
{
    if (isRecording.load())
        writerThread.stopRecording();
}

void RecordModuleProcessor::releaseResources()
{
    if (isRecording.load())
        writerThread.stopRecording();
}

void RecordModuleProcessor::prepareToPlay(double sampleRate, int)
{
    int fifoLen = (int)(sampleRate * 10.0);
    fifoBuffer.setSize(1, fifoLen, false, true, false);
    abstractFifo.setTotalSize(fifoLen);
    abstractFifo.reset();
}

void RecordModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    if (!isRecording.load() || isPaused.load())
        return;

    auto inBus = getBusBuffer(buffer, true, 0);
    const int numSamples = inBus.getNumSamples();

    workBuffer.setSize(1, numSamples, false, false, true);
    workBuffer.copyFrom(0, 0, inBus, 0, 0, numSamples);
    if (inBus.getNumChannels() > 1)
    {
        workBuffer.addFrom(0, 0, inBus, 1, 0, numSamples);
        workBuffer.applyGain(0.5f);
    }
    
    if (abstractFifo.getFreeSpace() >= numSamples)
    {
        auto write = abstractFifo.write(numSamples);
        if (write.blockSize1 > 0)
            fifoBuffer.copyFrom(0, write.startIndex1, workBuffer, 0, 0, write.blockSize1);
        if (write.blockSize2 > 0)
            fifoBuffer.copyFrom(0, write.startIndex2, workBuffer, 0, write.blockSize1, write.blockSize2);
        writerThread.notify();
    }
    
    if (waveformFifo.getFreeSpace() >= 1)
    {
        float peak = workBuffer.getMagnitude(0, numSamples);
        auto write = waveformFifo.write(1);
        waveformFifoBuffer[write.startIndex1] = peak;
    }
    totalSamplesRecorded += numSamples;
}

juce::String RecordModuleProcessor::getAudioInputLabel(int channel) const
{
    if (channel == 0) return "In L";
    if (channel == 1) return "In R";
    return {};
}

void RecordModuleProcessor::programmaticStartRecording()
{
#if defined(PRESET_CREATOR_UI)
    // This function is called externally, e.g., by a global start button.
    // It uses the path and filename currently set in the node's UI.
    if (saveDirectory.exists())
    {
        juce::String filenameToSave = autoGeneratedPrefix + juce::String(userSuffixBuffer);
        if (filenameToSave.isEmpty())
            filenameToSave = "recording";
        
        juce::File fileToSave = saveDirectory.getChildFile(filenameToSave);
        
        // Use the async request method
        requestStartRecording(fileToSave);
    }
#endif
}

void RecordModuleProcessor::programmaticStopRecording()
{
    if (isRecording.load())
    {
        writerThread.stopRecording();
    }
}

#if defined(PRESET_CREATOR_UI)

void RecordModuleProcessor::requestStartRecording(const juce::File& file)
{
    const juce::ScopedLock lock(startRequestLock);
    pendingFileToRecord = file;
    startRequestPending = true;
    writerThread.notify();
}

// --- NEW FUNCTION: Generates filename with source name passed directly ---
void RecordModuleProcessor::updateSuggestedFilename(const juce::String& sourceName)
{
    juce::String timeString = juce::Time::getCurrentTime().formatted("%Y%m%d_%H%M%S");
    
    if (sourceName.isEmpty())
    {
        // No source provided, mark as unconnected
        autoGeneratedPrefix = timeString + "+Unconnected";
    }
    else
    {
        // Source name provided, use it
        juce::String srcName = sourceName.removeCharacters(" ");
        autoGeneratedPrefix = timeString + "+" + srcName;
    }
}

void RecordModuleProcessor::setPropertiesFile(juce::PropertiesFile* props)
{
    propertiesFile = props;
    if (propertiesFile != nullptr)
    {
        // On initialization, load the last path from settings
        juce::String lastPath = propertiesFile->getValue("lastRecorderPath");
        if (juce::File(lastPath).isDirectory())
        {
            saveDirectory = juce::File(lastPath);
        }
    }
}

void RecordModuleProcessor::drawParametersInNode(float /*itemWidth*/, const std::function<bool(const juce::String&)>&, const std::function<void()>&)
{
    // Use a wider, fixed width for this node to ensure everything fits
    const float nodeWidth = 350.0f;
    ImGui::PushItemWidth(nodeWidth);
    
    if (isRecording.load() || !currentFileRecording.isEmpty())
    {
        if (isPaused.load())
            ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), "Status: Paused");
        else
            ImGui::Text("Status: Recording...");

        double elapsed = (double)totalSamplesRecorded.load() / getSampleRate();
        ImGui::Text("Time: %.2fs", elapsed);
        ImGui::TextWrapped("File: %s", juce::File(currentFileRecording).getFileName().toRawUTF8());

        int available = waveformFifo.getNumReady();
        if (available > 0)
        {
            auto read = waveformFifo.read(available);
            for (int i = 0; i < read.blockSize1; ++i)
                waveformData.push_back(waveformFifoBuffer[read.startIndex1 + i]);
            if (read.blockSize2 > 0)
                for (int i = 0; i < read.blockSize2; ++i)
                    waveformData.push_back(waveformFifoBuffer[read.startIndex2 + i]);
            
            const int max_display_points = 2000;
            if (waveformData.size() > max_display_points)
                waveformData.erase(waveformData.begin(), waveformData.begin() + (waveformData.size() - max_display_points));
        }
        
        ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();
        ImVec2 canvas_sz = ImVec2(nodeWidth, 60.0f);
        ImDrawList* draw_list = ImGui::GetWindowDrawList();
        draw_list->AddRectFilled(canvas_p0, ImVec2(canvas_p0.x + canvas_sz.x, canvas_p0.y + canvas_sz.y), IM_COL32(30, 30, 30, 255));
        if (!waveformData.empty())
        {
            float max_val = 1.0f;
            for (float v : waveformData)
            {
                if (v > max_val)
                    max_val = v;
            }
            for (size_t i = 0; i + 1 < waveformData.size(); ++i)
            {
                ImVec2 p1 = ImVec2(canvas_p0.x + ((float)i / waveformData.size()) * canvas_sz.x,
                                   canvas_p0.y + (1.0f - (waveformData[i] / max_val)) * canvas_sz.y);
                ImVec2 p2 = ImVec2(canvas_p0.x + ((float)(i + 1) / waveformData.size()) * canvas_sz.x,
                                   canvas_p0.y + (1.0f - (waveformData[i + 1] / max_val)) * canvas_sz.y);
                draw_list->AddLine(p1, p2, IM_COL32(120, 255, 120, 255));
            }
            if (max_val > 1.0f)
            {
                float clip_y = canvas_p0.y + (1.0f - (1.0f / max_val)) * canvas_sz.y;
                draw_list->AddLine(ImVec2(canvas_p0.x, clip_y),
                                   ImVec2(canvas_p0.x + canvas_sz.x, clip_y),
                                   IM_COL32(255, 100, 100, 200), 1.5f);
            }
        }
        ImGui::Dummy(canvas_sz);
        
        if (ImGui::Button("Stop", ImVec2(nodeWidth, 0)))
        {
            writerThread.stopRecording();
        }
    }
    else // --- NEW, SIMPLIFIED IDLE STATE UI ---
    {
        // Load the last saved directory if available
        if (propertiesFile && saveDirectory == juce::File::getSpecialLocation(juce::File::userMusicDirectory))
        {
            juce::String lastPath = propertiesFile->getValue("lastRecorderPath");
            if (lastPath.isNotEmpty() && juce::File(lastPath).isDirectory())
            {
                saveDirectory = juce::File(lastPath);
            }
        }
        
        // This layout provides more space as requested
        ImGui::Text("Save Location:");
        ImGui::TextWrapped("%s", saveDirectory.getFullPathName().toRawUTF8());
        if (ImGui::Button("Browse...", ImVec2(nodeWidth, 0)))
        {
            fileChooser = std::make_unique<juce::FileChooser>("Choose Save Directory", saveDirectory);
            fileChooser->launchAsync(juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectDirectories, [this](const juce::FileChooser& fc)
            {
                auto dir = fc.getResult();
                if (dir.isDirectory())
                {
                    saveDirectory = dir;
                    // Save the path for next time
                    if (propertiesFile)
                        propertiesFile->setValue("lastRecorderPath", dir.getFullPathName());
                }
            });
        }
        
        
        // Filename Prefix (read-only) + Suffix (editable)
        ImGui::Text("Filename Prefix:");
        ImGui::TextWrapped("%s", autoGeneratedPrefix.toRawUTF8());

        ImGui::InputText("Suffix", userSuffixBuffer, sizeof(userSuffixBuffer));
        
        int formatIdx = formatParam->getIndex();
        if (ImGui::Combo("Format", &formatIdx, "WAV\0AIFF\0FLAC\0\0"))
        {
            *formatParam = formatIdx;
        }

        // Full filename preview
        juce::String chosenExtension = "." + formatParam->getCurrentChoiceName().toLowerCase();
        juce::String finalName = autoGeneratedPrefix + juce::String(userSuffixBuffer) + chosenExtension;
        ImGui::Text("Final Name Preview:");
        ImGui::TextWrapped("%s", finalName.toRawUTF8());

        if (ImGui::Button("Record", ImVec2(nodeWidth, 0)))
        {
            juce::String filenameToSave = autoGeneratedPrefix + juce::String(userSuffixBuffer);
            if (filenameToSave.isEmpty())
                filenameToSave = "recording";
            
            juce::File fileToSave = saveDirectory.getChildFile(filenameToSave);
            requestStartRecording(fileToSave);
        }
    }
    
    ImGui::PopItemWidth();
}

void RecordModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
}

#endif


================================================================================
FILE: juce\Source\audio\modules\RecordModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_audio_formats/juce_audio_formats.h>

class RecordModuleProcessor : public ModuleProcessor
{
public:
    RecordModuleProcessor();
    ~RecordModuleProcessor() override;

    const juce::String getName() const override { return "recorder"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    void releaseResources() override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    juce::String getAudioInputLabel(int channel) const override;

    // Query recording state (prevents spacebar from stopping audio during recording)
    bool getIsRecording() const { return isRecording.load(); }
    
    // Pause/Resume recording (used by spacebar hold-to-audition)
    void pauseRecording() { isPaused = true; }
    void resumeRecording() { isPaused = false; }
    
    // Programmatic start/stop for global recording control
    void programmaticStartRecording();
    void programmaticStopRecording();

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    void requestStartRecording(const juce::File& file);
    
    // This is called by the editor when cables are connected/disconnected
    void updateSuggestedFilename(const juce::String& sourceName = "");
    
    // Set the properties file for persistent storage
    void setPropertiesFile(juce::PropertiesFile* props);
#endif

private:
    class WriterThread : public juce::Thread
    {
    public:
        WriterThread(RecordModuleProcessor& owner);
        ~WriterThread() override;
        void run() override;
        void stopRecording();

    private:
        bool doStartRecording();
        RecordModuleProcessor& owner;
        std::unique_ptr<juce::AudioFormatWriter> writer;
        juce::CriticalSection writerLock;
    };
    
    juce::AudioBuffer<float> fifoBuffer;
    juce::AbstractFifo abstractFifo { 0 };
    std::atomic<bool> isRecording { false };
    std::atomic<bool> isPaused { false };

    juce::AbstractFifo waveformFifo { 0 };
    std::vector<float> waveformFifoBuffer;
    
    WriterThread writerThread;

    juce::AudioFormatManager formatManager;
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;
    juce::AudioParameterChoice* formatParam { nullptr };

#if defined(PRESET_CREATOR_UI)
    std::unique_ptr<juce::FileChooser> fileChooser;
    juce::File saveDirectory;
    juce::String autoGeneratedPrefix;
    char userSuffixBuffer[256] { "" };
    juce::PropertiesFile* propertiesFile { nullptr };
#endif

    // Thread-safe communication for start requests
    juce::CriticalSection startRequestLock;
    juce::File pendingFileToRecord;
    std::atomic<bool> startRequestPending { false };

    juce::String currentFileRecording;
    std::atomic<int64_t> totalSamplesRecorded { 0 };
    std::vector<float> waveformData;
    juce::AudioBuffer<float> workBuffer;
};


================================================================================
FILE: juce\Source\audio\modules\ReverbModuleProcessor.cpp
================================================================================


#include "ReverbModuleProcessor.h"

ReverbModuleProcessor::ReverbModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(5), true) // 0-1: Audio In, 2: Size Mod, 3: Damp Mod, 4: Mix Mod
        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "ReverbParams", createParameterLayout())
{
    sizeParam = apvts.getRawParameterValue ("size");
    dampParam = apvts.getRawParameterValue ("damp");
    mixParam  = apvts.getRawParameterValue ("mix");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout ReverbModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("size", "Size", juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("damp", "Damp", juce::NormalisableRange<float> (0.0f, 1.0f), 0.3f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> ("mix",  "Mix",  juce::NormalisableRange<float> (0.0f, 1.0f), 0.8f));
    return { p.begin(), p.end() };
}

void ReverbModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 2 };
    reverb.prepare (spec);
    
    // Reset reverb state
    reverb.reset();
}

void ReverbModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    // --- COPY INPUT AUDIO TO OUTPUT BUFFER ---
    // Get separate handles to the input and output buses
    auto inBus = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);
    
    // Explicitly copy the dry input audio to the output buffer.
    // This ensures the reverb has a signal to process.
    const int numInputChannels = inBus.getNumChannels();
    const int numOutputChannels = outBus.getNumChannels();
    const int numSamples = juce::jmin(inBus.getNumSamples(), outBus.getNumSamples());

    if (numInputChannels > 0)
    {
        // If input is mono, copy it to both left and right outputs.
        if (numInputChannels == 1 && numOutputChannels > 1)
        {
            outBus.copyFrom(0, 0, inBus, 0, 0, numSamples);
            outBus.copyFrom(1, 0, inBus, 0, 0, numSamples);
        }
        // Otherwise, perform a standard stereo copy.
        else
        {
            const int channelsToCopy = juce::jmin(numInputChannels, numOutputChannels);
            for (int ch = 0; ch < channelsToCopy; ++ch)
            {
                outBus.copyFrom(ch, 0, inBus, ch, 0, numSamples);
            }
        }
    }
    else
    {
        // If no input is connected, ensure the output is silent.
        outBus.clear();
    }
    // --- END OF INPUT COPYING ---
    
    // Read CV from the unified input bus
    float sizeModCV = 0.0f;
    float dampModCV = 0.0f;
    float mixModCV = 0.0f;
    
    // Check if size mod is connected and read CV from channel 2
    if (isParamInputConnected("size") && inBus.getNumChannels() > 2)
    {
        sizeModCV = inBus.getReadPointer(2)[0]; // Read first sample from channel 2
    }
    
    // Check if damp mod is connected and read CV from channel 3
    if (isParamInputConnected("damp") && inBus.getNumChannels() > 3)
    {
        dampModCV = inBus.getReadPointer(3)[0]; // Read first sample from channel 3
    }
    
    // Check if mix mod is connected and read CV from channel 4
    if (isParamInputConnected("mix") && inBus.getNumChannels() > 4)
    {
        mixModCV = inBus.getReadPointer(4)[0]; // Read first sample from channel 4
    }

    // Apply modulation or use parameter values
    float size = 0.0f;
    if (isParamInputConnected("size")) // Size Mod bus connected
    {
        // Map CV [0,1] to size [0, 1]
        size = sizeModCV;
    }
    else
    {
        size = sizeParam != nullptr ? sizeParam->load() : 0.5f;
    }
    
    float damp = 0.0f;
    if (isParamInputConnected("damp")) // Damp Mod bus connected
    {
        // Map CV [0,1] to damp [0, 1]
        damp = dampModCV;
    }
    else
    {
        damp = dampParam != nullptr ? dampParam->load() : 0.3f;
    }
    
    float mix = 0.0f;
    if (isParamInputConnected("mix")) // Mix Mod bus connected
    {
        // Map CV [0,1] to mix [0, 1]
        mix = mixModCV;
    }
    else
    {
        mix = mixParam != nullptr ? mixParam->load() : 0.8f;
    }
    
    // Clamp parameters to valid ranges
    size = juce::jlimit(0.0f, 1.0f, size);
    damp = juce::jlimit(0.0f, 1.0f, damp);
    mix = juce::jlimit(0.0f, 1.0f, mix);
    
    juce::dsp::Reverb::Parameters par;
    par.roomSize = size;
    par.damping  = damp;
    par.wetLevel = mix;
    par.dryLevel = 1.0f - par.wetLevel;
    reverb.setParameters (par);
    
    // Debug: Print parameter values occasionally
    static int debugCounter = 0;
    if (++debugCounter > 44100) // Print every second at 44.1kHz
    {
        debugCounter = 0;
        juce::Logger::writeToLog("Reverb - Size: " + juce::String(size) + ", Damp: " + juce::String(damp) + ", Mix: " + juce::String(mix));
    }
    // Now, process the output buffer, which we have just filled with the input signal.
    juce::dsp::AudioBlock<float> block (outBus);
    juce::dsp::ProcessContextReplacing<float> ctx (block);
    reverb.process (ctx);
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, outBus.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getSample(1, outBus.getNumSamples() - 1));
    }

    // Store live modulated values for UI display
    setLiveParamValue("size_live", size);
    setLiveParamValue("damp_live", damp);
    setLiveParamValue("mix_live", mix);
}

// Parameter bus contract implementation
bool ReverbModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "size") { outChannelIndexInBus = 2; return true; }
    if (paramId == "damp") { outChannelIndexInBus = 3; return true; }
    if (paramId == "mix")  { outChannelIndexInBus = 4; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\ReverbModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class ReverbModuleProcessor : public ModuleProcessor
{
public:
    ReverbModuleProcessor();
    ~ReverbModuleProcessor() override = default;

    const juce::String getName() const override { return "reverb"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        
        // Get live modulated values for display
        bool isSizeModulated = isParamModulated("size");
        bool isDampModulated = isParamModulated("damp");
        bool isMixModulated = isParamModulated("mix");
        
        // Use correct mod param IDs (same as parameter IDs)
        float size = isSizeModulated ? getLiveParamValueFor("size", "size_live", sizeParam->load()) : (sizeParam != nullptr ? sizeParam->load() : 0.5f);
        float damp = isDampModulated ? getLiveParamValueFor("damp", "damp_live", dampParam->load()) : (dampParam != nullptr ? dampParam->load() : 0.3f);
        float mix = isMixModulated ? getLiveParamValueFor("mix", "mix_live", mixParam->load()) : (mixParam != nullptr ? mixParam->load() : 0.3f);
        ImGui::PushItemWidth (itemWidth);

        // Size
        if (isSizeModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Size", &size, 0.0f, 1.0f)) if (!isSizeModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("size"))) *p = size;
        if (!isSizeModulated) adjustParamOnWheel (ap.getParameter ("size"), "size", size);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isSizeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        // Damp
        if (isDampModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Damp", &damp, 0.0f, 1.0f)) if (!isDampModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("damp"))) *p = damp;
        if (!isDampModulated) adjustParamOnWheel (ap.getParameter ("damp"), "damp", damp);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isDampModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        // Mix
        if (isMixModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("Mix", &mix, 0.0f, 1.0f)) if (!isMixModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("mix")))  *p = mix;
        if (!isMixModulated) adjustParamOnWheel (ap.getParameter ("mix"), "mix", mix);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isMixModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);
        
        int busIdx, chanInBus;
        if (getParamRouting("size", busIdx, chanInBus))
            helpers.drawAudioInputPin("Size Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("damp", busIdx, chanInBus))
            helpers.drawAudioInputPin("Damp Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("mix", busIdx, chanInBus))
            helpers.drawAudioInputPin("Mix Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
            
        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Size Mod";
            case 3: return "Damp Mod";
            case 4: return "Mix Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Reverb reverb;
    std::atomic<float>* sizeParam { nullptr };
    std::atomic<float>* dampParam { nullptr };
    std::atomic<float>* mixParam { nullptr };
};




================================================================================
FILE: juce\Source\audio\modules\SampleLoaderModuleProcessor.cpp
================================================================================


#include "SampleLoaderModuleProcessor.h"
#include <juce_audio_formats/juce_audio_formats.h>
#include <juce_gui_basics/juce_gui_basics.h>
#include "../../utils/RtLogger.h"

#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#endif

SampleLoaderModuleProcessor::SampleLoaderModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withInput("Playback Mods", juce::AudioChannelSet::discreteChannels(2), true)  // Bus 0: Pitch, Speed (flat ch 0-1)
        .withInput("Control Mods", juce::AudioChannelSet::discreteChannels(2), true)   // Bus 1: Gate, Trigger (flat ch 2-3)
        .withInput("Range Mods", juce::AudioChannelSet::discreteChannels(2), true)     // Bus 2: Range Start, Range End (flat ch 4-5)
        .withInput("Randomize", juce::AudioChannelSet::discreteChannels(1), true)      // Bus 3: Randomize (flat ch 6)
        .withOutput("Audio Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "SampleLoaderParameters", createParameterLayout())
{
    // Parameter references will be obtained when needed
    // Initialize output value tracking for cable inspector (stereo)
    lastOutputValues.clear();
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    
    // Initialize parameter pointers
    rangeStartParam = apvts.getRawParameterValue("rangeStart");
    rangeEndParam = apvts.getRawParameterValue("rangeEnd");
    rangeStartModParam = apvts.getRawParameterValue("rangeStart_mod");
    rangeEndModParam = apvts.getRawParameterValue("rangeEnd_mod");
}



juce::AudioProcessorValueTreeState::ParameterLayout SampleLoaderModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> parameters;
    
    // --- Basic Playback Parameters ---
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "speed", "Speed", 0.25f, 4.0f, 1.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "pitch", "Pitch (semitones)", -24.0f, 24.0f, 0.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gate", "Gate", 0.0f, 1.0f, 0.8f));
    parameters.push_back(std::make_unique<juce::AudioParameterChoice>(
        "engine", "Engine", juce::StringArray { "RubberBand", "Naive" }, 1));
    parameters.push_back(std::make_unique<juce::AudioParameterBool>(
        "rbWindowShort", "RB Window Short", true));
    parameters.push_back(std::make_unique<juce::AudioParameterBool>(
        "rbPhaseInd", "RB Phase Independent", true));
    parameters.push_back(std::make_unique<juce::AudioParameterBool>(
         "loop", "Loop", false));
    
    // (Removed legacy SoundTouch tuning parameters)

    // --- New Modulation Inputs (absolute control) ---
    // These live in APVTS and are fed by modulation cables; they override UI when connected.
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "pitch_mod", "Pitch Mod", -24.0f, 24.0f, 0.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "speed_mod", "Speed Mod", 0.25f, 4.0f, 1.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gate_mod", "Gate Mod", 0.0f, 1.0f, 1.0f));
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "trigger_mod", "Trigger Mod", 0.0f, 1.0f, 0.0f));
    
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rangeStart_mod", "Range Start Mod", 0.0f, 1.0f, 0.0f));

    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rangeEnd_mod", "Range End Mod", 0.0f, 1.0f, 1.0f));
    
    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rangeStart", "Range Start", 
        juce::NormalisableRange<float>(0.0f, 1.0f), 0.0f));

    parameters.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rangeEnd", "Range End", 
        juce::NormalisableRange<float>(0.0f, 1.0f), 1.0f));
    
    return { parameters.begin(), parameters.end() };
}

void SampleLoaderModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
    juce::Logger::writeToLog("[Sample Loader] prepareToPlay sr=" + juce::String(sampleRate) + ", block=" + juce::String(samplesPerBlock));
    
    // DEBUG: Check bus enablement status BEFORE forcing
    juce::String busStatusBefore = "[Sample Loader] Bus Status BEFORE: ";
    for (int i = 0; i < getBusCount(true); ++i)
    {
        auto* bus = getBus(true, i);
        if (bus)
            busStatusBefore += "In" + juce::String(i) + "=" + (bus->isEnabled() ? "ON" : "OFF") + "(" + juce::String(bus->getNumberOfChannels()) + "ch) ";
    }
    juce::Logger::writeToLog(busStatusBefore);
    
    // FORCE ENABLE ALL INPUT BUSES (AudioProcessorGraph might disable them)
    for (int i = 0; i < getBusCount(true); ++i)
    {
        if (auto* bus = getBus(true, i))
        {
            if (!bus->isEnabled())
            {
                enableAllBuses(); // Try to enable all
                juce::Logger::writeToLog("[Sample Loader] Forced all buses ON!");
                break;
            }
        }
    }
    
    // DEBUG: Check bus enablement status AFTER forcing
    juce::String busStatusAfter = "[Sample Loader] Bus Status AFTER: ";
    for (int i = 0; i < getBusCount(true); ++i)
    {
        auto* bus = getBus(true, i);
        if (bus)
            busStatusAfter += "In" + juce::String(i) + "=" + (bus->isEnabled() ? "ON" : "OFF") + "(" + juce::String(bus->getNumberOfChannels()) + "ch) ";
    }
    juce::Logger::writeToLog(busStatusAfter);
    
    // Auto-load sample from saved state if available
    if (currentSample == nullptr)
    {
        const auto savedPath = apvts.state.getProperty ("samplePath").toString();
        if (savedPath.isNotEmpty())
        {
            currentSamplePath = savedPath;
            loadSample (juce::File (currentSamplePath));
        }
    }
    // Create sample processor if we have a sample loaded
    if (currentSample != nullptr)
    {
        createSampleProcessor();
    }
}

void SampleLoaderModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages)
{
    // Get OUTPUT bus, but do NOT clear here.
    // Clearing at the start can zero input buses when buffers are aliased in AudioProcessorGraph.
    auto outBus = getBusBuffer(buffer, false, 0);
    
    // --- Setup and Safety Checks ---
    if (auto* pending = newSampleProcessor.exchange(nullptr))
    {
        const juce::ScopedLock lock(processorSwapLock);
        processorToDelete = std::move(sampleProcessor);
        sampleProcessor.reset(pending);
    }
    SampleVoiceProcessor* currentProcessor = nullptr;
    {
        const juce::ScopedLock lock(processorSwapLock);
        currentProcessor = sampleProcessor.get();
    }
    if (currentProcessor == nullptr || currentSample == nullptr)
    {
        outBus.clear();
        return;
    }
    
    // DEBUG: Check MAIN buffer first (before splitting into buses)
    static int rawDebugCounter = 0;
    if (rawDebugCounter == 0 || rawDebugCounter % 240 == 0)
    {
        juce::String mainMsg = "[Sample MAIN Buffer #" + juce::String(rawDebugCounter) + "] ";
        mainMsg += "totalCh=" + juce::String(buffer.getNumChannels()) + " samples=" + juce::String(buffer.getNumSamples()) + " | ";
        
        // Check if buffer channels have valid pointers
        bool hasData = false;
        for (int ch = 0; ch < juce::jmin(7, buffer.getNumChannels()); ++ch)
        {
            float val = buffer.getSample(ch, 0);
            mainMsg += "ch" + juce::String(ch) + "=" + juce::String(val, 3) + " ";
            if (std::abs(val) > 0.001f) hasData = true;
        }
        
        mainMsg += "| hasData=" + juce::String(hasData ? "YES" : "NO");
        
        // Check channel pointer validity
        mainMsg += " | ptrs: ";
        for (int ch = 0; ch < juce::jmin(3, buffer.getNumChannels()); ++ch)
        {
            const float* ptr = buffer.getReadPointer(ch);
            mainMsg += "ch" + juce::String(ch) + "=" + (ptr ? "OK" : "NULL") + " ";
        }
        juce::Logger::writeToLog(mainMsg);
    }
    
    // Multi-bus input architecture (like TTS Performer)
    auto playbackBus = getBusBuffer(buffer, true, 0);  // Bus 0: Pitch, Speed (flat ch 0-1)
    auto controlBus = getBusBuffer(buffer, true, 1);   // Bus 1: Gate, Trigger (flat ch 2-3)
    auto rangeBus = getBusBuffer(buffer, true, 2);     // Bus 2: Range Start, Range End (flat ch 4-5)
    auto randomizeBus = getBusBuffer(buffer, true, 3); // Bus 3: Randomize (flat ch 6)
    
    // DEBUG: Check buses after splitting
    if (rawDebugCounter == 0 || rawDebugCounter % 240 == 0)
    {
        juce::String busMsg = "[Sample Buses #" + juce::String(rawDebugCounter) + "] ";
        busMsg += "playback=" + juce::String(playbackBus.getNumChannels()) + " ";
        busMsg += "control=" + juce::String(controlBus.getNumChannels()) + " ";
        busMsg += "range=" + juce::String(rangeBus.getNumChannels()) + " ";
        busMsg += "randomize=" + juce::String(randomizeBus.getNumChannels()) + " | ";
        if (playbackBus.getNumChannels() > 0) busMsg += "pitch=" + juce::String(playbackBus.getSample(0, 0), 3) + " ";
        if (playbackBus.getNumChannels() > 1) busMsg += "speed=" + juce::String(playbackBus.getSample(1, 0), 3) + " ";
        if (controlBus.getNumChannels() > 0) busMsg += "gate=" + juce::String(controlBus.getSample(0, 0), 3) + " ";
        juce::Logger::writeToLog(busMsg);
    }
    rawDebugCounter++;
    
    const int numSamples = buffer.getNumSamples();

    // --- Compute block-rate CV-mapped values for telemetry (even when not playing) ---
    const float baseSpeed = apvts.getRawParameterValue("speed")->load();
    float speedNow = baseSpeed;
    if (isParamInputConnected("speed_mod") && playbackBus.getNumChannels() > 1)
    {
        const float cv = juce::jlimit(0.0f, 1.0f, playbackBus.getReadPointer(1)[0]);
        const float octaveRange = 4.0f;
        const float octaveOffset = (cv - 0.5f) * octaveRange;
        speedNow = juce::jlimit(0.25f, 4.0f, baseSpeed * std::pow(2.0f, octaveOffset));
    }

    const float basePitch = apvts.getRawParameterValue("pitch")->load();
    float pitchNow = basePitch;
    if (isParamInputConnected("pitch_mod") && playbackBus.getNumChannels() > 0)
    {
        const float rawCV = playbackBus.getReadPointer(0)[0];
        const float bipolarCV = (rawCV >= 0.0f && rawCV <= 1.0f) ? (rawCV * 2.0f - 1.0f) : rawCV;
        const float pitchModulationRange = 24.0f; 
        pitchNow = juce::jlimit(-24.0f, 24.0f, basePitch + (bipolarCV * pitchModulationRange));
    }

    float startNorm = rangeStartParam->load();
    if (isParamInputConnected("rangeStart_mod") && rangeBus.getNumChannels() > 0)
        startNorm = juce::jlimit(0.0f, 1.0f, rangeBus.getReadPointer(0)[0]);

    float endNorm = rangeEndParam->load();
    if (isParamInputConnected("rangeEnd_mod") && rangeBus.getNumChannels() > 1)
        endNorm = juce::jlimit(0.0f, 1.0f, rangeBus.getReadPointer(1)[0]);

    // Ensure valid range window
    {
        const float minGap = 0.001f;
        if (startNorm >= endNorm)
        {
            const float midpoint = (startNorm + endNorm) * 0.5f;
            startNorm = juce::jlimit(0.0f, 1.0f - minGap, midpoint - minGap * 0.5f);
            endNorm   = juce::jlimit(minGap, 1.0f, startNorm + minGap);
        }
    }

    // Update live telemetry regardless of play state (matches TTS pattern)
    setLiveParamValue("speed_live", speedNow);
    setLiveParamValue("pitch_live", pitchNow);
    setLiveParamValue("rangeStart_live", startNorm);
    setLiveParamValue("rangeEnd_live", endNorm);
    // Gate live (use first sample if CV present, otherwise knob)
    if (isParamInputConnected("gate_mod") && controlBus.getNumChannels() > 0)
    {
        const float g = juce::jlimit(0.0f, 1.0f, controlBus.getReadPointer(0)[0]);
        setLiveParamValue("gate_live", g);
    }
    else
    {
        setLiveParamValue("gate_live", apvts.getRawParameterValue("gate")->load());
    }

    // --- 1. TRIGGER DETECTION ---
    const bool looping = apvts.getRawParameterValue("loop")->load() > 0.5f;
    
    // If loop is enabled and not playing, start playing
    if (looping && !currentProcessor->isPlaying)
    {
        currentProcessor->reset();
    }
    
    // Check for a rising edge on the trigger input to start playback.
    if (isParamInputConnected("trigger_mod") && controlBus.getNumChannels() > 1)
    {
        const float* trigSignal = controlBus.getReadPointer(1);  // Control Bus Channel 1 = Trigger
        for (int i = 0; i < numSamples; ++i)
        {
            const bool trigHigh = trigSignal[i] > 0.5f;
            if (trigHigh && !lastTriggerHigh)
            {
                reset(); // This now sets the internal voice's isPlaying to true
                break;
            }
            lastTriggerHigh = trigHigh;
        }
        if (numSamples > 0) lastTriggerHigh = (controlBus.getReadPointer(1)[numSamples - 1] > 0.5f);
    }

    // --- Randomize Trigger ---
    if (isParamInputConnected("randomize_mod") && randomizeBus.getNumChannels() > 0)
    {
        const float* randTrigSignal = randomizeBus.getReadPointer(0);  // Randomize Bus Channel 0
        for (int i = 0; i < numSamples; ++i)
        {
            const bool trigHigh = randTrigSignal[i] > 0.5f;
            if (trigHigh && !lastRandomizeTriggerHigh)
            {
                randomizeSample(); // Call the existing randomize function
                break; // Only randomize once per block
            }
            lastRandomizeTriggerHigh = trigHigh;
        }
        if (numSamples > 0) lastRandomizeTriggerHigh = (randomizeBus.getReadPointer(0)[numSamples - 1] > 0.5f);
    }

    // --- 2. CONDITIONAL AUDIO RENDERING ---
    // Only generate audio if the internal voice is in a playing state.
    if (currentProcessor->isPlaying)
    {
        // DEBUG: Log CV values from buses (like TTS)
        static int debugFrameCounter = 0;
        if (debugFrameCounter == 0 || debugFrameCounter % 240 == 0)
        {
            juce::String dbgMsg = "[Sample CV Debug #" + juce::String(debugFrameCounter) + "] ";
            if (playbackBus.getNumChannels() > 0) dbgMsg += "pitch_cv=" + juce::String(playbackBus.getReadPointer(0)[0], 3) + " ";
            if (playbackBus.getNumChannels() > 1) dbgMsg += "speed_cv=" + juce::String(playbackBus.getReadPointer(1)[0], 3) + " ";
            if (controlBus.getNumChannels() > 0) dbgMsg += "gate_cv=" + juce::String(controlBus.getReadPointer(0)[0], 3) + " ";
            juce::Logger::writeToLog(dbgMsg);
        }
        debugFrameCounter++;
        
        currentProcessor->setZoneTimeStretchRatio(speedNow);
        currentProcessor->setBasePitchSemitones(pitchNow);
        const int sourceLength = currentSample->stereo.getNumSamples();
        currentProcessor->setPlaybackRange(startNorm * sourceLength, endNorm * sourceLength);

        // Update APVTS parameters for UI feedback (especially spectrogram handles)
        *rangeStartParam = startNorm;
        apvts.getParameter("rangeStart")->sendValueChangedMessageToListeners(startNorm);
        *rangeEndParam = endNorm;
        apvts.getParameter("rangeEnd")->sendValueChangedMessageToListeners(endNorm);

        const int engineIdx = (int) apvts.getRawParameterValue("engine")->load();
        currentProcessor->setEngine(engineIdx == 0 ? SampleVoiceProcessor::Engine::RubberBand : SampleVoiceProcessor::Engine::Naive);
        currentProcessor->setRubberBandOptions(apvts.getRawParameterValue("rbWindowShort")->load() > 0.5f, apvts.getRawParameterValue("rbPhaseInd")->load() > 0.5f);
        currentProcessor->setLooping(apvts.getRawParameterValue("loop")->load() > 0.5f);

        // Generate the sample's audio into the OUTPUT buffer. This might set isPlaying to false if the sample ends.
        try {
            // Create a temporary buffer view for just the output bus
            juce::AudioBuffer<float> outputBuffer(outBus.getArrayOfWritePointers(), 
                                                   outBus.getNumChannels(), 
                                                   outBus.getNumSamples());
            currentProcessor->renderBlock(outputBuffer, midiMessages);
        } catch (...) {
            RtLogger::postf("[SampleLoader][FATAL] renderBlock exception");
            outBus.clear();
        }

        // --- 3. GATE (VCA) APPLICATION ---
        // If a gate is connected, use it to shape the volume of the audio we just generated.
        float lastGateValue = 1.0f;
        if (isParamInputConnected("gate_mod") && controlBus.getNumChannels() > 0)
        {
            const float* gateCV = controlBus.getReadPointer(0);  // Control Bus Channel 0 = Gate
            for (int ch = 0; ch < outBus.getNumChannels(); ++ch)
            {
                float* channelData = outBus.getWritePointer(ch);
                for (int i = 0; i < numSamples; ++i)
                {
                    const float gateValue = juce::jlimit(0.0f, 1.0f, gateCV[i]);
                    channelData[i] *= gateValue;
                    
                    // Update telemetry (throttled every 64 samples, only once per channel)
                    if (ch == 0 && (i & 0x3F) == 0)
                    {
                        setLiveParamValue("gate_live", gateValue);
                        lastGateValue = gateValue;
                    }
                }
            }
        }
        else
        {
            // No gate modulation - use static gate knob value
            lastGateValue = apvts.getRawParameterValue("gate")->load();
            setLiveParamValue("gate_live", lastGateValue);
        }
        
        // Apply main gate knob last
        outBus.applyGain(apvts.getRawParameterValue("gate")->load());
    }
    else
    {
        // Not playing: explicitly clear output now (safe after input analysis)
        outBus.clear();
    }
    
    // Update output values for cable inspector using block peak
    if (lastOutputValues.size() >= 2)
    {
        auto peakAbs = [&](int ch){ if (ch >= outBus.getNumChannels()) return 0.0f; const float* p = outBus.getReadPointer(ch); float m=0.0f; for (int i=0;i<outBus.getNumSamples();++i) m = juce::jmax(m, std::abs(p[i])); return m; };
        if (lastOutputValues[0]) lastOutputValues[0]->store(peakAbs(0));
        if (lastOutputValues[1]) lastOutputValues[1]->store(peakAbs(1));
    }
}

void SampleLoaderModuleProcessor::reset()
{
    if (sampleProcessor != nullptr)
    {
        sampleProcessor->reset();
    }
    
    if (currentSample != nullptr && rangeStartParam != nullptr)
    {
        readPosition = rangeStartParam->load() * currentSample->stereo.getNumSamples();
    }
    else
    {
        readPosition = 0.0;
    }
}

void SampleLoaderModuleProcessor::loadSample(const juce::File& file)
{
    if (!file.existsAsFile())
    {
        DBG("[Sample Loader] File does not exist: " + file.getFullPathName());
        return;
    }

    // 1) Load the original shared sample from the bank
    SampleBank sampleBank;
    std::shared_ptr<SampleBank::Sample> original;
    try {
        original = sampleBank.getOrLoad(file);
    } catch (...) {
        DBG("[Sample Loader][FATAL] Exception in SampleBank::getOrLoad");
        return;
    }
    if (original == nullptr || original->stereo.getNumSamples() <= 0)
    {
        DBG("[Sample Loader] Failed to load sample or empty: " + file.getFullPathName());
        return;
    }

    currentSampleName = file.getFileName();
    currentSamplePath = file.getFullPathName();
    apvts.state.setProperty ("samplePath", currentSamplePath, nullptr);

    // --- THIS IS THE FIX ---
    // Store the sample's metadata in our new member variables.
    sampleDurationSeconds = (double)original->stereo.getNumSamples() / original->sampleRate;
    sampleSampleRate = (int)original->sampleRate;
    // --- END OF FIX ---

    // 2) Create a private STEREO copy (preserve stereo or duplicate mono)
    auto privateCopy = std::make_shared<SampleBank::Sample>();
    privateCopy->sampleRate = original->sampleRate;
    const int numSamples = original->stereo.getNumSamples();
    privateCopy->stereo.setSize(2, numSamples); // Always stereo output

    if (original->stereo.getNumChannels() <= 1)
    {
        // Mono source: duplicate to both L and R channels
        privateCopy->stereo.copyFrom(0, 0, original->stereo, 0, 0, numSamples); // L = Mono
        privateCopy->stereo.copyFrom(1, 0, original->stereo, 0, 0, numSamples); // R = Mono
        DBG("[Sample Loader] Loaded mono sample and duplicated to stereo: " << file.getFileName());
    }
    else
    {
        // Stereo (or multi-channel) source: copy L and R channels
        privateCopy->stereo.copyFrom(0, 0, original->stereo, 0, 0, numSamples); // L channel
        privateCopy->stereo.copyFrom(1, 0, original->stereo, 1, 0, numSamples); // R channel
        DBG("[Sample Loader] Loaded stereo sample: " << file.getFileName());
    }

    // 3) Atomically assign our private copy for this module
    currentSample = privateCopy;
    generateSpectrogram();

    // 4) If the module is prepared, stage a new processor
    if (getSampleRate() > 0.0 && getBlockSize() > 0)
    {
        createSampleProcessor();
    }
    else
    {
        DBG("[Sample Loader][Defer] Module not prepared yet; will create processor in prepareToPlay");
    }
}
void SampleLoaderModuleProcessor::getStateInformation (juce::MemoryBlock& destData)
{
    juce::ValueTree vt ("SampleLoader");
    vt.setProperty ("samplePath", currentSamplePath, nullptr);
    vt.setProperty ("speed", apvts.getRawParameterValue("speed")->load(), nullptr);
    vt.setProperty ("pitch", apvts.getRawParameterValue("pitch")->load(), nullptr);
    vt.setProperty ("gate", apvts.getRawParameterValue("gate")->load(), nullptr);
    vt.setProperty ("engine", (int) apvts.getRawParameterValue("engine")->load(), nullptr);
    vt.setProperty ("rbWindowShort", apvts.getRawParameterValue("rbWindowShort")->load() > 0.5f, nullptr);
    vt.setProperty ("rbPhaseInd", apvts.getRawParameterValue("rbPhaseInd")->load() > 0.5f, nullptr);
    vt.setProperty ("loop", apvts.getRawParameterValue("loop")->load() > 0.5f, nullptr);
    if (auto xml = vt.createXml())
        copyXmlToBinary (*xml, destData);
}

void SampleLoaderModuleProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    std::unique_ptr<juce::XmlElement> xml (getXmlFromBinary (data, sizeInBytes));
    if (! xml) return;
    juce::ValueTree vt = juce::ValueTree::fromXml (*xml);
    if (! vt.isValid()) return;
    currentSamplePath = vt.getProperty ("samplePath").toString();
    if (currentSamplePath.isNotEmpty())
        loadSample (juce::File (currentSamplePath));
    if (auto* p = apvts.getParameter ("speed"))
        p->setValueNotifyingHost (apvts.getParameterRange("speed").convertTo0to1 ((float) vt.getProperty ("speed", 1.0f)));
    if (auto* p = apvts.getParameter ("pitch"))
        p->setValueNotifyingHost (apvts.getParameterRange("pitch").convertTo0to1 ((float) vt.getProperty ("pitch", 0.0f)));
    if (auto* p = apvts.getParameter ("gate"))
        p->setValueNotifyingHost (apvts.getParameterRange("gate").convertTo0to1 ((float) vt.getProperty ("gate", 0.8f)));
    if (auto* p = apvts.getParameter ("engine"))
        p->setValueNotifyingHost ((float) (int) vt.getProperty ("engine", 0));
    if (auto* p = apvts.getParameter ("rbWindowShort"))
        p->setValueNotifyingHost ((bool) vt.getProperty ("rbWindowShort", true) ? 1.0f : 0.0f);
    if (auto* p = apvts.getParameter ("rbPhaseInd"))
        p->setValueNotifyingHost ((bool) vt.getProperty ("rbPhaseInd", true) ? 1.0f : 0.0f);
    if (auto* p = apvts.getParameter ("loop"))
        p->setValueNotifyingHost ((bool) vt.getProperty ("loop", false) ? 1.0f : 0.0f);
}

void SampleLoaderModuleProcessor::loadSample(const juce::String& filePath)
{
    loadSample(juce::File(filePath));
}

juce::String SampleLoaderModuleProcessor::getCurrentSampleName() const
{
    return currentSampleName;
}

bool SampleLoaderModuleProcessor::hasSampleLoaded() const
{
    return currentSample != nullptr;
}

// Legacy SoundTouch setters removed

void SampleLoaderModuleProcessor::setDebugOutput(bool enabled)
{
    debugOutput = enabled;
}

void SampleLoaderModuleProcessor::logCurrentSettings() const
{
    if (debugOutput)
    {
        DBG("[Sample Loader] Current Settings:");
        DBG("  Sample: " + currentSampleName);
        DBG("  Speed: " + juce::String(apvts.getRawParameterValue("speed")->load()));
        DBG("  Pitch: " + juce::String(apvts.getRawParameterValue("pitch")->load()));
    }
}

void SampleLoaderModuleProcessor::updateSoundTouchSettings() {}

void SampleLoaderModuleProcessor::randomizeSample()
{
    if (currentSamplePath.isEmpty())
        return;
        
    juce::File currentFile(currentSamplePath);
    juce::File parentDir = currentFile.getParentDirectory();
    
    if (!parentDir.exists() || !parentDir.isDirectory())
        return;
        
    // Get all audio files in the same directory
    juce::Array<juce::File> audioFiles;
    parentDir.findChildFiles(audioFiles, juce::File::findFiles, true, "*.wav;*.mp3;*.flac;*.aiff;*.ogg");
    
    if (audioFiles.size() <= 1)
        return;
        
    // Remove current file from the list
    for (int i = audioFiles.size() - 1; i >= 0; --i)
    {
        if (audioFiles[i].getFullPathName() == currentSamplePath)
        {
            audioFiles.remove(i);
            break;
        }
    }
    
    if (audioFiles.isEmpty())
        return;
        
    // Pick a random file
    juce::Random rng(juce::Time::getMillisecondCounterHiRes());
    juce::File randomFile = audioFiles[rng.nextInt(audioFiles.size())];
    
    DBG("[Sample Loader] Randomizing to: " + randomFile.getFullPathName());
    loadSample(randomFile);
}

void SampleLoaderModuleProcessor::createSampleProcessor()
{
    if (currentSample == nullptr)
    {
        return;
    }
    // Guard against double-creation and race with audio thread: build new then swap under lock
    auto newProcessor = std::make_unique<SampleVoiceProcessor>(currentSample);
    
    // Set up the sample processor
    const double sr = getSampleRate() > 0.0 ? getSampleRate() : 48000.0;
    const int bs = getBlockSize() > 0 ? getBlockSize() : 512;
    newProcessor->prepareToPlay(sr, bs);
    
    // --- Set initial playback range ---
    const float startNorm = rangeStartParam->load();
    const float endNorm = rangeEndParam->load();
    const double startSample = startNorm * currentSample->stereo.getNumSamples();
    const double endSample = endNorm * currentSample->stereo.getNumSamples();
    newProcessor->setPlaybackRange(startSample, endSample);
    newProcessor->resetPosition(); // Reset position without starting playback - wait for trigger
    
    // Set parameters from our APVTS
    newProcessor->setZoneTimeStretchRatio(apvts.getRawParameterValue("speed")->load());
    newProcessor->setBasePitchSemitones(apvts.getRawParameterValue("pitch")->load());
    newSampleProcessor.store(newProcessor.release());
    DBG("[Sample Loader] Staged new sample processor for: " << currentSampleName);
    
    DBG("[Sample Loader] Created sample processor for: " + currentSampleName);
}

void SampleLoaderModuleProcessor::generateSpectrogram()
{
    const juce::ScopedLock lock(imageLock);
    spectrogramImage = juce::Image(); // Clear previous image

    if (currentSample == nullptr || currentSample->stereo.getNumSamples() == 0)
        return;

    const int fftOrder = 10;
    const int fftSize = 1 << fftOrder;
    const int hopSize = fftSize / 4;
    const int numHops = (currentSample->stereo.getNumSamples() - fftSize) / hopSize;

    if (numHops <= 0) return;

    // Create a mono version for analysis if necessary
    juce::AudioBuffer<float> monoBuffer;
    if (currentSample->stereo.getNumChannels() > 1)
    {
        monoBuffer.setSize(1, currentSample->stereo.getNumSamples());
        monoBuffer.copyFrom(0, 0, currentSample->stereo, 0, 0, currentSample->stereo.getNumSamples());
        monoBuffer.addFrom(0, 0, currentSample->stereo, 1, 0, currentSample->stereo.getNumSamples(), 0.5f);
        monoBuffer.applyGain(0.5f);
    }
    const float* audioData = (currentSample->stereo.getNumChannels() > 1) ? monoBuffer.getReadPointer(0) : currentSample->stereo.getReadPointer(0);

    // Use RGB so JUCE's OpenGLTexture uploads with expected format
    spectrogramImage = juce::Image(juce::Image::RGB, numHops, fftSize / 2, true);
    juce::dsp::FFT fft(fftOrder);
    juce::dsp::WindowingFunction<float> window(fftSize, juce::dsp::WindowingFunction<float>::hann);
    std::vector<float> fftData(fftSize * 2);

    for (int i = 0; i < numHops; ++i)
    {
        std::fill(fftData.begin(), fftData.end(), 0.0f);
        memcpy(fftData.data(), audioData + (i * hopSize), fftSize * sizeof(float));

        window.multiplyWithWindowingTable(fftData.data(), fftSize);
        fft.performFrequencyOnlyForwardTransform(fftData.data());

        for (int j = 0; j < fftSize / 2; ++j)
        {
            const float db = juce::Decibels::gainToDecibels(juce::jmax(fftData[j], 1.0e-9f), -100.0f);
            float level = juce::jmap(db, -100.0f, 0.0f, 0.0f, 1.0f);
            level = juce::jlimit(0.0f, 1.0f, level);
            spectrogramImage.setPixelAt(i, (fftSize / 2) - 1 - j, juce::Colour::fromFloatRGBA(level, level, level, 1.0f));
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void SampleLoaderModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    // --- THIS IS THE DEFINITIVE FIX ---
    // 1. Draw all the parameter sliders and buttons FIRST.
    ImGui::PushItemWidth(itemWidth);

    if (ImGui::Button("Load Sample", ImVec2(itemWidth * 0.48f, 0)))
    {
        juce::File startDir;
        {
            auto appFile = juce::File::getSpecialLocation(juce::File::currentApplicationFile);
            auto dir = appFile.getParentDirectory();
            for (int i = 0; i < 8 && dir.exists(); ++i)
            {
                auto candidate = dir.getSiblingFile("audio").getChildFile("samples");
                if (candidate.exists() && candidate.isDirectory()) { startDir = candidate; break; }
                dir = dir.getParentDirectory();
            }
        }
        if (! startDir.exists()) startDir = juce::File();
        fileChooser = std::make_unique<juce::FileChooser>("Select Audio Sample", startDir, "*.wav;*.mp3;*.flac;*.aiff;*.ogg");
        auto chooserFlags = juce::FileBrowserComponent::openMode | juce::FileBrowserComponent::canSelectFiles;
        fileChooser->launchAsync(chooserFlags, [this](const juce::FileChooser& fc)
        {
            try {
                auto file = fc.getResult();
                if (file != juce::File{})
                {
                    juce::Logger::writeToLog("[Sample Loader] User selected file: " + file.getFullPathName());
                    loadSample(file);
                }
            } catch (...) {
                juce::Logger::writeToLog("[Sample Loader][FATAL] Exception during file chooser callback");
            }
        });
    }
    ImGui::SameLine();
    if (ImGui::Button("Random", ImVec2(itemWidth * 0.48f, 0))) { randomizeSample(); }

    // Range selection is now handled by the interactive spectrogram in the UI component

    ImGui::Spacing();
    // Main parameters in compact layout
    bool speedModulated = isParamModulated("speed_mod");
    if (speedModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    float speed = speedModulated ? getLiveParamValueFor("speed_mod", "speed_live", apvts.getRawParameterValue("speed")->load()) 
                                 : apvts.getRawParameterValue("speed")->load();
    if (ImGui::SliderFloat("Speed", &speed, 0.25f, 4.0f, "%.2fx"))
    {
        apvts.getParameter("speed")->setValueNotifyingHost(apvts.getParameterRange("speed").convertTo0to1(speed));
        onModificationEnded();
    }
    if (! speedModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("speed"), "speed", speed);
    if (speedModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }
    
    bool pitchModulated = isParamModulated("pitch_mod");
    if (pitchModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    float pitch = pitchModulated ? getLiveParamValueFor("pitch_mod", "pitch_live", apvts.getRawParameterValue("pitch")->load()) 
                                 : apvts.getRawParameterValue("pitch")->load();
    if (ImGui::SliderFloat("Pitch", &pitch, -24.0f, 24.0f, "%.1f st"))
    {
        apvts.getParameter("pitch")->setValueNotifyingHost(apvts.getParameterRange("pitch").convertTo0to1(pitch));
        onModificationEnded();
    }
    if (! pitchModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("pitch"), "pitch", pitch);
    if (pitchModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }
    
    // --- Gate slider (formerly volume) ---
    bool gateModulated = isParamModulated("gate_mod"); 
    if (gateModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    float gate = gateModulated ? getLiveParamValueFor("gate_mod", "gate_live", apvts.getRawParameterValue("gate")->load())
                               : apvts.getRawParameterValue("gate")->load();
    if (ImGui::SliderFloat("Gate", &gate, 0.0f, 1.0f, "%.2f"))
    {
        if (!gateModulated) {
            apvts.getParameter("gate")->setValueNotifyingHost(apvts.getParameterRange("gate").convertTo0to1(gate));
            onModificationEnded();
        }
    }
    if (!gateModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("gate"), "gate", gate);
    if (gateModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    // Range parameters with live modulation feedback
    bool rangeStartModulated = isParamModulated("rangeStart_mod");
    if (rangeStartModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    float rangeStart = rangeStartModulated ? getLiveParamValueFor("rangeStart_mod", "rangeStart_live", rangeStartParam->load()) 
                                          : rangeStartParam->load();
    float rangeEnd = rangeEndParam->load();
    if (ImGui::SliderFloat("Range Start", &rangeStart, 0.0f, 1.0f, "%.3f"))
    {
        // Ensure start doesn't exceed end (leave at least 0.001 gap)
        rangeStart = juce::jmin(rangeStart, rangeEnd - 0.001f);
        apvts.getParameter("rangeStart")->setValueNotifyingHost(apvts.getParameterRange("rangeStart").convertTo0to1(rangeStart));
        onModificationEnded();
    }
    if (! rangeStartModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("rangeStart"), "rangeStart", rangeStart);
    if (rangeStartModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }
    
    bool rangeEndModulated = isParamModulated("rangeEnd_mod");
    if (rangeEndModulated) { ImGui::BeginDisabled(); ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 1.0f, 0.0f, 0.3f)); }
    rangeEnd = rangeEndModulated ? getLiveParamValueFor("rangeEnd_mod", "rangeEnd_live", rangeEndParam->load()) 
                                 : rangeEndParam->load();
    rangeStart = rangeStartParam->load(); // Refresh rangeStart for validation
    if (ImGui::SliderFloat("Range End", &rangeEnd, 0.0f, 1.0f, "%.3f"))
    {
        // Ensure end doesn't go below start (leave at least 0.001 gap)
        rangeEnd = juce::jmax(rangeEnd, rangeStart + 0.001f);
        apvts.getParameter("rangeEnd")->setValueNotifyingHost(apvts.getParameterRange("rangeEnd").convertTo0to1(rangeEnd));
        onModificationEnded();
    }
    if (! rangeEndModulated)
        ModuleProcessor::adjustParamOnWheel(apvts.getParameter("rangeEnd"), "rangeEnd", rangeEnd);
    if (rangeEndModulated) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }
    
    bool loop = apvts.getRawParameterValue("loop")->load() > 0.5f;
    if (ImGui::Checkbox("Loop", &loop))
    {
        apvts.getParameter("loop")->setValueNotifyingHost(loop ? 1.0f : 0.0f);
        onModificationEnded();
    }
    
    int engineIdx = (int) apvts.getRawParameterValue("engine")->load();
    const char* items[] = { "RubberBand", "Naive" };
    if (ImGui::Combo("Engine", &engineIdx, items, 2))
    {
        apvts.getParameter("engine")->setValueNotifyingHost((float) engineIdx);
        if (sampleProcessor)
            sampleProcessor->setEngine(engineIdx == 0 ? SampleVoiceProcessor::Engine::RubberBand
                                                      : SampleVoiceProcessor::Engine::Naive);
        onModificationEnded();
    }
    
    if (engineIdx == 0)
    {
        bool winShort = apvts.getRawParameterValue("rbWindowShort")->load() > 0.5f;
        if (ImGui::Checkbox("RB Window Short", &winShort))
        {
            apvts.getParameter("rbWindowShort")->setValueNotifyingHost(winShort ? 1.0f : 0.0f);
            if (sampleProcessor) sampleProcessor->setRubberBandOptions(winShort, apvts.getRawParameterValue("rbPhaseInd")->load() > 0.5f);
            onModificationEnded();
        }
        bool phaseInd = apvts.getRawParameterValue("rbPhaseInd")->load() > 0.5f;
        if (ImGui::Checkbox("RB Phase Independent", &phaseInd))
        {
            apvts.getParameter("rbPhaseInd")->setValueNotifyingHost(phaseInd ? 1.0f : 0.0f);
            if (sampleProcessor) sampleProcessor->setRubberBandOptions(apvts.getRawParameterValue("rbWindowShort")->load() > 0.5f, phaseInd);
            onModificationEnded();
        }
    }
    
    ImGui::PopItemWidth();
    
    // 2. Now, draw the sample information and visual display AT THE END.
    if (hasSampleLoaded())
    {
        ImGui::Separator();
        ImGui::Text("Sample: %s", currentSampleName.toRawUTF8());
        ImGui::Text("Duration: %.2f s", sampleDurationSeconds);
        ImGui::Text("Rate: %d Hz", sampleSampleRate);

        // Draw a colored button as a visible drop zone for hot-swapping
        ImVec2 swapZoneSize = ImVec2(itemWidth, 100.0f);
        ImGui::PushStyleColor(ImGuiCol_Button, IM_COL32(0, 180, 180, 60));
        ImGui::Button("##dropzone_sample_swap", swapZoneSize);
        ImGui::PopStyleColor();
        
        // Draw text centered on the button
        const char* text = "Drop to Swap Sample";
        ImVec2 textSize = ImGui::CalcTextSize(text);
        ImVec2 textPos = ImGui::GetItemRectMin();
        textPos.x += (swapZoneSize.x - textSize.x) * 0.5f;
        textPos.y += (swapZoneSize.y - textSize.y) * 0.5f;
        ImGui::GetWindowDrawList()->AddText(textPos, IM_COL32(200, 200, 200, 255), text);

        // 3. Make this button the drop target for hot-swapping.
        if (ImGui::BeginDragDropTarget())
        {
            if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_SAMPLE_PATH"))
            {
                const char* path = (const char*)payload->Data;
                loadSample(juce::File(path));
                onModificationEnded();
            }
            ImGui::EndDragDropTarget();
        }
    }
    else
    {
        ImGui::Separator();
        // If NO sample is loaded, draw a dedicated, colored dropzone.
        ImVec2 dropZoneSize = ImVec2(itemWidth, 60.0f);
        
        // Use a cyan color to match the Sample browser theme
        ImGui::PushStyleColor(ImGuiCol_Button, IM_COL32(0, 180, 180, 100));
        ImGui::Button("##dropzone_sample", dropZoneSize);
        ImGui::PopStyleColor();
        
        // Draw text centered on top of the button
        const char* text = "Drop Sample Here";
        ImVec2 textSize = ImGui::CalcTextSize(text);
        ImVec2 textPos = ImGui::GetItemRectMin();
        textPos.x += (dropZoneSize.x - textSize.x) * 0.5f;
        textPos.y += (dropZoneSize.y - textSize.y) * 0.5f;
        ImGui::GetWindowDrawList()->AddText(textPos, IM_COL32_WHITE, text);

        // Make THIS BUTTON the drop target.
        if (ImGui::BeginDragDropTarget())
        {
            if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_SAMPLE_PATH"))
            {
                const char* path = (const char*)payload->Data;
                loadSample(juce::File(path));
                onModificationEnded();
            }
            ImGui::EndDragDropTarget();
        }
    }
    // --- END OF FIX ---
}

void SampleLoaderModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Modulation inputs
    helpers.drawAudioInputPin("Pitch Mod", 0);
    helpers.drawAudioInputPin("Speed Mod", 1);
    helpers.drawAudioInputPin("Gate Mod", 2);
    helpers.drawAudioInputPin("Trigger Mod", 3);
    helpers.drawAudioInputPin("Range Start Mod", 4);
    helpers.drawAudioInputPin("Range End Mod", 5);
    helpers.drawAudioInputPin("Randomize Trig", 6);
    // Audio outputs (stereo)
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif

// Parameter bus contract implementation (multi-bus architecture like TTS Performer)
bool SampleLoaderModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // Bus 0: Playback Mods (Pitch, Speed) - flat channels 0-1
    if (paramId == "pitch_mod") { outBusIndex = 0; outChannelIndexInBus = 0; return true; }
    if (paramId == "speed_mod") { outBusIndex = 0; outChannelIndexInBus = 1; return true; }
    
    // Bus 1: Control Mods (Gate, Trigger) - flat channels 2-3
    if (paramId == "gate_mod") { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    if (paramId == "trigger_mod") { outBusIndex = 1; outChannelIndexInBus = 1; return true; }
    
    // Bus 2: Range Mods (Range Start, Range End) - flat channels 4-5
    if (paramId == "rangeStart_mod") { outBusIndex = 2; outChannelIndexInBus = 0; return true; }
    if (paramId == "rangeEnd_mod") { outBusIndex = 2; outChannelIndexInBus = 1; return true; }
    
    // Bus 3: Randomize - flat channel 6
    if (paramId == "randomize_mod") { outBusIndex = 3; outChannelIndexInBus = 0; return true; }
    
    return false;
}

================================================================================
FILE: juce\Source\audio\modules\SampleLoaderModuleProcessor.h
================================================================================


#pragma once

#include "../graph/ModularSynthProcessor.h"
#include "../assets/SampleBank.h"
#include "../voices/SampleVoiceProcessor.h"
#include "../dsp/TimePitchProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <juce_gui_basics/juce_gui_basics.h>

class SampleLoaderModuleProcessor : public ModuleProcessor
{
public:
    SampleLoaderModuleProcessor();
    ~SampleLoaderModuleProcessor() override = default;

    const juce::String getName() const override { return "sample loader"; }

    // --- Audio Processing ---
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midiMessages) override;
    void reset() override;
    void getStateInformation (juce::MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;

    // --- Required by ModuleProcessor ---
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // --- Sample Loading ---
    void loadSample(const juce::File& file);
    void loadSample(const juce::String& filePath);
    void randomizeSample();
    juce::String getCurrentSampleName() const;
    bool hasSampleLoaded() const;

    // (Removed SoundTouch controls; using Rubber Band via TimePitchProcessor)
    
    // --- Debug and Monitoring ---
    void setDebugOutput(bool enabled);
    void logCurrentSettings() const;

    // --- Parameter Layout ---
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    // Parameter bus contract implementation (must be available in Collider too)
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Pitch Mod";
            case 1: return "Speed Mod";
            case 2: return "Gate Mod";
            case 3: return "Trigger Mod";
            case 4: return "Range Start Mod";
            case 5: return "Range End Mod";
            case 6: return "Randomize Trig";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
    
    // CRITICAL: Accept multi-bus layout (like TTS Performer)
    bool isBusesLayoutSupported(const BusesLayout& layouts) const override
    {
        // Accept any layout as long as we have at least the minimum channels
        if (layouts.getMainInputChannelSet().isDisabled())
            return false;
        if (layouts.getMainOutputChannelSet().isDisabled())
            return false;
        return true;
    }
    
    // --- Spectrogram Access ---
    juce::Image getSpectrogramImage()
    {
        const juce::ScopedLock lock(imageLock);
        return spectrogramImage;
    }

private:
    // --- ADD THIS STATE VARIABLE ---
    std::atomic<bool> isPlaying { false };

    // --- APVTS ---
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* engineParam { nullptr }; // 0: rubberband, 1: naive
    
    // --- Sample Management ---
    std::shared_ptr<SampleBank::Sample> currentSample;
    std::unique_ptr<SampleVoiceProcessor> sampleProcessor;
    std::atomic<SampleVoiceProcessor*> newSampleProcessor { nullptr };
    juce::CriticalSection processorSwapLock;
    std::unique_ptr<SampleVoiceProcessor> processorToDelete;
    juce::String currentSampleName;
    juce::String currentSamplePath;
    
    // ADD THESE TWO LINES
    double sampleDurationSeconds = 0.0;
    int sampleSampleRate = 0;
    
    // Trigger edge detection for trigger_mod
    bool lastTriggerHigh { false };
    bool lastRandomizeTriggerHigh { false };
    
#if defined(PRESET_CREATOR_UI)
    // Keep a persistent chooser so async callback remains valid
    std::unique_ptr<juce::FileChooser> fileChooser;
#endif
    
    // Rubber Band is configured in TimePitchProcessor; keep no per-node ST params
    
    // --- Debug ---
    bool debugOutput { false };
    
    // --- Spectrogram Data ---
    juce::Image spectrogramImage;
    juce::CriticalSection imageLock;

    // --- Range Parameters ---
    std::atomic<float>* rangeStartParam { nullptr };
    std::atomic<float>* rangeEndParam { nullptr };
    std::atomic<float>* rangeStartModParam { nullptr };
    std::atomic<float>* rangeEndModParam { nullptr };
    double readPosition { 0.0 };
    
    // --- Parameter References ---
    // Parameters are accessed directly via apvts.getRawParameterValue()
    
    // --- Internal Methods ---
    void updateSoundTouchSettings();
    void createSampleProcessor();
    void generateSpectrogram();
};


================================================================================
FILE: juce\Source\audio\modules\SAndHModuleProcessor.cpp
================================================================================


#include "SAndHModuleProcessor.h"

SAndHModuleProcessor::SAndHModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(7), true) // 0-1=signal, 2-3=trigger, 4=threshold mod, 5=edge mod, 6=slew mod
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "SAndHParams", createParameterLayout())
{
    thresholdParam = apvts.getRawParameterValue ("threshold");
    slewMsParam = apvts.getRawParameterValue ("slewMs");
    edgeParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter ("edge"));
    thresholdModParam = apvts.getRawParameterValue ("threshold_mod");
    slewMsModParam = apvts.getRawParameterValue ("slewMs_mod");
    edgeModParam = apvts.getRawParameterValue ("edge_mod");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout SAndHModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("threshold", "Threshold", juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
    params.push_back (std::make_unique<juce::AudioParameterChoice> ("edge", "Edge", juce::StringArray { "Rising", "Falling", "Both" }, 0));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("slewMs", "Slew (ms)", juce::NormalisableRange<float> (0.0f, 2000.0f, 0.01f, 0.35f), 0.0f));
    
    // Add modulation parameters
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("threshold_mod", "Threshold Mod", 0.0f, 1.0f, 0.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("slewMs_mod", "Slew Mod", 0.0f, 1.0f, 0.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("edge_mod", "Edge Mod", 0.0f, 1.0f, 0.0f));
    return { params.begin(), params.end() };
}

void SAndHModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sr = sampleRate;
    lastTrigL = lastTrigR = 0.0f;
    heldL = heldR = 0.0f;
    outL = outR = 0.0f;
}

void SAndHModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    // Single input bus with 4 channels: 0-1 signal, 2-3 trigger
    auto in  = getBusBuffer (buffer, true, 0);
    auto out = getBusBuffer (buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    
    // --- CORRECTED POINTER LOGIC ---
    const float* sigL = in.getReadPointer(0);
    // If input is mono, sigR should be the same as sigL.
    const float* sigR = in.getNumChannels() > 1 ? in.getReadPointer(1) : sigL;
    
    const float* trgL = in.getNumChannels() > 2 ? in.getReadPointer(2) : sigL;
    // If trigger input is mono, trgR should be the same as trgL, NOT sigR.
    const float* trgR = in.getNumChannels() > 3 ? in.getReadPointer(3) : trgL;
    // --- END OF CORRECTION ---
    float* outLw = out.getWritePointer (0);
    float* outRw = out.getNumChannels() > 1 ? out.getWritePointer (1) : out.getWritePointer (0);

    // Get modulation CV inputs from the single unified input bus
    const bool isThresholdMod = isParamInputConnected("threshold_mod");
    const bool isEdgeMod = isParamInputConnected("edge_mod");
    const bool isSlewMod = isParamInputConnected("slewMs_mod");

    const float* thresholdCV = isThresholdMod && in.getNumChannels() > 4 ? in.getReadPointer(4) : nullptr;
    const float* edgeCV = isEdgeMod && in.getNumChannels() > 5 ? in.getReadPointer(5) : nullptr;
    const float* slewCV = isSlewMod && in.getNumChannels() > 6 ? in.getReadPointer(6) : nullptr;

    // Get base parameter values ONCE
    const float baseThreshold = thresholdParam != nullptr ? thresholdParam->load() : 0.5f;
    const float baseSlewMs = slewMsParam != nullptr ? slewMsParam->load() : 0.0f;
    const int baseEdge = edgeParam != nullptr ? edgeParam->getIndex() : 0;

    // Variables to store final modulated values for UI telemetry
    float finalThreshold = baseThreshold;
    float finalSlewMs = baseSlewMs;
    int finalEdge = baseEdge;

    for (int i = 0; i < numSamples; ++i)
    {
        // PER-SAMPLE FIX: Calculate effective parameters FOR THIS SAMPLE
        float thr = baseThreshold;
        if (isThresholdMod && thresholdCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, thresholdCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base threshold
            const float thresholdRange = 0.3f; // CV can modulate threshold by +/- 0.3
            const float thresholdOffset = (cv - 0.5f) * thresholdRange; // Center around 0
            thr = baseThreshold + thresholdOffset;
            thr = juce::jlimit(0.0f, 1.0f, thr);
        }
        
        float slewMs = baseSlewMs;
        if (isSlewMod && slewCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, slewCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base slew time
            const float slewRange = 500.0f; // CV can modulate slew by +/- 500ms
            const float slewOffset = (cv - 0.5f) * slewRange; // Center around 0
            slewMs = baseSlewMs + slewOffset;
            slewMs = juce::jlimit(0.0f, 2000.0f, slewMs);
        }
        
        int edge = baseEdge;
        if (isEdgeMod && edgeCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, edgeCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base edge setting
            const int edgeOffset = static_cast<int>((cv - 0.5f) * 3.0f); // Range [-1, +1]
            edge = (baseEdge + edgeOffset + 3) % 3; // Wrap around (0,1,2)
        }

        // Store final values for telemetry (use last sample's values)
        finalThreshold = thr;
        finalSlewMs = slewMs;
        finalEdge = edge;
        
        const float slewCoeff = (slewMs <= 0.0f) ? 1.0f : (float) (1.0 - std::exp(-1.0 / (0.001 * slewMs * sr)));
        
        const float tL = trgL[i];
        const float tR = trgR[i];
        const bool riseL = (tL > thr && lastTrigL <= thr);
        const bool fallL = (tL < thr && lastTrigL >= thr);
        const bool riseR = (tR > thr && lastTrigR <= thr);
        const bool fallR = (tR < thr && lastTrigR >= thr);

        const bool doL = (edge == 0 && riseL) || (edge == 1 && fallL) || (edge == 2 && (riseL || fallL));
        const bool doR = (edge == 0 && riseR) || (edge == 1 && fallR) || (edge == 2 && (riseR || fallR));

        if (doL) heldL = sigL[i];
        if (doR) heldR = sigR[i];
        lastTrigL = tL; lastTrigR = tR;
        // Slew limiting toward target
        outL = outL + slewCoeff * (heldL - outL);
        outR = outR + slewCoeff * (heldR - outR);
        outLw[i] = outL;
        outRw[i] = outR;
    }
    
    // Store live modulated values for UI display (use last sample values)
    setLiveParamValue("threshold_live", finalThreshold);
    setLiveParamValue("edge_live", static_cast<float>(finalEdge));
    setLiveParamValue("slewMs_live", finalSlewMs);

    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outLw[numSamples - 1]);
        if (lastOutputValues[1]) lastOutputValues[1]->store(outRw[numSamples - 1]);
    }
}

// Parameter bus contract implementation
bool SAndHModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "threshold_mod") { outChannelIndexInBus = 4; return true; }
    if (paramId == "edge_mod") { outChannelIndexInBus = 5; return true; }
    if (paramId == "slewMs_mod") { outChannelIndexInBus = 6; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\SAndHModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class SAndHModuleProcessor : public ModuleProcessor
{
public:
    SAndHModuleProcessor();
    ~SAndHModuleProcessor() override = default;

    const juce::String getName() const override { return "s&h"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float thr=0.5f, slew=0.0f; int edge=0;
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("threshold"))) thr = *p;
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("edge"))) edge = p->getIndex();
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("slewMs"))) slew = *p;
        
        ImGui::PushItemWidth (itemWidth);

        // Threshold
        bool isThreshModulated = isParamModulated("threshold_mod");
        if (isThreshModulated) {
            thr = getLiveParamValueFor("threshold_mod", "threshold_live", thr);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Threshold", &thr, 0.0f, 1.0f)) if (!isThreshModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("threshold"))) *p = thr;
        if (!isThreshModulated) adjustParamOnWheel (ap.getParameter ("threshold"), "threshold", thr);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isThreshModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Edge
        bool isEdgeModulated = isParamModulated("edge_mod");
        if (isEdgeModulated) {
            edge = static_cast<int>(getLiveParamValueFor("edge_mod", "edge_live", static_cast<float>(edge)));
            ImGui::BeginDisabled();
        }
        const char* items = "Rising\0Falling\0Both\0\0";
        if (ImGui::Combo ("Edge", &edge, items)) if (!isEdgeModulated) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("edge"))) *p = edge;
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isEdgeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        // Slew
        bool isSlewModulated = isParamModulated("slewMs_mod");
        if (isSlewModulated) {
            slew = getLiveParamValueFor("slewMs_mod", "slewMs_live", slew);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Slew (ms)", &slew, 0.0f, 2000.0f)) if (!isSlewModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("slewMs"))) *p = slew;
        if (!isSlewModulated) adjustParamOnWheel (ap.getParameter ("slewMs"), "slewMs", slew);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isSlewModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Two stereo input pairs: signal (0,1) and trig (2,3)
        helpers.drawAudioInputPin("Signal In L", 0);
        helpers.drawAudioInputPin("Signal In R", 1);
        helpers.drawAudioInputPin("Trig In L", 2);
        helpers.drawAudioInputPin("Trig In R", 3);

        // CORRECTED MODULATION PINS - Use absolute channel indices
        int busIdx, chanInBus;
        if (getParamRouting("threshold_mod", busIdx, chanInBus))
            helpers.drawAudioInputPin("Threshold Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("slewMs_mod", busIdx, chanInBus))
            helpers.drawAudioInputPin("Slew Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting("edge_mod", busIdx, chanInBus))
            helpers.drawAudioInputPin("Edge Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Signal In L";
            case 1: return "Signal In R";
            case 2: return "Trig In L";
            case 3: return "Trig In R";
            case 4: return "Threshold Mod";
            case 5: return "Edge Mod";
            case 6: return "Slew Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // State
    float lastTrigL { 0.0f };
    float lastTrigR { 0.0f };
    float heldL { 0.0f };
    float heldR { 0.0f };
    float outL  { 0.0f };
    float outR  { 0.0f };
    double sr { 44100.0 };

    // Parameters
    std::atomic<float>* thresholdParam { nullptr }; // 0..1
    juce::AudioParameterChoice* edgeParam { nullptr }; // 0 rising, 1 falling, 2 both
    std::atomic<float>* slewMsParam { nullptr }; // 0..2000 ms
    std::atomic<float>* thresholdModParam { nullptr };
    std::atomic<float>* slewMsModParam { nullptr };
    std::atomic<float>* edgeModParam { nullptr };
};




================================================================================
FILE: juce\Source\audio\modules\ScopeModuleProcessor.cpp
================================================================================


#include "ScopeModuleProcessor.h"

ScopeModuleProcessor::ScopeModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Input", juce::AudioChannelSet::mono(), true)
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts (*this, nullptr, "ScopeParams", createParameterLayout())
{
    monitorSecondsParam = apvts.getRawParameterValue ("monitorSeconds");
    // Inspector value tracking
    lastOutputValues.clear();
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout ScopeModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("monitorSeconds", "Monitor Seconds", juce::NormalisableRange<float>(0.5f, 20.0f, 0.1f), 5.0f));
    return { params.begin(), params.end() };
}

void ScopeModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    currentSampleRate = (sampleRate > 0.0 ? sampleRate : 44100.0);
    // Scope ring for UI drawing
    scopeBuffer.setSize (1, 1024);
    scopeBuffer.clear();
    writePos = 0;
    // Rolling min/max history at ~1 kHz
    decimation = juce::jmax (1, (int) std::round (currentSampleRate / 1000.0));
    histCapacity = juce::jlimit (100, 50000, (int) std::round ((monitorSecondsParam ? monitorSecondsParam->load() : 5.0f) * (currentSampleRate / decimation)));
    history.assign (histCapacity, 0.0f);
    histWrite = 0; histCount = 0; rollMin = 0.0f; rollMax = 0.0f;
}

void ScopeModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    // True pass-through: copy input to output, channel-matched, clear extras
    auto in  = getBusBuffer (buffer, true, 0);
    auto out = getBusBuffer (buffer, false, 0);
    const int n = buffer.getNumSamples();
    // Mono passthrough; avoid aliasing
    if (in.getNumChannels() > 0 && out.getNumChannels() > 0)
    {
        auto* srcCh = in.getReadPointer (0);
        auto* dst = out.getWritePointer (0);
        if (dst != srcCh) juce::FloatVectorOperations::copy (dst, srcCh, n);
    }

    // Update inspector with block peak of output
    if (! lastOutputValues.empty())
    {
        const float* p = out.getNumChannels() > 0 ? out.getReadPointer(0) : nullptr;
        float m = 0.0f; if (p) { for (int i=0;i<n;++i) m = juce::jmax(m, std::abs(p[i])); }
        lastOutputValues[0]->store(m);
    }

    // Copy first channel into scope buffer
    const float* src = (in.getNumChannels() > 0 ? in.getReadPointer (0) : nullptr);
    for (int i = 0; i < n; ++i)
    {
        const float s = (src ? src[i] : 0.0f);
        scopeBuffer.setSample (0, writePos, s);
        writePos = (writePos + 1) % scopeBuffer.getNumSamples();

        // Decimate and push into history (for rolling min/max over ~5s)
        if (++decimCounter >= decimation)
        {
            decimCounter = 0;
            history[histWrite] = s;
            histWrite = (histWrite + 1) % histCapacity;
            histCount = juce::jmin (histCount + 1, histCapacity);
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void ScopeModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused (isParamModulated);
    auto& ap = getAPVTS();
    float seconds = monitorSecondsParam ? monitorSecondsParam->load() : 5.0f;
    ImGui::PushItemWidth (itemWidth);
    if (ImGui::SliderFloat ("Seconds", &seconds, 0.5f, 20.0f, "%.1f s"))
    {
        if (auto* p = ap.getParameter ("monitorSeconds"))
            p->setValueNotifyingHost (ap.getParameterRange("monitorSeconds").convertTo0to1 (seconds));
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    adjustParamOnWheel (ap.getParameter ("monitorSeconds"), "monitorSeconds", seconds);
    ImGui::PopItemWidth();

    // Draw waveform using ImGui draw list
    auto* dl = ImGui::GetWindowDrawList();
    const ImVec2 origin = ImGui::GetCursorScreenPos();
    const float width = 240.0f; const float height = 80.0f;
    const ImU32 bg = IM_COL32(30,30,30,255);
    const ImU32 fg = IM_COL32(100,200,255,255);
    const ImU32 colMax = IM_COL32(255,80,80,255);
    const ImU32 colMin = IM_COL32(255,220,80,255);
    const ImVec2 rectMax = ImVec2(origin.x + width, origin.y + height);
    dl->AddRectFilled (origin, rectMax, bg, 4.0f);
    ImGui::PushClipRect(origin, rectMax, true);
    const int N = scopeBuffer.getNumSamples();
    const float midY = origin.y + height * 0.5f;
    const float scaleY = height * 0.45f;
    const float stepX = width / (float) (N - 1);
    int idx = writePos; // newest
    float prevX = origin.x, prevY = midY;
    for (int i = 0; i < N; ++i)
    {
        idx = (idx + 1) % N;
        float s = scopeBuffer.getSample (0, idx);
        if (s < -1.5f) s = -1.5f; else if (s > 1.5f) s = 1.5f; // guard against runaway values
        const float x = origin.x + i * stepX;
        const float y = midY - s * scaleY;
        if (i > 0) dl->AddLine (ImVec2(prevX, prevY), ImVec2(x, y), fg, 1.5f);
        prevX = x; prevY = y;
    }

    // Rolling min/max over ~5 seconds (compute once per frame)
    if (histCount > 0)
    {
        float hmin = std::numeric_limits<float>::infinity();
        float hmax = -std::numeric_limits<float>::infinity();
        // Recompute capacity when user changes seconds
        const int desired = juce::jlimit (100, 50000, (int) std::round ((monitorSecondsParam ? monitorSecondsParam->load() : 5.0f) * (currentSampleRate / decimation)));
        if (desired != histCapacity)
        {
            histCapacity = desired;
            history.assign (histCapacity, 0.0f);
            histWrite = 0; histCount = 0; hmin = 0.0f; hmax = 0.0f;
        }
        for (int i = 0; i < histCount; ++i)
        {
            const float v = history[i];
            hmin = std::min(hmin, v);
            hmax = std::max(hmax, v);
        }
        rollMin = hmin; rollMax = hmax;
        // Draw lines for min/max across the panel
        const float yMax = midY - rollMax * scaleY;
        const float yMin = midY - rollMin * scaleY;
        dl->AddLine (ImVec2(origin.x, yMax), ImVec2(rectMax.x, yMax), colMax, 1.0f);
        dl->AddLine (ImVec2(origin.x, yMin), ImVec2(rectMax.x, yMin), colMin, 1.0f);
    }
    ImGui::PopClipRect();
    ImGui::Dummy (ImVec2 (width, height));
}
#endif




================================================================================
FILE: juce\Source\audio\modules\ScopeModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class ScopeModuleProcessor : public ModuleProcessor
{
public:
    ScopeModuleProcessor();
    ~ScopeModuleProcessor() override = default;

    const juce::String getName() const override { return "scope"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In", 0);
        helpers.drawAudioOutputPin("Out", 0);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

    const juce::AudioBuffer<float>& getScopeBuffer() const { return scopeBuffer; }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    juce::AudioBuffer<float> scopeBuffer; // mono buffer for display
    int writePos { 0 };

    // --- Rolling min/max over ~5 seconds (decimated) ---
    double currentSampleRate { 44100.0 };
    int decimation { 48 };           // ~1 kHz at 48 kHz
    int decimCounter { 0 };
    std::vector<float> history;      // ring buffer of decimated samples
    int histWrite { 0 };
    int histCount { 0 };
    int histCapacity { 5000 };       // seconds * (sr/decimation)
    float rollMin { 0.0f };
    float rollMax { 0.0f };
    std::atomic<float>* monitorSecondsParam { nullptr };
};




================================================================================
FILE: juce\Source\audio\modules\SequentialSwitchModuleProcessor.cpp
================================================================================


#include "SequentialSwitchModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include "imgui.h"
#endif

SequentialSwitchModuleProcessor::SequentialSwitchModuleProcessor()
    : ModuleProcessor(
        BusesProperties()
            .withInput  ("Inputs",   juce::AudioChannelSet::discreteChannels(5), true)
            .withOutput ("Outputs",  juce::AudioChannelSet::discreteChannels(4), true)
      )
    , apvts(*this, nullptr, "Parameters", createParameterLayout())
{
    // Cache parameter pointers
    threshold1Param = apvts.getRawParameterValue(paramIdThreshold1);
    threshold2Param = apvts.getRawParameterValue(paramIdThreshold2);
    threshold3Param = apvts.getRawParameterValue(paramIdThreshold3);
    threshold4Param = apvts.getRawParameterValue(paramIdThreshold4);
    
    // Initialize lastOutputValues for cable inspector (4 outputs)
    for (int i = 0; i < 4; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

juce::AudioProcessorValueTreeState::ParameterLayout SequentialSwitchModuleProcessor::createParameterLayout()
{
    juce::AudioProcessorValueTreeState::ParameterLayout layout;

    layout.add(std::make_unique<juce::AudioParameterFloat>(
        juce::ParameterID{paramIdThreshold1, 1},
        "Threshold 1",
        0.0f,  // min
        1.0f,  // max
        0.5f   // default
    ));

    layout.add(std::make_unique<juce::AudioParameterFloat>(
        juce::ParameterID{paramIdThreshold2, 1},
        "Threshold 2",
        0.0f,  // min
        1.0f,  // max
        0.5f   // default
    ));

    layout.add(std::make_unique<juce::AudioParameterFloat>(
        juce::ParameterID{paramIdThreshold3, 1},
        "Threshold 3",
        0.0f,  // min
        1.0f,  // max
        0.5f   // default
    ));

    layout.add(std::make_unique<juce::AudioParameterFloat>(
        juce::ParameterID{paramIdThreshold4, 1},
        "Threshold 4",
        0.0f,  // min
        1.0f,  // max
        0.5f   // default
    ));

    return layout;
}

void SequentialSwitchModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void SequentialSwitchModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& /*midiMessages*/)
{
    // Get input bus
    auto inBus = getBusBuffer(buffer, true, 0);

    // Get output bus (4 channels)
    auto outBus = getBusBuffer(buffer, false, 0);

    // Safety check
    if (outBus.getNumChannels() == 0)
        return;

    const int numSamples = buffer.getNumSamples();

    // Check which thresholds are modulated
    const bool isThresh1Mod = isParamInputConnected(paramIdThreshold1Mod);
    const bool isThresh2Mod = isParamInputConnected(paramIdThreshold2Mod);
    const bool isThresh3Mod = isParamInputConnected(paramIdThreshold3Mod);
    const bool isThresh4Mod = isParamInputConnected(paramIdThreshold4Mod);

    // Get input pointers
    const float* gateIn    = inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* thresh1CV = isThresh1Mod && inBus.getNumChannels() > 1 ? inBus.getReadPointer(1) : nullptr;
    const float* thresh2CV = isThresh2Mod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* thresh3CV = isThresh3Mod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* thresh4CV = isThresh4Mod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    // Get base threshold values
    const float baseThreshold1 = threshold1Param->load();
    const float baseThreshold2 = threshold2Param->load();
    const float baseThreshold3 = threshold3Param->load();
    const float baseThreshold4 = threshold4Param->load();

    // Process each sample
    for (int i = 0; i < numSamples; ++i)
    {
        // Read input signal (default to 0.0 if not connected)
        const float inputSignal = gateIn ? gateIn[i] : 0.0f;

        // Calculate modulated thresholds
        float threshold1 = baseThreshold1;
        if (isThresh1Mod && thresh1CV)
            threshold1 = juce::jlimit(0.0f, 1.0f, thresh1CV[i]);

        float threshold2 = baseThreshold2;
        if (isThresh2Mod && thresh2CV)
            threshold2 = juce::jlimit(0.0f, 1.0f, thresh2CV[i]);

        float threshold3 = baseThreshold3;
        if (isThresh3Mod && thresh3CV)
            threshold3 = juce::jlimit(0.0f, 1.0f, thresh3CV[i]);

        float threshold4 = baseThreshold4;
        if (isThresh4Mod && thresh4CV)
            threshold4 = juce::jlimit(0.0f, 1.0f, thresh4CV[i]);

        // Output to each channel based on threshold comparison
        // If input >= threshold, pass the signal, otherwise output 0
        outBus.setSample(0, i, inputSignal >= threshold1 ? inputSignal : 0.0f);
        outBus.setSample(1, i, inputSignal >= threshold2 ? inputSignal : 0.0f);
        outBus.setSample(2, i, inputSignal >= threshold3 ? inputSignal : 0.0f);
        outBus.setSample(3, i, inputSignal >= threshold4 ? inputSignal : 0.0f);

        // Update live values periodically for UI
        if ((i & 0x3F) == 0)
        {
            setLiveParamValue("threshold1_live", threshold1);
            setLiveParamValue("threshold2_live", threshold2);
            setLiveParamValue("threshold3_live", threshold3);
            setLiveParamValue("threshold4_live", threshold4);
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void SequentialSwitchModuleProcessor::drawParametersInNode(
    float itemWidth,
    const std::function<bool(const juce::String& paramId)>& isParamModulated,
    const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);

    // Threshold 1
    {
        const bool thresh1IsMod = isParamModulated(paramIdThreshold1Mod);
        float thresh1 = thresh1IsMod ? getLiveParamValueFor(paramIdThreshold1Mod, "threshold1_live", threshold1Param->load())
                                     : threshold1Param->load();

        if (thresh1IsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Threshold 1", &thresh1, 0.0f, 1.0f, "%.3f"))
        {
            if (!thresh1IsMod)
                if (auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdThreshold1)))
                    *param = thresh1;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && onModificationEnded)
            onModificationEnded();
        if (thresh1IsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }

    // Threshold 2
    {
        const bool thresh2IsMod = isParamModulated(paramIdThreshold2Mod);
        float thresh2 = thresh2IsMod ? getLiveParamValueFor(paramIdThreshold2Mod, "threshold2_live", threshold2Param->load())
                                     : threshold2Param->load();

        if (thresh2IsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Threshold 2", &thresh2, 0.0f, 1.0f, "%.3f"))
        {
            if (!thresh2IsMod)
                if (auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdThreshold2)))
                    *param = thresh2;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && onModificationEnded)
            onModificationEnded();
        if (thresh2IsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }

    // Threshold 3
    {
        const bool thresh3IsMod = isParamModulated(paramIdThreshold3Mod);
        float thresh3 = thresh3IsMod ? getLiveParamValueFor(paramIdThreshold3Mod, "threshold3_live", threshold3Param->load())
                                     : threshold3Param->load();

        if (thresh3IsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Threshold 3", &thresh3, 0.0f, 1.0f, "%.3f"))
        {
            if (!thresh3IsMod)
                if (auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdThreshold3)))
                    *param = thresh3;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && onModificationEnded)
            onModificationEnded();
        if (thresh3IsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }

    // Threshold 4
    {
        const bool thresh4IsMod = isParamModulated(paramIdThreshold4Mod);
        float thresh4 = thresh4IsMod ? getLiveParamValueFor(paramIdThreshold4Mod, "threshold4_live", threshold4Param->load())
                                     : threshold4Param->load();

        if (thresh4IsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Threshold 4", &thresh4, 0.0f, 1.0f, "%.3f"))
        {
            if (!thresh4IsMod)
                if (auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter(paramIdThreshold4)))
                    *param = thresh4;
        }
        if (ImGui::IsItemDeactivatedAfterEdit() && onModificationEnded)
            onModificationEnded();
        if (thresh4IsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }

    ImGui::PopItemWidth();
}

void SequentialSwitchModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Draw input pins (left side)
    helpers.drawAudioInputPin("Gate In", 0);
    helpers.drawAudioInputPin("Thresh 1 CV", 1);
    helpers.drawAudioInputPin("Thresh 2 CV", 2);
    helpers.drawAudioInputPin("Thresh 3 CV", 3);
    helpers.drawAudioInputPin("Thresh 4 CV", 4);

    // Draw output pins (right side)
    helpers.drawAudioOutputPin("Out 1", 0);
    helpers.drawAudioOutputPin("Out 2", 1);
    helpers.drawAudioOutputPin("Out 3", 2);
    helpers.drawAudioOutputPin("Out 4", 3);
}

juce::String SequentialSwitchModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Gate In";
        case 1: return "Thresh 1 CV";
        case 2: return "Thresh 2 CV";
        case 3: return "Thresh 3 CV";
        case 4: return "Thresh 4 CV";
        default: return "";
    }
}

juce::String SequentialSwitchModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out 1";
        case 1: return "Out 2";
        case 2: return "Out 3";
        case 3: return "Out 4";
        default: return "";
    }
}
#endif

bool SequentialSwitchModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0;
    if (paramId == paramIdThreshold1Mod) { outChannelIndexInBus = 1; return true; }
    if (paramId == paramIdThreshold2Mod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdThreshold3Mod) { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdThreshold4Mod) { outChannelIndexInBus = 4; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\SequentialSwitchModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class SequentialSwitchModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdThreshold1 = "threshold1";
    static constexpr auto paramIdThreshold2 = "threshold2";
    static constexpr auto paramIdThreshold3 = "threshold3";
    static constexpr auto paramIdThreshold4 = "threshold4";
    
    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdThreshold1Mod = "threshold1_mod";
    static constexpr auto paramIdThreshold2Mod = "threshold2_mod";
    static constexpr auto paramIdThreshold3Mod = "threshold3_mod";
    static constexpr auto paramIdThreshold4Mod = "threshold4_mod";

    SequentialSwitchModuleProcessor();
    ~SequentialSwitchModuleProcessor() override = default;

    const juce::String getName() const override { return "sequentialswitch"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // Cached parameter pointers
    std::atomic<float>* threshold1Param { nullptr };
    std::atomic<float>* threshold2Param { nullptr };
    std::atomic<float>* threshold3Param { nullptr };
    std::atomic<float>* threshold4Param { nullptr };
};


================================================================================
FILE: juce\Source\audio\modules\ShapingOscillatorModuleProcessor.cpp
================================================================================


#include "ShapingOscillatorModuleProcessor.h"

juce::AudioProcessorValueTreeState::ParameterLayout ShapingOscillatorModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdFrequency, "Frequency",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdWaveform, "Waveform",
        juce::StringArray { "Sine", "Saw", "Square" }, 0));

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdDrive, "Drive",
        juce::NormalisableRange<float>(1.0f, 50.0f, 0.01f, 0.5f), 1.0f));

    return { params.begin(), params.end() };
}

ShapingOscillatorModuleProcessor::ShapingOscillatorModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(5), true)
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts(*this, nullptr, "ShapingOscillatorParams", createParameterLayout())
{
    frequencyParam = apvts.getRawParameterValue(paramIdFrequency);
    waveformParam  = apvts.getRawParameterValue(paramIdWaveform);
    driveParam     = apvts.getRawParameterValue(paramIdDrive);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));

    oscillator.initialise([](float x){ return std::sin(x); }, 128);
}

void ShapingOscillatorModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 1 };
    oscillator.prepare(spec);

    smoothedFrequency.reset(sampleRate, 0.01);
    smoothedDrive.reset(sampleRate, 0.01);
}

void ShapingOscillatorModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto inBus  = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const bool isFreqMod  = isParamInputConnected(paramIdFrequencyMod);
    const bool isWaveMod  = isParamInputConnected(paramIdWaveformMod);
    const bool isDriveMod = isParamInputConnected(paramIdDriveMod);

    const float* audioInL = inBus.getNumChannels() > 0 ? inBus.getReadPointer(0) : nullptr;
    const float* freqCV   = isFreqMod  && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* waveCV   = isWaveMod  && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* driveCV  = isDriveMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    auto* out = outBus.getWritePointer(0);

    const float baseFrequency = frequencyParam != nullptr ? frequencyParam->load() : 440.0f;
    const int   baseWaveform  = waveformParam  != nullptr ? (int) waveformParam->load()  : 0;
    const float baseDrive     = driveParam     != nullptr ? driveParam->load()     : 1.0f;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        float currentFreq = baseFrequency;
        if (isFreqMod && freqCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, freqCV[i]);
            constexpr float fMin = 20.0f;
            constexpr float fMax = 20000.0f;
            const float spanOct = std::log2(fMax / fMin);
            currentFreq = fMin * std::pow(2.0f, cv * spanOct);
        }

        int currentWave = baseWaveform;
        if (isWaveMod && waveCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, waveCV[i]);
            currentWave = (int) (cv * 2.99f);
        }

        float currentDrive = baseDrive;
        if (isDriveMod && driveCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, driveCV[i]);
            currentDrive = juce::jmap(cv, 1.0f, 50.0f);
        }

        smoothedFrequency.setTargetValue(currentFreq);
        smoothedDrive.setTargetValue(currentDrive);

        if (currentWaveform != currentWave)
        {
            if (currentWave == 0)      oscillator.initialise([](float x){ return std::sin(x); }, 128);
            else if (currentWave == 1) oscillator.initialise([](float x){ return (x / juce::MathConstants<float>::pi); }, 128);
            else                       oscillator.initialise([](float x){ return x < 0.0f ? -1.0f : 1.0f; }, 128);
            currentWaveform = currentWave;
        }

        oscillator.setFrequency(smoothedFrequency.getNextValue(), false);
        const float osc = oscillator.processSample(0.0f);
        const float shaped = std::tanh(osc * smoothedDrive.getNextValue());

        const float inL = audioInL ? audioInL[i] : 1.0f;
        const float outSample = shaped * inL;

        out[i] = outSample;

        if ((i & 0x3F) == 0)
        {
            setLiveParamValue("frequency_live", smoothedFrequency.getCurrentValue());
            setLiveParamValue("waveform_live", (float) currentWave);
            setLiveParamValue("drive_live", smoothedDrive.getCurrentValue());
        }
    }

    if (lastOutputValues.size() >= 1)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getSample(0, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void ShapingOscillatorModuleProcessor::drawParametersInNode (float itemWidth,
                                                      const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                      const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();

    const bool freqIsMod = isParamModulated(paramIdFrequencyMod);
    float freq = freqIsMod ? getLiveParamValueFor(paramIdFrequencyMod, "frequency_live", frequencyParam ? frequencyParam->load() : 440.0f)
                           : (frequencyParam ? frequencyParam->load() : 440.0f);

    int wave = (int) (waveformParam ? waveformParam->load() : 0.0f);
    if (isParamModulated(paramIdWaveformMod))
        wave = (int) getLiveParamValueFor(paramIdWaveformMod, "waveform_live", (float) wave);

    const bool driveIsMod = isParamModulated(paramIdDriveMod);
    float drive = driveIsMod ? getLiveParamValueFor(paramIdDriveMod, "drive_live", driveParam ? driveParam->load() : 1.0f)
                             : (driveParam ? driveParam->load() : 1.0f);

    ImGui::PushItemWidth(itemWidth);

    if (freqIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Frequency", &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic))
    {
        if (!freqIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = freq;
    }
    if (!freqIsMod) adjustParamOnWheel(ap.getParameter(paramIdFrequency), "frequencyHz", freq);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (freqIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    const bool waveIsMod = isParamModulated(paramIdWaveformMod);
    if (waveIsMod) ImGui::BeginDisabled();
    if (ImGui::Combo("Waveform", &wave, "Sine\0Saw\0Square\0\0"))
    {
        if (!waveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWaveform))) *p = wave;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (waveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    if (driveIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Drive", &drive, 1.0f, 50.0f, "%.2f", ImGuiSliderFlags_Logarithmic))
    {
        if (!driveIsMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdDrive))) *p = drive;
    }
    if (!driveIsMod) adjustParamOnWheel(ap.getParameter(paramIdDrive), "drive", drive);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (driveIsMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void ShapingOscillatorModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);
    helpers.drawAudioInputPin("Freq Mod", 2);
    helpers.drawAudioInputPin("Wave Mod", 3);
    helpers.drawAudioInputPin("Drive Mod", 4);

    helpers.drawAudioOutputPin("Out", 0);
}

juce::String ShapingOscillatorModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "In L";
        case 1: return "In R";
        case 2: return "Freq Mod";
        case 3: return "Wave Mod";
        case 4: return "Drive Mod";
        default: return {};
    }
}

juce::String ShapingOscillatorModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Out";
        default: return {};
    }
}

#endif

bool ShapingOscillatorModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0;
    if (paramId == paramIdFrequencyMod) { outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdWaveformMod)  { outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdDriveMod)     { outChannelIndexInBus = 4; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\ShapingOscillatorModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <cmath>

class ShapingOscillatorModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdFrequency    = "frequency";
    static constexpr auto paramIdWaveform     = "waveform";
    static constexpr auto paramIdDrive        = "drive";
    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdFrequencyMod = "frequency_mod";
    static constexpr auto paramIdWaveformMod  = "waveform_mod";
    static constexpr auto paramIdDriveMod     = "drive_mod";

    ShapingOscillatorModuleProcessor();
    ~ShapingOscillatorModuleProcessor() override = default;

    const juce::String getName() const override { return "shaping oscillator"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Oscillator<float> oscillator;

    // Cached parameter pointers
    std::atomic<float>* frequencyParam { nullptr };
    std::atomic<float>* waveformParam  { nullptr };
    std::atomic<float>* driveParam     { nullptr };

    // Smoothed values to prevent zipper noise
    juce::SmoothedValue<float> smoothedFrequency;
    juce::SmoothedValue<float> smoothedDrive;

    int currentWaveform = -1;
};



================================================================================
FILE: juce\Source\audio\modules\SnapshotSequencerModuleProcessor.cpp
================================================================================


#include "SnapshotSequencerModuleProcessor.h"

#if defined(PRESET_CREATOR_UI)
#include <imgui.h>
#endif

SnapshotSequencerModuleProcessor::SnapshotSequencerModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput ("Input", juce::AudioChannelSet::stereo(), true)
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)), // Dummy output
      apvts (*this, nullptr, "SnapshotSeqParams", createParameterLayout())
{
    numStepsParam = apvts.getRawParameterValue ("numSteps");
    
    // Initialize empty snapshots
    for (auto& snapshot : snapshots)
    {
        snapshot.reset();
    }
    
    // Inspector value tracking (no outputs to track)
    lastOutputValues.clear();
}

juce::AudioProcessorValueTreeState::ParameterLayout SnapshotSequencerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps", "Num Steps", 1, MAX_STEPS, 8));
    
    return { params.begin(), params.end() };
}

void SnapshotSequencerModuleProcessor::prepareToPlay (double newSampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sampleRate = newSampleRate > 0.0 ? newSampleRate : 44100.0;
    currentStep.store(0);
    lastClockHigh = false;
    lastResetHigh = false;
}

void SnapshotSequencerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    
    if (numStepsParam == nullptr)
    {
        buffer.clear();
        return;
    }

    const int numSamples = buffer.getNumSamples();
    const int numSteps = juce::jlimit(1, MAX_STEPS, (int)numStepsParam->load());
    
    // Get clock and reset inputs
    const bool hasClockInput = buffer.getNumChannels() > 0;
    const bool hasResetInput = buffer.getNumChannels() > 1;
    
    const float* clockIn = hasClockInput ? buffer.getReadPointer(0) : nullptr;
    const float* resetIn = hasResetInput ? buffer.getReadPointer(1) : nullptr;
    
    // Process sample by sample to detect triggers
    for (int i = 0; i < numSamples; ++i)
    {
        // Check for reset trigger (rising edge above 0.5V)
        if (resetIn != nullptr)
        {
            bool resetHigh = resetIn[i] > 0.5f;
            if (resetHigh && !lastResetHigh)
            {
                // Reset trigger detected
                currentStep.store(0);
                
                // Load snapshot for step 0 if it exists
                if (isSnapshotStored(0) && commandBus != nullptr && parentVoiceId != 0)
                {
                    Command cmd;
                    cmd.type = Command::Type::LoadPatchState;
                    cmd.voiceId = parentVoiceId;
                    cmd.patchState = snapshots[0];
                    commandBus->enqueue(cmd);
                    juce::Logger::writeToLog("[SnapshotSeq] Reset: Loading snapshot for step 0");
                }
            }
            lastResetHigh = resetHigh;
        }
        
        // Check for clock trigger (rising edge above 0.5V)
        if (clockIn != nullptr)
        {
            bool clockHigh = clockIn[i] > 0.5f;
            if (clockHigh && !lastClockHigh)
            {
                // Clock trigger detected - advance to next step
                int oldStep = currentStep.load();
                int newStep = (oldStep + 1) % numSteps;
                currentStep.store(newStep);
                
                juce::Logger::writeToLog("[SnapshotSeq] Step " + juce::String(oldStep) + " -> " + juce::String(newStep));
                
                // Load snapshot for the new step if it exists
                if (isSnapshotStored(newStep) && commandBus != nullptr && parentVoiceId != 0)
                {
                    Command cmd;
                    cmd.type = Command::Type::LoadPatchState;
                    cmd.voiceId = parentVoiceId;
                    cmd.patchState = snapshots[newStep];
                    commandBus->enqueue(cmd);
                    juce::Logger::writeToLog("[SnapshotSeq] Loading snapshot for step " + juce::String(newStep));
                }
            }
            lastClockHigh = clockHigh;
        }
    }
    
    // Clear output buffer (this module has no audio output)
    buffer.clear();
}

void SnapshotSequencerModuleProcessor::setSnapshotForStep(int stepIndex, const juce::MemoryBlock& state)
{
    if (stepIndex >= 0 && stepIndex < MAX_STEPS)
    {
        snapshots[stepIndex] = state;
        juce::Logger::writeToLog("[SnapshotSeq] Stored snapshot for step " + juce::String(stepIndex) + 
                                " (size: " + juce::String(state.getSize()) + " bytes)");
    }
}

const juce::MemoryBlock& SnapshotSequencerModuleProcessor::getSnapshotForStep(int stepIndex) const
{
    static juce::MemoryBlock emptyBlock;
    if (stepIndex >= 0 && stepIndex < MAX_STEPS)
        return snapshots[stepIndex];
    return emptyBlock;
}

void SnapshotSequencerModuleProcessor::clearSnapshotForStep(int stepIndex)
{
    if (stepIndex >= 0 && stepIndex < MAX_STEPS)
    {
        snapshots[stepIndex].reset();
        juce::Logger::writeToLog("[SnapshotSeq] Cleared snapshot for step " + juce::String(stepIndex));
    }
}

bool SnapshotSequencerModuleProcessor::isSnapshotStored(int stepIndex) const
{
    if (stepIndex >= 0 && stepIndex < MAX_STEPS)
        return snapshots[stepIndex].getSize() > 0;
    return false;
}

juce::ValueTree SnapshotSequencerModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree tree("SnapshotSeqState");
    
    // Save each snapshot as Base64-encoded string
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        if (snapshots[i].getSize() > 0)
        {
            juce::ValueTree stepTree("Step");
            stepTree.setProperty("index", i, nullptr);
            stepTree.setProperty("data", snapshots[i].toBase64Encoding(), nullptr);
            tree.appendChild(stepTree, nullptr);
        }
    }
    
    return tree;
}

void SnapshotSequencerModuleProcessor::setExtraStateTree(const juce::ValueTree& tree)
{
    if (!tree.hasType("SnapshotSeqState"))
        return;
    
    // Clear all snapshots first
    for (auto& snapshot : snapshots)
        snapshot.reset();
    
    // Load snapshots from tree
    for (int i = 0; i < tree.getNumChildren(); ++i)
    {
        auto stepTree = tree.getChild(i);
        if (stepTree.hasType("Step"))
        {
            int index = stepTree.getProperty("index", -1);
            juce::String dataStr = stepTree.getProperty("data", "").toString();
            
            if (index >= 0 && index < MAX_STEPS && dataStr.isNotEmpty())
            {
                juce::MemoryBlock mb;
                if (mb.fromBase64Encoding(dataStr))
                {
                    snapshots[index] = mb;
                    juce::Logger::writeToLog("[SnapshotSeq] Restored snapshot for step " + juce::String(index) +
                                           " (size: " + juce::String(mb.getSize()) + " bytes)");
                }
            }
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void SnapshotSequencerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    juce::ignoreUnused(isParamModulated, onModificationEnded);
    
    ImGui::PushItemWidth(itemWidth);
    
    // Number of steps parameter
    if (auto* param = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numSteps")))
    {
        int steps = param->get();
        if (ImGui::SliderInt("Steps", &steps, 1, MAX_STEPS))
        {
            param->beginChangeGesture();
            *param = steps;
            param->endChangeGesture();
        }
    }
    
    ImGui::PopItemWidth();
    
    ImGui::Separator();
    ImGui::Text("Snapshots:");
    
    // Display current step
    int currentStepIndex = currentStep.load();
    ImGui::Text("Current Step: %d", currentStepIndex + 1);
    
    ImGui::Separator();
    
    // Draw snapshot slots
    const int numSteps = numStepsParam ? (int)numStepsParam->load() : 8;
    
    for (int i = 0; i < numSteps; ++i)
    {
        ImGui::PushID(i);
        
        // Highlight current step
        if (i == currentStepIndex)
        {
            ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 1.0f, 0.0f, 1.0f));
        }
        
        ImGui::Text("Step %d:", i + 1);
        
        if (i == currentStepIndex)
        {
            ImGui::PopStyleColor();
        }
        
        ImGui::SameLine();
        
        bool stored = isSnapshotStored(i);
        
        // Status indicator
        if (stored)
        {
            ImGui::TextColored(ImVec4(0.0f, 1.0f, 0.0f, 1.0f), "[STORED]");
        }
        else
        {
            ImGui::TextColored(ImVec4(0.5f, 0.5f, 0.5f, 1.0f), "[EMPTY]");
        }
        
        // Note: Capture and Clear buttons are handled by the ImGuiNodeEditorComponent
        // since it needs access to the synth's getStateInformation method
        
        ImGui::PopID();
    }
    
    ImGui::Separator();
    ImGui::TextWrapped("Connect a clock to advance steps. Each step can store a complete patch state.");
}
#endif



================================================================================
FILE: juce\Source\audio\modules\SnapshotSequencerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include "../../ipc/CommandBus.h"
#include <array>

class SnapshotSequencerModuleProcessor : public ModuleProcessor
{
public:
    SnapshotSequencerModuleProcessor();
    ~SnapshotSequencerModuleProcessor() override = default;

    const juce::String getName() const override { return "Snapshot Sequencer"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Public API for UI to capture and manage snapshots
    void setSnapshotForStep(int stepIndex, const juce::MemoryBlock& state);
    const juce::MemoryBlock& getSnapshotForStep(int stepIndex) const;
    void clearSnapshotForStep(int stepIndex);
    bool isSnapshotStored(int stepIndex) const;
    
    // Set the CommandBus pointer so we can enqueue LoadPatchState commands
    void setCommandBus(CommandBus* bus) { commandBus = bus; }
    
    // Get parent voice ID (needed for command routing)
    juce::uint64 getParentVoiceId() const { return parentVoiceId; }
    void setParentVoiceId(juce::uint64 id) { parentVoiceId = id; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("Clock", 0);
        helpers.drawAudioInputPin("Reset", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Clock";
            case 1: return "Reset";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        return ""; // No audio outputs
    }
#endif

    // State persistence
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& tree) override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    // Parameters
    std::atomic<float>* numStepsParam { nullptr };
    
    // Snapshot storage (16 steps maximum)
    static constexpr int MAX_STEPS = 16;
    std::array<juce::MemoryBlock, MAX_STEPS> snapshots;
    
    // Sequencer state
    std::atomic<int> currentStep { 0 };
    double sampleRate { 44100.0 };
    
    // Clock detection
    bool lastClockHigh { false };
    bool lastResetHigh { false };
    
    // Command bus for triggering patch loads
    CommandBus* commandBus { nullptr };
    juce::uint64 parentVoiceId { 0 };

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SnapshotSequencerModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\StepSequencerModuleProcessor.cpp
================================================================================


#include "StepSequencerModuleProcessor.h"
#include <iostream>
#include <array>

using APVTS = juce::AudioProcessorValueTreeState;

static juce::NormalisableRange<float> makeRateRange()
{
    // FIX: Change the interval from 0.0f to a small, non-zero value like 0.01f.
    juce::NormalisableRange<float> r (0.1f, 20.0f, 0.01f, 0.5f); // semi-log response
    return r;
}

APVTS::ParameterLayout StepSequencerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps", "Number of Steps", 1, StepSequencerModuleProcessor::MAX_STEPS, 8));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("rate", "Rate", makeRateRange(), 2.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateLength", "Gate Length", juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));
    // Threshold to generate gate when step value >= threshold
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateThreshold", "Gate Threshold", juce::NormalisableRange<float> (0.0f, 1.0f, 0.001f), 0.5f));
    
    // Add modulation parameters for rate, gate length and number of steps (absolute 0..1)
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("rate_mod", "Rate Mod", 0.0f, 1.0f, 0.0f));
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("gateLength_mod", "Gate Length Mod", 0.0f, 1.0f, 0.5f));
    // Neutral default at 0.5 means "no override" (we'll treat values ~0.5 as disconnected)
    params.push_back (std::make_unique<juce::AudioParameterFloat> ("numSteps_mod", "Num Steps Mod", 0.0f, 1.0f, 0.5f));
    // Optional maximum steps bound (1..MAX_STEPS), default MAX_STEPS
    params.push_back (std::make_unique<juce::AudioParameterInt> ("numSteps_max", "Num Steps Max", 1, StepSequencerModuleProcessor::MAX_STEPS, StepSequencerModuleProcessor::MAX_STEPS));
    
    // Transport sync parameters
    params.push_back(std::make_unique<juce::AudioParameterBool>("sync", "Sync to Transport", false));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("rate_division", "Division", 
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3)); // Default: 1/4 note
    
    for (int i = 0; i < StepSequencerModuleProcessor::MAX_STEPS; ++i)
    {
        const juce::String pid = "step" + juce::String (i + 1);
        params.push_back (std::make_unique<juce::AudioParameterFloat> (pid, pid, juce::NormalisableRange<float> (0.0f, 1.0f), 0.5f));

        // ADD THIS: A new parameter for this step's modulation input
        const juce::String modPid = "step" + juce::String(i + 1) + "_mod";
        // Default 0.5 => no offset (unipolar 0..1 centered to bipolar -0.5..+0.5)
        params.push_back(std::make_unique<juce::AudioParameterFloat>(modPid, modPid, 0.0f, 1.0f, 0.5f));

        // NEW: per-step Trigger checkbox and its modulation (absolute 0..1)
        const juce::String trigPid = "step" + juce::String(i + 1) + "_trig";
        params.push_back(std::make_unique<juce::AudioParameterBool>(trigPid, trigPid, false));
        const juce::String trigModPid = "step" + juce::String(i + 1) + "_trig_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(trigModPid, trigModPid, 0.0f, 1.0f, 0.5f));

        // NEW: per-step Gate Level parameters
        const juce::String gatePid = "step" + juce::String(i + 1) + "_gate";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(gatePid, gatePid, 0.0f, 1.0f, 0.8f));
        const juce::String gateModPid = "step" + juce::String(i + 1) + "_gate_mod";
        params.push_back(std::make_unique<juce::AudioParameterFloat>(gateModPid, gateModPid, 0.0f, 1.0f, 0.5f));
    }
    return { params.begin(), params.end() };
}

StepSequencerModuleProcessor::StepSequencerModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        // ARCHITECTURAL FIX: Single large bus for all inputs:
                        // 2 (Audio) + 4 (Global Mods: rate, gate, steps, stepsMax) + 16 (Step Mods) + 16 (Trig Mods) + 16 (Gate Mods) = 54 channels
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(2 + 4 + (MAX_STEPS * 3)), true)
                        // expand to 5 outputs (Pitch, Gate, Velocity, Mod, Trigger)
                        .withOutput ("CV Outputs", juce::AudioChannelSet::discreteChannels(6), true))
    , apvts (*this, nullptr, "SeqParams", createParameterLayout())
{
    // ADD THIS VERIFICATION LOGIC
    std::cout << "--- StepSequencerModuleProcessor Initializing ---" << std::endl;
    
    numStepsParam   = apvts.getRawParameterValue ("numSteps");
    rateParam       = apvts.getRawParameterValue ("rate");
    gateLengthParam = apvts.getRawParameterValue ("gateLength");
    gateThresholdParam = apvts.getRawParameterValue ("gateThreshold");
    rateModParam    = apvts.getRawParameterValue ("rate_mod");
    gateLengthModParam = apvts.getRawParameterValue ("gateLength_mod");
    numStepsModParam = apvts.getRawParameterValue ("numSteps_mod");
    stepsModMaxParam = apvts.getRawParameterValue ("numSteps_max");
    
    if (numStepsParam == nullptr) std::cout << "ERROR: 'numSteps' parameter is NULL!" << std::endl;
    if (rateParam == nullptr) std::cout << "ERROR: 'rate' parameter is NULL!" << std::endl;
    if (gateLengthParam == nullptr) std::cout << "ERROR: 'gateLength' parameter is NULL!" << std::endl;

    pitchParams.resize (MAX_STEPS);
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        pitchParams[i] = apvts.getRawParameterValue ("step" + juce::String (i + 1));
        if (pitchParams[i] == nullptr)
        {
            std::cout << "ERROR: 'step" << (i + 1) << "' parameter is NULL!" << std::endl;
        }
    }

    // Initialize stepModParams
    stepModParams.resize(MAX_STEPS);
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        const juce::String modPid = "step" + juce::String(i + 1) + "_mod";
        stepModParams[i] = apvts.getRawParameterValue(modPid);
        if (stepModParams[i] == nullptr)
        {
            std::cout << "ERROR: 'step" << (i + 1) << "_mod' parameter is NULL!" << std::endl;
        }
    }
    std::cout << "--- Initialization Check Complete ---" << std::endl;
    
    // Initialize output value tracking for tooltips (6 outputs: Pitch, Gate, Gate Nuanced, Velocity, Mod, Trigger)
    for (int i = 0; i < 6; ++i)
        lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));

    // Cache pointers for per-step trigger params
    stepTrigParams.resize(MAX_STEPS);
    stepTrigModParams.resize(MAX_STEPS);
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        const juce::String trigPid = "step" + juce::String(i + 1) + "_trig";
        stepTrigParams[i] = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter(trigPid));
        const juce::String trigModPid = "step" + juce::String(i + 1) + "_trig_mod";
        stepTrigModParams[i] = apvts.getRawParameterValue(trigModPid);
    }

    // Initialize gate parameter pointers
    stepGateParams.resize(MAX_STEPS);
    for (int i = 0; i < MAX_STEPS; ++i)
    {
        const juce::String gatePid = "step" + juce::String(i + 1) + "_gate";
        stepGateParams[i] = apvts.getRawParameterValue(gatePid);
    }
}

void StepSequencerModuleProcessor::prepareToPlay (double newSampleRate, int samplesPerBlock)
{
    juce::ignoreUnused (samplesPerBlock);
    sampleRate = newSampleRate > 0.0 ? newSampleRate : 44100.0;
    phase = 0.0;
}

void StepSequencerModuleProcessor::setTimingInfo(const TransportState& state)
{
    // Check if the transport has just started playing
    if (state.isPlaying && !wasPlaying)
    {
        // Reset to the beginning when play is pressed
        currentStep.store(0);
        phase = 0.0;
    }
    wasPlaying = state.isPlaying;
    
    m_currentTransport = state;
}

juce::ValueTree StepSequencerModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("SequencerState");
    vt.setProperty("sync", apvts.getRawParameterValue("sync")->load(), nullptr);
    vt.setProperty("rate_division", apvts.getRawParameterValue("rate_division")->load(), nullptr);
    return vt;
}

void StepSequencerModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("SequencerState"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync")))
            *p = (bool)vt.getProperty("sync", false);
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division")))
            *p = (int)vt.getProperty("rate_division", 3);
    }
}

void StepSequencerModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    if (rateParam == nullptr || numStepsParam == nullptr || gateLengthParam == nullptr)
    {
        buffer.clear();
        return;
    }

    const int numSamples = buffer.getNumSamples();
    
    // ARCHITECTURAL FIX: Read CV from single input bus
    const auto& inputBus = getBusBuffer(buffer, true, 0); // All inputs are now on bus 0
    
    // Get pointers to global modulation CV inputs, if they are connected
    const bool isRateMod = isParamInputConnected("rate_mod");
    const bool isGateLenMod = isParamInputConnected("gateLength_mod");
    const bool isStepsMod = isParamInputConnected("numSteps_mod");
    
    // Absolute channel map on single input bus:
    // 0=L,1=R, 2=rate, 3=gateLen, 4=steps, 5=stepsMax,
    // 6..21: step1..step16 value mods, 22..37: step1..step16 trig mods, 38..53: step1..step16 gate mods
    const float* rateCV = isRateMod && inputBus.getNumChannels() > 2 ? inputBus.getReadPointer(2) : nullptr;
    const float* gateLenCV = isGateLenMod && inputBus.getNumChannels() > 3 ? inputBus.getReadPointer(3) : nullptr;
    const float* stepsCV = isStepsMod && inputBus.getNumChannels() > 4 ? inputBus.getReadPointer(4) : nullptr;
    
    // Get write pointers for all 6 output channels
    auto* pitchOut       = buffer.getWritePointer(0);
    auto* gateOut        = buffer.getNumChannels() > 1 ? buffer.getWritePointer(1) : nullptr;
    auto* gateNuancedOut = buffer.getNumChannels() > 2 ? buffer.getWritePointer(2) : nullptr;
    auto* velocityOut    = buffer.getNumChannels() > 3 ? buffer.getWritePointer(3) : nullptr;
    auto* modOut         = buffer.getNumChannels() > 4 ? buffer.getWritePointer(4) : nullptr;
    auto* trigOut        = buffer.getNumChannels() > 5 ? buffer.getWritePointer(5) : nullptr;
    
    // The old, commented-out input logic can now be completely removed.
    
    // Get base parameter values ONCE
    const float baseRate = rateParam->load();
    const float baseGate = gateLengthParam != nullptr ? gateLengthParam->load() : 0.5f;
    const int baseSteps = numStepsParam != nullptr ? (int) numStepsParam->load() : 8;
    const int boundMax = stepsModMaxParam != nullptr ? juce::jlimit (1, MAX_STEPS, (int) stepsModMaxParam->load()) : MAX_STEPS;
    const float gateThreshold = gateThresholdParam != nullptr ? juce::jlimit(0.0f, 1.0f, gateThresholdParam->load()) : 0.5f;

    // --- UI Telemetry Bootstrap ---
    // Publish per-step live values for ALL steps this block (use first-sample snapshot)
    {
        const int totalCh = inputBus.getNumChannels();
        for (int si = 0; si < MAX_STEPS; ++si)
        {
            // Absolute channel for per-step value mod: 6..21
            const int ch = 6 + si;
            const bool hasCh = totalCh > ch;
            const float base = (pitchParams.size() > (size_t) si && pitchParams[si] != nullptr) ? pitchParams[si]->load() : 0.0f;
            float live = base;
            if (hasCh)
            {
                const float cv0 = inputBus.getReadPointer(ch)[0];
                live = juce::jlimit(0.0f, 1.0f, base + (cv0 - 0.5f));
            }
            setLiveParamValue("step_live_" + juce::String(si + 1), live);

            // Per-step gate live values: channels 38..53
            const int gateCh = 38 + si;
            const bool hasGateCh = totalCh > gateCh;
            const float baseGate = (stepGateParams.size() > (size_t) si && stepGateParams[si] != nullptr) ? stepGateParams[si]->load() : 0.8f;
            float liveGate = baseGate;
            if (hasGateCh)
            {
                const float cv0 = inputBus.getReadPointer(gateCh)[0];
                liveGate = juce::jlimit(0.0f, 1.0f, baseGate + (cv0 - 0.5f));
            }
            setLiveParamValue("gate_live_" + juce::String(si + 1), liveGate);

            // Per-step trigger live values: channels 22..37
            const int trigCh = 22 + si;
            const bool hasTrigCh = totalCh > trigCh;
            const bool baseTrig = (stepTrigParams.size() > (size_t) si && stepTrigParams[si] != nullptr) ? (bool)(*stepTrigParams[si]) : false;
            bool liveTrig = baseTrig;
            if (hasTrigCh)
            {
                const float cv0 = inputBus.getReadPointer(trigCh)[0];
                liveTrig = cv0 > 0.5f;
            }
            setLiveParamValue("trig_live_" + juce::String(si + 1), liveTrig ? 1.0f : 0.0f);
        }
    }

    bool stepAdvanced = false;
    float lastRateLive = baseRate;
    float lastGateLive = baseGate;
    float lastGateThresholdLive = gateThreshold;
    int   lastStepsLive = baseSteps;
    for (int i = 0; i < numSamples; ++i)
    {
        // PER-SAMPLE FIX: Calculate global modulation parameters FOR THIS SAMPLE
        int activeSteps = baseSteps;
        if (isStepsMod && stepsCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, stepsCV[i]);
            const int mapped = 1 + (int) std::round(cv * (MAX_STEPS - 1));
            activeSteps = juce::jlimit(1, boundMax, mapped);
        }
        // FIX: clamp playhead immediately when steps shrink
        if (currentStep.load() >= activeSteps)
            currentStep.store(0);
        
        float rate = baseRate;
        if (isRateMod && rateCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            const float modRateHz = 0.01f + cv * (50.0f - 0.01f);
            rate = modRateHz;
        }
        lastRateLive = rate;
        
        float gateLen = baseGate;
        if (isGateLenMod && gateLenCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, gateLenCV[i]);
            gateLen = juce::jlimit(0.0f, 1.0f, cv);
        }
        lastGateLive = gateLen;
        
        // Use gateLenCV for gate threshold modulation (reusing the existing "Gate Mod" input)
        float gateThreshold = gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f;
        if (isGateLenMod && gateLenCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, gateLenCV[i]);
            gateThreshold = juce::jlimit(0.0f, 1.0f, cv);
        }
        lastGateThresholdLive = gateThreshold;
        
        // --- Transport Sync Logic ---
        const bool syncEnabled = apvts.getRawParameterValue("sync")->load() > 0.5f;

        if (syncEnabled && m_currentTransport.isPlaying)
        {
            // SYNC MODE: Use the global beat position
            const int divisionIndex = (int)apvts.getRawParameterValue("rate_division")->load();
            static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
            const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];
            
            // Calculate which step we should be on based on song position
            const int totalSteps = juce::jlimit(1, MAX_STEPS, activeSteps);
            const int stepForBeat = static_cast<int>(std::fmod(m_currentTransport.songPositionBeats * beatDivision, totalSteps));

            if (stepForBeat != currentStep.load())
            {
                currentStep.store(stepForBeat);
                stepAdvanced = true;
            }
        }
        else
        {
            // FREE-RUNNING MODE: Use the internal phase clock
            const double phaseInc = (sampleRate > 0.0 ? (double) rate / sampleRate : 0.0);
            phase += phaseInc;
            if (phase >= 1.0)
            {
                phase -= 1.0;
                const int next = (currentStep.load() + 1) % juce::jlimit (1, MAX_STEPS, activeSteps);
                currentStep.store(next);
                stepAdvanced = true;
            }
        }
        lastStepsLive = activeSteps;

        const int currentStepIndex = currentStep.load();
        const float sliderValue = pitchParams[currentStepIndex] != nullptr ? pitchParams[currentStepIndex]->load() : 0.0f;
        
        // PER-SAMPLE FIX: Read modulation from CV input bus for THIS SAMPLE
        float rawModValue = 0.5f; // neutral
        {
            const juce::String stepModId = "step" + juce::String(currentStepIndex + 1) + "_mod";
            const bool stepModConnected = isParamInputConnected(stepModId);
            if (stepModConnected)
            {
                // Absolute: step1_mod at 6, step2_mod at 7, ...
                const int modChannel = 6 + currentStepIndex;
                if (inputBus.getNumChannels() > modChannel)
                    rawModValue = inputBus.getReadPointer(modChannel)[i];
            }
        }
        // Center modulation around 0.0 (convert unipolar 0-1 to bipolar -0.5 to +0.5)
        const float modValue = rawModValue - 0.5f;

        const float pitchValue = juce::jlimit (0.0f, 1.0f, sliderValue + modValue);
        
        // --- REWRITTEN GATE LOGIC ---
        // 1. Get the gate level for the current step from its own slider.
        float stepGateLevel = (stepGateParams[currentStepIndex] != nullptr) ? stepGateParams[currentStepIndex]->load() : 0.8f;

        // 2. Apply modulation to the step's gate level if connected.
        const juce::String gateModId = "step" + juce::String(currentStepIndex + 1) + "_gate_mod";
        if (isParamInputConnected(gateModId))
        {
            const int gateModChannel = 38 + currentStepIndex;
            if (inputBus.getNumChannels() > gateModChannel)
            {
                const float cv = inputBus.getReadPointer(gateModChannel)[i];
                stepGateLevel = juce::jlimit(0.0f, 1.0f, stepGateLevel + (cv - 0.5f));
            }
        }

        // --- NEW DUAL GATE LOGIC WITH FADE-IN ---
        // 1. Perform the comparison once.
        const bool isGateOn = (stepGateLevel >= gateThreshold);
        
        // 2. Handle gate fade-in transition
        if (isGateOn && !previousGateOn) {
            // Gate just turned on - start fade-in
            gateFadeProgress = 0.0f;
        } else if (isGateOn && previousGateOn) {
            // Gate is on - continue fade-in
            const float fadeIncrement = sampleRate > 0.0f ? (1000.0f / GATE_FADE_TIME_MS) / sampleRate : 0.0f;
            gateFadeProgress = juce::jmin(1.0f, gateFadeProgress + fadeIncrement);
        } else {
            // Gate is off - reset fade progress
            gateFadeProgress = 0.0f;
        }
        previousGateOn = isGateOn;
        
        // 3. Generate the binary "Gate" output with fade-in.
        const float gateBinaryValue = isGateOn ? gateFadeProgress : 0.0f;
        
        // 4. Generate the analog "Gate Nuanced" output with fade-in.
        const float gateNuancedValue = isGateOn ? (stepGateLevel * gateFadeProgress) : 0.0f;
        // --- END OF NEW LOGIC ---
        
        // Live gate level is already stored in the UI telemetry bootstrap

        // Determine Trigger state for this step (checkbox + mod, but only count mod when connected)
        bool trigBase = false;
        if (stepTrigParams.size() > (size_t) currentStepIndex && stepTrigParams[currentStepIndex] != nullptr)
            trigBase = (bool) (*stepTrigParams[currentStepIndex]);
        bool trigActive = trigBase;
        {
            const juce::String trigModId = "step" + juce::String(currentStepIndex + 1) + "_trig_mod";
            const bool trigModConnected = isParamInputConnected(trigModId);
            if (trigModConnected)
            {
                // Absolute: step1_trig_mod at 22, step2 at 23, ...
                const int trigModChannel = 22 + currentStepIndex;
                if (inputBus.getNumChannels() > trigModChannel)
                {
                    const float trigModNorm = inputBus.getReadPointer(trigModChannel)[i];
                    if (trigModNorm > 0.5f) trigActive = true;
                }
            }
        }

        // If we advanced to this step, only emit a pulse if this step is enabled (checkbox or connected mod>0.5)
        if (stepAdvanced)
        {
            pendingTriggerSamples = trigActive ? (int) std::round (0.001 * sampleRate) : 0;
            stepAdvanced = false;
        }

        pitchOut[i] = pitchValue;
        // Live step value is already stored in the UI telemetry bootstrap
        if (gateOut != nullptr)         gateOut[i] = gateBinaryValue;
        if (gateNuancedOut != nullptr)  gateNuancedOut[i] = gateNuancedValue;
        if (velocityOut != nullptr) velocityOut[i] = 0.85f;
        if (modOut != nullptr)      modOut[i] = 0.0f;
        // Timed gate remains level-based
        // Trigger Out: 1ms pulse after each step advance
        if (trigOut != nullptr)
        {
            float pulse = 0.0f;
            if (pendingTriggerSamples > 0)
            {
                pulse = 1.0f;
                --pendingTriggerSamples;
            }
            trigOut[i] = pulse;
        }
    }
    // Publish block-level live telemetry for UI reflection
    setLiveParamValue("rate_live", lastRateLive);
    setLiveParamValue("gateLength_live", lastGateLive);
    setLiveParamValue("gateThreshold_live", lastGateThresholdLive);
    setLiveParamValue("steps_live", (float) lastStepsLive);
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 6)
    {
        if (lastOutputValues[0] && pitchOut) lastOutputValues[0]->store(pitchOut[numSamples - 1]);
        if (lastOutputValues[1] && gateOut) lastOutputValues[1]->store(gateOut[numSamples - 1]);
        if (lastOutputValues[2] && gateNuancedOut) lastOutputValues[2]->store(gateNuancedOut[numSamples - 1]);
        if (lastOutputValues[3] && velocityOut) lastOutputValues[3]->store(velocityOut[numSamples - 1]);
        if (lastOutputValues[4] && modOut) lastOutputValues[4]->store(modOut[numSamples - 1]);
        if (lastOutputValues[5] && trigOut) lastOutputValues[5]->store(trigOut[numSamples - 1]);
    }

}

#if defined(PRESET_CREATOR_UI)
void StepSequencerModuleProcessor::drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    int activeSteps = numStepsParam != nullptr ? (int) numStepsParam->load() : 8;
    const int boundMaxUi = stepsModMaxParam != nullptr ? juce::jlimit (1, MAX_STEPS, (int) stepsModMaxParam->load()) : MAX_STEPS;
    const bool stepsAreModulated = isParamModulated("numSteps_mod");
    if (stepsAreModulated) {
        // Reflect live steps from audio thread telemetry
        const int liveSteps = (int) std::round(getLiveParamValueFor("numSteps_mod", "steps_live", (float) activeSteps));
        activeSteps = juce::jlimit (1, boundMaxUi, liveSteps);
    }

    // Step count controls - now using a slider instead of +/- buttons
    int currentSteps = numStepsParam != nullptr ? (int)numStepsParam->load() : 8;

    // If modulated, the displayed value comes from the modulation input.
    // Otherwise, it comes from the parameter itself.
    int displayedSteps = currentSteps;
    if (stepsAreModulated) {
        const int liveSteps = (int) std::round(getLiveParamValueFor("numSteps_mod", "steps_live", (float) currentSteps));
        displayedSteps = juce::jlimit (1, boundMaxUi, liveSteps);
    }

    // Ensure the displayed value never exceeds the max bound
    displayedSteps = juce::jmin(displayedSteps, boundMaxUi);

    // Disable the slider if steps are being modulated
    if (stepsAreModulated) ImGui::BeginDisabled();

    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderInt("Steps", &displayedSteps, 1, boundMaxUi))
    {
        // Only update the parameter if the slider is not disabled
        if (!stepsAreModulated) {
            if (auto* p = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numSteps"))) {
                *p = displayedSteps;
            }
        }
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    
    // Add scroll wheel support for the Steps slider
    if (!stepsAreModulated)
    {
        adjustParamOnWheel(apvts.getParameter("numSteps"), "numSteps", (float)displayedSteps);
    }
    
    ImGui::PopItemWidth();

    if (stepsAreModulated) {
        ImGui::EndDisabled();
        ImGui::SameLine(); 
        ImGui::TextUnformatted("(mod)");
    }

    // Use the displayed steps value for the slider strip
    const int shown = juce::jlimit (1, MAX_STEPS, displayedSteps);
    const float sliderW = itemWidth / (float) juce::jmax (8, shown) * 0.8f;

    ImGui::PushItemWidth (sliderW);
    for (int i = 0; i < shown; ++i)
    {
        if (i > 0) ImGui::SameLine();

        // Build display and interaction state
        float baseValue = (pitchParams[i] != nullptr ? pitchParams[i]->load() : 0.5f);
        const juce::String modPid = "step" + juce::String(i + 1) + "_mod";
        const bool modConnected = isParamModulated(modPid);

        // Reflect live per-step value for the currently active step when modulated
        float liveValue = getLiveParamValueFor("step" + juce::String(i + 1) + "_mod",
                                              "step_live_" + juce::String(i + 1),
                                              baseValue);
        float sliderValue = modConnected ? liveValue : baseValue; // widget bound to display value

        const bool isActive = (i == currentStep.load());
        if (isActive)
        {
            ImGui::PushStyleColor (ImGuiCol_FrameBg, ImVec4(0.3f, 0.7f, 1.0f, 1.0f));
            ImGui::PushStyleColor (ImGuiCol_SliderGrab, ImVec4(0.9f, 0.9f, 0.9f, 1.0f));
        }

        const std::string label = "##s" + std::to_string(i);
        if (modConnected) ImGui::BeginDisabled();
        if (ImGui::VSliderFloat (label.c_str(), ImVec2 (sliderW, 60.0f), &sliderValue, 0.0f, 1.0f, ""))
        {
            if (!modConnected) {
                // Only update if not modulated
                float newBaseValue = juce::jlimit (0.0f, 1.0f, sliderValue);
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter ("step" + juce::String (i + 1)))) 
                    *p = newBaseValue;
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }

        // Wheel fine-tune: identical semantics to drag
        if (!modConnected)
        {
            if (ImGui::IsItemHovered())
            {
                float wheel = ImGui::GetIO().MouseWheel;
                if (wheel != 0.0f)
                {
                    const float delta = (wheel > 0 ? 0.05f : -0.05f);
                    float newBaseValue = juce::jlimit (0.0f, 1.0f, baseValue + delta);
                    if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter ("step" + juce::String (i + 1)))) 
                        *p = newBaseValue;
                }
            }
        }

        if (modConnected) { ImGui::EndDisabled(); }

        if (isActive) ImGui::PopStyleColor(2);
    }
    ImGui::PopItemWidth();


    // Per-step Gate Sliders
    ImGui::PushItemWidth(sliderW);
    
    // Capture the screen position before drawing the gate sliders
    ImVec2 gate_sliders_p0 = ImGui::GetCursorScreenPos();
    
    for (int i = 0; i < shown; ++i)
    {
        if (i > 0) ImGui::SameLine();
        ImGui::PushID(2000 + i); // Use a new ID base to avoid collisions

        float baseGateValue = (stepGateParams[i] != nullptr ? stepGateParams[i]->load() : 0.8f);
        const juce::String modPid = "step" + juce::String(i + 1) + "_gate_mod";
        const bool modConnected = isParamModulated(modPid);
        
        // Reflect live modulated value for gate level
        float sliderValue = baseGateValue;
        if (modConnected) {
            // Use live gate value from audio thread
            sliderValue = getLiveParamValueFor("step" + juce::String(i + 1) + "_gate_mod",
                                              "gate_live_" + juce::String(i + 1),
                                              baseGateValue);
        }
        const bool isActive = (i == currentStep.load());

        if (isActive) ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(1.0f, 0.7f, 0.3f, 1.0f));
        if (modConnected) ImGui::BeginDisabled();
        
        if (ImGui::VSliderFloat("##g", ImVec2(sliderW, 60.0f), &sliderValue, 0.0f, 1.0f, ""))
        {
            if (!modConnected && stepGateParams[i] != nullptr) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("step" + juce::String(i + 1) + "_gate"))) {
                    *p = sliderValue;
                }
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        
        // Wheel fine-tune: identical semantics to drag
        if (!modConnected)
        {
            if (ImGui::IsItemHovered())
            {
                float wheel = ImGui::GetIO().MouseWheel;
                if (wheel != 0.0f)
                {
                    const float delta = (wheel > 0 ? 0.05f : -0.05f);
                    float newBaseValue = juce::jlimit(0.0f, 1.0f, sliderValue + delta);
                    if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("step" + juce::String(i + 1) + "_gate"))) {
                        *p = newBaseValue;
                    }
                }
            }
        }
        
        if (modConnected) ImGui::EndDisabled();
        if (isActive) ImGui::PopStyleColor();
        
        ImGui::PopID();
    }
    ImGui::PopItemWidth();

    // Draw the yellow threshold line immediately after the gate sliders
    // Use the same threshold value that will be used by the Gate Threshold slider
    const bool gtIsModulatedForLine = isParamModulated("gateLength_mod");
    const float threshold_value = gtIsModulatedForLine ? getLiveParamValueFor("gateLength_mod", "gateThreshold_live", (gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f))
                                                          : (gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f);
    const float slider_height = 60.0f; // This must match the VSliderFloat height
    const float row_width = (sliderW * shown) + (ImGui::GetStyle().ItemSpacing.x * (shown - 1));

    // Calculate the Y coordinate for the line. 
    // A threshold of 1.0 is at the top (y=0), 0.0 is at the bottom (y=height).
    const float line_y = gate_sliders_p0.y + (1.0f - threshold_value) * slider_height;

    ImDrawList* draw_list = ImGui::GetWindowDrawList();
    draw_list->AddLine(
        ImVec2(gate_sliders_p0.x, line_y),
        ImVec2(gate_sliders_p0.x + row_width, line_y),
        IM_COL32(255, 255, 0, 200), // A bright, slightly transparent yellow
        2.0f
    );

    // Current step indicator
    ImGui::Text("Current Step: %d", currentStep.load() + 1);

    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue("sync")->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync"))) *p = sync;
        onModificationEnded();
    }

    ImGui::PushItemWidth(itemWidth);
    if (sync)
    {
        int division = (int)apvts.getRawParameterValue("rate_division")->load();
        if (ImGui::Combo("Division", &division, "1/32\0""1/16\0""1/8\0""1/4\0""1/2\0""1\0""2\0""4\0""8\0\0"))
        {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division"))) *p = division;
            onModificationEnded();
        }
    }
    else
    {
        // Rate slider (only shown in free-running mode)
        const bool isRateModulated = isParamModulated("rate_mod");
        float rateDisplay = isRateModulated ? getLiveParamValueFor("rate_mod", "rate_live", rateParam->load()) : rateParam->load();
        
        if (isRateModulated) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Rate (Hz)", &rateDisplay, 0.1f, 20.0f, "%.2f")) {
            if (!isRateModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("rate"))) *p = rateDisplay;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (!isRateModulated) adjustParamOnWheel(apvts.getParameter("rate"), "rate", rateDisplay);
        if (isRateModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }
    ImGui::PopItemWidth();
    // --- END SYNC CONTROLS ---

    ImGui::PushItemWidth(itemWidth);

    const bool gtIsModulated = isParamModulated("gateLength_mod");
    float gtEff = gtIsModulated ? getLiveParamValueFor("gateLength_mod", "gateThreshold_live", (gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f))
                                 : (gateThresholdParam != nullptr ? gateThresholdParam->load() : 0.5f);

    if (gtIsModulated) ImGui::BeginDisabled();
    if (ImGui::SliderFloat ("Gate Threshold", &gtEff, 0.0f, 1.0f))
    {
        if (! gtIsModulated)
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("gateThreshold"))) *p = gtEff;
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (! gtIsModulated)
        adjustParamOnWheel (apvts.getParameter ("gateThreshold"), "gateThreshold", gtEff);
    if (gtIsModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    ImGui::PopItemWidth();

    // --- Per-step Trigger checkboxes row ---
    // Place checkboxes exactly under each slider, matching widths and exact columns
    {
        const float cbWidth = sliderW; // same width as sliders
        for (int i = 0; i < shown; ++i)
        {
            // Compute the same X layout as sliders
            if (i > 0) ImGui::SameLine();

            bool baseTrig = (stepTrigParams.size() > (size_t) i && stepTrigParams[i] != nullptr) ? (bool) (*stepTrigParams[i]) : false;
            // Only grey out when the TRIGGER mod is connected (not the value mod)
            const juce::String trigModId = "step" + juce::String(i + 1) + "_trig_mod";
            const bool trigIsModulated = isParamModulated(trigModId);

            // Use live value for display when modulated
            bool displayTrig = baseTrig;
            if (trigIsModulated) {
                displayTrig = getLiveParamValueFor("step" + juce::String(i + 1) + "_trig_mod",
                                                  "trig_live_" + juce::String(i + 1),
                                                  baseTrig ? 1.0f : 0.0f) > 0.5f;
            }

            if (trigIsModulated) ImGui::BeginDisabled();
            ImGui::PushID(1000 + i);
            ImGui::SetNextItemWidth(cbWidth);
            ImGui::PushItemWidth(cbWidth);
            bool changed = ImGui::Checkbox("##trig", &displayTrig);
            ImGui::PopItemWidth();
            if (changed && !trigIsModulated && stepTrigParams.size() > (size_t) i && stepTrigParams[i] != nullptr)
            {
                // Only update parameter if not modulated
                *stepTrigParams[i] = displayTrig;
            }
            // Fill remaining width so columns align exactly to sliderW
            {
                float used = ImGui::GetItemRectSize().x;
                if (used < cbWidth) { ImGui::SameLine(0.0f, 0.0f); ImGui::Dummy(ImVec2(cbWidth - used, 0.0f)); }
            }
            if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
            ImGui::PopID();
            if (trigIsModulated) { ImGui::EndDisabled(); }
        }
        // Mod banner if any are modulated
        bool anyTrigMod = false;
        for (int i = 0; i < shown; ++i)
        {
            const juce::String trigModId = "step" + juce::String(i + 1) + "_trig_mod";
            if (isParamInputConnected(trigModId)) { anyTrigMod = true; break; }
        }
        if (anyTrigMod) { ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    }
}

void StepSequencerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // ARCHITECTURAL FIX: All inputs are now on a single bus, so we can use direct channel indices
    
    // Main stereo audio input pins (Channels 0-1)
    helpers.drawAudioInputPin("Mod In L", 0);
    helpers.drawAudioInputPin("Mod In R", 1);
    
    // Global modulation inputs (Channels 2-4)
    helpers.drawAudioInputPin("Rate Mod", 2);
    helpers.drawAudioInputPin("Gate Mod", 3);
    helpers.drawAudioInputPin("Steps Mod", 4);
    
    // Dynamic per-step modulation inputs
    const int boundMaxPins = stepsModMaxParam != nullptr ? juce::jlimit (1, MAX_STEPS, (int) stepsModMaxParam->load()) : MAX_STEPS;
    int activeSteps = numStepsParam != nullptr ? (int) numStepsParam->load() : 8;

    // FIX: reflect live, modulated steps value (from audio thread telemetry)
    if (isParamInputConnected("numSteps_mod"))
    {
        const int liveSteps = (int) std::round (getLiveParamValueFor("numSteps_mod", "steps_live", (float) activeSteps));
        activeSteps = juce::jlimit (1, boundMaxPins, liveSteps);
    }
    else
    {
        activeSteps = juce::jlimit (1, boundMaxPins, activeSteps);
    }
    
    // Interleaved per-step pins: Step n Mod, Step n Trig Mod, Step n Gate Mod (absolute channels match pin DB)
    for (int i = 0; i < activeSteps; ++i)
    {
        const int stepIdx = i + 1;
        const int valChan  = 6 + (stepIdx - 1);           // 6..21
        const int trigChan = 22 + (stepIdx - 1);          // 22..37
        const int gateChan = 38 + (stepIdx - 1);          // 38..53
        helpers.drawAudioInputPin(("Step " + juce::String(stepIdx) + " Mod").toRawUTF8(), valChan);
        helpers.drawAudioInputPin(("Step " + juce::String(stepIdx) + " Trig Mod").toRawUTF8(), trigChan);
        helpers.drawAudioInputPin(("Step " + juce::String(stepIdx) + " Gate Mod").toRawUTF8(), gateChan);
    }

    // Output pins
    helpers.drawAudioOutputPin("Pitch", 0);
    helpers.drawAudioOutputPin("Gate", 1);
    helpers.drawAudioOutputPin("Gate Nuanced", 2);
    helpers.drawAudioOutputPin("Velocity", 3);
    helpers.drawAudioOutputPin("Mod", 4);
    helpers.drawAudioOutputPin("Trigger", 5);

    // Note: helpers API handles pin disappearance when the number of steps shrinks; no manual clear required here.
}
#endif

// Parameter bus contract implementation
bool StepSequencerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // ARCHITECTURAL FIX: All modulation is now on the single input bus at index 0
    outBusIndex = 0;

    // Global Audio/Mod Inputs (Absolute Channels)
    // 0-1: Mod In L/R, 2: Rate, 3: GateLen, 4: Steps, 5: Steps Max
    if (paramId == "rate_mod")       { outChannelIndexInBus = 2; return true; }
    if (paramId == "gateLength_mod") { outChannelIndexInBus = 3; return true; }
    if (paramId == "numSteps_mod")   { outChannelIndexInBus = 4; return true; }

    // Per-Step Trigger Modulation (Absolute Channels 22..37) — check TRIGGER first to avoid matching generic "_mod" suffix
    if (paramId.startsWith("step") && paramId.endsWith("_trig_mod"))
    {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false)
                           .upToFirstOccurrenceOf("_trig_mod", false, false)
                           .getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS)
        {
            outChannelIndexInBus = 22 + (stepNum - 1); // e.g., step1_trig_mod is on channel 22
            return true;
        }
    }

    // Per-Step Value Modulation (Absolute Channels 6..21)
    if (paramId.startsWith("step") && paramId.endsWith("_mod") && !paramId.endsWith("_trig_mod") && !paramId.endsWith("_gate_mod"))
    {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false)
                           .upToFirstOccurrenceOf("_mod", false, false)
                           .getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS)
        {
            outChannelIndexInBus = 6 + (stepNum - 1); // e.g., step1_mod is on channel 6
            return true;
        }
    }

    // Per-Step Gate Level Modulation (Absolute Channels 38..53)
    if (paramId.startsWith("step") && paramId.endsWith("_gate_mod"))
    {
        int stepNum = paramId.fromFirstOccurrenceOf("step", false, false)
                           .upToFirstOccurrenceOf("_gate_mod", false, false)
                           .getIntValue();
        if (stepNum > 0 && stepNum <= MAX_STEPS)
        {
            outChannelIndexInBus = 38 + (stepNum - 1); // e.g., step1_gate_mod is on channel 38
            return true;
        }
    }
    
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\StepSequencerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class StepSequencerModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_STEPS = 16;
    StepSequencerModuleProcessor();
    ~StepSequencerModuleProcessor() override = default;

    const juce::String getName() const override { return "sequencer"; }

    void prepareToPlay (double newSampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // State management for transport settings
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree&) override;

    // Pin label overrides
    juce::String getAudioOutputLabel(int channel) const override;
    juce::String getAudioInputLabel(int channel) const override;
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    void setTimingInfo(const TransportState& state) override;

    juce::AudioProcessorValueTreeState apvts;

    std::atomic<int> currentStep { 0 };
    double phase { 0.0 };
    double sampleRate { 44100.0 };

    TransportState m_currentTransport;
    bool wasPlaying = false;

    std::atomic<float>* rateParam { nullptr };
    std::atomic<float>* gateLengthParam { nullptr };
    std::atomic<float>* gateThresholdParam { nullptr };
    std::atomic<float>* rateModParam { nullptr };
    std::atomic<float>* gateLengthModParam { nullptr };
    std::atomic<float>* numStepsModParam { nullptr };
    std::atomic<float>* stepsModMaxParam { nullptr };
    std::vector<std::atomic<float>*> pitchParams; // size MAX_STEPS
    std::vector<std::atomic<float>*> stepModParams; // size MAX_STEPS
    // Per-step trigger base (checkbox) and modulation
    std::vector<juce::AudioParameterBool*> stepTrigParams; // size MAX_STEPS
    std::vector<std::atomic<float>*> stepTrigModParams;    // size MAX_STEPS (0..1)
    // Per-step gate level parameters
    std::vector<std::atomic<float>*> stepGateParams;       // size MAX_STEPS (0..1)
    std::atomic<float>* numStepsParam { nullptr };

    // Pulse generator state for Trigger Out
    int pendingTriggerSamples { 0 };
    
    // Gate fade-in state
    bool previousGateOn { false };
    float gateFadeProgress { 0.0f };
    static constexpr float GATE_FADE_TIME_MS = 5.0f; // 5ms fade-in time
};

// Pin label overrides
inline juce::String StepSequencerModuleProcessor::getAudioOutputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Pitch";
        case 1: return "Gate";
        case 2: return "Gate Nuanced";
        case 3: return "Velocity";
        case 4: return "Mod";
        case 5: return "Trigger";
        default: return juce::String("Out ") + juce::String(channel + 1);
    }
}

inline juce::String StepSequencerModuleProcessor::getAudioInputLabel(int channel) const
{
    switch (channel)
    {
        case 0: return "Mod In L";
        case 1: return "Mod In R";
        case 2: return "Rate Mod";
        case 3: return "Gate Mod";
        case 4: return "Steps Mod";
        default: return juce::String("In ") + juce::String(channel + 1);
    }
}




================================================================================
FILE: juce\Source\audio\modules\TempoClockModuleProcessor.cpp
================================================================================


#include "TempoClockModuleProcessor.h"
#include "../graph/ModularSynthProcessor.h"

TempoClockModuleProcessor::TempoClockModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Mods", juce::AudioChannelSet::discreteChannels(8), true)    // bpm,tap,nudge+,nudge-,play,stop,reset,swing
          .withOutput("Clock", juce::AudioChannelSet::discreteChannels(7), true)), // clock, beatTrig, barTrig, beatGate, phase, bpmCv, downbeat
      apvts(*this, nullptr, "TempoClockParams", createParameterLayout())
{
    bpmParam = apvts.getRawParameterValue("bpm");
    swingParam = apvts.getRawParameterValue("swing");
    divisionParam = apvts.getRawParameterValue("division");
    gateWidthParam = apvts.getRawParameterValue("gateWidth");
    takeoverParam = apvts.getRawParameterValue("takeover");
}

juce::AudioProcessorValueTreeState::ParameterLayout TempoClockModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>("bpm", "BPM", juce::NormalisableRange<float>(20.0f, 300.0f, 0.01f, 0.3f), 120.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("swing", "Swing", juce::NormalisableRange<float>(0.0f, 0.75f, 0.0f, 1.0f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("division", "Division", juce::StringArray{"1/32","1/16","1/8","1/4","1/2","1","2","4"}, 3));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("gateWidth", "Gate Width", juce::NormalisableRange<float>(0.01f, 0.99f, 0.0f, 1.0f), 0.5f));
    params.push_back(std::make_unique<juce::AudioParameterBool>("takeover", "External Takeover", false));
    return { params.begin(), params.end() };
}

void TempoClockModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(samplesPerBlock);
    sampleRateHz = sampleRate;
}

void TempoClockModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto in = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);
    out.clear();

    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0 || sampleRateHz <= 0.0)
        return;

    // Read CV inputs ONLY if connected (BestPractice/TTS pattern)
    const bool bpmMod = isParamInputConnected("bpm_mod");
    const bool tapMod = isParamInputConnected("tap_mod");
    const bool nudgeUpMod = isParamInputConnected("nudge_up_mod");
    const bool nudgeDownMod = isParamInputConnected("nudge_down_mod");
    const bool playMod = isParamInputConnected("play_mod");
    const bool stopMod = isParamInputConnected("stop_mod");
    const bool resetMod = isParamInputConnected("reset_mod");
    const bool swingMod = isParamInputConnected("swing_mod");

    const float* bpmCV       = (bpmMod       && in.getNumChannels() > 0) ? in.getReadPointer(0) : nullptr;
    const float* tapCV       = (tapMod       && in.getNumChannels() > 1) ? in.getReadPointer(1) : nullptr;
    const float* nudgeUpCV   = (nudgeUpMod   && in.getNumChannels() > 2) ? in.getReadPointer(2) : nullptr;
    const float* nudgeDownCV = (nudgeDownMod && in.getNumChannels() > 3) ? in.getReadPointer(3) : nullptr;
    const float* playCV      = (playMod      && in.getNumChannels() > 4) ? in.getReadPointer(4) : nullptr;
    const float* stopCV      = (stopMod      && in.getNumChannels() > 5) ? in.getReadPointer(5) : nullptr;
    const float* resetCV     = (resetMod     && in.getNumChannels() > 6) ? in.getReadPointer(6) : nullptr;
    const float* swingCV     = (swingMod     && in.getNumChannels() > 7) ? in.getReadPointer(7) : nullptr;

    float bpm = bpmParam->load();
    if (bpmCV)
    {
        const float cv = juce::jlimit(0.0f, 1.0f, bpmCV[0]);
        // Map 0..1 -> 20..300 with perceptual curve
        bpm = juce::jmap(std::pow(cv, 0.3f), 0.0f, 1.0f, 20.0f, 300.0f);
    }

    float swing = swingParam ? swingParam->load() : 0.0f;
    if (swingCV)
        swing = juce::jlimit(0.0f, 0.75f, swingCV[0]);

    // Publish live telemetry
    setLiveParamValue("bpm_live", bpm);
    setLiveParamValue("swing_live", swing);

    // Handle edge controls (play/stop/reset/tap/nudge)
    auto edge = [&](const float* cv, bool& last){ bool now = (cv && cv[0] > 0.5f); bool rising = now && !last; last = now; return rising; };
    if (edge(playCV, lastPlayHigh))   if (auto* p = getParent()) p->setPlaying(true);
    if (edge(stopCV, lastStopHigh))   if (auto* p = getParent()) p->setPlaying(false);
    if (edge(resetCV, lastResetHigh)) if (auto* p = getParent()) p->resetTransportPosition();
    if (edge(tapCV, lastTapHigh))   { samplesSinceLastTap = 0.0; }
    if (edge(nudgeUpCV, lastNudgeUpHigh))   { bpm = juce::jlimit(20.0f, 300.0f, bpm + 0.5f); }
    if (edge(nudgeDownCV, lastNudgeDownHigh)) { bpm = juce::jlimit(20.0f, 300.0f, bpm - 0.5f); }

    // External takeover: write BPM to parent transport AFTER nudges
    if (takeoverParam && takeoverParam->load() > 0.5f)
    {
        if (auto* parent = getParent())
            parent->setBPM(bpm);
    }

    // Compute outputs
    float* clockOut = out.getNumChannels() > 0 ? out.getWritePointer(0) : nullptr;
    float* beatTrig = out.getNumChannels() > 1 ? out.getWritePointer(1) : nullptr;
    float* barTrig  = out.getNumChannels() > 2 ? out.getWritePointer(2) : nullptr;
    float* beatGate = out.getNumChannels() > 3 ? out.getWritePointer(3) : nullptr;
    float* phaseOut = out.getNumChannels() > 4 ? out.getWritePointer(4) : nullptr;
    float* bpmOut   = out.getNumChannels() > 5 ? out.getWritePointer(5) : nullptr;
    float* downbeat = out.getNumChannels() > 6 ? out.getWritePointer(6) : nullptr;

    int divisionIdx = divisionParam ? (int)divisionParam->load() : 3; // default 1/4
    // Broadcast division to transport so sync-enabled modules can follow
    if (auto* parent = getParent())
        parent->setGlobalDivisionIndex(divisionIdx);
    static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0 };
    const double div = divisions[juce::jlimit(0, 7, divisionIdx)];

    // Use transport position + per-sample advancement to produce stable clock
    double sr = juce::jmax(1.0, sampleRateHz);
    double localBeatsStart = m_currentTransport.songPositionBeats;
    double phaseBeats = localBeatsStart;

    for (int i = 0; i < numSamples; ++i)
    {
        // Advance beats using current bpm
        phaseBeats += (1.0 / sr) * (bpm / 60.0);

        // Subdivision phase
        const double scaled = phaseBeats * div;
        const double frac = scaled - std::floor(scaled);

        if (phaseOut) phaseOut[i] = (float) frac;
        if (clockOut) clockOut[i] = frac < 0.01 ? 1.0f : 0.0f;
        if (bpmOut) bpmOut[i] = juce::jmap(bpm, 20.0f, 300.0f, 0.0f, 1.0f);

        // Beat/bar triggers from integer boundaries
        const int beatIndex = (int) std::floor(phaseBeats);
        const int barIndex = beatIndex / 4;
        if (beatTrig) beatTrig[i] = (beatIndex > lastBeatIndex) ? 1.0f : 0.0f;
        if (barTrig)  barTrig[i]  = (barIndex > lastBarIndex)   ? 1.0f : 0.0f;
        if (downbeat) downbeat[i] = (beatIndex > lastBeatIndex && (beatIndex % 4) == 0) ? 1.0f : 0.0f;

        // Gate width within subdivision
        const float gw = gateWidthParam ? gateWidthParam->load() : 0.5f;
        if (beatGate) beatGate[i] = (float)(frac < gw ? 1.0 : 0.0);

        lastBeatIndex = beatIndex;
        lastBarIndex = barIndex;
    }

    // Telemetry and meter
    setLiveParamValue("phase_live", (float)(phaseBeats - std::floor(phaseBeats)));
    if (!lastOutputValues.empty())
    {
        if (!lastOutputValues[0]) lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
        if (lastOutputValues[0]) lastOutputValues[0]->store(out.getNumChannels() > 0 ? out.getSample(0, numSamples - 1) : 0.0f);
    }
}

// Parameter routing: virtual IDs on single input bus
bool TempoClockModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0;
    if (paramId == "bpm_mod") { outChannelIndexInBus = 0; return true; }
    if (paramId == "tap_mod") { outChannelIndexInBus = 1; return true; }
    if (paramId == "nudge_up_mod") { outChannelIndexInBus = 2; return true; }
    if (paramId == "nudge_down_mod") { outChannelIndexInBus = 3; return true; }
    if (paramId == "play_mod") { outChannelIndexInBus = 4; return true; }
    if (paramId == "stop_mod") { outChannelIndexInBus = 5; return true; }
    if (paramId == "reset_mod") { outChannelIndexInBus = 6; return true; }
    if (paramId == "swing_mod") { outChannelIndexInBus = 7; return true; }
    return false;
}

#if defined(PRESET_CREATOR_UI)
void TempoClockModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth(itemWidth);

    // Title row with EXT badge and status
    const bool ext = takeoverParam && takeoverParam->load() > 0.5f;
    if (ext)
    {
        ImGui::TextColored(ImVec4(0.2f, 1.0f, 0.8f, 1.0f), "EXT TEMPO");
        ImGui::SameLine();
    }
    ImGui::Text("Clock");

    // BPM slider with live display
    bool bpmMod = isParamModulated("bpm_mod");
    float bpm = bpmMod ? getLiveParamValueFor("bpm_mod", "bpm_live", bpmParam->load()) : bpmParam->load();
    if (bpmMod) { ImGui::BeginDisabled(); }
    if (ImGui::SliderFloat("BPM", &bpm, 20.0f, 300.0f, "%.1f"))
    {
        if (!bpmMod)
        {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("bpm"))) *p = bpm;
            if (ext) if (auto* parent = getParent()) parent->setBPM(bpm);
        }
        onModificationEnded();
    }
    if (!bpmMod) adjustParamOnWheel(apvts.getParameter("bpm"), "bpm", bpm);
    if (bpmMod) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Swing
    bool swingM = isParamModulated("swing_mod");
    float swing = swingM ? getLiveParamValueFor("swing_mod", "swing_live", swingParam->load()) : swingParam->load();
    if (swingM) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Swing", &swing, 0.0f, 0.75f, "%.2f"))
    {
        if (!swingM)
        {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("swing"))) *p = swing;
        }
        onModificationEnded();
    }
    if (!swingM) adjustParamOnWheel(apvts.getParameter("swing"), "swing", swing);
    if (swingM) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Division + Gate width in-line
    int div = divisionParam ? (int)divisionParam->load() : 3;
    const char* items[] = { "1/32","1/16","1/8","1/4","1/2","1","2","4" };
    ImGui::SetNextItemWidth(itemWidth * 0.5f);
    if (ImGui::Combo("Division", &div, items, 8))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("division"))) *p = div;
        onModificationEnded();
    }

    float gw = gateWidthParam ? gateWidthParam->load() : 0.5f;
    ImGui::SetNextItemWidth(itemWidth * 0.45f);
    if (ImGui::SliderFloat("Gate Width", &gw, 0.01f, 0.99f, "%.2f"))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("gateWidth"))) *p = gw;
        onModificationEnded();
    }

    // Takeover toggle
    bool tk = takeoverParam && takeoverParam->load() > 0.5f;
    if (ImGui::Checkbox("External Takeover", &tk))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("takeover"))) *p = tk;
        onModificationEnded();
    }

    // Live readouts row (phase, bpm)
    ImGui::Text("Phase: %.2f  |  BPM: %.1f", getLiveParamValue("phase_live", 0.0f), getLiveParamValue("bpm_live", bpmParam->load()));

    ImGui::PopItemWidth();
}

void TempoClockModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("BPM Mod", 0);
    helpers.drawAudioInputPin("Tap", 1);
    helpers.drawAudioInputPin("Nudge+", 2);
    helpers.drawAudioInputPin("Nudge-", 3);
    helpers.drawAudioInputPin("Play", 4);
    helpers.drawAudioInputPin("Stop", 5);
    helpers.drawAudioInputPin("Reset", 6);
    helpers.drawAudioInputPin("Swing Mod", 7);

    helpers.drawAudioOutputPin("Clock", 0);
    helpers.drawAudioOutputPin("Beat Trig", 1);
    helpers.drawAudioOutputPin("Bar Trig", 2);
    helpers.drawAudioOutputPin("Beat Gate", 3);
    helpers.drawAudioOutputPin("Phase", 4);
    helpers.drawAudioOutputPin("BPM CV", 5);
    helpers.drawAudioOutputPin("Downbeat", 6);
}
#endif




================================================================================
FILE: juce\Source\audio\modules\TempoClockModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class TempoClockModuleProcessor : public ModuleProcessor
{
public:
    TempoClockModuleProcessor();
    ~TempoClockModuleProcessor() override = default;

    const juce::String getName() const override { return "tempo clock"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    void setTimingInfo(const TransportState& state) override { m_currentTransport = state; }

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    // Parameter bus contract (virtual modulation IDs)
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "BPM Mod";
            case 1: return "Tap";
            case 2: return "Nudge+";
            case 3: return "Nudge-";
            case 4: return "Play";
            case 5: return "Stop";
            case 6: return "Reset";
            case 7: return "Swing Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Clock";
            case 1: return "Beat Trig";
            case 2: return "Bar Trig";
            case 3: return "Beat Gate";
            case 4: return "Phase";
            case 5: return "BPM CV";
            case 6: return "Downbeat";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    // Parameters
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* bpmParam { nullptr };
    std::atomic<float>* swingParam { nullptr };
    std::atomic<float>* divisionParam { nullptr };
    std::atomic<float>* gateWidthParam { nullptr };
    std::atomic<float>* takeoverParam { nullptr };

    // Transport cache for per-block start
    TransportState m_currentTransport;

    // Internal state for tap/nudge and trigger edge detection
    double sampleRateHz { 0.0 };
    int lastBeatIndex { 0 };
    int lastBarIndex { 0 };
    double lastScaledBeats { 0.0 };
    bool lastPlayHigh { false };
    bool lastStopHigh { false };
    bool lastResetHigh { false };
    bool lastTapHigh { false };
    bool lastNudgeUpHigh { false };
    bool lastNudgeDownHigh { false };
    double samplesSinceLastTap { 0.0 };
};




================================================================================
FILE: juce\Source\audio\modules\TimePitchModuleProcessor.cpp
================================================================================


#include "TimePitchModuleProcessor.h"

static inline void ensureCapacity (juce::HeapBlock<float>& block, int frames, int channels, int& capacityFrames)
{
    if (frames > capacityFrames)
    {
        capacityFrames = juce::jmax (frames, capacityFrames * 2 + 128);
        block.allocate ((size_t) (capacityFrames * channels), true);
    }
}

juce::AudioProcessorValueTreeState::ParameterLayout TimePitchModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdSpeed, "Speed", juce::NormalisableRange<float> (0.25f, 4.0f, 0.0001f, 0.5f), 1.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdPitch, "Pitch (st)", juce::NormalisableRange<float> (-24.0f, 24.0f, 0.01f), 0.0f));
    p.push_back (std::make_unique<juce::AudioParameterChoice> (paramIdEngine, "Engine", juce::StringArray { "RubberBand", "Naive" }, 0));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdSpeedMod, "Speed Mod", juce::NormalisableRange<float> (0.25f, 4.0f, 0.0001f, 0.5f), 1.0f));
    p.push_back (std::make_unique<juce::AudioParameterFloat> (paramIdPitchMod, "Pitch Mod", juce::NormalisableRange<float> (-24.0f, 24.0f, 0.01f), 0.0f));
    return { p.begin(), p.end() };
}

TimePitchModuleProcessor::TimePitchModuleProcessor()
    : ModuleProcessor (BusesProperties()
        .withInput ("Inputs", juce::AudioChannelSet::discreteChannels(4), true) // ch0 L in, ch1 R in, ch2 Speed Mod, ch3 Pitch Mod
        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts (*this, nullptr, "TimePitchParams", createParameterLayout())
{
    speedParam     = apvts.getRawParameterValue (paramIdSpeed);
    pitchParam     = apvts.getRawParameterValue (paramIdPitch);
    speedModParam  = apvts.getRawParameterValue (paramIdSpeedMod);
    pitchModParam  = apvts.getRawParameterValue (paramIdPitchMod);
    engineParam    = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter (paramIdEngine));

    lastOutputValues.clear();
    lastOutputValues.push_back (std::make_unique<std::atomic<float>> (0.0f));
    lastOutputValues.push_back (std::make_unique<std::atomic<float>> (0.0f));
    
    // Initialize smoothed values
    speedSm.reset(1.0f);
    pitchSm.reset(0.0f);
}

void TimePitchModuleProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    sr = sampleRate;
    timePitch.prepare (sampleRate, 2, samplesPerBlock);

    // Initialize FIFO to ~2 seconds of audio
    fifoSize = (int) (sampleRate * 2.0);
    if (fifoSize < samplesPerBlock * 4) fifoSize = samplesPerBlock * 4; // safety minimum
    inputFifo.setSize (2, fifoSize);
    abstractFifo.setTotalSize (fifoSize);

    interleavedCapacityFrames = 0;
    ensureCapacity (interleavedInput, samplesPerBlock, 2, interleavedCapacityFrames);
    ensureCapacity (interleavedOutput, samplesPerBlock * 2, 2, interleavedCapacityFrames); // some headroom
    timePitch.reset();
}

void TimePitchModuleProcessor::processBlock (juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused (midi);
    auto inBus = getBusBuffer(buffer, true, 0);  // Single bus
    auto outBus = getBusBuffer(buffer, false, 0);
    
    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // 1) Write incoming audio into FIFO (use inBus explicitly)
    int start1=0,size1=0,start2=0,size2=0;
    abstractFifo.prepareToWrite (numSamples, start1, size1, start2, size2);
    if (size1 > 0)
    {
        inputFifo.copyFrom (0, start1, inBus, 0, 0, size1);
        inputFifo.copyFrom (1, start1, inBus, 1, 0, size1);
    }
    if (size2 > 0)
    {
        inputFifo.copyFrom (0, start2, inBus, 0, size1, size2);
        inputFifo.copyFrom (1, start2, inBus, 1, size1, size2);
    }
    const int written = size1 + size2;
    abstractFifo.finishedWrite (written);

    // 2) Read params and configure engine
    const int engineIdx = engineParam != nullptr ? engineParam->getIndex() : 0;
    {
        static int currentMode = -1;
        const int requestedMode = (engineIdx == 0 ? (int) TimePitchProcessor::Mode::RubberBand : (int) TimePitchProcessor::Mode::Fifo);
        if (requestedMode != currentMode)
        {
            timePitch.reset();
            currentMode = requestedMode;
        }
        timePitch.setMode ((TimePitchProcessor::Mode) requestedMode);
    }

    // Get pointers to modulation CV inputs
    const bool isSpeedMod = isParamInputConnected("speed");
    const bool isPitchMod = isParamInputConnected("pitch");
    
    const float* speedCV = isSpeedMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* pitchCV = isPitchMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    
    // Process in slices to reduce engine reconfig cost
    const int sliceSize = 32;
    for (int sliceStart = 0; sliceStart < numSamples; sliceStart += sliceSize)
    {
        const int sliceEnd = juce::jmin(sliceStart + sliceSize, numSamples);
        const int sliceSamples = sliceEnd - sliceStart;
        
        // Calculate target values from CV (use middle of slice)
        const int midSample = sliceStart + sliceSamples / 2;
        
        float targetSpeed = speedParam->load();
        if (isSpeedMod && speedCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, speedCV[midSample]);
            const float minSpeed = 0.25f;
            const float maxSpeed = 4.0f;
            targetSpeed = minSpeed * std::pow(maxSpeed / minSpeed, cv);
        }
        
        float targetPitch = pitchParam->load();
        if (isPitchMod && pitchCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, pitchCV[midSample]);
            targetPitch = -24.0f + cv * 48.0f; // -24 to +24 semitones
        }
        
        // Set targets and advance smoothing
        speedSm.setTargetValue(juce::jlimit(0.1f, 4.0f, targetSpeed));
        pitchSm.setTargetValue(juce::jlimit(-24.0f, 24.0f, targetPitch));
        
        // Update telemetry for live UI feedback (once per slice)
        setLiveParamValue("speed_live", speedSm.getCurrentValue());
        setLiveParamValue("pitch_live", pitchSm.getCurrentValue());
        
        // Advance smoothing for this slice
        for (int i = 0; i < sliceSamples; ++i) {
            speedSm.skip(1);
            pitchSm.skip(1);
        }
        
        // Configure engine with current smoothed values
        timePitch.setTimeStretchRatio(speedSm.getCurrentValue());
        timePitch.setPitchSemitones(pitchSm.getCurrentValue());
        
        // Publish telemetry
        setLiveParamValue("speed", speedSm.getCurrentValue());
        setLiveParamValue("pitch", pitchSm.getCurrentValue());
    }

    // 3) Compute frames needed to fill this block
    const double safeSpeed = juce::jlimit (0.1, 4.0, (double) speedSm.getCurrentValue());
    const int framesToFeed = juce::jmax (1, (int) std::ceil ((double) numSamples / safeSpeed));

    outBus.clear();
    if (abstractFifo.getNumReady() >= framesToFeed)
    {
        // 4) Read from FIFO and interleave
        ensureCapacity (interleavedInput, framesToFeed, 2, interleavedCapacityFrames);
        abstractFifo.prepareToRead (framesToFeed, start1, size1, start2, size2);
        auto* inL = inputFifo.getReadPointer (0);
        auto* inR = inputFifo.getReadPointer (1);
        float* inLR = interleavedInput.getData();
        for (int i = 0; i < size1; ++i) { inLR[2*i+0] = inL[start1 + i]; inLR[2*i+1] = inR[start1 + i]; }
        if (size2 > 0)
            for (int i = 0; i < size2; ++i) { inLR[2*(size1+i)+0] = inL[start2 + i]; inLR[2*(size1+i)+1] = inR[start2 + i]; }
        const int readCount = size1 + size2;
        abstractFifo.finishedRead (readCount);

        // 5) Process and copy back
        // Guard against engine internal errors with try/catch (non-RT critical path)
        try { timePitch.putInterleaved (inLR, framesToFeed); }
        catch (...) { /* swallow to avoid crash; output will be silence */ }
        ensureCapacity (interleavedOutput, numSamples, 2, interleavedCapacityFrames);
        int produced = 0;
        try { produced = timePitch.receiveInterleaved (interleavedOutput.getData(), numSamples); }
        catch (...) { produced = 0; }
        if (produced > 0)
        {
            const int outFrames = juce::jmin (numSamples, produced);
            const float* outLR = interleavedOutput.getData();
            float* L = outBus.getNumChannels() > 0 ? outBus.getWritePointer (0) : buffer.getWritePointer(0);
            float* R = outBus.getNumChannels() > 1 ? outBus.getWritePointer (1) : L;
            for (int i = 0; i < outFrames; ++i) { L[i] = outLR[2*i+0]; if (R) R[i] = outLR[2*i+1]; }
        }
    }

    // Update lastOutputValues
    if (lastOutputValues.size() >= 2)
    {
        lastOutputValues[0]->store (buffer.getMagnitude (0, 0, numSamples));
        lastOutputValues[1]->store (buffer.getNumChannels() > 1 ? buffer.getMagnitude (1, 0, numSamples) : 0.0f);
    }
}

// Parameter bus contract implementation
bool TimePitchModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0;
    if (paramId == "speed") { outChannelIndexInBus = 2; return true; }  // Speed Mod
    if (paramId == "pitch") { outChannelIndexInBus = 3; return true; }  // Pitch Mod
    return false;
}

#if defined(PRESET_CREATOR_UI)
void TimePitchModuleProcessor::drawParametersInNode (float itemWidth,
                                                    const std::function<bool(const juce::String& paramId)>& isParamModulated,
                                                    const std::function<void()>& onModificationEnded)
{
    ImGui::PushItemWidth (itemWidth);
    auto& ap = getAPVTS();

    // Speed
    bool spMod = isParamModulated ("speed");
    if (spMod) { 
        ImGui::BeginDisabled(); 
        ImGui::PushStyleColor (ImGuiCol_FrameBg, ImVec4 (1,1,0,0.3f)); 
    }
    float speed = ap.getRawParameterValue (paramIdSpeed)->load();
    if (spMod) {
        speed = getLiveParamValueFor("speed", "speed_live", speed);
    }
    if (ImGui::SliderFloat ("Speed", &speed, 0.25f, 4.0f, "%.2fx")) {
        if (!spMod) {
            if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter (paramIdSpeed))) *p = speed;
        }
    }
    if (!spMod) adjustParamOnWheel (ap.getParameter (paramIdSpeed), paramIdSpeed, speed);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (spMod) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }

    // Pitch
    bool piMod = isParamModulated ("pitch");
    if (piMod) { 
        ImGui::BeginDisabled(); 
        ImGui::PushStyleColor (ImGuiCol_FrameBg, ImVec4 (1,1,0,0.3f)); 
    }
    float pitch = ap.getRawParameterValue (paramIdPitch)->load();
    if (piMod) {
        pitch = getLiveParamValueFor("pitch", "pitch_live", pitch);
    }
    if (ImGui::SliderFloat ("Pitch", &pitch, -24.0f, 24.0f, "%.1f st"))
        if (!piMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter (paramIdPitch))) *p = pitch;
    if (!piMod) adjustParamOnWheel (ap.getParameter (paramIdPitch), paramIdPitch, pitch);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (piMod) { ImGui::PopStyleColor(); ImGui::EndDisabled(); }

    // Engine
    int engineIdx = engineParam != nullptr ? engineParam->getIndex() : 0;
    const char* items[] = { "RubberBand", "Naive" };
    if (ImGui::Combo ("Engine", &engineIdx, items, 2))
        if (engineParam) *engineParam = engineIdx;
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();

    ImGui::PopItemWidth();
}

void TimePitchModuleProcessor::drawIoPins (const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin ("In L", 0);
    helpers.drawAudioInputPin ("In R", 1);
    helpers.drawAudioInputPin ("Speed Mod", 2);
    helpers.drawAudioInputPin ("Pitch Mod", 3);

    helpers.drawAudioOutputPin ("Out L", 0);
    helpers.drawAudioOutputPin ("Out R", 1);
}
#endif




================================================================================
FILE: juce\Source\audio\modules\TimePitchModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_core/juce_core.h>
#include <juce_dsp/juce_dsp.h>
#include "../dsp/TimePitchProcessor.h"

class TimePitchModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr const char* paramIdSpeed     = "speed";
    static constexpr const char* paramIdPitch     = "pitch";
    static constexpr const char* paramIdEngine    = "engine";
    static constexpr const char* paramIdSpeedMod  = "speed_mod";
    static constexpr const char* paramIdPitchMod  = "pitch_mod";

    TimePitchModuleProcessor();
    ~TimePitchModuleProcessor() override = default;

    const juce::String getName() const override { return "timepitch"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Speed Mod";
            case 3: return "Pitch Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override;
    void drawIoPins (const NodePinHelpers& helpers) override;
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;

    TimePitchProcessor timePitch;
    juce::HeapBlock<float> interleavedInput;
    juce::HeapBlock<float> interleavedOutput;
    int interleavedCapacityFrames { 0 };

    // Parameter pointers
    std::atomic<float>* speedParam { nullptr };
    std::atomic<float>* pitchParam { nullptr };
    std::atomic<float>* speedModParam { nullptr };
    std::atomic<float>* pitchModParam { nullptr };
    juce::AudioParameterChoice* engineParam { nullptr };
    double sr { 48000.0 };

    // --- Streaming FIFO for live input buffering ---
    juce::AudioBuffer<float> inputFifo; // stereo FIFO storage
    juce::AbstractFifo abstractFifo { 0 }; // manages read/write indices
    int fifoSize { 0 };
    
    // Smoothed parameters for zipper-free modulation
    juce::SmoothedValue<float> speedSm;
    juce::SmoothedValue<float> pitchSm;
};




================================================================================
FILE: juce\Source\audio\modules\TrackMixerModuleProcessor.cpp
================================================================================


#include "TrackMixerModuleProcessor.h"
#include <cmath>

TrackMixerModuleProcessor::TrackMixerModuleProcessor()
    : ModuleProcessor(BusesProperties()
          .withInput("Inputs", juce::AudioChannelSet::discreteChannels(MAX_TRACKS + 1 + (MAX_TRACKS * 2)), true) // 0-63: Audio, 64: NumTracks Mod, 65+: Gain/Pan Mods
          .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "TrackMixerParams", createParameterLayout())
{
    numTracksParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numTracks"));
    numTracksMaxParam = dynamic_cast<juce::AudioParameterInt*>(apvts.getParameter("numTracks_max"));

    trackGainParams.resize(MAX_TRACKS);
    trackPanParams.resize(MAX_TRACKS);
    for (int i = 0; i < MAX_TRACKS; ++i)
    {
        trackGainParams[i] = apvts.getRawParameterValue("track_gain_" + juce::String(i + 1));
        trackPanParams[i]  = apvts.getRawParameterValue("track_pan_" + juce::String(i + 1));
    }
    
    // Initialize lastOutputValues for cable inspector
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // Out R
    
  // Initialize effective track count for UI
  if (numTracksParam != nullptr)
      lastActiveTracks.store(numTracksParam->get());
}

juce::AudioProcessorValueTreeState::ParameterLayout TrackMixerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterInt>("numTracks", "Num Tracks", 2, MAX_TRACKS, 8));
    p.push_back(std::make_unique<juce::AudioParameterInt>("numTracks_max", "Num Tracks Max", 2, MAX_TRACKS, MAX_TRACKS));

    for (int i = 1; i <= MAX_TRACKS; ++i)
    {
        p.push_back(std::make_unique<juce::AudioParameterFloat>("track_gain_" + juce::String(i),
            "Track " + juce::String(i) + " Gain",
            juce::NormalisableRange<float>(-60.0f, 6.0f, 0.1f), 0.0f));
        p.push_back(std::make_unique<juce::AudioParameterFloat>("track_pan_" + juce::String(i),
            "Track " + juce::String(i) + " Pan",
            juce::NormalisableRange<float>(-1.0f, 1.0f, 0.01f), 0.0f));
    }
    return { p.begin(), p.end() };
}

void TrackMixerModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::ignoreUnused(sampleRate, samplesPerBlock);
}

void TrackMixerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    auto inBus  = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);

    const int numSamples = buffer.getNumSamples();
    
    // Determine the number of active tracks from the parameter or its modulation input
    int numTracks = numTracksParam->get();
    
    if (isParamInputConnected(paramIdNumTracksMod) && inBus.getNumChannels() > MAX_TRACKS)
    {
        float modValue = inBus.getReadPointer(MAX_TRACKS)[0]; // Channel 64 for numTracks mod

        // Interpret modValue as a raw track count (not normalized CV)
        int maxTracks = numTracksMaxParam->get();
        numTracks = juce::roundToInt(modValue); // Round the raw value to the nearest integer
        numTracks = juce::jlimit(2, maxTracks, numTracks); // Clamp it to the valid range
    }

    // Publish live value for UI and cache for drawing pins/controls
    lastActiveTracks.store(juce::jlimit(2, MAX_TRACKS, numTracks));
    setLiveParamValue("numTracks_live", (float) numTracks);

    juce::AudioBuffer<float> mixBus(2, numSamples);
    mixBus.clear();

    // Loop through every active track and add its sound to the mix
    for (int t = 0; t < numTracks; ++t)
    {
        const float* src = (t < inBus.getNumChannels()) ? inBus.getReadPointer(t) : nullptr;
        if (src == nullptr) continue;

        float* mixL = mixBus.getWritePointer(0);
        float* mixR = mixBus.getWritePointer(1);

        const juce::String trackNumStr = juce::String(t + 1);

        const bool isGainModulated = isParamInputConnected(paramIdGainModPrefix + trackNumStr);
        const bool isPanModulated  = isParamInputConnected(paramIdPanModPrefix + trackNumStr);

        if (!isGainModulated && !isPanModulated)
        {
            // Optimized path for non-modulated tracks
            const float gainDb = trackGainParams[t]->load();
            const float panVal = trackPanParams[t]->load();
            const float gainLin = juce::Decibels::decibelsToGain(gainDb);
            const float angle = (panVal * 0.5f + 0.5f) * juce::MathConstants<float>::halfPi;
            const float lMul = gainLin * std::cos(angle);
            const float rMul = gainLin * std::sin(angle);
            juce::FloatVectorOperations::addWithMultiply(mixL, src, lMul, numSamples);
            juce::FloatVectorOperations::addWithMultiply(mixR, src, rMul, numSamples);
        }
        else // Per-sample processing is needed if either gain or pan is modulated
        {
            const float baseGainDb = trackGainParams[t]->load();
            const float basePan = trackPanParams[t]->load();
            
            // Get modulation signals from unified input bus
            const int gainModChannel = MAX_TRACKS + 1 + (t * 2);
            const int panModChannel = MAX_TRACKS + 1 + (t * 2) + 1;
            const float* gainModSignal = isGainModulated && inBus.getNumChannels() > gainModChannel ? inBus.getReadPointer(gainModChannel) : nullptr;
            const float* panModSignal  = isPanModulated && inBus.getNumChannels() > panModChannel ? inBus.getReadPointer(panModChannel) : nullptr;

            for (int i = 0; i < numSamples; ++i)
            {
                float currentGainDb = isGainModulated && gainModSignal ? juce::jmap(gainModSignal[i], 0.0f, 1.0f, -60.0f, 6.0f) : baseGainDb;
                float currentPan    = isPanModulated && panModSignal ? juce::jmap(panModSignal[i], 0.0f, 1.0f, -1.0f, 1.0f) : basePan;
                
                const float gainLin = juce::Decibels::decibelsToGain(currentGainDb);
                const float angle = (currentPan * 0.5f + 0.5f) * juce::MathConstants<float>::halfPi;
                const float lMul = gainLin * std::cos(angle);
                const float rMul = gainLin * std::sin(angle);
                
                mixL[i] += src[i] * lMul;
                mixR[i] += src[i] * rMul;
                
                // Store live values for UI telemetry (update every 64 samples to avoid overhead)
                if ((i & 0x3F) == 0)
                {
                    if (isGainModulated) setLiveParamValue("track_gain_" + trackNumStr + "_live", currentGainDb);
                    if (isPanModulated) setLiveParamValue("track_pan_" + trackNumStr + "_live", currentPan);
                }
            }
        }
    }
    
    // Copy the final mixed signal to the output
    outBus.copyFrom(0, 0, mixBus, 0, 0, numSamples);
    if (outBus.getNumChannels() > 1)
        outBus.copyFrom(1, 0, mixBus, 1, 0, numSamples);
}

int TrackMixerModuleProcessor::getEffectiveNumTracks() const
{
    return numTracksParam ? numTracksParam->get() : 8;
}

void TrackMixerModuleProcessor::getStateInformation(juce::MemoryBlock& destData)
{
    auto state = apvts.copyState();
    std::unique_ptr<juce::XmlElement> xml(state.createXml());
    copyXmlToBinary(*xml, destData);
}

void TrackMixerModuleProcessor::setStateInformation(const void* data, int sizeInBytes)
{
    std::unique_ptr<juce::XmlElement> xmlState(getXmlFromBinary(data, sizeInBytes));
    if (xmlState.get() != nullptr)
        if (xmlState->hasTagName(apvts.state.getType()))
            apvts.replaceState(juce::ValueTree::fromXml(*xmlState));
}

#if defined(PRESET_CREATOR_UI)
void TrackMixerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    const int activeTracks = getEffectiveNumTracks();

    // --- Master "Tracks" Slider with correct modulation detection ---
    const bool isCountModulated = isParamModulated(paramIdNumTracksMod);
    int displayedTracks = numTracksParam->get();
    // If modulated, show the live computed value in the disabled slider
    if (isCountModulated)
        displayedTracks = juce::roundToInt(getLiveParamValueFor(paramIdNumTracksMod, "numTracks_live", (float) displayedTracks));
    const int maxTracksBound = numTracksMaxParam->get();

    if (isCountModulated) ImGui::BeginDisabled();
    
    ImGui::PushItemWidth(itemWidth);
    if (ImGui::SliderInt("Tracks", &displayedTracks, 2, maxTracksBound))
    {
        if (!isCountModulated)
        {
            *numTracksParam = displayedTracks;
            onModificationEnded();
        }
    }
    if (!isCountModulated)
    {
        adjustParamOnWheel(ap.getParameter("numTracks"), "numTracks", (float)displayedTracks);
    }
    if (ImGui::IsItemDeactivatedAfterEdit() && !isCountModulated) { onModificationEnded(); }
    ImGui::PopItemWidth();

    if (isCountModulated)
    {
        ImGui::EndDisabled();
        ImGui::SameLine();
        ImGui::TextUnformatted("(mod)");
    }


    // --- Per-Track Sliders (Dynamically created for all active tracks) ---
    // --- FIX: Use the 'displayedTracks' variable here, which respects modulation ---
    for (int t = 0; t < displayedTracks; ++t)
    {
        ImGui::PushID(t);
        const juce::String trackNumStr = juce::String(t + 1);
        
        auto* gainParamPtr = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("track_gain_" + trackNumStr));
        auto* panParamPtr  = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("track_pan_" + trackNumStr));

        if (!gainParamPtr || !panParamPtr)
        {
            ImGui::PopID();
            continue;
        }

        // --- Gain Slider for Track t+1 ---
        const bool isGainModulated = isParamModulated("track_gain_" + trackNumStr);
        float gainVal = gainParamPtr->get(); // Get base value
        if (isGainModulated)
        {
            // If modulated, show the live computed value
            gainVal = getLiveParamValueFor("track_gain_" + trackNumStr, "track_gain_" + trackNumStr + "_live", gainVal);
            ImGui::BeginDisabled();
        }

        ImGui::PushItemWidth(itemWidth * 0.5f - 20); // Adjust width for mod indicator
        if (ImGui::SliderFloat(("G" + trackNumStr).toRawUTF8(), &gainVal, -60.0f, 6.0f, "%.1f dB"))
        {
            if (!isGainModulated) *gainParamPtr = gainVal;
        }
        if (!isGainModulated) adjustParamOnWheel(gainParamPtr, "gain", gainVal);
        if (ImGui::IsItemDeactivatedAfterEdit() && !isGainModulated) { onModificationEnded(); }
        ImGui::PopItemWidth();

        if (isGainModulated)
        {
            ImGui::EndDisabled();
            ImGui::SameLine();
            ImGui::TextUnformatted("(m)");
        }

        ImGui::SameLine();

        // --- Pan Slider for Track t+1 ---
        const bool isPanModulated = isParamModulated("track_pan_" + trackNumStr);
        float panVal  = panParamPtr->get(); // Get base value
        if (isPanModulated)
        {
            // If modulated, show the live computed value
            panVal = getLiveParamValueFor("track_pan_" + trackNumStr, "track_pan_" + trackNumStr + "_live", panVal);
            ImGui::BeginDisabled();
        }
        
        ImGui::PushItemWidth(itemWidth * 0.5f - 20); // Adjust width for mod indicator
        if (ImGui::SliderFloat(("P" + trackNumStr).toRawUTF8(), &panVal, -1.0f, 1.0f, "%.2f"))
        {
            if (!isPanModulated) *panParamPtr = panVal;
        }
        if (!isPanModulated) adjustParamOnWheel(panParamPtr, "pan", panVal);
        if (ImGui::IsItemDeactivatedAfterEdit() && !isPanModulated) { onModificationEnded(); }
        ImGui::PopItemWidth();

        if (isPanModulated)
        {
            ImGui::EndDisabled();
            ImGui::SameLine();
            ImGui::TextUnformatted("(m)");
        }
        
        ImGui::PopID();
    }
}
#endif

// Human-legible per-channel labels for the single multichannel input bus
juce::String TrackMixerModuleProcessor::getAudioInputLabel(int channel) const
{
    // Channel names mirror visual controls: Audio N, Num Tracks Mod, Gain N Mod, Pan N Mod
    // Audio inputs occupy channels [0 .. MAX_TRACKS-1]
    if (channel >= 0 && channel < MAX_TRACKS)
        return "Audio " + juce::String(channel + 1);
    // Mod lanes begin after audio inputs
    const int modBase = MAX_TRACKS; // conceptual; we expose labels by absolute channel
    // For labeling, we follow the param routing: 0: numTracks, then pairs for each track
    const int idx = channel - MAX_TRACKS;
    if (idx == 0) return "Num Tracks Mod";
    if (idx > 0)
    {
        const int pair = (idx - 1) / 2; // 0-based track
        const bool isGain = ((idx - 1) % 2) == 0;
        if (pair >= 0 && pair < MAX_TRACKS)
            return juce::String(isGain ? "Gain " : "Pan ") + juce::String(pair + 1) + " Mod";
    }
    return {};
}

void TrackMixerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Use the last value computed on audio thread if available
    const int activeTracks = juce::jlimit(2, MAX_TRACKS, lastActiveTracks.load());

    // --- Draw Output Pins First ---
    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);

    // --- Draw Input Pins ---
    // Replace generic bus pins with human-legible per-channel pins
    for (int t = 0; t < activeTracks; ++t)
        helpers.drawAudioInputPin(("Audio " + juce::String(t + 1)).toRawUTF8(), t);

    // --- Draw Modulation Pins ---
    int busIdx, chanInBus;
    if (getParamRouting(paramIdNumTracksMod, busIdx, chanInBus))
        helpers.drawAudioInputPin("Num Tracks Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

    // Draw per-track modulation pins
    for (int t = 1; t <= activeTracks; ++t)
    {
        const juce::String trackNumStr = juce::String(t);
        const juce::String gainModId = paramIdGainModPrefix + trackNumStr;
        const juce::String panModId = paramIdPanModPrefix + trackNumStr;

        if (getParamRouting(gainModId, busIdx, chanInBus))
            helpers.drawAudioInputPin(("Gain " + trackNumStr + " Mod").toRawUTF8(), getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        if (getParamRouting(panModId, busIdx, chanInBus))
            helpers.drawAudioInputPin(("Pan " + trackNumStr + " Mod").toRawUTF8(), getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    }
}

bool TrackMixerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // All modulation is on the single input bus
    outBusIndex = 0;

    if (paramId == paramIdNumTracksMod)
    {
        outChannelIndexInBus = MAX_TRACKS; // Channel 64
        return true;
    }

    if (paramId.startsWith(paramIdGainModPrefix))
    {
        const juce::String trackNumStr = paramId.substring(juce::String(paramIdGainModPrefix).length());
        const int trackNum = trackNumStr.getIntValue();
        if (trackNum > 0 && trackNum <= MAX_TRACKS)
        {
            outChannelIndexInBus = MAX_TRACKS + 1 + (trackNum - 1) * 2; // Gain channels start at 65
            return true;
        }
    }
    else if (paramId.startsWith(paramIdPanModPrefix))
    {
        const juce::String trackNumStr = paramId.substring(juce::String(paramIdPanModPrefix).length());
        const int trackNum = trackNumStr.getIntValue();
        if (trackNum > 0 && trackNum <= MAX_TRACKS)
        {
            outChannelIndexInBus = MAX_TRACKS + 1 + (trackNum - 1) * 2 + 1; // Pan channels start at 66
            return true;
        }
    }
    return false;
}

================================================================================
FILE: juce\Source\audio\modules\TrackMixerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class TrackMixerModuleProcessor : public ModuleProcessor
{
public:
    static constexpr int MAX_TRACKS = 64;

    TrackMixerModuleProcessor();
    ~TrackMixerModuleProcessor() override = default;

    const juce::String getName() const override { return "track mixer"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi) override;
    void getStateInformation(juce::MemoryBlock& destData) override;
    void setStateInformation(const void* data, int sizeInBytes) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // Per-channel label used by cable inspector and tooltips
    juce::String getAudioInputLabel(int channel) const override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated,
                              const std::function<void()>& onModificationEnded) override;
#endif

private:
    juce::AudioProcessorValueTreeState apvts;

    // Global controls
    juce::AudioParameterInt* numTracksParam { nullptr };
    juce::AudioParameterInt* numTracksMaxParam { nullptr }; // To bound modulation

    // Per-track controls
    std::vector<std::atomic<float>*> trackGainParams;
    std::vector<std::atomic<float>*> trackPanParams;

    // Virtual modulation target IDs (no APVTS parameters required)
    static constexpr auto paramIdNumTracksMod = "numTracks_mod";
    static constexpr auto paramIdGainModPrefix = "track_gain_";
    static constexpr auto paramIdPanModPrefix = "track_pan_";

    // Modulation parameter pointers are no longer needed
    // std::vector<std::atomic<float>*> trackGainModParams;
    // std::vector<std::atomic<float>*> trackPanModParams;

    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    int getEffectiveNumTracks() const;

    mutable std::atomic<int> lastActiveTracks { 2 };
    static constexpr float kNeutral = 0.5f;
    static constexpr float kDeadZone = 0.02f; // treat values within +/-2% around neutral as no-mod
};




================================================================================
FILE: juce\Source\audio\modules\TTSPerformerModuleProcessor.cpp
================================================================================


#include "TTSPerformerModuleProcessor.h"
#include <juce_audio_formats/juce_audio_formats.h>
#include <nlohmann/json.hpp>
#include <unordered_set>

// --- Audio-based Word Detection Implementation ---
// This function is used when JSON timing data is not available from piper.exe
std::vector<WordTiming> TTSPerformerModuleProcessor::detectWordsFromAudio(const juce::AudioBuffer<float>& audio, double sr)
{
    std::vector<WordTiming> timings;
    if (audio.getNumSamples() == 0 || sr <= 0.0)
        return timings;

    // --- MORE AGGRESSIVE PARAMETERS FOR FINER SLICING ---
    const int windowSize = 256;           // Analyze in smaller chunks (was 1024).
    const float energyThreshold = 0.01f;    // Lower the volume needed to be considered sound (was 0.02f).
    const float silenceThreshold = 0.008f;  // Require audio to be quieter to be considered silence (was 0.01f).
    const double minSilenceSec = 0.04;      // Require only 40ms of silence to split words (was 0.1s).
    const double minWordSec = 0.05;         // 50ms minimum duration for a sound to be a "word".

    enum class State { IN_SILENCE, IN_WORD };
    State state = State::IN_SILENCE;

    double wordStartTime = 0.0;
    int silenceCounter = 0;
    const int minSilenceSamples = (int)(minSilenceSec * sr);

    for (int i = 0; i < audio.getNumSamples(); i += windowSize)
    {
        int numSamplesInWindow = juce::jmin(windowSize, audio.getNumSamples() - i);
        float rms = audio.getRMSLevel(0, i, numSamplesInWindow);
        double currentTime = (double)i / sr;

        if (state == State::IN_SILENCE)
        {
            if (rms > energyThreshold)
            {
                state = State::IN_WORD;
                wordStartTime = currentTime;
                silenceCounter = 0;
            }
        }
        else // state == IN_WORD
        {
            if (rms < silenceThreshold)
            {
                silenceCounter += numSamplesInWindow;
                if (silenceCounter >= minSilenceSamples)
                {
                    state = State::IN_SILENCE;
                    double wordEndTime = currentTime - minSilenceSec;
                    if (wordEndTime > wordStartTime + minWordSec)
                    {
                        juce::String wordName = juce::String(timings.size() + 1);
                        timings.emplace_back(wordName, wordStartTime, wordEndTime);
                    }
                }
            }
            else
            {
                silenceCounter = 0;
            }
        }
    }

    if (state == State::IN_WORD)
    {
        double wordEndTime = (double)audio.getNumSamples() / sr;
        if (wordEndTime > wordStartTime + minWordSec)
        {
            juce::String wordName = juce::String(timings.size() + 1);
            timings.emplace_back(wordName, wordStartTime, wordEndTime);
        }
    }

    return timings;
}

#if defined(PRESET_CREATOR_UI)
void TTSPerformerModuleProcessor::playSelectedClipFromTrim()
{
    if (!(selectedClip && selectedClip->audio.getNumSamples() > 0)) return;
    const juce::ScopedLock lock(audioBufferLock);
    float trimStartNorm = apvts.getRawParameterValue("trimStart")->load();
    int trimStart = (int) std::floor(trimStartNorm * selectedClip->audio.getNumSamples());
    readPosition = (double)juce::jlimit(0, selectedClip->audio.getNumSamples()-1, trimStart);
    isPlaying = true;
}

void TTSPerformerModuleProcessor::stopPlayback()
{
    isPlaying = false;
}

bool TTSPerformerModuleProcessor::deleteSelectedClipFromDisk()
{
    if (!selectedClip) return false;
    juce::File dir = getClipsRootDir().getChildFile(selectedClip->clipId);
    bool ok = dir.deleteRecursively();
    {
        const juce::ScopedLock c(clipCacheLock);
        clipCache.erase(selectedClip->clipId);
        selectedClip.reset();
    }
    return ok;
}

bool TTSPerformerModuleProcessor::renameSelectedClipOnDisk(const juce::String& newName)
{
    if (!selectedClip || newName.isEmpty()) return false;
    
    // --- FIX: Don't rename directory, update metadata instead ---
    // The directory name is the hash ID and must remain unchanged
    juce::File dir = getClipsRootDir().getChildFile(selectedClip->clipId);
    if (!dir.exists()) return false;
    
    // Update the info.xml metadata with the new name
    juce::File metaFile = dir.getChildFile("info.xml");
    juce::XmlElement meta("ClipInfo");
    meta.setAttribute("name", newName.substring(0, 48));
    meta.setAttribute("text", selectedClip->text);  // Keep original text
    meta.setAttribute("model", selectedClip->modelKey);  // Keep model info
    
    bool ok = metaFile.replaceWithText(meta.toString());
    if (ok)
    {
        const juce::ScopedLock c(clipCacheLock);
        // Update the clip in memory (ID stays the same)
        selectedClip->name = newName;
    }
    return ok;
}
#endif

// Using a simplified parameter layout for this example.
// You can merge this with your more detailed layout.
juce::AudioProcessorValueTreeState::ParameterLayout TTSPerformerModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    // Core parameters
    params.push_back(std::make_unique<juce::AudioParameterFloat>("volume", "Volume", 0.0f, 1.0f, 0.8f));
    
    // Transport & Sequencer (following SampleLoader pattern)
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "rate", "Rate (Hz)", 
        juce::NormalisableRange<float>(0.1f, 20.0f, 0.01f, 0.5f), 2.0f));
    
    params.push_back(std::make_unique<juce::AudioParameterFloat>("gate", "Gate", 0.0f, 1.0f, 0.8f));
    
    // Trim range parameters
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "trimStart", "Trim Start", 
        juce::NormalisableRange<float>(0.0f, 1.0f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "trimEnd", "Trim End", 
        juce::NormalisableRange<float>(0.0f, 1.0f), 1.0f));
    
    
    // Speed/Pitch playback parameters (SampleLoader-style)
    params.push_back(std::make_unique<juce::AudioParameterFloat>("speed", "Speed", 
        juce::NormalisableRange<float>(0.25f, 4.0f, 0.01f), 1.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("pitch", "Pitch (semitones)", 
        juce::NormalisableRange<float>(-24.0f, 24.0f, 0.01f), 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("engine", "Engine", juce::StringArray{ "RubberBand", "Naive" }, 1));
    
    // Transport sync parameters
    params.push_back(std::make_unique<juce::AudioParameterBool>("sync", "Sync to Transport", false));
    params.push_back(std::make_unique<juce::AudioParameterChoice>("rate_division", "Division",
        juce::StringArray{ "1/32", "1/16", "1/8", "1/4", "1/2", "1", "2", "4", "8" }, 3));
    
    // NOTE: Do NOT create APVTS parameters for modulation inputs. They are CV buses only.
    
    return { params.begin(), params.end() };
}

// Helper function to find the correct word index for a given time in seconds
int TTSPerformerModuleProcessor::findWordIndexForTime(float timeSeconds) const
{
    if (!selectedClip)
        return 0;
    
    const auto& timings = getActiveTimings();
    if (timings.empty())
        return 0;
        
    for (int i = 0; i < (int)timings.size(); ++i)
    {
        if (timings[i].startTimeSeconds >= timeSeconds)
        {
            return i; // Return the index of the first word at or after the time
        }
    }
    
    return (int)timings.size() - 1; // Not found, return the last word
}

TTSPerformerModuleProcessor::TTSPerformerModuleProcessor()
    : ModuleProcessor(BusesProperties()
          // CORRECTED BUS LAYOUT:
          .withInput("Global Mods", juce::AudioChannelSet::discreteChannels(5), true)      // Bus 0: Rate, Gate, Trigger, Reset, Randomize
          .withInput("Trim Mods", juce::AudioChannelSet::discreteChannels(2), true)        // Bus 1: Trim Start, Trim End
          .withInput("Playback Mods", juce::AudioChannelSet::discreteChannels(2), true)    // Bus 2: Speed, Pitch
          .withInput("Word Triggers", juce::AudioChannelSet::discreteChannels(16), true)   // Bus 3: Word 1-16 Triggers
          // Output bus: 1 mono audio + 1 word gate + 1 EOP + 16 per-word gates + 16 per-word triggers = 35 channels
          .withOutput("Outputs", juce::AudioChannelSet::discreteChannels(35), true)),
      apvts(*this, nullptr, "TTSPerformerParams", createParameterLayout()),
      textFifo(64),
      textFifoBuffer(64),
      synthesisThread(*this)
{
    juce::Logger::writeToLog("[TTS][Ctor] instance=" + juce::String((juce::uint64)(uintptr_t)this) +
                             " storedLogicalId=" + juce::String((int)getLogicalId()));
    volumeParam = apvts.getRawParameterValue("volume");
    rateParam = apvts.getRawParameterValue("rate");
    gateParam = apvts.getRawParameterValue("gate");

    synthesisThread.startThread();
    
    // Load clips from disk on startup
    loadClipsFromDisk();
}

TTSPerformerModuleProcessor::~TTSPerformerModuleProcessor()
{
    synthesisThread.stopThread(5000);
}

void TTSPerformerModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    timePitch.prepare(sampleRate, 2, samplesPerBlock);
    interleavedCapacityFrames = samplesPerBlock; // keep equal to block by default
    interleavedInput.allocate((size_t)(interleavedCapacityFrames * 2), true);
    interleavedOutput.allocate((size_t)(interleavedCapacityFrames * 2), true);
    readPosition = 0.0;
    stepAccumulatorSec = 0.0;
    lastScaledBeats_tts = 0.0;
    juce::Logger::writeToLog("[TTS][Prepare] instance=" + juce::String((juce::uint64)(uintptr_t)this) +
                             " storedLogicalId=" + juce::String((int)getLogicalId()));
}

void TTSPerformerModuleProcessor::setTimingInfo(const TransportState& state)
{
    // --- THIS IS THE DEFINITIVE FIX ---

    // 1. Set the module's internal play state directly from the master transport.
    // This is what "emulating the spacebar" means.
    isPlaying = state.isPlaying;

    // 2. Check if the transport has just started playing from a stopped state.
    if (state.isPlaying && !wasPlaying)
    {
        juce::Logger::writeToLog("[TTS FIX] Play Toggled ON. Resetting playheads.");
        if (selectedClip && getSampleRate() > 0)
        {
            // Calculate start time in seconds
            const double clipDurationSeconds = selectedClip->audio.getNumSamples() / getSampleRate();
            const double trimStartSeconds = apvts.getRawParameterValue("trimStart")->load() * clipDurationSeconds;
            
            // Find the correct starting word and reset both playheads
            currentWordIndex = findWordIndexForTime((float)trimStartSeconds);
            readPosition = trimStartSeconds * getSampleRate();

            juce::Logger::writeToLog("[TTS FIX] Reset complete. Start Word: " + juce::String(currentWordIndex) +
                                   ", Read Position: " + juce::String(readPosition));
        }
        
        // Reset all internal schedulers and clocks.
        stepAccumulatorSec = 0.0;
        lastScaledBeats_tts = 0.0;
    }
    else if (!state.isPlaying && wasPlaying)
    {
         juce::Logger::writeToLog("[TTS FIX] Play Toggled OFF.");
    }

    wasPlaying = state.isPlaying;
    m_currentTransport = state;
    // --- END OF FIX ---
}

void TTSPerformerModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    static bool once = false; if (!once) { 
        once = true; 
        juce::Logger::writeToLog("[TTS][Audio] instance=" + juce::String((juce::uint64)(uintptr_t)this));
        juce::Logger::writeToLog("[TTS][Audio] logicalId=" + juce::String((int)getLogicalId()));
        const int inBuses = getBusCount(true);
        juce::Logger::writeToLog("[TTS][Audio] inputBuses=" + juce::String(inBuses));
        if (inBuses > 0 && getBus(true, 0) != nullptr)
            juce::Logger::writeToLog("[TTS][Audio] bus0 channels=" + juce::String(getBus(true,0)->getNumberOfChannels()));
    }
    // CRITICAL FIX: Read from multiple input buses (AudioProcessorGraph routing fix)
    // Bus 0: Global Mods (4 channels: Rate, Gate, Trigger, Reset)
    // Bus 1: Trim Mods (2 channels: Trim Start, Trim End)
    // Bus 2: Playback Mods (2 channels: Speed, Pitch)
    // Bus 3: Word Triggers (16 channels: Word 1-16)
    auto globalBus = getBusBuffer(buffer, true, 0);
    auto trimBus = getBusBuffer(buffer, true, 1);
    auto playbackBus = getBusBuffer(buffer, true, 2);
    auto wordTrigBus = getBusBuffer(buffer, true, 3);
    
    // DO NOT clear output bus - it may share memory with input buses in AudioProcessorGraph
    // The existing logic already handles silent output sample-by-sample in the main loop
    
    const int numSamples = buffer.getNumSamples();
    const double sr = juce::jmax(1.0, getSampleRate());
    
    // Get base parameters (ALWAYS)
    float baseRate = rateParam->load();
    float baseGate = gateParam->load();
    
    // Check modulation (like BestPractice line 54-56)
    const bool isRateMod = isParamInputConnected("rate_mod");
    const bool isGateMod = isParamInputConnected("gate_mod");
    const bool isTrigMod = isParamInputConnected("trigger_mod");
    const bool isResetMod = isParamInputConnected("reset_mod");
    const bool isRandomizeMod = isParamInputConnected("randomize_mod"); // <-- NEW
    const bool isTrimStartMod = isParamInputConnected("trimStart_mod");
    const bool isTrimEndMod = isParamInputConnected("trimEnd_mod");

    // Check for speed/pitch modulation
    const bool isSpeedMod = isParamInputConnected("speed_mod");
    const bool isPitchMod = isParamInputConnected("pitch_mod");
    
    // Get base speed/pitch parameters
    float baseSpeed = apvts.getRawParameterValue("speed")->load();
    float basePitch = apvts.getRawParameterValue("pitch")->load();
    
    // CORRECTED: Read CV pointers from the correct buses according to getParamRouting()
    // Bus 0: Global Mods (Rate, Gate, Trigger, Reset, Randomize) - channels 0,1,2,3,4
    const float* rateCV      = isRateMod      && globalBus.getNumChannels() > 0 ? globalBus.getReadPointer(0)   : nullptr;
    const float* gateCV      = isGateMod      && globalBus.getNumChannels() > 1 ? globalBus.getReadPointer(1)   : nullptr;
    const float* trigCV      = isTrigMod      && globalBus.getNumChannels() > 2 ? globalBus.getReadPointer(2)   : nullptr;
    const float* resetCV     = isResetMod     && globalBus.getNumChannels() > 3 ? globalBus.getReadPointer(3)   : nullptr;
    const float* randomizeCV = isRandomizeMod && globalBus.getNumChannels() > 4 ? globalBus.getReadPointer(4)   : nullptr; // <-- NEW
    
    // Bus 1: Trim Mods (Trim Start, Trim End) - channels 0,1
    const float* trimStartCV = isTrimStartMod && trimBus.getNumChannels() > 0   ? trimBus.getReadPointer(0)     : nullptr;
    const float* trimEndCV   = isTrimEndMod   && trimBus.getNumChannels() > 1   ? trimBus.getReadPointer(1)     : nullptr;
    
    // Bus 2: Playback Mods (Speed, Pitch) - channels 0,1
    const float* speedCV     = isSpeedMod     && playbackBus.getNumChannels() > 0 ? playbackBus.getReadPointer(0) : nullptr;
    const float* pitchCV     = isPitchMod     && playbackBus.getNumChannels() > 1 ? playbackBus.getReadPointer(1) : nullptr;
    
    // DEBUG: Log multi-bus state and CV values (first call + every ~5s)
    static int debugFrameCounter = 0;
    if (debugFrameCounter == 0 || debugFrameCounter % 240 == 0)
    {
        juce::String dbgMsg = "[TTS CV Debug #" + juce::String(debugFrameCounter) + "] ";
        dbgMsg += "buses: global=" + juce::String(globalBus.getNumChannels()) + " ";
        dbgMsg += "trim=" + juce::String(trimBus.getNumChannels()) + " ";
        dbgMsg += "playback=" + juce::String(playbackBus.getNumChannels()) + " ";
        dbgMsg += "words=" + juce::String(wordTrigBus.getNumChannels()) + " | ";
        if (rateCV) dbgMsg += "rate=" + juce::String(numSamples > 0 ? rateCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "rate=null ";
        if (gateCV) dbgMsg += "gate=" + juce::String(numSamples > 0 ? gateCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "gate=null ";
        if (trimStartCV) dbgMsg += "trimStart=" + juce::String(numSamples > 0 ? trimStartCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "trimStart=null ";
        if (trimEndCV) dbgMsg += "trimEnd=" + juce::String(numSamples > 0 ? trimEndCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "trimEnd=null ";
        if (speedCV) dbgMsg += "speed=" + juce::String(numSamples > 0 ? speedCV[0] : -999.0f, 3) + " ";
        else dbgMsg += "speed=null ";
        if (pitchCV) dbgMsg += "pitch=" + juce::String(numSamples > 0 ? pitchCV[0] : -999.0f, 3);
        else dbgMsg += "pitch=null";
        juce::Logger::writeToLog(dbgMsg);
        
        // Also log modulation states
        juce::String modStates = "[TTS MOD STATES] ";
        modStates += "rateMod=" + juce::String(isRateMod ? "ON" : "OFF") + " ";
        modStates += "gateMod=" + juce::String(isGateMod ? "ON" : "OFF") + " ";
        modStates += "speedMod=" + juce::String(isSpeedMod ? "ON" : "OFF") + " ";
        modStates += "pitchMod=" + juce::String(isPitchMod ? "ON" : "OFF");
        juce::Logger::writeToLog(modStates);
    }
    debugFrameCounter++;
    
    // CRITICAL FIX: Get output pointers directly from buffer (AudioProcessorGraph routing requirement)
    auto* audioOut = buffer.getNumChannels() > 0 ? buffer.getWritePointer(0) : nullptr;
    auto* wordGateOut = buffer.getNumChannels() > 1 ? buffer.getWritePointer(1) : nullptr;
    auto* eopGateOut = buffer.getNumChannels() > 2 ? buffer.getWritePointer(2) : nullptr;
    
    bool wasPlayingLastBlock = isPlaying;
    bool hasValidClip = (selectedClip && selectedClip->audio.getNumSamples() > 0);
    
    // Precompute trim boundaries in samples for this block
    int clipLen = hasValidClip ? selectedClip->audio.getNumSamples() : 0;
    int trimStartSample = 0, trimEndSample = 0;
    if (hasValidClip)
    {
        float trimStartNormB = apvts.getRawParameterValue("trimStart")->load();
        float trimEndNormB = apvts.getRawParameterValue("trimEnd")->load();
        trimStartSample = (int) (trimStartNormB * clipLen);
        trimEndSample   = (int) (trimEndNormB   * clipLen);
        trimStartSample = juce::jlimit(0, clipLen, trimStartSample);
        trimEndSample   = juce::jlimit(trimStartSample, clipLen, trimEndSample);
        startSamplePos = (double) trimStartSample;
        endSamplePos   = (double) juce::jmax(trimStartSample + 1, trimEndSample);
    }

    // Word stepping setup (using last/selected timings)
    auto& timingsForClip = getActiveTimings();
    const bool haveTimings = hasValidClip && !timingsForClip.empty();
    const double srD = sr;
    
    for (int i = 0; i < numSamples; ++i)
    {
        // Per-sample rate/gate (ALWAYS read CV) - Use CV to modulate base rate exponentially
        float currentRate = baseRate; // Start with the slider's value
        if (rateCV)
        {
            // Use the incoming CV to modulate the base rate by +/- 2 octaves
            const float cv = juce::jlimit(0.0f, 1.0f, rateCV[i]);
            const float octaveRange = 4.0f; // Total modulation range in octaves (-2 to +2)
            const float octaveOffset = (cv - 0.5f) * octaveRange; // Map CV to [-2.0, 2.0]
            
            currentRate = baseRate * std::pow(2.0f, octaveOffset);
        }

        

        float currentGate = baseGate; // The slider's value (e.g., 0.8)
        
        if (gateCV) 
        {
            // === START OF TRACING LOGIC ===
            
            // Point A: The raw value read directly from the input buffer.
            float rawCVValue = gateCV[i];
            
            // Point B: The value after your juce::jlimit logic is applied.
            float processedCVValue = juce::jlimit(0.0f, 1.0f, rawCVValue);
            
            // This is the original logic line. We'll use our traced value instead.
            currentGate = processedCVValue;
            
            // Point C: The final value of currentGate before it's used.
            float finalGateValue = currentGate;
            
            // Log all three points for the first 5 samples to see the transformation.
            if (i < 5) 
            {
                juce::Logger::writeToLog("[GATE TRACE] Sample " + juce::String(i) + 
                                       ": [A] Raw=" + juce::String(rawCVValue, 3) + 
                                       " -> [B] Processed=" + juce::String(processedCVValue, 3) + 
                                       " -> [C] Final=" + juce::String(finalGateValue, 3));
            }
            // === END OF TRACING LOGIC ===
        }
        
        // Trim range handling (per-sample; CV modulates slider values)
        float trimStartNorm = apvts.getRawParameterValue("trimStart")->load();
        if (trimStartCV)
        {
            // Remap incoming CV [0, 1] to an offset of [-0.5, +0.5]
            const float cvOffset = trimStartCV[i] - 0.5f;
            // Add the offset to the base value from the slider
            trimStartNorm += cvOffset;
        }
        // Clamp the final result to the valid [0, 1] range
        trimStartNorm = juce::jlimit(0.0f, 1.0f, trimStartNorm);
        
        float trimEndNorm = apvts.getRawParameterValue("trimEnd")->load();
        if (trimEndCV)
        {
            // Remap incoming CV [0, 1] to an offset of [-0.5, +0.5]
            const float cvOffset = trimEndCV[i] - 0.5f;
            // Add the offset to the base value from the slider
            trimEndNorm += cvOffset;
        }
        // Clamp the final result to the valid [0, 1] range
        trimEndNorm = juce::jlimit(0.0f, 1.0f, trimEndNorm);
        if (trimStartNorm >= trimEndNorm) trimStartNorm = juce::jmax(0.0f, trimEndNorm - 0.001f);
        
        // Update per-sample trim and apply to engine loop bounds
        clipLen = hasValidClip ? selectedClip->audio.getNumSamples() : 0;
        trimStartSample = (int)(trimStartNorm * clipLen);
        trimEndSample   = (int)(trimEndNorm   * clipLen);
        startSamplePos = (double) trimStartSample;
        endSamplePos   = (double) juce::jmax(trimStartSample + 1, trimEndSample);
        
        // Process triggers even without clip loaded
        if (resetCV)
        {
            bool resetHigh = resetCV[i] > 0.5f;
            if (resetHigh && !lastResetHigh)
            {
                // Reset to trim start
                currentWordIndex = findFirstWordIndexAtOrAfter(trimStartNorm * (hasValidClip ? selectedClip->durationSeconds : 0.0));
                readPosition = (double) trimStartSample;
                if (hasValidClip) isPlaying = true;
                phase = 0.0;
            }
            lastResetHigh = resetHigh;
        }
        
        if (trigCV)
        {
            bool trigHigh = trigCV[i] > 0.5f;
            if (trigHigh && !lastTrigHigh)
            {
                // Trigger starts at trim start
                readPosition = (double) trimStartSample;
                currentWordIndex = findFirstWordIndexAtOrAfter(trimStartNorm * (hasValidClip ? selectedClip->durationSeconds : 0.0));
                if (hasValidClip) isPlaying = true;
                phase = 0.0;
            }
            lastTrigHigh = trigHigh;
        }

        // --- Randomize Trigger ---
        if (randomizeCV != nullptr) // Check if the pointer is valid
        {
            const bool trigHigh = randomizeCV[i] > 0.5f;
            if (trigHigh && !lastRandomizeTriggerHigh)
            {
                const juce::ScopedLock c(clipCacheLock);
                if (clipCache.size() > 1 && selectedClip)
                {
                    std::vector<juce::String> otherKeys;
                    for (const auto& pair : clipCache) {
                        if (pair.first != selectedClip->clipId) {
                            otherKeys.push_back(pair.first);
                        }
                    }
                    if (!otherKeys.empty()) {
                        juce::Random rng;
                        juce::String randomKey = otherKeys[rng.nextInt((int)otherKeys.size())];
                        selectClipByKey(randomKey);
                    }
                }
                lastRandomizeTriggerHigh = true; // Prevent re-triggering within the same high signal
            }
            else if (!trigHigh)
            {
                lastRandomizeTriggerHigh = false;
            }
        }
        
        // Per-word trigger inputs (Bus 3, channels 0-15)
        if (hasValidClip)
        {
            for (int w = 0; w < juce::jmin(16, (int)selectedClip->timings.size()); ++w)
            {
                if (wordTrigBus.getNumChannels() > w)
                {
                    const float* wordTrigCV = wordTrigBus.getReadPointer(w);
                    bool wordTrigHigh = wordTrigCV[i] > 0.5f;
                    if (wordTrigHigh && !lastWordTrigHigh[w])
                    {
                        // Jump to this word
                        currentWordIndex = w;
                        const auto& wordTiming = selectedClip->timings[w];
                        double jumpPos = juce::jlimit((double)trimStartSample, (double)trimEndSample, wordTiming.startTimeSeconds * sr);
                        readPosition = jumpPos;
                        isPlaying = true;
                        phase = 0.0;
                    }
                    lastWordTrigHigh[w] = wordTrigHigh;
                }
            }
        }
        
        // Rate-based stepping scheduler (jump to word starts)
        const bool syncEnabled = apvts.getRawParameterValue("sync")->load() > 0.5f;
        if (hasValidClip && haveTimings)
        {
            bool advanceStep = false;
            if (syncEnabled && m_currentTransport.isPlaying)
            {
                // SYNC MODE
                const int divisionIndex = (int)apvts.getRawParameterValue("rate_division")->load();
                static const double divisions[] = { 1.0/32.0, 1.0/16.0, 1.0/8.0, 1.0/4.0, 1.0/2.0, 1.0, 2.0, 4.0, 8.0 };
                const double beatDivision = divisions[juce::jlimit(0, 8, divisionIndex)];
                
                double beatsNow = m_currentTransport.songPositionBeats + (i / srD / 60.0 * m_currentTransport.bpm);
                double scaledBeats = beatsNow * beatDivision;

                if (static_cast<long long>(scaledBeats) > static_cast<long long>(lastScaledBeats_tts))
                {
                    advanceStep = true;
                }
                lastScaledBeats_tts = scaledBeats;
            }
            else if (currentRate > 0.0f)
            {
                // FREE-RUNNING MODE
                if (stepAccumulatorSec <= 0.0)
                {
                    advanceStep = true;
                    stepAccumulatorSec += (1.0 / (double)currentRate);
                }
                stepAccumulatorSec -= (1.0 / srD);
            }

            if (advanceStep)
            {
                clampWordIndexToTrim();
                crossfadeStartPosition = readPosition;
                const auto& w = getActiveTimings()[(size_t) juce::jlimit(0, (int)getActiveTimings().size() - 1, currentWordIndex)];
                crossfadeEndPosition = juce::jlimit(startSamplePos, endSamplePos - 1.0, w.startTimeSeconds * srD);
                crossfadeSamplesTotal = (int)(srD * 0.020); // 20ms crossfade
                crossfadeSamplesRemaining = crossfadeSamplesTotal;

                if (currentWordIndex < 16)
                    wordTriggerPending[currentWordIndex] = (int)std::ceil(0.001 * srD);
                
                // Advance to next word
                const auto& t = getActiveTimings();
                if (!t.empty())
                {
                    currentWordIndex++;
                    if (currentWordIndex >= (int)t.size()) currentWordIndex = 0;
                }
            }
        }
        
        // Read speed/pitch for this sample
        float currentSpeed = baseSpeed; // Start with the base value from the slider
        if (speedCV)
        {
            const float cv = juce::jlimit(0.0f, 1.0f, speedCV[i]);

            // Use CV to modulate speed by +/- 2 octaves (0.25x to 4x) around the base speed
            const float octaveRange = 4.0f; // Total modulation range in octaves
            const float octaveOffset = (cv - 0.5f) * octaveRange; // Remaps CV from [0, 1] to [-2, +2]
            
            currentSpeed = baseSpeed * std::pow(2.0f, octaveOffset);
        }

        // Clamp the final result to the parameter's valid range
        currentSpeed = juce::jlimit(0.25f, 4.0f, currentSpeed);

        

        float currentPitch = basePitch; // Start with the base value from the slider
        if (pitchCV)
        {
            // Remap incoming CV to a bipolar [-1, 1] range if it isn't already
            const float rawCV = pitchCV[i];
            const float bipolarCV = (rawCV >= 0.0f && rawCV <= 1.0f) 
                                    ? (rawCV * 2.0f - 1.0f) 
                                    : rawCV;

            // Use the bipolar CV to modulate by a defined range, e.g., +/- 12 semitones (one octave)
            const float pitchModulationRange = 12.0f; 
            currentPitch += bipolarCV * pitchModulationRange;
            
            // DEBUG: Log pitch modulation values (occasionally)
            static int pitchLogCounter = 0;
            if ((pitchLogCounter++ % 4800) == 0) // Log every ~100ms
            {
                juce::Logger::writeToLog("[TTS PITCH] basePitch=" + juce::String(basePitch, 2) + 
                                       " bipolarCV=" + juce::String(bipolarCV, 3) + 
                                       " currentPitch=" + juce::String(currentPitch, 2));
            }
        }

        // Clamp the final result to the parameter's valid range
        currentPitch = juce::jlimit(-24.0f, 24.0f, currentPitch);
        
        // Generate audio ONLY if clip loaded
        if (isPlaying && hasValidClip)
        {
            const juce::ScopedLock lock(audioBufferLock);

            // --- NEW: CROSSFADE LOGIC ---
            if (crossfadeSamplesRemaining > 0)
            {
                // We are in a crossfade.
                const float fadeProgress = 1.0f - ((float)crossfadeSamplesRemaining / (float)crossfadeSamplesTotal);
                const float fadeInGain = fadeProgress;
                const float fadeOutGain = 1.0f - fadeProgress;

                // Get sample from the OLD position
                int oldPos = (int)crossfadeStartPosition;
                float oldSample = (oldPos < clipLen) ? selectedClip->audio.getSample(0, oldPos) : 0.0f;

                // Get sample from the NEW position
                int newPos = (int)crossfadeEndPosition;
                float newSample = (newPos < clipLen) ? selectedClip->audio.getSample(0, newPos) : 0.0f;

                // Blend them
                float finalSample = (oldSample * fadeOutGain) + (newSample * fadeInGain);
                if (audioOut) audioOut[i] = finalSample * currentGate * volumeParam->load();

                // Advance both read heads for the next sample in the fade
                crossfadeStartPosition += 1.0;
                crossfadeEndPosition += 1.0;

                // When the fade is done, snap the main readPosition to the correct new location
                if (--crossfadeSamplesRemaining == 0) {
                    readPosition = crossfadeEndPosition;
                }
            }
            else // --- ORIGINAL PLAYBACK LOGIC (when not crossfading) ---
            {
                // Compute effective time/pitch like SampleVoiceProcessor
            const float effectiveTime = juce::jlimit(0.25f, 4.0f, currentSpeed);
            const float effectivePitchSemis = currentPitch;

            // Select engine: 0=RubberBand,1=Naive (default Naive if param absent)
            int engineIdx = 1; // Naive default
            if (auto* p = apvts.getParameter("engine")) engineIdx = (int) p->getValue();

            if (engineIdx == 1) // Naive
            {
                // Linear interpolation over mono buffer
                float sample = 0.0f;
                const int srcLen = selectedClip->audio.getNumSamples();
                const double pitchScale = std::pow(2.0, (double) effectivePitchSemis / 12.0);
                const double step = (double) pitchScale / (double) juce::jmax(0.0001f, effectiveTime);

                // Wrap within trim window
                if (readPosition >= endSamplePos)
                    readPosition = startSamplePos + (readPosition - endSamplePos);
                int base = (int) readPosition;
                base = juce::jlimit(0, srcLen - 1, base);
                const int next = juce::jmin(srcLen - 1, base + 1);
                const float frac = (float) (readPosition - (double) base);
                const float s0 = selectedClip->audio.getSample(0, base);
                const float s1 = selectedClip->audio.getSample(0, next);
                sample = s0 + frac * (s1 - s0);
                if (audioOut) audioOut[i] = sample * currentGate * volumeParam->load();
                readPosition += step;
                if (readPosition >= endSamplePos)
                    readPosition = startSamplePos + (readPosition - endSamplePos);
            }
            else // RubberBand via TimePitchProcessor
            {
                // Ensure interleaved buffers large enough
                if (1 > interleavedCapacityFrames)
                {
                    interleavedCapacityFrames = 1;
                    interleavedInput.allocate((size_t)(interleavedCapacityFrames * 2), true);
                    interleavedOutput.allocate((size_t)(interleavedCapacityFrames * 2), true);
                }

                // Feed one frame (mono duplicated) from current readPosition
                int pos = (int) readPosition;
                if (readPosition >= endSamplePos)
                    readPosition = startSamplePos + (readPosition - endSamplePos), pos = (int) readPosition;
                pos = juce::jlimit(0, selectedClip->audio.getNumSamples() - 1, pos);
                float s = selectedClip->audio.getSample(0, pos);
                float* inLR = interleavedInput.getData();
                inLR[0] = s; inLR[1] = s;
                // Force immediate parameter application by resetting processor when values change
                if (lastEffectiveTime != effectiveTime || lastEffectivePitch != effectivePitchSemis)
                {
                    timePitch.reset();
                    lastEffectiveTime = effectiveTime;
                    lastEffectivePitch = effectivePitchSemis;
                    // PRIME: push a burst of frames so RubberBand has material to output immediately
                    const int primeFramesDesired = 64;
                    const int availableWindow = (int) juce::jmax(1.0, endSamplePos - startSamplePos);
                    const int primeFrames = juce::jlimit(1, primeFramesDesired, availableWindow - 1);
                    if (interleavedCapacityFrames < primeFrames)
                    {
                        interleavedCapacityFrames = primeFrames;
                        interleavedInput.allocate((size_t)(interleavedCapacityFrames * 2), true);
                        interleavedOutput.allocate((size_t)(interleavedCapacityFrames * 2), true);
                        inLR = interleavedInput.getData();
                    }
                    // Fill prime frames from current readPosition
                    double posPrime = readPosition;
                    for (int pf = 0; pf < primeFrames; ++pf)
                    {
                        if (posPrime >= endSamplePos)
                            posPrime = startSamplePos + (posPrime - endSamplePos);
                        int ip = juce::jlimit(0, selectedClip->audio.getNumSamples() - 1, (int) posPrime);
                        const float v = selectedClip->audio.getSample(0, ip);
                        inLR[2*pf+0] = v; inLR[2*pf+1] = v;
                        posPrime += 1.0;
                    }
                    // Apply parameters before prime
                    timePitch.setTimeStretchRatio(effectiveTime);
                    timePitch.setPitchSemitones(effectivePitchSemis);
                    timePitch.putInterleaved(inLR, primeFrames);
                    // Advance read head by the frames we just fed
                    readPosition += (double) primeFrames;
                    if (readPosition >= endSamplePos)
                        readPosition = startSamplePos + (readPosition - endSamplePos);
                    // Start a short ramp to suppress de-clicks
                    rbFadeSamplesTotal = 32; rbFadeSamplesRemaining = rbFadeSamplesTotal;
                }
                timePitch.setTimeStretchRatio(effectiveTime);
                timePitch.setPitchSemitones(effectivePitchSemis);
                timePitch.putInterleaved(inLR, 1);
                float* outLR = interleavedOutput.getData();
                // Drain a small burst to minimize latency
                int produced = 0;
                {
                    int drained = 0; const int maxDrain = 4; // small burst keeps latency low without starving input
                    while (drained < maxDrain)
                    {
                        const int got = timePitch.receiveInterleaved(outLR + (drained * 2), 1);
                        if (got <= 0) break; drained += got;
                    }
                    produced = drained;
                }
                if (produced > 0)
                {
                    float outSample = outLR[(produced - 1) * 2 + 0];
                    // Apply short fade-in after parameter changes to soften clicks
                    if (rbFadeSamplesRemaining > 0 && rbFadeSamplesTotal > 0)
                    {
                        const float fade = 1.0f - (float) rbFadeSamplesRemaining / (float) rbFadeSamplesTotal;
                        outSample *= fade; rbFadeSamplesRemaining--;
                    }
                    if (audioOut) audioOut[i] = outSample * currentGate * volumeParam->load();
                    // Advance read head by the number of frames FED (1), not produced
                    // RubberBand can output >1 frames from 1 input frame; advancing by produced would starve input
                    readPosition += 1.0;
                }
                else
                {
                    // AGGRESSIVE FALLBACK: produce immediate output via naive interpolation
                    const int srcLen = selectedClip->audio.getNumSamples();
                    const double pitchScaleFB = std::pow(2.0, (double) effectivePitchSemis / 12.0);
                    const double stepFB = (double) pitchScaleFB / (double) juce::jmax(0.0001f, effectiveTime);
                    int baseFB = juce::jlimit(0, srcLen - 1, (int) readPosition);
                    const int nextFB = juce::jmin(srcLen - 1, baseFB + 1);
                    const float fracFB = (float) (readPosition - (double) baseFB);
                    const float s0FB = selectedClip->audio.getSample(0, baseFB);
                    const float s1FB = selectedClip->audio.getSample(0, nextFB);
                    float sampleFB = s0FB + fracFB * (s1FB - s0FB);
                    if (rbFadeSamplesRemaining > 0 && rbFadeSamplesTotal > 0)
                    {
                        const float fade = 1.0f - (float) rbFadeSamplesRemaining / (float) rbFadeSamplesTotal;
                        sampleFB *= fade; rbFadeSamplesRemaining--;
                    }
                    if (audioOut) audioOut[i] = sampleFB * currentGate * volumeParam->load();
                    readPosition += stepFB;
                }
                if (readPosition >= endSamplePos)
                    readPosition = startSamplePos + (readPosition - endSamplePos);
                }
            } // End of crossfade else block
        }
        else
        {
            if (audioOut) audioOut[i] = 0.0f;
        }
        
        // Mid-block debug of mapped live values (throttled)
        {
            static int midDbg = 0;
            if (i == (numSamples >> 1) && ((midDbg++ % 240) == 0))
            {
                juce::String msg = "[TTS Live Mid] rateHz=" + juce::String(currentRate, 3) +
                                   " gate=" + juce::String(currentGate, 3) +
                                   " speed=" + juce::String(currentSpeed, 3) +
                                   " pitchSemis=" + juce::String(currentPitch, 3);
                juce::Logger::writeToLog(msg);
            }
        }

        // Update live telemetry (like BestPractice line 121-126)
        if ((i & 0x07) == 0) // Every 8 samples instead of 64 for better responsiveness
        {
            setLiveParamValue("rate_live", currentRate);
            setLiveParamValue("gate_live", currentGate);
            setLiveParamValue("trimStart_live", trimStartNorm);
            setLiveParamValue("trimEnd_live", trimEndNorm);
            setLiveParamValue("speed_live", currentSpeed);
            setLiveParamValue("pitch_live", currentPitch);
        }
        
        // Word gates/triggers (skip if no clip)
        if (hasValidClip)
        {
            // Word gate output
            if (wordGateOut)
            {
                double curTime = readPosition / sr;
                wordGateOut[i] = isWordActiveAtTime(curTime) ? 1.0f : 0.0f;
            }
            
            // Per-word gates (direct buffer access for AudioProcessorGraph)
            for (int w = 0; w < juce::jmin(16, (int)selectedClip->timings.size()); ++w)
            {
                if (buffer.getNumChannels() > 3 + w)
                {
                    float* wordGate = buffer.getWritePointer(3 + w);
                    wordGate[i] = (w == currentWordIndex && isPlaying) ? 1.0f : 0.0f;
                }
            }
            
            // Per-word triggers (direct buffer access for AudioProcessorGraph)
            for (int w = 0; w < juce::jmin(16, (int)selectedClip->timings.size()); ++w)
            {
                if (buffer.getNumChannels() > 19 + w)
                {
                    float* wordTrig = buffer.getWritePointer(19 + w);
                    if (wordTriggerPending[w] > 0)
                    {
                        wordTrig[i] = 1.0f;
                        wordTriggerPending[w]--;
                    }
                    else
                    {
                        wordTrig[i] = 0.0f;
                    }
                }
            }
        }
    }
    
    // EOP gate
    if (eopGateOut && !isPlaying && wasPlayingLastBlock)
    {
        int pulseSamples = (int)std::ceil(0.005 * sr);
        for (int i = 0; i < juce::jmin(numSamples, pulseSamples); ++i)
            eopGateOut[i] = 1.0f;
    }
}

void TTSPerformerModuleProcessor::startSynthesis(const juce::String& text)
{
    DBG("[TTS Performer] startSynthesis called with text: " + text);
    juce::Logger::writeToLog("[TTS Performer] startSynthesis called with text: " + text);
    
    if (currentStatus == Status::Synthesizing || text.trim().isEmpty()) 
    {
        DBG("[TTS Performer] startSynthesis early return - already synthesizing or empty text");
        return;
    }

    // --- Phase 3: Reset sequencer state for new synthesis ---
    resetSequencer();

    const juce::ScopedLock lock(textBufferLock);
    if (textFifo.getFreeSpace() > 0)
    {
        int start1, size1, start2, size2;
        textFifo.prepareToWrite(1, start1, size1, start2, size2);
        if (size1 > 0) 
        {
            textFifoBuffer[start1] = text;
            textFifo.finishedWrite(1);
            synthesisThread.notify();
            
            DBG("[TTS Performer] Text queued for synthesis at position " + juce::String(start1));
            juce::Logger::writeToLog("[TTS Performer] Text queued for synthesis at position " + juce::String(start1));
            DBG("[TTS Performer] Synthesis thread notified");
            juce::Logger::writeToLog("[TTS Performer] Synthesis thread notified");
        }
                }
                else 
                { 
        DBG("[TTS Performer] Text FIFO is full, cannot queue text");
        juce::Logger::writeToLog("[TTS Performer] Text FIFO is full, cannot queue text");
    }
}

// --- Synthesis Thread Implementation ---

TTSPerformerModuleProcessor::SynthesisThread::SynthesisThread(TTSPerformerModuleProcessor& o) : juce::Thread("Piper Synthesis Thread"), owner(o) {}
TTSPerformerModuleProcessor::SynthesisThread::~SynthesisThread() { stopThread(5000); }

void TTSPerformerModuleProcessor::SynthesisThread::run()
{
    DBG("[TTS Performer] SynthesisThread::run() started");
    juce::Logger::writeToLog("[TTS Performer] SynthesisThread::run() started");
    
    // --- FIX #1: ROBUST THREAD WAIT LOOP ---
    // This pattern prevents "lost wakeups" by checking the condition
    // before waiting and looping until there's work to do.
    while (!threadShouldExit())
    {
        if (owner.textFifo.getNumReady() == 0)
        {
            wait(-1);
            continue; // Loop back and check condition again after waking up
        }
        
        DBG("[TTS Performer] Found " + juce::String(owner.textFifo.getNumReady()) + " text items in queue");
        juce::Logger::writeToLog("[TTS Performer] Found " + juce::String(owner.textFifo.getNumReady()) + " text items in queue");

        owner.currentStatus = Status::Synthesizing;

        // Dequeue text safely
        juce::String textToSynthesize;
        {
            const juce::ScopedLock lock(owner.textBufferLock);
            int start1, size1, start2, size2;
            owner.textFifo.prepareToRead(1, start1, size1, start2, size2);
            if (size1 > 0) textToSynthesize = owner.textFifoBuffer[start1];
            owner.textFifo.finishedRead(1);
        }

        if (textToSynthesize.isEmpty() || threadShouldExit())
        {
                    owner.currentStatus = Status::Idle;
            continue;
        }

        DBG("[TTS Performer] About to start Piper synthesis for text: " + textToSynthesize);
        juce::Logger::writeToLog("[TTS Performer] About to start Piper synthesis for text: " + textToSynthesize);

        try
        {
            // --- FIND EXECUTABLE AND MODELS ---
            auto appDir = juce::File::getSpecialLocation(juce::File::currentApplicationFile).getParentDirectory();
            piperExecutable = appDir.getChildFile("piper.exe");
            
            DBG("[TTS Performer] Looking for piper.exe at: " + piperExecutable.getFullPathName());
            juce::Logger::writeToLog("[TTS Performer] Looking for piper.exe at: " + piperExecutable.getFullPathName());
            
            if (!piperExecutable.existsAsFile()) throw std::runtime_error("piper.exe not found next to application");

            // --- THIS IS THE FIX ---
            // Look for the 'models' directory in the same folder as the executable.
            juce::File modelsDir = appDir.getChildFile("models");
            
            DBG("[TTS Performer] Looking for models directory at: " + modelsDir.getFullPathName());
            juce::Logger::writeToLog("[TTS Performer] Looking for models directory at: " + modelsDir.getFullPathName());
            
            if (!modelsDir.isDirectory())
            {
                // Throw an error that shows the path we actually checked
                throw std::runtime_error("Models directory not found at: " + modelsDir.getFullPathName().toStdString());
            }
            
            // --- Model selection via registry ---
            juce::File modelFile = owner.resolveSelectedModelFile();
            juce::File configFile = modelFile.withFileExtension(".onnx.json");
            
            // --- FIX: Update thread state so computeClipKey() uses correct model ---
            // This ensures the clip ID hash includes the correct voice model filename
            this->currentModelFile = modelFile;
            
            juce::String modelPath = modelFile.getFullPathName();
            juce::String configPath = configFile.getFullPathName();
            
            DBG("[TTS Performer] Looking for model file: " + modelPath);
            DBG("[TTS Performer] Looking for config file: " + configPath);
            juce::Logger::writeToLog("[TTS Performer] Looking for model file: " + modelPath);
            juce::Logger::writeToLog("[TTS Performer] Looking for config file: " + configPath);
            
            if (!modelFile.existsAsFile() || !configFile.existsAsFile()) 
                throw std::runtime_error("Model .onnx and/or .onnx.json not found in models folder.");
            
            // --- Phase 4: Check Cache and Update Usage Time ---
            juce::String cacheKey = getCacheKey(modelPath);
            bool wasCached = isVoiceCached(modelPath);
            
            if (wasCached)
            {
                DBG("[TTS Performer] Voice found in cache: " + cacheKey + " (Instant access!)");
                // Update last used time
                {
                    const juce::ScopedLock lock(cacheLock);
                    auto it = voiceCache.find(cacheKey);
                    if (it != voiceCache.end())
                    {
                        it->second.lastUsed = std::chrono::steady_clock::now();
                    }
            }
        }
        else 
        { 
                DBG("[TTS Performer] Voice not in cache: " + cacheKey + " (Loading from disk...)");
                
                // Update cache size limit from parameter before adding
                updateMaxCachedVoicesFromParameter();
                addVoiceToCache(modelPath, configPath);
            }

            // --- CREATE TEMP FILES FOR OUTPUT ---
            juce::File tempWavFile = juce::File::getSpecialLocation(juce::File::tempDirectory)
                                         .getNonexistentChildFile("piper_out", ".wav");
            juce::File tempJsonFile = juce::File::getSpecialLocation(juce::File::tempDirectory)
                                         .getNonexistentChildFile("piper_timing", ".json");

            // --- FIX #2: ROBUST ChildProcess with input file ---
            // Create temporary input file for text
            juce::File tempInputFile = juce::File::getSpecialLocation(juce::File::tempDirectory)
                                         .getNonexistentChildFile("piper_input", ".txt");
            tempInputFile.replaceWithText(textToSynthesize);
            
            // Build command using Windows cmd to pipe input to piper with JSON output
            juce::ChildProcess piperProcess;
            // Build command with working directory change to ensure piper can find its dependencies
            auto workingDirectory = piperExecutable.getParentDirectory();
            juce::String command = "cmd /c \"cd /d \"" + workingDirectory.getFullPathName() + "\" && type \"" 
                                 + tempInputFile.getFullPathName() + "\" | \"" 
                                 + piperExecutable.getFullPathName() + "\" --model \"" + modelFile.getFullPathName() + "\""
                                 + " --espeak_data \"" + workingDirectory.getChildFile("espeak-ng-data").getFullPathName() + "\""
                                 + " --output_file \"" + tempWavFile.getFullPathName() + "\"\"";
            
            DBG("[TTS Performer] Starting Piper process with command: " + command);
            juce::Logger::writeToLog("[TTS Performer] Starting Piper process with command: " + command);
            
            if (piperProcess.start(command))
            {
                DBG("[TTS Performer] Piper process started successfully, waiting for completion...");
                juce::Logger::writeToLog("[TTS Performer] Piper process started successfully, waiting for completion...");
                
                // Wait for the process to finish
                if (!piperProcess.waitForProcessToFinish(30000)) // 30s timeout
                    throw std::runtime_error("Piper process timed out.");

                // --- DIAGNOSTIC: Check if WAV file was created ---
                if (tempWavFile.existsAsFile())
                {
                    juce::Logger::writeToLog("--- PIPER WAV OUTPUT SUCCESS ---");
                    juce::Logger::writeToLog("WAV file created: " + tempWavFile.getFullPathName());
                    juce::Logger::writeToLog("File size: " + juce::String(tempWavFile.getSize()) + " bytes");
                }
                else
                {
                    juce::Logger::writeToLog("--- PIPER WAV OUTPUT FAILED: FILE NOT CREATED ---");
                }
                // --- END OF DIAGNOSTIC BLOCK ---

                int exitCode = piperProcess.getExitCode();
                DBG("[TTS Performer] Piper process finished with exit code: " + juce::String(exitCode));
                juce::Logger::writeToLog("[TTS Performer] Piper process finished with exit code: " + juce::String(exitCode));
                
                if (exitCode != 0)
                    throw std::runtime_error("Piper process failed with exit code: " + std::to_string(exitCode));
                
                // Clean up input file
                tempInputFile.deleteFile();
                
                // --- LOAD AND RESAMPLE GENERATED AUDIO (THE CRITICAL FIX) ---
                if (!tempWavFile.existsAsFile()) throw std::runtime_error("Piper did not create an output WAV file.");
                
                juce::AudioFormatManager formatManager;
                formatManager.registerBasicFormats();
                std::unique_ptr<juce::AudioFormatReader> reader(formatManager.createReaderFor(tempWavFile));
                
                if (reader == nullptr) throw std::runtime_error("Could not read generated WAV file.");

                DBG("[TTS Performer] Original audio sample rate: " + juce::String(reader->sampleRate) + " Hz");
                juce::Logger::writeToLog("[TTS Performer] Original audio sample rate: " + juce::String(reader->sampleRate) + " Hz");
                DBG("[TTS Performer] Target sample rate: " + juce::String(owner.getSampleRate()) + " Hz");
                juce::Logger::writeToLog("[TTS Performer] Target sample rate: " + juce::String(owner.getSampleRate()) + " Hz");

                // Load the entire file into a temporary buffer at its original sample rate
                const int originalNumSamples = (int)reader->lengthInSamples;
                juce::AudioBuffer<float> originalAudio(1, originalNumSamples);
                reader->read(&originalAudio, 0, originalNumSamples, 0, true, false);

                // CRITICAL FIX: Ensure valid sample rate before resampling
                double targetSR = owner.getSampleRate();
                if (targetSR <= 0.0)
                {
                    DBG("[TTS Performer] ERROR: Invalid target sample rate (" + juce::String(targetSR) + "), using 48000 Hz as fallback");
                    targetSR = 48000.0;
                }
                
                // Calculate resampling ratio
                double resampleRatio = reader->sampleRate / targetSR;
                int resampledNumSamples = (int)(originalNumSamples / resampleRatio);
                
                DBG("[TTS Performer] Resampling ratio: " + juce::String(resampleRatio, 4));
                DBG("[TTS Performer] Original samples: " + juce::String(originalNumSamples));
                DBG("[TTS Performer] Resampled samples: " + juce::String(resampledNumSamples));
                juce::Logger::writeToLog("[TTS Performer] Resampling from " + juce::String(originalNumSamples) + " to " + juce::String(resampledNumSamples) + " samples (target SR: " + juce::String(targetSR) + ")");

                // Prepare a resampling source
                juce::MemoryAudioSource tempSource(originalAudio, false);
                juce::ResamplingAudioSource resampledSource(&tempSource, false, 1);
                resampledSource.setResamplingRatio(resampleRatio);

                // Prepare a buffer at the destination sample rate
                juce::AudioBuffer<float> finalAudio(1, resampledNumSamples);
                resampledSource.prepareToPlay(512, targetSR);
                
                // Perform the resampling
                juce::AudioSourceChannelInfo info(finalAudio);
                resampledSource.getNextAudioBlock(info);

                // --- Create/Store Clip and select it ---
                {
                    auto clip = std::make_shared<TTSClip>();
                    clip->clipId = owner.computeClipKey(textToSynthesize);
                    clip->name = textToSynthesize.substring(0, 48);
                    clip->text = textToSynthesize;
                    clip->modelKey = owner.synthesisThread.currentModelFile.getFileName();
                    clip->audio.makeCopyOf(finalAudio);
                    clip->sampleRate = targetSR;
                    clip->durationSeconds = (double) clip->audio.getNumSamples() / clip->sampleRate;
                    // Persist to disk (wav saved now, timing after parse below)
                    owner.persistClipToDisk(textToSynthesize, modelFile, finalAudio, {});
                    {
                        const juce::ScopedLock c(owner.clipCacheLock);
                        owner.addClipToCache(clip);
                        owner.selectedClip = clip;
                    }
                    // keep legacy baked buffer path for waveform until UI uses selectedClip exclusively
                    const juce::ScopedLock lock(owner.audioBufferLock);
                    owner.bakedAudioBuffer.makeCopyOf(finalAudio);
                    DBG("[TTS Performer] Audio copied to bakedAudioBuffer: " + juce::String(owner.bakedAudioBuffer.getNumSamples()) + " samples");
                    DBG("[TTS Performer] selectedClip audio: " + juce::String(clip->audio.getNumSamples()) + " samples");
                }
                owner.readPosition = 0.0;
                owner.isPlaying = false; // Don't auto-play, wait for trigger
                DBG("[TTS Performer] Clip ready: " + juce::String(owner.selectedClip ? owner.selectedClip->audio.getNumSamples() : 0) + " samples");
                
                DBG("[TTS Performer] Audio resampling complete, ready for playback");
                juce::Logger::writeToLog("[TTS Performer] Audio resampling complete, ready for playback");
                
                // --- PARSE JSON TIMING DATA (Phase 2.3) ---
                bool hasTimingData = false;
                if (tempJsonFile.existsAsFile())
                {
                    DBG("[TTS Performer] JSON timing file generated: " + tempJsonFile.getFullPathName());
                    juce::Logger::writeToLog("[TTS Performer] JSON timing file generated: " + tempJsonFile.getFullPathName());
                    
                    try
                    {
                        // Read and parse the JSON file
                        juce::String jsonContent = tempJsonFile.loadFileAsString();
                        auto jsonData = nlohmann::json::parse(jsonContent.toStdString());
                        
                        DBG("[TTS Performer] JSON parsing successful, extracting timing data...");
                        juce::Logger::writeToLog("[TTS Performer] JSON parsing successful, extracting timing data...");
                        
                        // Parse the timing data
                        std::vector<WordTiming> newTimings;
                        
                        // Piper JSON structure typically contains:
                        // - "words": array of word objects with timing
                        // - Each word has "text", "start_time", "end_time", and "phonemes"
                        if (jsonData.contains("words") && jsonData["words"].is_array())
                        {
                            for (const auto& wordData : jsonData["words"])
                            {
                                if (wordData.contains("text") && wordData.contains("start_time") && wordData.contains("end_time"))
                                {
                                    juce::String wordText = wordData["text"].get<std::string>();
                                    double startTime = wordData["start_time"].get<double>();
                                    double endTime = wordData["end_time"].get<double>();
                                    
                                    WordTiming wordTiming(wordText, startTime, endTime);
                                    
                                    // Parse phonemes if available
                                    if (wordData.contains("phonemes") && wordData["phonemes"].is_array())
                                    {
                                        for (const auto& phonemeData : wordData["phonemes"])
                                        {
                                            if (phonemeData.contains("phoneme") && phonemeData.contains("start_time") && phonemeData.contains("end_time"))
                                            {
                                                juce::String phoneme = phonemeData["phoneme"].get<std::string>();
                                                double phonemeStart = phonemeData["start_time"].get<double>();
                                                double phonemeEnd = phonemeData["end_time"].get<double>();
                                                
                                                wordTiming.phonemes.emplace_back(phoneme, phonemeStart, phonemeEnd);
                                            }
                                        }
                                    }
                                    
                                    newTimings.push_back(wordTiming);
                                    
                                    DBG("[TTS Performer] Parsed word: \"" + wordText + "\" (" + 
                                        juce::String(startTime, 3) + "s - " + juce::String(endTime, 3) + "s, " +
                                        juce::String(wordTiming.phonemes.size()) + " phonemes)");
                                }
                            }
                        }
                        
                        // Store the parsed timing data (thread-safe) and attach to the selected clip
                        {
                            const juce::ScopedLock lock(owner.audioBufferLock);
                            owner.lastSynthesisTimings = newTimings;
                        }
                        if (owner.selectedClip)
                        {
                            const juce::ScopedLock c(owner.clipCacheLock);
                            owner.selectedClip->timings = newTimings;
                        }
                        // Persist timing JSON and XML (uses lastSynthesisTimings which was just updated)
                        owner.persistClipToDisk(textToSynthesize, modelFile, {}, jsonContent);
                        hasTimingData = true;
                        
                        DBG("[TTS Performer] Timing data parsed successfully: " + juce::String(newTimings.size()) + " words");
                        juce::Logger::writeToLog("[TTS Performer] Timing data parsed successfully: " + juce::String(newTimings.size()) + " words");
                        
                        // Log summary of timing data
                        for (size_t i = 0; i < newTimings.size(); ++i)
                        {
                            const auto& word = newTimings[i];
                            DBG("[TTS Performer] Word " + juce::String(i + 1) + ": \"" + word.word + "\" (" +
                                juce::String(word.startTimeSeconds, 3) + "s - " + juce::String(word.endTimeSeconds, 3) + "s)");
                        }
                    }
                    catch (const std::exception& e)
                    {
                        DBG("[TTS Performer] ERROR: Failed to parse JSON timing data: " + juce::String(e.what()));
                        juce::Logger::writeToLog("[TTS Performer] ERROR: Failed to parse JSON timing data: " + juce::String(e.what()));
                        
                        // Clear timing data on error
                        {
                            const juce::ScopedLock lock(owner.audioBufferLock);
                            owner.lastSynthesisTimings.clear();
                        }
                    }
                }
                else
                {
                    DBG("[TTS Performer] WARNING: JSON timing file was not created - using onset detection to find words.");
                    juce::Logger::writeToLog("[TTS Performer] WARNING: JSON timing file was not created - using onset detection to find words.");

                    // Call the new onset detection function to get precise timings from the audio
                    std::vector<WordTiming> detectedTimings = owner.detectWordsFromAudio(finalAudio, targetSR);

                    if (!detectedTimings.empty())
                    {
                        // Store the new precise timings
                        {
                            const juce::ScopedLock lock(owner.audioBufferLock);
                            owner.lastSynthesisTimings = detectedTimings;
                        }
                        if (owner.selectedClip)
                        {
                            const juce::ScopedLock c(owner.clipCacheLock);
                            owner.selectedClip->timings = detectedTimings;
                        }
                        // Persist the detected timings to an XML file for this clip
                        owner.persistClipToDisk(textToSynthesize, modelFile, {}, {});
                        hasTimingData = true;
                        DBG("[TTS Performer] Onset detection found " + juce::String(detectedTimings.size()) + " words");
                        juce::Logger::writeToLog("[TTS Performer] Onset detection found " + juce::String(detectedTimings.size()) + " words");
                    }
                }
                }
                else
                {
                throw std::runtime_error("Failed to start piper.exe process.");
            }
            tempWavFile.deleteFile(); // Clean up WAV file
            tempJsonFile.deleteFile(); // Clean up JSON file
        }
        catch (const std::exception& e)
        {
            const juce::ScopedLock lock(owner.messageLock);
            owner.errorMessage = e.what();
            owner.currentStatus = Status::Error;
        }
        owner.currentStatus = Status::Idle;
    }
}

void TTSPerformerModuleProcessor::cancelSynthesis()
{
    synthesisThread.stopThread(5000);
    synthesisThread.startThread();
    currentStatus = Status::Idle;
}

juce::File TTSPerformerModuleProcessor::getClipsRootDir() const
{
    auto exeDir = juce::File::getSpecialLocation(juce::File::currentExecutableFile).getParentDirectory();
    auto ttsDir = exeDir.getChildFile("TTSPERFORMER");
    
    if (!ttsDir.isDirectory())
        ttsDir.createDirectory();
    
    DBG("[TTS Performer] Clips root: " + ttsDir.getFullPathName());
    return ttsDir;
}

juce::String TTSPerformerModuleProcessor::sanitizeForDir(const juce::String& text) const
{
    juce::String s = text;
    const char* bad[] = {"\\", "/", ":", "*", "?", "\"", "<", ">", "|"};
    for (auto b : bad) s = s.replace(b, "_");
    if (s.length() > 64) s = s.substring(0, 64);
    return s.trim();
}

void TTSPerformerModuleProcessor::persistClipToDisk(const juce::String& text, const juce::File& modelFile,
                           const juce::AudioBuffer<float>& audioBuffer,
                           const juce::String& jsonContent)
{
    // --- FIX: Use hash-based ID as directory name for consistency ---
    // Compute the same hash-based ID that the clip object will have
    juce::String model = modelFile.getFileName();
    auto key = text + "|" + model;
    juce::String clipId = juce::String(juce::String::toHexString(juce::DefaultHashFunctions::generateHash(key, 0)));
    
    // Use the clip ID for the directory name
    juce::File dir = getClipsRootDir().getChildFile(clipId);
    if (!dir.exists()) dir.createDirectory();
    
    // Save metadata file containing original text and model info
    juce::XmlElement meta("ClipInfo");
    meta.setAttribute("name", text.substring(0, 48));
    meta.setAttribute("text", text);
    meta.setAttribute("model", modelFile.getFileName());
    dir.getChildFile("info.xml").replaceWithText(meta.toString());
    
    // Build unique file stem including voice + params
    juce::String base = modelFile.getFileNameWithoutExtension();
    auto* sp = apvts.getRawParameterValue("speed");
    auto* pt = apvts.getRawParameterValue("pitch");
    float spv = sp ? sp->load() : 0.0f;
    float ptv = pt ? pt->load() : 0.0f;
    juce::String speedStr = juce::String(spv, 2);
    juce::String pitchStr = juce::String(ptv, 2);
    juce::String stem = base + "_spd" + speedStr.replaceCharacter('.', '_') + "_pit" + pitchStr.replaceCharacter('.', '_');
    
    // Save model name tag (keeping for backward compatibility)
    dir.getChildFile("model.txt").replaceWithText(modelFile.getFileName());
    
    // Save JSON timing if provided
    if (jsonContent.isNotEmpty())
        dir.getChildFile(stem + ".json").replaceWithText(jsonContent);
    
    // Save XML timing if we have parsed timings (matching WAV filename)
    {
        const juce::ScopedLock lock(audioBufferLock);
        if (!lastSynthesisTimings.empty())
        {
            DBG("[TTS Performer] Saving XML timing with " + juce::String(lastSynthesisTimings.size()) + " words");
            juce::XmlElement root("timings");
            for (const auto& word : lastSynthesisTimings)
            {
                auto* wordEl = root.createNewChildElement("word");
                wordEl->setAttribute("text", word.word);
                wordEl->setAttribute("start", word.startTimeSeconds);
                wordEl->setAttribute("end", word.endTimeSeconds);
                for (const auto& ph : word.phonemes)
                {
                    auto* phEl = wordEl->createNewChildElement("phoneme");
                    phEl->setAttribute("text", ph.phoneme);
                    phEl->setAttribute("start", ph.startTimeSeconds);
                    phEl->setAttribute("end", ph.endTimeSeconds);
                }
            }
            auto xmlFile = dir.getChildFile(stem + ".xml");
            bool saved = xmlFile.replaceWithText(root.toString());
            DBG("[TTS Performer] XML timing saved: " + xmlFile.getFullPathName() + " (success: " + juce::String(saved ? "YES" : "NO") + ")");
    }
    else
    {
            DBG("[TTS Performer] WARNING: No timing data available for XML export");
        }
    }
    
    // Save WAV if provided
    if (audioBuffer.getNumSamples() > 0)
    {
        juce::WavAudioFormat wav;
        juce::String fname = stem + ".wav";
        std::unique_ptr<juce::FileOutputStream> out(dir.getChildFile(fname).createOutputStream());
        if (out && out->openedOk())
        {
            std::unique_ptr<juce::AudioFormatWriter> writer(wav.createWriterFor(out.release(), getSampleRate(), 1, 16, {}, 0));
            if (writer)
            {
                writer->writeFromAudioSampleBuffer(audioBuffer, 0, audioBuffer.getNumSamples());
                DBG("[TTS Performer] WAV saved: " + dir.getChildFile(fname).getFullPathName());
            }
        }
        else
        {
            DBG("[TTS Performer] ERROR: Failed to create WAV output stream");
        }
    }
}

// --- Clip cache helpers ---
juce::String TTSPerformerModuleProcessor::computeClipKey(const juce::String& text) const
{
    // Simple key: hash(text + model)
    juce::String model = synthesisThread.currentModelFile.getFileName();
    auto key = text + "|" + model;
    return juce::String(juce::String::toHexString(juce::DefaultHashFunctions::generateHash(key, 0)));
}

void TTSPerformerModuleProcessor::addClipToCache(const std::shared_ptr<TTSClip>& clip)
{
    if (!clip) return;
    // LRU eviction
    if ((int) clipCache.size() >= clipCacheMax)
    {
        juce::String oldestKey;
        auto oldestTime = std::chrono::steady_clock::now();
        for (auto& kv : clipCache)
        {
            if (kv.second && kv.second->lastUsed <= oldestTime)
            {
                oldestTime = kv.second->lastUsed;
                oldestKey = kv.first;
            }
        }
        if (oldestKey.isNotEmpty()) clipCache.erase(oldestKey);
    }
    clipCache[clip->clipId] = clip;
}

std::shared_ptr<TTSPerformerModuleProcessor::TTSClip> TTSPerformerModuleProcessor::findClipInCache(const juce::String& key) const
{
    auto it = clipCache.find(key);
    if (it != clipCache.end()) return it->second;
    return nullptr;
}

void TTSPerformerModuleProcessor::selectClipByKey(const juce::String& key)
{
    const juce::ScopedLock c(clipCacheLock);
    auto clip = findClipInCache(key);
    if (clip)
    {
        selectedClip = clip;
        readPosition = 0.0;
        isPlaying = false;
        {
            const juce::ScopedLock lock(audioBufferLock);
            lastSynthesisTimings = clip->timings;
            bakedAudioBuffer.makeCopyOf(clip->audio);
        }
        // Reset trim range parameters to full clip duration
        auto* trimStartParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimStart"));
        auto* trimEndParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimEnd"));
        if (trimStartParam) trimStartParam->setValueNotifyingHost(0.0f);
        if (trimEndParam) trimEndParam->setValueNotifyingHost(1.0f);
    }
}

void TTSPerformerModuleProcessor::selectClipByIndex(int index)
{
    const juce::ScopedLock c(clipCacheLock);
    if (clipCache.empty()) return;
    index = juce::jlimit(0, (int) clipCache.size() - 1, index);
    int i = 0;
    for (auto& kv : clipCache)
    {
        if (i++ == index) { selectClipByKey(kv.first); break; }
    }
}

void TTSPerformerModuleProcessor::loadClipsFromDisk()
{
    juce::File root = getClipsRootDir();
    juce::Array<juce::File> dirs;
    root.findChildFiles(dirs, juce::File::findDirectories, false);
    
    DBG("[TTS Performer] Scanning TTSPERFORMER: found " + juce::String(dirs.size()) + " clip folders");
    
    // Clear existing cache before reload
    {
        const juce::ScopedLock c(clipCacheLock);
        clipCache.clear();
    }
    
    for (auto dir : dirs)
    {
        // --- FIX: The directory name IS the unique clip ID now ---
        juce::String clipId = dir.getFileName();
        
        // Load metadata from info.xml
        juce::File metaFile = dir.getChildFile("info.xml");
        juce::String clipName = clipId;  // Fallback to ID if no metadata
        juce::String clipText = clipId;
        juce::String clipModel = "";
        
        if (metaFile.existsAsFile())
        {
            std::unique_ptr<juce::XmlElement> metaXml(juce::XmlDocument::parse(metaFile));
            if (metaXml && metaXml->hasTagName("ClipInfo"))
            {
                clipName = metaXml->getStringAttribute("name", clipId);
                clipText = metaXml->getStringAttribute("text", clipId);
                clipModel = metaXml->getStringAttribute("model", "");
            }
        }
        
        // --- THIS IS THE FIX ---
        // 1. Find all .wav files in the directory.
        juce::Array<juce::File> wavs;
        dir.findChildFiles(wavs, juce::File::findFiles, false, "*.wav");

        // 2. If no .wav files are found, we cannot load this clip, so skip to the next directory.
        if (wavs.isEmpty())
            continue;

        // 3. Find the newest .wav file in the directory.
        juce::File wavToLoad = wavs.getFirst();
        for (const auto& f : wavs)
        {
            if (f.getLastModificationTime() > wavToLoad.getLastModificationTime())
            {
                wavToLoad = f;
            }
        }
        // --- END OF FIX ---
        
        // Look for XML/JSON timing files matching WAV stem
        juce::String wavStem = wavToLoad.getFileNameWithoutExtension();
        auto timingXml = dir.getChildFile(wavStem + ".xml");
        auto timingJson = dir.getChildFile(wavStem + ".json");
        // Fallback to old naming scheme
        if (!timingXml.existsAsFile()) timingXml = dir.getChildFile("timing.xml");
        if (!timingJson.existsAsFile()) timingJson = dir.getChildFile("timing.json");
        
        juce::AudioFormatManager fm; fm.registerBasicFormats();
        std::unique_ptr<juce::AudioFormatReader> r(fm.createReaderFor(wavToLoad));
        if (!r) continue;
        juce::AudioBuffer<float> buf(1, (int) r->lengthInSamples);
        r->read(&buf, 0, buf.getNumSamples(), 0, true, false);
        std::vector<WordTiming> timings;
        // Prefer XML timing if available
        if (timingXml.existsAsFile())
        {
            std::unique_ptr<juce::XmlElement> root(juce::XmlDocument::parse(timingXml));
            if (root && root->hasTagName("timings"))
            {
                for (auto* wordEl : root->getChildWithTagNameIterator("word"))
                {
                    juce::String word = wordEl->getStringAttribute("text");
                    double start = wordEl->getDoubleAttribute("start");
                    double end = wordEl->getDoubleAttribute("end");
                    WordTiming wt(word, start, end);
                    for (auto* phEl : wordEl->getChildWithTagNameIterator("phoneme"))
                    {
                        juce::String ph = phEl->getStringAttribute("text");
                        double phStart = phEl->getDoubleAttribute("start");
                        double phEnd = phEl->getDoubleAttribute("end");
                        wt.phonemes.emplace_back(ph, phStart, phEnd);
                    }
                    timings.push_back(wt);
                }
            }
        }
        // Fallback to JSON timing if XML not found
        else if (timingJson.existsAsFile())
        {
            try {
                auto jsonData = nlohmann::json::parse(timingJson.loadFileAsString().toStdString());
                if (jsonData.contains("words") && jsonData["words"].is_array())
                {
                    for (const auto& wordData : jsonData["words"]) {
                        if (wordData.contains("text") && wordData.contains("start_time") && wordData.contains("end_time")) {
                            WordTiming wt(wordData["text"].get<std::string>(), wordData["start_time"].get<double>(), wordData["end_time"].get<double>());
                            if (wordData.contains("phonemes") && wordData["phonemes"].is_array()) {
                                for (const auto& p : wordData["phonemes"]) {
                                    if (p.contains("phoneme") && p.contains("start_time") && p.contains("end_time"))
                                        wt.phonemes.emplace_back(p["phoneme"].get<std::string>(), p["start_time"].get<double>(), p["end_time"].get<double>());
                                }
                            }
                            timings.push_back(wt);
                        }
                    }
                }
            } catch (...) {}
        }
        auto clip = std::make_shared<TTSClip>();
        clip->clipId = clipId;  // Use the hash-based ID from directory name
        clip->name = clipName;  // Use the name from metadata
        clip->text = clipText;  // Use the original text from metadata
        clip->modelKey = clipModel;  // Use the model from metadata
        clip->audio.makeCopyOf(buf);
        clip->sampleRate = getSampleRate();
        clip->durationSeconds = (double) buf.getNumSamples() / juce::jmax(1.0, getSampleRate());
        clip->timings = std::move(timings);
        const juce::ScopedLock c(clipCacheLock);
        addClipToCache(clip);
        DBG("[TTS Performer] Loaded clip: " + clipName + " (ID: " + clipId + ") from: " + dir.getFullPathName());
    }
    // Set flag AFTER successful load
    clipsLoadedFromDisk = true;
}

void TTSPerformerModuleProcessor::getStateInformation(juce::MemoryBlock& destData)
{
    auto state = apvts.copyState();
    std::unique_ptr<juce::XmlElement> xml(state.createXml());
    // Persist selected clip (trim parameters are already in APVTS)
    if (selectedClip) xml->setAttribute("selectedClipId", selectedClip->clipId);
    copyXmlToBinary(*xml, destData);
}

void TTSPerformerModuleProcessor::setStateInformation(const void* data, int sizeInBytes)
{
    std::unique_ptr<juce::XmlElement> xmlState(getXmlFromBinary(data, sizeInBytes));
    if (xmlState.get() != nullptr)
        if (xmlState->hasTagName(apvts.state.getType()))
        {
            apvts.replaceState(juce::ValueTree::fromXml(*xmlState));
            // Restore selected clip (trim parameters restored via APVTS)
            selectedClipId = xmlState->getStringAttribute("selectedClipId");
            if (selectedClipId.isNotEmpty()) selectClipByKey(selectedClipId);
        }
}

juce::ValueTree TTSPerformerModuleProcessor::getExtraStateTree() const
{
    juce::ValueTree vt("TTSPerformerState");
    // Only save the unique ID of the selected clip.
    // Trim parameters are handled automatically by the main APVTS save system.
    if (selectedClip)
    {
        vt.setProperty("selectedClipId", selectedClip->clipId, nullptr);
    }
    return vt;
}

void TTSPerformerModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (vt.hasType("TTSPerformerState"))
    {
        // Only load the unique ID of the clip to select.
        // Trim parameters are restored automatically by the main APVTS system.
        juce::String clipIdToSelect = vt.getProperty("selectedClipId", "").toString();
        if (clipIdToSelect.isNotEmpty())
        {
            selectClipByKey(clipIdToSelect);
        }
    }
}

#if defined(PRESET_CREATOR_UI)
void TTSPerformerModuleProcessor::drawClipsPanel(float itemWidth)
{
    ImGui::Text("Clips (%d cached)", getNumCachedClips());
    
    // --- FIX: Set fixed width to match waveform canvas (600.0f) ---
    const float dropdownWidth = 600.0f;
    ImGui::PushItemWidth(dropdownWidth);
    
    if (!clipsLoadedFromDisk) loadClipsFromDisk();
    juce::String currentName = selectedClip ? selectedClip->name : juce::String("(none)");
    if (ImGui::BeginCombo("##clipsCombo", currentName.toRawUTF8()))
    {
        const juce::ScopedLock lock(clipCacheLock);
        for (auto& kv : clipCache)
        {
            const auto& clip = kv.second;
            if (!clip) continue;
            
            // --- FIX: Include modelKey to show which voice was used ---
            juce::String label = clip->name + " (" + juce::String(clip->durationSeconds, 1) + "s, " + 
                                 juce::String(clip->timings.size()) + " words) [" + clip->modelKey + "]";
            
            // Append unique hidden ID to prevent ImGui ID conflicts
            // The "##" tells ImGui to use the following text for the ID but not display it
            label += "##" + clip->clipId;
            
            bool sel = (selectedClip && selectedClip->clipId == clip->clipId);
            if (ImGui::Selectable(label.toRawUTF8(), sel))
            {
                selectClipByKey(clip->clipId);
                // Reset trim parameters on clip switch (handled in selectClipByKey)
            }
            if (sel) ImGui::SetItemDefaultFocus();
        }
        ImGui::EndCombo();
    }
    ImGui::PopItemWidth();
    // Transport removed: use spacebar (PresetCreator) or audio engine auto-play (Collider)
    if (ImGui::Button("Rename##clip", ImVec2(itemWidth * 0.2f, 0)))
    {
        if (selectedClip)
        {
            // Show rename popup
            strncpy_s(renameBuffer, sizeof(renameBuffer), selectedClip->name.toRawUTF8(), _TRUNCATE);
            showRenamePopup = true;
            ImGui::OpenPopup("Rename Clip##renamepopup");
        }
    }
    
    // Rename popup modal
    if (ImGui::BeginPopupModal("Rename Clip##renamepopup", &showRenamePopup, ImGuiWindowFlags_AlwaysAutoResize))
    {
        ImGui::Text("Enter new name:");
        ImGui::InputText("##renameinput", renameBuffer, IM_ARRAYSIZE(renameBuffer));
        if (ImGui::Button("OK##renameok", ImVec2(120, 0)))
        {
            if (selectedClip && renameBuffer[0] != '\0')
            {
                renameSelectedClipOnDisk(juce::String(renameBuffer));
            }
            showRenamePopup = false;
            ImGui::CloseCurrentPopup();
        }
        ImGui::SameLine();
        if (ImGui::Button("Cancel##renamecancel", ImVec2(120, 0)))
        {
            showRenamePopup = false;
            ImGui::CloseCurrentPopup();
        }
        ImGui::EndPopup();
    }
    
    ImGui::SameLine();
    if (ImGui::Button("Delete##clip", ImVec2(itemWidth * 0.2f, 0)))
    {
        if (selectedClip)
        {
            showDeleteConfirm = true;
            ImGui::OpenPopup("Confirm Delete##deletepopup");
        }
    }
    
    // Delete confirmation modal
    if (ImGui::BeginPopupModal("Confirm Delete##deletepopup", &showDeleteConfirm, ImGuiWindowFlags_AlwaysAutoResize))
    {
        ImGui::Text("Delete clip \"%s\"?", selectedClip ? selectedClip->name.toRawUTF8() : "");
        ImGui::Text("This will remove it from disk permanently.");
        if (ImGui::Button("Yes##deleteyes", ImVec2(120, 0)))
        {
            deleteSelectedClipFromDisk();
            showDeleteConfirm = false;
            ImGui::CloseCurrentPopup();
        }
        ImGui::SameLine();
        if (ImGui::Button("No##deleteno", ImVec2(120, 0)))
        {
            showDeleteConfirm = false;
            ImGui::CloseCurrentPopup();
        }
        ImGui::EndPopup();
    }
    
    ImGui::SameLine();
    if (ImGui::Button("Reload##clip", ImVec2(itemWidth * 0.2f, 0))) { clipsLoadedFromDisk = false; loadClipsFromDisk(); }
}
#endif

bool TTSPerformerModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    // Bus 0: Global Mods (Rate, Gate, Trigger, Reset, Randomize)
    if (paramId == paramIdRateMod)      { outBusIndex = 0; outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdGateMod)      { outBusIndex = 0; outChannelIndexInBus = 1; return true; }
    if (paramId == paramIdTriggerMod)   { outBusIndex = 0; outChannelIndexInBus = 2; return true; }
    if (paramId == paramIdResetMod)     { outBusIndex = 0; outChannelIndexInBus = 3; return true; }
    if (paramId == paramIdRandomizeMod) { outBusIndex = 0; outChannelIndexInBus = 4; return true; } // <-- NEW

    // Bus 1: Trim Mods (Trim Start, Trim End)
    if (paramId == paramIdTrimStartMod) { outBusIndex = 1; outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdTrimEndMod)   { outBusIndex = 1; outChannelIndexInBus = 1; return true; }

    // Bus 2: Playback Mods (Speed, Pitch)
    if (paramId == paramIdSpeedMod)     { outBusIndex = 2; outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdPitchMod)     { outBusIndex = 2; outChannelIndexInBus = 1; return true; }

    // Bus 3: Word Triggers (Word 1-16)
    if (paramId.startsWith("word") && paramId.endsWith("_trig_mod"))
    {
        int wordNum = paramId.fromFirstOccurrenceOf("word", false, false)
                           .upToFirstOccurrenceOf("_trig_mod", false, false)
                           .getIntValue();
        if (wordNum > 0 && wordNum <= 16)
        {
            outBusIndex = 3;
            outChannelIndexInBus = wordNum - 1; // 0-indexed within bus
            return true;
        }
    }

    return false;
}

juce::String TTSPerformerModuleProcessor::getAudioInputLabel(int channel) const
{
    // Multi-bus absolute channel mapping (flattened in bus order):
    // Bus 0 (Global Mods): 0..4
    // Bus 1 (Trim Mods):   5..6
    // Bus 2 (Playback):    7..8
    // Bus 3 (Word Trigs):  9..24
    switch (channel)
    {
        case 0: return "Rate Mod";
        case 1: return "Gate Mod";
        case 2: return "Trigger";
        case 3: return "Reset";
        case 4: return "Randomize Trig"; // <-- NEW
        case 5: return "Trim Start Mod";
        case 6: return "Trim End Mod";
        case 7: return "Speed Mod";
        case 8: return "Pitch Mod";
        default:
            if (channel >= 9 && channel < 25)
                return "Word " + juce::String(channel - 8) + " Trig"; // 9->Word1, 24->Word16
            return {};
    }
}

juce::String TTSPerformerModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (channel == 0) return "Audio";
    if (channel == 1) return "Word Gate";
    if (channel == 2) return "EOP Gate";
    if (channel >= 3 && channel < 19)
        return "Word " + juce::String(channel - 2) + " Gate";
    if (channel >= 19 && channel < 35)
        return "Word " + juce::String(channel - 18) + " Trig";
    return {};
}

#if defined(PRESET_CREATOR_UI)
void TTSPerformerModuleProcessor::refreshModelChoices()
{
    const juce::ScopedLock lock(modelLock);
    modelEntries.clear();
    // Prefer mapping file if present
    auto mapFile = resolveModelsBaseDir().getChildFile("piper_voices_map.md");
    if (!loadVoicesFromMapFile(mapFile))
    {
        // Scan models directory recursively for .onnx files under piper-voices
        juce::File base = resolveModelsBaseDir().getChildFile("piper-voices");
        if (base.isDirectory())
        {
            juce::Array<juce::File> files;
            base.findChildFiles(files, juce::File::findFiles, true, "*.onnx");
            for (auto f : files)
            {
                auto rel = f.getRelativePathFrom(resolveModelsBaseDir());
                auto parts = juce::StringArray::fromTokens(rel, "\\/", "");
                // Expect: piper-voices/<lang>/<locale>/<voice>/<quality>/<file>
                if (parts.size() >= 6 && parts[0].equalsIgnoreCase("piper-voices"))
                {
                    ModelEntry e;
                    e.language = parts[1];
                    e.locale = parts[2];
                    e.voice = parts[3];
                    e.quality = parts[4];
                    e.relativeOnnx = rel.replaceCharacter('\\', '/');
                    modelEntries.push_back(e);
                }
            }
        }
    }
    if (modelEntries.empty())
    {
        // Fallback seed
        ModelEntry e { "en", "en_US", "lessac", "medium", "piper-voices/en/en_US/lessac/medium/en_US-lessac-medium.onnx" };
        modelEntries.push_back(e);
    }
}
#endif

juce::File TTSPerformerModuleProcessor::resolveModelsBaseDir() const
{
    auto exeDir = juce::File::getSpecialLocation(juce::File::currentExecutableFile).getParentDirectory();
    auto candidate = exeDir.getChildFile("models");
    if (candidate.isDirectory()) return candidate;
    auto parent = exeDir.getParentDirectory();
    auto parentModels = parent.getChildFile("models");
    if (parentModels.isDirectory()) return parentModels;
    return exeDir;
}

juce::File TTSPerformerModuleProcessor::resolveSelectedModelFile() const
{
    const juce::ScopedLock lock(modelLock);
    for (const auto& e : modelEntries)
    {
        if (e.locale == selectedLocale && e.voice == selectedVoice && e.quality == selectedQuality)
            return resolveModelsBaseDir().getChildFile(e.relativeOnnx);
    }
    for (const auto& e : modelEntries)
    {
        if (e.locale == selectedLocale && e.voice == selectedVoice)
            return resolveModelsBaseDir().getChildFile(e.relativeOnnx);
    }
    return resolveModelsBaseDir().getChildFile("piper-voices/en/en_US/lessac/medium/en_US-lessac-medium.onnx");
}

bool TTSPerformerModuleProcessor::loadVoicesFromMapFile(const juce::File& mapFile)
{
    if (!mapFile.existsAsFile()) return false;
    juce::String content = mapFile.loadFileAsString();
    auto lines = juce::StringArray::fromLines(content);
    for (auto& line : lines)
    {
        auto l = line.trim();
        if (l.isEmpty() || !l.endsWithIgnoreCase(".onnx")) continue;
        juce::String p = l;
        // Lines may start with leading backslash; normalize
        while (p.startsWithChar('\\') || p.startsWithChar('/')) p = p.substring(1);
        p = p.replaceCharacter('\\', '/');
        auto parts = juce::StringArray::fromTokens(p, "/", "");
        // Expect: piper-voices/<lang>/<locale>/<voice>/<quality>/<file>
        int idx = parts.indexOf("piper-voices");
        if (idx < 0) continue;
        if (parts.size() >= idx + 6)
        {
            ModelEntry e;
            e.language = parts[idx + 1];
            e.locale = parts[idx + 2];
            e.voice = parts[idx + 3];
            e.quality = parts[idx + 4];
            juce::String rel;
            for (int i = idx; i < parts.size(); ++i)
            {
                if (i > idx) rel += "/";
                rel += parts[i];
            }
            e.relativeOnnx = rel;
            modelEntries.push_back(e);
        }
    }
    return !modelEntries.empty();
}

const std::vector<WordTiming>& TTSPerformerModuleProcessor::getActiveTimings() const
{
    return (selectedClip && !selectedClip->timings.empty()) ? selectedClip->timings : lastSynthesisTimings;
}

int TTSPerformerModuleProcessor::findFirstWordIndexAtOrAfter(double timeSec) const
{
    const auto& t = getActiveTimings();
    for (int i = 0; i < (int) t.size(); ++i) if (t[(size_t) i].endTimeSeconds >= timeSec) return i;
    return juce::jmax(0, (int) t.size() - 1);
}

int TTSPerformerModuleProcessor::findLastWordIndexAtOrBefore(double timeSec) const
{
    const auto& t = getActiveTimings();
    for (int i = (int) t.size() - 1; i >= 0; --i) if (t[(size_t) i].startTimeSeconds <= timeSec) return i;
    return 0;
}

void TTSPerformerModuleProcessor::clampWordIndexToTrim()
{
    const auto& t = getActiveTimings();
    if (t.empty()) return;
    // Read trim from parameters (normalized 0-1)
    float trimStartNorm = apvts.getRawParameterValue("trimStart")->load();
    float trimEndNorm = apvts.getRawParameterValue("trimEnd")->load();
    double totalDur = selectedClip ? selectedClip->durationSeconds : t.back().endTimeSeconds;
    double t0 = trimStartNorm * totalDur;
    double t1 = trimEndNorm * totalDur;
    int minIdx = findFirstWordIndexAtOrAfter(t0);
    int maxIdx = findLastWordIndexAtOrBefore(t1);
    currentWordIndex = juce::jlimit(minIdx, maxIdx, currentWordIndex);
}

void TTSPerformerModuleProcessor::normalizeModelSelection()
{
    const juce::ScopedLock lock(modelLock);
    if (modelEntries.empty()) return;
    // Ensure selectedLanguage exists; otherwise pick first
    auto languageExists = std::find_if(modelEntries.begin(), modelEntries.end(), [&](const ModelEntry& e){ return e.language == selectedLanguage; }) != modelEntries.end();
    if (!languageExists) selectedLanguage = modelEntries.front().language;
    // Limit locale set to language
    juce::StringArray locales;
    for (const auto& e : modelEntries) if (e.language == selectedLanguage && !locales.contains(e.locale)) locales.add(e.locale);
    if (!locales.contains(selectedLocale) && locales.size() > 0) selectedLocale = locales[0];
    // Limit voices to locale
    juce::StringArray voices;
    for (const auto& e : modelEntries) if (e.locale == selectedLocale && !voices.contains(e.voice)) voices.add(e.voice);
    if (!voices.contains(selectedVoice) && voices.size() > 0) selectedVoice = voices[0];
    // Limit qualities to voice
    juce::StringArray qualities;
    for (const auto& e : modelEntries) if (e.locale == selectedLocale && e.voice == selectedVoice && !qualities.contains(e.quality)) qualities.add(e.quality);
    if (!qualities.contains(selectedQuality) && qualities.size() > 0) selectedQuality = qualities[0];
}

#if defined(PRESET_CREATOR_UI)
float TTSPerformerModuleProcessor::getLiveNoGate(const juce::String& liveKey, float fallback) const
{
    // Read live telemetry directly without engine connectivity gating
    if (auto it = paramLiveValues.find(liveKey); it != paramLiveValues.end())
        return it->second.load(std::memory_order_relaxed);
    return fallback;
}

void TTSPerformerModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    // Status indicator
    Status status = currentStatus.load();
    switch (status)
    {
        case Status::Idle:
            ImGui::Text("Status: Ready");
            break;
        case Status::Synthesizing:
            ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), "Status: Synthesizing...");
            break;
        case Status::Playing:
            ImGui::TextColored(ImVec4(0.0f, 1.0f, 0.0f, 1.0f), "Status: Playing");
            break;
        case Status::Error:
            ImGui::TextColored(ImVec4(1.0f, 0.0f, 0.0f, 1.0f), "Status: Error");
            break;
    }

    // Error message
    if (status == Status::Error)
    {
        const juce::ScopedLock lock(messageLock);
        if (errorMessage.isNotEmpty())
        {
            ImGui::TextWrapped("Error: %s", errorMessage.toRawUTF8());
        }
    }

    // Text input (compact, use itemWidth directly)
    ImGui::PushItemWidth(itemWidth);
    ImGui::InputTextMultiline("##TextInput", uiTextBuffer, sizeof(uiTextBuffer), 
                              ImVec2(itemWidth, 45), ImGuiInputTextFlags_None);
    ImGui::PopItemWidth();
    
    ImGui::PushItemWidth(itemWidth);
    
    // --- SYNC CONTROLS ---
    bool sync = apvts.getRawParameterValue("sync")->load() > 0.5f;
    if (ImGui::Checkbox("Sync to Transport", &sync))
    {
        if (auto* p = dynamic_cast<juce::AudioParameterBool*>(apvts.getParameter("sync")))
            *p = sync;
        onModificationEnded();
    }

    if (sync)
    {
        int division = (int)apvts.getRawParameterValue("rate_division")->load();
        if (ImGui::Combo("Division", &division, "1/32\0""1/16\0""1/8\0""1/4\0""1/2\0""1\0""2\0""4\0""8\0\0"))
        {
            if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("rate_division")))
                *p = division;
            onModificationEnded();
        }
    }
    else
    {
        // Rate slider (only shown in free-running mode, with modulation feedback + proper undo/redo)
        const bool rateIsMod = isParamModulated("rate_mod");
        float rate = rateIsMod ? getLiveNoGate("rate_live", rateParam->load())
                               : rateParam->load();
        
        if (rateIsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Rate (Hz)", &rate, 0.1f, 20.0f, "%.2f", ImGuiSliderFlags_Logarithmic))
        {
            if (!rateIsMod) 
            {
                auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("rate"));
                if (param) param->setValueNotifyingHost(apvts.getParameterRange("rate").convertTo0to1(rate));
            }
        }
        if (!rateIsMod) adjustParamOnWheel(apvts.getParameter("rate"), "rate", rate);
        if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
        if (rateIsMod)
        {
            ImGui::EndDisabled();
            const float baseRateDisp = rateParam->load();
            const float liveRateDisp = getLiveNoGate("rate_live", baseRateDisp);
            ImGui::SameLine();
            ImGui::Text("%.2f Hz -> %.2f Hz (mod)", baseRateDisp, liveRateDisp);
        }
    }
    
    // Gate slider
    const bool gateIsMod = isParamModulated("gate_mod");
    float gate = gateIsMod ? getLiveNoGate("gate_live", gateParam->load())
                           : gateParam->load();
    
    if (gateIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Gate", &gate, 0.0f, 1.0f, "%.3f"))
    {
        if (!gateIsMod) 
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("gate"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("gate").convertTo0to1(gate));
        }
    }
    if (!gateIsMod) adjustParamOnWheel(apvts.getParameter("gate"), "gate", gate);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (gateIsMod)
    {
        ImGui::EndDisabled();
        const float baseGateDisp = gateParam->load();
        const float liveGateDisp = getLiveNoGate("gate_live", baseGateDisp);
        ImGui::SameLine();
        ImGui::Text("%.0f%% -> %.0f%% (mod)", baseGateDisp * 100.0f, liveGateDisp * 100.0f);
    }
    
    // Volume slider (with proper undo/redo)
    float volume = volumeParam->load();
    if (ImGui::SliderFloat("Volume", &volume, 0.0f, 1.0f, "%.2f"))
    {
        auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("volume"));
        if (param) param->setValueNotifyingHost(apvts.getParameterRange("volume").convertTo0to1(volume));
    }
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    
    // Engine UI (minimal) - default to Naive if param missing
    {
        int engineIdx = 1;
        if (auto* p = apvts.getParameter("engine")) engineIdx = (int) p->getValue();
        const char* items[] = { "RubberBand", "Naive" };
        if (ImGui::Combo("Engine", &engineIdx, items, 2))
        {
            if (auto* p = apvts.getParameter("engine")) p->setValueNotifyingHost((float) engineIdx);
            onModificationEnded();
        }
    }

    // Speed slider (with modulation feedback)
    const bool speedIsMod = isParamModulated("speed_mod");
    float speed = speedIsMod ? getLiveNoGate("speed_live", apvts.getRawParameterValue("speed")->load()) 
                             : apvts.getRawParameterValue("speed")->load();
    
    if (speedIsMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat("Speed", &speed, 0.25f, 4.0f, "%.2fx"))
    {
        if (!speedIsMod)
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("speed"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("speed").convertTo0to1(speed));
        }
    }
    if (!speedIsMod) adjustParamOnWheel(apvts.getParameter("speed"), "speed", speed);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (speedIsMod)
    {
        ImGui::EndDisabled();
        const float baseSpeedDisp = apvts.getRawParameterValue("speed")->load();
        const float liveSpeedDisp = getLiveNoGate("speed_live", baseSpeedDisp);
        ImGui::SameLine();
        ImGui::Text("%.2fx -> %.2fx (mod)", baseSpeedDisp, liveSpeedDisp);
    }
    
    // Pitch slider (with modulation feedback)
    const bool pitchIsMod = isParamModulated("pitch_mod");
    float pitch = pitchIsMod ? getLiveNoGate("pitch_live", apvts.getRawParameterValue("pitch")->load())
                             : apvts.getRawParameterValue("pitch")->load();
    
    if (pitchIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Pitch", &pitch, -24.0f, 24.0f, "%.1f st"))
    {
        if (!pitchIsMod)
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("pitch"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("pitch").convertTo0to1(pitch));
        }
    }
    if (!pitchIsMod) adjustParamOnWheel(apvts.getParameter("pitch"), "pitch", pitch);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (pitchIsMod)
    {
        ImGui::EndDisabled();
        const float basePitchDisp = apvts.getRawParameterValue("pitch")->load();
        const float livePitchDisp = getLiveNoGate("pitch_live", basePitchDisp);
        ImGui::SameLine();
        ImGui::Text("%.1f st -> %.1f st (mod)", basePitchDisp, livePitchDisp);
    }
    
    // Trim sliders (with modulation feedback)
    const bool trimStartIsMod = isParamModulated("trimStart_mod");
    float trimStart = trimStartIsMod ? getLiveNoGate("trimStart_live", apvts.getRawParameterValue("trimStart")->load())
                                     : apvts.getRawParameterValue("trimStart")->load();
    if (trimStartIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Trim Start", &trimStart, 0.0f, 1.0f, "%.3f"))
    {
        if (!trimStartIsMod)
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimStart"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("trimStart").convertTo0to1(trimStart));
        }
    }
    if (!trimStartIsMod) adjustParamOnWheel(apvts.getParameter("trimStart"), "trimStart", trimStart);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (trimStartIsMod)
    {
        ImGui::EndDisabled();
        const float baseTrimStartDisp = apvts.getRawParameterValue("trimStart")->load();
        const float liveTrimStartDisp = getLiveNoGate("trimStart_live", baseTrimStartDisp);
        const double durSec = (selectedClip ? selectedClip->durationSeconds : 0.0);
        ImGui::SameLine();
        if (durSec > 0.0)
            ImGui::Text("%.3f -> %.3f (%.2fs -> %.2fs) (mod)", baseTrimStartDisp, liveTrimStartDisp, baseTrimStartDisp * (float)durSec, liveTrimStartDisp * (float)durSec);
        else
            ImGui::Text("%.3f -> %.3f (mod)", baseTrimStartDisp, liveTrimStartDisp);
    }
    
    const bool trimEndIsMod = isParamModulated("trimEnd_mod");
    float trimEnd = trimEndIsMod ? getLiveNoGate("trimEnd_live", apvts.getRawParameterValue("trimEnd")->load())
                                 : apvts.getRawParameterValue("trimEnd")->load();
    if (trimEndIsMod) ImGui::BeginDisabled();
    if (ImGui::SliderFloat("Trim End", &trimEnd, 0.0f, 1.0f, "%.3f"))
    {
        if (!trimEndIsMod)
        {
            auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimEnd"));
            if (param) param->setValueNotifyingHost(apvts.getParameterRange("trimEnd").convertTo0to1(trimEnd));
        }
    }
    if (!trimEndIsMod) adjustParamOnWheel(apvts.getParameter("trimEnd"), "trimEnd", trimEnd);
    if (ImGui::IsItemDeactivatedAfterEdit()) onModificationEnded();
    if (trimEndIsMod)
    {
        ImGui::EndDisabled();
        const float baseTrimEndDisp = apvts.getRawParameterValue("trimEnd")->load();
        const float liveTrimEndDisp = getLiveNoGate("trimEnd_live", baseTrimEndDisp);
        const double durSec = (selectedClip ? selectedClip->durationSeconds : 0.0);
        ImGui::SameLine();
        if (durSec > 0.0)
            ImGui::Text("%.3f -> %.3f (%.2fs -> %.2fs) (mod)", baseTrimEndDisp, liveTrimEndDisp, baseTrimEndDisp * (float)durSec, liveTrimEndDisp * (float)durSec);
        else
            ImGui::Text("%.3f -> %.3f (mod)", baseTrimEndDisp, liveTrimEndDisp);
    }
    
    ImGui::PopItemWidth();

    // Model selection (compact)
    {
        if (modelEntries.empty()) { refreshModelChoices(); loadClipsFromDisk(); }
        normalizeModelSelection();
        const juce::ScopedLock lock(modelLock);
        // Build unique sets
        juce::StringArray languages, locales, voices, qualities;
        for (const auto& e : modelEntries)
            if (!languages.contains(e.language)) languages.add(e.language);
        // Language
        juce::String langShown = selectedLanguage;
        ImGui::PushItemWidth(itemWidth * 0.4f); // Constrain dropdown width
        if (ImGui::BeginCombo("Language", langShown.toRawUTF8()))
        {
            for (auto& l : languages)
            {
                bool sel = (l == selectedLanguage);
                if (ImGui::Selectable(l.toRawUTF8(), sel)) { selectedLanguage = l; selectedLocale.clear(); selectedVoice.clear(); selectedQuality.clear(); normalizeModelSelection(); }
                if (sel) ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }
        ImGui::PopItemWidth();
        // Locales for language
        for (const auto& e : modelEntries)
            if (e.language == selectedLanguage && !locales.contains(e.locale)) locales.add(e.locale);
        juce::String locShown = selectedLocale;
        ImGui::PushItemWidth(itemWidth * 0.4f);
        if (ImGui::BeginCombo("Locale", locShown.toRawUTF8()))
        {
            for (auto& l : locales)
            {
                bool sel = (l == selectedLocale);
                if (ImGui::Selectable(l.toRawUTF8(), sel)) { selectedLocale = l; selectedVoice.clear(); selectedQuality.clear(); normalizeModelSelection(); }
                if (sel) ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }
        ImGui::PopItemWidth();
        // Voices for locale
        for (const auto& e : modelEntries)
            if (e.locale == selectedLocale && !voices.contains(e.voice)) voices.add(e.voice);
        juce::String voiceShown = selectedVoice;
        ImGui::PushItemWidth(itemWidth * 0.4f);
        if (ImGui::BeginCombo("Voice", voiceShown.toRawUTF8()))
        {
            for (auto& v : voices)
            {
                bool sel = (v == selectedVoice);
                if (ImGui::Selectable(v.toRawUTF8(), sel)) { selectedVoice = v; selectedQuality.clear(); normalizeModelSelection(); }
                if (sel) ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }
        ImGui::PopItemWidth();
        // Quality for voice
        for (const auto& e : modelEntries)
            if (e.locale == selectedLocale && e.voice == selectedVoice && !qualities.contains(e.quality)) qualities.add(e.quality);
        juce::String qualShown = selectedQuality;
        ImGui::PushItemWidth(itemWidth * 0.4f);
        if (ImGui::BeginCombo("Quality", qualShown.toRawUTF8()))
        {
            for (auto& q : qualities)
            {
                bool sel = (q == selectedQuality);
                if (ImGui::Selectable(q.toRawUTF8(), sel)) { selectedQuality = q; }
                if (sel) ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }
        ImGui::PopItemWidth();
    }

    
    // Phase 5: Clips panel (list/select)
    drawClipsPanel(itemWidth);

    // SINGLE UNIFIED TIMELINE (after Clips panel, before BAKE)
    if (selectedClip && !selectedClip->timings.empty())
    {
        ImGui::Text("Timeline");
        
        const float canvasWidth = 600.0f; // Fixed width for better horizontal space
        const float canvasHeight = 200.0f; // Compact height to reduce vertical space
        ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();
        ImVec2 canvas_p1(canvas_p0.x + canvasWidth, canvas_p0.y + canvasHeight);
        ImDrawList* dl = ImGui::GetWindowDrawList();
        
        // Background
        dl->AddRectFilled(canvas_p0, canvas_p1, IM_COL32(20, 20, 20, 255));
        
        double totalDur = selectedClip->durationSeconds > 0.0 ? selectedClip->durationSeconds 
                        : ((double)selectedClip->audio.getNumSamples() / juce::jmax(1.0, getSampleRate()));
        
        // Get the live, modulated trim values to correctly position the UI handles
        const bool trimStartIsMod = isParamModulated("trimStart_mod");
        float trimStartNorm = trimStartIsMod 
            ? getLiveParamValueFor("trimStart_mod", "trimStart_live", apvts.getRawParameterValue("trimStart")->load())
            : apvts.getRawParameterValue("trimStart")->load();

        const bool trimEndIsMod = isParamModulated("trimEnd_mod");
        float trimEndNorm = trimEndIsMod 
            ? getLiveParamValueFor("trimEnd_mod", "trimEnd_live", apvts.getRawParameterValue("trimEnd")->load())
            : apvts.getRawParameterValue("trimEnd")->load();

        // Ensure start is always before end for drawing stability
        if (trimStartNorm >= trimEndNorm) {
            trimStartNorm = juce::jmax(0.0f, trimEndNorm - 0.001f);
        }
        double trimStartSec = trimStartNorm * totalDur;
        double trimEndSec = trimEndNorm * totalDur;
        
        // Draw waveform (semi-transparent)
        const juce::ScopedLock lock(audioBufferLock);
        if (selectedClip->audio.getNumSamples() > 0)
        {
            const float midY = canvas_p0.y + canvasHeight * 0.5f;
            for (int x = 0; x < (int)canvasWidth; ++x)
            {
                float startSampleF = ((float)x / canvasWidth) * selectedClip->audio.getNumSamples();
                float endSampleF = ((float)(x + 1) / canvasWidth) * selectedClip->audio.getNumSamples();
                int startSample = (int)startSampleF;
                int endSample = (int)endSampleF;
                if (startSample >= endSample) continue;
                
                juce::Range<float> minMax = selectedClip->audio.findMinMax(0, startSample, endSample - startSample);
                float y1 = midY - minMax.getStart() * (canvasHeight * 0.4f);
                float y2 = midY - minMax.getEnd() * (canvasHeight * 0.4f);
                dl->AddLine(ImVec2(canvas_p0.x + x, y1), ImVec2(canvas_p0.x + x, y2), IM_COL32(60, 80, 100, 180), 1.0f);
            }
        }
        
        // Draw word bars (colored, labeled)
        for (size_t i = 0; i < selectedClip->timings.size(); ++i)
        {
            const auto& w = selectedClip->timings[i];
            float x0 = canvas_p0.x + (float)(w.startTimeSeconds / totalDur) * canvasWidth;
            float x1 = canvas_p0.x + (float)(w.endTimeSeconds / totalDur) * canvasWidth;
            
            bool active = false;
            if (isPlaying)
            {
                double curSec = readPosition / juce::jmax(1.0, getSampleRate());
                active = (curSec >= w.startTimeSeconds && curSec < w.endTimeSeconds);
            }
            
            ImU32 bg = active ? IM_COL32(255, 180, 80, 100) : IM_COL32(80, 120, 160, 80);
            dl->AddRectFilled(ImVec2(x0, canvas_p0.y), ImVec2(x1, canvas_p1.y), bg);
            dl->AddLine(ImVec2(x0, canvas_p0.y), ImVec2(x0, canvas_p1.y), IM_COL32(200, 200, 200, 120), 1.0f);
            
            // Word label
            ImGui::PushClipRect(ImVec2(x0, canvas_p0.y), ImVec2(x1, canvas_p1.y), true);
            dl->AddText(ImVec2(x0 + 2, canvas_p0.y + 2), IM_COL32_WHITE, w.word.toRawUTF8());
            ImGui::PopClipRect();
        }
        
        // Draw trim handles (10px wide, draggable)
        float trimX0 = canvas_p0.x + (float)(trimStartSec / totalDur) * canvasWidth;
        float trimX1 = canvas_p0.x + (float)(trimEndSec / totalDur) * canvasWidth;
        
        dl->AddRectFilled(ImVec2(trimX0 - 5, canvas_p0.y), ImVec2(trimX0 + 5, canvas_p1.y), IM_COL32(255, 255, 100, 180));
        dl->AddRectFilled(ImVec2(trimX1 - 5, canvas_p0.y), ImVec2(trimX1 + 5, canvas_p1.y), IM_COL32(255, 100, 100, 180));
        
        // Draw playhead (red line if playing)
        if (isPlaying)
        {
            double curTime = readPosition / juce::jmax(1.0, getSampleRate());
            float playX = canvas_p0.x + (float)(curTime / totalDur) * canvasWidth;
            dl->AddLine(ImVec2(playX, canvas_p0.y), ImVec2(playX, canvas_p1.y), IM_COL32(255, 50, 50, 255), 2.0f);
        }
        
        // Border
        dl->AddRect(canvas_p0, canvas_p1, IM_COL32(100, 100, 100, 255));
        
        // Interaction (trim handles + scrubbing)
        ImGui::SetCursorScreenPos(canvas_p0);
        ImGui::InvisibleButton("##timeline", ImVec2(canvasWidth, canvasHeight));
        
        if (ImGui::IsItemActive() && ImGui::IsMouseDragging(0))
        {
            float mouseX = ImGui::GetIO().MousePos.x;
            float normalizedX = (mouseX - canvas_p0.x) / canvasWidth;
            normalizedX = juce::jlimit(0.0f, 1.0f, normalizedX);
            double t = normalizedX * totalDur;
            
            // Determine what to drag
            if (std::abs(mouseX - trimX0) < 10.0f && !draggingTrimEnd && !draggingScrub)
                draggingTrimStart = true;
            else if (std::abs(mouseX - trimX1) < 10.0f && !draggingTrimStart && !draggingScrub)
                draggingTrimEnd = true;
            else if (!draggingTrimStart && !draggingTrimEnd)
                draggingScrub = true;
            
            if (draggingTrimStart)
            {
                // Update parameter directly for bidirectional sync
                float newTrimStartNorm = (float)juce::jlimit(0.0, (double)trimEndNorm, t / totalDur);
                auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimStart"));
                if (param) param->setValueNotifyingHost(newTrimStartNorm);
            }
            else if (draggingTrimEnd)
            {
                // Update parameter directly for bidirectional sync
                float newTrimEndNorm = (float)juce::jlimit((double)trimStartNorm, 1.0, t / totalDur);
                auto* param = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("trimEnd"));
                if (param) param->setValueNotifyingHost(newTrimEndNorm);
            }
            else if (draggingScrub)
            {
                const juce::ScopedLock lock2(audioBufferLock);
                readPosition = juce::jlimit(0.0, (double)(selectedClip->audio.getNumSamples() - 1), t * getSampleRate());
            }
        }
        
        if (ImGui::IsItemDeactivated())
        {
            draggingTrimStart = draggingTrimEnd = draggingScrub = false;
        onModificationEnded();
        }
        
        ImGui::Dummy(ImVec2(canvasWidth, canvasHeight));
    }
    
    // Action buttons (compact layout, no extra spacing)
    bool isBusy = (status == Status::Synthesizing);
    if (isBusy)
        ImGui::BeginDisabled();
        
    if (ImGui::Button("BAKE", ImVec2(itemWidth * 0.30f, 18)))
    {
        DBG("[TTS Performer] BAKE AUDIO button clicked!");
        juce::Logger::writeToLog("[TTS Performer] BAKE AUDIO button clicked!");
        
        juce::String textToSpeak = juce::String(uiTextBuffer);
        if (textToSpeak.isNotEmpty())
        {
            startSynthesis(textToSpeak);
        }
    }
    
    if (isBusy)
        ImGui::EndDisabled();

    // Live input telemetry block (compact, minimal spacing)
    
    // Current clip and playback state
    if (selectedClip)
    {
        juce::String clipInfo = "Clip: " + selectedClip->name + " (" + juce::String(selectedClip->durationSeconds, 2) + "s, " + 
                                juce::String(selectedClip->timings.size()) + " words)";
        ImGui::TextColored(ImVec4(0.7f, 1.0f, 0.7f, 1.0f), "%s", clipInfo.toRawUTF8());
        ImGui::Text("Playback: %s | Word: %d/%d", 
            isPlaying ? "PLAYING" : "STOPPED",
            currentWordIndex + 1, (int) getActiveTimings().size());
    }
    else
    {
        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "No clip selected");
    }
}

void TTSPerformerModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    // Helper lambda to draw a pin by its virtual parameter ID
    auto drawInputPin = [&](const char* paramId, const char* label) {
        int busIdx, chanInBus;
        if (getParamRouting(paramId, busIdx, chanInBus))
        {
            helpers.drawAudioInputPin(label, getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
        }
    };

    // Helper lambda for parallel pins
    auto drawParallelPin = [&](const char* inParamId, const char* inLabel, const char* outLabel, int outChannel) {
        int busIdx = -1, chanInBus = -1;
        int inChannel = -1;
        if (inParamId != nullptr && getParamRouting(inParamId, busIdx, chanInBus))
        {
            inChannel = getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus);
        }
        helpers.drawParallelPins(inLabel, inChannel, outLabel, outChannel);
    };

    // --- Draw Global Inputs & Outputs ---
    drawParallelPin(paramIdRateMod, "Rate Mod", "Audio", 0);
    drawParallelPin(paramIdGateMod, "Gate Mod", "Word Gate", 1);
    drawParallelPin(paramIdTriggerMod, "Trigger", "EOP Gate", 2);
    drawInputPin(paramIdResetMod, "Reset"); // No parallel output
    drawInputPin(paramIdRandomizeMod, "Randomize Trig"); // No parallel output

    ImGui::Spacing(); // Add visual separation

    // --- Draw Playback Control Inputs ---
    drawInputPin(paramIdTrimStartMod, "Trim Start Mod");
    drawInputPin(paramIdTrimEndMod, "Trim End Mod");
    drawInputPin(paramIdSpeedMod, "Speed Mod");
    drawInputPin(paramIdPitchMod, "Pitch Mod");

    // --- Draw Per-Word Inputs & Outputs (Dynamically) ---
    int wordCount = selectedClip ? juce::jmin((int)selectedClip->timings.size(), 16) : 0;
    if (wordCount > 0)
    {
        ImGui::Spacing(); // Add visual separation
    }

    for (int i = 0; i < wordCount; ++i)
    {
        juce::String word = selectedClip->timings[i].word.substring(0, 8);

        juce::String inParamId = "word" + juce::String(i + 1) + "_trig_mod";
        juce::String inLabel = "Word " + juce::String(i + 1) + " Trig";

        juce::String outGateLabel = word + " Gate";
        juce::String outTrigLabel = word + " Trig";

        // Draw Word Trigger input on the left, and its corresponding Gate output on the right
        drawParallelPin(inParamId.toRawUTF8(), inLabel.toRawUTF8(), outGateLabel.toRawUTF8(), 3 + i);

        // Draw the per-word Trigger output on its own line below
        drawParallelPin(nullptr, nullptr, outTrigLabel.toRawUTF8(), 19 + i);
    }
}
#endif

// --- Timing Data Access Method Implementations ---

bool TTSPerformerModuleProcessor::isWordActiveAtTime(double timeInSeconds) const
{
    const juce::ScopedLock lock(audioBufferLock);
    
    const auto& timingsA = getActiveTimings();
    for (const auto& word : timingsA)
    {
        if (timeInSeconds >= word.startTimeSeconds && timeInSeconds <= word.endTimeSeconds)
        {
            return true;
        }
    }
    return false;
}

const WordTiming* TTSPerformerModuleProcessor::getCurrentWordAtTime(double timeInSeconds) const
{
    const juce::ScopedLock lock(audioBufferLock);
    
    const auto& timingsB = getActiveTimings();
    for (const auto& word : timingsB)
    {
        if (timeInSeconds >= word.startTimeSeconds && timeInSeconds <= word.endTimeSeconds)
        {
            return &word;
        }
    }
    return nullptr;
}

const PhonemeTiming* TTSPerformerModuleProcessor::getCurrentPhonemeAtTime(double timeInSeconds) const
{
    const juce::ScopedLock lock(audioBufferLock);
    
    const auto& timingsC = getActiveTimings();
    for (const auto& word : timingsC)
    {
        for (const auto& phoneme : word.phonemes)
        {
            if (timeInSeconds >= phoneme.startTimeSeconds && timeInSeconds <= phoneme.endTimeSeconds)
            {
                return &phoneme;
            }
        }
    }
    return nullptr;
}

// --- Phase 3: Sequencer Helper Method Implementations ---

// processSequencerInputs method removed - functionality integrated into processBlock

void TTSPerformerModuleProcessor::advanceSequencerStep()
{
    // Simplified: just advance word index (used by rate-based auto-advance in processBlock)
    // This function is now a stub since auto-advance logic is in processBlock
    currentWordIndex++;
    if (selectedClip && currentWordIndex >= (int)selectedClip->timings.size())
    {
        currentWordIndex = 0; // Always loop
    }
}

void TTSPerformerModuleProcessor::resetSequencer()
{
    currentWordIndex = 0;
    currentPhonemeIndex = 0;
    sequencerStartTime = 0.0;
    sequencerActive = false;
    
    DBG("[TTS Performer] Sequencer reset to beginning");
}

int TTSPerformerModuleProcessor::getSequencerCurrentIndex() const
{
    // Simplified: just return current word index
    return currentWordIndex;
}

double TTSPerformerModuleProcessor::getSequencerCurrentDuration() const
{
    const auto& timingsE = getActiveTimings();
    if (timingsE.empty()) return 0.0;
    if (currentWordIndex >= (int)timingsE.size()) return 0.0;
    
    const auto& currentWord = timingsE[(size_t) currentWordIndex];
    return currentWord.durationSeconds;
}

// processSequencerPlayback method removed - functionality integrated into processBlock

// processNormalPlayback method removed - functionality integrated into processBlock

void TTSPerformerModuleProcessor::handleLoopMode()
{
    // Stub - loop mode is now handled by loopParam (bool) in processBlock
}

// --- Phase 4: SynthesisThread Cache Management Implementation ---

void TTSPerformerModuleProcessor::SynthesisThread::clearVoiceCache()
{
    const juce::ScopedLock lock(cacheLock);
    voiceCache.clear();
    DBG("[TTS Performer] Voice cache cleared - " + juce::String(voiceCache.size()) + " voices removed");
}

void TTSPerformerModuleProcessor::SynthesisThread::setMaxCachedVoices(int maxVoices)
{
    const juce::ScopedLock lock(cacheLock);
    maxCachedVoices = juce::jlimit(1, 10, maxVoices);
    DBG("[TTS Performer] Max cached voices set to: " + juce::String(maxCachedVoices));
    
    // Remove excess voices if needed
    while (voiceCache.size() > maxCachedVoices)
    {
        removeOldestVoice();
    }
}

void TTSPerformerModuleProcessor::SynthesisThread::updateMaxCachedVoicesFromParameter()
{
    // Stub - max cached voices is now a fixed constant (no UI control)
}

int TTSPerformerModuleProcessor::SynthesisThread::getCacheSize() const
{
    const juce::ScopedLock lock(cacheLock);
    return (int)voiceCache.size();
}

bool TTSPerformerModuleProcessor::SynthesisThread::isVoiceCached(const juce::String& modelPath) const
{
    const juce::ScopedLock lock(cacheLock);
    juce::String key = getCacheKey(modelPath);
    auto it = voiceCache.find(key);
    return (it != voiceCache.end() && it->second.isValid);
}

void TTSPerformerModuleProcessor::SynthesisThread::addVoiceToCache(const juce::String& modelPath, const juce::String& configPath)
{
    const juce::ScopedLock lock(cacheLock);
    juce::String key = getCacheKey(modelPath);
    
    // Check if we need to remove old voices
    while (voiceCache.size() >= maxCachedVoices)
    {
        removeOldestVoice();
    }
    
    // Add new voice to cache
    voiceCache[key] = CachedVoice(modelPath, configPath);
    
    DBG("[TTS Performer] Voice added to cache: " + modelPath + " (Cache size: " + juce::String(voiceCache.size()) + ")");
}

void TTSPerformerModuleProcessor::SynthesisThread::removeOldestVoice()
{
    if (voiceCache.empty()) return;
    
    auto oldest = voiceCache.begin();
    for (auto it = voiceCache.begin(); it != voiceCache.end(); ++it)
    {
        if (it->second.lastUsed < oldest->second.lastUsed)
        {
            oldest = it;
        }
    }
    
    DBG("[TTS Performer] Removing oldest voice from cache: " + oldest->first);
    voiceCache.erase(oldest);
}

juce::String TTSPerformerModuleProcessor::SynthesisThread::getCacheKey(const juce::String& modelPath) const
{
    // Use the filename as the cache key (without path)
    return juce::File(modelPath).getFileNameWithoutExtension();
}

#if defined(PRESET_CREATOR_UI)
// --- Phase 5: Waveform Visualization Implementation ---

void TTSPerformerModuleProcessor::drawWaveform(void* drawListPtr, const ImVec2& pos, const ImVec2& size)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    if (bakedAudioBuffer.getNumSamples() == 0) return;
    
    const int numSamples = bakedAudioBuffer.getNumSamples();
    const float* audioData = bakedAudioBuffer.getReadPointer(0);
    
    // Calculate samples per pixel for downsampling
    const int samplesPerPixel = juce::jmax(1, numSamples / (int)size.x);
    const int numPixels = (int)size.x;
    
    // Center line for zero crossing
    const float centerY = pos.y + size.y * 0.5f;
    
    // Draw waveform as connected lines
    std::vector<ImVec2> waveformPoints;
    waveformPoints.reserve(numPixels * 2);
    
    for (int x = 0; x < numPixels; ++x)
    {
        // Calculate sample range for this pixel
        const int startSample = x * samplesPerPixel;
        const int endSample = juce::jmin(startSample + samplesPerPixel, numSamples);
        
        // Find min/max in this range
        float minVal = 0.0f;
        float maxVal = 0.0f;
        
        for (int s = startSample; s < endSample; ++s)
        {
            const float sample = audioData[s];
            minVal = juce::jmin(minVal, sample);
            maxVal = juce::jmax(maxVal, sample);
        }
        
        // Convert to screen coordinates
        const float screenX = pos.x + x;
        const float minY = centerY - (minVal * size.y * 0.5f);
        const float maxY = centerY - (maxVal * size.y * 0.5f);
        
        // Add points for min and max
        waveformPoints.push_back(ImVec2(screenX, minY));
        waveformPoints.push_back(ImVec2(screenX, maxY));
    }
    
    // Draw the waveform
    if (waveformPoints.size() >= 2)
    {
        // Draw as a filled shape for better visibility
        std::vector<ImVec2> fillPoints;
        fillPoints.reserve(waveformPoints.size() + 2);
        
        // Add bottom edge
        fillPoints.push_back(ImVec2(pos.x, centerY));
        
        // Add waveform points
        for (size_t i = 0; i < waveformPoints.size(); i += 2)
        {
            fillPoints.push_back(waveformPoints[i]); // min point
        }
        
        // Add top edge (reverse order)
        for (int i = (int)waveformPoints.size() - 1; i >= 1; i -= 2)
        {
            fillPoints.push_back(waveformPoints[i]); // max point
        }
        
        // Close the shape
        fillPoints.push_back(ImVec2(pos.x + size.x, centerY));
        
        // Draw filled waveform
        drawList->AddConvexPolyFilled(fillPoints.data(), (int)fillPoints.size(), 
                                     IM_COL32(100, 150, 255, 200)); // Blue with transparency
        
        // Draw center line
        drawList->AddLine(ImVec2(pos.x, centerY), 
                         ImVec2(pos.x + size.x, centerY), 
                         IM_COL32(100, 100, 100, 100), 1.0f);
        
        // Phase 5.2: Draw word and phoneme boundaries
        drawWordBoundaries(drawList, pos, size, numSamples, centerY);
    }
}

void TTSPerformerModuleProcessor::drawWordBoundaries(void* drawListPtr, const ImVec2& pos, const ImVec2& size, int numSamples, float centerY)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    const auto& timingsF = getActiveTimings();
    if (timingsF.empty() || numSamples == 0) return;
    
    // Calculate time per sample (assuming standard sample rate)
    const double sampleRate = getSampleRate();
    const double durationSeconds = numSamples / sampleRate;
    
    // Define colors for different words (cycle through a palette)
    const ImU32 wordColors[] = {
        IM_COL32(255, 100, 100, 120), // Red
        IM_COL32(100, 255, 100, 120), // Green  
        IM_COL32(100, 100, 255, 120), // Blue
        IM_COL32(255, 255, 100, 120), // Yellow
        IM_COL32(255, 100, 255, 120), // Magenta
        IM_COL32(100, 255, 255, 120), // Cyan
    };
    const int numColors = sizeof(wordColors) / sizeof(wordColors[0]);
    
    // Draw word boundaries
    for (size_t i = 0; i < timingsF.size(); ++i)
    {
        const auto& word = timingsF[i];
        
        // Calculate pixel positions for this word
        const float startX = pos.x + (word.startTimeSeconds / durationSeconds) * size.x;
        const float endX = pos.x + (word.endTimeSeconds / durationSeconds) * size.x;
        const float wordWidth = endX - startX;
        
        // Skip words that are too small to see
        if (wordWidth < 2.0f) continue;
        
        // Choose color for this word
        const ImU32 wordColor = wordColors[i % numColors];
        
        // Draw word background rectangle
        drawList->AddRectFilled(
            ImVec2(startX, pos.y + 2),
            ImVec2(endX, centerY - 2),
            wordColor
        );
        
        // Draw word border
        drawList->AddRect(
            ImVec2(startX, pos.y + 2),
            ImVec2(endX, centerY - 2),
            IM_COL32(255, 255, 255, 200),
            1.0f
        );
        
        // Draw word text if there's enough space
        if (wordWidth > 20.0f)
        {
            const char* wordText = word.word.toRawUTF8();
            const ImVec2 textSize = ImGui::CalcTextSize(wordText);
            
            // Center text horizontally and vertically in the word area
            const float textX = startX + (wordWidth - textSize.x) * 0.5f;
            const float textY = pos.y + 2 + (centerY - pos.y - 4 - textSize.y) * 0.5f;
            
            // Only draw text if it fits
            if (textX >= startX && textX + textSize.x <= endX)
            {
                drawList->AddText(ImVec2(textX, textY), IM_COL32(255, 255, 255, 255), wordText);
            }
        }
        
        // Phase 5.2: Draw phoneme boundaries within this word
        if (wordWidth > 40.0f && !word.phonemes.empty()) // Only if word is large enough
        {
            drawPhonemeBoundaries(drawList, pos, size, word, startX, wordWidth, centerY);
        }
    }
    
    // Phase 5.3: Draw playhead indicator
    drawPlayheadIndicator(drawList, pos, size, numSamples, centerY);
}

void TTSPerformerModuleProcessor::drawPhonemeBoundaries(void* drawListPtr, const ImVec2& pos, const ImVec2& size, const WordTiming& word, float wordStartX, float wordWidth, float centerY)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    if (word.phonemes.empty()) return;
    
    const double wordDuration = word.endTimeSeconds - word.startTimeSeconds;
    const ImU32 phonemeColor = IM_COL32(255, 255, 255, 60); // Semi-transparent white
    
    // Draw vertical lines for phoneme boundaries
    for (size_t i = 0; i < word.phonemes.size(); ++i)
    {
        const auto& phoneme = word.phonemes[i];
        
        // Calculate relative position within the word
        const double relativeStart = (phoneme.startTimeSeconds - word.startTimeSeconds) / wordDuration;
        const float phonemeX = wordStartX + relativeStart * wordWidth;
        
        // Draw vertical line for phoneme boundary
        drawList->AddLine(
            ImVec2(phonemeX, centerY - 10),
            ImVec2(phonemeX, centerY + 10),
            phonemeColor,
            1.0f
        );
        
        // Draw phoneme symbol if there's enough space
        if (wordWidth > 60.0f) // Only for larger words
        {
            const char* phonemeText = phoneme.phoneme.toRawUTF8();
            const ImVec2 textSize = ImGui::CalcTextSize(phonemeText);
            
            // Position phoneme text above the boundary line
            const float textX = phonemeX - textSize.x * 0.5f;
            const float textY = centerY - 15;
            
            // Only draw if text fits within the word bounds
            if (textX >= wordStartX && textX + textSize.x <= wordStartX + wordWidth)
            {
                drawList->AddText(ImVec2(textX, textY), IM_COL32(200, 200, 200, 180), phonemeText);
            }
        }
    }
}

void TTSPerformerModuleProcessor::drawPlayheadIndicator(void* drawListPtr, const ImVec2& pos, const ImVec2& size, int numSamples, float centerY)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    if (numSamples == 0 || !isPlaying) return;
    
    // Calculate playhead position in pixels
    const float playheadRatio = (float)readPosition / (float)numSamples;
    const float playheadX = pos.x + playheadRatio * size.x;
    
    // Only draw if playhead is within the visible area
    if (playheadX >= pos.x && playheadX <= pos.x + size.x)
    {
        // Draw main playhead line (bright yellow/orange)
        drawList->AddLine(
            ImVec2(playheadX, pos.y),
            ImVec2(playheadX, pos.y + size.y),
            IM_COL32(255, 200, 0, 255), // Bright yellow-orange
            2.0f // Thick line for visibility
        );
        
        // Draw playhead shadow for depth
        drawList->AddLine(
            ImVec2(playheadX - 1, pos.y),
            ImVec2(playheadX - 1, pos.y + size.y),
            IM_COL32(255, 255, 255, 100), // White shadow
            1.0f
        );
        
        // Draw playhead indicator triangle at the top
        const float triangleSize = 8.0f;
        const ImVec2 triangleTop(playheadX, pos.y - triangleSize);
        const ImVec2 triangleLeft(playheadX - triangleSize * 0.5f, pos.y);
        const ImVec2 triangleRight(playheadX + triangleSize * 0.5f, pos.y);
        
        drawList->AddTriangleFilled(triangleTop, triangleLeft, triangleRight, IM_COL32(255, 200, 0, 255));
        drawList->AddTriangle(triangleTop, triangleLeft, triangleRight, IM_COL32(255, 255, 255, 200), 1.0f);
        
        // Draw time indicator text above the playhead
        const double currentTimeSeconds = readPosition / getSampleRate();
        const juce::String timeText = juce::String::formatted("%.2fs", currentTimeSeconds);
        const char* timeCStr = timeText.toRawUTF8();
        const ImVec2 textSize = ImGui::CalcTextSize(timeCStr);
        
        // Position text above the triangle
        const float textX = playheadX - textSize.x * 0.5f;
        const float textY = pos.y - triangleSize - textSize.y - 4.0f;
        
        // Draw text background
        drawList->AddRectFilled(
            ImVec2(textX - 2, textY - 1),
            ImVec2(textX + textSize.x + 2, textY + textSize.y + 1),
            IM_COL32(0, 0, 0, 180) // Semi-transparent black background
        );
        
        // Draw time text
        drawList->AddText(ImVec2(textX, textY), IM_COL32(255, 255, 255, 255), timeCStr);
        
        // Phase 5.3: Highlight current word/phoneme based on playhead position
        highlightCurrentWord(drawList, pos, size, centerY, currentTimeSeconds);
    }
}

void TTSPerformerModuleProcessor::highlightCurrentWord(void* drawListPtr, const ImVec2& pos, const ImVec2& size, float centerY, double currentTimeSeconds)
{
    ImDrawList* drawList = static_cast<ImDrawList*>(drawListPtr);
    
    // Find the current word being played
    const auto& timingsG = getActiveTimings();
    for (size_t i = 0; i < timingsG.size(); ++i)
    {
        const auto& word = timingsG[i];
        
        if (currentTimeSeconds >= word.startTimeSeconds && currentTimeSeconds <= word.endTimeSeconds)
        {
            // Calculate word position
            const double durationSeconds = (double)bakedAudioBuffer.getNumSamples() / getSampleRate();
            const float startX = pos.x + (word.startTimeSeconds / durationSeconds) * size.x;
            const float endX = pos.x + (word.endTimeSeconds / durationSeconds) * size.x;
            
            // Draw highlight overlay for current word
            drawList->AddRectFilled(
                ImVec2(startX, pos.y),
                ImVec2(endX, pos.y + size.y),
                IM_COL32(255, 255, 0, 30) // Yellow highlight with low opacity
            );
            
            // Draw thicker border around current word
            drawList->AddRect(
                ImVec2(startX, pos.y),
                ImVec2(endX, pos.y + size.y),
                IM_COL32(255, 255, 0, 150), // Yellow border
                2.0f // Thick border
            );
            
            // Find current phoneme within the word
            for (const auto& phoneme : word.phonemes)
            {
                if (currentTimeSeconds >= phoneme.startTimeSeconds && currentTimeSeconds <= phoneme.endTimeSeconds)
                {
                    // Calculate phoneme position
                    const double wordDuration = word.endTimeSeconds - word.startTimeSeconds;
                    const double relativeStart = (phoneme.startTimeSeconds - word.startTimeSeconds) / wordDuration;
                    const double relativeEnd = (phoneme.endTimeSeconds - word.startTimeSeconds) / wordDuration;
                    
                    const float phonemeStartX = startX + relativeStart * (endX - startX);
                    const float phonemeEndX = startX + relativeEnd * (endX - startX);
                    
                    // Draw phoneme highlight
                    drawList->AddRectFilled(
                        ImVec2(phonemeStartX, centerY - 15),
                        ImVec2(phonemeEndX, centerY + 15),
                        IM_COL32(255, 255, 255, 40) // White highlight for phoneme
                    );
                    
                    break; // Only highlight the current phoneme
                }
            }
            break; // Only highlight the current word
        }
    }
}

bool TTSPerformerModuleProcessor::handleWaveformInteraction(const ImVec2& pos, const ImVec2& size, int numSamples)
{
    if (numSamples == 0) return false;
    
    // Get mouse position and check if it's over the waveform area
    const ImVec2 mousePos = ImGui::GetMousePos();
    const bool isMouseOverWaveform = (mousePos.x >= pos.x && mousePos.x <= pos.x + size.x &&
                                      mousePos.y >= pos.y && mousePos.y <= pos.y + size.y);
    
    // Track interaction state
    static bool isDragging = false;
    static bool wasPlayingBeforeDrag = false;
    
    // Handle mouse click and drag
    if (isMouseOverWaveform)
    {
        // Show hover cursor
        ImGui::SetMouseCursor(ImGuiMouseCursor_Hand);
        
        // Display hover tooltip with time information
        if (!isDragging && ImGui::IsMouseHoveringRect(pos, ImVec2(pos.x + size.x, pos.y + size.y)))
        {
            const float normalizedPos = (mousePos.x - pos.x) / size.x;
            const int hoverSample = (int)(normalizedPos * numSamples);
            const double hoverTime = (double)hoverSample / getSampleRate();
            
            // Find word at hover position
            const WordTiming* hoverWord = nullptr;
            const auto& timingsH = getActiveTimings();
            for (const auto& word : timingsH)
            {
                if (hoverTime >= word.startTimeSeconds && hoverTime <= word.endTimeSeconds)
                {
                    hoverWord = &word;
                    break;
                }
            }
            
            // Create tooltip text
            juce::String tooltipText = juce::String::formatted("Time: %.2fs", hoverTime);
            if (hoverWord != nullptr)
            {
                tooltipText += "\nWord: \"" + hoverWord->word + "\"";
            }
            
            ImGui::BeginTooltip();
            ImGui::TextUnformatted(tooltipText.toRawUTF8());
            ImGui::EndTooltip();
        }
        
        // Start dragging on mouse down
        if (ImGui::IsMouseClicked(0))
        {
            isDragging = true;
            wasPlayingBeforeDrag = isPlaying;
            
            // Pause playback during scrubbing
            if (isPlaying)
            {
                isPlaying = false;
            }
        }
    }
    
    // Handle dragging
    if (isDragging)
    {
        // Calculate new playback position based on mouse X
        const float normalizedPos = juce::jlimit(0.0f, 1.0f, (mousePos.x - pos.x) / size.x);
        const int newPosition = (int)(normalizedPos * numSamples);
        
        // Update the AUDIO playhead directly
        readPosition = (double)newPosition;
        
        // Release drag on mouse up
        if (ImGui::IsMouseReleased(0))
        {
            isDragging = false;
            
            // Resume playback if it was playing before
            if (wasPlayingBeforeDrag)
            {
                isPlaying = true;
            }
            
            return true; // Position was changed
        }
    }
    
    // Reset dragging if mouse is released outside
    if (!ImGui::IsMouseDown(0))
    {
        if (isDragging)
        {
            isDragging = false;
            
            // Resume playback if it was playing before
            if (wasPlayingBeforeDrag)
            {
                isPlaying = true;
            }
        }
    }
    
    return false;
}

#endif

================================================================================
FILE: juce\Source\audio\modules\TTSPerformerModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include "../dsp/TimePitchProcessor.h"
#include <juce_dsp/juce_dsp.h>
#include <juce_core/juce_core.h>
// Forward declare ImGui types so Collider can include this header without ImGui
struct ImVec2;

// --- Timing Data Structures for Word and Phoneme Control ---
struct PhonemeTiming
{
    juce::String phoneme;        // The phoneme symbol (e.g., "AH", "T", "S")
    double startTimeSeconds;     // Start time in seconds
    double endTimeSeconds;       // End time in seconds
    double durationSeconds;      // Duration in seconds (calculated)
    
    PhonemeTiming() = default;
    PhonemeTiming(const juce::String& p, double start, double end) 
        : phoneme(p), startTimeSeconds(start), endTimeSeconds(end), durationSeconds(end - start) {}
};

struct WordTiming
{
    juce::String word;           // The word text (e.g., "Hello", "world")
    double startTimeSeconds;     // Start time in seconds
    double endTimeSeconds;       // End time in seconds
    double durationSeconds;      // Duration in seconds (calculated)
    std::vector<PhonemeTiming> phonemes;  // Phonemes within this word
    
    WordTiming() = default;
    WordTiming(const juce::String& w, double start, double end) 
        : word(w), startTimeSeconds(start), endTimeSeconds(end), durationSeconds(end - start) {}
};

class TTSPerformerModuleProcessor : public ModuleProcessor
{
public:
    TTSPerformerModuleProcessor();
    ~TTSPerformerModuleProcessor() override;

    const juce::String getName() const override { return "tts performer"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    
    void setTimingInfo(const TransportState& state) override;
    
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    void getStateInformation(juce::MemoryBlock& destData) override;
    void setStateInformation(const void* data, int sizeInBytes) override;

    // Extra state for preset saving (selected clip persistence)
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;

    void startSynthesis(const juce::String& text);
    void cancelSynthesis();
    
    // --- Timing Data Access Methods ---
    const std::vector<WordTiming>& getLastSynthesisTimings() const { return lastSynthesisTimings; }
    bool isWordActiveAtTime(double timeInSeconds) const;
    const WordTiming* getCurrentWordAtTime(double timeInSeconds) const;
    const PhonemeTiming* getCurrentPhonemeAtTime(double timeInSeconds) const;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

    // --- Phase 3: Sequencer Helper Methods ---
    void advanceSequencerStep();
    void resetSequencer();
    int getSequencerCurrentIndex() const;
    double getSequencerCurrentDuration() const;
    void handleLoopMode();

    // Cross-app helpers (exposed for both apps)
    juce::File resolveModelsBaseDir() const;
    juce::File resolveSelectedModelFile() const;
    bool loadVoicesFromMapFile(const juce::File& mapFile);
    void normalizeModelSelection();
    const std::vector<WordTiming>& getActiveTimings() const;
    int findFirstWordIndexAtOrAfter(double timeSec) const;
    int findLastWordIndexAtOrBefore(double timeSec) const;
    int findWordIndexForTime(float timeSeconds) const;
    void clampWordIndexToTrim();

    // --- Phase 5: Waveform Visualization Methods (UI-only) ---
#if defined(PRESET_CREATOR_UI)
    void drawWaveform(void* drawList, const ImVec2& pos, const ImVec2& size);
    void drawWordBoundaries(void* drawList, const ImVec2& pos, const ImVec2& size, int numSamples, float centerY);
    void drawPhonemeBoundaries(void* drawList, const ImVec2& pos, const ImVec2& size, const WordTiming& word, float wordStartX, float wordWidth, float centerY);
    void drawPlayheadIndicator(void* drawList, const ImVec2& pos, const ImVec2& size, int numSamples, float centerY);
    void highlightCurrentWord(void* drawList, const ImVec2& pos, const ImVec2& size, float centerY, double currentTimeSeconds);
    bool handleWaveformInteraction(const ImVec2& pos, const ImVec2& size, int numSamples);
#endif

    // Cross-app helpers (declared once)
    
    // --- Audio-based word detection for precise timing ---
    std::vector<WordTiming> detectWordsFromAudio(const juce::AudioBuffer<float>& audio, double sampleRate);

private:
    // Centralised channel map for all inputs (single input bus)
    struct ChannelMap
    {
        static constexpr int CH_RATE        = 0;
        static constexpr int CH_GATE        = 1;
        static constexpr int CH_TRIGGER     = 2;
        static constexpr int CH_RESET       = 3;
        static constexpr int CH_TRIM_START  = 4;
        static constexpr int CH_TRIM_END    = 5;
        static constexpr int CH_SPEED       = 6;
        static constexpr int CH_PITCH       = 7;
        static constexpr int CH_WORD_BASE   = 8; // Word 1..16 at 8..23
        static constexpr int wordChannel(int wordIndex /*0-based*/) { return CH_WORD_BASE + wordIndex; }
    };
    // --- Persistent Clip Model ---
    struct TTSClip
    {
        juce::String clipId;           // hash key (text+voice+params)
        juce::String name;             // user/display name (default: trimmed text)
        juce::String text;             // original text
        juce::String modelKey;         // voice/model identifier
        juce::AudioBuffer<float> audio; // mono audio
        double sampleRate { 48000.0 };
        double durationSeconds { 0.0 };
        std::vector<WordTiming> timings;
        std::chrono::steady_clock::time_point lastUsed { std::chrono::steady_clock::now() };
    };

    // Clip cache (memory) and selection
    std::map<juce::String, std::shared_ptr<TTSClip>> clipCache;
    juce::CriticalSection clipCacheLock;
    std::shared_ptr<TTSClip> selectedClip;
    int clipCacheMax { 16 };
    juce::String computeClipKey(const juce::String& text) const;
    void addClipToCache(const std::shared_ptr<TTSClip>& clip);
    std::shared_ptr<TTSClip> findClipInCache(const juce::String& key) const;
    void selectClipByKey(const juce::String& key);
    void loadClipsFromDisk();
    bool clipsLoadedFromDisk { false };
    // Disk persistence helpers
    juce::File getClipsRootDir() const;
    juce::String sanitizeForDir(const juce::String& text) const;
    void persistClipToDisk(const juce::String& text, const juce::File& modelFile,
                           const juce::AudioBuffer<float>& audioBuffer,
                           const juce::String& jsonContent);
    // UI helpers for clips
    void drawClipsPanel(float itemWidth);
    // Timeline interaction state (waveform handles)
    bool draggingTrimStart { false };
    bool draggingTrimEnd { false };
    bool draggingScrub { false };
    // Clip actions
    void playSelectedClipFromTrim();
    void stopPlayback();
    bool deleteSelectedClipFromDisk();
    bool renameSelectedClipOnDisk(const juce::String& newName);

    class SynthesisThread : public juce::Thread
    {
    public:
        SynthesisThread(TTSPerformerModuleProcessor& owner);
        ~SynthesisThread() override;
        void run() override;
        
        // --- Phase 4: Cache Management Methods ---
        void clearVoiceCache();
        void setMaxCachedVoices(int maxVoices);
        void updateMaxCachedVoicesFromParameter();
        int getCacheSize() const;
        bool isVoiceCached(const juce::String& modelPath) const;

    private:
        TTSPerformerModuleProcessor& owner;
        juce::File piperExecutable;
    public:
        juce::File currentModelFile;
        
        // --- Phase 4: Voice Cache System ---
        struct CachedVoice
        {
            juce::String modelPath;
            juce::String configPath;
            std::chrono::steady_clock::time_point lastUsed;
            bool isValid;
            
            CachedVoice() : lastUsed(std::chrono::steady_clock::now()), isValid(false) {}
            CachedVoice(const juce::String& model, const juce::String& config) 
                : modelPath(model), configPath(config), lastUsed(std::chrono::steady_clock::now()), isValid(true) {}
        };
        
        std::map<juce::String, CachedVoice> voiceCache;
        juce::CriticalSection cacheLock;
        int maxCachedVoices { 3 };
        
        // --- Phase 4: Cache Helper Methods ---
        void addVoiceToCache(const juce::String& modelPath, const juce::String& configPath);
        void removeOldestVoice();
        juce::String getCacheKey(const juce::String& modelPath) const;
    };

    // --- Audio Storage and Playback ---
    juce::AudioBuffer<float> bakedAudioBuffer;
    bool isPlaying { false };
    double phase { 0.0 }; // Phase accumulator for rate-based auto-advance
    bool lastTrigHigh { false }; // Trigger edge detection
    bool lastResetHigh { false }; // Reset edge detection
    bool lastRandomizeTriggerHigh { false }; // Randomize trigger edge detection
    std::array<int, 16> wordTriggerPending {}; // Per-word trigger pulse counters (1ms)
    std::array<bool, 16> lastWordTrigHigh {}; // Per-word trigger edge detection
    
    // --- Word and Phoneme Timing Data ---
    std::vector<WordTiming> lastSynthesisTimings;  // Protected by audioBufferLock

    // --- Phase 3: Sequencer State ---
    int currentWordIndex { 0 };           // Current word being played in sequencer mode
    int currentPhonemeIndex { 0 };        // Current phoneme being played in sequencer mode
    double sequencerStartTime { 0.0 };    // When the current word/phoneme started playing
    bool sequencerActive { false };       // Whether sequencer mode is currently active
    float lastStepTriggerValue { 0.0f };  // For detecting step trigger edges
    float lastResetTriggerValue { 0.0f }; // For detecting reset trigger edges
    bool lastPlaybackState { false };     // For EOP gate detection
    bool lastGateState { false };         // For detecting gate input edges
    int eopPulseSamplesRemaining { 0 };   // For short EOP gate pulses
    int lastClipIndexValue { -1 };        // For detecting clip index param changes


    // --- Text Input (Thread-Safe Queue) ---
    juce::AbstractFifo textFifo;
    std::vector<juce::String> textFifoBuffer;
    juce::CriticalSection textBufferLock;
    juce::CriticalSection messageLock;
    juce::CriticalSection audioBufferLock;

    // --- Status Tracking ---
    enum class Status { Idle, Synthesizing, Playing, Error };
    std::atomic<Status> currentStatus { Status::Idle };
    juce::String errorMessage;

    // --- APVTS and Parameters ---
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    juce::AudioProcessorValueTreeState apvts;
    
    // Core parameters
    std::atomic<float>* volumeParam { nullptr };
    std::atomic<float>* rateParam { nullptr }; // Rate in Hz for auto-advance
    std::atomic<float>* gateParam { nullptr }; // Gate/VCA control
    
    SynthesisThread synthesisThread;

    // --- DSP ---
    TimePitchProcessor timePitch;
    juce::HeapBlock<float> interleavedInput, interleavedOutput;
    int interleavedCapacityFrames { 0 };

    // --- Engine state (ported from SampleVoiceProcessor) ---
    double readPosition { 0.0 };            // fractional read position in samples
    double startSamplePos { 0.0 };          // trim start in samples
    double endSamplePos { -1.0 };           // trim end in samples (exclusive)

    // --- Rate step scheduler ---
    double stepAccumulatorSec { 0.0 };      // countdown timer for next step jump
    double lastRateForScheduler { -1.0 };   // detect rate changes for immediate reschedule

    // Track last applied time/pitch for RubberBand reset on change
    float lastEffectiveTime { -1.0f };
    float lastEffectivePitch { -10000.0f };

    // Small de-click ramp for RubberBand after hard jumps/param changes
    int rbFadeSamplesRemaining { 0 };
    int rbFadeSamplesTotal { 0 };

    // --- NEW: State for word-jump crossfading ---
    int crossfadeSamplesRemaining { 0 };
    int crossfadeSamplesTotal { 0 };
    double crossfadeStartPosition { 0.0 }; // The read position we are fading FROM
    double crossfadeEndPosition { 0.0 };   // The read position we are fading TO

    // --- UI helpers (bypass engine connectivity gating for live telemetry when UI knows a cable is connected) ---
#if defined(PRESET_CREATOR_UI)
    float getLiveNoGate(const juce::String& liveKey, float fallback) const;
#endif

    // Model selection registry (available in both apps)
    struct ModelEntry { juce::String language; juce::String locale; juce::String voice; juce::String quality; juce::String relativeOnnx; };
    mutable juce::CriticalSection modelLock;
    std::vector<ModelEntry> modelEntries;
    juce::String selectedLanguage { "en" };
    juce::String selectedLocale { "en_US" };
    juce::String selectedVoice { "lessac" };
    juce::String selectedQuality { "medium" };

#if defined(PRESET_CREATOR_UI)
    char uiTextBuffer[2048] { "Hello, modular world." };
    bool showDeleteConfirm { false };
    char renameBuffer[256] { "" };
    bool showRenamePopup { false };
    void refreshModelChoices();
#endif

    // Clip selection helpers
    int getNumCachedClips() const { return (int) clipCache.size(); }
    void selectClipByIndex(int index);
    juce::String selectedClipId; // persisted between sessions
    
    // Explicitly support any discrete channel layout for modular synthesis
    bool isBusesLayoutSupported(const BusesLayout& layouts) const override
    {
        // Accept any layout as long as we have at least the minimum channels
        if (layouts.getMainInputChannelSet().isDisabled())
            return false;
        if (layouts.getMainOutputChannelSet().isDisabled())
            return false;
        return true;
    }
    
private:
    // Virtual IDs for modulation inputs
    static constexpr auto paramIdRateMod = "rate_mod";
    static constexpr auto paramIdGateMod = "gate_mod";
    static constexpr auto paramIdTriggerMod = "trigger_mod";
    static constexpr auto paramIdResetMod = "reset_mod";
    static constexpr auto paramIdRandomizeMod = "randomize_mod"; // <-- NEW
    static constexpr auto paramIdTrimStartMod = "trimStart_mod";
    static constexpr auto paramIdTrimEndMod = "trimEnd_mod";
    static constexpr auto paramIdSpeedMod = "speed_mod";
    static constexpr auto paramIdPitchMod = "pitch_mod";

    TransportState m_currentTransport;
    double lastScaledBeats_tts{ 0.0 };
    bool wasPlaying = false;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(TTSPerformerModuleProcessor);
};

================================================================================
FILE: juce\Source\audio\modules\ValueModuleProcessor.cpp
================================================================================


#include "ValueModuleProcessor.h"

ValueModuleProcessor::ValueModuleProcessor()
    : ModuleProcessor(BusesProperties()
        .withOutput("Out", juce::AudioChannelSet::discreteChannels(5), true)), // 5 outputs now (added CV Out)
      apvts(*this, nullptr, "ValueParams", createParameterLayout())
{
    valueParam = apvts.getRawParameterValue("value");
    cvMinParam = apvts.getRawParameterValue("cvMin");
    cvMaxParam = apvts.getRawParameterValue("cvMax");

    // Initialize value tooltips for all five outputs
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For the new CV Out
}

juce::AudioProcessorValueTreeState::ParameterLayout ValueModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>("value", "Value", -20000.0f, 20000.0f, 1.0f));
    
    // Add new CV range parameters
    params.push_back(std::make_unique<juce::AudioParameterFloat>("cvMin", "CV Min", 0.0f, 1.0f, 0.0f));
    params.push_back(std::make_unique<juce::AudioParameterFloat>("cvMax", "CV Max", 0.0f, 1.0f, 1.0f));
    
    return { params.begin(), params.end() };
}

void ValueModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    buffer.clear();

    const float rawValue = valueParam->load();
    auto* param = static_cast<juce::AudioParameterFloat*>(apvts.getParameter("value"));
    const float normalizedValue = param->getNormalisableRange().convertTo0to1(rawValue);
    
    // Calculate CV output value
    const float cvMin = cvMinParam->load();
    const float cvMax = cvMaxParam->load();
    const float cvOutputValue = juce::jmap(normalizedValue, cvMin, cvMax);

    auto* outRaw = buffer.getWritePointer(0);
    auto* outNorm = buffer.getWritePointer(1);
    auto* outInv = buffer.getWritePointer(2);
    auto* outInt = buffer.getWritePointer(3);
    auto* outCV = buffer.getWritePointer(4); // Get pointer for new output

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        outRaw[i] = rawValue;
        outNorm[i] = normalizedValue;
        outInv[i] = -rawValue;
        outInt[i] = std::round(rawValue);
        outCV[i] = cvOutputValue; // Write to the new output
    }

    // Update tooltips
    if (lastOutputValues.size() >= 5)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outRaw[buffer.getNumSamples() - 1]);
        if (lastOutputValues[1]) lastOutputValues[1]->store(outNorm[buffer.getNumSamples() - 1]);
        if (lastOutputValues[2]) lastOutputValues[2]->store(outInv[buffer.getNumSamples() - 1]);
        if (lastOutputValues[3]) lastOutputValues[3]->store(outInt[buffer.getNumSamples() - 1]);
        if (lastOutputValues[4]) lastOutputValues[4]->store(outCV[buffer.getNumSamples() - 1]); // Update new tooltip
    }
}


================================================================================
FILE: juce\Source\audio\modules\ValueModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class ValueModuleProcessor : public ModuleProcessor
{
public:
    ValueModuleProcessor();
    ~ValueModuleProcessor() override = default;

    const juce::String getName() const override { return "value"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override {}
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    // Override to explicitly state this module has no modulatable inputs
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override
    {
        // This module has no modulatable inputs - it's a source-only module.
        // Always return false to prevent undefined behavior in the modulation system.
        juce::ignoreUnused(paramId, outBusIndex, outChannelIndexInBus);
        return false;
    }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("value"));
        if (!p) return;

        float currentValue = *p;

        ImGui::PushItemWidth(itemWidth);
        // Compact draggable number field without visible label
        if (ImGui::DragFloat("##value_drag", &currentValue, 0.01f, p->range.start, p->range.end, "%.4f"))
        {
            *p = currentValue;
        }
        if (ImGui::IsItemDeactivatedAfterEdit())
        {
            onModificationEnded();
        }
        ImGui::PopItemWidth();

        // New Time-Based, Exponential Mouse Wheel Logic
        if (ImGui::IsItemHovered())
        {
            const float wheel = ImGui::GetIO().MouseWheel;
            if (wheel != 0.0f)
            {
                const double currentTime = ImGui::GetTime();
                const double timeDelta = currentTime - lastScrollTime;

                // 1. If user paused for > 0.2s, reset momentum
                if (timeDelta > 0.2)
                {
                    scrollMomentum = 1.0f;
                }

                // 2. Define the smallest step for precision
                const float baseStep = 0.01f;
                
                // 3. Calculate the final step using the momentum
                float finalStep = baseStep * scrollMomentum;

                // 4. Update the value
                float newValue = currentValue + (wheel > 0.0f ? finalStep : -finalStep);
                
                // Snap to the baseStep to keep numbers clean
                newValue = std::round(newValue / baseStep) * baseStep;

                // 5. Increase momentum for the *next* scroll event (exponential)
                // This makes continuous scrolling accelerate.
                scrollMomentum *= 1.08f;
                scrollMomentum = std::min(scrollMomentum, 2000.0f); // Cap momentum to prevent runaway

                // 6. Update the parameter and timestamp
                *p = juce::jlimit(p->range.start, p->range.end, newValue);
                lastScrollTime = currentTime;
            }
        }
        
        // CV Output Range Controls (compact layout)
        ImGui::Text("CV Out Range (0-1)");
        
        float cvMin = cvMinParam->load();
        float cvMax = cvMaxParam->load();
        
        ImGui::PushItemWidth(itemWidth * 0.45f); // Make sliders take up half the width each
        if (ImGui::SliderFloat("##cv_min", &cvMin, 0.0f, 1.0f, "Min: %.2f"))
        {
            *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("cvMin")) = cvMin;
            onModificationEnded();
        }
        ImGui::SameLine();
        if (ImGui::SliderFloat("##cv_max", &cvMax, 0.0f, 1.0f, "Max: %.2f"))
        {
            *dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("cvMax")) = cvMax;
            onModificationEnded();
        }
        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Draw the five output pins for the Value module
        helpers.drawAudioOutputPin("Raw", 0);
        helpers.drawAudioOutputPin("Normalized", 1);
        helpers.drawAudioOutputPin("Inverted", 2);
        helpers.drawAudioOutputPin("Integer", 3);
        helpers.drawAudioOutputPin("CV Out", 4);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        // Value has no audio inputs
        return juce::String("In ") + juce::String(channel + 1);
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Raw";
            case 1: return "Normalized";
            case 2: return "Inverted";
            case 3: return "Integer";
            case 4: return "CV Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* valueParam { nullptr };
    std::atomic<float>* cvMinParam { nullptr };
    std::atomic<float>* cvMaxParam { nullptr };

    // Add these two state variables for the new scroll logic
    double lastScrollTime { 0.0 };
    float scrollMomentum { 1.0f };
};


================================================================================
FILE: juce\Source\audio\modules\VCAModuleProcessor.cpp
================================================================================


#include "VCAModuleProcessor.h"

VCAModuleProcessor::VCAModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // 0-1: Audio In, 2: Gain Mod
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "VCAParams", createParameterLayout())
{
    gainParam = apvts.getRawParameterValue("gain");
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

juce::AudioProcessorValueTreeState::ParameterLayout VCAModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        "gain", "Gain",
        juce::NormalisableRange<float>(-60.0f, 6.0f, 0.1f), 0.0f));

    return { params.begin(), params.end() };
}

void VCAModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32)samplesPerBlock, 2 };
    gain.prepare(spec);
}

void VCAModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // Read CV from unified input bus (if connected)
    float gainModCV = 1.0f; // Default to no modulation
    
    if (isParamInputConnected("gain"))
    {
        const auto& inBus = getBusBuffer(buffer, true, 0);
        if (inBus.getNumChannels() > 2)
            gainModCV = inBus.getReadPointer(2)[0]; // Read first sample from channel 2
    }
    
    // Process sample by sample to apply modulation
    for (int channel = 0; channel < buffer.getNumChannels(); ++channel)
    {
        float* channelData = buffer.getWritePointer(channel);
        for (int i = 0; i < buffer.getNumSamples(); ++i)
        {
            // Get base gain from the dB parameter
            const float gainFromParam = juce::Decibels::decibelsToGain(gainParam != nullptr ? gainParam->load() : 0.0f);
            
            // Use CV modulation (0-1 range)
            const float finalGain = gainFromParam * gainModCV;
            channelData[i] *= finalGain;
        }
    }
    
    // Store live modulated values for UI display
    const float gainFromParam = juce::Decibels::decibelsToGain(gainParam != nullptr ? gainParam->load() : 0.0f);
    const float finalGainDb = isParamInputConnected("gain") ? 
        juce::Decibels::gainToDecibels(gainFromParam * gainModCV) : 
        (gainParam != nullptr ? gainParam->load() : 0.0f);
    setLiveParamValue("gain_live", finalGainDb);

    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(buffer.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(buffer.getSample(1, buffer.getNumSamples() - 1));
    }
}

// Parameter bus contract implementation
bool VCAModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "gain") { outChannelIndexInBus = 2; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\VCAModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class VCAModuleProcessor : public ModuleProcessor
{
public:
    VCAModuleProcessor();
    ~VCAModuleProcessor() override = default;

    const juce::String getName() const override { return "vca"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float gainDb = gainParam != nullptr ? gainParam->load() : 0.0f;
        ImGui::PushItemWidth (itemWidth);
        
        bool isGainModulated = isParamModulated("gain");
        if (isGainModulated) {
            gainDb = getLiveParamValueFor("gain", "gain_live", gainDb);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Gain dB", &gainDb, -60.0f, 6.0f)) if (!isGainModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("gain"))) *p = gainDb;
        if (!isGainModulated) adjustParamOnWheel(ap.getParameter("gain"), "gain", gainDb);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isGainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);
        
        int busIdx, chanInBus;
        if (getParamRouting("gain", busIdx, chanInBus))
            helpers.drawAudioInputPin("Gain Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
            
        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Gain Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Gain<float> gain;

    std::atomic<float>* gainParam = nullptr;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (VCAModuleProcessor)
};




================================================================================
FILE: juce\Source\audio\modules\VCFModuleProcessor.cpp
================================================================================


#include "VCFModuleProcessor.h"

VCFModuleProcessor::VCFModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(5), true) // ch0-1 audio, ch2-4 mods
                        .withOutput("Output", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "VCFParams", createParameterLayout())
{
    cutoffParam = apvts.getRawParameterValue(paramIdCutoff);
    resonanceParam = apvts.getRawParameterValue(paramIdResonance);
    typeParam = apvts.getRawParameterValue(paramIdType);
    typeModParam = apvts.getRawParameterValue(paramIdTypeMod);
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
    
    // Initialize smoothed values
    cutoffSm.reset(1000.0f);
    resonanceSm.reset(1.0f);
}

juce::AudioProcessorValueTreeState::ParameterLayout VCFModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;

    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdCutoff, "Cutoff",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 1000.0f));
    
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdResonance, "Resonance",
        juce::NormalisableRange<float>(0.1f, 10.0f, 0.01f), 1.0f));

    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdType, "Type",
        juce::StringArray { "Low-pass", "High-pass", "Band-pass" }, 0));
    
    // Add modulation parameter for filter type
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdTypeMod, "Type Mod", 0.0f, 1.0f, 0.0f));

    return { params.begin(), params.end() };
}

void VCFModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32)samplesPerBlock, 2 };
    filterA.prepare(spec);
    filterB.prepare(spec);
    
    // Set smoothing time for parameters (10ms)
    cutoffSm.reset(sampleRate, 0.01);
    resonanceSm.reset(sampleRate, 0.01);
}

void VCFModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    // Get buses
    auto inBus  = getBusBuffer(buffer, true, 0);
    auto outBus = getBusBuffer(buffer, false, 0);
    // Start from dry input like Reverb: copy in -> out, then filter in place
    {
        const int nCh = juce::jmin(inBus.getNumChannels(), outBus.getNumChannels());
        const int nSm = juce::jmin(inBus.getNumSamples(),  outBus.getNumSamples());
        for (int ch = 0; ch < nCh; ++ch)
            outBus.copyFrom(ch, 0, inBus, ch, 0, nSm);
    }
    
    // PER-SAMPLE FIX: Get pointers to modulation CV inputs, if they are connected
    const bool isCutoffMod = isParamInputConnected(paramIdCutoff);
    const bool isResoMod = isParamInputConnected(paramIdResonance);
    const bool isTypeMod = isParamInputConnected(paramIdTypeMod);

    const float* cutoffCV = isCutoffMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* resoCV = isResoMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;
    const float* typeCV = isTypeMod && inBus.getNumChannels() > 4 ? inBus.getReadPointer(4) : nullptr;

    // Get base parameter values ONCE
    const float baseCutoff = cutoffParam != nullptr ? cutoffParam->load() : 1000.0f;
    const float baseResonance = resonanceParam != nullptr ? resonanceParam->load() : 1.0f;
    const int baseType = static_cast<int>(typeParam != nullptr ? typeParam->load() : 0);

    // Create a temporary buffer for single-sample processing (always 2 channels)
    juce::AudioBuffer<float> sampleBuffer(2, 1);
    juce::dsp::AudioBlock<float> block(sampleBuffer);
    juce::dsp::ProcessContextReplacing<float> context(block);
    // Ensure initial filter types
    configureFilterForType(filterA, activeType);
    configureFilterForType(filterB, activeIsA ? activeType : pendingType);

    // PER-SAMPLE FIX: Process each sample individually to respond to changing modulation
    const int numSamples = buffer.getNumSamples();
    for (int i = 0; i < numSamples; ++i)
    {
        // --- Calculate effective parameters FOR THIS SAMPLE ---
        float cutoff = baseCutoff;
        if (isCutoffMod && cutoffCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, cutoffCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base cutoff value
            const float octaveRange = 4.0f; // CV can modulate +/- 4 octaves
            const float octaveOffset = (cv - 0.5f) * octaveRange; // Center around 0, range [-2, +2] octaves
            cutoff = baseCutoff * std::pow(2.0f, octaveOffset);
            cutoff = juce::jlimit(20.0f, 20000.0f, cutoff);
        }
        
        // Apply smoothing to cutoff to prevent zipper noise
        cutoffSm.setTargetValue(cutoff);
        cutoff = cutoffSm.getNextValue();

        float resonance = baseResonance;
        if (isResoMod && resoCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, resoCV[i]);
            // ADDITIVE MODULATION FIX: Add CV offset to base resonance value
            const float resoRange = 2.0f; // CV can modulate resonance by +/- 2 units
            const float resoOffset = (cv - 0.5f) * resoRange; // Center around 0
            resonance = baseResonance + resoOffset;
            resonance = juce::jlimit(0.1f, 10.0f, resonance);
        }
        
        // Apply smoothing to resonance to prevent zipper noise
        resonanceSm.setTargetValue(resonance);
        resonance = resonanceSm.getNextValue();

        int type = baseType;
        if (isTypeMod && typeCV != nullptr) {
            const float cv = juce::jlimit(0.0f, 1.0f, typeCV[i]);
            int numChoices = 3;
            int modChoice = static_cast<int>(std::floor(cv * numChoices));
            type = (baseType + modChoice) % numChoices;
        }

        // --- Set filter state FOR THIS SAMPLE ---
        // Handle type change with short crossfade between two filter instances
        if (type != activeType && typeCrossfadeRemaining == 0)
        {
            pendingType = type;
            typeCrossfadeRemaining = TYPE_CROSSFADE_SAMPLES;
            // Configure the inactive filter to the new type
            if (activeIsA) configureFilterForType(filterB, pendingType);
            else           configureFilterForType(filterA, pendingType);
        }

        // Keep both filters set to same coeffs
        filterA.setCutoffFrequency(juce::jlimit(20.0f, 20000.0f, cutoff));
        filterA.setResonance(juce::jlimit(0.1f, 10.0f, resonance));
        filterB.setCutoffFrequency(juce::jlimit(20.0f, 20000.0f, cutoff));
        filterB.setResonance(juce::jlimit(0.1f, 10.0f, resonance));
        if ((i & 0x1F) == 0) // decimate telemetry writes
        {
            setLiveParamValue("cutoff_live", cutoff);
            setLiveParamValue("resonance_live", resonance);
            setLiveParamValue("type_live", (float) type);
        }

        // --- Read current output sample (dry) and process in place
        const float inL = outBus.getNumChannels() > 0 ? outBus.getSample(0, i) : 0.0f;
        const float inR = outBus.getNumChannels() > 1 ? outBus.getSample(1, i) : inL;
        sampleBuffer.setSample(0, 0, inL);
        sampleBuffer.setSample(1, 0, inR);

        // Process through both filters and fade if needed
        float yL = inL, yR = inR;
        {
            sampleBuffer.setSample(0, 0, inL);
            sampleBuffer.setSample(1, 0, inR);
            filterA.process(context);
            float aL = sampleBuffer.getSample(0, 0);
            float aR = sampleBuffer.getSample(1, 0);

            sampleBuffer.setSample(0, 0, inL);
            sampleBuffer.setSample(1, 0, inR);
            filterB.process(context);
            float bL = sampleBuffer.getSample(0, 0);
            float bR = sampleBuffer.getSample(1, 0);

            if (typeCrossfadeRemaining > 0)
            {
                const float t = 1.0f - (float) typeCrossfadeRemaining / (float) TYPE_CROSSFADE_SAMPLES;
                const float wA = activeIsA ? (1.0f - t) : t;
                const float wB = 1.0f - wA;
                yL = aL * wA + bL * wB;
                yR = aR * wA + bR * wB;
                --typeCrossfadeRemaining;
                if (typeCrossfadeRemaining == 0)
                {
                    // Switch active filter to the new type and reset states
                    activeIsA = !activeIsA;
                    activeType = pendingType;
                    filterA.reset();
                    filterB.reset();
                }
            }
            else
            {
                if (activeIsA) { yL = aL; yR = aR; }
                else           { yL = bL; yR = bR; }
            }
        }

        // --- Write filtered sample back to output bus
        if (outBus.getNumChannels() > 0) outBus.setSample(0, i, yL);
        if (outBus.getNumChannels() > 1) outBus.setSample(1, i, yR);
    }
    
    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(outBus.getNumChannels() > 0 ? outBus.getSample(0, numSamples - 1) : 0.0f);
        if (lastOutputValues[1]) lastOutputValues[1]->store(outBus.getNumChannels() > 1 ? outBus.getSample(1, numSamples - 1) : 0.0f);
    }
}

// Parameter bus contract implementation
bool VCFModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All inputs are on bus 0
    if (paramId == paramIdCutoff)    { outChannelIndexInBus = 2; return true; } // Cutoff Mod
    if (paramId == paramIdResonance) { outChannelIndexInBus = 3; return true; } // Resonance Mod
    if (paramId == paramIdTypeMod)   { outChannelIndexInBus = 4; return true; } // Type Mod
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\VCFModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class VCFModuleProcessor : public ModuleProcessor
{
public:
    // Parameter ID constants
    static constexpr auto paramIdCutoff = "cutoff";
    static constexpr auto paramIdResonance = "resonance";
    static constexpr auto paramIdType = "type";
    static constexpr auto paramIdTypeMod = "type_mod";

    VCFModuleProcessor();
    ~VCFModuleProcessor() override = default;

    const juce::String getName() const override { return "vcf"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    
    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float cutoff = cutoffParam != nullptr ? cutoffParam->load() : 1000.0f;
        float q = resonanceParam != nullptr ? resonanceParam->load() : 1.0f;
        int ftype = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdType))) ftype = p->getIndex();

        ImGui::PushItemWidth (itemWidth);

        bool isCutoffModulated = isParamModulated(paramIdCutoff);
        if (isCutoffModulated) {
            cutoff = getLiveParamValueFor(paramIdCutoff, "cutoff_live", cutoff);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Cutoff", &cutoff, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic)) {
            if (!isCutoffModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdCutoff))) *p = cutoff;
            }
        }
        if (!isCutoffModulated) adjustParamOnWheel (ap.getParameter(paramIdCutoff), "cutoffHz", cutoff);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isCutoffModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        bool isResoModulated = isParamModulated(paramIdResonance);
        if (isResoModulated) {
            q = getLiveParamValueFor(paramIdResonance, "resonance_live", q);
            ImGui::BeginDisabled();
        }
        if (ImGui::SliderFloat ("Resonance", &q, 0.1f, 10.0f)) {
            if (!isResoModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdResonance))) *p = q;
            }
        }
        if (!isResoModulated) adjustParamOnWheel (ap.getParameter(paramIdResonance), "resonance", q);
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isResoModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
        
        bool isTypeModulated = isParamModulated(paramIdTypeMod);
        if (isTypeModulated) {
            ftype = static_cast<int>(getLiveParamValueFor(paramIdTypeMod, "type_live", static_cast<float>(ftype)));
            ImGui::BeginDisabled();
        }
        if (ImGui::Combo ("Type", &ftype, "Low-pass\0High-pass\0Band-pass\0\0")) {
            if (!isTypeModulated) {
                if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdType))) *p = ftype;
            }
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (isTypeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        helpers.drawAudioInputPin("In L", 0);
        helpers.drawAudioInputPin("In R", 1);

        helpers.drawAudioInputPin("Cutoff Mod", 2);
        helpers.drawAudioInputPin("Resonance Mod", 3);
        helpers.drawAudioInputPin("Type Mod", 4);

        helpers.drawAudioOutputPin("Out L", 0);
        helpers.drawAudioOutputPin("Out R", 1);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Cutoff Mod";
            case 3: return "Resonance Mod";
            case 4: return "Type Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::StateVariableTPTFilter<float> filterA;
    juce::dsp::StateVariableTPTFilter<float> filterB;

    // Cached parameter pointers
    std::atomic<float>* cutoffParam = nullptr;
    std::atomic<float>* resonanceParam = nullptr;
    std::atomic<float>* typeParam = nullptr;
    std::atomic<float>* typeModParam = nullptr;
    
    // Smoothed values to prevent zipper noise
    juce::SmoothedValue<float> cutoffSm;
    juce::SmoothedValue<float> resonanceSm;

    // Type crossfade management
    bool activeIsA { true };
    int  activeType { 0 };
    int  pendingType { 0 };
    int  typeCrossfadeRemaining { 0 };
    static constexpr int TYPE_CROSSFADE_SAMPLES = 128; // short, click-free

    static inline void configureFilterForType(juce::dsp::StateVariableTPTFilter<float>& f, int type)
    {
        switch (type) {
            case 0: f.setType(juce::dsp::StateVariableTPTFilterType::lowpass); break;
            case 1: f.setType(juce::dsp::StateVariableTPTFilterType::highpass); break;
            default: f.setType(juce::dsp::StateVariableTPTFilterType::bandpass); break;
        }
    }

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (VCFModuleProcessor)
};




================================================================================
FILE: juce\Source\audio\modules\VCOModuleProcessor.cpp
================================================================================


#include "VCOModuleProcessor.h"

VCOModuleProcessor::VCOModuleProcessor()
    : ModuleProcessor (BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(3), true) // ch0: Freq Mod, ch1: Wave Mod, ch2: Gate
                        .withOutput("Output", juce::AudioChannelSet::mono(), true)),
      apvts (*this, nullptr, "VCOParams", createParameterLayout())
{
    frequencyParam = apvts.getRawParameterValue(paramIdFrequency);
    waveformParam  = apvts.getRawParameterValue(paramIdWaveform);

    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));

    oscillator.initialise([](float x) { return std::sin(x); }, 128);
}

juce::AudioProcessorValueTreeState::ParameterLayout VCOModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> params;
    params.push_back(std::make_unique<juce::AudioParameterFloat>(
        paramIdFrequency, "Frequency",
        juce::NormalisableRange<float>(20.0f, 20000.0f, 1.0f, 0.25f), 440.0f));
    params.push_back(std::make_unique<juce::AudioParameterChoice>(
        paramIdWaveform, "Waveform",
        juce::StringArray { "Sine", "Sawtooth", "Square" }, 0));
    return { params.begin(), params.end() };
}

void VCOModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    juce::dsp::ProcessSpec spec { sampleRate, (juce::uint32) samplesPerBlock, 1 };
    oscillator.prepare(spec);
}

void VCOModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);

    auto outBus = getBusBuffer(buffer, false, 0);

    auto inBus = getBusBuffer(buffer, true, 0);
    const float* freqCV = (inBus.getNumChannels() > 0) ? inBus.getReadPointer(0) : nullptr;
    const float* waveCV = (inBus.getNumChannels() > 1) ? inBus.getReadPointer(1) : nullptr;
    const float* gateCV = (inBus.getNumChannels() > 2) ? inBus.getReadPointer(2) : nullptr;

    const bool freqActive = isParamInputConnected(paramIdFrequency);
    const bool waveActive = isParamInputConnected(paramIdWaveformMod);
    const bool gateActive = isParamInputConnected("gate_mod");

#if defined(PRESET_CREATOR_UI)
    {
        static int dbgCounter = 0;
        if ((dbgCounter++ & 0x3F) == 0)
        {
            const float s0 = (freqCV && buffer.getNumSamples() > 0) ? freqCV[0] : 0.0f;
            const float s1 = (freqCV && buffer.getNumSamples() > 1) ? freqCV[1] : 0.0f;
            juce::Logger::writeToLog(
                juce::String("[VCO] inCh=") + juce::String(inBus.getNumChannels()) +
                " freqRMS=" + juce::String((inBus.getNumChannels()>0)?inBus.getRMSLevel(0,0,buffer.getNumSamples()):0.0f) +
                " s0=" + juce::String(s0) + " s1=" + juce::String(s1));
        }
    }
#endif

    const float baseFrequency = frequencyParam != nullptr ? frequencyParam->load() : 440.0f;
    const int baseWaveform = (int) (waveformParam != nullptr ? waveformParam->load() : 0.0f);

    // Define smoothing factor for click-free gating
    constexpr float GATE_SMOOTHING_FACTOR = 0.002f;

    for (int i = 0; i < buffer.getNumSamples(); ++i)
    {
        int waveform = baseWaveform;
        if (waveActive)
        {
            const float cvRaw = waveCV[i];
            const float cv01  = juce::jlimit(0.0f, 1.0f, (cvRaw + 1.0f) * 0.5f);
            waveform = (int) (cv01 * 2.99f);
        }

        float freq = baseFrequency;
        if (freqActive)
        {
            const float cvRaw = freqCV[i];
            // Normalize CV: prefer unipolar [0,1]; if outside, treat as bipolar [-1,1]
            const float cv01  = (cvRaw >= 0.0f && cvRaw <= 1.0f)
                                ? juce::jlimit(0.0f, 1.0f, cvRaw)
                                : juce::jlimit(0.0f, 1.0f, (cvRaw + 1.0f) * 0.5f);
            // Absolute mapping: 20 Hz .. 20000 Hz (log scale)
            constexpr float fMin = 20.0f;
            constexpr float fMax = 20000.0f;
            const float spanOct = std::log2(fMax / fMin);
            freq = fMin * std::pow(2.0f, cv01 * spanOct);
        }
        freq = juce::jlimit(20.0f, 20000.0f, freq);

        if (currentWaveform != waveform)
        {
            if (waveform == 0)      oscillator.initialise([](float x){ return std::sin(x); }, 128);
            else if (waveform == 1) oscillator.initialise([](float x){ return (x / juce::MathConstants<float>::pi); }, 128);
            else                    oscillator.initialise([](float x){ return x < 0.0f ? -1.0f : 1.0f; }, 128);
            currentWaveform = waveform;
        }

        oscillator.setFrequency(freq, false);
        const float s = oscillator.processSample(0.0f);
        
        // Apply gate with click-free smoothing
        float targetGate = gateActive ? gateCV[i] : 1.0f;
        // Treat near-zero magnitudes as zero to avoid flutter from denormals or noise
        if (std::abs(targetGate) < 1.0e-4f) targetGate = 0.0f;
        if (targetGate > 1.0f) targetGate = 1.0f;
        smoothedGate += (targetGate - smoothedGate) * GATE_SMOOTHING_FACTOR;
        const float finalSample = s * smoothedGate;
        
        outBus.setSample(0, i, finalSample);

        if ((i & 0x3F) == 0)
        {
            setLiveParamValue(paramIdFrequency, freq);
            setLiveParamValue(paramIdWaveform, (float) waveform);
        }
    }
    
    // Update inspector value for visualization (peak magnitude)
    updateOutputTelemetry(buffer);
}

bool VCOModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All inputs are on the same bus
    if (paramId == paramIdFrequency)   { outChannelIndexInBus = 0; return true; }
    if (paramId == paramIdWaveformMod) { outChannelIndexInBus = 1; return true; }
    if (paramId == "gate_mod")         { outChannelIndexInBus = 2; return true; }
    return false;
}




================================================================================
FILE: juce\Source\audio\modules\VCOModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

class VCOModuleProcessor : public ModuleProcessor
{
public:
    // Parameter IDs
    static constexpr auto paramIdFrequency   = "frequency";
    static constexpr auto paramIdWaveform    = "waveform";
    // Virtual target only (no APVTS param needed) – used for routing to select waveform
    static constexpr auto paramIdWaveformMod = "waveform_mod";

    VCOModuleProcessor();
    ~VCOModuleProcessor() override = default;

    const juce::String getName() const override { return "vco"; }

    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock (juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode (float itemWidth,
                               const std::function<bool(const juce::String& paramId)>& isParamModulated,
                               const std::function<void()>& onModificationEnded) override
    {
        auto& ap = getAPVTS();
        float freq = frequencyParam != nullptr ? getLiveParamValueFor(paramIdFrequency, paramIdFrequency, frequencyParam->load()) : 440.0f;
        int wave = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWaveform))) wave = (int) getLiveParamValueFor(paramIdWaveformMod, paramIdWaveform, (float) p->getIndex());

        // Helper for tooltips (imgui_demo.cpp pattern)
        auto HelpMarker = [](const char* desc)
        {
            ImGui::SameLine();
            ImGui::TextDisabled("(?)");
            if (ImGui::BeginItemTooltip())
            {
                ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
                ImGui::TextUnformatted(desc);
                ImGui::PopTextWrapPos();
                ImGui::EndTooltip();
            }
        };

        ImGui::PushItemWidth (itemWidth);

        // === FREQUENCY SECTION ===
        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Oscillator Control");
        ImGui::Spacing();
        
        const bool freqMod = isParamModulated(paramIdFrequency);
        
        // Color-coded modulation indicator
        if (freqMod)
        {
            ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.4f, 0.8f, 1.0f, 1.0f)); // Cyan
            ImGui::PushStyleColor(ImGuiCol_SliderGrab, ImVec4(0.4f, 0.8f, 1.0f, 1.0f));
            ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.2f, 0.4f, 0.5f, 0.5f));
        }
        
        if (freqMod) ImGui::BeginDisabled();
        if (ImGui::SliderFloat ("##freq", &freq, 20.0f, 20000.0f, "%.1f Hz", ImGuiSliderFlags_Logarithmic))
        {
            if (!freqMod) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = freq;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (!freqMod) adjustParamOnWheel (ap.getParameter(paramIdFrequency), "frequencyHz", freq);
        if (freqMod) ImGui::EndDisabled();
        
        ImGui::SameLine();
        if (freqMod)
        {
            ImGui::TextColored(ImVec4(0.4f, 0.8f, 1.0f, 1.0f), "Frequency (CV)");
            ImGui::PopStyleColor(3);
        }
        else
        {
            ImGui::Text("Frequency");
        }
        HelpMarker("Control voltage range: 0-1V = 20Hz to 20kHz (exponential)\nConnect LFO, Envelope, or Sequencer for modulation");

        // Note name display
        if (!freqMod)
        {
            auto getNoteFromFreq = [](float f) -> juce::String
            {
                if (f < 20.0f || f > 20000.0f) return "";
                float midiNote = 12.0f * std::log2(f / 440.0f) + 69.0f;
                int noteNum = (int)std::round(midiNote);
                const char* notes[] = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};
                int octave = (noteNum / 12) - 1;
                return juce::String(notes[noteNum % 12]) + juce::String(octave);
            };
            ImGui::TextDisabled("Note: %s", getNoteFromFreq(freq).toRawUTF8());
        }

        // Quick preset buttons
        if (!freqMod)
        {
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(4, 4));
            float btnWidth = (itemWidth - 12) / 4.0f;
            
            if (ImGui::Button("A4", ImVec2(btnWidth, 0)))
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = 440.0f;
                onModificationEnded();
            }
            if (ImGui::IsItemHovered()) ImGui::SetTooltip("440 Hz (Concert A)");
            
            ImGui::SameLine();
            if (ImGui::Button("C4", ImVec2(btnWidth, 0)))
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = 261.63f;
                onModificationEnded();
            }
            if (ImGui::IsItemHovered()) ImGui::SetTooltip("261.63 Hz (Middle C)");
            
            ImGui::SameLine();
            if (ImGui::Button("A3", ImVec2(btnWidth, 0)))
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = 220.0f;
                onModificationEnded();
            }
            if (ImGui::IsItemHovered()) ImGui::SetTooltip("220 Hz");
            
            ImGui::SameLine();
            if (ImGui::Button("C3", ImVec2(btnWidth, 0)))
            {
                if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter(paramIdFrequency))) *p = 130.81f;
                onModificationEnded();
            }
            if (ImGui::IsItemHovered()) ImGui::SetTooltip("130.81 Hz");
            
            ImGui::PopStyleVar();
        }

        ImGui::Spacing();
        ImGui::Spacing();

        // === WAVEFORM SECTION ===
        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Waveform");
        ImGui::Spacing();
        
        const bool waveMod = isParamModulated(paramIdWaveformMod);
        
        // Color-coded modulation indicator
        if (waveMod)
        {
            ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 0.8f, 0.4f, 1.0f)); // Orange
            ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.5f, 0.4f, 0.2f, 0.5f));
        }
        
        if (waveMod) ImGui::BeginDisabled();
        if (ImGui::Combo ("##wave", &wave, "Sine\0Sawtooth\0Square\0\0"))
        {
            if (!waveMod) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter(paramIdWaveform))) *p = wave;
        }
        if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
        if (waveMod) ImGui::EndDisabled();
        
        ImGui::SameLine();
        if (waveMod)
        {
            ImGui::TextColored(ImVec4(1.0f, 0.8f, 0.4f, 1.0f), "Shape (CV)");
            ImGui::PopStyleColor(2);
        }
        else
        {
            ImGui::Text("Shape");
        }
        HelpMarker("Sine: Pure tone, no harmonics\nSawtooth: Bright, rich in harmonics\nSquare: Hollow, odd harmonics only\nCV modulation: 0V=Sine, 0.5V=Saw, 1V=Square");

        // Visual waveform preview (imgui_demo.cpp PlotLines pattern)
        float waveformPreview[128];
        for (int i = 0; i < 128; ++i)
        {
            float x = (float)i / 128.0f * 2.0f * juce::MathConstants<float>::pi;
            switch (wave)
            {
                case 0: waveformPreview[i] = std::sin(x); break; // Sine
                case 1: waveformPreview[i] = (x / juce::MathConstants<float>::pi) - 1.0f; break; // Sawtooth
                case 2: waveformPreview[i] = (x < juce::MathConstants<float>::pi) ? 1.0f : -1.0f; break; // Square
                default: waveformPreview[i] = 0.0f;
            }
        }
        ImGui::PlotLines("##wavepreview", waveformPreview, 128, 0, nullptr, -1.2f, 1.2f, ImVec2(itemWidth, 80));

        ImGui::Spacing();
        ImGui::Spacing();

        // === OUTPUT SECTION ===
        ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Output");
        ImGui::Spacing();
        
        // Real-time output level meter
        float outputLevel = lastOutputValues[0]->load();
        float absLevel = std::abs(outputLevel);
        
        // Color-coded progress bar
        ImVec4 meterColor;
        if (absLevel < 0.7f)
            meterColor = ImVec4(0.2f, 0.8f, 0.2f, 1.0f); // Green
        else if (absLevel < 0.9f)
            meterColor = ImVec4(0.9f, 0.7f, 0.0f, 1.0f); // Yellow
        else
            meterColor = ImVec4(0.9f, 0.2f, 0.2f, 1.0f); // Red
        
        ImGui::PushStyleColor(ImGuiCol_PlotHistogram, meterColor);
        ImGui::ProgressBar(absLevel, ImVec2(itemWidth, 0), "");
        ImGui::PopStyleColor();
        
        ImGui::SameLine(0, 5);
        ImGui::Text("%.3f", outputLevel);
        HelpMarker("Live output signal level\nConnect to VCA, Filter, or Audio Out\nUse Gate input to control amplitude");

        ImGui::PopItemWidth();
    }

    void drawIoPins(const NodePinHelpers& helpers) override
    {
        // Single input bus (0): ch0 Frequency Mod, ch1 Waveform Mod, ch2 Gate
        helpers.drawAudioInputPin("Frequency", 0);
        helpers.drawAudioInputPin("Waveform", 1);
        helpers.drawAudioInputPin("Gate", 2);
        helpers.drawAudioOutputPin("Out", 0);
    }

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Frequency Mod";
            case 1: return "Waveform Mod";
            case 2: return "Gate";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
#endif

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    juce::AudioProcessorValueTreeState apvts;
    juce::dsp::Oscillator<float> oscillator;
    int currentWaveform = -1;

    // Cached parameter pointers
    std::atomic<float>* frequencyParam { nullptr };
    std::atomic<float>* waveformParam  { nullptr };

    // Click-free gating
    float smoothedGate { 0.0f };

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (VCOModuleProcessor)
};




================================================================================
FILE: juce\Source\audio\modules\VocalTractFilterModuleProcessor.cpp
================================================================================


// Rebuilt module implementation
#include "VocalTractFilterModuleProcessor.h"
#include "../../utils/RtLogger.h"
#if defined(PRESET_CREATOR_UI)
#include "../../preset_creator/ImGuiNodeEditorComponent.h"
#endif

// Static formant tables
const FormantData VocalTractFilterModuleProcessor::VOWEL_A[4] = { {700.0f,1.0f,6.0f},{1220.0f,0.5f,8.0f},{2600.0f,0.2f,12.0f},{3800.0f,0.15f,15.0f} };
const FormantData VocalTractFilterModuleProcessor::VOWEL_E[4] = { {500.0f,1.0f,7.0f},{1800.0f,0.6f,9.0f},{2800.0f,0.3f,13.0f},{3900.0f,0.2f,16.0f} };
const FormantData VocalTractFilterModuleProcessor::VOWEL_I[4] = { {270.0f,1.0f,8.0f},{2300.0f,0.4f,10.0f},{3000.0f,0.2f,14.0f},{4000.0f,0.1f,18.0f} };
const FormantData VocalTractFilterModuleProcessor::VOWEL_O[4] = { {450.0f,1.0f,6.0f},{800.0f,0.7f,8.0f},{2830.0f,0.15f,12.0f},{3800.0f,0.1f,15.0f} };
const FormantData VocalTractFilterModuleProcessor::VOWEL_U[4] = { {300.0f,1.0f,7.0f},{870.0f,0.6f,9.0f},{2240.0f,0.1f,13.0f},{3500.0f,0.05f,16.0f} };

VocalTractFilterModuleProcessor::VocalTractFilterModuleProcessor()
    : ModuleProcessor(BusesProperties().withInput("Audio In", juce::AudioChannelSet::mono(), true)
                                        .withInput("Vowel Mod", juce::AudioChannelSet::mono(), true)
                                        .withInput("Formant Mod", juce::AudioChannelSet::mono(), true)
                                        .withInput("Instability Mod", juce::AudioChannelSet::mono(), true)
                                        .withInput("Gain Mod", juce::AudioChannelSet::mono(), true)
                                        .withOutput("Audio Out", juce::AudioChannelSet::mono(), true))
    , apvts(*this, nullptr, "VocalTractParams", createParameterLayout())
{
    vowelShapeParam   = apvts.getRawParameterValue("vowelShape");
    formantShiftParam = apvts.getRawParameterValue("formantShift");
    instabilityParam  = apvts.getRawParameterValue("instability");
    outputGainParam   = apvts.getRawParameterValue("formantGain");

    // Initialize oscillators with sine wave functions
    wowOscillator.initialise([](float x) { return std::sin(x); }, 128);
    flutterOscillator.initialise([](float x) { return std::sin(x); }, 128);
    
    // Initialize lastOutputValues for cable inspector
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f));
}

void VocalTractFilterModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    if (sampleRate <= 0.0 || samplesPerBlock <= 0) return;

    dspSpec.sampleRate = sampleRate;
    dspSpec.maximumBlockSize = (juce::uint32) samplesPerBlock;
    dspSpec.numChannels = 1;

    bands.b0.prepare(dspSpec); bands.b1.prepare(dspSpec);
    bands.b2.prepare(dspSpec); bands.b3.prepare(dspSpec);
    bands.b0.reset(); bands.b1.reset(); bands.b2.reset(); bands.b3.reset();

    wowOscillator.prepare(dspSpec); wowOscillator.setFrequency(0.5f); wowOscillator.reset();
    flutterOscillator.prepare(dspSpec); flutterOscillator.setFrequency(7.5f); flutterOscillator.reset();

    ensureWorkBuffers(1, samplesPerBlock);
    updateCoefficients(0.0f, 0.0f, 0.0f); // Initialize with default values
}

void VocalTractFilterModuleProcessor::ensureWorkBuffers(int numChannels, int numSamples)
{
    workBuffer.setSize(numChannels, numSamples, false, false, true);
    sumBuffer.setSize(numChannels, numSamples, false, false, true);
    tmpBuffer.setSize(numChannels, numSamples, false, false, true);
}

void VocalTractFilterModuleProcessor::updateCoefficients(float vowelShape, float formantShift, float instability)
{
    const FormantData* tables[] = { VOWEL_A, VOWEL_E, VOWEL_I, VOWEL_O, VOWEL_U };
    float shape = juce::jlimit(0.0f, 3.999f, vowelShape);
    int i0 = (int) std::floor(shape);
    int i1 = juce::jmin(4, i0 + 1);
    float t = shape - (float)i0;
    float shift = std::pow(2.0f, juce::jlimit(-1.0f, 1.0f, formantShift));
    float inst = juce::jlimit(0.0f, 1.0f, instability);
    float wow = wowOscillator.processSample(0.0f) * 0.03f * inst;
    float flt = flutterOscillator.processSample(0.0f) * 0.01f * inst;
    float mult = 1.0f + wow + flt;

    const FormantData* a = tables[i0];
    const FormantData* b = tables[i1];

    auto setBand = [&](IIRFilter& f, int bandIdx)
    {
        float cf = juce::jmap(t, a[bandIdx].frequency, b[bandIdx].frequency) * shift * mult;
        float q  = juce::jmap(t, a[bandIdx].q,         b[bandIdx].q);
        bandGains[bandIdx] = juce::jmap(t, a[bandIdx].gain, b[bandIdx].gain);
        cf = juce::jlimit(20.0f, (float)dspSpec.sampleRate * 0.49f, cf);
        q  = juce::jlimit(0.1f, 40.0f, q);
        f.coefficients = juce::dsp::IIR::Coefficients<float>::makeBandPass(dspSpec.sampleRate, cf, q);
    };

    setBand(bands.b0, 0);
    setBand(bands.b1, 1);
    setBand(bands.b2, 2);
    setBand(bands.b3, 3);
}

void VocalTractFilterModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer&)
{
    juce::ScopedNoDenormals noDenormals;
    const int numSamples = buffer.getNumSamples();
    if (numSamples <= 0) return;

    // Check for modulation inputs and read CV values
    float vowelModCV = 0.0f, formantModCV = 0.0f, instabilityModCV = 0.0f, gainModCV = 0.0f;
    
    if (isParamInputConnected("vowelShape")) {
        const auto& vowelModBus = getBusBuffer(buffer, true, 1);
        if (vowelModBus.getNumChannels() > 0)
            vowelModCV = vowelModBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("formantShift")) {
        const auto& formantModBus = getBusBuffer(buffer, true, 2);
        if (formantModBus.getNumChannels() > 0)
            formantModCV = formantModBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("instability")) {
        const auto& instabilityModBus = getBusBuffer(buffer, true, 3);
        if (instabilityModBus.getNumChannels() > 0)
            instabilityModCV = instabilityModBus.getReadPointer(0)[0];
    }
    
    if (isParamInputConnected("formantGain")) {
        const auto& gainModBus = getBusBuffer(buffer, true, 4);
        if (gainModBus.getNumChannels() > 0)
            gainModCV = gainModBus.getReadPointer(0)[0];
    }

    // Apply modulation to parameters
    float vowelShape = vowelShapeParam ? vowelShapeParam->load() : 0.0f;
    float formantShift = formantShiftParam ? formantShiftParam->load() : 0.0f;
    float instability = instabilityParam ? instabilityParam->load() : 0.0f;
    float outputGain = outputGainParam ? outputGainParam->load() : 0.0f;
    
    if (isParamInputConnected("vowelShape")) {
        vowelShape = juce::jlimit(0.0f, 4.0f, vowelShape + (vowelModCV - 0.5f) * 2.0f);
    }
    if (isParamInputConnected("formantShift")) {
        formantShift = juce::jlimit(-1.0f, 1.0f, formantShift + (formantModCV - 0.5f) * 2.0f);
    }
    if (isParamInputConnected("instability")) {
        instability = juce::jlimit(0.0f, 1.0f, instability + (instabilityModCV - 0.5f) * 0.5f);
    }
    if (isParamInputConnected("formantGain")) {
        outputGain = juce::jlimit(-24.0f, 24.0f, outputGain + (gainModCV - 0.5f) * 48.0f);
    }

    // Store live modulated values for UI display
    setLiveParamValue("vowelShape_live", vowelShape);
    setLiveParamValue("formantShift_live", formantShift);
    setLiveParamValue("instability_live", instability);
    setLiveParamValue("formantGain_live", outputGain);

    // Update coefficients every block so UI changes apply
    updateCoefficients(vowelShape, formantShift, instability);

    auto in  = getBusBuffer(buffer, true, 0);
    auto out = getBusBuffer(buffer, false, 0);
    if (in.getNumChannels() == 0 || out.getNumChannels() < 1)
    { out.clear(); return; }

    ensureWorkBuffers(out.getNumChannels(), numSamples);

    // Fan-out mono input to all workBuffer channels
    for (int ch = 0; ch < workBuffer.getNumChannels(); ++ch)
        workBuffer.copyFrom(ch, 0, in, 0, 0, numSamples);

    // Sum of bands
    sumBuffer.clear();
    auto processBand = [&](IIRFilter& f, float g)
    {
        tmpBuffer.makeCopyOf(workBuffer);
        juce::dsp::AudioBlock<float> b(tmpBuffer);
        juce::dsp::ProcessContextReplacing<float> ctx(b);
        f.process(ctx);
        tmpBuffer.applyGain(g);
        for (int ch = 0; ch < sumBuffer.getNumChannels(); ++ch)
            sumBuffer.addFrom(ch, 0, tmpBuffer, ch, 0, numSamples);
    };

    processBand(bands.b0, bandGains[0]);
    processBand(bands.b1, bandGains[1]);
    processBand(bands.b2, bandGains[2]);
    processBand(bands.b3, bandGains[3]);

    // Output with gain
    float outGain = juce::Decibels::decibelsToGain(juce::jlimit(-24.0f, 24.0f, outputGain));
    sumBuffer.applyGain(outGain);
    for (int ch = 0; ch < out.getNumChannels(); ++ch)
        out.copyFrom(ch, 0, sumBuffer, ch % sumBuffer.getNumChannels(), 0, numSamples);
    
    // Update lastOutputValues for cable inspector
    if (!lastOutputValues.empty() && lastOutputValues[0])
    {
        lastOutputValues[0]->store(out.getSample(0, out.getNumSamples() - 1));
    }
}

juce::AudioProcessorValueTreeState::ParameterLayout VocalTractFilterModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>("vowelShape",   "Vowel Shape",   0.0f, 4.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>("formantShift", "Formant Shift", -1.0f, 1.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>("instability",  "Instability",  0.0f, 1.0f, 0.0f));
    p.push_back(std::make_unique<juce::AudioParameterFloat>("formantGain",  "Formant Gain", juce::NormalisableRange<float>(-24.0f, 24.0f, 0.1f), 0.0f));
    return { p.begin(), p.end() };
}

#if defined(PRESET_CREATOR_UI)
void VocalTractFilterModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    if (!vowelShapeParam || !formantShiftParam || !instabilityParam || !outputGainParam) return;
    ImGui::PushItemWidth(itemWidth);
    
    // Vowel Shape
    bool isVowelModulated = isParamModulated("vowelShape");
    float v = vowelShapeParam->load();
    if (isVowelModulated) {
        v = getLiveParamValueFor("vowelShape", "vowelShape_live", v);
        ImGui::BeginDisabled();
    }
    
    if (ImGui::SliderFloat("Vowel", &v, 0.0f, 4.0f, "%.1f")) {
        if (!isVowelModulated) { *vowelShapeParam = v; if (onModificationEnded) onModificationEnded(); }
    }
    if (!isVowelModulated) adjustParamOnWheel(apvts.getParameter("vowelShape"), "vowelShape", v);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isVowelModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    // Formant Shift
    bool isFormantModulated = isParamModulated("formantShift");
    float s = formantShiftParam->load();
    if (isFormantModulated) {
        s = getLiveParamValueFor("formantShift", "formantShift_live", s);
        ImGui::BeginDisabled();
    }
    
    if (ImGui::SliderFloat("Formant", &s, -1.0f, 1.0f, "%.2f")) {
        if (!isFormantModulated) { *formantShiftParam = s; if (onModificationEnded) onModificationEnded(); }
    }
    if (!isFormantModulated) adjustParamOnWheel(apvts.getParameter("formantShift"), "formantShift", s);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isFormantModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    // Instability
    bool isInstabilityModulated = isParamModulated("instability");
    float i = instabilityParam->load();
    if (isInstabilityModulated) {
        i = getLiveParamValueFor("instability", "instability_live", i);
        ImGui::BeginDisabled();
    }
    
    if (ImGui::SliderFloat("Instab", &i, 0.0f, 1.0f, "%.2f")) {
        if (!isInstabilityModulated) { *instabilityParam = i; if (onModificationEnded) onModificationEnded(); }
    }
    if (!isInstabilityModulated) adjustParamOnWheel(apvts.getParameter("instability"), "instability", i);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isInstabilityModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    // Gain
    bool isGainModulated = isParamModulated("formantGain");
    float g = outputGainParam->load();
    if (isGainModulated) {
        g = getLiveParamValueFor("formantGain", "formantGain_live", g);
        ImGui::BeginDisabled();
    }
    
    if (ImGui::SliderFloat("Gain", &g, -24.0f, 24.0f, "%.1f dB")) {
        if (!isGainModulated) { *outputGainParam = g; if (onModificationEnded) onModificationEnded(); }
    }
    if (!isGainModulated) adjustParamOnWheel(apvts.getParameter("formantGain"), "formantGain", g);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isGainModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }
    
    ImGui::PopItemWidth();
}

void VocalTractFilterModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("Audio In", 0);
    
    // Modulation input pins
    int busIdx, chanInBus;
    if (getParamRouting("vowelShape", busIdx, chanInBus))
        helpers.drawAudioInputPin("Vowel Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("formantShift", busIdx, chanInBus))
        helpers.drawAudioInputPin("Formant Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("instability", busIdx, chanInBus))
        helpers.drawAudioInputPin("Instability Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("formantGain", busIdx, chanInBus))
        helpers.drawAudioInputPin("Gain Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    
    helpers.drawAudioOutputPin("Audio Out", 0);
}
#endif

bool VocalTractFilterModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outChannelIndexInBus = 0;
    if (paramId == "vowelShape") { outBusIndex = 1; return true; }
    if (paramId == "formantShift") { outBusIndex = 2; return true; }
    if (paramId == "instability") { outBusIndex = 3; return true; }
    if (paramId == "formantGain") { outBusIndex = 4; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\VocalTractFilterModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"
#include <juce_dsp/juce_dsp.h>

// Simple descriptor for one formant band
struct FormantData { float frequency; float gain; float q; };

class VocalTractFilterModuleProcessor : public ModuleProcessor
{
public:
    VocalTractFilterModuleProcessor();
    ~VocalTractFilterModuleProcessor() override = default;

    const juce::String getName() const override { return "vocal tract filter"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Audio In";
            case 1: return "Vowel Mod";
            case 2: return "Formant Mod";
            case 3: return "Instability Mod";
            case 4: return "Gain Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Audio Out";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }

private:
    // Internal helpers
    void updateCoefficients(float vowelShape, float formantShift, float instability);
    void ensureWorkBuffers(int numChannels, int numSamples);

    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();

    // State
    juce::AudioProcessorValueTreeState apvts;
    std::atomic<float>* vowelShapeParam { nullptr };
    std::atomic<float>* formantShiftParam { nullptr };
    std::atomic<float>* instabilityParam { nullptr };
    std::atomic<float>* outputGainParam { nullptr }; // dB

    // Formant tables
    static const FormantData VOWEL_A[4];
    static const FormantData VOWEL_E[4];
    static const FormantData VOWEL_I[4];
    static const FormantData VOWEL_O[4];
    static const FormantData VOWEL_U[4];

    // DSP - Use simple IIR filters directly for mono processing
    using IIRFilter = juce::dsp::IIR::Filter<float>;
    struct Bands { IIRFilter b0, b1, b2, b3; } bands;
    std::array<float, 4> bandGains { 1.0f, 0.5f, 0.2f, 0.15f };
    juce::dsp::Oscillator<float> wowOscillator, flutterOscillator;
    juce::dsp::ProcessSpec dspSpec { 0.0, 0, 0 };

    // Preallocated working buffers to avoid RT allocations
    juce::AudioBuffer<float> workBuffer;
    juce::AudioBuffer<float> sumBuffer;
    juce::AudioBuffer<float> tmpBuffer;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(VocalTractFilterModuleProcessor);
};


================================================================================
FILE: juce\Source\audio\modules\VstHostModuleProcessor.cpp
================================================================================


#include "VstHostModuleProcessor.h"
#include <juce_gui_basics/juce_gui_basics.h>

// Helper function to create correct bus properties from the plugin's layout
juce::AudioProcessor::BusesProperties VstHostModuleProcessor::createBusesPropertiesForPlugin(juce::AudioPluginInstance& plugin)
{
    BusesProperties properties;

    // Add all input buses
    for (int i = 0; i < plugin.getBusCount(true); ++i)
    {
        if (auto* bus = plugin.getBus(true, i))
        {
            properties.addBus(true, bus->getName(), bus->getDefaultLayout(), bus->isEnabledByDefault());
            juce::Logger::writeToLog("[VstHost] Input bus " + juce::String(i) + ": " + 
                                     bus->getName() + " (" + 
                                     juce::String(bus->getDefaultLayout().size()) + " channels)");
        }
    }

    // Add all output buses
    for (int i = 0; i < plugin.getBusCount(false); ++i)
    {
        if (auto* bus = plugin.getBus(false, i))
        {
            properties.addBus(false, bus->getName(), bus->getDefaultLayout(), bus->isEnabledByDefault());
            juce::Logger::writeToLog("[VstHost] Output bus " + juce::String(i) + ": " + 
                                     bus->getName() + " (" + 
                                     juce::String(bus->getDefaultLayout().size()) + " channels)");
        }
    }

    return properties;
}

VstHostModuleProcessor::VstHostModuleProcessor(std::unique_ptr<juce::AudioPluginInstance> plugin, const juce::PluginDescription& desc)
    : ModuleProcessor(createBusesPropertiesForPlugin(*plugin)),
      hostedPlugin(std::move(plugin)),
      pluginDescription(desc),
      dummyApvts(*this, nullptr, "DummyParams", {})
{
    jassert(hostedPlugin != nullptr);
    
    juce::Logger::writeToLog("[VstHost] Created wrapper for: " + getName() + 
                             " with " + juce::String(getTotalNumInputChannels()) + " inputs, " +
                             juce::String(getTotalNumOutputChannels()) + " outputs");
}

VstHostModuleProcessor::~VstHostModuleProcessor()
{
    juce::Logger::writeToLog("[VstHost] Destroying wrapper for: " + getName());
}

void VstHostModuleProcessor::prepareToPlay(double sampleRate, int samplesPerBlock)
{
    if (hostedPlugin != nullptr)
    {
        try
        {
            hostedPlugin->prepareToPlay(sampleRate, samplesPerBlock);
            juce::Logger::writeToLog("[VstHost] " + getName() + " prepared: " +
                                     juce::String(sampleRate) + " Hz, " +
                                     juce::String(samplesPerBlock) + " samples");
        }
        catch (const std::exception& e)
        {
            juce::Logger::writeToLog("[VstHost] Exception during prepareToPlay for " + getName() + ": " + e.what());
        }
        catch (...)
        {
            juce::Logger::writeToLog("[VstHost] Unknown exception during prepareToPlay for " + getName());
        }
    }
}

void VstHostModuleProcessor::releaseResources()
{
    if (hostedPlugin != nullptr)
    {
        try
        {
            hostedPlugin->releaseResources();
        }
        catch (const std::exception& e)
        {
            juce::Logger::writeToLog("[VstHost] Exception during releaseResources for " + getName() + ": " + e.what());
        }
        catch (...)
        {
            juce::Logger::writeToLog("[VstHost] Unknown exception during releaseResources for " + getName());
        }
    }
}

void VstHostModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    if (hostedPlugin != nullptr)
    {
        try
        {
            // Add error handling around VST plugin processing to prevent crashes
            hostedPlugin->processBlock(buffer, midi);
        }
        catch (const std::exception& e)
        {
            juce::Logger::writeToLog("[VstHost] Exception in plugin " + getName() + ": " + e.what());
            // Clear the buffer to prevent noise/feedback if the plugin crashes
            buffer.clear();
        }
        catch (...)
        {
            juce::Logger::writeToLog("[VstHost] Unknown exception in plugin " + getName());
            // Clear the buffer to prevent noise/feedback if the plugin crashes
            buffer.clear();
        }
    }
}

const juce::String VstHostModuleProcessor::getName() const
{
    return hostedPlugin != nullptr ? hostedPlugin->getName() : "VST Host";
}

juce::AudioProcessorEditor* VstHostModuleProcessor::createEditor()
{
    return hostedPlugin != nullptr ? hostedPlugin->createEditor() : nullptr;
}

bool VstHostModuleProcessor::hasEditor() const
{
    return hostedPlugin != nullptr ? hostedPlugin->hasEditor() : false;
}

// State management is crucial for saving presets
juce::ValueTree VstHostModuleProcessor::getExtraStateTree() const
{
    // This tree will be saved inside the <extra> block in your preset
    juce::ValueTree state("VstHostState");

    if (hostedPlugin == nullptr)
        return state;

    // 1. Store the unique plugin identifier so we know what to load
    state.setProperty("fileOrIdentifier", pluginDescription.fileOrIdentifier, nullptr);
    state.setProperty("name", pluginDescription.name, nullptr);
    state.setProperty("manufacturerName", pluginDescription.manufacturerName, nullptr);
    state.setProperty("version", pluginDescription.version, nullptr);
    state.setProperty("pluginFormatName", pluginDescription.pluginFormatName, nullptr);

    // 2. Get the plugin's internal state as binary data
    juce::MemoryBlock pluginState;
    try
    {
        hostedPlugin->getStateInformation(pluginState);

        // 3. Store the binary data as a Base64 string in our ValueTree
        if (pluginState.getSize() > 0)
        {
            state.setProperty("pluginState", pluginState.toBase64Encoding(), nullptr);
            juce::Logger::writeToLog("[VstHost] Saved state for: " + getName() + " (" + juce::String(pluginState.getSize()) + " bytes)");
        }
    }
    catch (const std::exception& e)
    {
        juce::Logger::writeToLog("[VstHost] Exception getting state for " + getName() + ": " + e.what());
    }
    catch (...)
    {
        juce::Logger::writeToLog("[VstHost] Unknown exception getting state for " + getName());
    }

    return state;
}

void VstHostModuleProcessor::setExtraStateTree(const juce::ValueTree& vt)
{
    if (hostedPlugin == nullptr)
        return;

    if (vt.hasType("VstHostState"))
    {
        // When loading, get the Base64 string from the ValueTree
        juce::String stateString = vt.getProperty("pluginState", "").toString();

        if (stateString.isNotEmpty())
        {
            // Decode it back into binary data
            juce::MemoryBlock pluginState;
            if (pluginState.fromBase64Encoding(stateString))
            {
                // Restore the plugin's state
                try
                {
                    hostedPlugin->setStateInformation(pluginState.getData(), (int)pluginState.getSize());
                    juce::Logger::writeToLog("[VstHost] Restored state for: " + getName() + " (" + juce::String(pluginState.getSize()) + " bytes)");
                }
                catch (const std::exception& e)
                {
                    juce::Logger::writeToLog("[VstHost] Exception setting state for " + getName() + ": " + e.what());
                }
                catch (...)
                {
                    juce::Logger::writeToLog("[VstHost] Unknown exception setting state for " + getName());
                }
            }
        }
    }
}

// UI and Pin Drawing
juce::String VstHostModuleProcessor::getAudioInputLabel(int channel) const
{
    if (hostedPlugin == nullptr)
        return "In " + juce::String(channel + 1);
    
    // Iterate through all input buses to find which one contains this channel
    int channelOffset = 0;
    try
    {
        for (int busIndex = 0; busIndex < hostedPlugin->getBusCount(true); ++busIndex)
        {
            if (auto* bus = hostedPlugin->getBus(true, busIndex))
            {
                const int busChannels = bus->getNumberOfChannels();
                if (channel < channelOffset + busChannels)
                {
                    // This channel belongs to this bus
                    const int channelInBus = channel - channelOffset;
                    return bus->getName() + " " + juce::String(channelInBus + 1);
                }
                channelOffset += busChannels;
            }
        }
    }
    catch (const std::exception& e)
    {
        juce::Logger::writeToLog("[VstHost] Exception in getAudioInputLabel for " + getName() + ": " + e.what());
    }
    catch (...)
    {
        juce::Logger::writeToLog("[VstHost] Unknown exception in getAudioInputLabel for " + getName());
    }
    return "In " + juce::String(channel + 1);
}

juce::String VstHostModuleProcessor::getAudioOutputLabel(int channel) const
{
    if (hostedPlugin == nullptr)
        return "Out " + juce::String(channel + 1);
    
    // Iterate through all output buses to find which one contains this channel
    int channelOffset = 0;
    try
    {
        for (int busIndex = 0; busIndex < hostedPlugin->getBusCount(false); ++busIndex)
        {
            if (auto* bus = hostedPlugin->getBus(false, busIndex))
            {
                const int busChannels = bus->getNumberOfChannels();
                if (channel < channelOffset + busChannels)
                {
                    // This channel belongs to this bus
                    const int channelInBus = channel - channelOffset;
                    return bus->getName() + " " + juce::String(channelInBus + 1);
                }
                channelOffset += busChannels;
            }
        }
    }
    catch (const std::exception& e)
    {
        juce::Logger::writeToLog("[VstHost] Exception in getAudioOutputLabel for " + getName() + ": " + e.what());
    }
    catch (...)
    {
        juce::Logger::writeToLog("[VstHost] Unknown exception in getAudioOutputLabel for " + getName());
    }
    return "Out " + juce::String(channel + 1);
}

#if defined(PRESET_CREATOR_UI)
// Helper class for self-deleting plugin window
class PluginEditorWindow : public juce::DocumentWindow
{
public:
    PluginEditorWindow(const juce::String& name, juce::Component* content)
        : DocumentWindow(name, juce::Colours::darkgrey, juce::DocumentWindow::closeButton)
    {
        setContentOwned(content, true);
        setResizable(true, true);
        setUsingNativeTitleBar(true);
        centreWithSize(content->getWidth(), content->getHeight());
        setVisible(true);
    }

    void closeButtonPressed() override
    {
        // This will be called when the user clicks the 'x' button.
        // The window will delete itself automatically.
        delete this;
    }
};
#endif

void VstHostModuleProcessor::drawParametersInNode(float itemWidth, 
                                                   const std::function<bool(const juce::String&)>&, 
                                                   const std::function<void()>&)
{
#if defined(PRESET_CREATOR_UI)
    if (ImGui::Button("Open Editor", ImVec2(itemWidth, 0)))
    {
        try
        {
            if (auto* editor = createEditor())
            {
                // --- THIS IS THE FIX ---
                // Don't create the window directly. Post the task to the message queue.
                // Capture the name as a string to avoid lifetime issues
                auto pluginName = getName();
                juce::MessageManager::callAsync([pluginName, editor] {
                    // This code will run safely after the current ImGui frame is finished.
                    try
                    {
                        new PluginEditorWindow(pluginName, editor);
                    }
                    catch (const std::exception& e)
                    {
                        juce::Logger::writeToLog("[VstHost] Exception creating editor window for " + pluginName + ": " + e.what());
                    }
                    catch (...)
                    {
                        juce::Logger::writeToLog("[VstHost] Unknown exception creating editor window for " + pluginName);
                    }
                });
                // --- END OF FIX ---

                juce::Logger::writeToLog("[VstHost] Opened editor for: " + getName());
            }
            else
            {
                juce::Logger::writeToLog("[VstHost] Plugin has no editor: " + getName());
            }
        }
        catch (const std::exception& e)
        {
            juce::Logger::writeToLog("[VstHost] Exception creating editor for " + getName() + ": " + e.what());
        }
        catch (...)
        {
            juce::Logger::writeToLog("[VstHost] Unknown exception creating editor for " + getName());
        }
    }
    
    // Display plugin info
    ImGui::TextDisabled("Manufacturer: %s", pluginDescription.manufacturerName.toRawUTF8());
    ImGui::TextDisabled("Version: %s", pluginDescription.version.toRawUTF8());
#else
    juce::ignoreUnused(itemWidth);
#endif
}

void VstHostModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    if (hostedPlugin == nullptr)
        return;

    try
    {
        // Draw input pins for all input channels using dynamic labels
        const int numInputs = hostedPlugin->getTotalNumInputChannels();
        for (int i = 0; i < numInputs; ++i)
        {
            try
            {
                helpers.drawAudioInputPin(getAudioInputLabel(i).toRawUTF8(), i);
            }
            catch (const std::exception& e)
            {
                juce::Logger::writeToLog("[VstHost] Exception drawing input pin " + juce::String(i) + " for " + getName() + ": " + e.what());
                helpers.drawAudioInputPin(("In " + juce::String(i + 1)).toRawUTF8(), i);
            }
        }

        // Draw output pins for all output channels using dynamic labels
        const int numOutputs = hostedPlugin->getTotalNumOutputChannels();
        for (int i = 0; i < numOutputs; ++i)
        {
            try
            {
                helpers.drawAudioOutputPin(getAudioOutputLabel(i).toRawUTF8(), i);
            }
            catch (const std::exception& e)
            {
                juce::Logger::writeToLog("[VstHost] Exception drawing output pin " + juce::String(i) + " for " + getName() + ": " + e.what());
                helpers.drawAudioOutputPin(("Out " + juce::String(i + 1)).toRawUTF8(), i);
            }
        }
    }
    catch (const std::exception& e)
    {
        juce::Logger::writeToLog("[VstHost] Exception in drawIoPins for " + getName() + ": " + e.what());
    }
    catch (...)
    {
        juce::Logger::writeToLog("[VstHost] Unknown exception in drawIoPins for " + getName());
    }
}



================================================================================
FILE: juce\Source\audio\modules\VstHostModuleProcessor.h
================================================================================


#pragma once
#include "ModuleProcessor.h"
#include <juce_audio_processors/juce_audio_processors.h>

/**
    VstHostModuleProcessor wraps a VST plugin instance to integrate it seamlessly
    into the modular synthesizer graph. It acts as a bridge, forwarding audio
    processing calls to the hosted plugin while managing its state and UI.
*/
class VstHostModuleProcessor : public ModuleProcessor
{
public:
    VstHostModuleProcessor(std::unique_ptr<juce::AudioPluginInstance> plugin, const juce::PluginDescription& desc);
    ~VstHostModuleProcessor() override;

    // AudioProcessor Overrides
    void prepareToPlay(double sampleRate, int samplesPerBlock) override;
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;
    void releaseResources() override;

    const juce::String getName() const override;
    juce::AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override;
    
    // ModuleProcessor Overrides
    juce::AudioProcessorValueTreeState& getAPVTS() override { return dummyApvts; }
    juce::String getAudioInputLabel(int channel) const override;
    juce::String getAudioOutputLabel(int channel) const override;

    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String&)>&, const std::function<void()>&) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
    
    // State Management through ExtraStateTree
    juce::ValueTree getExtraStateTree() const override;
    void setExtraStateTree(const juce::ValueTree& vt) override;
    
    // Access to the plugin description for saving/loading
    const juce::PluginDescription& getPluginDescription() const { return pluginDescription; }
    
    // Access to the hosted plugin instance
    juce::AudioPluginInstance* getHostedPlugin() const { return hostedPlugin.get(); }

private:
    // Helper function to create correct bus properties from plugin
    static BusesProperties createBusesPropertiesForPlugin(juce::AudioPluginInstance& plugin);
    
    std::unique_ptr<juce::AudioPluginInstance> hostedPlugin;
    juce::PluginDescription pluginDescription;

    // A dummy APVTS to satisfy the base class requirements
    // VST parameters are managed by the plugin itself, not through APVTS
    juce::AudioProcessorValueTreeState dummyApvts;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR(VstHostModuleProcessor)
};



================================================================================
FILE: juce\Source\audio\modules\WaveshaperModuleProcessor.cpp
================================================================================


#include "WaveshaperModuleProcessor.h"
#include <cmath> // For std::tanh

juce::AudioProcessorValueTreeState::ParameterLayout WaveshaperModuleProcessor::createParameterLayout()
{
    std::vector<std::unique_ptr<juce::RangedAudioParameter>> p;
    p.push_back(std::make_unique<juce::AudioParameterFloat>("drive", "Drive", 
        juce::NormalisableRange<float>(1.0f, 100.0f, 0.01f, 0.3f), 1.0f));
    p.push_back(std::make_unique<juce::AudioParameterChoice>("type", "Type",
        juce::StringArray{ "Soft Clip (tanh)", "Hard Clip", "Foldback" }, 0));
    return { p.begin(), p.end() };
}

WaveshaperModuleProcessor::WaveshaperModuleProcessor()
    : ModuleProcessor(BusesProperties()
                        .withInput("Inputs", juce::AudioChannelSet::discreteChannels(4), true) // 0-1: Audio In, 2: Drive Mod, 3: Type Mod
                        .withOutput("Out", juce::AudioChannelSet::stereo(), true)),
      apvts(*this, nullptr, "WaveshaperParams", createParameterLayout())
{
    driveParam = dynamic_cast<juce::AudioParameterFloat*>(apvts.getParameter("drive"));
    typeParam = dynamic_cast<juce::AudioParameterChoice*>(apvts.getParameter("type"));
    
    // Initialize output value tracking for tooltips
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out L
    lastOutputValues.push_back(std::make_unique<std::atomic<float>>(0.0f)); // For Out R
}

void WaveshaperModuleProcessor::processBlock(juce::AudioBuffer<float>& buffer, juce::MidiBuffer& midi)
{
    juce::ignoreUnused(midi);
    
    // Get pointers to modulation CV inputs from unified input bus
    const bool isDriveMod = isParamInputConnected("drive");
    const bool isTypeMod = isParamInputConnected("type");
    auto inBus = getBusBuffer(buffer, true, 0);
    const float* driveCV = isDriveMod && inBus.getNumChannels() > 2 ? inBus.getReadPointer(2) : nullptr;
    const float* typeCV = isTypeMod && inBus.getNumChannels() > 3 ? inBus.getReadPointer(3) : nullptr;

    // Get base parameter values ONCE
    const float baseDrive = driveParam != nullptr ? driveParam->get() : 1.0f;
    const int baseType = typeParam != nullptr ? typeParam->getIndex() : 0;
    
    for (int ch = 0; ch < buffer.getNumChannels(); ++ch)
    {
        float* data = buffer.getWritePointer(ch);
        for (int i = 0; i < buffer.getNumSamples(); ++i)
        {
            // PER-SAMPLE FIX: Calculate effective drive FOR THIS SAMPLE
            float drive = baseDrive;
            if (isDriveMod && driveCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, driveCV[i]);
                // ADDITIVE MODULATION FIX: Add CV offset to base drive value
                const float octaveRange = 3.0f; // CV can modulate drive by +/- 3 octaves
                const float octaveOffset = (cv - 0.5f) * octaveRange; // Center around 0, range [-1.5, +1.5] octaves
                drive = baseDrive * std::pow(2.0f, octaveOffset);
                drive = juce::jlimit(1.0f, 100.0f, drive);
            }
            
            // PER-SAMPLE FIX: Calculate effective type FOR THIS SAMPLE
            int type = baseType;
            if (isTypeMod && typeCV != nullptr) {
                const float cv = juce::jlimit(0.0f, 1.0f, typeCV[i]);
                // Map CV [0,1] to type [0,2] with wrapping
                type = static_cast<int>(cv * 3.0f) % 3;
            }
            
            float s = data[i] * drive;
            
            switch (type)
            {
                case 0: // Soft Clip (tanh)
                    data[i] = std::tanh(s);
                    break;
                case 1: // Hard Clip
                    data[i] = juce::jlimit(-1.0f, 1.0f, s);
                    break;
                case 2: // Foldback
                    data[i] = std::abs(std::abs(std::fmod(s - 1.0f, 4.0f)) - 2.0f) - 1.0f;
                    break;
            }
        }
    }
    
    // Store live modulated values for UI display (use last sample's values)
    float finalDrive = baseDrive;
    if (isDriveMod && driveCV != nullptr) {
        const float cv = juce::jlimit(0.0f, 1.0f, driveCV[buffer.getNumSamples() - 1]);
        const float octaveRange = 3.0f;
        const float octaveOffset = (cv - 0.5f) * octaveRange;
        finalDrive = baseDrive * std::pow(2.0f, octaveOffset);
        finalDrive = juce::jlimit(1.0f, 100.0f, finalDrive);
    }
    setLiveParamValue("drive_live", finalDrive);
    
    int finalType = baseType;
    if (isTypeMod && typeCV != nullptr) {
        const float cv = juce::jlimit(0.0f, 1.0f, typeCV[buffer.getNumSamples() - 1]);
        finalType = static_cast<int>(cv * 3.0f) % 3;
    }
    setLiveParamValue("type_live", static_cast<float>(finalType));

    // Update output values for tooltips
    if (lastOutputValues.size() >= 2)
    {
        if (lastOutputValues[0]) lastOutputValues[0]->store(buffer.getSample(0, buffer.getNumSamples() - 1));
        if (lastOutputValues[1]) lastOutputValues[1]->store(buffer.getSample(1, buffer.getNumSamples() - 1));
    }
}

#if defined(PRESET_CREATOR_UI)
void WaveshaperModuleProcessor::drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded)
{
    auto& ap = getAPVTS();
    float drive = 1.0f; if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("drive"))) drive = *p;
    int type = 0; if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("type"))) type = p->getIndex();

    ImGui::PushItemWidth(itemWidth);

    // Drive
    bool isDriveModulated = isParamModulated("drive");
    if (isDriveModulated) {
        drive = getLiveParamValueFor("drive", "drive_live", drive);
        ImGui::BeginDisabled();
    }
    if (ImGui::SliderFloat("Drive", &drive, 1.0f, 100.0f, "%.2f", ImGuiSliderFlags_Logarithmic)) if (!isDriveModulated) if (auto* p = dynamic_cast<juce::AudioParameterFloat*>(ap.getParameter("drive"))) *p = drive;
    if (!isDriveModulated) adjustParamOnWheel(ap.getParameter("drive"), "drive", drive);
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isDriveModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    // Type
    bool isTypeModulated = isParamModulated("type");
    if (isTypeModulated) {
        type = static_cast<int>(getLiveParamValueFor("type", "type_live", static_cast<float>(type)));
        ImGui::BeginDisabled();
    }
    if (ImGui::Combo("Type", &type, "Soft Clip\0Hard Clip\0Foldback\0\0")) if (!isTypeModulated) if (auto* p = dynamic_cast<juce::AudioParameterChoice*>(ap.getParameter("type"))) *p = type;
    if (ImGui::IsItemDeactivatedAfterEdit()) { onModificationEnded(); }
    if (isTypeModulated) { ImGui::EndDisabled(); ImGui::SameLine(); ImGui::TextUnformatted("(mod)"); }

    ImGui::PopItemWidth();
}

void WaveshaperModuleProcessor::drawIoPins(const NodePinHelpers& helpers)
{
    helpers.drawAudioInputPin("In L", 0);
    helpers.drawAudioInputPin("In R", 1);

    // CORRECTED MODULATION PINS - Use absolute channel index
    int busIdx, chanInBus;
    if (getParamRouting("drive", busIdx, chanInBus))
        helpers.drawAudioInputPin("Drive Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));
    if (getParamRouting("type", busIdx, chanInBus))
        helpers.drawAudioInputPin("Type Mod", getChannelIndexInProcessBlockBuffer(true, busIdx, chanInBus));

    helpers.drawAudioOutputPin("Out L", 0);
    helpers.drawAudioOutputPin("Out R", 1);
}
#endif

// Parameter bus contract implementation
bool WaveshaperModuleProcessor::getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const
{
    outBusIndex = 0; // All modulation is on the single input bus
    
    if (paramId == "drive") { outChannelIndexInBus = 2; return true; }
    if (paramId == "type") { outChannelIndexInBus = 3; return true; }
    return false;
}


================================================================================
FILE: juce\Source\audio\modules\WaveshaperModuleProcessor.h
================================================================================


#pragma once

#include "ModuleProcessor.h"

class WaveshaperModuleProcessor : public ModuleProcessor
{
public:
    WaveshaperModuleProcessor();
    ~WaveshaperModuleProcessor() override = default;

    const juce::String getName() const override { return "waveshaper"; }

    void prepareToPlay(double sampleRate, int samplesPerBlock) override {}
    void releaseResources() override {}
    void processBlock(juce::AudioBuffer<float>&, juce::MidiBuffer&) override;

    juce::AudioProcessorValueTreeState& getAPVTS() override { return apvts; }

#if defined(PRESET_CREATOR_UI)
    void drawParametersInNode(float itemWidth, const std::function<bool(const juce::String& paramId)>& isParamModulated, const std::function<void()>& onModificationEnded) override;
    void drawIoPins(const NodePinHelpers& helpers) override;
#endif

    juce::String getAudioInputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "In L";
            case 1: return "In R";
            case 2: return "Drive Mod";
            default: return juce::String("In ") + juce::String(channel + 1);
        }
    }

    juce::String getAudioOutputLabel(int channel) const override
    {
        switch (channel)
        {
            case 0: return "Out L";
            case 1: return "Out R";
            default: return juce::String("Out ") + juce::String(channel + 1);
        }
    }
    
    // Parameter bus contract implementation
    bool getParamRouting(const juce::String& paramId, int& outBusIndex, int& outChannelIndexInBus) const override;

private:
    static juce::AudioProcessorValueTreeState::ParameterLayout createParameterLayout();
    
    juce::AudioProcessorValueTreeState apvts;
    
    juce::AudioParameterFloat* driveParam { nullptr };
    juce::AudioParameterChoice* typeParam { nullptr };
};


================================================================================
FILE: imnode_examples\color_node_editor.cpp
================================================================================


#include "node_editor.h"
#include "graph.h"

#include <imnodes.h>
#include <imgui.h>

#include <SDL2/SDL_timer.h>
#include <algorithm>
#include <cassert>
#include <chrono>
#include <cmath>
#include <vector>

namespace example
{
namespace
{
enum class NodeType
{
    add,
    multiply,
    output,
    sine,
    time,
    value
};

struct Node
{
    NodeType type;
    float    value;

    explicit Node(const NodeType t) : type(t), value(0.f) {}

    Node(const NodeType t, const float v) : type(t), value(v) {}
};

template<class T>
T clamp(T x, T a, T b)
{
    return std::min(b, std::max(x, a));
}

static float current_time_seconds = 0.f;
static bool  emulate_three_button_mouse = false;

ImU32 evaluate(const Graph<Node>& graph, const int root_node)
{
    std::stack<int> postorder;
    dfs_traverse(
        graph, root_node, [&postorder](const int node_id) -> void { postorder.push(node_id); });

    std::stack<float> value_stack;
    while (!postorder.empty())
    {
        const int id = postorder.top();
        postorder.pop();
        const Node node = graph.node(id);

        switch (node.type)
        {
        case NodeType::add:
        {
            const float rhs = value_stack.top();
            value_stack.pop();
            const float lhs = value_stack.top();
            value_stack.pop();
            value_stack.push(lhs + rhs);
        }
        break;
        case NodeType::multiply:
        {
            const float rhs = value_stack.top();
            value_stack.pop();
            const float lhs = value_stack.top();
            value_stack.pop();
            value_stack.push(rhs * lhs);
        }
        break;
        case NodeType::sine:
        {
            const float x = value_stack.top();
            value_stack.pop();
            const float res = std::abs(std::sin(x));
            value_stack.push(res);
        }
        break;
        case NodeType::time:
        {
            value_stack.push(current_time_seconds);
        }
        break;
        case NodeType::value:
        {
            // If the edge does not have an edge connecting to another node, then just use the value
            // at this node. It means the node's input pin has not been connected to anything and
            // the value comes from the node's UI.
            if (graph.num_edges_from_node(id) == 0ull)
            {
                value_stack.push(node.value);
            }
        }
        break;
        default:
            break;
        }
    }

    // The final output node isn't evaluated in the loop -- instead we just pop
    // the three values which should be in the stack.
    assert(value_stack.size() == 3ull);
    const int b = static_cast<int>(255.f * clamp(value_stack.top(), 0.f, 1.f) + 0.5f);
    value_stack.pop();
    const int g = static_cast<int>(255.f * clamp(value_stack.top(), 0.f, 1.f) + 0.5f);
    value_stack.pop();
    const int r = static_cast<int>(255.f * clamp(value_stack.top(), 0.f, 1.f) + 0.5f);
    value_stack.pop();

    return IM_COL32(r, g, b, 255);
}

class ColorNodeEditor
{
public:
    ColorNodeEditor()
        : graph_(), nodes_(), root_node_id_(-1),
          minimap_location_(ImNodesMiniMapLocation_BottomRight)
    {
    }

    void show()
    {
        // Update timer context
        current_time_seconds = 0.001f * SDL_GetTicks();

        auto flags = ImGuiWindowFlags_MenuBar;

        // The node editor window
        ImGui::Begin("color node editor", NULL, flags);

        if (ImGui::BeginMenuBar())
        {
            if (ImGui::BeginMenu("Mini-map"))
            {
                const char* names[] = {
                    "Top Left",
                    "Top Right",
                    "Bottom Left",
                    "Bottom Right",
                };
                int locations[] = {
                    ImNodesMiniMapLocation_TopLeft,
                    ImNodesMiniMapLocation_TopRight,
                    ImNodesMiniMapLocation_BottomLeft,
                    ImNodesMiniMapLocation_BottomRight,
                };

                for (int i = 0; i < 4; i++)
                {
                    bool selected = minimap_location_ == locations[i];
                    if (ImGui::MenuItem(names[i], NULL, &selected))
                        minimap_location_ = locations[i];
                }
                ImGui::EndMenu();
            }

            if (ImGui::BeginMenu("Style"))
            {
                if (ImGui::MenuItem("Classic"))
                {
                    ImGui::StyleColorsClassic();
                    ImNodes::StyleColorsClassic();
                }
                if (ImGui::MenuItem("Dark"))
                {
                    ImGui::StyleColorsDark();
                    ImNodes::StyleColorsDark();
                }
                if (ImGui::MenuItem("Light"))
                {
                    ImGui::StyleColorsLight();
                    ImNodes::StyleColorsLight();
                }
                ImGui::EndMenu();
            }

            ImGui::EndMenuBar();
        }

        ImGui::TextUnformatted("Edit the color of the output color window using nodes.");
        ImGui::Columns(2);
        ImGui::TextUnformatted("A -- add node");
        ImGui::TextUnformatted("X -- delete selected node or link");
        ImGui::NextColumn();
        if (ImGui::Checkbox("emulate_three_button_mouse", &emulate_three_button_mouse))
        {
            ImNodes::GetIO().EmulateThreeButtonMouse.Modifier =
                emulate_three_button_mouse ? &ImGui::GetIO().KeyAlt : NULL;
        }
        ImGui::Columns(1);

        ImNodes::BeginNodeEditor();

        // Handle new nodes
        // These are driven by the user, so we place this code before rendering the nodes
        {
            const bool open_popup = ImGui::IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows) &&
                                    ImNodes::IsEditorHovered() && ImGui::IsKeyReleased(ImGuiKey_A);

            ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(8.f, 8.f));
            if (!ImGui::IsAnyItemHovered() && open_popup)
            {
                ImGui::OpenPopup("add node");
            }

            if (ImGui::BeginPopup("add node"))
            {
                const ImVec2 click_pos = ImGui::GetMousePosOnOpeningCurrentPopup();

                if (ImGui::MenuItem("add"))
                {
                    const Node value(NodeType::value, 0.f);
                    const Node op(NodeType::add);

                    UiNode ui_node;
                    ui_node.type = UiNodeType::add;
                    ui_node.ui.add.lhs = graph_.insert_node(value);
                    ui_node.ui.add.rhs = graph_.insert_node(value);
                    ui_node.id = graph_.insert_node(op);

                    graph_.insert_edge(ui_node.id, ui_node.ui.add.lhs);
                    graph_.insert_edge(ui_node.id, ui_node.ui.add.rhs);

                    nodes_.push_back(ui_node);
                    ImNodes::SetNodeScreenSpacePos(ui_node.id, click_pos);
                }

                if (ImGui::MenuItem("multiply"))
                {
                    const Node value(NodeType::value, 0.f);
                    const Node op(NodeType::multiply);

                    UiNode ui_node;
                    ui_node.type = UiNodeType::multiply;
                    ui_node.ui.multiply.lhs = graph_.insert_node(value);
                    ui_node.ui.multiply.rhs = graph_.insert_node(value);
                    ui_node.id = graph_.insert_node(op);

                    graph_.insert_edge(ui_node.id, ui_node.ui.multiply.lhs);
                    graph_.insert_edge(ui_node.id, ui_node.ui.multiply.rhs);

                    nodes_.push_back(ui_node);
                    ImNodes::SetNodeScreenSpacePos(ui_node.id, click_pos);
                }

                if (ImGui::MenuItem("output") && root_node_id_ == -1)
                {
                    const Node value(NodeType::value, 0.f);
                    const Node out(NodeType::output);

                    UiNode ui_node;
                    ui_node.type = UiNodeType::output;
                    ui_node.ui.output.r = graph_.insert_node(value);
                    ui_node.ui.output.g = graph_.insert_node(value);
                    ui_node.ui.output.b = graph_.insert_node(value);
                    ui_node.id = graph_.insert_node(out);

                    graph_.insert_edge(ui_node.id, ui_node.ui.output.r);
                    graph_.insert_edge(ui_node.id, ui_node.ui.output.g);
                    graph_.insert_edge(ui_node.id, ui_node.ui.output.b);

                    nodes_.push_back(ui_node);
                    ImNodes::SetNodeScreenSpacePos(ui_node.id, click_pos);
                    root_node_id_ = ui_node.id;
                }

                if (ImGui::MenuItem("sine"))
                {
                    const Node value(NodeType::value, 0.f);
                    const Node op(NodeType::sine);

                    UiNode ui_node;
                    ui_node.type = UiNodeType::sine;
                    ui_node.ui.sine.input = graph_.insert_node(value);
                    ui_node.id = graph_.insert_node(op);

                    graph_.insert_edge(ui_node.id, ui_node.ui.sine.input);

                    nodes_.push_back(ui_node);
                    ImNodes::SetNodeScreenSpacePos(ui_node.id, click_pos);
                }

                if (ImGui::MenuItem("time"))
                {
                    UiNode ui_node;
                    ui_node.type = UiNodeType::time;
                    ui_node.id = graph_.insert_node(Node(NodeType::time));

                    nodes_.push_back(ui_node);
                    ImNodes::SetNodeScreenSpacePos(ui_node.id, click_pos);
                }

                ImGui::EndPopup();
            }
            ImGui::PopStyleVar();
        }

        for (const UiNode& node : nodes_)
        {
            switch (node.type)
            {
            case UiNodeType::add:
            {
                const float node_width = 100.f;
                ImNodes::BeginNode(node.id);

                ImNodes::BeginNodeTitleBar();
                ImGui::TextUnformatted("add");
                ImNodes::EndNodeTitleBar();
                {
                    ImNodes::BeginInputAttribute(node.ui.add.lhs);
                    const float label_width = ImGui::CalcTextSize("left").x;
                    ImGui::TextUnformatted("left");
                    if (graph_.num_edges_from_node(node.ui.add.lhs) == 0ull)
                    {
                        ImGui::SameLine();
                        ImGui::PushItemWidth(node_width - label_width);
                        ImGui::DragFloat("##hidelabel", &graph_.node(node.ui.add.lhs).value, 0.01f);
                        ImGui::PopItemWidth();
                    }
                    ImNodes::EndInputAttribute();
                }

                {
                    ImNodes::BeginInputAttribute(node.ui.add.rhs);
                    const float label_width = ImGui::CalcTextSize("right").x;
                    ImGui::TextUnformatted("right");
                    if (graph_.num_edges_from_node(node.ui.add.rhs) == 0ull)
                    {
                        ImGui::SameLine();
                        ImGui::PushItemWidth(node_width - label_width);
                        ImGui::DragFloat("##hidelabel", &graph_.node(node.ui.add.rhs).value, 0.01f);
                        ImGui::PopItemWidth();
                    }
                    ImNodes::EndInputAttribute();
                }

                ImGui::Spacing();

                {
                    ImNodes::BeginOutputAttribute(node.id);
                    const float label_width = ImGui::CalcTextSize("result").x;
                    ImGui::Indent(node_width - label_width);
                    ImGui::TextUnformatted("result");
                    ImNodes::EndOutputAttribute();
                }

                ImNodes::EndNode();
            }
            break;
            case UiNodeType::multiply:
            {
                const float node_width = 100.0f;
                ImNodes::BeginNode(node.id);

                ImNodes::BeginNodeTitleBar();
                ImGui::TextUnformatted("multiply");
                ImNodes::EndNodeTitleBar();

                {
                    ImNodes::BeginInputAttribute(node.ui.multiply.lhs);
                    const float label_width = ImGui::CalcTextSize("left").x;
                    ImGui::TextUnformatted("left");
                    if (graph_.num_edges_from_node(node.ui.multiply.lhs) == 0ull)
                    {
                        ImGui::SameLine();
                        ImGui::PushItemWidth(node_width - label_width);
                        ImGui::DragFloat(
                            "##hidelabel", &graph_.node(node.ui.multiply.lhs).value, 0.01f);
                        ImGui::PopItemWidth();
                    }
                    ImNodes::EndInputAttribute();
                }

                {
                    ImNodes::BeginInputAttribute(node.ui.multiply.rhs);
                    const float label_width = ImGui::CalcTextSize("right").x;
                    ImGui::TextUnformatted("right");
                    if (graph_.num_edges_from_node(node.ui.multiply.rhs) == 0ull)
                    {
                        ImGui::SameLine();
                        ImGui::PushItemWidth(node_width - label_width);
                        ImGui::DragFloat(
                            "##hidelabel", &graph_.node(node.ui.multiply.rhs).value, 0.01f);
                        ImGui::PopItemWidth();
                    }
                    ImNodes::EndInputAttribute();
                }

                ImGui::Spacing();

                {
                    ImNodes::BeginOutputAttribute(node.id);
                    const float label_width = ImGui::CalcTextSize("result").x;
                    ImGui::Indent(node_width - label_width);
                    ImGui::TextUnformatted("result");
                    ImNodes::EndOutputAttribute();
                }

                ImNodes::EndNode();
            }
            break;
            case UiNodeType::output:
            {
                const float node_width = 100.0f;
                ImNodes::PushColorStyle(ImNodesCol_TitleBar, IM_COL32(11, 109, 191, 255));
                ImNodes::PushColorStyle(ImNodesCol_TitleBarHovered, IM_COL32(45, 126, 194, 255));
                ImNodes::PushColorStyle(ImNodesCol_TitleBarSelected, IM_COL32(81, 148, 204, 255));
                ImNodes::BeginNode(node.id);

                ImNodes::BeginNodeTitleBar();
                ImGui::TextUnformatted("output");
                ImNodes::EndNodeTitleBar();

                ImGui::Dummy(ImVec2(node_width, 0.f));
                {
                    ImNodes::BeginInputAttribute(node.ui.output.r);
                    const float label_width = ImGui::CalcTextSize("r").x;
                    ImGui::TextUnformatted("r");
                    if (graph_.num_edges_from_node(node.ui.output.r) == 0ull)
                    {
                        ImGui::SameLine();
                        ImGui::PushItemWidth(node_width - label_width);
                        ImGui::DragFloat(
                            "##hidelabel", &graph_.node(node.ui.output.r).value, 0.01f, 0.f, 1.0f);
                        ImGui::PopItemWidth();
                    }
                    ImNodes::EndInputAttribute();
                }

                ImGui::Spacing();

                {
                    ImNodes::BeginInputAttribute(node.ui.output.g);
                    const float label_width = ImGui::CalcTextSize("g").x;
                    ImGui::TextUnformatted("g");
                    if (graph_.num_edges_from_node(node.ui.output.g) == 0ull)
                    {
                        ImGui::SameLine();
                        ImGui::PushItemWidth(node_width - label_width);
                        ImGui::DragFloat(
                            "##hidelabel", &graph_.node(node.ui.output.g).value, 0.01f, 0.f, 1.f);
                        ImGui::PopItemWidth();
                    }
                    ImNodes::EndInputAttribute();
                }

                ImGui::Spacing();

                {
                    ImNodes::BeginInputAttribute(node.ui.output.b);
                    const float label_width = ImGui::CalcTextSize("b").x;
                    ImGui::TextUnformatted("b");
                    if (graph_.num_edges_from_node(node.ui.output.b) == 0ull)
                    {
                        ImGui::SameLine();
                        ImGui::PushItemWidth(node_width - label_width);
                        ImGui::DragFloat(
                            "##hidelabel", &graph_.node(node.ui.output.b).value, 0.01f, 0.f, 1.0f);
                        ImGui::PopItemWidth();
                    }
                    ImNodes::EndInputAttribute();
                }
                ImNodes::EndNode();
                ImNodes::PopColorStyle();
                ImNodes::PopColorStyle();
                ImNodes::PopColorStyle();
            }
            break;
            case UiNodeType::sine:
            {
                const float node_width = 100.0f;
                ImNodes::BeginNode(node.id);

                ImNodes::BeginNodeTitleBar();
                ImGui::TextUnformatted("sine");
                ImNodes::EndNodeTitleBar();

                {
                    ImNodes::BeginInputAttribute(node.ui.sine.input);
                    const float label_width = ImGui::CalcTextSize("number").x;
                    ImGui::TextUnformatted("number");
                    if (graph_.num_edges_from_node(node.ui.sine.input) == 0ull)
                    {
                        ImGui::SameLine();
                        ImGui::PushItemWidth(node_width - label_width);
                        ImGui::DragFloat(
                            "##hidelabel",
                            &graph_.node(node.ui.sine.input).value,
                            0.01f,
                            0.f,
                            1.0f);
                        ImGui::PopItemWidth();
                    }
                    ImNodes::EndInputAttribute();
                }

                ImGui::Spacing();

                {
                    ImNodes::BeginOutputAttribute(node.id);
                    const float label_width = ImGui::CalcTextSize("output").x;
                    ImGui::Indent(node_width - label_width);
                    ImGui::TextUnformatted("output");
                    ImNodes::EndOutputAttribute();
                }

                ImNodes::EndNode();
            }
            break;
            case UiNodeType::time:
            {
                ImNodes::BeginNode(node.id);

                ImNodes::BeginNodeTitleBar();
                ImGui::TextUnformatted("time");
                ImNodes::EndNodeTitleBar();

                ImNodes::BeginOutputAttribute(node.id);
                ImGui::Text("output");
                ImNodes::EndOutputAttribute();

                ImNodes::EndNode();
            }
            break;
            }
        }

        for (const auto& edge : graph_.edges())
        {
            // If edge doesn't start at value, then it's an internal edge, i.e.
            // an edge which links a node's operation to its input. We don't
            // want to render node internals with visible links.
            if (graph_.node(edge.from).type != NodeType::value)
                continue;

            ImNodes::Link(edge.id, edge.from, edge.to);
        }

        ImNodes::MiniMap(0.2f, minimap_location_);
        ImNodes::EndNodeEditor();

        // Handle new links
        // These are driven by Imnodes, so we place the code after EndNodeEditor().

        {
            int start_attr, end_attr;
            if (ImNodes::IsLinkCreated(&start_attr, &end_attr))
            {
                const NodeType start_type = graph_.node(start_attr).type;
                const NodeType end_type = graph_.node(end_attr).type;

                const bool valid_link = start_type != end_type;
                if (valid_link)
                {
                    // Ensure the edge is always directed from the value to
                    // whatever produces the value
                    if (start_type != NodeType::value)
                    {
                        std::swap(start_attr, end_attr);
                    }
                    graph_.insert_edge(start_attr, end_attr);
                }
            }
        }

        // Handle deleted links

        {
            int link_id;
            if (ImNodes::IsLinkDestroyed(&link_id))
            {
                graph_.erase_edge(link_id);
            }
        }

        {
            const int num_selected = ImNodes::NumSelectedLinks();
            if (num_selected > 0 && ImGui::IsKeyReleased(ImGuiKey_X))
            {
                static std::vector<int> selected_links;
                selected_links.resize(static_cast<size_t>(num_selected));
                ImNodes::GetSelectedLinks(selected_links.data());
                for (const int edge_id : selected_links)
                {
                    graph_.erase_edge(edge_id);
                }
            }
        }

        {
            const int num_selected = ImNodes::NumSelectedNodes();
            if (num_selected > 0 && ImGui::IsKeyReleased(ImGuiKey_X))
            {
                static std::vector<int> selected_nodes;
                selected_nodes.resize(static_cast<size_t>(num_selected));
                ImNodes::GetSelectedNodes(selected_nodes.data());
                for (const int node_id : selected_nodes)
                {
                    graph_.erase_node(node_id);
                    auto iter = std::find_if(
                        nodes_.begin(), nodes_.end(), [node_id](const UiNode& node) -> bool {
                            return node.id == node_id;
                        });
                    // Erase any additional internal nodes
                    switch (iter->type)
                    {
                    case UiNodeType::add:
                        graph_.erase_node(iter->ui.add.lhs);
                        graph_.erase_node(iter->ui.add.rhs);
                        break;
                    case UiNodeType::multiply:
                        graph_.erase_node(iter->ui.multiply.lhs);
                        graph_.erase_node(iter->ui.multiply.rhs);
                        break;
                    case UiNodeType::output:
                        graph_.erase_node(iter->ui.output.r);
                        graph_.erase_node(iter->ui.output.g);
                        graph_.erase_node(iter->ui.output.b);
                        root_node_id_ = -1;
                        break;
                    case UiNodeType::sine:
                        graph_.erase_node(iter->ui.sine.input);
                        break;
                    default:
                        break;
                    }
                    nodes_.erase(iter);
                }
            }
        }

        ImGui::End();

        // The color output window

        const ImU32 color =
            root_node_id_ != -1 ? evaluate(graph_, root_node_id_) : IM_COL32(255, 20, 147, 255);
        ImGui::PushStyleColor(ImGuiCol_WindowBg, color);
        ImGui::Begin("output color");
        ImGui::End();
        ImGui::PopStyleColor();
    }

private:
    enum class UiNodeType
    {
        add,
        multiply,
        output,
        sine,
        time,
    };

    struct UiNode
    {
        UiNodeType type;
        // The identifying id of the ui node. For add, multiply, sine, and time
        // this is the "operation" node id. The additional input nodes are
        // stored in the structs.
        int id;

        union
        {
            struct
            {
                int lhs, rhs;
            } add;

            struct
            {
                int lhs, rhs;
            } multiply;

            struct
            {
                int r, g, b;
            } output;

            struct
            {
                int input;
            } sine;
        } ui;
    };

    Graph<Node>            graph_;
    std::vector<UiNode>    nodes_;
    int                    root_node_id_;
    ImNodesMiniMapLocation minimap_location_;
};

static ColorNodeEditor color_editor;
} // namespace

void NodeEditorInitialize()
{
    ImNodesIO& io = ImNodes::GetIO();
    io.LinkDetachWithModifierClick.Modifier = &ImGui::GetIO().KeyCtrl;
}

void NodeEditorShow() { color_editor.show(); }

void NodeEditorShutdown() {}
} // namespace example


================================================================================
FILE: imnode_examples\graph.h
================================================================================


#pragma once

#include <algorithm>
#include <cassert>
#include <iterator>
#include <stack>
#include <stddef.h>
#include <utility>
#include <vector>

namespace example
{
template<typename ElementType>
struct Span
{
    using iterator = ElementType*;

    template<typename Container>
    Span(Container& c) : begin_(c.data()), end_(begin_ + c.size())
    {
    }

    iterator begin() const { return begin_; }
    iterator end() const { return end_; }

private:
    iterator begin_;
    iterator end_;
};

template<typename ElementType>
class IdMap
{
public:
    using iterator = typename std::vector<ElementType>::iterator;
    using const_iterator = typename std::vector<ElementType>::const_iterator;

    // Iterators

    const_iterator begin() const { return elements_.begin(); }
    const_iterator end() const { return elements_.end(); }

    // Element access

    Span<const ElementType> elements() const { return elements_; }

    // Capacity

    bool   empty() const { return sorted_ids_.empty(); }
    size_t size() const { return sorted_ids_.size(); }

    // Modifiers

    std::pair<iterator, bool> insert(int id, const ElementType& element);
    std::pair<iterator, bool> insert(int id, ElementType&& element);
    size_t                    erase(int id);
    void                      clear();

    // Lookup

    iterator       find(int id);
    const_iterator find(int id) const;
    bool           contains(int id) const;

private:
    std::vector<ElementType> elements_;
    std::vector<int>         sorted_ids_;
};

template<typename ElementType>
std::pair<typename IdMap<ElementType>::iterator, bool> IdMap<ElementType>::insert(
    const int          id,
    const ElementType& element)
{
    auto lower_bound = std::lower_bound(sorted_ids_.begin(), sorted_ids_.end(), id);

    if (lower_bound != sorted_ids_.end() && id == *lower_bound)
    {
        return std::make_pair(
            std::next(elements_.begin(), std::distance(sorted_ids_.begin(), lower_bound)), false);
    }

    auto insert_element_at =
        std::next(elements_.begin(), std::distance(sorted_ids_.begin(), lower_bound));

    sorted_ids_.insert(lower_bound, id);
    return std::make_pair(elements_.insert(insert_element_at, element), true);
}

template<typename ElementType>
std::pair<typename IdMap<ElementType>::iterator, bool> IdMap<ElementType>::insert(
    const int     id,
    ElementType&& element)
{
    auto lower_bound = std::lower_bound(sorted_ids_.begin(), sorted_ids_.end(), id);

    if (lower_bound != sorted_ids_.end() && id == *lower_bound)
    {
        return std::make_pair(
            std::next(elements_.begin(), std::distance(sorted_ids_.begin(), lower_bound)), false);
    }

    auto insert_element_at =
        std::next(elements_.begin(), std::distance(sorted_ids_.begin(), lower_bound));

    sorted_ids_.insert(lower_bound, id);
    return std::make_pair(elements_.insert(insert_element_at, std::move(element)), true);
}

template<typename ElementType>
size_t IdMap<ElementType>::erase(const int id)
{
    auto lower_bound = std::lower_bound(sorted_ids_.begin(), sorted_ids_.end(), id);

    if (lower_bound == sorted_ids_.end() || id != *lower_bound)
    {
        return 0ull;
    }

    auto erase_element_at =
        std::next(elements_.begin(), std::distance(sorted_ids_.begin(), lower_bound));

    sorted_ids_.erase(lower_bound);
    elements_.erase(erase_element_at);

    return 1ull;
}

template<typename ElementType>
void IdMap<ElementType>::clear()
{
    elements_.clear();
    sorted_ids_.clear();
}

template<typename ElementType>
typename IdMap<ElementType>::iterator IdMap<ElementType>::find(const int id)
{
    const auto lower_bound = std::lower_bound(sorted_ids_.cbegin(), sorted_ids_.cend(), id);
    return (lower_bound == sorted_ids_.cend() || *lower_bound != id)
               ? elements_.end()
               : std::next(elements_.begin(), std::distance(sorted_ids_.cbegin(), lower_bound));
}

template<typename ElementType>
typename IdMap<ElementType>::const_iterator IdMap<ElementType>::find(const int id) const
{
    const auto lower_bound = std::lower_bound(sorted_ids_.cbegin(), sorted_ids_.cend(), id);
    return (lower_bound == sorted_ids_.cend() || *lower_bound != id)
               ? elements_.cend()
               : std::next(elements_.cbegin(), std::distance(sorted_ids_.cbegin(), lower_bound));
}

template<typename ElementType>
bool IdMap<ElementType>::contains(const int id) const
{
    const auto lower_bound = std::lower_bound(sorted_ids_.cbegin(), sorted_ids_.cend(), id);

    if (lower_bound == sorted_ids_.cend())
    {
        return false;
    }

    return *lower_bound == id;
}

// a very simple directional graph
template<typename NodeType>
class Graph
{
public:
    Graph() : current_id_(0), nodes_(), edges_from_node_(), node_neighbors_(), edges_() {}

    struct Edge
    {
        int id;
        int from, to;

        Edge() = default;
        Edge(const int id, const int f, const int t) : id(id), from(f), to(t) {}

        inline int  opposite(const int n) const { return n == from ? to : from; }
        inline bool contains(const int n) const { return n == from || n == to; }
    };

    // Element access

    NodeType&        node(int node_id);
    const NodeType&  node(int node_id) const;
    Span<const int>  neighbors(int node_id) const;
    Span<const Edge> edges() const;

    // Capacity

    size_t num_edges_from_node(int node_id) const;

    // Modifiers

    int  insert_node(const NodeType& node);
    void erase_node(int node_id);

    int  insert_edge(int from, int to);
    void erase_edge(int edge_id);

private:
    int current_id_;
    // These contains map to the node id
    IdMap<NodeType>         nodes_;
    IdMap<int>              edges_from_node_;
    IdMap<std::vector<int>> node_neighbors_;

    // This container maps to the edge id
    IdMap<Edge> edges_;
};

template<typename NodeType>
NodeType& Graph<NodeType>::node(const int id)
{
    return const_cast<NodeType&>(static_cast<const Graph*>(this)->node(id));
}

template<typename NodeType>
const NodeType& Graph<NodeType>::node(const int id) const
{
    const auto iter = nodes_.find(id);
    assert(iter != nodes_.end());
    return *iter;
}

template<typename NodeType>
Span<const int> Graph<NodeType>::neighbors(int node_id) const
{
    const auto iter = node_neighbors_.find(node_id);
    assert(iter != node_neighbors_.end());
    return *iter;
}

template<typename NodeType>
Span<const typename Graph<NodeType>::Edge> Graph<NodeType>::edges() const
{
    return edges_.elements();
}

template<typename NodeType>
size_t Graph<NodeType>::num_edges_from_node(const int id) const
{
    auto iter = edges_from_node_.find(id);
    assert(iter != edges_from_node_.end());
    return *iter;
}

template<typename NodeType>
int Graph<NodeType>::insert_node(const NodeType& node)
{
    const int id = current_id_++;
    assert(!nodes_.contains(id));
    nodes_.insert(id, node);
    edges_from_node_.insert(id, 0);
    node_neighbors_.insert(id, std::vector<int>());
    return id;
}

template<typename NodeType>
void Graph<NodeType>::erase_node(const int id)
{

    // first, remove any potential dangling edges
    {
        static std::vector<int> edges_to_erase;

        for (const Edge& edge : edges_.elements())
        {
            if (edge.contains(id))
            {
                edges_to_erase.push_back(edge.id);
            }
        }

        for (const int edge_id : edges_to_erase)
        {
            erase_edge(edge_id);
        }

        edges_to_erase.clear();
    }

    nodes_.erase(id);
    edges_from_node_.erase(id);
    node_neighbors_.erase(id);
}

template<typename NodeType>
int Graph<NodeType>::insert_edge(const int from, const int to)
{
    const int id = current_id_++;
    assert(!edges_.contains(id));
    assert(nodes_.contains(from));
    assert(nodes_.contains(to));
    edges_.insert(id, Edge(id, from, to));

    // update neighbor count
    assert(edges_from_node_.contains(from));
    *edges_from_node_.find(from) += 1;
    // update neighbor list
    assert(node_neighbors_.contains(from));
    node_neighbors_.find(from)->push_back(to);

    return id;
}

template<typename NodeType>
void Graph<NodeType>::erase_edge(const int edge_id)
{
    // This is a bit lazy, we find the pointer here, but we refind it when we erase the edge based
    // on id key.
    assert(edges_.contains(edge_id));
    const Edge& edge = *edges_.find(edge_id);

    // update neighbor count
    assert(edges_from_node_.contains(edge.from));
    int& edge_count = *edges_from_node_.find(edge.from);
    assert(edge_count > 0);
    edge_count -= 1;

    // update neighbor list
    {
        assert(node_neighbors_.contains(edge.from));
        auto neighbors = node_neighbors_.find(edge.from);
        auto iter = std::find(neighbors->begin(), neighbors->end(), edge.to);
        assert(iter != neighbors->end());
        neighbors->erase(iter);
    }

    edges_.erase(edge_id);
}

template<typename NodeType, typename Visitor>
void dfs_traverse(const Graph<NodeType>& graph, const int start_node, Visitor visitor)
{
    std::stack<int> stack;

    stack.push(start_node);

    while (!stack.empty())
    {
        const int current_node = stack.top();
        stack.pop();

        visitor(current_node);

        for (const int neighbor : graph.neighbors(current_node))
        {
            stack.push(neighbor);
        }
    }
}
} // namespace example


================================================================================
FILE: imnode_examples\hello.cpp
================================================================================


#include "node_editor.h"
#include <imnodes.h>
#include <imgui.h>

namespace example
{
namespace
{
class HelloWorldNodeEditor
{
public:
    void show()
    {
        ImGui::Begin("simple node editor");

        ImNodes::BeginNodeEditor();
        ImNodes::BeginNode(1);

        ImNodes::BeginNodeTitleBar();
        ImGui::TextUnformatted("simple node :)");
        ImNodes::EndNodeTitleBar();

        ImNodes::BeginInputAttribute(2);
        ImGui::Text("input");
        ImNodes::EndInputAttribute();

        ImNodes::BeginOutputAttribute(3);
        ImGui::Indent(40);
        ImGui::Text("output");
        ImNodes::EndOutputAttribute();

        ImNodes::EndNode();
        ImNodes::EndNodeEditor();

        ImGui::End();
    }
};

static HelloWorldNodeEditor editor;
} // namespace

void NodeEditorInitialize() { ImNodes::SetNodeGridSpacePos(1, ImVec2(200.0f, 200.0f)); }

void NodeEditorShow() { editor.show(); }

void NodeEditorShutdown() {}

} // namespace example


================================================================================
FILE: imnode_examples\imgui_demo.cpp
================================================================================


// dear imgui, v1.92.5 WIP
// (demo code)

// Help:
// - Read FAQ at http://dearimgui.com/faq
// - Call and read ImGui::ShowDemoWindow() in imgui_demo.cpp. All applications in examples/ are doing that.
// - Need help integrating Dear ImGui in your codebase?
//   - Read Getting Started https://github.com/ocornut/imgui/wiki/Getting-Started
//   - Read 'Programmer guide' in imgui.cpp for notes on how to setup Dear ImGui in your codebase.
// Read top of imgui.cpp and imgui.h for many details, documentation, comments, links.
// Get the latest version at https://github.com/ocornut/imgui

// How to easily locate code?
// - Use Tools->Item Picker to debug break in code by clicking any widgets: https://github.com/ocornut/imgui/wiki/Debug-Tools
// - Browse an online version the demo with code linked to hovered widgets: https://pthom.github.io/imgui_manual_online/manual/imgui_manual.html
// - Find a visible string and search for it in the code!

//---------------------------------------------------
// PLEASE DO NOT REMOVE THIS FILE FROM YOUR PROJECT!
//---------------------------------------------------
// Message to the person tempted to delete this file when integrating Dear ImGui into their codebase:
// Think again! It is the most useful reference code that you and other coders will want to refer to and call.
// Have the ImGui::ShowDemoWindow() function wired in an always-available debug menu of your game/app!
// Also include Metrics! ItemPicker! DebugLog! and other debug features.
// Removing this file from your project is hindering access to documentation for everyone in your team,
// likely leading you to poorer usage of the library.
// Everything in this file will be stripped out by the linker if you don't call ImGui::ShowDemoWindow().
// If you want to link core Dear ImGui in your shipped builds but want a thorough guarantee that the demo will not be
// linked, you can setup your imconfig.h with #define IMGUI_DISABLE_DEMO_WINDOWS and those functions will be empty.
// In another situation, whenever you have Dear ImGui available you probably want this to be available for reference.
// Thank you,
// -Your beloved friend, imgui_demo.cpp (which you won't delete)

//--------------------------------------------
// ABOUT THE MEANING OF THE 'static' KEYWORD:
//--------------------------------------------
// In this demo code, we frequently use 'static' variables inside functions.
// A static variable persists across calls. It is essentially a global variable but declared inside the scope of the function.
// Think of "static int n = 0;" as "global int n = 0;" !
// We do this IN THE DEMO because we want:
// - to gather code and data in the same place.
// - to make the demo source code faster to read, faster to change, smaller in size.
// - it is also a convenient way of storing simple UI related information as long as your function
//   doesn't need to be reentrant or used in multiple threads.
// This might be a pattern you will want to use in your code, but most of the data you would be working
// with in a complex codebase is likely going to be stored outside your functions.

//-----------------------------------------
// ABOUT THE CODING STYLE OF OUR DEMO CODE
//-----------------------------------------
// The Demo code in this file is designed to be easy to copy-and-paste into your application!
// Because of this:
// - We never omit the ImGui:: prefix when calling functions, even though most code here is in the same namespace.
// - We try to declare static variables in the local scope, as close as possible to the code using them.
// - We never use any of the helpers/facilities used internally by Dear ImGui, unless available in the public API.
// - We never use maths operators on ImVec2/ImVec4. For our other sources files we use them, and they are provided
//   by imgui.h using the IMGUI_DEFINE_MATH_OPERATORS define. For your own sources file they are optional
//   and require you either enable those, either provide your own via IM_VEC2_CLASS_EXTRA in imconfig.h.
//   Because we can't assume anything about your support of maths operators, we cannot use them in imgui_demo.cpp.

// Navigating this file:
// - In Visual Studio: CTRL+comma ("Edit.GoToAll") can follow symbols inside comments, whereas CTRL+F12 ("Edit.GoToImplementation") cannot.
// - In Visual Studio w/ Visual Assist installed: ALT+G ("VAssistX.GoToImplementation") can also follow symbols inside comments.
// - In VS Code, CLion, etc.: CTRL+click can follow symbols inside comments.
// - You can search/grep for all sections listed in the index to find the section.

/*

Index of this file:

// [SECTION] Forward Declarations
// [SECTION] Helpers
// [SECTION] Demo Window / ShowDemoWindow()
// [SECTION] DemoWindowMenuBar()
// [SECTION] Helpers: ExampleTreeNode, ExampleMemberInfo (for use by Property Editor & Multi-Select demos)
// [SECTION] DemoWindowWidgetsBasic()
// [SECTION] DemoWindowWidgetsBullets()
// [SECTION] DemoWindowWidgetsCollapsingHeaders()
// [SECTION] DemoWindowWidgetsComboBoxes()
// [SECTION] DemoWindowWidgetsColorAndPickers()
// [SECTION] DemoWindowWidgetsDataTypes()
// [SECTION] DemoWindowWidgetsDisableBlocks()
// [SECTION] DemoWindowWidgetsDragAndDrop()
// [SECTION] DemoWindowWidgetsDragsAndSliders()
// [SECTION] DemoWindowWidgetsFonts()
// [SECTION] DemoWindowWidgetsImages()
// [SECTION] DemoWindowWidgetsListBoxes()
// [SECTION] DemoWindowWidgetsMultiComponents()
// [SECTION] DemoWindowWidgetsPlotting()
// [SECTION] DemoWindowWidgetsProgressBars()
// [SECTION] DemoWindowWidgetsQueryingStatuses()
// [SECTION] DemoWindowWidgetsSelectables()
// [SECTION] DemoWindowWidgetsSelectionAndMultiSelect()
// [SECTION] DemoWindowWidgetsTabs()
// [SECTION] DemoWindowWidgetsText()
// [SECTION] DemoWindowWidgetsTextFilter()
// [SECTION] DemoWindowWidgetsTextInput()
// [SECTION] DemoWindowWidgetsTooltips()
// [SECTION] DemoWindowWidgetsTreeNodes()
// [SECTION] DemoWindowWidgetsVerticalSliders()
// [SECTION] DemoWindowWidgets()
// [SECTION] DemoWindowLayout()
// [SECTION] DemoWindowPopups()
// [SECTION] DemoWindowTables()
// [SECTION] DemoWindowInputs()
// [SECTION] About Window / ShowAboutWindow()
// [SECTION] Style Editor / ShowStyleEditor()
// [SECTION] User Guide / ShowUserGuide()
// [SECTION] Example App: Main Menu Bar / ShowExampleAppMainMenuBar()
// [SECTION] Example App: Debug Console / ShowExampleAppConsole()
// [SECTION] Example App: Debug Log / ShowExampleAppLog()
// [SECTION] Example App: Simple Layout / ShowExampleAppLayout()
// [SECTION] Example App: Property Editor / ShowExampleAppPropertyEditor()
// [SECTION] Example App: Long Text / ShowExampleAppLongText()
// [SECTION] Example App: Auto Resize / ShowExampleAppAutoResize()
// [SECTION] Example App: Constrained Resize / ShowExampleAppConstrainedResize()
// [SECTION] Example App: Simple overlay / ShowExampleAppSimpleOverlay()
// [SECTION] Example App: Fullscreen window / ShowExampleAppFullscreen()
// [SECTION] Example App: Manipulating window titles / ShowExampleAppWindowTitles()
// [SECTION] Example App: Custom Rendering using ImDrawList API / ShowExampleAppCustomRendering()
// [SECTION] Example App: Documents Handling / ShowExampleAppDocuments()
// [SECTION] Example App: Assets Browser / ShowExampleAppAssetsBrowser()

*/

#if defined(_MSC_VER) && !defined(_CRT_SECURE_NO_WARNINGS)
#define _CRT_SECURE_NO_WARNINGS
#endif

#include "imgui.h"
#ifndef IMGUI_DISABLE

// System includes
#include <ctype.h>          // toupper
#include <limits.h>         // INT_MIN, INT_MAX
#include <math.h>           // sqrtf, powf, cosf, sinf, floorf, ceilf
#include <stdio.h>          // vsnprintf, sscanf, printf
#include <stdlib.h>         // NULL, malloc, free, atoi
#include <stdint.h>         // intptr_t
#if !defined(_MSC_VER) || _MSC_VER >= 1800
#include <inttypes.h>       // PRId64/PRIu64, not avail in some MinGW headers.
#endif
#ifdef __EMSCRIPTEN__
#include <emscripten/version.h>     // __EMSCRIPTEN_major__ etc.
#endif

// Visual Studio warnings
#ifdef _MSC_VER
#pragma warning (disable: 4127)     // condition expression is constant
#pragma warning (disable: 4996)     // 'This function or variable may be unsafe': strcpy, strdup, sprintf, vsnprintf, sscanf, fopen
#pragma warning (disable: 26451)    // [Static Analyzer] Arithmetic overflow : Using operator 'xxx' on a 4 byte value and then casting the result to an 8 byte value. Cast the value to the wider type before calling operator 'xxx' to avoid overflow(io.2).
#endif

// Clang/GCC warnings with -Weverything
#if defined(__clang__)
#if __has_warning("-Wunknown-warning-option")
#pragma clang diagnostic ignored "-Wunknown-warning-option"         // warning: unknown warning group 'xxx'                     // not all warnings are known by all Clang versions and they tend to be rename-happy.. so ignoring warnings triggers new warnings on some configuration. Great!
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"                // warning: unknown warning group 'xxx'
#pragma clang diagnostic ignored "-Wold-style-cast"                 // warning: use of old-style cast                           // yes, they are more terse.
#pragma clang diagnostic ignored "-Wdeprecated-declarations"        // warning: 'xx' is deprecated: The POSIX name for this..   // for strdup used in demo code (so user can copy & paste the code)
#pragma clang diagnostic ignored "-Wint-to-void-pointer-cast"       // warning: cast to 'void *' from smaller integer type
#pragma clang diagnostic ignored "-Wformat"                         // warning: format specifies type 'int' but the argument has type 'unsigned int'
#pragma clang diagnostic ignored "-Wformat-security"                // warning: format string is not a string literal
#pragma clang diagnostic ignored "-Wexit-time-destructors"          // warning: declaration requires an exit-time destructor    // exit-time destruction order is undefined. if MemFree() leads to users code that has been disabled before exit it might cause problems. ImGui coding style welcomes static/globals.
#pragma clang diagnostic ignored "-Wunused-macros"                  // warning: macro is not used                               // we define snprintf/vsnprintf on Windows so they are available, but not always used.
#pragma clang diagnostic ignored "-Wzero-as-null-pointer-constant"  // warning: zero as null pointer constant                   // some standard header variations use #define NULL 0
#pragma clang diagnostic ignored "-Wdouble-promotion"               // warning: implicit conversion from 'float' to 'double' when passing argument to function  // using printf() is a misery with this as C++ va_arg ellipsis changes float to double.
#pragma clang diagnostic ignored "-Wreserved-id-macro"              // warning: macro name is a reserved identifier
#pragma clang diagnostic ignored "-Wimplicit-int-float-conversion"  // warning: implicit conversion from 'xxx' to 'float' may lose precision
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"            // warning: 'xxx' is an unsafe pointer used for buffer access
#pragma clang diagnostic ignored "-Wswitch-default"                 // warning: 'switch' missing 'default' label
#elif defined(__GNUC__)
#pragma GCC diagnostic ignored "-Wpragmas"                          // warning: unknown option after '#pragma GCC diagnostic' kind
#pragma GCC diagnostic ignored "-Wfloat-equal"                      // warning: comparing floating-point with '==' or '!=' is unsafe
#pragma GCC diagnostic ignored "-Wint-to-pointer-cast"              // warning: cast to pointer from integer of different size
#pragma GCC diagnostic ignored "-Wformat"                           // warning: format '%p' expects argument of type 'int'/'void*', but argument X has type 'unsigned int'/'ImGuiWindow*'
#pragma GCC diagnostic ignored "-Wformat-security"                  // warning: format string is not a string literal (potentially insecure)
#pragma GCC diagnostic ignored "-Wdouble-promotion"                 // warning: implicit conversion from 'float' to 'double' when passing argument to function
#pragma GCC diagnostic ignored "-Wconversion"                       // warning: conversion to 'xxxx' from 'xxxx' may alter its value
#pragma GCC diagnostic ignored "-Wmisleading-indentation"           // [__GNUC__ >= 6] warning: this 'if' clause does not guard this statement      // GCC 6.0+ only. See #883 on GitHub.
#pragma GCC diagnostic ignored "-Wstrict-overflow"                  // warning: assuming signed overflow does not occur when simplifying division / ..when changing X +- C1 cmp C2 to X cmp C2 -+ C1
#pragma GCC diagnostic ignored "-Wcast-qual"                        // warning: cast from type 'const xxxx *' to type 'xxxx *' casts away qualifiers
#endif

// Play it nice with Windows users (Update: May 2018, Notepad now supports Unix-style carriage returns!)
#ifdef _WIN32
#define IM_NEWLINE  "\r\n"
#else
#define IM_NEWLINE  "\n"
#endif

// Helpers
#if defined(_MSC_VER) && !defined(snprintf)
#define snprintf    _snprintf
#endif
#if defined(_MSC_VER) && !defined(vsnprintf)
#define vsnprintf   _vsnprintf
#endif

// Format specifiers for 64-bit values (hasn't been decently standardized before VS2013)
#if !defined(PRId64) && defined(_MSC_VER)
#define PRId64 "I64d"
#define PRIu64 "I64u"
#elif !defined(PRId64)
#define PRId64 "lld"
#define PRIu64 "llu"
#endif

// Helpers macros
// We normally try to not use many helpers in imgui_demo.cpp in order to make code easier to copy and paste,
// but making an exception here as those are largely simplifying code...
// In other imgui sources we can use nicer internal functions from imgui_internal.h (ImMin/ImMax) but not in the demo.
#define IM_MIN(A, B)            (((A) < (B)) ? (A) : (B))
#define IM_MAX(A, B)            (((A) >= (B)) ? (A) : (B))
#define IM_CLAMP(V, MN, MX)     ((V) < (MN) ? (MN) : (V) > (MX) ? (MX) : (V))

// Enforce cdecl calling convention for functions called by the standard library,
// in case compilation settings changed the default to e.g. __vectorcall
#ifndef IMGUI_CDECL
#ifdef _MSC_VER
#define IMGUI_CDECL __cdecl
#else
#define IMGUI_CDECL
#endif
#endif

//-----------------------------------------------------------------------------
// [SECTION] Forward Declarations
//-----------------------------------------------------------------------------

#if !defined(IMGUI_DISABLE_DEMO_WINDOWS)

// Forward Declarations
struct ImGuiDemoWindowData;
static void ShowExampleAppMainMenuBar();
static void ShowExampleAppAssetsBrowser(bool* p_open);
static void ShowExampleAppConsole(bool* p_open);
static void ShowExampleAppCustomRendering(bool* p_open);
static void ShowExampleAppDocuments(bool* p_open);
static void ShowExampleAppLog(bool* p_open);
static void ShowExampleAppLayout(bool* p_open);
static void ShowExampleAppPropertyEditor(bool* p_open, ImGuiDemoWindowData* demo_data);
static void ShowExampleAppSimpleOverlay(bool* p_open);
static void ShowExampleAppAutoResize(bool* p_open);
static void ShowExampleAppConstrainedResize(bool* p_open);
static void ShowExampleAppFullscreen(bool* p_open);
static void ShowExampleAppLongText(bool* p_open);
static void ShowExampleAppWindowTitles(bool* p_open);
static void ShowExampleMenuFile();

// We split the contents of the big ShowDemoWindow() function into smaller functions
// (because the link time of very large functions tends to grow non-linearly)
static void DemoWindowMenuBar(ImGuiDemoWindowData* demo_data);
static void DemoWindowWidgets(ImGuiDemoWindowData* demo_data);
static void DemoWindowLayout();
static void DemoWindowPopups();
static void DemoWindowTables();
static void DemoWindowColumns();
static void DemoWindowInputs();

// Helper tree functions used by Property Editor & Multi-Select demos
struct ExampleTreeNode;
static ExampleTreeNode* ExampleTree_CreateNode(const char* name, int uid, ExampleTreeNode* parent);
static void             ExampleTree_DestroyNode(ExampleTreeNode* node);

//-----------------------------------------------------------------------------
// [SECTION] Helpers
//-----------------------------------------------------------------------------

// Helper to display a little (?) mark which shows a tooltip when hovered.
// In your own code you may want to display an actual icon if you are using a merged icon fonts (see docs/FONTS.md)
static void HelpMarker(const char* desc)
{
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

// Helper to wire demo markers located in code to an interactive browser
typedef void (*ImGuiDemoMarkerCallback)(const char* file, int line, const char* section, void* user_data);
extern ImGuiDemoMarkerCallback      GImGuiDemoMarkerCallback;
extern void*                        GImGuiDemoMarkerCallbackUserData;
ImGuiDemoMarkerCallback             GImGuiDemoMarkerCallback = NULL;
void*                               GImGuiDemoMarkerCallbackUserData = NULL;
#define IMGUI_DEMO_MARKER(section)  do { if (GImGuiDemoMarkerCallback != NULL) GImGuiDemoMarkerCallback(__FILE__, __LINE__, section, GImGuiDemoMarkerCallbackUserData); } while (0)

//-----------------------------------------------------------------------------
// [SECTION] Demo Window / ShowDemoWindow()
//-----------------------------------------------------------------------------

// Data to be shared across different functions of the demo.
struct ImGuiDemoWindowData
{
    // Examples Apps (accessible from the "Examples" menu)
    bool ShowMainMenuBar = false;
    bool ShowAppAssetsBrowser = false;
    bool ShowAppConsole = false;
    bool ShowAppCustomRendering = false;
    bool ShowAppDocuments = false;
    bool ShowAppLog = false;
    bool ShowAppLayout = false;
    bool ShowAppPropertyEditor = false;
    bool ShowAppSimpleOverlay = false;
    bool ShowAppAutoResize = false;
    bool ShowAppConstrainedResize = false;
    bool ShowAppFullscreen = false;
    bool ShowAppLongText = false;
    bool ShowAppWindowTitles = false;

    // Dear ImGui Tools (accessible from the "Tools" menu)
    bool ShowMetrics = false;
    bool ShowDebugLog = false;
    bool ShowIDStackTool = false;
    bool ShowStyleEditor = false;
    bool ShowAbout = false;

    // Other data
    bool DisableSections = false;
    ExampleTreeNode* DemoTree = NULL;

    ~ImGuiDemoWindowData() { if (DemoTree) ExampleTree_DestroyNode(DemoTree); }
};

// Demonstrate most Dear ImGui features (this is big function!)
// You may execute this function to experiment with the UI and understand what it does.
// You may then search for keywords in the code when you are interested by a specific feature.
void ImGui::ShowDemoWindow(bool* p_open)
{
    // Exceptionally add an extra assert here for people confused about initial Dear ImGui setup
    // Most functions would normally just assert/crash if the context is missing.
    IM_ASSERT(ImGui::GetCurrentContext() != NULL && "Missing Dear ImGui context. Refer to examples app!");

    // Verify ABI compatibility between caller code and compiled version of Dear ImGui. This helps detects some build issues.
    IMGUI_CHECKVERSION();

    // Stored data
    static ImGuiDemoWindowData demo_data;

    // Examples Apps (accessible from the "Examples" menu)
    if (demo_data.ShowMainMenuBar)          { ShowExampleAppMainMenuBar(); }
    if (demo_data.ShowAppDocuments)         { ShowExampleAppDocuments(&demo_data.ShowAppDocuments); }
    if (demo_data.ShowAppAssetsBrowser)     { ShowExampleAppAssetsBrowser(&demo_data.ShowAppAssetsBrowser); }
    if (demo_data.ShowAppConsole)           { ShowExampleAppConsole(&demo_data.ShowAppConsole); }
    if (demo_data.ShowAppCustomRendering)   { ShowExampleAppCustomRendering(&demo_data.ShowAppCustomRendering); }
    if (demo_data.ShowAppLog)               { ShowExampleAppLog(&demo_data.ShowAppLog); }
    if (demo_data.ShowAppLayout)            { ShowExampleAppLayout(&demo_data.ShowAppLayout); }
    if (demo_data.ShowAppPropertyEditor)    { ShowExampleAppPropertyEditor(&demo_data.ShowAppPropertyEditor, &demo_data); }
    if (demo_data.ShowAppSimpleOverlay)     { ShowExampleAppSimpleOverlay(&demo_data.ShowAppSimpleOverlay); }
    if (demo_data.ShowAppAutoResize)        { ShowExampleAppAutoResize(&demo_data.ShowAppAutoResize); }
    if (demo_data.ShowAppConstrainedResize) { ShowExampleAppConstrainedResize(&demo_data.ShowAppConstrainedResize); }
    if (demo_data.ShowAppFullscreen)        { ShowExampleAppFullscreen(&demo_data.ShowAppFullscreen); }
    if (demo_data.ShowAppLongText)          { ShowExampleAppLongText(&demo_data.ShowAppLongText); }
    if (demo_data.ShowAppWindowTitles)      { ShowExampleAppWindowTitles(&demo_data.ShowAppWindowTitles); }

    // Dear ImGui Tools (accessible from the "Tools" menu)
    if (demo_data.ShowMetrics)              { ImGui::ShowMetricsWindow(&demo_data.ShowMetrics); }
    if (demo_data.ShowDebugLog)             { ImGui::ShowDebugLogWindow(&demo_data.ShowDebugLog); }
    if (demo_data.ShowIDStackTool)          { ImGui::ShowIDStackToolWindow(&demo_data.ShowIDStackTool); }
    if (demo_data.ShowAbout)                { ImGui::ShowAboutWindow(&demo_data.ShowAbout); }
    if (demo_data.ShowStyleEditor)
    {
        ImGui::Begin("Dear ImGui Style Editor", &demo_data.ShowStyleEditor);
        ImGui::ShowStyleEditor();
        ImGui::End();
    }

    // Demonstrate the various window flags. Typically you would just use the default!
    static bool no_titlebar = false;
    static bool no_scrollbar = false;
    static bool no_menu = false;
    static bool no_move = false;
    static bool no_resize = false;
    static bool no_collapse = false;
    static bool no_close = false;
    static bool no_nav = false;
    static bool no_background = false;
    static bool no_bring_to_front = false;
    static bool unsaved_document = false;

    ImGuiWindowFlags window_flags = 0;
    if (no_titlebar)        window_flags |= ImGuiWindowFlags_NoTitleBar;
    if (no_scrollbar)       window_flags |= ImGuiWindowFlags_NoScrollbar;
    if (!no_menu)           window_flags |= ImGuiWindowFlags_MenuBar;
    if (no_move)            window_flags |= ImGuiWindowFlags_NoMove;
    if (no_resize)          window_flags |= ImGuiWindowFlags_NoResize;
    if (no_collapse)        window_flags |= ImGuiWindowFlags_NoCollapse;
    if (no_nav)             window_flags |= ImGuiWindowFlags_NoNav;
    if (no_background)      window_flags |= ImGuiWindowFlags_NoBackground;
    if (no_bring_to_front)  window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus;
    if (unsaved_document)   window_flags |= ImGuiWindowFlags_UnsavedDocument;
    if (no_close)           p_open = NULL; // Don't pass our bool* to Begin

    // We specify a default position/size in case there's no data in the .ini file.
    // We only do it to make the demo applications a little more welcoming, but typically this isn't required.
    const ImGuiViewport* main_viewport = ImGui::GetMainViewport();
    ImGui::SetNextWindowPos(ImVec2(main_viewport->WorkPos.x + 650, main_viewport->WorkPos.y + 20), ImGuiCond_FirstUseEver);
    ImGui::SetNextWindowSize(ImVec2(550, 680), ImGuiCond_FirstUseEver);

    // Main body of the Demo window starts here.
    if (!ImGui::Begin("Dear ImGui Demo", p_open, window_flags))
    {
        // Early out if the window is collapsed, as an optimization.
        ImGui::End();
        return;
    }

    // Most framed widgets share a common width settings. Remaining width is used for the label.
    // The width of the frame may be changed with PushItemWidth() or SetNextItemWidth().
    // - Positive value for absolute size, negative value for right-alignment.
    // - The default value is about GetWindowWidth() * 0.65f.
    // - See 'Demo->Layout->Widgets Width' for details.
    // Here we change the frame width based on how much width we want to give to the label.
    const float label_width_base = ImGui::GetFontSize() * 12;               // Some amount of width for label, based on font size.
    const float label_width_max = ImGui::GetContentRegionAvail().x * 0.40f; // ...but always leave some room for framed widgets.
    const float label_width = IM_MIN(label_width_base, label_width_max);
    ImGui::PushItemWidth(-label_width);                                     // Right-align: framed items will leave 'label_width' available for the label.
    //ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x * 0.40f);       // e.g. Use 40% width for framed widgets, leaving 60% width for labels.
    //ImGui::PushItemWidth(-ImGui::GetContentRegionAvail().x * 0.40f);      // e.g. Use 40% width for labels, leaving 60% width for framed widgets.
    //ImGui::PushItemWidth(ImGui::GetFontSize() * -12);                     // e.g. Use XXX width for labels, leaving the rest for framed widgets.

    // Menu Bar
    DemoWindowMenuBar(&demo_data);

    ImGui::Text("dear imgui says hello! (%s) (%d)", IMGUI_VERSION, IMGUI_VERSION_NUM);
    ImGui::Spacing();

    IMGUI_DEMO_MARKER("Help");
    if (ImGui::CollapsingHeader("Help"))
    {
        ImGui::SeparatorText("ABOUT THIS DEMO:");
        ImGui::BulletText("Sections below are demonstrating many aspects of the library.");
        ImGui::BulletText("The \"Examples\" menu above leads to more demo contents.");
        ImGui::BulletText("The \"Tools\" menu above gives access to: About Box, Style Editor,\n"
                          "and Metrics/Debugger (general purpose Dear ImGui debugging tool).");

        ImGui::SeparatorText("PROGRAMMER GUIDE:");
        ImGui::BulletText("See the ShowDemoWindow() code in imgui_demo.cpp. <- you are here!");
        ImGui::BulletText("See comments in imgui.cpp.");
        ImGui::BulletText("See example applications in the examples/ folder.");
        ImGui::BulletText("Read the FAQ at ");
        ImGui::SameLine(0, 0);
        ImGui::TextLinkOpenURL("https://www.dearimgui.com/faq/");
        ImGui::BulletText("Set 'io.ConfigFlags |= NavEnableKeyboard' for keyboard controls.");
        ImGui::BulletText("Set 'io.ConfigFlags |= NavEnableGamepad' for gamepad controls.");

        ImGui::SeparatorText("USER GUIDE:");
        ImGui::ShowUserGuide();
    }

    IMGUI_DEMO_MARKER("Configuration");
    if (ImGui::CollapsingHeader("Configuration"))
    {
        ImGuiIO& io = ImGui::GetIO();

        if (ImGui::TreeNode("Configuration##2"))
        {
            ImGui::SeparatorText("General");
            ImGui::CheckboxFlags("io.ConfigFlags: NavEnableKeyboard",    &io.ConfigFlags, ImGuiConfigFlags_NavEnableKeyboard);
            ImGui::SameLine(); HelpMarker("Enable keyboard controls.");
            ImGui::CheckboxFlags("io.ConfigFlags: NavEnableGamepad",     &io.ConfigFlags, ImGuiConfigFlags_NavEnableGamepad);
            ImGui::SameLine(); HelpMarker("Enable gamepad controls. Require backend to set io.BackendFlags |= ImGuiBackendFlags_HasGamepad.\n\nRead instructions in imgui.cpp for details.");
            ImGui::CheckboxFlags("io.ConfigFlags: NoMouse",              &io.ConfigFlags, ImGuiConfigFlags_NoMouse);
            ImGui::SameLine(); HelpMarker("Instruct dear imgui to disable mouse inputs and interactions.");

            // The "NoMouse" option can get us stuck with a disabled mouse! Let's provide an alternative way to fix it:
            if (io.ConfigFlags & ImGuiConfigFlags_NoMouse)
            {
                if (fmodf((float)ImGui::GetTime(), 0.40f) < 0.20f)
                {
                    ImGui::SameLine();
                    ImGui::Text("<<PRESS SPACE TO DISABLE>>");
                }
                // Prevent both being checked
                if (ImGui::IsKeyPressed(ImGuiKey_Space) || (io.ConfigFlags & ImGuiConfigFlags_NoKeyboard))
                    io.ConfigFlags &= ~ImGuiConfigFlags_NoMouse;
            }

            ImGui::CheckboxFlags("io.ConfigFlags: NoMouseCursorChange",  &io.ConfigFlags, ImGuiConfigFlags_NoMouseCursorChange);
            ImGui::SameLine(); HelpMarker("Instruct backend to not alter mouse cursor shape and visibility.");
            ImGui::CheckboxFlags("io.ConfigFlags: NoKeyboard", &io.ConfigFlags, ImGuiConfigFlags_NoKeyboard);
            ImGui::SameLine(); HelpMarker("Instruct dear imgui to disable keyboard inputs and interactions.");

            ImGui::Checkbox("io.ConfigInputTrickleEventQueue", &io.ConfigInputTrickleEventQueue);
            ImGui::SameLine(); HelpMarker("Enable input queue trickling: some types of events submitted during the same frame (e.g. button down + up) will be spread over multiple frames, improving interactions with low framerates.");
            ImGui::Checkbox("io.MouseDrawCursor", &io.MouseDrawCursor);
            ImGui::SameLine(); HelpMarker("Instruct Dear ImGui to render a mouse cursor itself. Note that a mouse cursor rendered via your application GPU rendering path will feel more laggy than hardware cursor, but will be more in sync with your other visuals.\n\nSome desktop applications may use both kinds of cursors (e.g. enable software cursor only when resizing/dragging something).");

            ImGui::SeparatorText("Keyboard/Gamepad Navigation");
            ImGui::Checkbox("io.ConfigNavSwapGamepadButtons", &io.ConfigNavSwapGamepadButtons);
            ImGui::Checkbox("io.ConfigNavMoveSetMousePos", &io.ConfigNavMoveSetMousePos);
            ImGui::SameLine(); HelpMarker("Directional/tabbing navigation teleports the mouse cursor. May be useful on TV/console systems where moving a virtual mouse is difficult");
            ImGui::Checkbox("io.ConfigNavCaptureKeyboard", &io.ConfigNavCaptureKeyboard);
            ImGui::Checkbox("io.ConfigNavEscapeClearFocusItem", &io.ConfigNavEscapeClearFocusItem);
            ImGui::SameLine(); HelpMarker("Pressing Escape clears focused item.");
            ImGui::Checkbox("io.ConfigNavEscapeClearFocusWindow", &io.ConfigNavEscapeClearFocusWindow);
            ImGui::SameLine(); HelpMarker("Pressing Escape clears focused window.");
            ImGui::Checkbox("io.ConfigNavCursorVisibleAuto", &io.ConfigNavCursorVisibleAuto);
            ImGui::SameLine(); HelpMarker("Using directional navigation key makes the cursor visible. Mouse click hides the cursor.");
            ImGui::Checkbox("io.ConfigNavCursorVisibleAlways", &io.ConfigNavCursorVisibleAlways);
            ImGui::SameLine(); HelpMarker("Navigation cursor is always visible.");

            ImGui::SeparatorText("Windows");
            ImGui::Checkbox("io.ConfigWindowsResizeFromEdges", &io.ConfigWindowsResizeFromEdges);
            ImGui::SameLine(); HelpMarker("Enable resizing of windows from their edges and from the lower-left corner.\nThis requires ImGuiBackendFlags_HasMouseCursors for better mouse cursor feedback.");
            ImGui::Checkbox("io.ConfigWindowsMoveFromTitleBarOnly", &io.ConfigWindowsMoveFromTitleBarOnly);
            ImGui::Checkbox("io.ConfigWindowsCopyContentsWithCtrlC", &io.ConfigWindowsCopyContentsWithCtrlC); // [EXPERIMENTAL]
            ImGui::SameLine(); HelpMarker("*EXPERIMENTAL* CTRL+C copy the contents of focused window into the clipboard.\n\nExperimental because:\n- (1) has known issues with nested Begin/End pairs.\n- (2) text output quality varies.\n- (3) text output is in submission order rather than spatial order.");
            ImGui::Checkbox("io.ConfigScrollbarScrollByPage", &io.ConfigScrollbarScrollByPage);
            ImGui::SameLine(); HelpMarker("Enable scrolling page by page when clicking outside the scrollbar grab.\nWhen disabled, always scroll to clicked location.\nWhen enabled, Shift+Click scrolls to clicked location.");

            ImGui::SeparatorText("Widgets");
            ImGui::Checkbox("io.ConfigInputTextCursorBlink", &io.ConfigInputTextCursorBlink);
            ImGui::SameLine(); HelpMarker("Enable blinking cursor (optional as some users consider it to be distracting).");
            ImGui::Checkbox("io.ConfigInputTextEnterKeepActive", &io.ConfigInputTextEnterKeepActive);
            ImGui::SameLine(); HelpMarker("Pressing Enter will keep item active and select contents (single-line only).");
            ImGui::Checkbox("io.ConfigDragClickToInputText", &io.ConfigDragClickToInputText);
            ImGui::SameLine(); HelpMarker("Enable turning DragXXX widgets into text input with a simple mouse click-release (without moving).");
            ImGui::Checkbox("io.ConfigMacOSXBehaviors", &io.ConfigMacOSXBehaviors);
            ImGui::SameLine(); HelpMarker("Swap Cmd<>Ctrl keys, enable various MacOS style behaviors.");
            ImGui::Text("Also see Style->Rendering for rendering options.");

            // Also read: https://github.com/ocornut/imgui/wiki/Error-Handling
            ImGui::SeparatorText("Error Handling");

            ImGui::Checkbox("io.ConfigErrorRecovery", &io.ConfigErrorRecovery);
            ImGui::SameLine(); HelpMarker(
                "Options to configure how we handle recoverable errors.\n"
                "- Error recovery is not perfect nor guaranteed! It is a feature to ease development.\n"
                "- You not are not supposed to rely on it in the course of a normal application run.\n"
                "- Possible usage: facilitate recovery from errors triggered from a scripting language or after specific exceptions handlers.\n"
                "- Always ensure that on programmers seat you have at minimum Asserts or Tooltips enabled when making direct imgui API call! "
                "Otherwise it would severely hinder your ability to catch and correct mistakes!");
            ImGui::Checkbox("io.ConfigErrorRecoveryEnableAssert", &io.ConfigErrorRecoveryEnableAssert);
            ImGui::Checkbox("io.ConfigErrorRecoveryEnableDebugLog", &io.ConfigErrorRecoveryEnableDebugLog);
            ImGui::Checkbox("io.ConfigErrorRecoveryEnableTooltip", &io.ConfigErrorRecoveryEnableTooltip);
            if (!io.ConfigErrorRecoveryEnableAssert && !io.ConfigErrorRecoveryEnableDebugLog && !io.ConfigErrorRecoveryEnableTooltip)
                io.ConfigErrorRecoveryEnableAssert = io.ConfigErrorRecoveryEnableDebugLog = io.ConfigErrorRecoveryEnableTooltip = true;

            // Also read: https://github.com/ocornut/imgui/wiki/Debug-Tools
            ImGui::SeparatorText("Debug");
            ImGui::Checkbox("io.ConfigDebugIsDebuggerPresent", &io.ConfigDebugIsDebuggerPresent);
            ImGui::SameLine(); HelpMarker("Enable various tools calling IM_DEBUG_BREAK().\n\nRequires a debugger being attached, otherwise IM_DEBUG_BREAK() options will appear to crash your application.");
            ImGui::Checkbox("io.ConfigDebugHighlightIdConflicts", &io.ConfigDebugHighlightIdConflicts);
            ImGui::SameLine(); HelpMarker("Highlight and show an error message when multiple items have conflicting identifiers.");
            ImGui::BeginDisabled();
            ImGui::Checkbox("io.ConfigDebugBeginReturnValueOnce", &io.ConfigDebugBeginReturnValueOnce);
            ImGui::EndDisabled();
            ImGui::SameLine(); HelpMarker("First calls to Begin()/BeginChild() will return false.\n\nTHIS OPTION IS DISABLED because it needs to be set at application boot-time to make sense. Showing the disabled option is a way to make this feature easier to discover.");
            ImGui::Checkbox("io.ConfigDebugBeginReturnValueLoop", &io.ConfigDebugBeginReturnValueLoop);
            ImGui::SameLine(); HelpMarker("Some calls to Begin()/BeginChild() will return false.\n\nWill cycle through window depths then repeat. Windows should be flickering while running.");
            ImGui::Checkbox("io.ConfigDebugIgnoreFocusLoss", &io.ConfigDebugIgnoreFocusLoss);
            ImGui::SameLine(); HelpMarker("Option to deactivate io.AddFocusEvent(false) handling. May facilitate interactions with a debugger when focus loss leads to clearing inputs data.");
            ImGui::Checkbox("io.ConfigDebugIniSettings", &io.ConfigDebugIniSettings);
            ImGui::SameLine(); HelpMarker("Option to save .ini data with extra comments (particularly helpful for Docking, but makes saving slower).");

            ImGui::TreePop();
            ImGui::Spacing();
        }

        IMGUI_DEMO_MARKER("Configuration/Backend Flags");
        if (ImGui::TreeNode("Backend Flags"))
        {
            HelpMarker(
                "Those flags are set by the backends (imgui_impl_xxx files) to specify their capabilities.\n"
                "Here we expose them as read-only fields to avoid breaking interactions with your backend.");

            // FIXME: Maybe we need a BeginReadonly() equivalent to keep label bright?
            ImGui::BeginDisabled();
            ImGui::CheckboxFlags("io.BackendFlags: HasGamepad",           &io.BackendFlags, ImGuiBackendFlags_HasGamepad);
            ImGui::CheckboxFlags("io.BackendFlags: HasMouseCursors",      &io.BackendFlags, ImGuiBackendFlags_HasMouseCursors);
            ImGui::CheckboxFlags("io.BackendFlags: HasSetMousePos",       &io.BackendFlags, ImGuiBackendFlags_HasSetMousePos);
            ImGui::CheckboxFlags("io.BackendFlags: RendererHasVtxOffset", &io.BackendFlags, ImGuiBackendFlags_RendererHasVtxOffset);
            ImGui::CheckboxFlags("io.BackendFlags: RendererHasTextures",  &io.BackendFlags, ImGuiBackendFlags_RendererHasTextures);
            ImGui::EndDisabled();

            ImGui::TreePop();
            ImGui::Spacing();
        }

        IMGUI_DEMO_MARKER("Configuration/Style, Fonts");
        if (ImGui::TreeNode("Style, Fonts"))
        {
            ImGui::Checkbox("Style Editor", &demo_data.ShowStyleEditor);
            ImGui::SameLine();
            HelpMarker("The same contents can be accessed in 'Tools->Style Editor' or by calling the ShowStyleEditor() function.");
            ImGui::TreePop();
            ImGui::Spacing();
        }

        IMGUI_DEMO_MARKER("Configuration/Capture, Logging");
        if (ImGui::TreeNode("Capture/Logging"))
        {
            HelpMarker(
                "The logging API redirects all text output so you can easily capture the content of "
                "a window or a block. Tree nodes can be automatically expanded.\n"
                "Try opening any of the contents below in this window and then click one of the \"Log To\" button.");
            ImGui::LogButtons();

            HelpMarker("You can also call ImGui::LogText() to output directly to the log without a visual output.");
            if (ImGui::Button("Copy \"Hello, world!\" to clipboard"))
            {
                ImGui::LogToClipboard();
                ImGui::LogText("Hello, world!");
                ImGui::LogFinish();
            }
            ImGui::TreePop();
        }
    }

    IMGUI_DEMO_MARKER("Window options");
    if (ImGui::CollapsingHeader("Window options"))
    {
        if (ImGui::BeginTable("split", 3))
        {
            ImGui::TableNextColumn(); ImGui::Checkbox("No titlebar", &no_titlebar);
            ImGui::TableNextColumn(); ImGui::Checkbox("No scrollbar", &no_scrollbar);
            ImGui::TableNextColumn(); ImGui::Checkbox("No menu", &no_menu);
            ImGui::TableNextColumn(); ImGui::Checkbox("No move", &no_move);
            ImGui::TableNextColumn(); ImGui::Checkbox("No resize", &no_resize);
            ImGui::TableNextColumn(); ImGui::Checkbox("No collapse", &no_collapse);
            ImGui::TableNextColumn(); ImGui::Checkbox("No close", &no_close);
            ImGui::TableNextColumn(); ImGui::Checkbox("No nav", &no_nav);
            ImGui::TableNextColumn(); ImGui::Checkbox("No background", &no_background);
            ImGui::TableNextColumn(); ImGui::Checkbox("No bring to front", &no_bring_to_front);
            ImGui::TableNextColumn(); ImGui::Checkbox("Unsaved document", &unsaved_document);
            ImGui::EndTable();
        }
    }

    // All demo contents
    DemoWindowWidgets(&demo_data);
    DemoWindowLayout();
    DemoWindowPopups();
    DemoWindowTables();
    DemoWindowInputs();

    // End of ShowDemoWindow()
    ImGui::PopItemWidth();
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowMenuBar()
//-----------------------------------------------------------------------------

static void DemoWindowMenuBar(ImGuiDemoWindowData* demo_data)
{
    IMGUI_DEMO_MARKER("Menu");
    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("Menu"))
        {
            IMGUI_DEMO_MARKER("Menu/File");
            ShowExampleMenuFile();
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Examples"))
        {
            IMGUI_DEMO_MARKER("Menu/Examples");
            ImGui::MenuItem("Main menu bar", NULL, &demo_data->ShowMainMenuBar);

            ImGui::SeparatorText("Mini apps");
            ImGui::MenuItem("Assets Browser", NULL, &demo_data->ShowAppAssetsBrowser);
            ImGui::MenuItem("Console", NULL, &demo_data->ShowAppConsole);
            ImGui::MenuItem("Custom rendering", NULL, &demo_data->ShowAppCustomRendering);
            ImGui::MenuItem("Documents", NULL, &demo_data->ShowAppDocuments);
            ImGui::MenuItem("Log", NULL, &demo_data->ShowAppLog);
            ImGui::MenuItem("Property editor", NULL, &demo_data->ShowAppPropertyEditor);
            ImGui::MenuItem("Simple layout", NULL, &demo_data->ShowAppLayout);
            ImGui::MenuItem("Simple overlay", NULL, &demo_data->ShowAppSimpleOverlay);

            ImGui::SeparatorText("Concepts");
            ImGui::MenuItem("Auto-resizing window", NULL, &demo_data->ShowAppAutoResize);
            ImGui::MenuItem("Constrained-resizing window", NULL, &demo_data->ShowAppConstrainedResize);
            ImGui::MenuItem("Fullscreen window", NULL, &demo_data->ShowAppFullscreen);
            ImGui::MenuItem("Long text display", NULL, &demo_data->ShowAppLongText);
            ImGui::MenuItem("Manipulating window titles", NULL, &demo_data->ShowAppWindowTitles);

            ImGui::EndMenu();
        }
        //if (ImGui::MenuItem("MenuItem")) {} // You can also use MenuItem() inside a menu bar!
        if (ImGui::BeginMenu("Tools"))
        {
            IMGUI_DEMO_MARKER("Menu/Tools");
            ImGuiIO& io = ImGui::GetIO();
#ifndef IMGUI_DISABLE_DEBUG_TOOLS
            const bool has_debug_tools = true;
#else
            const bool has_debug_tools = false;
#endif
            ImGui::MenuItem("Metrics/Debugger", NULL, &demo_data->ShowMetrics, has_debug_tools);
            if (ImGui::BeginMenu("Debug Options"))
            {
                ImGui::BeginDisabled(!has_debug_tools);
                ImGui::Checkbox("Highlight ID Conflicts", &io.ConfigDebugHighlightIdConflicts);
                ImGui::EndDisabled();
                ImGui::Checkbox("Assert on error recovery", &io.ConfigErrorRecoveryEnableAssert);
                ImGui::TextDisabled("(see Demo->Configuration for details & more)");
                ImGui::EndMenu();
            }
            ImGui::MenuItem("Debug Log", NULL, &demo_data->ShowDebugLog, has_debug_tools);
            ImGui::MenuItem("ID Stack Tool", NULL, &demo_data->ShowIDStackTool, has_debug_tools);
            bool is_debugger_present = io.ConfigDebugIsDebuggerPresent;
            if (ImGui::MenuItem("Item Picker", NULL, false, has_debug_tools))// && is_debugger_present))
                ImGui::DebugStartItemPicker();
            if (!is_debugger_present)
                ImGui::SetItemTooltip("Requires io.ConfigDebugIsDebuggerPresent=true to be set.\n\nWe otherwise disable some extra features to avoid casual users crashing the application.");
            ImGui::MenuItem("Style Editor", NULL, &demo_data->ShowStyleEditor);
            ImGui::MenuItem("About Dear ImGui", NULL, &demo_data->ShowAbout);

            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] Helpers: ExampleTreeNode, ExampleMemberInfo (for use by Property Editor & Multi-Select demos)
//-----------------------------------------------------------------------------

// Simple representation for a tree
// (this is designed to be simple to understand for our demos, not to be fancy or efficient etc.)
struct ExampleTreeNode
{
    // Tree structure
    char                        Name[28] = "";
    int                         UID = 0;
    ExampleTreeNode* Parent = NULL;
    ImVector<ExampleTreeNode*>  Childs;
    unsigned short              IndexInParent = 0;  // Maintaining this allows us to implement linear traversal more easily

    // Leaf Data
    bool                        HasData = false;    // All leaves have data
    bool                        DataMyBool = true;
    int                         DataMyInt = 128;
    ImVec2                      DataMyVec2 = ImVec2(0.0f, 3.141592f);
};

// Simple representation of struct metadata/serialization data.
// (this is a minimal version of what a typical advanced application may provide)
struct ExampleMemberInfo
{
    const char* Name;       // Member name
    ImGuiDataType   DataType;   // Member type
    int             DataCount;  // Member count (1 when scalar)
    int             Offset;     // Offset inside parent structure
};

// Metadata description of ExampleTreeNode struct.
static const ExampleMemberInfo ExampleTreeNodeMemberInfos[]
{
    { "MyName",     ImGuiDataType_String,  1, offsetof(ExampleTreeNode, Name) },
    { "MyBool",     ImGuiDataType_Bool,    1, offsetof(ExampleTreeNode, DataMyBool) },
    { "MyInt",      ImGuiDataType_S32,     1, offsetof(ExampleTreeNode, DataMyInt) },
    { "MyVec2",     ImGuiDataType_Float,   2, offsetof(ExampleTreeNode, DataMyVec2) },
};

static ExampleTreeNode* ExampleTree_CreateNode(const char* name, int uid, ExampleTreeNode* parent)
{
    ExampleTreeNode* node = IM_NEW(ExampleTreeNode);
    snprintf(node->Name, IM_ARRAYSIZE(node->Name), "%s", name);
    node->UID = uid;
    node->Parent = parent;
    node->IndexInParent = parent ? (unsigned short)parent->Childs.Size : 0;
    if (parent)
        parent->Childs.push_back(node);
    return node;
}

static void ExampleTree_DestroyNode(ExampleTreeNode* node)
{
    for (ExampleTreeNode* child_node : node->Childs)
        ExampleTree_DestroyNode(child_node);
    IM_DELETE(node);
}

// Create example tree data
// (this allocates _many_ more times than most other code in either Dear ImGui or others demo)
static ExampleTreeNode* ExampleTree_CreateDemoTree()
{
    static const char* root_names[] = { "Apple", "Banana", "Cherry", "Kiwi", "Mango", "Orange", "Pear", "Pineapple", "Strawberry", "Watermelon" };
    const size_t NAME_MAX_LEN = sizeof(ExampleTreeNode::Name);
    char name_buf[NAME_MAX_LEN];
    int uid = 0;
    ExampleTreeNode* node_L0 = ExampleTree_CreateNode("<ROOT>", ++uid, NULL);
    const int root_items_multiplier = 2;
    for (int idx_L0 = 0; idx_L0 < IM_ARRAYSIZE(root_names) * root_items_multiplier; idx_L0++)
    {
        snprintf(name_buf, IM_ARRAYSIZE(name_buf), "%s %d", root_names[idx_L0 / root_items_multiplier], idx_L0 % root_items_multiplier);
        ExampleTreeNode* node_L1 = ExampleTree_CreateNode(name_buf, ++uid, node_L0);
        const int number_of_childs = (int)strlen(node_L1->Name);
        for (int idx_L1 = 0; idx_L1 < number_of_childs; idx_L1++)
        {
            snprintf(name_buf, IM_ARRAYSIZE(name_buf), "Child %d", idx_L1);
            ExampleTreeNode* node_L2 = ExampleTree_CreateNode(name_buf, ++uid, node_L1);
            node_L2->HasData = true;
            if (idx_L1 == 0)
            {
                snprintf(name_buf, IM_ARRAYSIZE(name_buf), "Sub-child %d", 0);
                ExampleTreeNode* node_L3 = ExampleTree_CreateNode(name_buf, ++uid, node_L2);
                node_L3->HasData = true;
            }
        }
    }
    return node_L0;
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsBasic()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsBasic()
{
    IMGUI_DEMO_MARKER("Widgets/Basic");
    if (ImGui::TreeNode("Basic"))
    {
        ImGui::SeparatorText("General");

        IMGUI_DEMO_MARKER("Widgets/Basic/Button");
        static int clicked = 0;
        if (ImGui::Button("Button"))
            clicked++;
        if (clicked & 1)
        {
            ImGui::SameLine();
            ImGui::Text("Thanks for clicking me!");
        }

        IMGUI_DEMO_MARKER("Widgets/Basic/Checkbox");
        static bool check = true;
        ImGui::Checkbox("checkbox", &check);

        IMGUI_DEMO_MARKER("Widgets/Basic/RadioButton");
        static int e = 0;
        ImGui::RadioButton("radio a", &e, 0); ImGui::SameLine();
        ImGui::RadioButton("radio b", &e, 1); ImGui::SameLine();
        ImGui::RadioButton("radio c", &e, 2);

        ImGui::AlignTextToFramePadding();
        ImGui::TextLinkOpenURL("Hyperlink", "https://github.com/ocornut/imgui/wiki/Error-Handling");

        // Color buttons, demonstrate using PushID() to add unique identifier in the ID stack, and changing style.
        IMGUI_DEMO_MARKER("Widgets/Basic/Buttons (Colored)");
        for (int i = 0; i < 7; i++)
        {
            if (i > 0)
                ImGui::SameLine();
            ImGui::PushID(i);
            ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(i / 7.0f, 0.6f, 0.6f));
            ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(i / 7.0f, 0.7f, 0.7f));
            ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(i / 7.0f, 0.8f, 0.8f));
            ImGui::Button("Click");
            ImGui::PopStyleColor(3);
            ImGui::PopID();
        }

        // Use AlignTextToFramePadding() to align text baseline to the baseline of framed widgets elements
        // (otherwise a Text+SameLine+Button sequence will have the text a little too high by default!)
        // See 'Demo->Layout->Text Baseline Alignment' for details.
        ImGui::AlignTextToFramePadding();
        ImGui::Text("Hold to repeat:");
        ImGui::SameLine();

        // Arrow buttons with Repeater
        IMGUI_DEMO_MARKER("Widgets/Basic/Buttons (Repeating)");
        static int counter = 0;
        float spacing = ImGui::GetStyle().ItemInnerSpacing.x;
        ImGui::PushItemFlag(ImGuiItemFlags_ButtonRepeat, true);
        if (ImGui::ArrowButton("##left", ImGuiDir_Left)) { counter--; }
        ImGui::SameLine(0.0f, spacing);
        if (ImGui::ArrowButton("##right", ImGuiDir_Right)) { counter++; }
        ImGui::PopItemFlag();
        ImGui::SameLine();
        ImGui::Text("%d", counter);

        ImGui::Button("Tooltip");
        ImGui::SetItemTooltip("I am a tooltip");

        ImGui::LabelText("label", "Value");

        ImGui::SeparatorText("Inputs");

        {
            // To wire InputText() with std::string or any other custom string type,
            // see the "Text Input > Resize Callback" section of this demo, and the misc/cpp/imgui_stdlib.h file.
            IMGUI_DEMO_MARKER("Widgets/Basic/InputText");
            static char str0[128] = "Hello, world!";
            ImGui::InputText("input text", str0, IM_ARRAYSIZE(str0));
            ImGui::SameLine(); HelpMarker(
                "USER:\n"
                "Hold SHIFT or use mouse to select text.\n"
                "CTRL+Left/Right to word jump.\n"
                "CTRL+A or Double-Click to select all.\n"
                "CTRL+X,CTRL+C,CTRL+V for clipboard.\n"
                "CTRL+Z to undo, CTRL+Y/CTRL+SHIFT+Z to redo.\n"
                "ESCAPE to revert.\n\n"
                "PROGRAMMER:\n"
                "You can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputText() "
                "to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example (this is not demonstrated "
                "in imgui_demo.cpp).");

            static char str1[128] = "";
            ImGui::InputTextWithHint("input text (w/ hint)", "enter text here", str1, IM_ARRAYSIZE(str1));

            IMGUI_DEMO_MARKER("Widgets/Basic/InputInt, InputFloat");
            static int i0 = 123;
            ImGui::InputInt("input int", &i0);

            static float f0 = 0.001f;
            ImGui::InputFloat("input float", &f0, 0.01f, 1.0f, "%.3f");

            static double d0 = 999999.00000001;
            ImGui::InputDouble("input double", &d0, 0.01f, 1.0f, "%.8f");

            static float f1 = 1.e10f;
            ImGui::InputFloat("input scientific", &f1, 0.0f, 0.0f, "%e");
            ImGui::SameLine(); HelpMarker(
                "You can input value using the scientific notation,\n"
                "  e.g. \"1e+8\" becomes \"100000000\".");

            static float vec4a[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
            ImGui::InputFloat3("input float3", vec4a);
        }

        ImGui::SeparatorText("Drags");

        {
            IMGUI_DEMO_MARKER("Widgets/Basic/DragInt, DragFloat");
            static int i1 = 50, i2 = 42, i3 = 128;
            ImGui::DragInt("drag int", &i1, 1);
            ImGui::SameLine(); HelpMarker(
                "Click and drag to edit value.\n"
                "Hold SHIFT/ALT for faster/slower edit.\n"
                "Double-click or CTRL+click to input value.");
            ImGui::DragInt("drag int 0..100", &i2, 1, 0, 100, "%d%%", ImGuiSliderFlags_AlwaysClamp);
            ImGui::DragInt("drag int wrap 100..200", &i3, 1, 100, 200, "%d", ImGuiSliderFlags_WrapAround);

            static float f1 = 1.00f, f2 = 0.0067f;
            ImGui::DragFloat("drag float", &f1, 0.005f);
            ImGui::DragFloat("drag small float", &f2, 0.0001f, 0.0f, 0.0f, "%.06f ns");
            //ImGui::DragFloat("drag wrap -1..1", &f3, 0.005f, -1.0f, 1.0f, NULL, ImGuiSliderFlags_WrapAround);
        }

        ImGui::SeparatorText("Sliders");

        {
            IMGUI_DEMO_MARKER("Widgets/Basic/SliderInt, SliderFloat");
            static int i1 = 0;
            ImGui::SliderInt("slider int", &i1, -1, 3);
            ImGui::SameLine(); HelpMarker("CTRL+click to input value.");

            static float f1 = 0.123f, f2 = 0.0f;
            ImGui::SliderFloat("slider float", &f1, 0.0f, 1.0f, "ratio = %.3f");
            ImGui::SliderFloat("slider float (log)", &f2, -10.0f, 10.0f, "%.4f", ImGuiSliderFlags_Logarithmic);

            IMGUI_DEMO_MARKER("Widgets/Basic/SliderAngle");
            static float angle = 0.0f;
            ImGui::SliderAngle("slider angle", &angle);

            // Using the format string to display a name instead of an integer.
            // Here we completely omit '%d' from the format string, so it'll only display a name.
            // This technique can also be used with DragInt().
            IMGUI_DEMO_MARKER("Widgets/Basic/Slider (enum)");
            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUNT };
            static int elem = Element_Fire;
            const char* elems_names[Element_COUNT] = { "Fire", "Earth", "Air", "Water" };
            const char* elem_name = (elem >= 0 && elem < Element_COUNT) ? elems_names[elem] : "Unknown";
            ImGui::SliderInt("slider enum", &elem, 0, Element_COUNT - 1, elem_name); // Use ImGuiSliderFlags_NoInput flag to disable CTRL+Click here.
            ImGui::SameLine(); HelpMarker("Using the format string parameter to display a name instead of the underlying integer.");
        }

        ImGui::SeparatorText("Selectors/Pickers");

        {
            IMGUI_DEMO_MARKER("Widgets/Basic/ColorEdit3, ColorEdit4");
            static float col1[3] = { 1.0f, 0.0f, 0.2f };
            static float col2[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
            ImGui::ColorEdit3("color 1", col1);
            ImGui::SameLine(); HelpMarker(
                "Click on the color square to open a color picker.\n"
                "Click and hold to use drag and drop.\n"
                "Right-click on the color square to show options.\n"
                "CTRL+click on individual component to input value.\n");

            ImGui::ColorEdit4("color 2", col2);
        }

        {
            // Using the _simplified_ one-liner Combo() api here
            // See "Combo" section for examples of how to use the more flexible BeginCombo()/EndCombo() api.
            IMGUI_DEMO_MARKER("Widgets/Basic/Combo");
            const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIIIIII", "JJJJ", "KKKKKKK" };
            static int item_current = 0;
            ImGui::Combo("combo", &item_current, items, IM_ARRAYSIZE(items));
            ImGui::SameLine(); HelpMarker(
                "Using the simplified one-liner Combo API here.\n"
                "Refer to the \"Combo\" section below for an explanation of how to use the more flexible and general BeginCombo/EndCombo API.");
        }

        {
            // Using the _simplified_ one-liner ListBox() api here
            // See "List boxes" section for examples of how to use the more flexible BeginListBox()/EndListBox() api.
            IMGUI_DEMO_MARKER("Widgets/Basic/ListBox");
            const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi", "Mango", "Orange", "Pineapple", "Strawberry", "Watermelon" };
            static int item_current = 1;
            ImGui::ListBox("listbox", &item_current, items, IM_ARRAYSIZE(items), 4);
            ImGui::SameLine(); HelpMarker(
                "Using the simplified one-liner ListBox API here.\n"
                "Refer to the \"List boxes\" section below for an explanation of how to use the more flexible and general BeginListBox/EndListBox API.");
        }

        // Testing ImGuiOnceUponAFrame helper.
        //static ImGuiOnceUponAFrame once;
        //for (int i = 0; i < 5; i++)
        //    if (once)
        //        ImGui::Text("This will be displayed only once.");

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsBullets()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsBullets()
{
    IMGUI_DEMO_MARKER("Widgets/Bullets");
    if (ImGui::TreeNode("Bullets"))
    {
        ImGui::BulletText("Bullet point 1");
        ImGui::BulletText("Bullet point 2\nOn multiple lines");
        if (ImGui::TreeNode("Tree node"))
        {
            ImGui::BulletText("Another bullet point");
            ImGui::TreePop();
        }
        ImGui::Bullet(); ImGui::Text("Bullet point 3 (two calls)");
        ImGui::Bullet(); ImGui::SmallButton("Button");
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsCollapsingHeaders()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsCollapsingHeaders()
{
    IMGUI_DEMO_MARKER("Widgets/Collapsing Headers");
    if (ImGui::TreeNode("Collapsing Headers"))
    {
        static bool closable_group = true;
        ImGui::Checkbox("Show 2nd header", &closable_group);
        if (ImGui::CollapsingHeader("Header", ImGuiTreeNodeFlags_None))
        {
            ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());
            for (int i = 0; i < 5; i++)
                ImGui::Text("Some content %d", i);
        }
        if (ImGui::CollapsingHeader("Header with a close button", &closable_group))
        {
            ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());
            for (int i = 0; i < 5; i++)
                ImGui::Text("More content %d", i);
        }
        /*
        if (ImGui::CollapsingHeader("Header with a bullet", ImGuiTreeNodeFlags_Bullet))
            ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());
        */
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsColorAndPickers()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsColorAndPickers()
{
    IMGUI_DEMO_MARKER("Widgets/Color");
    if (ImGui::TreeNode("Color/Picker Widgets"))
    {
        static ImVec4 color = ImVec4(114.0f / 255.0f, 144.0f / 255.0f, 154.0f / 255.0f, 200.0f / 255.0f);
        static ImGuiColorEditFlags base_flags = ImGuiColorEditFlags_None;

        ImGui::SeparatorText("Options");
        ImGui::CheckboxFlags("ImGuiColorEditFlags_NoAlpha", &base_flags, ImGuiColorEditFlags_NoAlpha);
        ImGui::CheckboxFlags("ImGuiColorEditFlags_AlphaOpaque", &base_flags, ImGuiColorEditFlags_AlphaOpaque);
        ImGui::CheckboxFlags("ImGuiColorEditFlags_AlphaNoBg", &base_flags, ImGuiColorEditFlags_AlphaNoBg);
        ImGui::CheckboxFlags("ImGuiColorEditFlags_AlphaPreviewHalf", &base_flags, ImGuiColorEditFlags_AlphaPreviewHalf);
        ImGui::CheckboxFlags("ImGuiColorEditFlags_NoDragDrop", &base_flags, ImGuiColorEditFlags_NoDragDrop);
        ImGui::CheckboxFlags("ImGuiColorEditFlags_NoOptions", &base_flags, ImGuiColorEditFlags_NoOptions); ImGui::SameLine(); HelpMarker("Right-click on the individual color widget to show options.");
        ImGui::CheckboxFlags("ImGuiColorEditFlags_HDR", &base_flags, ImGuiColorEditFlags_HDR); ImGui::SameLine(); HelpMarker("Currently all this does is to lift the 0..1 limits on dragging widgets.");

        IMGUI_DEMO_MARKER("Widgets/Color/ColorEdit");
        ImGui::SeparatorText("Inline color editor");
        ImGui::Text("Color widget:");
        ImGui::SameLine(); HelpMarker(
            "Click on the color square to open a color picker.\n"
            "CTRL+click on individual component to input value.\n");
        ImGui::ColorEdit3("MyColor##1", (float*)&color, base_flags);

        IMGUI_DEMO_MARKER("Widgets/Color/ColorEdit (HSV, with Alpha)");
        ImGui::Text("Color widget HSV with Alpha:");
        ImGui::ColorEdit4("MyColor##2", (float*)&color, ImGuiColorEditFlags_DisplayHSV | base_flags);

        IMGUI_DEMO_MARKER("Widgets/Color/ColorEdit (float display)");
        ImGui::Text("Color widget with Float Display:");
        ImGui::ColorEdit4("MyColor##2f", (float*)&color, ImGuiColorEditFlags_Float | base_flags);

        IMGUI_DEMO_MARKER("Widgets/Color/ColorButton (with Picker)");
        ImGui::Text("Color button with Picker:");
        ImGui::SameLine(); HelpMarker(
            "With the ImGuiColorEditFlags_NoInputs flag you can hide all the slider/text inputs.\n"
            "With the ImGuiColorEditFlags_NoLabel flag you can pass a non-empty label which will only "
            "be used for the tooltip and picker popup.");
        ImGui::ColorEdit4("MyColor##3", (float*)&color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel | base_flags);

        IMGUI_DEMO_MARKER("Widgets/Color/ColorButton (with custom Picker popup)");
        ImGui::Text("Color button with Custom Picker Popup:");

        // Generate a default palette. The palette will persist and can be edited.
        static bool saved_palette_init = true;
        static ImVec4 saved_palette[32] = {};
        if (saved_palette_init)
        {
            for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)
            {
                ImGui::ColorConvertHSVtoRGB(n / 31.0f, 0.8f, 0.8f,
                    saved_palette[n].x, saved_palette[n].y, saved_palette[n].z);
                saved_palette[n].w = 1.0f; // Alpha
            }
            saved_palette_init = false;
        }

        static ImVec4 backup_color;
        bool open_popup = ImGui::ColorButton("MyColor##3b", color, base_flags);
        ImGui::SameLine(0, ImGui::GetStyle().ItemInnerSpacing.x);
        open_popup |= ImGui::Button("Palette");
        if (open_popup)
        {
            ImGui::OpenPopup("mypicker");
            backup_color = color;
        }
        if (ImGui::BeginPopup("mypicker"))
        {
            ImGui::Text("MY CUSTOM COLOR PICKER WITH AN AMAZING PALETTE!");
            ImGui::Separator();
            ImGui::ColorPicker4("##picker", (float*)&color, base_flags | ImGuiColorEditFlags_NoSidePreview | ImGuiColorEditFlags_NoSmallPreview);
            ImGui::SameLine();

            ImGui::BeginGroup(); // Lock X position
            ImGui::Text("Current");
            ImGui::ColorButton("##current", color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60, 40));
            ImGui::Text("Previous");
            if (ImGui::ColorButton("##previous", backup_color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60, 40)))
                color = backup_color;
            ImGui::Separator();
            ImGui::Text("Palette");
            for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)
            {
                ImGui::PushID(n);
                if ((n % 8) != 0)
                    ImGui::SameLine(0.0f, ImGui::GetStyle().ItemSpacing.y);

                ImGuiColorEditFlags palette_button_flags = ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_NoTooltip;
                if (ImGui::ColorButton("##palette", saved_palette[n], palette_button_flags, ImVec2(20, 20)))
                    color = ImVec4(saved_palette[n].x, saved_palette[n].y, saved_palette[n].z, color.w); // Preserve alpha!

                // Allow user to drop colors into each palette entry. Note that ColorButton() is already a
                // drag source by default, unless specifying the ImGuiColorEditFlags_NoDragDrop flag.
                if (ImGui::BeginDragDropTarget())
                {
                    if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F))
                        memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 3);
                    if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F))
                        memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 4);
                    ImGui::EndDragDropTarget();
                }

                ImGui::PopID();
            }
            ImGui::EndGroup();
            ImGui::EndPopup();
        }

        IMGUI_DEMO_MARKER("Widgets/Color/ColorButton (simple)");
        ImGui::Text("Color button only:");
        static bool no_border = false;
        ImGui::Checkbox("ImGuiColorEditFlags_NoBorder", &no_border);
        ImGui::ColorButton("MyColor##3c", *(ImVec4*)&color, base_flags | (no_border ? ImGuiColorEditFlags_NoBorder : 0), ImVec2(80, 80));

        IMGUI_DEMO_MARKER("Widgets/Color/ColorPicker");
        ImGui::SeparatorText("Color picker");

        static bool ref_color = false;
        static ImVec4 ref_color_v(1.0f, 0.0f, 1.0f, 0.5f);
        static int picker_mode = 0;
        static int display_mode = 0;
        static ImGuiColorEditFlags color_picker_flags = ImGuiColorEditFlags_AlphaBar;

        ImGui::PushID("Color picker");
        ImGui::CheckboxFlags("ImGuiColorEditFlags_NoAlpha", &color_picker_flags, ImGuiColorEditFlags_NoAlpha);
        ImGui::CheckboxFlags("ImGuiColorEditFlags_AlphaBar", &color_picker_flags, ImGuiColorEditFlags_AlphaBar);
        ImGui::CheckboxFlags("ImGuiColorEditFlags_NoSidePreview", &color_picker_flags, ImGuiColorEditFlags_NoSidePreview);
        if (color_picker_flags & ImGuiColorEditFlags_NoSidePreview)
        {
            ImGui::SameLine();
            ImGui::Checkbox("With Ref Color", &ref_color);
            if (ref_color)
            {
                ImGui::SameLine();
                ImGui::ColorEdit4("##RefColor", &ref_color_v.x, ImGuiColorEditFlags_NoInputs | base_flags);
            }
        }

        ImGui::Combo("Picker Mode", &picker_mode, "Auto/Current\0ImGuiColorEditFlags_PickerHueBar\0ImGuiColorEditFlags_PickerHueWheel\0");
        ImGui::SameLine(); HelpMarker("When not specified explicitly, user can right-click the picker to change mode.");

        ImGui::Combo("Display Mode", &display_mode, "Auto/Current\0ImGuiColorEditFlags_NoInputs\0ImGuiColorEditFlags_DisplayRGB\0ImGuiColorEditFlags_DisplayHSV\0ImGuiColorEditFlags_DisplayHex\0");
        ImGui::SameLine(); HelpMarker(
            "ColorEdit defaults to displaying RGB inputs if you don't specify a display mode, "
            "but the user can change it with a right-click on those inputs.\n\nColorPicker defaults to displaying RGB+HSV+Hex "
            "if you don't specify a display mode.\n\nYou can change the defaults using SetColorEditOptions().");

        ImGuiColorEditFlags flags = base_flags | color_picker_flags;
        if (picker_mode == 1)  flags |= ImGuiColorEditFlags_PickerHueBar;
        if (picker_mode == 2)  flags |= ImGuiColorEditFlags_PickerHueWheel;
        if (display_mode == 1) flags |= ImGuiColorEditFlags_NoInputs;       // Disable all RGB/HSV/Hex displays
        if (display_mode == 2) flags |= ImGuiColorEditFlags_DisplayRGB;     // Override display mode
        if (display_mode == 3) flags |= ImGuiColorEditFlags_DisplayHSV;
        if (display_mode == 4) flags |= ImGuiColorEditFlags_DisplayHex;
        ImGui::ColorPicker4("MyColor##4", (float*)&color, flags, ref_color ? &ref_color_v.x : NULL);

        ImGui::Text("Set defaults in code:");
        ImGui::SameLine(); HelpMarker(
            "SetColorEditOptions() is designed to allow you to set boot-time default.\n"
            "We don't have Push/Pop functions because you can force options on a per-widget basis if needed, "
            "and the user can change non-forced ones with the options menu.\nWe don't have a getter to avoid "
            "encouraging you to persistently save values that aren't forward-compatible.");
        if (ImGui::Button("Default: Uint8 + HSV + Hue Bar"))
            ImGui::SetColorEditOptions(ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_PickerHueBar);
        if (ImGui::Button("Default: Float + HDR + Hue Wheel"))
            ImGui::SetColorEditOptions(ImGuiColorEditFlags_Float | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_PickerHueWheel);

        // Always display a small version of both types of pickers
        // (that's in order to make it more visible in the demo to people who are skimming quickly through it)
        ImGui::Text("Both types:");
        float w = (ImGui::GetContentRegionAvail().x - ImGui::GetStyle().ItemSpacing.y) * 0.40f;
        ImGui::SetNextItemWidth(w);
        ImGui::ColorPicker3("##MyColor##5", (float*)&color, ImGuiColorEditFlags_PickerHueBar | ImGuiColorEditFlags_NoSidePreview | ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoAlpha);
        ImGui::SameLine();
        ImGui::SetNextItemWidth(w);
        ImGui::ColorPicker3("##MyColor##6", (float*)&color, ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFlags_NoSidePreview | ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoAlpha);
        ImGui::PopID();

        // HSV encoded support (to avoid RGB<>HSV round trips and singularities when S==0 or V==0)
        static ImVec4 color_hsv(0.23f, 1.0f, 1.0f, 1.0f); // Stored as HSV!
        ImGui::Spacing();
        ImGui::Text("HSV encoded colors");
        ImGui::SameLine(); HelpMarker(
            "By default, colors are given to ColorEdit and ColorPicker in RGB, but ImGuiColorEditFlags_InputHSV "
            "allows you to store colors as HSV and pass them to ColorEdit and ColorPicker as HSV. This comes with the "
            "added benefit that you can manipulate hue values with the picker even when saturation or value are zero.");
        ImGui::Text("Color widget with InputHSV:");
        ImGui::ColorEdit4("HSV shown as RGB##1", (float*)&color_hsv, ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputHSV | ImGuiColorEditFlags_Float);
        ImGui::ColorEdit4("HSV shown as HSV##1", (float*)&color_hsv, ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_InputHSV | ImGuiColorEditFlags_Float);
        ImGui::DragFloat4("Raw HSV values", (float*)&color_hsv, 0.01f, 0.0f, 1.0f);

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsComboBoxes()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsComboBoxes()
{
    IMGUI_DEMO_MARKER("Widgets/Combo");
    if (ImGui::TreeNode("Combo"))
    {
        // Combo Boxes are also called "Dropdown" in other systems
        // Expose flags as checkbox for the demo
        static ImGuiComboFlags flags = 0;
        ImGui::CheckboxFlags("ImGuiComboFlags_PopupAlignLeft", &flags, ImGuiComboFlags_PopupAlignLeft);
        ImGui::SameLine(); HelpMarker("Only makes a difference if the popup is larger than the combo");
        if (ImGui::CheckboxFlags("ImGuiComboFlags_NoArrowButton", &flags, ImGuiComboFlags_NoArrowButton))
            flags &= ~ImGuiComboFlags_NoPreview;     // Clear incompatible flags
        if (ImGui::CheckboxFlags("ImGuiComboFlags_NoPreview", &flags, ImGuiComboFlags_NoPreview))
            flags &= ~(ImGuiComboFlags_NoArrowButton | ImGuiComboFlags_WidthFitPreview); // Clear incompatible flags
        if (ImGui::CheckboxFlags("ImGuiComboFlags_WidthFitPreview", &flags, ImGuiComboFlags_WidthFitPreview))
            flags &= ~ImGuiComboFlags_NoPreview;

        // Override default popup height
        if (ImGui::CheckboxFlags("ImGuiComboFlags_HeightSmall", &flags, ImGuiComboFlags_HeightSmall))
            flags &= ~(ImGuiComboFlags_HeightMask_ & ~ImGuiComboFlags_HeightSmall);
        if (ImGui::CheckboxFlags("ImGuiComboFlags_HeightRegular", &flags, ImGuiComboFlags_HeightRegular))
            flags &= ~(ImGuiComboFlags_HeightMask_ & ~ImGuiComboFlags_HeightRegular);
        if (ImGui::CheckboxFlags("ImGuiComboFlags_HeightLargest", &flags, ImGuiComboFlags_HeightLargest))
            flags &= ~(ImGuiComboFlags_HeightMask_ & ~ImGuiComboFlags_HeightLargest);

        // Using the generic BeginCombo() API, you have full control over how to display the combo contents.
        // (your selection data could be an index, a pointer to the object, an id for the object, a flag intrusively
        // stored in the object itself, etc.)
        const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };
        static int item_selected_idx = 0; // Here we store our selection data as an index.

        // Pass in the preview value visible before opening the combo (it could technically be different contents or not pulled from items[])
        const char* combo_preview_value = items[item_selected_idx];
        if (ImGui::BeginCombo("combo 1", combo_preview_value, flags))
        {
            for (int n = 0; n < IM_ARRAYSIZE(items); n++)
            {
                const bool is_selected = (item_selected_idx == n);
                if (ImGui::Selectable(items[n], is_selected))
                    item_selected_idx = n;

                // Set the initial focus when opening the combo (scrolling + keyboard navigation focus)
                if (is_selected)
                    ImGui::SetItemDefaultFocus();
            }
            ImGui::EndCombo();
        }

        // Show case embedding a filter using a simple trick: displaying the filter inside combo contents.
        // See https://github.com/ocornut/imgui/issues/718 for advanced/esoteric alternatives.
        if (ImGui::BeginCombo("combo 2 (w/ filter)", combo_preview_value, flags))
        {
            static ImGuiTextFilter filter;
            if (ImGui::IsWindowAppearing())
            {
                ImGui::SetKeyboardFocusHere();
                filter.Clear();
            }
            ImGui::SetNextItemShortcut(ImGuiMod_Ctrl | ImGuiKey_F);
            filter.Draw("##Filter", -FLT_MIN);

            for (int n = 0; n < IM_ARRAYSIZE(items); n++)
            {
                const bool is_selected = (item_selected_idx == n);
                if (filter.PassFilter(items[n]))
                    if (ImGui::Selectable(items[n], is_selected))
                        item_selected_idx = n;
            }
            ImGui::EndCombo();
        }

        ImGui::Spacing();
        ImGui::SeparatorText("One-liner variants");
        HelpMarker("The Combo() function is not greatly useful apart from cases were you want to embed all options in a single strings.\nFlags above don't apply to this section.");

        // Simplified one-liner Combo() API, using values packed in a single constant string
        // This is a convenience for when the selection set is small and known at compile-time.
        static int item_current_2 = 0;
        ImGui::Combo("combo 3 (one-liner)", &item_current_2, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");

        // Simplified one-liner Combo() using an array of const char*
        // This is not very useful (may obsolete): prefer using BeginCombo()/EndCombo() for full control.
        static int item_current_3 = -1; // If the selection isn't within 0..count, Combo won't display a preview
        ImGui::Combo("combo 4 (array)", &item_current_3, items, IM_ARRAYSIZE(items));

        // Simplified one-liner Combo() using an accessor function
        static int item_current_4 = 0;
        ImGui::Combo("combo 5 (function)", &item_current_4, [](void* data, int n) { return ((const char**)data)[n]; }, items, IM_ARRAYSIZE(items));

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsDataTypes()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsDataTypes()
{
    IMGUI_DEMO_MARKER("Widgets/Data Types");
    if (ImGui::TreeNode("Data Types"))
    {
        // DragScalar/InputScalar/SliderScalar functions allow various data types
        // - signed/unsigned
        // - 8/16/32/64-bits
        // - integer/float/double
        // To avoid polluting the public API with all possible combinations, we use the ImGuiDataType enum
        // to pass the type, and passing all arguments by pointer.
        // This is the reason the test code below creates local variables to hold "zero" "one" etc. for each type.
        // In practice, if you frequently use a given type that is not covered by the normal API entry points,
        // you can wrap it yourself inside a 1 line function which can take typed argument as value instead of void*,
        // and then pass their address to the generic function. For example:
        //   bool MySliderU64(const char *label, u64* value, u64 min = 0, u64 max = 0, const char* format = "%lld")
        //   {
        //      return SliderScalar(label, ImGuiDataType_U64, value, &min, &max, format);
        //   }

        // Setup limits (as helper variables so we can take their address, as explained above)
        // Note: SliderScalar() functions have a maximum usable range of half the natural type maximum, hence the /2.
        #ifndef LLONG_MIN
        ImS64 LLONG_MIN = -9223372036854775807LL - 1;
        ImS64 LLONG_MAX = 9223372036854775807LL;
        ImU64 ULLONG_MAX = (2ULL * 9223372036854775807LL + 1);
        #endif
        const char    s8_zero  = 0,   s8_one  = 1,   s8_fifty  = 50, s8_min  = -128,        s8_max = 127;
        const ImU8    u8_zero  = 0,   u8_one  = 1,   u8_fifty  = 50, u8_min  = 0,           u8_max = 255;
        const short   s16_zero = 0,   s16_one = 1,   s16_fifty = 50, s16_min = -32768,      s16_max = 32767;
        const ImU16   u16_zero = 0,   u16_one = 1,   u16_fifty = 50, u16_min = 0,           u16_max = 65535;
        const ImS32   s32_zero = 0,   s32_one = 1,   s32_fifty = 50, s32_min = INT_MIN/2,   s32_max = INT_MAX/2,    s32_hi_a = INT_MAX/2 - 100,    s32_hi_b = INT_MAX/2;
        const ImU32   u32_zero = 0,   u32_one = 1,   u32_fifty = 50, u32_min = 0,           u32_max = UINT_MAX/2,   u32_hi_a = UINT_MAX/2 - 100,   u32_hi_b = UINT_MAX/2;
        const ImS64   s64_zero = 0,   s64_one = 1,   s64_fifty = 50, s64_min = LLONG_MIN/2, s64_max = LLONG_MAX/2,  s64_hi_a = LLONG_MAX/2 - 100,  s64_hi_b = LLONG_MAX/2;
        const ImU64   u64_zero = 0,   u64_one = 1,   u64_fifty = 50, u64_min = 0,           u64_max = ULLONG_MAX/2, u64_hi_a = ULLONG_MAX/2 - 100, u64_hi_b = ULLONG_MAX/2;
        const float   f32_zero = 0.f, f32_one = 1.f, f32_lo_a = -10000000000.0f, f32_hi_a = +10000000000.0f;
        const double  f64_zero = 0.,  f64_one = 1.,  f64_lo_a = -1000000000000000.0, f64_hi_a = +1000000000000000.0;

        // State
        static char   s8_v  = 127;
        static ImU8   u8_v  = 255;
        static short  s16_v = 32767;
        static ImU16  u16_v = 65535;
        static ImS32  s32_v = -1;
        static ImU32  u32_v = (ImU32)-1;
        static ImS64  s64_v = -1;
        static ImU64  u64_v = (ImU64)-1;
        static float  f32_v = 0.123f;
        static double f64_v = 90000.01234567890123456789;

        const float drag_speed = 0.2f;
        static bool drag_clamp = false;
        IMGUI_DEMO_MARKER("Widgets/Data Types/Drags");
        ImGui::SeparatorText("Drags");
        ImGui::Checkbox("Clamp integers to 0..50", &drag_clamp);
        ImGui::SameLine(); HelpMarker(
            "As with every widget in dear imgui, we never modify values unless there is a user interaction.\n"
            "You can override the clamping limits by using CTRL+Click to input a value.");
        ImGui::DragScalar("drag s8",        ImGuiDataType_S8,     &s8_v,  drag_speed, drag_clamp ? &s8_zero  : NULL, drag_clamp ? &s8_fifty  : NULL);
        ImGui::DragScalar("drag u8",        ImGuiDataType_U8,     &u8_v,  drag_speed, drag_clamp ? &u8_zero  : NULL, drag_clamp ? &u8_fifty  : NULL, "%u ms");
        ImGui::DragScalar("drag s16",       ImGuiDataType_S16,    &s16_v, drag_speed, drag_clamp ? &s16_zero : NULL, drag_clamp ? &s16_fifty : NULL);
        ImGui::DragScalar("drag u16",       ImGuiDataType_U16,    &u16_v, drag_speed, drag_clamp ? &u16_zero : NULL, drag_clamp ? &u16_fifty : NULL, "%u ms");
        ImGui::DragScalar("drag s32",       ImGuiDataType_S32,    &s32_v, drag_speed, drag_clamp ? &s32_zero : NULL, drag_clamp ? &s32_fifty : NULL);
        ImGui::DragScalar("drag s32 hex",   ImGuiDataType_S32,    &s32_v, drag_speed, drag_clamp ? &s32_zero : NULL, drag_clamp ? &s32_fifty : NULL, "0x%08X");
        ImGui::DragScalar("drag u32",       ImGuiDataType_U32,    &u32_v, drag_speed, drag_clamp ? &u32_zero : NULL, drag_clamp ? &u32_fifty : NULL, "%u ms");
        ImGui::DragScalar("drag s64",       ImGuiDataType_S64,    &s64_v, drag_speed, drag_clamp ? &s64_zero : NULL, drag_clamp ? &s64_fifty : NULL);
        ImGui::DragScalar("drag u64",       ImGuiDataType_U64,    &u64_v, drag_speed, drag_clamp ? &u64_zero : NULL, drag_clamp ? &u64_fifty : NULL);
        ImGui::DragScalar("drag float",     ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f");
        ImGui::DragScalar("drag float log", ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f", ImGuiSliderFlags_Logarithmic);
        ImGui::DragScalar("drag double",    ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, NULL,     "%.10f grams");
        ImGui::DragScalar("drag double log",ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, &f64_one, "0 < %.10f < 1", ImGuiSliderFlags_Logarithmic);

        IMGUI_DEMO_MARKER("Widgets/Data Types/Sliders");
        ImGui::SeparatorText("Sliders");
        ImGui::SliderScalar("slider s8 full",       ImGuiDataType_S8,     &s8_v,  &s8_min,   &s8_max,   "%d");
        ImGui::SliderScalar("slider u8 full",       ImGuiDataType_U8,     &u8_v,  &u8_min,   &u8_max,   "%u");
        ImGui::SliderScalar("slider s16 full",      ImGuiDataType_S16,    &s16_v, &s16_min,  &s16_max,  "%d");
        ImGui::SliderScalar("slider u16 full",      ImGuiDataType_U16,    &u16_v, &u16_min,  &u16_max,  "%u");
        ImGui::SliderScalar("slider s32 low",       ImGuiDataType_S32,    &s32_v, &s32_zero, &s32_fifty,"%d");
        ImGui::SliderScalar("slider s32 high",      ImGuiDataType_S32,    &s32_v, &s32_hi_a, &s32_hi_b, "%d");
        ImGui::SliderScalar("slider s32 full",      ImGuiDataType_S32,    &s32_v, &s32_min,  &s32_max,  "%d");
        ImGui::SliderScalar("slider s32 hex",       ImGuiDataType_S32,    &s32_v, &s32_zero, &s32_fifty, "0x%04X");
        ImGui::SliderScalar("slider u32 low",       ImGuiDataType_U32,    &u32_v, &u32_zero, &u32_fifty,"%u");
        ImGui::SliderScalar("slider u32 high",      ImGuiDataType_U32,    &u32_v, &u32_hi_a, &u32_hi_b, "%u");
        ImGui::SliderScalar("slider u32 full",      ImGuiDataType_U32,    &u32_v, &u32_min,  &u32_max,  "%u");
        ImGui::SliderScalar("slider s64 low",       ImGuiDataType_S64,    &s64_v, &s64_zero, &s64_fifty,"%" PRId64);
        ImGui::SliderScalar("slider s64 high",      ImGuiDataType_S64,    &s64_v, &s64_hi_a, &s64_hi_b, "%" PRId64);
        ImGui::SliderScalar("slider s64 full",      ImGuiDataType_S64,    &s64_v, &s64_min,  &s64_max,  "%" PRId64);
        ImGui::SliderScalar("slider u64 low",       ImGuiDataType_U64,    &u64_v, &u64_zero, &u64_fifty,"%" PRIu64 " ms");
        ImGui::SliderScalar("slider u64 high",      ImGuiDataType_U64,    &u64_v, &u64_hi_a, &u64_hi_b, "%" PRIu64 " ms");
        ImGui::SliderScalar("slider u64 full",      ImGuiDataType_U64,    &u64_v, &u64_min,  &u64_max,  "%" PRIu64 " ms");
        ImGui::SliderScalar("slider float low",     ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one);
        ImGui::SliderScalar("slider float low log", ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one,  "%.10f", ImGuiSliderFlags_Logarithmic);
        ImGui::SliderScalar("slider float high",    ImGuiDataType_Float,  &f32_v, &f32_lo_a, &f32_hi_a, "%e");
        ImGui::SliderScalar("slider double low",    ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f grams");
        ImGui::SliderScalar("slider double low log",ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f", ImGuiSliderFlags_Logarithmic);
        ImGui::SliderScalar("slider double high",   ImGuiDataType_Double, &f64_v, &f64_lo_a, &f64_hi_a, "%e grams");

        ImGui::SeparatorText("Sliders (reverse)");
        ImGui::SliderScalar("slider s8 reverse",    ImGuiDataType_S8,   &s8_v,  &s8_max,    &s8_min,   "%d");
        ImGui::SliderScalar("slider u8 reverse",    ImGuiDataType_U8,   &u8_v,  &u8_max,    &u8_min,   "%u");
        ImGui::SliderScalar("slider s32 reverse",   ImGuiDataType_S32,  &s32_v, &s32_fifty, &s32_zero, "%d");
        ImGui::SliderScalar("slider u32 reverse",   ImGuiDataType_U32,  &u32_v, &u32_fifty, &u32_zero, "%u");
        ImGui::SliderScalar("slider s64 reverse",   ImGuiDataType_S64,  &s64_v, &s64_fifty, &s64_zero, "%" PRId64);
        ImGui::SliderScalar("slider u64 reverse",   ImGuiDataType_U64,  &u64_v, &u64_fifty, &u64_zero, "%" PRIu64 " ms");

        IMGUI_DEMO_MARKER("Widgets/Data Types/Inputs");
        static bool inputs_step = true;
        static ImGuiInputTextFlags flags = ImGuiInputTextFlags_None;
        ImGui::SeparatorText("Inputs");
        ImGui::Checkbox("Show step buttons", &inputs_step);
        ImGui::CheckboxFlags("ImGuiInputTextFlags_ReadOnly", &flags, ImGuiInputTextFlags_ReadOnly);
        ImGui::CheckboxFlags("ImGuiInputTextFlags_ParseEmptyRefVal", &flags, ImGuiInputTextFlags_ParseEmptyRefVal);
        ImGui::CheckboxFlags("ImGuiInputTextFlags_DisplayEmptyRefVal", &flags, ImGuiInputTextFlags_DisplayEmptyRefVal);
        ImGui::InputScalar("input s8",      ImGuiDataType_S8,     &s8_v,  inputs_step ? &s8_one  : NULL, NULL, "%d", flags);
        ImGui::InputScalar("input u8",      ImGuiDataType_U8,     &u8_v,  inputs_step ? &u8_one  : NULL, NULL, "%u", flags);
        ImGui::InputScalar("input s16",     ImGuiDataType_S16,    &s16_v, inputs_step ? &s16_one : NULL, NULL, "%d", flags);
        ImGui::InputScalar("input u16",     ImGuiDataType_U16,    &u16_v, inputs_step ? &u16_one : NULL, NULL, "%u", flags);
        ImGui::InputScalar("input s32",     ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%d", flags);
        ImGui::InputScalar("input s32 hex", ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%04X", flags);
        ImGui::InputScalar("input u32",     ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%u", flags);
        ImGui::InputScalar("input u32 hex", ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%08X", flags);
        ImGui::InputScalar("input s64",     ImGuiDataType_S64,    &s64_v, inputs_step ? &s64_one : NULL, NULL, NULL, flags);
        ImGui::InputScalar("input u64",     ImGuiDataType_U64,    &u64_v, inputs_step ? &u64_one : NULL, NULL, NULL, flags);
        ImGui::InputScalar("input float",   ImGuiDataType_Float,  &f32_v, inputs_step ? &f32_one : NULL, NULL, NULL, flags);
        ImGui::InputScalar("input double",  ImGuiDataType_Double, &f64_v, inputs_step ? &f64_one : NULL, NULL, NULL, flags);

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsDisableBlocks()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsDisableBlocks(ImGuiDemoWindowData* demo_data)
{
    IMGUI_DEMO_MARKER("Widgets/Disable Blocks");
    if (ImGui::TreeNode("Disable Blocks"))
    {
        ImGui::Checkbox("Disable entire section above", &demo_data->DisableSections);
        ImGui::SameLine(); HelpMarker("Demonstrate using BeginDisabled()/EndDisabled() across other sections.");
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsDragAndDrop()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsDragAndDrop()
{
    IMGUI_DEMO_MARKER("Widgets/Drag and drop");
    if (ImGui::TreeNode("Drag and Drop"))
    {
        IMGUI_DEMO_MARKER("Widgets/Drag and drop/Standard widgets");
        if (ImGui::TreeNode("Drag and drop in standard widgets"))
        {
            // ColorEdit widgets automatically act as drag source and drag target.
            // They are using standardized payload strings IMGUI_PAYLOAD_TYPE_COLOR_3F and IMGUI_PAYLOAD_TYPE_COLOR_4F
            // to allow your own widgets to use colors in their drag and drop interaction.
            // Also see 'Demo->Widgets->Color/Picker Widgets->Palette' demo.
            HelpMarker("You can drag from the color squares.");
            static float col1[3] = { 1.0f, 0.0f, 0.2f };
            static float col2[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
            ImGui::ColorEdit3("color 1", col1);
            ImGui::ColorEdit4("color 2", col2);
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Drag and drop/Copy-swap items");
        if (ImGui::TreeNode("Drag and drop to copy/swap items"))
        {
            enum Mode
            {
                Mode_Copy,
                Mode_Move,
                Mode_Swap
            };
            static int mode = 0;
            if (ImGui::RadioButton("Copy", mode == Mode_Copy)) { mode = Mode_Copy; } ImGui::SameLine();
            if (ImGui::RadioButton("Move", mode == Mode_Move)) { mode = Mode_Move; } ImGui::SameLine();
            if (ImGui::RadioButton("Swap", mode == Mode_Swap)) { mode = Mode_Swap; }
            static const char* names[9] =
            {
                "Bobby", "Beatrice", "Betty",
                "Brianna", "Barry", "Bernard",
                "Bibi", "Blaine", "Bryn"
            };
            for (int n = 0; n < IM_ARRAYSIZE(names); n++)
            {
                ImGui::PushID(n);
                if ((n % 3) != 0)
                    ImGui::SameLine();
                ImGui::Button(names[n], ImVec2(60, 60));

                // Our buttons are both drag sources and drag targets here!
                if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))
                {
                    // Set payload to carry the index of our item (could be anything)
                    ImGui::SetDragDropPayload("DND_DEMO_CELL", &n, sizeof(int));

                    // Display preview (could be anything, e.g. when dragging an image we could decide to display
                    // the filename and a small preview of the image, etc.)
                    if (mode == Mode_Copy) { ImGui::Text("Copy %s", names[n]); }
                    if (mode == Mode_Move) { ImGui::Text("Move %s", names[n]); }
                    if (mode == Mode_Swap) { ImGui::Text("Swap %s", names[n]); }
                    ImGui::EndDragDropSource();
                }
                if (ImGui::BeginDragDropTarget())
                {
                    if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_DEMO_CELL"))
                    {
                        IM_ASSERT(payload->DataSize == sizeof(int));
                        int payload_n = *(const int*)payload->Data;
                        if (mode == Mode_Copy)
                        {
                            names[n] = names[payload_n];
                        }
                        if (mode == Mode_Move)
                        {
                            names[n] = names[payload_n];
                            names[payload_n] = "";
                        }
                        if (mode == Mode_Swap)
                        {
                            const char* tmp = names[n];
                            names[n] = names[payload_n];
                            names[payload_n] = tmp;
                        }
                    }
                    ImGui::EndDragDropTarget();
                }
                ImGui::PopID();
            }
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Drag and Drop/Drag to reorder items (simple)");
        if (ImGui::TreeNode("Drag to reorder items (simple)"))
        {
            // FIXME: there is temporary (usually single-frame) ID Conflict during reordering as a same item may be submitting twice.
            // This code was always slightly faulty but in a way which was not easily noticeable.
            // Until we fix this, enable ImGuiItemFlags_AllowDuplicateId to disable detecting the issue.
            ImGui::PushItemFlag(ImGuiItemFlags_AllowDuplicateId, true);

            // Simple reordering
            HelpMarker(
                "We don't use the drag and drop api at all here! "
                "Instead we query when the item is held but not hovered, and order items accordingly.");
            static const char* item_names[] = { "Item One", "Item Two", "Item Three", "Item Four", "Item Five" };
            for (int n = 0; n < IM_ARRAYSIZE(item_names); n++)
            {
                const char* item = item_names[n];
                ImGui::Selectable(item);

                if (ImGui::IsItemActive() && !ImGui::IsItemHovered())
                {
                    int n_next = n + (ImGui::GetMouseDragDelta(0).y < 0.f ? -1 : 1);
                    if (n_next >= 0 && n_next < IM_ARRAYSIZE(item_names))
                    {
                        item_names[n] = item_names[n_next];
                        item_names[n_next] = item;
                        ImGui::ResetMouseDragDelta();
                    }
                }
            }

            ImGui::PopItemFlag();
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Drag and Drop/Tooltip at target location");
        if (ImGui::TreeNode("Tooltip at target location"))
        {
            for (int n = 0; n < 2; n++)
            {
                // Drop targets
                ImGui::Button(n ? "drop here##1" : "drop here##0");
                if (ImGui::BeginDragDropTarget())
                {
                    ImGuiDragDropFlags drop_target_flags = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoPreviewTooltip;
                    if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F, drop_target_flags))
                    {
                        IM_UNUSED(payload);
                        ImGui::SetMouseCursor(ImGuiMouseCursor_NotAllowed);
                        ImGui::SetTooltip("Cannot drop here!");
                    }
                    ImGui::EndDragDropTarget();
                }

                // Drop source
                static ImVec4 col4 = { 1.0f, 0.0f, 0.2f, 1.0f };
                if (n == 0)
                    ImGui::ColorButton("drag me", col4);

            }
            ImGui::TreePop();
        }

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsDragsAndSliders()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsDragsAndSliders()
{
    IMGUI_DEMO_MARKER("Widgets/Drag and Slider Flags");
    if (ImGui::TreeNode("Drag/Slider Flags"))
    {
        // Demonstrate using advanced flags for DragXXX and SliderXXX functions. Note that the flags are the same!
        static ImGuiSliderFlags flags = ImGuiSliderFlags_None;
        ImGui::CheckboxFlags("ImGuiSliderFlags_AlwaysClamp", &flags, ImGuiSliderFlags_AlwaysClamp);
        ImGui::CheckboxFlags("ImGuiSliderFlags_ClampOnInput", &flags, ImGuiSliderFlags_ClampOnInput);
        ImGui::SameLine(); HelpMarker("Clamp value to min/max bounds when input manually with CTRL+Click. By default CTRL+Click allows going out of bounds.");
        ImGui::CheckboxFlags("ImGuiSliderFlags_ClampZeroRange", &flags, ImGuiSliderFlags_ClampZeroRange);
        ImGui::SameLine(); HelpMarker("Clamp even if min==max==0.0f. Otherwise DragXXX functions don't clamp.");
        ImGui::CheckboxFlags("ImGuiSliderFlags_Logarithmic", &flags, ImGuiSliderFlags_Logarithmic);
        ImGui::SameLine(); HelpMarker("Enable logarithmic editing (more precision for small values).");
        ImGui::CheckboxFlags("ImGuiSliderFlags_NoRoundToFormat", &flags, ImGuiSliderFlags_NoRoundToFormat);
        ImGui::SameLine(); HelpMarker("Disable rounding underlying value to match precision of the format string (e.g. %.3f values are rounded to those 3 digits).");
        ImGui::CheckboxFlags("ImGuiSliderFlags_NoInput", &flags, ImGuiSliderFlags_NoInput);
        ImGui::SameLine(); HelpMarker("Disable CTRL+Click or Enter key allowing to input text directly into the widget.");
        ImGui::CheckboxFlags("ImGuiSliderFlags_NoSpeedTweaks", &flags, ImGuiSliderFlags_NoSpeedTweaks);
        ImGui::SameLine(); HelpMarker("Disable keyboard modifiers altering tweak speed. Useful if you want to alter tweak speed yourself based on your own logic.");
        ImGui::CheckboxFlags("ImGuiSliderFlags_WrapAround", &flags, ImGuiSliderFlags_WrapAround);
        ImGui::SameLine(); HelpMarker("Enable wrapping around from max to min and from min to max (only supported by DragXXX() functions)");

        // Drags
        static float drag_f = 0.5f;
        static int drag_i = 50;
        ImGui::Text("Underlying float value: %f", drag_f);
        ImGui::DragFloat("DragFloat (0 -> 1)", &drag_f, 0.005f, 0.0f, 1.0f, "%.3f", flags);
        ImGui::DragFloat("DragFloat (0 -> +inf)", &drag_f, 0.005f, 0.0f, FLT_MAX, "%.3f", flags);
        ImGui::DragFloat("DragFloat (-inf -> 1)", &drag_f, 0.005f, -FLT_MAX, 1.0f, "%.3f", flags);
        ImGui::DragFloat("DragFloat (-inf -> +inf)", &drag_f, 0.005f, -FLT_MAX, +FLT_MAX, "%.3f", flags);
        //ImGui::DragFloat("DragFloat (0 -> 0)", &drag_f, 0.005f, 0.0f, 0.0f, "%.3f", flags);           // To test ClampZeroRange
        //ImGui::DragFloat("DragFloat (100 -> 100)", &drag_f, 0.005f, 100.0f, 100.0f, "%.3f", flags);
        ImGui::DragInt("DragInt (0 -> 100)", &drag_i, 0.5f, 0, 100, "%d", flags);

        // Sliders
        static float slider_f = 0.5f;
        static int slider_i = 50;
        const ImGuiSliderFlags flags_for_sliders = flags & ~ImGuiSliderFlags_WrapAround;
        ImGui::Text("Underlying float value: %f", slider_f);
        ImGui::SliderFloat("SliderFloat (0 -> 1)", &slider_f, 0.0f, 1.0f, "%.3f", flags_for_sliders);
        ImGui::SliderInt("SliderInt (0 -> 100)", &slider_i, 0, 100, "%d", flags_for_sliders);

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsFonts()
//-----------------------------------------------------------------------------

// Forward declare ShowFontAtlas() which isn't worth putting in public API yet
namespace ImGui { IMGUI_API void ShowFontAtlas(ImFontAtlas* atlas); }

static void DemoWindowWidgetsFonts()
{
    IMGUI_DEMO_MARKER("Widgets/Fonts");
    if (ImGui::TreeNode("Fonts"))
    {
        ImFontAtlas* atlas = ImGui::GetIO().Fonts;
        ImGui::ShowFontAtlas(atlas);
        // FIXME-NEWATLAS: Provide a demo to add/create a procedural font?
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsImages()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsImages()
{
    IMGUI_DEMO_MARKER("Widgets/Images");
    if (ImGui::TreeNode("Images"))
    {
        ImGuiIO& io = ImGui::GetIO();
        ImGui::TextWrapped(
            "Below we are displaying the font texture (which is the only texture we have access to in this demo). "
            "Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. "
            "Hover the texture for a zoomed view!");

        // Below we are displaying the font texture because it is the only texture we have access to inside the demo!
        // Read description about ImTextureID/ImTextureRef and FAQ for details about texture identifiers.
        // If you use one of the default imgui_impl_XXXX.cpp rendering backend, they all have comments at the top
        // of their respective source file to specify what they are using as texture identifier, for example:
        // - The imgui_impl_dx11.cpp renderer expect a 'ID3D11ShaderResourceView*' pointer.
        // - The imgui_impl_opengl3.cpp renderer expect a GLuint OpenGL texture identifier, etc.
        // So with the DirectX11 backend, you call ImGui::Image() with a 'ID3D11ShaderResourceView*' cast to ImTextureID.
        // - If you decided that ImTextureID = MyEngineTexture*, then you can pass your MyEngineTexture* pointers
        //   to ImGui::Image(), and gather width/height through your own functions, etc.
        // - You can use ShowMetricsWindow() to inspect the draw data that are being passed to your renderer,
        //   it will help you debug issues if you are confused about it.
        // - Consider using the lower-level ImDrawList::AddImage() API, via ImGui::GetWindowDrawList()->AddImage().
        // - Read https://github.com/ocornut/imgui/blob/master/docs/FAQ.md
        // - Read https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples

        // Grab the current texture identifier used by the font atlas.
        ImTextureRef my_tex_id = io.Fonts->TexRef;

        // Regular user code should never have to care about TexData-> fields, but since we want to display the entire texture here, we pull Width/Height from it.
        float my_tex_w = (float)io.Fonts->TexData->Width;
        float my_tex_h = (float)io.Fonts->TexData->Height;

        {
            ImGui::Text("%.0fx%.0f", my_tex_w, my_tex_h);
            ImVec2 pos = ImGui::GetCursorScreenPos();
            ImVec2 uv_min = ImVec2(0.0f, 0.0f); // Top-left
            ImVec2 uv_max = ImVec2(1.0f, 1.0f); // Lower-right
            ImGui::PushStyleVar(ImGuiStyleVar_ImageBorderSize, IM_MAX(1.0f, ImGui::GetStyle().ImageBorderSize));
            ImGui::ImageWithBg(my_tex_id, ImVec2(my_tex_w, my_tex_h), uv_min, uv_max, ImVec4(0.0f, 0.0f, 0.0f, 1.0f));
            if (ImGui::BeginItemTooltip())
            {
                float region_sz = 32.0f;
                float region_x = io.MousePos.x - pos.x - region_sz * 0.5f;
                float region_y = io.MousePos.y - pos.y - region_sz * 0.5f;
                float zoom = 4.0f;
                if (region_x < 0.0f) { region_x = 0.0f; }
                else if (region_x > my_tex_w - region_sz) { region_x = my_tex_w - region_sz; }
                if (region_y < 0.0f) { region_y = 0.0f; }
                else if (region_y > my_tex_h - region_sz) { region_y = my_tex_h - region_sz; }
                ImGui::Text("Min: (%.2f, %.2f)", region_x, region_y);
                ImGui::Text("Max: (%.2f, %.2f)", region_x + region_sz, region_y + region_sz);
                ImVec2 uv0 = ImVec2((region_x) / my_tex_w, (region_y) / my_tex_h);
                ImVec2 uv1 = ImVec2((region_x + region_sz) / my_tex_w, (region_y + region_sz) / my_tex_h);
                ImGui::ImageWithBg(my_tex_id, ImVec2(region_sz * zoom, region_sz * zoom), uv0, uv1, ImVec4(0.0f, 0.0f, 0.0f, 1.0f));
                ImGui::EndTooltip();
            }
            ImGui::PopStyleVar();
        }

        IMGUI_DEMO_MARKER("Widgets/Images/Textured buttons");
        ImGui::TextWrapped("And now some textured buttons..");
        static int pressed_count = 0;
        for (int i = 0; i < 8; i++)
        {
            // UV coordinates are often (0.0f, 0.0f) and (1.0f, 1.0f) to display an entire textures.
            // Here are trying to display only a 32x32 pixels area of the texture, hence the UV computation.
            // Read about UV coordinates here: https://github.com/ocornut/imgui/wiki/Image-Loading-and-Displaying-Examples
            ImGui::PushID(i);
            if (i > 0)
                ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(i - 1.0f, i - 1.0f));
            ImVec2 size = ImVec2(32.0f, 32.0f);                         // Size of the image we want to make visible
            ImVec2 uv0 = ImVec2(0.0f, 0.0f);                            // UV coordinates for lower-left
            ImVec2 uv1 = ImVec2(32.0f / my_tex_w, 32.0f / my_tex_h);    // UV coordinates for (32,32) in our texture
            ImVec4 bg_col = ImVec4(0.0f, 0.0f, 0.0f, 1.0f);             // Black background
            ImVec4 tint_col = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);           // No tint
            if (ImGui::ImageButton("", my_tex_id, size, uv0, uv1, bg_col, tint_col))
                pressed_count += 1;
            if (i > 0)
                ImGui::PopStyleVar();
            ImGui::PopID();
            ImGui::SameLine();
        }
        ImGui::NewLine();
        ImGui::Text("Pressed %d times.", pressed_count);
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsListBoxes()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsListBoxes()
{
    IMGUI_DEMO_MARKER("Widgets/List Boxes");
    if (ImGui::TreeNode("List Boxes"))
    {
        // BeginListBox() is essentially a thin wrapper to using BeginChild()/EndChild()
        // using the ImGuiChildFlags_FrameStyle flag for stylistic changes + displaying a label.
        // You may be tempted to simply use BeginChild() directly. However note that BeginChild() requires EndChild()
        // to always be called (inconsistent with BeginListBox()/EndListBox()).

        // Using the generic BeginListBox() API, you have full control over how to display the combo contents.
        // (your selection data could be an index, a pointer to the object, an id for the object, a flag intrusively
        // stored in the object itself, etc.)
        const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };
        static int item_selected_idx = 0; // Here we store our selected data as an index.

        static bool item_highlight = false;
        int item_highlighted_idx = -1; // Here we store our highlighted data as an index.
        ImGui::Checkbox("Highlight hovered item in second listbox", &item_highlight);

        if (ImGui::BeginListBox("listbox 1"))
        {
            for (int n = 0; n < IM_ARRAYSIZE(items); n++)
            {
                const bool is_selected = (item_selected_idx == n);
                if (ImGui::Selectable(items[n], is_selected))
                    item_selected_idx = n;

                if (item_highlight && ImGui::IsItemHovered())
                    item_highlighted_idx = n;

                // Set the initial focus when opening the combo (scrolling + keyboard navigation focus)
                if (is_selected)
                    ImGui::SetItemDefaultFocus();
            }
            ImGui::EndListBox();
        }
        ImGui::SameLine(); HelpMarker("Here we are sharing selection state between both boxes.");

        // Custom size: use all width, 5 items tall
        ImGui::Text("Full-width:");
        if (ImGui::BeginListBox("##listbox 2", ImVec2(-FLT_MIN, 5 * ImGui::GetTextLineHeightWithSpacing())))
        {
            for (int n = 0; n < IM_ARRAYSIZE(items); n++)
            {
                bool is_selected = (item_selected_idx == n);
                ImGuiSelectableFlags flags = (item_highlighted_idx == n) ? ImGuiSelectableFlags_Highlight : 0;
                if (ImGui::Selectable(items[n], is_selected, flags))
                    item_selected_idx = n;

                // Set the initial focus when opening the combo (scrolling + keyboard navigation focus)
                if (is_selected)
                    ImGui::SetItemDefaultFocus();
            }
            ImGui::EndListBox();
        }

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsMultiComponents()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsMultiComponents()
{
    IMGUI_DEMO_MARKER("Widgets/Multi-component Widgets");
    if (ImGui::TreeNode("Multi-component Widgets"))
    {
        static float vec4f[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
        static int vec4i[4] = { 1, 5, 100, 255 };

        ImGui::SeparatorText("2-wide");
        ImGui::InputFloat2("input float2", vec4f);
        ImGui::DragFloat2("drag float2", vec4f, 0.01f, 0.0f, 1.0f);
        ImGui::SliderFloat2("slider float2", vec4f, 0.0f, 1.0f);
        ImGui::InputInt2("input int2", vec4i);
        ImGui::DragInt2("drag int2", vec4i, 1, 0, 255);
        ImGui::SliderInt2("slider int2", vec4i, 0, 255);

        ImGui::SeparatorText("3-wide");
        ImGui::InputFloat3("input float3", vec4f);
        ImGui::DragFloat3("drag float3", vec4f, 0.01f, 0.0f, 1.0f);
        ImGui::SliderFloat3("slider float3", vec4f, 0.0f, 1.0f);
        ImGui::InputInt3("input int3", vec4i);
        ImGui::DragInt3("drag int3", vec4i, 1, 0, 255);
        ImGui::SliderInt3("slider int3", vec4i, 0, 255);

        ImGui::SeparatorText("4-wide");
        ImGui::InputFloat4("input float4", vec4f);
        ImGui::DragFloat4("drag float4", vec4f, 0.01f, 0.0f, 1.0f);
        ImGui::SliderFloat4("slider float4", vec4f, 0.0f, 1.0f);
        ImGui::InputInt4("input int4", vec4i);
        ImGui::DragInt4("drag int4", vec4i, 1, 0, 255);
        ImGui::SliderInt4("slider int4", vec4i, 0, 255);

        ImGui::SeparatorText("Ranges");
        static float begin = 10, end = 90;
        static int begin_i = 100, end_i = 1000;
        ImGui::DragFloatRange2("range float", &begin, &end, 0.25f, 0.0f, 100.0f, "Min: %.1f %%", "Max: %.1f %%", ImGuiSliderFlags_AlwaysClamp);
        ImGui::DragIntRange2("range int", &begin_i, &end_i, 5, 0, 1000, "Min: %d units", "Max: %d units");
        ImGui::DragIntRange2("range int (no bounds)", &begin_i, &end_i, 5, 0, 0, "Min: %d units", "Max: %d units");

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsPlotting()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsPlotting()
{
    // Plot/Graph widgets are not very good.
// Consider using a third-party library such as ImPlot: https://github.com/epezent/implot
// (see others https://github.com/ocornut/imgui/wiki/Useful-Extensions)
    IMGUI_DEMO_MARKER("Widgets/Plotting");
    if (ImGui::TreeNode("Plotting"))
    {
        ImGui::Text("Need better plotting and graphing? Consider using ImPlot:");
        ImGui::TextLinkOpenURL("https://github.com/epezent/implot");
        ImGui::Separator();

        static bool animate = true;
        ImGui::Checkbox("Animate", &animate);

        // Plot as lines and plot as histogram
        static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
        ImGui::PlotLines("Frame Times", arr, IM_ARRAYSIZE(arr));
        ImGui::PlotHistogram("Histogram", arr, IM_ARRAYSIZE(arr), 0, NULL, 0.0f, 1.0f, ImVec2(0, 80.0f));
        //ImGui::SameLine(); HelpMarker("Consider using ImPlot instead!");

        // Fill an array of contiguous float values to plot
        // Tip: If your float aren't contiguous but part of a structure, you can pass a pointer to your first float
        // and the sizeof() of your structure in the "stride" parameter.
        static float values[90] = {};
        static int values_offset = 0;
        static double refresh_time = 0.0;
        if (!animate || refresh_time == 0.0)
            refresh_time = ImGui::GetTime();
        while (refresh_time < ImGui::GetTime()) // Create data at fixed 60 Hz rate for the demo
        {
            static float phase = 0.0f;
            values[values_offset] = cosf(phase);
            values_offset = (values_offset + 1) % IM_ARRAYSIZE(values);
            phase += 0.10f * values_offset;
            refresh_time += 1.0f / 60.0f;
        }

        // Plots can display overlay texts
        // (in this example, we will display an average value)
        {
            float average = 0.0f;
            for (int n = 0; n < IM_ARRAYSIZE(values); n++)
                average += values[n];
            average /= (float)IM_ARRAYSIZE(values);
            char overlay[32];
            sprintf(overlay, "avg %f", average);
            ImGui::PlotLines("Lines", values, IM_ARRAYSIZE(values), values_offset, overlay, -1.0f, 1.0f, ImVec2(0, 80.0f));
        }

        // Use functions to generate output
        // FIXME: This is actually VERY awkward because current plot API only pass in indices.
        // We probably want an API passing floats and user provide sample rate/count.
        struct Funcs
        {
            static float Sin(void*, int i) { return sinf(i * 0.1f); }
            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }
        };
        static int func_type = 0, display_count = 70;
        ImGui::SeparatorText("Functions");
        ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
        ImGui::Combo("func", &func_type, "Sin\0Saw\0");
        ImGui::SameLine();
        ImGui::SliderInt("Sample count", &display_count, 1, 400);
        float (*func)(void*, int) = (func_type == 0) ? Funcs::Sin : Funcs::Saw;
        ImGui::PlotLines("Lines##2", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0, 80));
        ImGui::PlotHistogram("Histogram##2", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0, 80));

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsProgressBars()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsProgressBars()
{
    IMGUI_DEMO_MARKER("Widgets/Progress Bars");
    if (ImGui::TreeNode("Progress Bars"))
    {
        // Animate a simple progress bar
        static float progress = 0.0f, progress_dir = 1.0f;
        progress += progress_dir * 0.4f * ImGui::GetIO().DeltaTime;
        if (progress >= +1.1f) { progress = +1.1f; progress_dir *= -1.0f; }
        if (progress <= -0.1f) { progress = -0.1f; progress_dir *= -1.0f; }

        // Typically we would use ImVec2(-1.0f,0.0f) or ImVec2(-FLT_MIN,0.0f) to use all available width,
        // or ImVec2(width,0.0f) for a specified width. ImVec2(0.0f,0.0f) uses ItemWidth.
        ImGui::ProgressBar(progress, ImVec2(0.0f, 0.0f));
        ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
        ImGui::Text("Progress Bar");

        float progress_saturated = IM_CLAMP(progress, 0.0f, 1.0f);
        char buf[32];
        sprintf(buf, "%d/%d", (int)(progress_saturated * 1753), 1753);
        ImGui::ProgressBar(progress, ImVec2(0.f, 0.f), buf);

        // Pass an animated negative value, e.g. -1.0f * (float)ImGui::GetTime() is the recommended value.
        // Adjust the factor if you want to adjust the animation speed.
        ImGui::ProgressBar(-1.0f * (float)ImGui::GetTime(), ImVec2(0.0f, 0.0f), "Searching..");
        ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
        ImGui::Text("Indeterminate");

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsQueryingStatuses()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsQueryingStatuses()
{
    IMGUI_DEMO_MARKER("Widgets/Querying Item Status (Edited,Active,Hovered etc.)");
    if (ImGui::TreeNode("Querying Item Status (Edited/Active/Hovered etc.)"))
    {
        // Select an item type
        const char* item_names[] =
        {
            "Text", "Button", "Button (w/ repeat)", "Checkbox", "SliderFloat", "InputText", "InputTextMultiline", "InputFloat",
            "InputFloat3", "ColorEdit4", "Selectable", "MenuItem", "TreeNode", "TreeNode (w/ double-click)", "Combo", "ListBox"
        };
        static int item_type = 4;
        static bool item_disabled = false;
        ImGui::Combo("Item Type", &item_type, item_names, IM_ARRAYSIZE(item_names), IM_ARRAYSIZE(item_names));
        ImGui::SameLine();
        HelpMarker("Testing how various types of items are interacting with the IsItemXXX functions. Note that the bool return value of most ImGui function is generally equivalent to calling ImGui::IsItemHovered().");
        ImGui::Checkbox("Item Disabled", &item_disabled);

        // Submit selected items so we can query their status in the code following it.
        bool ret = false;
        static bool b = false;
        static float col4f[4] = { 1.0f, 0.5, 0.0f, 1.0f };
        static char str[16] = {};
        if (item_disabled)
            ImGui::BeginDisabled(true);
        if (item_type == 0) { ImGui::Text("ITEM: Text"); }                                              // Testing text items with no identifier/interaction
        if (item_type == 1) { ret = ImGui::Button("ITEM: Button"); }                                    // Testing button
        if (item_type == 2) { ImGui::PushItemFlag(ImGuiItemFlags_ButtonRepeat, true); ret = ImGui::Button("ITEM: Button"); ImGui::PopItemFlag(); } // Testing button (with repeater)
        if (item_type == 3) { ret = ImGui::Checkbox("ITEM: Checkbox", &b); }                            // Testing checkbox
        if (item_type == 4) { ret = ImGui::SliderFloat("ITEM: SliderFloat", &col4f[0], 0.0f, 1.0f); }   // Testing basic item
        if (item_type == 5) { ret = ImGui::InputText("ITEM: InputText", &str[0], IM_ARRAYSIZE(str)); }  // Testing input text (which handles tabbing)
        if (item_type == 6) { ret = ImGui::InputTextMultiline("ITEM: InputTextMultiline", &str[0], IM_ARRAYSIZE(str)); } // Testing input text (which uses a child window)
        if (item_type == 7) { ret = ImGui::InputFloat("ITEM: InputFloat", col4f, 1.0f); }               // Testing +/- buttons on scalar input
        if (item_type == 8) { ret = ImGui::InputFloat3("ITEM: InputFloat3", col4f); }                   // Testing multi-component items (IsItemXXX flags are reported merged)
        if (item_type == 9) { ret = ImGui::ColorEdit4("ITEM: ColorEdit4", col4f); }                     // Testing multi-component items (IsItemXXX flags are reported merged)
        if (item_type == 10) { ret = ImGui::Selectable("ITEM: Selectable"); }                            // Testing selectable item
        if (item_type == 11) { ret = ImGui::MenuItem("ITEM: MenuItem"); }                                // Testing menu item (they use ImGuiButtonFlags_PressedOnRelease button policy)
        if (item_type == 12) { ret = ImGui::TreeNode("ITEM: TreeNode"); if (ret) ImGui::TreePop(); }     // Testing tree node
        if (item_type == 13) { ret = ImGui::TreeNodeEx("ITEM: TreeNode w/ ImGuiTreeNodeFlags_OpenOnDoubleClick", ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_NoTreePushOnOpen); } // Testing tree node with ImGuiButtonFlags_PressedOnDoubleClick button policy.
        if (item_type == 14) { const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi" }; static int current = 1; ret = ImGui::Combo("ITEM: Combo", &current, items, IM_ARRAYSIZE(items)); }
        if (item_type == 15) { const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi" }; static int current = 1; ret = ImGui::ListBox("ITEM: ListBox", &current, items, IM_ARRAYSIZE(items), IM_ARRAYSIZE(items)); }

        bool hovered_delay_none = ImGui::IsItemHovered();
        bool hovered_delay_stationary = ImGui::IsItemHovered(ImGuiHoveredFlags_Stationary);
        bool hovered_delay_short = ImGui::IsItemHovered(ImGuiHoveredFlags_DelayShort);
        bool hovered_delay_normal = ImGui::IsItemHovered(ImGuiHoveredFlags_DelayNormal);
        bool hovered_delay_tooltip = ImGui::IsItemHovered(ImGuiHoveredFlags_ForTooltip); // = Normal + Stationary

        // Display the values of IsItemHovered() and other common item state functions.
        // Note that the ImGuiHoveredFlags_XXX flags can be combined.
        // Because BulletText is an item itself and that would affect the output of IsItemXXX functions,
        // we query every state in a single call to avoid storing them and to simplify the code.
        ImGui::BulletText(
            "Return value = %d\n"
            "IsItemFocused() = %d\n"
            "IsItemHovered() = %d\n"
            "IsItemHovered(_AllowWhenBlockedByPopup) = %d\n"
            "IsItemHovered(_AllowWhenBlockedByActiveItem) = %d\n"
            "IsItemHovered(_AllowWhenOverlappedByItem) = %d\n"
            "IsItemHovered(_AllowWhenOverlappedByWindow) = %d\n"
            "IsItemHovered(_AllowWhenDisabled) = %d\n"
            "IsItemHovered(_RectOnly) = %d\n"
            "IsItemActive() = %d\n"
            "IsItemEdited() = %d\n"
            "IsItemActivated() = %d\n"
            "IsItemDeactivated() = %d\n"
            "IsItemDeactivatedAfterEdit() = %d\n"
            "IsItemVisible() = %d\n"
            "IsItemClicked() = %d\n"
            "IsItemToggledOpen() = %d\n"
            "GetItemRectMin() = (%.1f, %.1f)\n"
            "GetItemRectMax() = (%.1f, %.1f)\n"
            "GetItemRectSize() = (%.1f, %.1f)",
            ret,
            ImGui::IsItemFocused(),
            ImGui::IsItemHovered(),
            ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
            ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
            ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenOverlappedByItem),
            ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenOverlappedByWindow),
            ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenDisabled),
            ImGui::IsItemHovered(ImGuiHoveredFlags_RectOnly),
            ImGui::IsItemActive(),
            ImGui::IsItemEdited(),
            ImGui::IsItemActivated(),
            ImGui::IsItemDeactivated(),
            ImGui::IsItemDeactivatedAfterEdit(),
            ImGui::IsItemVisible(),
            ImGui::IsItemClicked(),
            ImGui::IsItemToggledOpen(),
            ImGui::GetItemRectMin().x, ImGui::GetItemRectMin().y,
            ImGui::GetItemRectMax().x, ImGui::GetItemRectMax().y,
            ImGui::GetItemRectSize().x, ImGui::GetItemRectSize().y
        );
        ImGui::BulletText(
            "with Hovering Delay or Stationary test:\n"
            "IsItemHovered() = %d\n"
            "IsItemHovered(_Stationary) = %d\n"
            "IsItemHovered(_DelayShort) = %d\n"
            "IsItemHovered(_DelayNormal) = %d\n"
            "IsItemHovered(_Tooltip) = %d",
            hovered_delay_none, hovered_delay_stationary, hovered_delay_short, hovered_delay_normal, hovered_delay_tooltip);

        if (item_disabled)
            ImGui::EndDisabled();

        char buf[1] = "";
        ImGui::InputText("unused", buf, IM_ARRAYSIZE(buf), ImGuiInputTextFlags_ReadOnly);
        ImGui::SameLine();
        HelpMarker("This widget is only here to be able to tab-out of the widgets above and see e.g. Deactivated() status.");

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Widgets/Querying Window Status (Focused,Hovered etc.)");
    if (ImGui::TreeNode("Querying Window Status (Focused/Hovered etc.)"))
    {
        static bool embed_all_inside_a_child_window = false;
        ImGui::Checkbox("Embed everything inside a child window for testing _RootWindow flag.", &embed_all_inside_a_child_window);
        if (embed_all_inside_a_child_window)
            ImGui::BeginChild("outer_child", ImVec2(0, ImGui::GetFontSize() * 20.0f), ImGuiChildFlags_Borders);

        // Testing IsWindowFocused() function with its various flags.
        ImGui::BulletText(
            "IsWindowFocused() = %d\n"
            "IsWindowFocused(_ChildWindows) = %d\n"
            "IsWindowFocused(_ChildWindows|_NoPopupHierarchy) = %d\n"
            "IsWindowFocused(_ChildWindows|_RootWindow) = %d\n"
            "IsWindowFocused(_ChildWindows|_RootWindow|_NoPopupHierarchy) = %d\n"
            "IsWindowFocused(_RootWindow) = %d\n"
            "IsWindowFocused(_RootWindow|_NoPopupHierarchy) = %d\n"
            "IsWindowFocused(_AnyWindow) = %d\n",
            ImGui::IsWindowFocused(),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows | ImGuiFocusedFlags_NoPopupHierarchy),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows | ImGuiFocusedFlags_RootWindow),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows | ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_NoPopupHierarchy),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_RootWindow),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_NoPopupHierarchy),
            ImGui::IsWindowFocused(ImGuiFocusedFlags_AnyWindow));

        // Testing IsWindowHovered() function with its various flags.
        ImGui::BulletText(
            "IsWindowHovered() = %d\n"
            "IsWindowHovered(_AllowWhenBlockedByPopup) = %d\n"
            "IsWindowHovered(_AllowWhenBlockedByActiveItem) = %d\n"
            "IsWindowHovered(_ChildWindows) = %d\n"
            "IsWindowHovered(_ChildWindows|_NoPopupHierarchy) = %d\n"
            "IsWindowHovered(_ChildWindows|_RootWindow) = %d\n"
            "IsWindowHovered(_ChildWindows|_RootWindow|_NoPopupHierarchy) = %d\n"
            "IsWindowHovered(_RootWindow) = %d\n"
            "IsWindowHovered(_RootWindow|_NoPopupHierarchy) = %d\n"
            "IsWindowHovered(_ChildWindows|_AllowWhenBlockedByPopup) = %d\n"
            "IsWindowHovered(_AnyWindow) = %d\n"
            "IsWindowHovered(_Stationary) = %d\n",
            ImGui::IsWindowHovered(),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_NoPopupHierarchy),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_RootWindow),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_NoPopupHierarchy),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_RootWindow),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_NoPopupHierarchy),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_AllowWhenBlockedByPopup),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_AnyWindow),
            ImGui::IsWindowHovered(ImGuiHoveredFlags_Stationary));

        ImGui::BeginChild("child", ImVec2(0, 50), ImGuiChildFlags_Borders);
        ImGui::Text("This is another child window for testing the _ChildWindows flag.");
        ImGui::EndChild();
        if (embed_all_inside_a_child_window)
            ImGui::EndChild();

        // Calling IsItemHovered() after begin returns the hovered status of the title bar.
        // This is useful in particular if you want to create a context menu associated to the title bar of a window.
        static bool test_window = false;
        ImGui::Checkbox("Hovered/Active tests after Begin() for title bar testing", &test_window);
        if (test_window)
        {
            ImGui::Begin("Title bar Hovered/Active tests", &test_window);
            if (ImGui::BeginPopupContextItem()) // <-- This is using IsItemHovered()
            {
                if (ImGui::MenuItem("Close")) { test_window = false; }
                ImGui::EndPopup();
            }
            ImGui::Text(
                "IsItemHovered() after begin = %d (== is title bar hovered)\n"
                "IsItemActive() after begin = %d (== is window being clicked/moved)\n",
                ImGui::IsItemHovered(), ImGui::IsItemActive());
            ImGui::End();
        }

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsSelectables()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsSelectables()
{
    IMGUI_DEMO_MARKER("Widgets/Selectables");
    //ImGui::SetNextItemOpen(true, ImGuiCond_Once);
    if (ImGui::TreeNode("Selectables"))
    {
        // Selectable() has 2 overloads:
        // - The one taking "bool selected" as a read-only selection information.
        //   When Selectable() has been clicked it returns true and you can alter selection state accordingly.
        // - The one taking "bool* p_selected" as a read-write selection information (convenient in some cases)
        // The earlier is more flexible, as in real application your selection may be stored in many different ways
        // and not necessarily inside a bool value (e.g. in flags within objects, as an external list, etc).
        IMGUI_DEMO_MARKER("Widgets/Selectables/Basic");
        if (ImGui::TreeNode("Basic"))
        {
            static bool selection[5] = { false, true, false, false };
            ImGui::Selectable("1. I am selectable", &selection[0]);
            ImGui::Selectable("2. I am selectable", &selection[1]);
            ImGui::Selectable("3. I am selectable", &selection[2]);
            if (ImGui::Selectable("4. I am double clickable", selection[3], ImGuiSelectableFlags_AllowDoubleClick))
                if (ImGui::IsMouseDoubleClicked(0))
                    selection[3] = !selection[3];
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Selectables/Rendering more items on the same line");
        if (ImGui::TreeNode("Rendering more items on the same line"))
        {
            // (1) Using SetNextItemAllowOverlap()
            // (2) Using the Selectable() override that takes "bool* p_selected" parameter, the bool value is toggled automatically.
            static bool selected[3] = { false, false, false };
            ImGui::SetNextItemAllowOverlap(); ImGui::Selectable("main.c", &selected[0]); ImGui::SameLine(); ImGui::SmallButton("Link 1");
            ImGui::SetNextItemAllowOverlap(); ImGui::Selectable("Hello.cpp", &selected[1]); ImGui::SameLine(); ImGui::SmallButton("Link 2");
            ImGui::SetNextItemAllowOverlap(); ImGui::Selectable("Hello.h", &selected[2]); ImGui::SameLine(); ImGui::SmallButton("Link 3");
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Selectables/In Tables");
        if (ImGui::TreeNode("In Tables"))
        {
            static bool selected[10] = {};

            if (ImGui::BeginTable("split1", 3, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_Borders))
            {
                for (int i = 0; i < 10; i++)
                {
                    char label[32];
                    sprintf(label, "Item %d", i);
                    ImGui::TableNextColumn();
                    ImGui::Selectable(label, &selected[i]); // FIXME-TABLE: Selection overlap
                }
                ImGui::EndTable();
            }
            ImGui::Spacing();
            if (ImGui::BeginTable("split2", 3, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_Borders))
            {
                for (int i = 0; i < 10; i++)
                {
                    char label[32];
                    sprintf(label, "Item %d", i);
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn();
                    ImGui::Selectable(label, &selected[i], ImGuiSelectableFlags_SpanAllColumns);
                    ImGui::TableNextColumn();
                    ImGui::Text("Some other contents");
                    ImGui::TableNextColumn();
                    ImGui::Text("123456");
                }
                ImGui::EndTable();
            }
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Selectables/Grid");
        if (ImGui::TreeNode("Grid"))
        {
            static char selected[4][4] = { { 1, 0, 0, 0 }, { 0, 1, 0, 0 }, { 0, 0, 1, 0 }, { 0, 0, 0, 1 } };

            // Add in a bit of silly fun...
            const float time = (float)ImGui::GetTime();
            const bool winning_state = memchr(selected, 0, sizeof(selected)) == NULL; // If all cells are selected...
            if (winning_state)
                ImGui::PushStyleVar(ImGuiStyleVar_SelectableTextAlign, ImVec2(0.5f + 0.5f * cosf(time * 2.0f), 0.5f + 0.5f * sinf(time * 3.0f)));

            for (int y = 0; y < 4; y++)
                for (int x = 0; x < 4; x++)
                {
                    if (x > 0)
                        ImGui::SameLine();
                    ImGui::PushID(y * 4 + x);
                    if (ImGui::Selectable("Sailor", selected[y][x] != 0, 0, ImVec2(50, 50)))
                    {
                        // Toggle clicked cell + toggle neighbors
                        selected[y][x] ^= 1;
                        if (x > 0) { selected[y][x - 1] ^= 1; }
                        if (x < 3) { selected[y][x + 1] ^= 1; }
                        if (y > 0) { selected[y - 1][x] ^= 1; }
                        if (y < 3) { selected[y + 1][x] ^= 1; }
                    }
                    ImGui::PopID();
                }

            if (winning_state)
                ImGui::PopStyleVar();
            ImGui::TreePop();
        }
        IMGUI_DEMO_MARKER("Widgets/Selectables/Alignment");
        if (ImGui::TreeNode("Alignment"))
        {
            HelpMarker(
                "By default, Selectables uses style.SelectableTextAlign but it can be overridden on a per-item "
                "basis using PushStyleVar(). You'll probably want to always keep your default situation to "
                "left-align otherwise it becomes difficult to layout multiple items on a same line");
            static bool selected[3 * 3] = { true, false, true, false, true, false, true, false, true };
            for (int y = 0; y < 3; y++)
            {
                for (int x = 0; x < 3; x++)
                {
                    ImVec2 alignment = ImVec2((float)x / 2.0f, (float)y / 2.0f);
                    char name[32];
                    sprintf(name, "(%.1f,%.1f)", alignment.x, alignment.y);
                    if (x > 0) ImGui::SameLine();
                    ImGui::PushStyleVar(ImGuiStyleVar_SelectableTextAlign, alignment);
                    ImGui::Selectable(name, &selected[3 * y + x], ImGuiSelectableFlags_None, ImVec2(80, 80));
                    ImGui::PopStyleVar();
                }
            }
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsSelectionAndMultiSelect()
//-----------------------------------------------------------------------------
// Multi-selection demos
// Also read: https://github.com/ocornut/imgui/wiki/Multi-Select
//-----------------------------------------------------------------------------

static const char* ExampleNames[] =
{
    "Artichoke", "Arugula", "Asparagus", "Avocado", "Bamboo Shoots", "Bean Sprouts", "Beans", "Beet", "Belgian Endive", "Bell Pepper",
    "Bitter Gourd", "Bok Choy", "Broccoli", "Brussels Sprouts", "Burdock Root", "Cabbage", "Calabash", "Capers", "Carrot", "Cassava",
    "Cauliflower", "Celery", "Celery Root", "Celcuce", "Chayote", "Chinese Broccoli", "Corn", "Cucumber"
};

// Extra functions to add deletion support to ImGuiSelectionBasicStorage
struct ExampleSelectionWithDeletion : ImGuiSelectionBasicStorage
{
    // Find which item should be Focused after deletion.
    // Call _before_ item submission. Return an index in the before-deletion item list, your item loop should call SetKeyboardFocusHere() on it.
    // The subsequent ApplyDeletionPostLoop() code will use it to apply Selection.
    // - We cannot provide this logic in core Dear ImGui because we don't have access to selection data.
    // - We don't actually manipulate the ImVector<> here, only in ApplyDeletionPostLoop(), but using similar API for consistency and flexibility.
    // - Important: Deletion only works if the underlying ImGuiID for your items are stable: aka not depend on their index, but on e.g. item id/ptr.
    // FIXME-MULTISELECT: Doesn't take account of the possibility focus target will be moved during deletion. Need refocus or scroll offset.
    int ApplyDeletionPreLoop(ImGuiMultiSelectIO* ms_io, int items_count)
    {
        if (Size == 0)
            return -1;

        // If focused item is not selected...
        const int focused_idx = (int)ms_io->NavIdItem;  // Index of currently focused item
        if (ms_io->NavIdSelected == false)  // This is merely a shortcut, == Contains(adapter->IndexToStorage(items, focused_idx))
        {
            ms_io->RangeSrcReset = true;    // Request to recover RangeSrc from NavId next frame. Would be ok to reset even when NavIdSelected==true, but it would take an extra frame to recover RangeSrc when deleting a selected item.
            return focused_idx;             // Request to focus same item after deletion.
        }

        // If focused item is selected: land on first unselected item after focused item.
        for (int idx = focused_idx + 1; idx < items_count; idx++)
            if (!Contains(GetStorageIdFromIndex(idx)))
                return idx;

        // If focused item is selected: otherwise return last unselected item before focused item.
        for (int idx = IM_MIN(focused_idx, items_count) - 1; idx >= 0; idx--)
            if (!Contains(GetStorageIdFromIndex(idx)))
                return idx;

        return -1;
    }

    // Rewrite item list (delete items) + update selection.
    // - Call after EndMultiSelect()
    // - We cannot provide this logic in core Dear ImGui because we don't have access to your items, nor to selection data.
    template<typename ITEM_TYPE>
    void ApplyDeletionPostLoop(ImGuiMultiSelectIO* ms_io, ImVector<ITEM_TYPE>& items, int item_curr_idx_to_select)
    {
        // Rewrite item list (delete items) + convert old selection index (before deletion) to new selection index (after selection).
        // If NavId was not part of selection, we will stay on same item.
        ImVector<ITEM_TYPE> new_items;
        new_items.reserve(items.Size - Size);
        int item_next_idx_to_select = -1;
        for (int idx = 0; idx < items.Size; idx++)
        {
            if (!Contains(GetStorageIdFromIndex(idx)))
                new_items.push_back(items[idx]);
            if (item_curr_idx_to_select == idx)
                item_next_idx_to_select = new_items.Size - 1;
        }
        items.swap(new_items);

        // Update selection
        Clear();
        if (item_next_idx_to_select != -1 && ms_io->NavIdSelected)
            SetItemSelected(GetStorageIdFromIndex(item_next_idx_to_select), true);
    }
};

// Example: Implement dual list box storage and interface
struct ExampleDualListBox
{
    ImVector<ImGuiID>           Items[2];               // ID is index into ExampleName[]
    ImGuiSelectionBasicStorage  Selections[2];          // Store ExampleItemId into selection
    bool                        OptKeepSorted = true;

    void MoveAll(int src, int dst)
    {
        IM_ASSERT((src == 0 && dst == 1) || (src == 1 && dst == 0));
        for (ImGuiID item_id : Items[src])
            Items[dst].push_back(item_id);
        Items[src].clear();
        SortItems(dst);
        Selections[src].Swap(Selections[dst]);
        Selections[src].Clear();
    }
    void MoveSelected(int src, int dst)
    {
        for (int src_n = 0; src_n < Items[src].Size; src_n++)
        {
            ImGuiID item_id = Items[src][src_n];
            if (!Selections[src].Contains(item_id))
                continue;
            Items[src].erase(&Items[src][src_n]); // FIXME-OPT: Could be implemented more optimally (rebuild src items and swap)
            Items[dst].push_back(item_id);
            src_n--;
        }
        if (OptKeepSorted)
            SortItems(dst);
        Selections[src].Swap(Selections[dst]);
        Selections[src].Clear();
    }
    void ApplySelectionRequests(ImGuiMultiSelectIO* ms_io, int side)
    {
        // In this example we store item id in selection (instead of item index)
        Selections[side].UserData = Items[side].Data;
        Selections[side].AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self, int idx) { ImGuiID* items = (ImGuiID*)self->UserData; return items[idx]; };
        Selections[side].ApplyRequests(ms_io);
    }
    static int IMGUI_CDECL CompareItemsByValue(const void* lhs, const void* rhs)
    {
        const int* a = (const int*)lhs;
        const int* b = (const int*)rhs;
        return (*a - *b);
    }
    void SortItems(int n)
    {
        qsort(Items[n].Data, (size_t)Items[n].Size, sizeof(Items[n][0]), CompareItemsByValue);
    }
    void Show()
    {
        //if (ImGui::Checkbox("Sorted", &OptKeepSorted) && OptKeepSorted) { SortItems(0); SortItems(1); }
        if (ImGui::BeginTable("split", 3, ImGuiTableFlags_None))
        {
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthStretch);    // Left side
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed);      // Buttons
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthStretch);    // Right side
            ImGui::TableNextRow();

            int request_move_selected = -1;
            int request_move_all = -1;
            float child_height_0 = 0.0f;
            for (int side = 0; side < 2; side++)
            {
                // FIXME-MULTISELECT: Dual List Box: Add context menus
                // FIXME-NAV: Using ImGuiWindowFlags_NavFlattened exhibit many issues.
                ImVector<ImGuiID>& items = Items[side];
                ImGuiSelectionBasicStorage& selection = Selections[side];

                ImGui::TableSetColumnIndex((side == 0) ? 0 : 2);
                ImGui::Text("%s (%d)", (side == 0) ? "Available" : "Basket", items.Size);

                // Submit scrolling range to avoid glitches on moving/deletion
                const float items_height = ImGui::GetTextLineHeightWithSpacing();
                ImGui::SetNextWindowContentSize(ImVec2(0.0f, items.Size * items_height));

                bool child_visible;
                if (side == 0)
                {
                    // Left child is resizable
                    ImGui::SetNextWindowSizeConstraints(ImVec2(0.0f, ImGui::GetFrameHeightWithSpacing() * 4), ImVec2(FLT_MAX, FLT_MAX));
                    child_visible = ImGui::BeginChild("0", ImVec2(-FLT_MIN, ImGui::GetFontSize() * 20), ImGuiChildFlags_FrameStyle | ImGuiChildFlags_ResizeY);
                    child_height_0 = ImGui::GetWindowSize().y;
                }
                else
                {
                    // Right child use same height as left one
                    child_visible = ImGui::BeginChild("1", ImVec2(-FLT_MIN, child_height_0), ImGuiChildFlags_FrameStyle);
                }
                if (child_visible)
                {
                    ImGuiMultiSelectFlags flags = ImGuiMultiSelectFlags_None;
                    ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(flags, selection.Size, items.Size);
                    ApplySelectionRequests(ms_io, side);

                    for (int item_n = 0; item_n < items.Size; item_n++)
                    {
                        ImGuiID item_id = items[item_n];
                        bool item_is_selected = selection.Contains(item_id);
                        ImGui::SetNextItemSelectionUserData(item_n);
                        ImGui::Selectable(ExampleNames[item_id], item_is_selected, ImGuiSelectableFlags_AllowDoubleClick);
                        if (ImGui::IsItemFocused())
                        {
                            // FIXME-MULTISELECT: Dual List Box: Transfer focus
                            if (ImGui::IsKeyPressed(ImGuiKey_Enter) || ImGui::IsKeyPressed(ImGuiKey_KeypadEnter))
                                request_move_selected = side;
                            if (ImGui::IsMouseDoubleClicked(0)) // FIXME-MULTISELECT: Double-click on multi-selection?
                                request_move_selected = side;
                        }
                    }

                    ms_io = ImGui::EndMultiSelect();
                    ApplySelectionRequests(ms_io, side);
                }
                ImGui::EndChild();
            }

            // Buttons columns
            ImGui::TableSetColumnIndex(1);
            ImGui::NewLine();
            //ImVec2 button_sz = { ImGui::CalcTextSize(">>").x + ImGui::GetStyle().FramePadding.x * 2.0f, ImGui::GetFrameHeight() + padding.y * 2.0f };
            ImVec2 button_sz = { ImGui::GetFrameHeight(), ImGui::GetFrameHeight() };

            // (Using BeginDisabled()/EndDisabled() works but feels distracting given how it is currently visualized)
            if (ImGui::Button(">>", button_sz))
                request_move_all = 0;
            if (ImGui::Button(">", button_sz))
                request_move_selected = 0;
            if (ImGui::Button("<", button_sz))
                request_move_selected = 1;
            if (ImGui::Button("<<", button_sz))
                request_move_all = 1;

            // Process requests
            if (request_move_all != -1)
                MoveAll(request_move_all, request_move_all ^ 1);
            if (request_move_selected != -1)
                MoveSelected(request_move_selected, request_move_selected ^ 1);

            // FIXME-MULTISELECT: Support action from outside
            /*
            if (OptKeepSorted == false)
            {
                ImGui::NewLine();
                if (ImGui::ArrowButton("MoveUp", ImGuiDir_Up)) {}
                if (ImGui::ArrowButton("MoveDown", ImGuiDir_Down)) {}
            }
            */

            ImGui::EndTable();
        }
    }
};

static void DemoWindowWidgetsSelectionAndMultiSelect(ImGuiDemoWindowData* demo_data)
{
    IMGUI_DEMO_MARKER("Widgets/Selection State & Multi-Select");
    if (ImGui::TreeNode("Selection State & Multi-Select"))
    {
        HelpMarker("Selections can be built using Selectable(), TreeNode() or other widgets. Selection state is owned by application code/data.");

        ImGui::BulletText("Wiki page:");
        ImGui::SameLine();
        ImGui::TextLinkOpenURL("imgui/wiki/Multi-Select", "https://github.com/ocornut/imgui/wiki/Multi-Select");

        // Without any fancy API: manage single-selection yourself.
        IMGUI_DEMO_MARKER("Widgets/Selection State/Single-Select");
        if (ImGui::TreeNode("Single-Select"))
        {
            static int selected = -1;
            for (int n = 0; n < 5; n++)
            {
                char buf[32];
                sprintf(buf, "Object %d", n);
                if (ImGui::Selectable(buf, selected == n))
                    selected = n;
            }
            ImGui::TreePop();
        }

        // Demonstrate implementation a most-basic form of multi-selection manually
        // This doesn't support the SHIFT modifier which requires BeginMultiSelect()!
        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select (manual/simplified, without BeginMultiSelect)");
        if (ImGui::TreeNode("Multi-Select (manual/simplified, without BeginMultiSelect)"))
        {
            HelpMarker("Hold CTRL and click to select multiple items.");
            static bool selection[5] = { false, false, false, false, false };
            for (int n = 0; n < 5; n++)
            {
                char buf[32];
                sprintf(buf, "Object %d", n);
                if (ImGui::Selectable(buf, selection[n]))
                {
                    if (!ImGui::GetIO().KeyCtrl) // Clear selection when CTRL is not held
                        memset(selection, 0, sizeof(selection));
                    selection[n] ^= 1; // Toggle current item
                }
            }
            ImGui::TreePop();
        }

        // Demonstrate handling proper multi-selection using the BeginMultiSelect/EndMultiSelect API.
        // SHIFT+Click w/ CTRL and other standard features are supported.
        // We use the ImGuiSelectionBasicStorage helper which you may freely reimplement.
        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select");
        if (ImGui::TreeNode("Multi-Select"))
        {
            ImGui::Text("Supported features:");
            ImGui::BulletText("Keyboard navigation (arrows, page up/down, home/end, space).");
            ImGui::BulletText("Ctrl modifier to preserve and toggle selection.");
            ImGui::BulletText("Shift modifier for range selection.");
            ImGui::BulletText("CTRL+A to select all.");
            ImGui::BulletText("Escape to clear selection.");
            ImGui::BulletText("Click and drag to box-select.");
            ImGui::Text("Tip: Use 'Demo->Tools->Debug Log->Selection' to see selection requests as they happen.");

            // Use default selection.Adapter: Pass index to SetNextItemSelectionUserData(), store index in Selection
            const int ITEMS_COUNT = 50;
            static ImGuiSelectionBasicStorage selection;
            ImGui::Text("Selection: %d/%d", selection.Size, ITEMS_COUNT);

            // The BeginChild() has no purpose for selection logic, other that offering a scrolling region.
            if (ImGui::BeginChild("##Basket", ImVec2(-FLT_MIN, ImGui::GetFontSize() * 20), ImGuiChildFlags_FrameStyle | ImGuiChildFlags_ResizeY))
            {
                ImGuiMultiSelectFlags flags = ImGuiMultiSelectFlags_ClearOnEscape | ImGuiMultiSelectFlags_BoxSelect1d;
                ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(flags, selection.Size, ITEMS_COUNT);
                selection.ApplyRequests(ms_io);

                for (int n = 0; n < ITEMS_COUNT; n++)
                {
                    char label[64];
                    sprintf(label, "Object %05d: %s", n, ExampleNames[n % IM_ARRAYSIZE(ExampleNames)]);
                    bool item_is_selected = selection.Contains((ImGuiID)n);
                    ImGui::SetNextItemSelectionUserData(n);
                    ImGui::Selectable(label, item_is_selected);
                }

                ms_io = ImGui::EndMultiSelect();
                selection.ApplyRequests(ms_io);
            }
            ImGui::EndChild();
            ImGui::TreePop();
        }

        // Demonstrate using the clipper with BeginMultiSelect()/EndMultiSelect()
        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select (with clipper)");
        if (ImGui::TreeNode("Multi-Select (with clipper)"))
        {
            // Use default selection.Adapter: Pass index to SetNextItemSelectionUserData(), store index in Selection
            static ImGuiSelectionBasicStorage selection;

            ImGui::Text("Added features:");
            ImGui::BulletText("Using ImGuiListClipper.");

            const int ITEMS_COUNT = 10000;
            ImGui::Text("Selection: %d/%d", selection.Size, ITEMS_COUNT);
            if (ImGui::BeginChild("##Basket", ImVec2(-FLT_MIN, ImGui::GetFontSize() * 20), ImGuiChildFlags_FrameStyle | ImGuiChildFlags_ResizeY))
            {
                ImGuiMultiSelectFlags flags = ImGuiMultiSelectFlags_ClearOnEscape | ImGuiMultiSelectFlags_BoxSelect1d;
                ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(flags, selection.Size, ITEMS_COUNT);
                selection.ApplyRequests(ms_io);

                ImGuiListClipper clipper;
                clipper.Begin(ITEMS_COUNT);
                if (ms_io->RangeSrcItem != -1)
                    clipper.IncludeItemByIndex((int)ms_io->RangeSrcItem); // Ensure RangeSrc item is not clipped.
                while (clipper.Step())
                {
                    for (int n = clipper.DisplayStart; n < clipper.DisplayEnd; n++)
                    {
                        char label[64];
                        sprintf(label, "Object %05d: %s", n, ExampleNames[n % IM_ARRAYSIZE(ExampleNames)]);
                        bool item_is_selected = selection.Contains((ImGuiID)n);
                        ImGui::SetNextItemSelectionUserData(n);
                        ImGui::Selectable(label, item_is_selected);
                    }
                }

                ms_io = ImGui::EndMultiSelect();
                selection.ApplyRequests(ms_io);
            }
            ImGui::EndChild();
            ImGui::TreePop();
        }

        // Demonstrate dynamic item list + deletion support using the BeginMultiSelect/EndMultiSelect API.
        // In order to support Deletion without any glitches you need to:
        // - (1) If items are submitted in their own scrolling area, submit contents size SetNextWindowContentSize() ahead of time to prevent one-frame readjustment of scrolling.
        // - (2) Items needs to have persistent ID Stack identifier = ID needs to not depends on their index. PushID(index) = KO. PushID(item_id) = OK. This is in order to focus items reliably after a selection.
        // - (3) BeginXXXX process
        // - (4) Focus process
        // - (5) EndXXXX process
        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select (with deletion)");
        if (ImGui::TreeNode("Multi-Select (with deletion)"))
        {
            // Storing items data separately from selection data.
            // (you may decide to store selection data inside your item (aka intrusive storage) if you don't need multiple views over same items)
            // Use a custom selection.Adapter: store item identifier in Selection (instead of index)
            static ImVector<ImGuiID> items;
            static ExampleSelectionWithDeletion selection;
            selection.UserData = (void*)&items;
            selection.AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self, int idx) { ImVector<ImGuiID>* p_items = (ImVector<ImGuiID>*)self->UserData; return (*p_items)[idx]; }; // Index -> ID

            ImGui::Text("Added features:");
            ImGui::BulletText("Dynamic list with Delete key support.");
            ImGui::Text("Selection size: %d/%d", selection.Size, items.Size);

            // Initialize default list with 50 items + button to add/remove items.
            static ImGuiID items_next_id = 0;
            if (items_next_id == 0)
                for (ImGuiID n = 0; n < 50; n++)
                    items.push_back(items_next_id++);
            if (ImGui::SmallButton("Add 20 items"))     { for (int n = 0; n < 20; n++) { items.push_back(items_next_id++); } }
            ImGui::SameLine();
            if (ImGui::SmallButton("Remove 20 items"))  { for (int n = IM_MIN(20, items.Size); n > 0; n--) { selection.SetItemSelected(items.back(), false); items.pop_back(); } }

            // (1) Extra to support deletion: Submit scrolling range to avoid glitches on deletion
            const float items_height = ImGui::GetTextLineHeightWithSpacing();
            ImGui::SetNextWindowContentSize(ImVec2(0.0f, items.Size * items_height));

            if (ImGui::BeginChild("##Basket", ImVec2(-FLT_MIN, ImGui::GetFontSize() * 20), ImGuiChildFlags_FrameStyle | ImGuiChildFlags_ResizeY))
            {
                ImGuiMultiSelectFlags flags = ImGuiMultiSelectFlags_ClearOnEscape | ImGuiMultiSelectFlags_BoxSelect1d;
                ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(flags, selection.Size, items.Size);
                selection.ApplyRequests(ms_io);

                const bool want_delete = ImGui::Shortcut(ImGuiKey_Delete, ImGuiInputFlags_Repeat) && (selection.Size > 0);
                const int item_curr_idx_to_focus = want_delete ? selection.ApplyDeletionPreLoop(ms_io, items.Size) : -1;

                for (int n = 0; n < items.Size; n++)
                {
                    const ImGuiID item_id = items[n];
                    char label[64];
                    sprintf(label, "Object %05u: %s", item_id, ExampleNames[item_id % IM_ARRAYSIZE(ExampleNames)]);

                    bool item_is_selected = selection.Contains(item_id);
                    ImGui::SetNextItemSelectionUserData(n);
                    ImGui::Selectable(label, item_is_selected);
                    if (item_curr_idx_to_focus == n)
                        ImGui::SetKeyboardFocusHere(-1);
                }

                // Apply multi-select requests
                ms_io = ImGui::EndMultiSelect();
                selection.ApplyRequests(ms_io);
                if (want_delete)
                    selection.ApplyDeletionPostLoop(ms_io, items, item_curr_idx_to_focus);
            }
            ImGui::EndChild();
            ImGui::TreePop();
        }

        // Implement a Dual List Box (#6648)
        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select (dual list box)");
        if (ImGui::TreeNode("Multi-Select (dual list box)"))
        {
            // Init default state
            static ExampleDualListBox dlb;
            if (dlb.Items[0].Size == 0 && dlb.Items[1].Size == 0)
                for (int item_id = 0; item_id < IM_ARRAYSIZE(ExampleNames); item_id++)
                    dlb.Items[0].push_back((ImGuiID)item_id);

            // Show
            dlb.Show();

            ImGui::TreePop();
        }

        // Demonstrate using the clipper with BeginMultiSelect()/EndMultiSelect()
        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select (in a table)");
        if (ImGui::TreeNode("Multi-Select (in a table)"))
        {
            static ImGuiSelectionBasicStorage selection;

            const int ITEMS_COUNT = 10000;
            ImGui::Text("Selection: %d/%d", selection.Size, ITEMS_COUNT);
            if (ImGui::BeginTable("##Basket", 2, ImGuiTableFlags_ScrollY | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter))
            {
                ImGui::TableSetupColumn("Object");
                ImGui::TableSetupColumn("Action");
                ImGui::TableSetupScrollFreeze(0, 1);
                ImGui::TableHeadersRow();

                ImGuiMultiSelectFlags flags = ImGuiMultiSelectFlags_ClearOnEscape | ImGuiMultiSelectFlags_BoxSelect1d;
                ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(flags, selection.Size, ITEMS_COUNT);
                selection.ApplyRequests(ms_io);

                ImGuiListClipper clipper;
                clipper.Begin(ITEMS_COUNT);
                if (ms_io->RangeSrcItem != -1)
                    clipper.IncludeItemByIndex((int)ms_io->RangeSrcItem); // Ensure RangeSrc item is not clipped.
                while (clipper.Step())
                {
                    for (int n = clipper.DisplayStart; n < clipper.DisplayEnd; n++)
                    {
                        ImGui::TableNextRow();
                        ImGui::TableNextColumn();
                        char label[64];
                        sprintf(label, "Object %05d: %s", n, ExampleNames[n % IM_ARRAYSIZE(ExampleNames)]);
                        bool item_is_selected = selection.Contains((ImGuiID)n);
                        ImGui::SetNextItemSelectionUserData(n);
                        ImGui::Selectable(label, item_is_selected, ImGuiSelectableFlags_SpanAllColumns | ImGuiSelectableFlags_AllowOverlap);
                        ImGui::TableNextColumn();
                        ImGui::SmallButton("hello");
                    }
                }

                ms_io = ImGui::EndMultiSelect();
                selection.ApplyRequests(ms_io);
                ImGui::EndTable();
            }
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select (checkboxes)");
        if (ImGui::TreeNode("Multi-Select (checkboxes)"))
        {
            ImGui::Text("In a list of checkboxes (not selectable):");
            ImGui::BulletText("Using _NoAutoSelect + _NoAutoClear flags.");
            ImGui::BulletText("Shift+Click to check multiple boxes.");
            ImGui::BulletText("Shift+Keyboard to copy current value to other boxes.");

            // If you have an array of checkboxes, you may want to use NoAutoSelect + NoAutoClear and the ImGuiSelectionExternalStorage helper.
            static bool items[20] = {};
            static ImGuiMultiSelectFlags flags = ImGuiMultiSelectFlags_NoAutoSelect | ImGuiMultiSelectFlags_NoAutoClear | ImGuiMultiSelectFlags_ClearOnEscape;
            ImGui::CheckboxFlags("ImGuiMultiSelectFlags_NoAutoSelect", &flags, ImGuiMultiSelectFlags_NoAutoSelect);
            ImGui::CheckboxFlags("ImGuiMultiSelectFlags_NoAutoClear", &flags, ImGuiMultiSelectFlags_NoAutoClear);
            ImGui::CheckboxFlags("ImGuiMultiSelectFlags_BoxSelect2d", &flags, ImGuiMultiSelectFlags_BoxSelect2d); // Cannot use ImGuiMultiSelectFlags_BoxSelect1d as checkboxes are varying width.

            if (ImGui::BeginChild("##Basket", ImVec2(-FLT_MIN, ImGui::GetFontSize() * 20), ImGuiChildFlags_Borders | ImGuiChildFlags_ResizeY))
            {
                ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(flags, -1, IM_ARRAYSIZE(items));
                ImGuiSelectionExternalStorage storage_wrapper;
                storage_wrapper.UserData = (void*)items;
                storage_wrapper.AdapterSetItemSelected = [](ImGuiSelectionExternalStorage* self, int n, bool selected) { bool* array = (bool*)self->UserData; array[n] = selected; };
                storage_wrapper.ApplyRequests(ms_io);
                for (int n = 0; n < 20; n++)
                {
                    char label[32];
                    sprintf(label, "Item %d", n);
                    ImGui::SetNextItemSelectionUserData(n);
                    ImGui::Checkbox(label, &items[n]);
                }
                ms_io = ImGui::EndMultiSelect();
                storage_wrapper.ApplyRequests(ms_io);
            }
            ImGui::EndChild();

            ImGui::TreePop();
        }

        // Demonstrate individual selection scopes in same window
        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select (multiple scopes)");
        if (ImGui::TreeNode("Multi-Select (multiple scopes)"))
        {
            // Use default select: Pass index to SetNextItemSelectionUserData(), store index in Selection
            const int SCOPES_COUNT = 3;
            const int ITEMS_COUNT = 8; // Per scope
            static ImGuiSelectionBasicStorage selections_data[SCOPES_COUNT];

            // Use ImGuiMultiSelectFlags_ScopeRect to not affect other selections in same window.
            static ImGuiMultiSelectFlags flags = ImGuiMultiSelectFlags_ScopeRect | ImGuiMultiSelectFlags_ClearOnEscape;// | ImGuiMultiSelectFlags_ClearOnClickVoid;
            if (ImGui::CheckboxFlags("ImGuiMultiSelectFlags_ScopeWindow", &flags, ImGuiMultiSelectFlags_ScopeWindow) && (flags & ImGuiMultiSelectFlags_ScopeWindow))
                flags &= ~ImGuiMultiSelectFlags_ScopeRect;
            if (ImGui::CheckboxFlags("ImGuiMultiSelectFlags_ScopeRect", &flags, ImGuiMultiSelectFlags_ScopeRect) && (flags & ImGuiMultiSelectFlags_ScopeRect))
                flags &= ~ImGuiMultiSelectFlags_ScopeWindow;
            ImGui::CheckboxFlags("ImGuiMultiSelectFlags_ClearOnClickVoid", &flags, ImGuiMultiSelectFlags_ClearOnClickVoid);
            ImGui::CheckboxFlags("ImGuiMultiSelectFlags_BoxSelect1d", &flags, ImGuiMultiSelectFlags_BoxSelect1d);

            for (int selection_scope_n = 0; selection_scope_n < SCOPES_COUNT; selection_scope_n++)
            {
                ImGui::PushID(selection_scope_n);
                ImGuiSelectionBasicStorage* selection = &selections_data[selection_scope_n];
                ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(flags, selection->Size, ITEMS_COUNT);
                selection->ApplyRequests(ms_io);

                ImGui::SeparatorText("Selection scope");
                ImGui::Text("Selection size: %d/%d", selection->Size, ITEMS_COUNT);

                for (int n = 0; n < ITEMS_COUNT; n++)
                {
                    char label[64];
                    sprintf(label, "Object %05d: %s", n, ExampleNames[n % IM_ARRAYSIZE(ExampleNames)]);
                    bool item_is_selected = selection->Contains((ImGuiID)n);
                    ImGui::SetNextItemSelectionUserData(n);
                    ImGui::Selectable(label, item_is_selected);
                }

                // Apply multi-select requests
                ms_io = ImGui::EndMultiSelect();
                selection->ApplyRequests(ms_io);
                ImGui::PopID();
            }
            ImGui::TreePop();
        }

        // See ShowExampleAppAssetsBrowser()
        if (ImGui::TreeNode("Multi-Select (tiled assets browser)"))
        {
            ImGui::Checkbox("Assets Browser", &demo_data->ShowAppAssetsBrowser);
            ImGui::Text("(also access from 'Examples->Assets Browser' in menu)");
            ImGui::TreePop();
        }

        // Demonstrate supporting multiple-selection in a tree.
        // - We don't use linear indices for selection user data, but our ExampleTreeNode* pointer directly!
        //   This showcase how SetNextItemSelectionUserData() never assume indices!
        // - The difficulty here is to "interpolate" from RangeSrcItem to RangeDstItem in the SetAll/SetRange request.
        //   We want this interpolation to match what the user sees: in visible order, skipping closed nodes.
        //   This is implemented by our TreeGetNextNodeInVisibleOrder() user-space helper.
        // - Important: In a real codebase aiming to implement full-featured selectable tree with custom filtering, you
        //   are more likely to build an array mapping sequential indices to visible tree nodes, since your
        //   filtering/search + clipping process will benefit from it. Having this will make this interpolation much easier.
        // - Consider this a prototype: we are working toward simplifying some of it.
        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select (trees)");
        if (ImGui::TreeNode("Multi-Select (trees)"))
        {
            HelpMarker(
                "This is rather advanced and experimental. If you are getting started with multi-select, "
                "please don't start by looking at how to use it for a tree!\n\n"
                "Future versions will try to simplify and formalize some of this.");

            struct ExampleTreeFuncs
            {
                static void DrawNode(ExampleTreeNode* node, ImGuiSelectionBasicStorage* selection)
                {
                    ImGuiTreeNodeFlags tree_node_flags = ImGuiTreeNodeFlags_SpanAvailWidth | ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick;
                    tree_node_flags |= ImGuiTreeNodeFlags_NavLeftJumpsToParent; // Enable pressing left to jump to parent
                    if (node->Childs.Size == 0)
                        tree_node_flags |= ImGuiTreeNodeFlags_Bullet | ImGuiTreeNodeFlags_Leaf;
                    if (selection->Contains((ImGuiID)node->UID))
                        tree_node_flags |= ImGuiTreeNodeFlags_Selected;

                    // Using SetNextItemStorageID() to specify storage id, so we can easily peek into
                    // the storage holding open/close stage, using our TreeNodeGetOpen/TreeNodeSetOpen() functions.
                    ImGui::SetNextItemSelectionUserData((ImGuiSelectionUserData)(intptr_t)node);
                    ImGui::SetNextItemStorageID((ImGuiID)node->UID);
                    if (ImGui::TreeNodeEx(node->Name, tree_node_flags))
                    {
                        for (ExampleTreeNode* child : node->Childs)
                            DrawNode(child, selection);
                        ImGui::TreePop();
                    }
                    else if (ImGui::IsItemToggledOpen())
                    {
                        TreeCloseAndUnselectChildNodes(node, selection);
                    }
                }

                static bool TreeNodeGetOpen(ExampleTreeNode* node)
                {
                    return ImGui::GetStateStorage()->GetBool((ImGuiID)node->UID);
                }

                static void TreeNodeSetOpen(ExampleTreeNode* node, bool open)
                {
                    ImGui::GetStateStorage()->SetBool((ImGuiID)node->UID, open);
                }

                // When closing a node: 1) close and unselect all child nodes, 2) select parent if any child was selected.
                // FIXME: This is currently handled by user logic but I'm hoping to eventually provide tree node
                // features to do this automatically, e.g. a ImGuiTreeNodeFlags_AutoCloseChildNodes etc.
                static int TreeCloseAndUnselectChildNodes(ExampleTreeNode* node, ImGuiSelectionBasicStorage* selection, int depth = 0)
                {
                    // Recursive close (the test for depth == 0 is because we call this on a node that was just closed!)
                    int unselected_count = selection->Contains((ImGuiID)node->UID) ? 1 : 0;
                    if (depth == 0 || TreeNodeGetOpen(node))
                    {
                        for (ExampleTreeNode* child : node->Childs)
                            unselected_count += TreeCloseAndUnselectChildNodes(child, selection, depth + 1);
                        TreeNodeSetOpen(node, false);
                    }

                    // Select root node if any of its child was selected, otherwise unselect
                    selection->SetItemSelected((ImGuiID)node->UID, (depth == 0 && unselected_count > 0));
                    return unselected_count;
                }

                // Apply multi-selection requests
                static void ApplySelectionRequests(ImGuiMultiSelectIO* ms_io, ExampleTreeNode* tree, ImGuiSelectionBasicStorage* selection)
                {
                    for (ImGuiSelectionRequest& req : ms_io->Requests)
                    {
                        if (req.Type == ImGuiSelectionRequestType_SetAll)
                        {
                            if (req.Selected)
                                TreeSetAllInOpenNodes(tree, selection, req.Selected);
                            else
                                selection->Clear();
                        }
                        else if (req.Type == ImGuiSelectionRequestType_SetRange)
                        {
                            ExampleTreeNode* first_node = (ExampleTreeNode*)(intptr_t)req.RangeFirstItem;
                            ExampleTreeNode* last_node = (ExampleTreeNode*)(intptr_t)req.RangeLastItem;
                            for (ExampleTreeNode* node = first_node; node != NULL; node = TreeGetNextNodeInVisibleOrder(node, last_node))
                                selection->SetItemSelected((ImGuiID)node->UID, req.Selected);
                        }
                    }
                }

                static void TreeSetAllInOpenNodes(ExampleTreeNode* node, ImGuiSelectionBasicStorage* selection, bool selected)
                {
                    if (node->Parent != NULL) // Root node isn't visible nor selectable in our scheme
                        selection->SetItemSelected((ImGuiID)node->UID, selected);
                    if (node->Parent == NULL || TreeNodeGetOpen(node))
                        for (ExampleTreeNode* child : node->Childs)
                            TreeSetAllInOpenNodes(child, selection, selected);
                }

                // Interpolate in *user-visible order* AND only *over opened nodes*.
                // If you have a sequential mapping tables (e.g. generated after a filter/search pass) this would be simpler.
                // Here the tricks are that:
                // - we store/maintain ExampleTreeNode::IndexInParent which allows implementing a linear iterator easily, without searches, without recursion.
                //   this could be replaced by a search in parent, aka 'int index_in_parent = curr_node->Parent->Childs.find_index(curr_node)'
                //   which would only be called when crossing from child to a parent, aka not too much.
                // - we call SetNextItemStorageID() before our TreeNode() calls with an ID which doesn't relate to UI stack,
                //   making it easier to call TreeNodeGetOpen()/TreeNodeSetOpen() from any location.
                static ExampleTreeNode* TreeGetNextNodeInVisibleOrder(ExampleTreeNode* curr_node, ExampleTreeNode* last_node)
                {
                    // Reached last node
                    if (curr_node == last_node)
                        return NULL;

                    // Recurse into childs. Query storage to tell if the node is open.
                    if (curr_node->Childs.Size > 0 && TreeNodeGetOpen(curr_node))
                        return curr_node->Childs[0];

                    // Next sibling, then into our own parent
                    while (curr_node->Parent != NULL)
                    {
                        if (curr_node->IndexInParent + 1 < curr_node->Parent->Childs.Size)
                            return curr_node->Parent->Childs[curr_node->IndexInParent + 1];
                        curr_node = curr_node->Parent;
                    }
                    return NULL;
                }

            }; // ExampleTreeFuncs

            static ImGuiSelectionBasicStorage selection;
            if (demo_data->DemoTree == NULL)
                demo_data->DemoTree = ExampleTree_CreateDemoTree(); // Create tree once
            ImGui::Text("Selection size: %d", selection.Size);

            if (ImGui::BeginChild("##Tree", ImVec2(-FLT_MIN, ImGui::GetFontSize() * 20), ImGuiChildFlags_FrameStyle | ImGuiChildFlags_ResizeY))
            {
                ExampleTreeNode* tree = demo_data->DemoTree;
                ImGuiMultiSelectFlags ms_flags = ImGuiMultiSelectFlags_ClearOnEscape | ImGuiMultiSelectFlags_BoxSelect2d;
                ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(ms_flags, selection.Size, -1);
                ExampleTreeFuncs::ApplySelectionRequests(ms_io, tree, &selection);
                for (ExampleTreeNode* node : tree->Childs)
                    ExampleTreeFuncs::DrawNode(node, &selection);
                ms_io = ImGui::EndMultiSelect();
                ExampleTreeFuncs::ApplySelectionRequests(ms_io, tree, &selection);
            }
            ImGui::EndChild();

            ImGui::TreePop();
        }

        // Advanced demonstration of BeginMultiSelect()
        // - Showcase clipping.
        // - Showcase deletion.
        // - Showcase basic drag and drop.
        // - Showcase TreeNode variant (note that tree node don't expand in the demo: supporting expanding tree nodes + clipping a separate thing).
        // - Showcase using inside a table.
        IMGUI_DEMO_MARKER("Widgets/Selection State/Multi-Select (advanced)");
        //ImGui::SetNextItemOpen(true, ImGuiCond_Once);
        if (ImGui::TreeNode("Multi-Select (advanced)"))
        {
            // Options
            enum WidgetType { WidgetType_Selectable, WidgetType_TreeNode };
            static bool use_clipper = true;
            static bool use_deletion = true;
            static bool use_drag_drop = true;
            static bool show_in_table = false;
            static bool show_color_button = true;
            static ImGuiMultiSelectFlags flags = ImGuiMultiSelectFlags_ClearOnEscape | ImGuiMultiSelectFlags_BoxSelect1d;
            static WidgetType widget_type = WidgetType_Selectable;

            if (ImGui::TreeNode("Options"))
            {
                if (ImGui::RadioButton("Selectables", widget_type == WidgetType_Selectable)) { widget_type = WidgetType_Selectable; }
                ImGui::SameLine();
                if (ImGui::RadioButton("Tree nodes", widget_type == WidgetType_TreeNode)) { widget_type = WidgetType_TreeNode; }
                ImGui::SameLine();
                HelpMarker("TreeNode() is technically supported but... using this correctly is more complicated (you need some sort of linear/random access to your tree, which is suited to advanced trees setups already implementing filters and clipper. We will work toward simplifying and demoing this.\n\nFor now the tree demo is actually a little bit meaningless because it is an empty tree with only root nodes.");
                ImGui::Checkbox("Enable clipper", &use_clipper);
                ImGui::Checkbox("Enable deletion", &use_deletion);
                ImGui::Checkbox("Enable drag & drop", &use_drag_drop);
                ImGui::Checkbox("Show in a table", &show_in_table);
                ImGui::Checkbox("Show color button", &show_color_button);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_SingleSelect", &flags, ImGuiMultiSelectFlags_SingleSelect);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_NoSelectAll", &flags, ImGuiMultiSelectFlags_NoSelectAll);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_NoRangeSelect", &flags, ImGuiMultiSelectFlags_NoRangeSelect);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_NoAutoSelect", &flags, ImGuiMultiSelectFlags_NoAutoSelect);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_NoAutoClear", &flags, ImGuiMultiSelectFlags_NoAutoClear);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_NoAutoClearOnReselect", &flags, ImGuiMultiSelectFlags_NoAutoClearOnReselect);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_NoSelectOnRightClick", &flags, ImGuiMultiSelectFlags_NoSelectOnRightClick);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_BoxSelect1d", &flags, ImGuiMultiSelectFlags_BoxSelect1d);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_BoxSelect2d", &flags, ImGuiMultiSelectFlags_BoxSelect2d);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_BoxSelectNoScroll", &flags, ImGuiMultiSelectFlags_BoxSelectNoScroll);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_ClearOnEscape", &flags, ImGuiMultiSelectFlags_ClearOnEscape);
                ImGui::CheckboxFlags("ImGuiMultiSelectFlags_ClearOnClickVoid", &flags, ImGuiMultiSelectFlags_ClearOnClickVoid);
                if (ImGui::CheckboxFlags("ImGuiMultiSelectFlags_ScopeWindow", &flags, ImGuiMultiSelectFlags_ScopeWindow) && (flags & ImGuiMultiSelectFlags_ScopeWindow))
                    flags &= ~ImGuiMultiSelectFlags_ScopeRect;
                if (ImGui::CheckboxFlags("ImGuiMultiSelectFlags_ScopeRect", &flags, ImGuiMultiSelectFlags_ScopeRect) && (flags & ImGuiMultiSelectFlags_ScopeRect))
                    flags &= ~ImGuiMultiSelectFlags_ScopeWindow;
                if (ImGui::CheckboxFlags("ImGuiMultiSelectFlags_SelectOnClick", &flags, ImGuiMultiSelectFlags_SelectOnClick) && (flags & ImGuiMultiSelectFlags_SelectOnClick))
                    flags &= ~ImGuiMultiSelectFlags_SelectOnClickRelease;
                if (ImGui::CheckboxFlags("ImGuiMultiSelectFlags_SelectOnClickRelease", &flags, ImGuiMultiSelectFlags_SelectOnClickRelease) && (flags & ImGuiMultiSelectFlags_SelectOnClickRelease))
                    flags &= ~ImGuiMultiSelectFlags_SelectOnClick;
                ImGui::SameLine(); HelpMarker("Allow dragging an unselected item without altering selection.");
                ImGui::TreePop();
            }

            // Initialize default list with 1000 items.
            // Use default selection.Adapter: Pass index to SetNextItemSelectionUserData(), store index in Selection
            static ImVector<int> items;
            static int items_next_id = 0;
            if (items_next_id == 0) { for (int n = 0; n < 1000; n++) { items.push_back(items_next_id++); } }
            static ExampleSelectionWithDeletion selection;
            static bool request_deletion_from_menu = false; // Queue deletion triggered from context menu

            ImGui::Text("Selection size: %d/%d", selection.Size, items.Size);

            const float items_height = (widget_type == WidgetType_TreeNode) ? ImGui::GetTextLineHeight() : ImGui::GetTextLineHeightWithSpacing();
            ImGui::SetNextWindowContentSize(ImVec2(0.0f, items.Size * items_height));
            if (ImGui::BeginChild("##Basket", ImVec2(-FLT_MIN, ImGui::GetFontSize() * 20), ImGuiChildFlags_FrameStyle | ImGuiChildFlags_ResizeY))
            {
                ImVec2 color_button_sz(ImGui::GetFontSize(), ImGui::GetFontSize());
                if (widget_type == WidgetType_TreeNode)
                    ImGui::PushStyleVarY(ImGuiStyleVar_ItemSpacing, 0.0f);

                ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(flags, selection.Size, items.Size);
                selection.ApplyRequests(ms_io);

                const bool want_delete = (ImGui::Shortcut(ImGuiKey_Delete, ImGuiInputFlags_Repeat) && (selection.Size > 0)) || request_deletion_from_menu;
                const int item_curr_idx_to_focus = want_delete ? selection.ApplyDeletionPreLoop(ms_io, items.Size) : -1;
                request_deletion_from_menu = false;

                if (show_in_table)
                {
                    if (widget_type == WidgetType_TreeNode)
                        ImGui::PushStyleVar(ImGuiStyleVar_CellPadding, ImVec2(0.0f, 0.0f));
                    ImGui::BeginTable("##Split", 2, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings | ImGuiTableFlags_NoPadOuterX);
                    ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthStretch, 0.70f);
                    ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthStretch, 0.30f);
                    //ImGui::PushStyleVarY(ImGuiStyleVar_ItemSpacing, 0.0f);
                }

                ImGuiListClipper clipper;
                if (use_clipper)
                {
                    clipper.Begin(items.Size);
                    if (item_curr_idx_to_focus != -1)
                        clipper.IncludeItemByIndex(item_curr_idx_to_focus); // Ensure focused item is not clipped.
                    if (ms_io->RangeSrcItem != -1)
                        clipper.IncludeItemByIndex((int)ms_io->RangeSrcItem); // Ensure RangeSrc item is not clipped.
                }

                while (!use_clipper || clipper.Step())
                {
                    const int item_begin = use_clipper ? clipper.DisplayStart : 0;
                    const int item_end = use_clipper ? clipper.DisplayEnd : items.Size;
                    for (int n = item_begin; n < item_end; n++)
                    {
                        if (show_in_table)
                            ImGui::TableNextColumn();

                        const int item_id = items[n];
                        const char* item_category = ExampleNames[item_id % IM_ARRAYSIZE(ExampleNames)];
                        char label[64];
                        sprintf(label, "Object %05d: %s", item_id, item_category);

                        // IMPORTANT: for deletion refocus to work we need object ID to be stable,
                        // aka not depend on their index in the list. Here we use our persistent item_id
                        // instead of index to build a unique ID that will persist.
                        // (If we used PushID(index) instead, focus wouldn't be restored correctly after deletion).
                        ImGui::PushID(item_id);

                        // Emit a color button, to test that Shift+LeftArrow landing on an item that is not part
                        // of the selection scope doesn't erroneously alter our selection.
                        if (show_color_button)
                        {
                            ImU32 dummy_col = (ImU32)((unsigned int)n * 0xC250B74B) | IM_COL32_A_MASK;
                            ImGui::ColorButton("##", ImColor(dummy_col), ImGuiColorEditFlags_NoTooltip, color_button_sz);
                            ImGui::SameLine();
                        }

                        // Submit item
                        bool item_is_selected = selection.Contains((ImGuiID)n);
                        bool item_is_open = false;
                        ImGui::SetNextItemSelectionUserData(n);
                        if (widget_type == WidgetType_Selectable)
                        {
                            ImGui::Selectable(label, item_is_selected, ImGuiSelectableFlags_None);
                        }
                        else if (widget_type == WidgetType_TreeNode)
                        {
                            ImGuiTreeNodeFlags tree_node_flags = ImGuiTreeNodeFlags_SpanAvailWidth | ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick;
                            if (item_is_selected)
                                tree_node_flags |= ImGuiTreeNodeFlags_Selected;
                            item_is_open = ImGui::TreeNodeEx(label, tree_node_flags);
                        }

                        // Focus (for after deletion)
                        if (item_curr_idx_to_focus == n)
                            ImGui::SetKeyboardFocusHere(-1);

                        // Drag and Drop
                        if (use_drag_drop && ImGui::BeginDragDropSource())
                        {
                            // Create payload with full selection OR single unselected item.
                            // (the later is only possible when using ImGuiMultiSelectFlags_SelectOnClickRelease)
                            if (ImGui::GetDragDropPayload() == NULL)
                            {
                                ImVector<int> payload_items;
                                void* it = NULL;
                                ImGuiID id = 0;
                                if (!item_is_selected)
                                    payload_items.push_back(item_id);
                                else
                                    while (selection.GetNextSelectedItem(&it, &id))
                                        payload_items.push_back((int)id);
                                ImGui::SetDragDropPayload("MULTISELECT_DEMO_ITEMS", payload_items.Data, (size_t)payload_items.size_in_bytes());
                            }

                            // Display payload content in tooltip
                            const ImGuiPayload* payload = ImGui::GetDragDropPayload();
                            const int* payload_items = (int*)payload->Data;
                            const int payload_count = (int)payload->DataSize / (int)sizeof(int);
                            if (payload_count == 1)
                                ImGui::Text("Object %05d: %s", payload_items[0], ExampleNames[payload_items[0] % IM_ARRAYSIZE(ExampleNames)]);
                            else
                                ImGui::Text("Dragging %d objects", payload_count);

                            ImGui::EndDragDropSource();
                        }

                        if (widget_type == WidgetType_TreeNode && item_is_open)
                            ImGui::TreePop();

                        // Right-click: context menu
                        if (ImGui::BeginPopupContextItem())
                        {
                            ImGui::BeginDisabled(!use_deletion || selection.Size == 0);
                            sprintf(label, "Delete %d item(s)###DeleteSelected", selection.Size);
                            if (ImGui::Selectable(label))
                                request_deletion_from_menu = true;
                            ImGui::EndDisabled();
                            ImGui::Selectable("Close");
                            ImGui::EndPopup();
                        }

                        // Demo content within a table
                        if (show_in_table)
                        {
                            ImGui::TableNextColumn();
                            ImGui::SetNextItemWidth(-FLT_MIN);
                            ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));
                            ImGui::InputText("###NoLabel", (char*)(void*)item_category, strlen(item_category), ImGuiInputTextFlags_ReadOnly);
                            ImGui::PopStyleVar();
                        }

                        ImGui::PopID();
                    }
                    if (!use_clipper)
                        break;
                }

                if (show_in_table)
                {
                    ImGui::EndTable();
                    if (widget_type == WidgetType_TreeNode)
                        ImGui::PopStyleVar();
                }

                // Apply multi-select requests
                ms_io = ImGui::EndMultiSelect();
                selection.ApplyRequests(ms_io);
                if (want_delete)
                    selection.ApplyDeletionPostLoop(ms_io, items, item_curr_idx_to_focus);

                if (widget_type == WidgetType_TreeNode)
                    ImGui::PopStyleVar();
            }
            ImGui::EndChild();
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsTabs()
//-----------------------------------------------------------------------------

static void EditTabBarFittingPolicyFlags(ImGuiTabBarFlags* p_flags)
{
    if ((*p_flags & ImGuiTabBarFlags_FittingPolicyMask_) == 0)
        *p_flags |= ImGuiTabBarFlags_FittingPolicyDefault_;
    if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyMixed", p_flags, ImGuiTabBarFlags_FittingPolicyMixed))
        *p_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyMixed);
    if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyShrink", p_flags, ImGuiTabBarFlags_FittingPolicyShrink))
        *p_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyShrink);
    if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyScroll", p_flags, ImGuiTabBarFlags_FittingPolicyScroll))
        *p_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyScroll);
}

static void DemoWindowWidgetsTabs()
{
    IMGUI_DEMO_MARKER("Widgets/Tabs");
    if (ImGui::TreeNode("Tabs"))
    {
        IMGUI_DEMO_MARKER("Widgets/Tabs/Basic");
        if (ImGui::TreeNode("Basic"))
        {
            ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_None;
            if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))
            {
                if (ImGui::BeginTabItem("Avocado"))
                {
                    ImGui::Text("This is the Avocado tab!\nblah blah blah blah blah");
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Broccoli"))
                {
                    ImGui::Text("This is the Broccoli tab!\nblah blah blah blah blah");
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Cucumber"))
                {
                    ImGui::Text("This is the Cucumber tab!\nblah blah blah blah blah");
                    ImGui::EndTabItem();
                }
                ImGui::EndTabBar();
            }
            ImGui::Separator();
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Tabs/Advanced & Close Button");
        if (ImGui::TreeNode("Advanced & Close Button"))
        {
            // Expose a couple of the available flags. In most cases you may just call BeginTabBar() with no flags (0).
            static ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_Reorderable;
            ImGui::CheckboxFlags("ImGuiTabBarFlags_Reorderable", &tab_bar_flags, ImGuiTabBarFlags_Reorderable);
            ImGui::CheckboxFlags("ImGuiTabBarFlags_AutoSelectNewTabs", &tab_bar_flags, ImGuiTabBarFlags_AutoSelectNewTabs);
            ImGui::CheckboxFlags("ImGuiTabBarFlags_TabListPopupButton", &tab_bar_flags, ImGuiTabBarFlags_TabListPopupButton);
            ImGui::CheckboxFlags("ImGuiTabBarFlags_NoCloseWithMiddleMouseButton", &tab_bar_flags, ImGuiTabBarFlags_NoCloseWithMiddleMouseButton);
            ImGui::CheckboxFlags("ImGuiTabBarFlags_DrawSelectedOverline", &tab_bar_flags, ImGuiTabBarFlags_DrawSelectedOverline);
            EditTabBarFittingPolicyFlags(&tab_bar_flags);

            // Tab Bar
            ImGui::AlignTextToFramePadding();
            ImGui::Text("Opened:");
            const char* names[4] = { "Artichoke", "Beetroot", "Celery", "Daikon" };
            static bool opened[4] = { true, true, true, true }; // Persistent user state
            for (int n = 0; n < IM_ARRAYSIZE(opened); n++)
            {
                ImGui::SameLine();
                ImGui::Checkbox(names[n], &opened[n]);
            }

            // Passing a bool* to BeginTabItem() is similar to passing one to Begin():
            // the underlying bool will be set to false when the tab is closed.
            if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))
            {
                for (int n = 0; n < IM_ARRAYSIZE(opened); n++)
                    if (opened[n] && ImGui::BeginTabItem(names[n], &opened[n], ImGuiTabItemFlags_None))
                    {
                        ImGui::Text("This is the %s tab!", names[n]);
                        if (n & 1)
                            ImGui::Text("I am an odd tab.");
                        ImGui::EndTabItem();
                    }
                ImGui::EndTabBar();
            }
            ImGui::Separator();
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Tabs/TabItemButton & Leading-Trailing flags");
        if (ImGui::TreeNode("TabItemButton & Leading/Trailing flags"))
        {
            static ImVector<int> active_tabs;
            static int next_tab_id = 0;
            if (next_tab_id == 0) // Initialize with some default tabs
                for (int i = 0; i < 3; i++)
                    active_tabs.push_back(next_tab_id++);

            // TabItemButton() and Leading/Trailing flags are distinct features which we will demo together.
            // (It is possible to submit regular tabs with Leading/Trailing flags, or TabItemButton tabs without Leading/Trailing flags...
            // but they tend to make more sense together)
            static bool show_leading_button = true;
            static bool show_trailing_button = true;
            ImGui::Checkbox("Show Leading TabItemButton()", &show_leading_button);
            ImGui::Checkbox("Show Trailing TabItemButton()", &show_trailing_button);

            // Expose some other flags which are useful to showcase how they interact with Leading/Trailing tabs
            static ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_AutoSelectNewTabs | ImGuiTabBarFlags_Reorderable | ImGuiTabBarFlags_FittingPolicyShrink;
            EditTabBarFittingPolicyFlags(&tab_bar_flags);

            if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))
            {
                // Demo a Leading TabItemButton(): click the "?" button to open a menu
                if (show_leading_button)
                    if (ImGui::TabItemButton("?", ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_NoTooltip))
                        ImGui::OpenPopup("MyHelpMenu");
                if (ImGui::BeginPopup("MyHelpMenu"))
                {
                    ImGui::Selectable("Hello!");
                    ImGui::EndPopup();
                }

                // Demo Trailing Tabs: click the "+" button to add a new tab.
                // (In your app you may want to use a font icon instead of the "+")
                // We submit it before the regular tabs, but thanks to the ImGuiTabItemFlags_Trailing flag it will always appear at the end.
                if (show_trailing_button)
                    if (ImGui::TabItemButton("+", ImGuiTabItemFlags_Trailing | ImGuiTabItemFlags_NoTooltip))
                        active_tabs.push_back(next_tab_id++); // Add new tab

                // Submit our regular tabs
                for (int n = 0; n < active_tabs.Size; )
                {
                    bool open = true;
                    char name[16];
                    snprintf(name, IM_ARRAYSIZE(name), "%04d", active_tabs[n]);
                    if (ImGui::BeginTabItem(name, &open, ImGuiTabItemFlags_None))
                    {
                        ImGui::Text("This is the %s tab!", name);
                        ImGui::EndTabItem();
                    }

                    if (!open)
                        active_tabs.erase(active_tabs.Data + n);
                    else
                        n++;
                }

                ImGui::EndTabBar();
            }
            ImGui::Separator();
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsText()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsText()
{
    IMGUI_DEMO_MARKER("Widgets/Text");
    if (ImGui::TreeNode("Text"))
    {
        IMGUI_DEMO_MARKER("Widgets/Text/Colored Text");
        if (ImGui::TreeNode("Colorful Text"))
        {
            // Using shortcut. You can use PushStyleColor()/PopStyleColor() for more flexibility.
            ImGui::TextColored(ImVec4(1.0f, 0.0f, 1.0f, 1.0f), "Pink");
            ImGui::TextColored(ImVec4(1.0f, 1.0f, 0.0f, 1.0f), "Yellow");
            ImGui::TextDisabled("Disabled");
            ImGui::SameLine(); HelpMarker("The TextDisabled color is stored in ImGuiStyle.");
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Text/Font Size");
        if (ImGui::TreeNode("Font Size"))
        {
            ImGuiStyle& style = ImGui::GetStyle();
            const float global_scale = style.FontScaleMain * style.FontScaleDpi;
            ImGui::Text("style.FontScaleMain = %0.2f", style.FontScaleMain);
            ImGui::Text("style.FontScaleDpi = %0.2f", style.FontScaleDpi);
            ImGui::Text("global_scale = ~%0.2f", global_scale); // This is not technically accurate as internal scales may apply, but conceptually let's pretend it is.
            ImGui::Text("FontSize = %0.2f", ImGui::GetFontSize());

            ImGui::SeparatorText("");
            static float custom_size = 16.0f;
            ImGui::SliderFloat("custom_size", &custom_size, 10.0f, 100.0f, "%.0f");
            ImGui::Text("ImGui::PushFont(nullptr, custom_size);");
            ImGui::PushFont(NULL, custom_size);
            ImGui::Text("FontSize = %.2f (== %.2f * global_scale)", ImGui::GetFontSize(), custom_size);
            ImGui::PopFont();

            ImGui::SeparatorText("");
            static float custom_scale = 1.0f;
            ImGui::SliderFloat("custom_scale", &custom_scale, 0.5f, 4.0f, "%.2f");
            ImGui::Text("ImGui::PushFont(nullptr, style.FontSizeBase * custom_scale);");
            ImGui::PushFont(NULL, style.FontSizeBase * custom_scale);
            ImGui::Text("FontSize = %.2f (== style.FontSizeBase * %.2f * global_scale)", ImGui::GetFontSize(), custom_scale);
            ImGui::PopFont();

            ImGui::SeparatorText("");
            for (float scaling = 0.5f; scaling <= 4.0f; scaling += 0.5f)
            {
                ImGui::PushFont(NULL, style.FontSizeBase * scaling);
                ImGui::Text("FontSize = %.2f (== style.FontSizeBase * %.2f * global_scale)", ImGui::GetFontSize(), scaling);
                ImGui::PopFont();
            }

            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Text/Word Wrapping");
        if (ImGui::TreeNode("Word Wrapping"))
        {
            // Using shortcut. You can use PushTextWrapPos()/PopTextWrapPos() for more flexibility.
            ImGui::TextWrapped(
                "This text should automatically wrap on the edge of the window. The current implementation "
                "for text wrapping follows simple rules suitable for English and possibly other languages.");
            ImGui::Spacing();

            static float wrap_width = 200.0f;
            ImGui::SliderFloat("Wrap width", &wrap_width, -20, 600, "%.0f");

            ImDrawList* draw_list = ImGui::GetWindowDrawList();
            for (int n = 0; n < 2; n++)
            {
                ImGui::Text("Test paragraph %d:", n);
                ImVec2 pos = ImGui::GetCursorScreenPos();
                ImVec2 marker_min = ImVec2(pos.x + wrap_width, pos.y);
                ImVec2 marker_max = ImVec2(pos.x + wrap_width + 10, pos.y + ImGui::GetTextLineHeight());
                ImGui::PushTextWrapPos(ImGui::GetCursorPos().x + wrap_width);
                if (n == 0)
                    ImGui::Text("The lazy dog is a good dog. This paragraph should fit within %.0f pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.", wrap_width);
                else
                    ImGui::Text("aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh");

                // Draw actual text bounding box, following by marker of our expected limit (should not overlap!)
                draw_list->AddRect(ImGui::GetItemRectMin(), ImGui::GetItemRectMax(), IM_COL32(255, 255, 0, 255));
                draw_list->AddRectFilled(marker_min, marker_max, IM_COL32(255, 0, 255, 255));
                ImGui::PopTextWrapPos();
            }

            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Text/UTF-8 Text");
        if (ImGui::TreeNode("UTF-8 Text"))
        {
            // UTF-8 test with Japanese characters
            // (Needs a suitable font? Try "Google Noto" or "Arial Unicode". See docs/FONTS.md for details.)
            // - From C++11 you can use the u8"my text" syntax to encode literal strings as UTF-8
            // - For earlier compiler, you may be able to encode your sources as UTF-8 (e.g. in Visual Studio, you
            //   can save your source files as 'UTF-8 without signature').
            // - FOR THIS DEMO FILE ONLY, BECAUSE WE WANT TO SUPPORT OLD COMPILERS, WE ARE *NOT* INCLUDING RAW UTF-8
            //   CHARACTERS IN THIS SOURCE FILE. Instead we are encoding a few strings with hexadecimal constants.
            //   Don't do this in your application! Please use u8"text in any language" in your application!
            // Note that characters values are preserved even by InputText() if the font cannot be displayed,
            // so you can safely copy & paste garbled characters into another application.
            ImGui::TextWrapped(
                "CJK text will only appear if the font was loaded with the appropriate CJK character ranges. "
                "Call io.Fonts->AddFontFromFileTTF() manually to load extra character ranges. "
                "Read docs/FONTS.md for details.");
            ImGui::Text("Hiragana: \xe3\x81\x8b\xe3\x81\x8d\xe3\x81\x8f\xe3\x81\x91\xe3\x81\x93 (kakikukeko)");
            ImGui::Text("Kanjis: \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e (nihongo)");
            static char buf[32] = "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e";
            //static char buf[32] = u8"NIHONGO"; // <- this is how you would write it with C++11, using real kanjis
            ImGui::InputText("UTF-8 input", buf, IM_ARRAYSIZE(buf));
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsTextFilter()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsTextFilter()
{
    IMGUI_DEMO_MARKER("Widgets/Text Filter");
    if (ImGui::TreeNode("Text Filter"))
    {
        // Helper class to easy setup a text filter.
        // You may want to implement a more feature-full filtering scheme in your own application.
        HelpMarker("Not a widget per-se, but ImGuiTextFilter is a helper to perform simple filtering on text strings.");
        static ImGuiTextFilter filter;
        ImGui::Text("Filter usage:\n"
            "  \"\"         display all lines\n"
            "  \"xxx\"      display lines containing \"xxx\"\n"
            "  \"xxx,yyy\"  display lines containing \"xxx\" or \"yyy\"\n"
            "  \"-xxx\"     hide lines containing \"xxx\"");
        filter.Draw();
        const char* lines[] = { "aaa1.c", "bbb1.c", "ccc1.c", "aaa2.cpp", "bbb2.cpp", "ccc2.cpp", "abc.h", "hello, world" };
        for (int i = 0; i < IM_ARRAYSIZE(lines); i++)
            if (filter.PassFilter(lines[i]))
                ImGui::BulletText("%s", lines[i]);
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsTextInput()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsTextInput()
{
    // To wire InputText() with std::string or any other custom string type,
    // see the "Text Input > Resize Callback" section of this demo, and the misc/cpp/imgui_stdlib.h file.
    IMGUI_DEMO_MARKER("Widgets/Text Input");
    if (ImGui::TreeNode("Text Input"))
    {
        IMGUI_DEMO_MARKER("Widgets/Text Input/Multi-line Text Input");
        if (ImGui::TreeNode("Multi-line Text Input"))
        {
            // Note: we are using a fixed-sized buffer for simplicity here. See ImGuiInputTextFlags_CallbackResize
            // and the code in misc/cpp/imgui_stdlib.h for how to setup InputText() for dynamically resizing strings.
            static char text[1024 * 16] =
                "/*\n"
                " The Pentium F00F bug, shorthand for F0 0F C7 C8,\n"
                " the hexadecimal encoding of one offending instruction,\n"
                " more formally, the invalid operand with locked CMPXCHG8B\n"
                " instruction bug, is a design flaw in the majority of\n"
                " Intel Pentium, Pentium MMX, and Pentium OverDrive\n"
                " processors (all in the P5 microarchitecture).\n"
                "*/\n\n"
                "label:\n"
                "\tlock cmpxchg8b eax\n";

            static ImGuiInputTextFlags flags = ImGuiInputTextFlags_AllowTabInput;
            HelpMarker("You can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputTextMultiline() to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example. (This is not demonstrated in imgui_demo.cpp because we don't want to include <string> in here)");
            ImGui::CheckboxFlags("ImGuiInputTextFlags_ReadOnly", &flags, ImGuiInputTextFlags_ReadOnly);
            ImGui::CheckboxFlags("ImGuiInputTextFlags_WordWrap", &flags, ImGuiInputTextFlags_WordWrap);
            ImGui::SameLine(); HelpMarker("Feature is currently in Beta. Please read comments in imgui.h");
            ImGui::CheckboxFlags("ImGuiInputTextFlags_AllowTabInput", &flags, ImGuiInputTextFlags_AllowTabInput);
            ImGui::SameLine(); HelpMarker("When _AllowTabInput is set, passing through the widget with Tabbing doesn't automatically activate it, in order to also cycling through subsequent widgets.");
            ImGui::CheckboxFlags("ImGuiInputTextFlags_CtrlEnterForNewLine", &flags, ImGuiInputTextFlags_CtrlEnterForNewLine);
            ImGui::InputTextMultiline("##source", text, IM_ARRAYSIZE(text), ImVec2(-FLT_MIN, ImGui::GetTextLineHeight() * 16), flags);
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Text Input/Filtered Text Input");
        if (ImGui::TreeNode("Filtered Text Input"))
        {
            struct TextFilters
            {
                // Modify character input by altering 'data->Eventchar' (ImGuiInputTextFlags_CallbackCharFilter callback)
                static int FilterCasingSwap(ImGuiInputTextCallbackData* data)
                {
                    if (data->EventChar >= 'a' && data->EventChar <= 'z') { data->EventChar -= 'a' - 'A'; } // Lowercase becomes uppercase
                    else if (data->EventChar >= 'A' && data->EventChar <= 'Z') { data->EventChar += 'a' - 'A'; } // Uppercase becomes lowercase
                    return 0;
                }

                // Return 0 (pass) if the character is 'i' or 'm' or 'g' or 'u' or 'i', otherwise return 1 (filter out)
                static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)
                {
                    if (data->EventChar < 256 && strchr("imgui", (char)data->EventChar))
                        return 0;
                    return 1;
                }
            };

            static char buf1[32] = ""; ImGui::InputText("default", buf1, IM_ARRAYSIZE(buf1));
            static char buf2[32] = ""; ImGui::InputText("decimal", buf2, IM_ARRAYSIZE(buf2), ImGuiInputTextFlags_CharsDecimal);
            static char buf3[32] = ""; ImGui::InputText("hexadecimal", buf3, IM_ARRAYSIZE(buf3), ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase);
            static char buf4[32] = ""; ImGui::InputText("uppercase", buf4, IM_ARRAYSIZE(buf4), ImGuiInputTextFlags_CharsUppercase);
            static char buf5[32] = ""; ImGui::InputText("no blank", buf5, IM_ARRAYSIZE(buf5), ImGuiInputTextFlags_CharsNoBlank);
            static char buf6[32] = ""; ImGui::InputText("casing swap", buf6, IM_ARRAYSIZE(buf6), ImGuiInputTextFlags_CallbackCharFilter, TextFilters::FilterCasingSwap); // Use CharFilter callback to replace characters.
            static char buf7[32] = ""; ImGui::InputText("\"imgui\"", buf7, IM_ARRAYSIZE(buf7), ImGuiInputTextFlags_CallbackCharFilter, TextFilters::FilterImGuiLetters); // Use CharFilter callback to disable some characters.
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Text Input/Password input");
        if (ImGui::TreeNode("Password Input"))
        {
            static char password[64] = "password123";
            ImGui::InputText("password", password, IM_ARRAYSIZE(password), ImGuiInputTextFlags_Password);
            ImGui::SameLine(); HelpMarker("Display all characters as '*'.\nDisable clipboard cut and copy.\nDisable logging.\n");
            ImGui::InputTextWithHint("password (w/ hint)", "<password>", password, IM_ARRAYSIZE(password), ImGuiInputTextFlags_Password);
            ImGui::InputText("password (clear)", password, IM_ARRAYSIZE(password));
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Text Input/Completion, History, Edit Callbacks");
        if (ImGui::TreeNode("Completion, History, Edit Callbacks"))
        {
            struct Funcs
            {
                static int MyCallback(ImGuiInputTextCallbackData* data)
                {
                    if (data->EventFlag == ImGuiInputTextFlags_CallbackCompletion)
                    {
                        data->InsertChars(data->CursorPos, "..");
                    }
                    else if (data->EventFlag == ImGuiInputTextFlags_CallbackHistory)
                    {
                        if (data->EventKey == ImGuiKey_UpArrow)
                        {
                            data->DeleteChars(0, data->BufTextLen);
                            data->InsertChars(0, "Pressed Up!");
                            data->SelectAll();
                        }
                        else if (data->EventKey == ImGuiKey_DownArrow)
                        {
                            data->DeleteChars(0, data->BufTextLen);
                            data->InsertChars(0, "Pressed Down!");
                            data->SelectAll();
                        }
                    }
                    else if (data->EventFlag == ImGuiInputTextFlags_CallbackEdit)
                    {
                        // Toggle casing of first character
                        char c = data->Buf[0];
                        if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) data->Buf[0] ^= 32;
                        data->BufDirty = true;

                        // Increment a counter
                        int* p_int = (int*)data->UserData;
                        *p_int = *p_int + 1;
                    }
                    return 0;
                }
            };
            static char buf1[64];
            ImGui::InputText("Completion", buf1, IM_ARRAYSIZE(buf1), ImGuiInputTextFlags_CallbackCompletion, Funcs::MyCallback);
            ImGui::SameLine(); HelpMarker(
                "Here we append \"..\" each time Tab is pressed. "
                "See 'Examples>Console' for a more meaningful demonstration of using this callback.");

            static char buf2[64];
            ImGui::InputText("History", buf2, IM_ARRAYSIZE(buf2), ImGuiInputTextFlags_CallbackHistory, Funcs::MyCallback);
            ImGui::SameLine(); HelpMarker(
                "Here we replace and select text each time Up/Down are pressed. "
                "See 'Examples>Console' for a more meaningful demonstration of using this callback.");

            static char buf3[64];
            static int edit_count = 0;
            ImGui::InputText("Edit", buf3, IM_ARRAYSIZE(buf3), ImGuiInputTextFlags_CallbackEdit, Funcs::MyCallback, (void*)&edit_count);
            ImGui::SameLine(); HelpMarker(
                "Here we toggle the casing of the first character on every edit + count edits.");
            ImGui::SameLine(); ImGui::Text("(%d)", edit_count);

            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Text Input/Resize Callback");
        if (ImGui::TreeNode("Resize Callback"))
        {
            // To wire InputText() with std::string or any other custom string type,
            // you can use the ImGuiInputTextFlags_CallbackResize flag + create a custom ImGui::InputText() wrapper
            // using your preferred type. See misc/cpp/imgui_stdlib.h for an implementation of this using std::string.
            HelpMarker(
                "Using ImGuiInputTextFlags_CallbackResize to wire your custom string type to InputText().\n\n"
                "See misc/cpp/imgui_stdlib.h for an implementation of this for std::string.");
            struct Funcs
            {
                static int MyResizeCallback(ImGuiInputTextCallbackData* data)
                {
                    if (data->EventFlag == ImGuiInputTextFlags_CallbackResize)
                    {
                        ImVector<char>* my_str = (ImVector<char>*)data->UserData;
                        IM_ASSERT(my_str->begin() == data->Buf);
                        my_str->resize(data->BufSize); // NB: On resizing calls, generally data->BufSize == data->BufTextLen + 1
                        data->Buf = my_str->begin();
                    }
                    return 0;
                }

                // Note: Because ImGui:: is a namespace you would typically add your own function into the namespace.
                // For example, you code may declare a function 'ImGui::InputText(const char* label, MyString* my_str)'
                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0)
                {
                    IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
                    return ImGui::InputTextMultiline(label, my_str->begin(), (size_t)my_str->size(), size, flags | ImGuiInputTextFlags_CallbackResize, Funcs::MyResizeCallback, (void*)my_str);
                }
            };

            // For this demo we are using ImVector as a string container.
            // Note that because we need to store a terminating zero character, our size/capacity are 1 more
            // than usually reported by a typical string class.
            static ImGuiInputTextFlags flags = ImGuiInputTextFlags_None;
            ImGui::CheckboxFlags("ImGuiInputTextFlags_WordWrap", &flags, ImGuiInputTextFlags_WordWrap);

            static ImVector<char> my_str;
            if (my_str.empty())
                my_str.push_back(0);
            Funcs::MyInputTextMultiline("##MyStr", &my_str, ImVec2(-FLT_MIN, ImGui::GetTextLineHeight() * 16), flags);
            ImGui::Text("Data: %p\nSize: %d\nCapacity: %d", (void*)my_str.begin(), my_str.size(), my_str.capacity());
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Text Input/Eliding, Alignment");
        if (ImGui::TreeNode("Eliding, Alignment"))
        {
            static char buf1[128] = "/path/to/some/folder/with/long/filename.cpp";
            static ImGuiInputTextFlags flags = ImGuiInputTextFlags_ElideLeft;
            ImGui::CheckboxFlags("ImGuiInputTextFlags_ElideLeft", &flags, ImGuiInputTextFlags_ElideLeft);
            ImGui::InputText("Path", buf1, IM_ARRAYSIZE(buf1), flags);
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Text Input/Miscellaneous");
        if (ImGui::TreeNode("Miscellaneous"))
        {
            static char buf1[16];
            static ImGuiInputTextFlags flags = ImGuiInputTextFlags_EscapeClearsAll;
            ImGui::CheckboxFlags("ImGuiInputTextFlags_EscapeClearsAll", &flags, ImGuiInputTextFlags_EscapeClearsAll);
            ImGui::CheckboxFlags("ImGuiInputTextFlags_ReadOnly", &flags, ImGuiInputTextFlags_ReadOnly);
            ImGui::CheckboxFlags("ImGuiInputTextFlags_NoUndoRedo", &flags, ImGuiInputTextFlags_NoUndoRedo);
            ImGui::InputText("Hello", buf1, IM_ARRAYSIZE(buf1), flags);
            ImGui::TreePop();
        }

        ImGui::TreePop();
    }

}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsTooltips()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsTooltips()
{
    IMGUI_DEMO_MARKER("Widgets/Tooltips");
    if (ImGui::TreeNode("Tooltips"))
    {
        // Tooltips are windows following the mouse. They do not take focus away.
        ImGui::SeparatorText("General");

        // Typical use cases:
        // - Short-form (text only):      SetItemTooltip("Hello");
        // - Short-form (any contents):   if (BeginItemTooltip()) { Text("Hello"); EndTooltip(); }

        // - Full-form (text only):       if (IsItemHovered(...)) { SetTooltip("Hello"); }
        // - Full-form (any contents):    if (IsItemHovered(...) && BeginTooltip()) { Text("Hello"); EndTooltip(); }

        HelpMarker(
            "Tooltip are typically created by using a IsItemHovered() + SetTooltip() sequence.\n\n"
            "We provide a helper SetItemTooltip() function to perform the two with standards flags.");

        ImVec2 sz = ImVec2(-FLT_MIN, 0.0f);

        ImGui::Button("Basic", sz);
        ImGui::SetItemTooltip("I am a tooltip");

        ImGui::Button("Fancy", sz);
        if (ImGui::BeginItemTooltip())
        {
            ImGui::Text("I am a fancy tooltip");
            static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
            ImGui::PlotLines("Curve", arr, IM_ARRAYSIZE(arr));
            ImGui::Text("Sin(time) = %f", sinf((float)ImGui::GetTime()));
            ImGui::EndTooltip();
        }

        ImGui::SeparatorText("Always On");

        // Showcase NOT relying on a IsItemHovered() to emit a tooltip.
        // Here the tooltip is always emitted when 'always_on == true'.
        static int always_on = 0;
        ImGui::RadioButton("Off", &always_on, 0);
        ImGui::SameLine();
        ImGui::RadioButton("Always On (Simple)", &always_on, 1);
        ImGui::SameLine();
        ImGui::RadioButton("Always On (Advanced)", &always_on, 2);
        if (always_on == 1)
            ImGui::SetTooltip("I am following you around.");
        else if (always_on == 2 && ImGui::BeginTooltip())
        {
            ImGui::ProgressBar(sinf((float)ImGui::GetTime()) * 0.5f + 0.5f, ImVec2(ImGui::GetFontSize() * 25, 0.0f));
            ImGui::EndTooltip();
        }

        ImGui::SeparatorText("Custom");

        HelpMarker(
            "Passing ImGuiHoveredFlags_ForTooltip to IsItemHovered() is the preferred way to standardize "
            "tooltip activation details across your application. You may however decide to use custom "
            "flags for a specific tooltip instance.");

        // The following examples are passed for documentation purpose but may not be useful to most users.
        // Passing ImGuiHoveredFlags_ForTooltip to IsItemHovered() will pull ImGuiHoveredFlags flags values from
        // 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav' depending on whether mouse or keyboard/gamepad is being used.
        // With default settings, ImGuiHoveredFlags_ForTooltip is equivalent to ImGuiHoveredFlags_DelayShort + ImGuiHoveredFlags_Stationary.
        ImGui::Button("Manual", sz);
        if (ImGui::IsItemHovered(ImGuiHoveredFlags_ForTooltip))
            ImGui::SetTooltip("I am a manually emitted tooltip.");

        ImGui::Button("DelayNone", sz);
        if (ImGui::IsItemHovered(ImGuiHoveredFlags_DelayNone))
            ImGui::SetTooltip("I am a tooltip with no delay.");

        ImGui::Button("DelayShort", sz);
        if (ImGui::IsItemHovered(ImGuiHoveredFlags_DelayShort | ImGuiHoveredFlags_NoSharedDelay))
            ImGui::SetTooltip("I am a tooltip with a short delay (%0.2f sec).", ImGui::GetStyle().HoverDelayShort);

        ImGui::Button("DelayLong", sz);
        if (ImGui::IsItemHovered(ImGuiHoveredFlags_DelayNormal | ImGuiHoveredFlags_NoSharedDelay))
            ImGui::SetTooltip("I am a tooltip with a long delay (%0.2f sec).", ImGui::GetStyle().HoverDelayNormal);

        ImGui::Button("Stationary", sz);
        if (ImGui::IsItemHovered(ImGuiHoveredFlags_Stationary))
            ImGui::SetTooltip("I am a tooltip requiring mouse to be stationary before activating.");

        // Using ImGuiHoveredFlags_ForTooltip will pull flags from 'style.HoverFlagsForTooltipMouse' or 'style.HoverFlagsForTooltipNav',
        // which default value include the ImGuiHoveredFlags_AllowWhenDisabled flag.
        ImGui::BeginDisabled();
        ImGui::Button("Disabled item", sz);
        if (ImGui::IsItemHovered(ImGuiHoveredFlags_ForTooltip))
            ImGui::SetTooltip("I am a a tooltip for a disabled item.");
        ImGui::EndDisabled();

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsTreeNodes()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsTreeNodes()
{
    IMGUI_DEMO_MARKER("Widgets/Tree Nodes");
    if (ImGui::TreeNode("Tree Nodes"))
    {
        // See see "Examples -> Property Editor" (ShowExampleAppPropertyEditor() function) for a fancier, data-driven tree.
        IMGUI_DEMO_MARKER("Widgets/Tree Nodes/Basic trees");
        if (ImGui::TreeNode("Basic trees"))
        {
            for (int i = 0; i < 5; i++)
            {
                // Use SetNextItemOpen() so set the default state of a node to be open. We could
                // also use TreeNodeEx() with the ImGuiTreeNodeFlags_DefaultOpen flag to achieve the same thing!
                if (i == 0)
                    ImGui::SetNextItemOpen(true, ImGuiCond_Once);

                // Here we use PushID() to generate a unique base ID, and then the "" used as TreeNode id won't conflict.
                // An alternative to using 'PushID() + TreeNode("", ...)' to generate a unique ID is to use 'TreeNode((void*)(intptr_t)i, ...)',
                // aka generate a dummy pointer-sized value to be hashed. The demo below uses that technique. Both are fine.
                ImGui::PushID(i);
                if (ImGui::TreeNode("", "Child %d", i))
                {
                    ImGui::Text("blah blah");
                    ImGui::SameLine();
                    if (ImGui::SmallButton("button")) {}
                    ImGui::TreePop();
                }
                ImGui::PopID();
            }
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Tree Nodes/Hierarchy lines");
        if (ImGui::TreeNode("Hierarchy lines"))
        {
            static ImGuiTreeNodeFlags base_flags = ImGuiTreeNodeFlags_DrawLinesFull | ImGuiTreeNodeFlags_DefaultOpen;
            HelpMarker("Default option for DrawLinesXXX is stored in style.TreeLinesFlags");
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_DrawLinesNone", &base_flags, ImGuiTreeNodeFlags_DrawLinesNone);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_DrawLinesFull", &base_flags, ImGuiTreeNodeFlags_DrawLinesFull);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_DrawLinesToNodes", &base_flags, ImGuiTreeNodeFlags_DrawLinesToNodes);

            if (ImGui::TreeNodeEx("Parent", base_flags))
            {
                if (ImGui::TreeNodeEx("Child 1", base_flags))
                {
                    ImGui::Button("Button for Child 1");
                    ImGui::TreePop();
                }
                if (ImGui::TreeNodeEx("Child 2", base_flags))
                {
                    ImGui::Button("Button for Child 2");
                    ImGui::TreePop();
                }
                ImGui::Text("Remaining contents");
                ImGui::Text("Remaining contents");
                ImGui::TreePop();
            }

            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Widgets/Tree Nodes/Advanced, with Selectable nodes");
        if (ImGui::TreeNode("Advanced, with Selectable nodes"))
        {
            HelpMarker(
                "This is a more typical looking tree with selectable nodes.\n"
                "Click to select, CTRL+Click to toggle, click on arrows or double-click to open.");
            static ImGuiTreeNodeFlags base_flags = ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_SpanAvailWidth;
            static bool align_label_with_current_x_position = false;
            static bool test_drag_and_drop = false;
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_OpenOnArrow", &base_flags, ImGuiTreeNodeFlags_OpenOnArrow);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_OpenOnDoubleClick", &base_flags, ImGuiTreeNodeFlags_OpenOnDoubleClick);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanAvailWidth", &base_flags, ImGuiTreeNodeFlags_SpanAvailWidth); ImGui::SameLine(); HelpMarker("Extend hit area to all available width instead of allowing more items to be laid out after the node.");
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanFullWidth", &base_flags, ImGuiTreeNodeFlags_SpanFullWidth);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanLabelWidth", &base_flags, ImGuiTreeNodeFlags_SpanLabelWidth); ImGui::SameLine(); HelpMarker("Reduce hit area to the text label and a bit of margin.");
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanAllColumns", &base_flags, ImGuiTreeNodeFlags_SpanAllColumns); ImGui::SameLine(); HelpMarker("For use in Tables only.");
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_AllowOverlap", &base_flags, ImGuiTreeNodeFlags_AllowOverlap);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_Framed", &base_flags, ImGuiTreeNodeFlags_Framed); ImGui::SameLine(); HelpMarker("Draw frame with background (e.g. for CollapsingHeader)");
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_NavLeftJumpsToParent", &base_flags, ImGuiTreeNodeFlags_NavLeftJumpsToParent);

            HelpMarker("Default option for DrawLinesXXX is stored in style.TreeLinesFlags");
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_DrawLinesNone", &base_flags, ImGuiTreeNodeFlags_DrawLinesNone);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_DrawLinesFull", &base_flags, ImGuiTreeNodeFlags_DrawLinesFull);
            ImGui::CheckboxFlags("ImGuiTreeNodeFlags_DrawLinesToNodes", &base_flags, ImGuiTreeNodeFlags_DrawLinesToNodes);

            ImGui::Checkbox("Align label with current X position", &align_label_with_current_x_position);
            ImGui::Checkbox("Test tree node as drag source", &test_drag_and_drop);
            ImGui::Text("Hello!");
            if (align_label_with_current_x_position)
                ImGui::Unindent(ImGui::GetTreeNodeToLabelSpacing());

            // 'selection_mask' is dumb representation of what may be user-side selection state.
            //  You may retain selection state inside or outside your objects in whatever format you see fit.
            // 'node_clicked' is temporary storage of what node we have clicked to process selection at the end
            /// of the loop. May be a pointer to your own node type, etc.
            static int selection_mask = (1 << 2);
            int node_clicked = -1;
            for (int i = 0; i < 6; i++)
            {
                // Disable the default "open on single-click behavior" + set Selected flag according to our selection.
                // To alter selection we use IsItemClicked() && !IsItemToggledOpen(), so clicking on an arrow doesn't alter selection.
                ImGuiTreeNodeFlags node_flags = base_flags;
                const bool is_selected = (selection_mask & (1 << i)) != 0;
                if (is_selected)
                    node_flags |= ImGuiTreeNodeFlags_Selected;
                if (i < 3)
                {
                    // Items 0..2 are Tree Node
                    bool node_open = ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Node %d", i);
                    if (ImGui::IsItemClicked() && !ImGui::IsItemToggledOpen())
                        node_clicked = i;
                    if (test_drag_and_drop && ImGui::BeginDragDropSource())
                    {
                        ImGui::SetDragDropPayload("_TREENODE", NULL, 0);
                        ImGui::Text("This is a drag and drop source");
                        ImGui::EndDragDropSource();
                    }
                    if (i == 2 && (base_flags & ImGuiTreeNodeFlags_SpanLabelWidth))
                    {
                        // Item 2 has an additional inline button to help demonstrate SpanLabelWidth.
                        ImGui::SameLine();
                        if (ImGui::SmallButton("button")) {}
                    }
                    if (node_open)
                    {
                        ImGui::BulletText("Blah blah\nBlah Blah");
                        ImGui::SameLine();
                        ImGui::SmallButton("Button");
                        ImGui::TreePop();
                    }
                }
                else
                {
                    // Items 3..5 are Tree Leaves
                    // The only reason we use TreeNode at all is to allow selection of the leaf. Otherwise we can
                    // use BulletText() or advance the cursor by GetTreeNodeToLabelSpacing() and call Text().
                    node_flags |= ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen; // ImGuiTreeNodeFlags_Bullet
                    ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Leaf %d", i);
                    if (ImGui::IsItemClicked() && !ImGui::IsItemToggledOpen())
                        node_clicked = i;
                    if (test_drag_and_drop && ImGui::BeginDragDropSource())
                    {
                        ImGui::SetDragDropPayload("_TREENODE", NULL, 0);
                        ImGui::Text("This is a drag and drop source");
                        ImGui::EndDragDropSource();
                    }
                }
            }
            if (node_clicked != -1)
            {
                // Update selection state
                // (process outside of tree loop to avoid visual inconsistencies during the clicking frame)
                if (ImGui::GetIO().KeyCtrl)
                    selection_mask ^= (1 << node_clicked);          // CTRL+click to toggle
                else //if (!(selection_mask & (1 << node_clicked))) // Depending on selection behavior you want, may want to preserve selection when clicking on item that is part of the selection
                    selection_mask = (1 << node_clicked);           // Click to single-select
            }
            if (align_label_with_current_x_position)
                ImGui::Indent(ImGui::GetTreeNodeToLabelSpacing());
            ImGui::TreePop();
        }
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgetsVerticalSliders()
//-----------------------------------------------------------------------------

static void DemoWindowWidgetsVerticalSliders()
{
    IMGUI_DEMO_MARKER("Widgets/Vertical Sliders");
    if (ImGui::TreeNode("Vertical Sliders"))
    {
        const float spacing = 4;
        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));

        static int int_value = 0;
        ImGui::VSliderInt("##int", ImVec2(18, 160), &int_value, 0, 5);
        ImGui::SameLine();

        static float values[7] = { 0.0f, 0.60f, 0.35f, 0.9f, 0.70f, 0.20f, 0.0f };
        ImGui::PushID("set1");
        for (int i = 0; i < 7; i++)
        {
            if (i > 0) ImGui::SameLine();
            ImGui::PushID(i);
            ImGui::PushStyleColor(ImGuiCol_FrameBg, (ImVec4)ImColor::HSV(i / 7.0f, 0.5f, 0.5f));
            ImGui::PushStyleColor(ImGuiCol_FrameBgHovered, (ImVec4)ImColor::HSV(i / 7.0f, 0.6f, 0.5f));
            ImGui::PushStyleColor(ImGuiCol_FrameBgActive, (ImVec4)ImColor::HSV(i / 7.0f, 0.7f, 0.5f));
            ImGui::PushStyleColor(ImGuiCol_SliderGrab, (ImVec4)ImColor::HSV(i / 7.0f, 0.9f, 0.9f));
            ImGui::VSliderFloat("##v", ImVec2(18, 160), &values[i], 0.0f, 1.0f, "");
            if (ImGui::IsItemActive() || ImGui::IsItemHovered())
                ImGui::SetTooltip("%.3f", values[i]);
            ImGui::PopStyleColor(4);
            ImGui::PopID();
        }
        ImGui::PopID();

        ImGui::SameLine();
        ImGui::PushID("set2");
        static float values2[4] = { 0.20f, 0.80f, 0.40f, 0.25f };
        const int rows = 3;
        const ImVec2 small_slider_size(18, (float)(int)((160.0f - (rows - 1) * spacing) / rows));
        for (int nx = 0; nx < 4; nx++)
        {
            if (nx > 0) ImGui::SameLine();
            ImGui::BeginGroup();
            for (int ny = 0; ny < rows; ny++)
            {
                ImGui::PushID(nx * rows + ny);
                ImGui::VSliderFloat("##v", small_slider_size, &values2[nx], 0.0f, 1.0f, "");
                if (ImGui::IsItemActive() || ImGui::IsItemHovered())
                    ImGui::SetTooltip("%.3f", values2[nx]);
                ImGui::PopID();
            }
            ImGui::EndGroup();
        }
        ImGui::PopID();

        ImGui::SameLine();
        ImGui::PushID("set3");
        for (int i = 0; i < 4; i++)
        {
            if (i > 0) ImGui::SameLine();
            ImGui::PushID(i);
            ImGui::PushStyleVar(ImGuiStyleVar_GrabMinSize, 40);
            ImGui::VSliderFloat("##v", ImVec2(40, 160), &values[i], 0.0f, 1.0f, "%.2f\nsec");
            ImGui::PopStyleVar();
            ImGui::PopID();
        }
        ImGui::PopID();
        ImGui::PopStyleVar();
        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowWidgets()
//-----------------------------------------------------------------------------

static void DemoWindowWidgets(ImGuiDemoWindowData* demo_data)
{
    IMGUI_DEMO_MARKER("Widgets");
    //ImGui::SetNextItemOpen(true, ImGuiCond_Once);
    if (!ImGui::CollapsingHeader("Widgets"))
        return;

    const bool disable_all = demo_data->DisableSections; // The Checkbox for that is inside the "Disabled" section at the bottom
    if (disable_all)
        ImGui::BeginDisabled();

    DemoWindowWidgetsBasic();
    DemoWindowWidgetsBullets();
    DemoWindowWidgetsCollapsingHeaders();
    DemoWindowWidgetsComboBoxes();
    DemoWindowWidgetsColorAndPickers();
    DemoWindowWidgetsDataTypes();

    if (disable_all)
        ImGui::EndDisabled();
    DemoWindowWidgetsDisableBlocks(demo_data);
    if (disable_all)
        ImGui::BeginDisabled();

    DemoWindowWidgetsDragAndDrop();
    DemoWindowWidgetsDragsAndSliders();
    DemoWindowWidgetsFonts();
    DemoWindowWidgetsImages();
    DemoWindowWidgetsListBoxes();
    DemoWindowWidgetsMultiComponents();
    DemoWindowWidgetsPlotting();
    DemoWindowWidgetsProgressBars();
    DemoWindowWidgetsQueryingStatuses();
    DemoWindowWidgetsSelectables();
    DemoWindowWidgetsSelectionAndMultiSelect(demo_data);
    DemoWindowWidgetsTabs();
    DemoWindowWidgetsText();
    DemoWindowWidgetsTextFilter();
    DemoWindowWidgetsTextInput();
    DemoWindowWidgetsTooltips();
    DemoWindowWidgetsTreeNodes();
    DemoWindowWidgetsVerticalSliders();

    if (disable_all)
        ImGui::EndDisabled();
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowLayout()
//-----------------------------------------------------------------------------

static void DemoWindowLayout()
{
    IMGUI_DEMO_MARKER("Layout");
    if (!ImGui::CollapsingHeader("Layout & Scrolling"))
        return;

    IMGUI_DEMO_MARKER("Layout/Child windows");
    if (ImGui::TreeNode("Child windows"))
    {
        ImGui::SeparatorText("Child windows");

        HelpMarker("Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window.");
        static bool disable_mouse_wheel = false;
        static bool disable_menu = false;
        ImGui::Checkbox("Disable Mouse Wheel", &disable_mouse_wheel);
        ImGui::Checkbox("Disable Menu", &disable_menu);

        // Child 1: no border, enable horizontal scrollbar
        {
            ImGuiWindowFlags window_flags = ImGuiWindowFlags_HorizontalScrollbar;
            if (disable_mouse_wheel)
                window_flags |= ImGuiWindowFlags_NoScrollWithMouse;
            ImGui::BeginChild("ChildL", ImVec2(ImGui::GetContentRegionAvail().x * 0.5f, 260), ImGuiChildFlags_None, window_flags);
            for (int i = 0; i < 100; i++)
                ImGui::Text("%04d: scrollable region", i);
            ImGui::EndChild();
        }

        ImGui::SameLine();

        // Child 2: rounded border
        {
            ImGuiWindowFlags window_flags = ImGuiWindowFlags_None;
            if (disable_mouse_wheel)
                window_flags |= ImGuiWindowFlags_NoScrollWithMouse;
            if (!disable_menu)
                window_flags |= ImGuiWindowFlags_MenuBar;
            ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 5.0f);
            ImGui::BeginChild("ChildR", ImVec2(0, 260), ImGuiChildFlags_Borders, window_flags);
            if (!disable_menu && ImGui::BeginMenuBar())
            {
                if (ImGui::BeginMenu("Menu"))
                {
                    ShowExampleMenuFile();
                    ImGui::EndMenu();
                }
                ImGui::EndMenuBar();
            }
            if (ImGui::BeginTable("split", 2, ImGuiTableFlags_Resizable | ImGuiTableFlags_NoSavedSettings))
            {
                for (int i = 0; i < 100; i++)
                {
                    char buf[32];
                    sprintf(buf, "%03d", i);
                    ImGui::TableNextColumn();
                    ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));
                }
                ImGui::EndTable();
            }
            ImGui::EndChild();
            ImGui::PopStyleVar();
        }

        // Child 3: manual-resize
        ImGui::SeparatorText("Manual-resize");
        {
            HelpMarker("Drag bottom border to resize. Double-click bottom border to auto-fit to vertical contents.");
            //if (ImGui::Button("Set Height to 200"))
            //    ImGui::SetNextWindowSize(ImVec2(-FLT_MIN, 200.0f));

            ImGui::PushStyleColor(ImGuiCol_ChildBg, ImGui::GetStyleColorVec4(ImGuiCol_FrameBg));
            if (ImGui::BeginChild("ResizableChild", ImVec2(-FLT_MIN, ImGui::GetTextLineHeightWithSpacing() * 8), ImGuiChildFlags_Borders | ImGuiChildFlags_ResizeY))
                for (int n = 0; n < 10; n++)
                    ImGui::Text("Line %04d", n);
            ImGui::PopStyleColor();
            ImGui::EndChild();
        }

        // Child 4: auto-resizing height with a limit
        ImGui::SeparatorText("Auto-resize with constraints");
        {
            static int draw_lines = 3;
            static int max_height_in_lines = 10;
            ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
            ImGui::DragInt("Lines Count", &draw_lines, 0.2f);
            ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
            ImGui::DragInt("Max Height (in Lines)", &max_height_in_lines, 0.2f);

            ImGui::SetNextWindowSizeConstraints(ImVec2(0.0f, ImGui::GetTextLineHeightWithSpacing() * 1), ImVec2(FLT_MAX, ImGui::GetTextLineHeightWithSpacing() * max_height_in_lines));
            if (ImGui::BeginChild("ConstrainedChild", ImVec2(-FLT_MIN, 0.0f), ImGuiChildFlags_Borders | ImGuiChildFlags_AutoResizeY))
                for (int n = 0; n < draw_lines; n++)
                    ImGui::Text("Line %04d", n);
            ImGui::EndChild();
        }

        ImGui::SeparatorText("Misc/Advanced");

        // Demonstrate a few extra things
        // - Changing ImGuiCol_ChildBg (which is transparent black in default styles)
        // - Using SetCursorPos() to position child window (the child window is an item from the POV of parent window)
        //   You can also call SetNextWindowPos() to position the child window. The parent window will effectively
        //   layout from this position.
        // - Using ImGui::GetItemRectMin/Max() to query the "item" state (because the child window is an item from
        //   the POV of the parent window). See 'Demo->Querying Status (Edited/Active/Hovered etc.)' for details.
        {
            static int offset_x = 0;
            static bool override_bg_color = true;
            static ImGuiChildFlags child_flags = ImGuiChildFlags_Borders | ImGuiChildFlags_ResizeX | ImGuiChildFlags_ResizeY;
            ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
            ImGui::DragInt("Offset X", &offset_x, 1.0f, -1000, 1000);
            ImGui::Checkbox("Override ChildBg color", &override_bg_color);
            ImGui::CheckboxFlags("ImGuiChildFlags_Borders", &child_flags, ImGuiChildFlags_Borders);
            ImGui::CheckboxFlags("ImGuiChildFlags_AlwaysUseWindowPadding", &child_flags, ImGuiChildFlags_AlwaysUseWindowPadding);
            ImGui::CheckboxFlags("ImGuiChildFlags_ResizeX", &child_flags, ImGuiChildFlags_ResizeX);
            ImGui::CheckboxFlags("ImGuiChildFlags_ResizeY", &child_flags, ImGuiChildFlags_ResizeY);
            ImGui::CheckboxFlags("ImGuiChildFlags_FrameStyle", &child_flags, ImGuiChildFlags_FrameStyle);
            ImGui::SameLine(); HelpMarker("Style the child window like a framed item: use FrameBg, FrameRounding, FrameBorderSize, FramePadding instead of ChildBg, ChildRounding, ChildBorderSize, WindowPadding.");
            if (child_flags & ImGuiChildFlags_FrameStyle)
                override_bg_color = false;

            ImGui::SetCursorPosX(ImGui::GetCursorPosX() + (float)offset_x);
            if (override_bg_color)
                ImGui::PushStyleColor(ImGuiCol_ChildBg, IM_COL32(255, 0, 0, 100));
            ImGui::BeginChild("Red", ImVec2(200, 100), child_flags, ImGuiWindowFlags_None);
            if (override_bg_color)
                ImGui::PopStyleColor();

            for (int n = 0; n < 50; n++)
                ImGui::Text("Some test %d", n);
            ImGui::EndChild();
            bool child_is_hovered = ImGui::IsItemHovered();
            ImVec2 child_rect_min = ImGui::GetItemRectMin();
            ImVec2 child_rect_max = ImGui::GetItemRectMax();
            ImGui::Text("Hovered: %d", child_is_hovered);
            ImGui::Text("Rect of child window is: (%.0f,%.0f) (%.0f,%.0f)", child_rect_min.x, child_rect_min.y, child_rect_max.x, child_rect_max.y);
        }

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Layout/Widgets Width");
    if (ImGui::TreeNode("Widgets Width"))
    {
        static float f = 0.0f;
        static bool show_indented_items = true;
        ImGui::Checkbox("Show indented items", &show_indented_items);

        // Use SetNextItemWidth() to set the width of a single upcoming item.
        // Use PushItemWidth()/PopItemWidth() to set the width of a group of items.
        // In real code use you'll probably want to choose width values that are proportional to your font size
        // e.g. Using '20.0f * GetFontSize()' as width instead of '200.0f', etc.

        ImGui::Text("SetNextItemWidth/PushItemWidth(100)");
        ImGui::SameLine(); HelpMarker("Fixed width.");
        ImGui::PushItemWidth(100);
        ImGui::DragFloat("float##1b", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##1b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        ImGui::Text("SetNextItemWidth/PushItemWidth(-100)");
        ImGui::SameLine(); HelpMarker("Align to right edge minus 100");
        ImGui::PushItemWidth(-100);
        ImGui::DragFloat("float##2a", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##2b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        ImGui::Text("SetNextItemWidth/PushItemWidth(GetContentRegionAvail().x * 0.5f)");
        ImGui::SameLine(); HelpMarker("Half of available width.\n(~ right-cursor_pos)\n(works within a column set)");
        ImGui::PushItemWidth(ImGui::GetContentRegionAvail().x * 0.5f);
        ImGui::DragFloat("float##3a", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##3b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        ImGui::Text("SetNextItemWidth/PushItemWidth(-GetContentRegionAvail().x * 0.5f)");
        ImGui::SameLine(); HelpMarker("Align to right edge minus half");
        ImGui::PushItemWidth(-ImGui::GetContentRegionAvail().x * 0.5f);
        ImGui::DragFloat("float##4a", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##4b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        ImGui::Text("SetNextItemWidth/PushItemWidth(-Min(GetContentRegionAvail().x * 0.40f, GetFontSize() * 12))");
        ImGui::PushItemWidth(-IM_MIN(ImGui::GetFontSize() * 12, ImGui::GetContentRegionAvail().x * 0.40f));
        ImGui::DragFloat("float##5a", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##5b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        // Demonstrate using PushItemWidth to surround three items.
        // Calling SetNextItemWidth() before each of them would have the same effect.
        ImGui::Text("SetNextItemWidth/PushItemWidth(-FLT_MIN)");
        ImGui::SameLine(); HelpMarker("Align to right edge");
        ImGui::PushItemWidth(-FLT_MIN);
        ImGui::DragFloat("##float6a", &f);
        if (show_indented_items)
        {
            ImGui::Indent();
            ImGui::DragFloat("float (indented)##6b", &f);
            ImGui::Unindent();
        }
        ImGui::PopItemWidth();

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout");
    if (ImGui::TreeNode("Basic Horizontal Layout"))
    {
        ImGui::TextWrapped("(Use ImGui::SameLine() to keep adding items to the right of the preceding item)");

        // Text
        IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/SameLine");
        ImGui::Text("Two items: Hello"); ImGui::SameLine();
        ImGui::TextColored(ImVec4(1, 1, 0, 1), "Sailor");

        // Adjust spacing
        ImGui::Text("More spacing: Hello"); ImGui::SameLine(0, 20);
        ImGui::TextColored(ImVec4(1, 1, 0, 1), "Sailor");

        // Button
        ImGui::AlignTextToFramePadding();
        ImGui::Text("Normal buttons"); ImGui::SameLine();
        ImGui::Button("Banana"); ImGui::SameLine();
        ImGui::Button("Apple"); ImGui::SameLine();
        ImGui::Button("Corniflower");

        // Button
        ImGui::Text("Small buttons"); ImGui::SameLine();
        ImGui::SmallButton("Like this one"); ImGui::SameLine();
        ImGui::Text("can fit within a text block.");

        // Aligned to arbitrary position. Easy/cheap column.
        IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/SameLine (with offset)");
        ImGui::Text("Aligned");
        ImGui::SameLine(150); ImGui::Text("x=150");
        ImGui::SameLine(300); ImGui::Text("x=300");
        ImGui::Text("Aligned");
        ImGui::SameLine(150); ImGui::SmallButton("x=150");
        ImGui::SameLine(300); ImGui::SmallButton("x=300");

        // Checkbox
        IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/SameLine (more)");
        static bool c1 = false, c2 = false, c3 = false, c4 = false;
        ImGui::Checkbox("My", &c1); ImGui::SameLine();
        ImGui::Checkbox("Tailor", &c2); ImGui::SameLine();
        ImGui::Checkbox("Is", &c3); ImGui::SameLine();
        ImGui::Checkbox("Rich", &c4);

        // Various
        static float f0 = 1.0f, f1 = 2.0f, f2 = 3.0f;
        ImGui::PushItemWidth(80);
        const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD" };
        static int item = -1;
        ImGui::Combo("Combo", &item, items, IM_ARRAYSIZE(items)); ImGui::SameLine();
        ImGui::SliderFloat("X", &f0, 0.0f, 5.0f); ImGui::SameLine();
        ImGui::SliderFloat("Y", &f1, 0.0f, 5.0f); ImGui::SameLine();
        ImGui::SliderFloat("Z", &f2, 0.0f, 5.0f);
        ImGui::PopItemWidth();

        ImGui::PushItemWidth(80);
        ImGui::Text("Lists:");
        static int selection[4] = { 0, 1, 2, 3 };
        for (int i = 0; i < 4; i++)
        {
            if (i > 0) ImGui::SameLine();
            ImGui::PushID(i);
            ImGui::ListBox("", &selection[i], items, IM_ARRAYSIZE(items));
            ImGui::PopID();
            //ImGui::SetItemTooltip("ListBox %d hovered", i);
        }
        ImGui::PopItemWidth();

        // Dummy
        IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/Dummy");
        ImVec2 button_sz(40, 40);
        ImGui::Button("A", button_sz); ImGui::SameLine();
        ImGui::Dummy(button_sz); ImGui::SameLine();
        ImGui::Button("B", button_sz);

        // Manually wrapping
        // (we should eventually provide this as an automatic layout feature, but for now you can do it manually)
        IMGUI_DEMO_MARKER("Layout/Basic Horizontal Layout/Manual wrapping");
        ImGui::Text("Manual wrapping:");
        ImGuiStyle& style = ImGui::GetStyle();
        int buttons_count = 20;
        float window_visible_x2 = ImGui::GetCursorScreenPos().x + ImGui::GetContentRegionAvail().x;
        for (int n = 0; n < buttons_count; n++)
        {
            ImGui::PushID(n);
            ImGui::Button("Box", button_sz);
            float last_button_x2 = ImGui::GetItemRectMax().x;
            float next_button_x2 = last_button_x2 + style.ItemSpacing.x + button_sz.x; // Expected position if next button was on same line
            if (n + 1 < buttons_count && next_button_x2 < window_visible_x2)
                ImGui::SameLine();
            ImGui::PopID();
        }

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Layout/Groups");
    if (ImGui::TreeNode("Groups"))
    {
        HelpMarker(
            "BeginGroup() basically locks the horizontal position for new line. "
            "EndGroup() bundles the whole group so that you can use \"item\" functions such as "
            "IsItemHovered()/IsItemActive() or SameLine() etc. on the whole group.");
        ImGui::BeginGroup();
        {
            ImGui::BeginGroup();
            ImGui::Button("AAA");
            ImGui::SameLine();
            ImGui::Button("BBB");
            ImGui::SameLine();
            ImGui::BeginGroup();
            ImGui::Button("CCC");
            ImGui::Button("DDD");
            ImGui::EndGroup();
            ImGui::SameLine();
            ImGui::Button("EEE");
            ImGui::EndGroup();
            ImGui::SetItemTooltip("First group hovered");
        }
        // Capture the group size and create widgets using the same size
        ImVec2 size = ImGui::GetItemRectSize();
        const float values[5] = { 0.5f, 0.20f, 0.80f, 0.60f, 0.25f };
        ImGui::PlotHistogram("##values", values, IM_ARRAYSIZE(values), 0, NULL, 0.0f, 1.0f, size);

        ImGui::Button("ACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x) * 0.5f, size.y));
        ImGui::SameLine();
        ImGui::Button("REACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x) * 0.5f, size.y));
        ImGui::EndGroup();
        ImGui::SameLine();

        ImGui::Button("LEVERAGE\nBUZZWORD", size);
        ImGui::SameLine();

        if (ImGui::BeginListBox("List", size))
        {
            ImGui::Selectable("Selected", true);
            ImGui::Selectable("Not Selected", false);
            ImGui::EndListBox();
        }

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Layout/Text Baseline Alignment");
    if (ImGui::TreeNode("Text Baseline Alignment"))
    {
        {
            ImGui::BulletText("Text baseline:");
            ImGui::SameLine(); HelpMarker(
                "This is testing the vertical alignment that gets applied on text to keep it aligned with widgets. "
                "Lines only composed of text or \"small\" widgets use less vertical space than lines with framed widgets.");
            ImGui::Indent();

            ImGui::Text("KO Blahblah"); ImGui::SameLine();
            ImGui::Button("Some framed item"); ImGui::SameLine();
            HelpMarker("Baseline of button will look misaligned with text..");

            // If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
            // (because we don't know what's coming after the Text() statement, we need to move the text baseline
            // down by FramePadding.y ahead of time)
            ImGui::AlignTextToFramePadding();
            ImGui::Text("OK Blahblah"); ImGui::SameLine();
            ImGui::Button("Some framed item##2"); ImGui::SameLine();
            HelpMarker("We call AlignTextToFramePadding() to vertically align the text baseline by +FramePadding.y");

            // SmallButton() uses the same vertical padding as Text
            ImGui::Button("TEST##1"); ImGui::SameLine();
            ImGui::Text("TEST"); ImGui::SameLine();
            ImGui::SmallButton("TEST##2");

            // If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
            ImGui::AlignTextToFramePadding();
            ImGui::Text("Text aligned to framed item"); ImGui::SameLine();
            ImGui::Button("Item##1"); ImGui::SameLine();
            ImGui::Text("Item"); ImGui::SameLine();
            ImGui::SmallButton("Item##2"); ImGui::SameLine();
            ImGui::Button("Item##3");

            ImGui::Unindent();
        }

        ImGui::Spacing();

        {
            ImGui::BulletText("Multi-line text:");
            ImGui::Indent();
            ImGui::Text("One\nTwo\nThree"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("Banana");

            ImGui::Text("Banana"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("One\nTwo\nThree");

            ImGui::Button("HOP##1"); ImGui::SameLine();
            ImGui::Text("Banana"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("Banana");

            ImGui::Button("HOP##2"); ImGui::SameLine();
            ImGui::Text("Hello\nWorld"); ImGui::SameLine();
            ImGui::Text("Banana");
            ImGui::Unindent();
        }

        ImGui::Spacing();

        {
            ImGui::BulletText("Misc items:");
            ImGui::Indent();

            // SmallButton() sets FramePadding to zero. Text baseline is aligned to match baseline of previous Button.
            ImGui::Button("80x80", ImVec2(80, 80));
            ImGui::SameLine();
            ImGui::Button("50x50", ImVec2(50, 50));
            ImGui::SameLine();
            ImGui::Button("Button()");
            ImGui::SameLine();
            ImGui::SmallButton("SmallButton()");

            // Tree
            // (here the node appears after a button and has odd intent, so we use ImGuiTreeNodeFlags_DrawLinesNone to disable hierarchy outline)
            const float spacing = ImGui::GetStyle().ItemInnerSpacing.x;
            ImGui::Button("Button##1");
            ImGui::SameLine(0.0f, spacing);
            if (ImGui::TreeNodeEx("Node##1", ImGuiTreeNodeFlags_DrawLinesNone))
            {
                // Placeholder tree data
                for (int i = 0; i < 6; i++)
                    ImGui::BulletText("Item %d..", i);
                ImGui::TreePop();
            }

            // Vertically align text node a bit lower so it'll be vertically centered with upcoming widget.
            // Otherwise you can use SmallButton() (smaller fit).
            ImGui::AlignTextToFramePadding();

            // Common mistake to avoid: if we want to SameLine after TreeNode we need to do it before we add
            // other contents below the node.
            bool node_open = ImGui::TreeNode("Node##2");
            ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##2");
            if (node_open)
            {
                // Placeholder tree data
                for (int i = 0; i < 6; i++)
                    ImGui::BulletText("Item %d..", i);
                ImGui::TreePop();
            }

            // Bullet
            ImGui::Button("Button##3");
            ImGui::SameLine(0.0f, spacing);
            ImGui::BulletText("Bullet text");

            ImGui::AlignTextToFramePadding();
            ImGui::BulletText("Node");
            ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##4");
            ImGui::Unindent();
        }

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Layout/Scrolling");
    if (ImGui::TreeNode("Scrolling"))
    {
        // Vertical scroll functions
        IMGUI_DEMO_MARKER("Layout/Scrolling/Vertical");
        HelpMarker("Use SetScrollHereY() or SetScrollFromPosY() to scroll to a given vertical position.");

        static int track_item = 50;
        static bool enable_track = true;
        static bool enable_extra_decorations = false;
        static float scroll_to_off_px = 0.0f;
        static float scroll_to_pos_px = 200.0f;

        ImGui::Checkbox("Decoration", &enable_extra_decorations);

        ImGui::PushItemWidth(ImGui::GetFontSize() * 10);
        enable_track |= ImGui::DragInt("##item", &track_item, 0.25f, 0, 99, "Item = %d");
        ImGui::SameLine();
        ImGui::Checkbox("Track", &enable_track);

        bool scroll_to_off = ImGui::DragFloat("##off", &scroll_to_off_px, 1.00f, 0, FLT_MAX, "+%.0f px");
        ImGui::SameLine();
        scroll_to_off |= ImGui::Button("Scroll Offset");

        bool scroll_to_pos = ImGui::DragFloat("##pos", &scroll_to_pos_px, 1.00f, -10, FLT_MAX, "X/Y = %.0f px");
        ImGui::SameLine();
        scroll_to_pos |= ImGui::Button("Scroll To Pos");
        ImGui::PopItemWidth();

        if (scroll_to_off || scroll_to_pos)
            enable_track = false;

        ImGuiStyle& style = ImGui::GetStyle();
        float child_w = (ImGui::GetContentRegionAvail().x - 4 * style.ItemSpacing.x) / 5;
        if (child_w < 1.0f)
            child_w = 1.0f;
        ImGui::PushID("##VerticalScrolling");
        for (int i = 0; i < 5; i++)
        {
            if (i > 0) ImGui::SameLine();
            ImGui::BeginGroup();
            const char* names[] = { "Top", "25%", "Center", "75%", "Bottom" };
            ImGui::TextUnformatted(names[i]);

            const ImGuiWindowFlags child_flags = enable_extra_decorations ? ImGuiWindowFlags_MenuBar : 0;
            const ImGuiID child_id = ImGui::GetID((void*)(intptr_t)i);
            const bool child_is_visible = ImGui::BeginChild(child_id, ImVec2(child_w, 200.0f), ImGuiChildFlags_Borders, child_flags);
            if (ImGui::BeginMenuBar())
            {
                ImGui::TextUnformatted("abc");
                ImGui::EndMenuBar();
            }
            if (scroll_to_off)
                ImGui::SetScrollY(scroll_to_off_px);
            if (scroll_to_pos)
                ImGui::SetScrollFromPosY(ImGui::GetCursorStartPos().y + scroll_to_pos_px, i * 0.25f);
            if (child_is_visible) // Avoid calling SetScrollHereY when running with culled items
            {
                for (int item = 0; item < 100; item++)
                {
                    if (enable_track && item == track_item)
                    {
                        ImGui::TextColored(ImVec4(1, 1, 0, 1), "Item %d", item);
                        ImGui::SetScrollHereY(i * 0.25f); // 0.0f:top, 0.5f:center, 1.0f:bottom
                    }
                    else
                    {
                        ImGui::Text("Item %d", item);
                    }
                }
            }
            float scroll_y = ImGui::GetScrollY();
            float scroll_max_y = ImGui::GetScrollMaxY();
            ImGui::EndChild();
            ImGui::Text("%.0f/%.0f", scroll_y, scroll_max_y);
            ImGui::EndGroup();
        }
        ImGui::PopID();

        // Horizontal scroll functions
        IMGUI_DEMO_MARKER("Layout/Scrolling/Horizontal");
        ImGui::Spacing();
        HelpMarker(
            "Use SetScrollHereX() or SetScrollFromPosX() to scroll to a given horizontal position.\n\n"
            "Because the clipping rectangle of most window hides half worth of WindowPadding on the "
            "left/right, using SetScrollFromPosX(+1) will usually result in clipped text whereas the "
            "equivalent SetScrollFromPosY(+1) wouldn't.");
        ImGui::PushID("##HorizontalScrolling");
        for (int i = 0; i < 5; i++)
        {
            float child_height = ImGui::GetTextLineHeight() + style.ScrollbarSize + style.WindowPadding.y * 2.0f;
            ImGuiWindowFlags child_flags = ImGuiWindowFlags_HorizontalScrollbar | (enable_extra_decorations ? ImGuiWindowFlags_AlwaysVerticalScrollbar : 0);
            ImGuiID child_id = ImGui::GetID((void*)(intptr_t)i);
            bool child_is_visible = ImGui::BeginChild(child_id, ImVec2(-100, child_height), ImGuiChildFlags_Borders, child_flags);
            if (scroll_to_off)
                ImGui::SetScrollX(scroll_to_off_px);
            if (scroll_to_pos)
                ImGui::SetScrollFromPosX(ImGui::GetCursorStartPos().x + scroll_to_pos_px, i * 0.25f);
            if (child_is_visible) // Avoid calling SetScrollHereY when running with culled items
            {
                for (int item = 0; item < 100; item++)
                {
                    if (item > 0)
                        ImGui::SameLine();
                    if (enable_track && item == track_item)
                    {
                        ImGui::TextColored(ImVec4(1, 1, 0, 1), "Item %d", item);
                        ImGui::SetScrollHereX(i * 0.25f); // 0.0f:left, 0.5f:center, 1.0f:right
                    }
                    else
                    {
                        ImGui::Text("Item %d", item);
                    }
                }
            }
            float scroll_x = ImGui::GetScrollX();
            float scroll_max_x = ImGui::GetScrollMaxX();
            ImGui::EndChild();
            ImGui::SameLine();
            const char* names[] = { "Left", "25%", "Center", "75%", "Right" };
            ImGui::Text("%s\n%.0f/%.0f", names[i], scroll_x, scroll_max_x);
            ImGui::Spacing();
        }
        ImGui::PopID();

        // Miscellaneous Horizontal Scrolling Demo
        IMGUI_DEMO_MARKER("Layout/Scrolling/Horizontal (more)");
        HelpMarker(
            "Horizontal scrolling for a window is enabled via the ImGuiWindowFlags_HorizontalScrollbar flag.\n\n"
            "You may want to also explicitly specify content width by using SetNextWindowContentWidth() before Begin().");
        static int lines = 7;
        ImGui::SliderInt("Lines", &lines, 1, 15);
        ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 3.0f);
        ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2.0f, 1.0f));
        ImVec2 scrolling_child_size = ImVec2(0, ImGui::GetFrameHeightWithSpacing() * 7 + 30);
        ImGui::BeginChild("scrolling", scrolling_child_size, ImGuiChildFlags_Borders, ImGuiWindowFlags_HorizontalScrollbar);
        for (int line = 0; line < lines; line++)
        {
            // Display random stuff. For the sake of this trivial demo we are using basic Button() + SameLine()
            // If you want to create your own time line for a real application you may be better off manipulating
            // the cursor position yourself, aka using SetCursorPos/SetCursorScreenPos to position the widgets
            // yourself. You may also want to use the lower-level ImDrawList API.
            int num_buttons = 10 + ((line & 1) ? line * 9 : line * 3);
            for (int n = 0; n < num_buttons; n++)
            {
                if (n > 0) ImGui::SameLine();
                ImGui::PushID(n + line * 1000);
                char num_buf[16];
                sprintf(num_buf, "%d", n);
                const char* label = (!(n % 15)) ? "FizzBuzz" : (!(n % 3)) ? "Fizz" : (!(n % 5)) ? "Buzz" : num_buf;
                float hue = n * 0.05f;
                ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(hue, 0.6f, 0.6f));
                ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(hue, 0.7f, 0.7f));
                ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(hue, 0.8f, 0.8f));
                ImGui::Button(label, ImVec2(40.0f + sinf((float)(line + n)) * 20.0f, 0.0f));
                ImGui::PopStyleColor(3);
                ImGui::PopID();
            }
        }
        float scroll_x = ImGui::GetScrollX();
        float scroll_max_x = ImGui::GetScrollMaxX();
        ImGui::EndChild();
        ImGui::PopStyleVar(2);
        float scroll_x_delta = 0.0f;
        ImGui::SmallButton("<<");
        if (ImGui::IsItemActive())
            scroll_x_delta = -ImGui::GetIO().DeltaTime * 1000.0f;
        ImGui::SameLine();
        ImGui::Text("Scroll from code"); ImGui::SameLine();
        ImGui::SmallButton(">>");
        if (ImGui::IsItemActive())
            scroll_x_delta = +ImGui::GetIO().DeltaTime * 1000.0f;
        ImGui::SameLine();
        ImGui::Text("%.0f/%.0f", scroll_x, scroll_max_x);
        if (scroll_x_delta != 0.0f)
        {
            // Demonstrate a trick: you can use Begin to set yourself in the context of another window
            // (here we are already out of your child window)
            ImGui::BeginChild("scrolling");
            ImGui::SetScrollX(ImGui::GetScrollX() + scroll_x_delta);
            ImGui::EndChild();
        }
        ImGui::Spacing();

        static bool show_horizontal_contents_size_demo_window = false;
        ImGui::Checkbox("Show Horizontal contents size demo window", &show_horizontal_contents_size_demo_window);

        if (show_horizontal_contents_size_demo_window)
        {
            static bool show_h_scrollbar = true;
            static bool show_button = true;
            static bool show_tree_nodes = true;
            static bool show_text_wrapped = false;
            static bool show_columns = true;
            static bool show_tab_bar = true;
            static bool show_child = false;
            static bool explicit_content_size = false;
            static float contents_size_x = 300.0f;
            if (explicit_content_size)
                ImGui::SetNextWindowContentSize(ImVec2(contents_size_x, 0.0f));
            ImGui::Begin("Horizontal contents size demo window", &show_horizontal_contents_size_demo_window, show_h_scrollbar ? ImGuiWindowFlags_HorizontalScrollbar : 0);
            IMGUI_DEMO_MARKER("Layout/Scrolling/Horizontal contents size demo window");
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(2, 0));
            ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 0));
            HelpMarker(
                "Test how different widgets react and impact the work rectangle growing when horizontal scrolling is enabled.\n\n"
                "Use 'Metrics->Tools->Show windows rectangles' to visualize rectangles.");
            ImGui::Checkbox("H-scrollbar", &show_h_scrollbar);
            ImGui::Checkbox("Button", &show_button);            // Will grow contents size (unless explicitly overwritten)
            ImGui::Checkbox("Tree nodes", &show_tree_nodes);    // Will grow contents size and display highlight over full width
            ImGui::Checkbox("Text wrapped", &show_text_wrapped);// Will grow and use contents size
            ImGui::Checkbox("Columns", &show_columns);          // Will use contents size
            ImGui::Checkbox("Tab bar", &show_tab_bar);          // Will use contents size
            ImGui::Checkbox("Child", &show_child);              // Will grow and use contents size
            ImGui::Checkbox("Explicit content size", &explicit_content_size);
            ImGui::Text("Scroll %.1f/%.1f %.1f/%.1f", ImGui::GetScrollX(), ImGui::GetScrollMaxX(), ImGui::GetScrollY(), ImGui::GetScrollMaxY());
            if (explicit_content_size)
            {
                ImGui::SameLine();
                ImGui::SetNextItemWidth(100);
                ImGui::DragFloat("##csx", &contents_size_x);
                ImVec2 p = ImGui::GetCursorScreenPos();
                ImGui::GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x + 10, p.y + 10), IM_COL32_WHITE);
                ImGui::GetWindowDrawList()->AddRectFilled(ImVec2(p.x + contents_size_x - 10, p.y), ImVec2(p.x + contents_size_x, p.y + 10), IM_COL32_WHITE);
                ImGui::Dummy(ImVec2(0, 10));
            }
            ImGui::PopStyleVar(2);
            ImGui::Separator();
            if (show_button)
            {
                ImGui::Button("this is a 300-wide button", ImVec2(300, 0));
            }
            if (show_tree_nodes)
            {
                bool open = true;
                if (ImGui::TreeNode("this is a tree node"))
                {
                    if (ImGui::TreeNode("another one of those tree node..."))
                    {
                        ImGui::Text("Some tree contents");
                        ImGui::TreePop();
                    }
                    ImGui::TreePop();
                }
                ImGui::CollapsingHeader("CollapsingHeader", &open);
            }
            if (show_text_wrapped)
            {
                ImGui::TextWrapped("This text should automatically wrap on the edge of the work rectangle.");
            }
            if (show_columns)
            {
                ImGui::Text("Tables:");
                if (ImGui::BeginTable("table", 4, ImGuiTableFlags_Borders))
                {
                    for (int n = 0; n < 4; n++)
                    {
                        ImGui::TableNextColumn();
                        ImGui::Text("Width %.2f", ImGui::GetContentRegionAvail().x);
                    }
                    ImGui::EndTable();
                }
                ImGui::Text("Columns:");
                ImGui::Columns(4);
                for (int n = 0; n < 4; n++)
                {
                    ImGui::Text("Width %.2f", ImGui::GetColumnWidth());
                    ImGui::NextColumn();
                }
                ImGui::Columns(1);
            }
            if (show_tab_bar && ImGui::BeginTabBar("Hello"))
            {
                if (ImGui::BeginTabItem("OneOneOne")) { ImGui::EndTabItem(); }
                if (ImGui::BeginTabItem("TwoTwoTwo")) { ImGui::EndTabItem(); }
                if (ImGui::BeginTabItem("ThreeThreeThree")) { ImGui::EndTabItem(); }
                if (ImGui::BeginTabItem("FourFourFour")) { ImGui::EndTabItem(); }
                ImGui::EndTabBar();
            }
            if (show_child)
            {
                ImGui::BeginChild("child", ImVec2(0, 0), ImGuiChildFlags_Borders);
                ImGui::EndChild();
            }
            ImGui::End();
        }

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Layout/Text Clipping");
    if (ImGui::TreeNode("Text Clipping"))
    {
        static ImVec2 size(100.0f, 100.0f);
        static ImVec2 offset(30.0f, 30.0f);
        ImGui::DragFloat2("size", (float*)&size, 0.5f, 1.0f, 200.0f, "%.0f");
        ImGui::TextWrapped("(Click and drag to scroll)");

        HelpMarker(
            "(Left) Using ImGui::PushClipRect():\n"
            "Will alter ImGui hit-testing logic + ImDrawList rendering.\n"
            "(use this if you want your clipping rectangle to affect interactions)\n\n"
            "(Center) Using ImDrawList::PushClipRect():\n"
            "Will alter ImDrawList rendering only.\n"
            "(use this as a shortcut if you are only using ImDrawList calls)\n\n"
            "(Right) Using ImDrawList::AddText() with a fine ClipRect:\n"
            "Will alter only this specific ImDrawList::AddText() rendering.\n"
            "This is often used internally to avoid altering the clipping rectangle and minimize draw calls.");

        for (int n = 0; n < 3; n++)
        {
            if (n > 0)
                ImGui::SameLine();

            ImGui::PushID(n);
            ImGui::InvisibleButton("##canvas", size);
            if (ImGui::IsItemActive() && ImGui::IsMouseDragging(ImGuiMouseButton_Left))
            {
                offset.x += ImGui::GetIO().MouseDelta.x;
                offset.y += ImGui::GetIO().MouseDelta.y;
            }
            ImGui::PopID();
            if (!ImGui::IsItemVisible()) // Skip rendering as ImDrawList elements are not clipped.
                continue;

            const ImVec2 p0 = ImGui::GetItemRectMin();
            const ImVec2 p1 = ImGui::GetItemRectMax();
            const char* text_str = "Line 1 hello\nLine 2 clip me!";
            const ImVec2 text_pos = ImVec2(p0.x + offset.x, p0.y + offset.y);
            ImDrawList* draw_list = ImGui::GetWindowDrawList();
            switch (n)
            {
            case 0:
                ImGui::PushClipRect(p0, p1, true);
                draw_list->AddRectFilled(p0, p1, IM_COL32(90, 90, 120, 255));
                draw_list->AddText(text_pos, IM_COL32_WHITE, text_str);
                ImGui::PopClipRect();
                break;
            case 1:
                draw_list->PushClipRect(p0, p1, true);
                draw_list->AddRectFilled(p0, p1, IM_COL32(90, 90, 120, 255));
                draw_list->AddText(text_pos, IM_COL32_WHITE, text_str);
                draw_list->PopClipRect();
                break;
            case 2:
                ImVec4 clip_rect(p0.x, p0.y, p1.x, p1.y); // AddText() takes a ImVec4* here so let's convert.
                draw_list->AddRectFilled(p0, p1, IM_COL32(90, 90, 120, 255));
                draw_list->AddText(ImGui::GetFont(), ImGui::GetFontSize(), text_pos, IM_COL32_WHITE, text_str, NULL, 0.0f, &clip_rect);
                break;
            }
        }

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Layout/Overlap Mode");
    if (ImGui::TreeNode("Overlap Mode"))
    {
        static bool enable_allow_overlap = true;

        HelpMarker(
            "Hit-testing is by default performed in item submission order, which generally is perceived as 'back-to-front'.\n\n"
            "By using SetNextItemAllowOverlap() you can notify that an item may be overlapped by another. "
            "Doing so alters the hovering logic: items using AllowOverlap mode requires an extra frame to accept hovered state.");
        ImGui::Checkbox("Enable AllowOverlap", &enable_allow_overlap);

        ImVec2 button1_pos = ImGui::GetCursorScreenPos();
        ImVec2 button2_pos = ImVec2(button1_pos.x + 50.0f, button1_pos.y + 50.0f);
        if (enable_allow_overlap)
            ImGui::SetNextItemAllowOverlap();
        ImGui::Button("Button 1", ImVec2(80, 80));
        ImGui::SetCursorScreenPos(button2_pos);
        ImGui::Button("Button 2", ImVec2(80, 80));

        // This is typically used with width-spanning items.
        // (note that Selectable() has a dedicated flag ImGuiSelectableFlags_AllowOverlap, which is a shortcut
        // for using SetNextItemAllowOverlap(). For demo purpose we use SetNextItemAllowOverlap() here.)
        if (enable_allow_overlap)
            ImGui::SetNextItemAllowOverlap();
        ImGui::Selectable("Some Selectable", false);
        ImGui::SameLine();
        ImGui::SmallButton("++");

        ImGui::TreePop();
    }
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowPopups()
//-----------------------------------------------------------------------------

static void DemoWindowPopups()
{
    IMGUI_DEMO_MARKER("Popups");
    if (!ImGui::CollapsingHeader("Popups & Modal windows"))
        return;

    // The properties of popups windows are:
    // - They block normal mouse hovering detection outside them. (*)
    // - Unless modal, they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
    // - Their visibility state (~bool) is held internally by Dear ImGui instead of being held by the programmer as
    //   we are used to with regular Begin() calls. User can manipulate the visibility state by calling OpenPopup().
    // (*) One can use IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup) to bypass it and detect hovering even
    //     when normally blocked by a popup.
    // Those three properties are connected. The library needs to hold their visibility state BECAUSE it can close
    // popups at any time.

    // Typical use for regular windows:
    //   bool my_tool_is_active = false; if (ImGui::Button("Open")) my_tool_is_active = true; [...] if (my_tool_is_active) Begin("My Tool", &my_tool_is_active) { [...] } End();
    // Typical use for popups:
    //   if (ImGui::Button("Open")) ImGui::OpenPopup("MyPopup"); if (ImGui::BeginPopup("MyPopup")) { [...] EndPopup(); }

    // With popups we have to go through a library call (here OpenPopup) to manipulate the visibility state.
    // This may be a bit confusing at first but it should quickly make sense. Follow on the examples below.

    IMGUI_DEMO_MARKER("Popups/Popups");
    if (ImGui::TreeNode("Popups"))
    {
        ImGui::TextWrapped(
            "When a popup is active, it inhibits interacting with windows that are behind the popup. "
            "Clicking outside the popup closes it.");

        static int selected_fish = -1;
        const char* names[] = { "Bream", "Haddock", "Mackerel", "Pollock", "Tilefish" };
        static bool toggles[] = { true, false, false, false, false };

        // Simple selection popup (if you want to show the current selection inside the Button itself,
        // you may want to build a string using the "###" operator to preserve a constant ID with a variable label)
        if (ImGui::Button("Select.."))
            ImGui::OpenPopup("my_select_popup");
        ImGui::SameLine();
        ImGui::TextUnformatted(selected_fish == -1 ? "<None>" : names[selected_fish]);
        if (ImGui::BeginPopup("my_select_popup"))
        {
            ImGui::SeparatorText("Aquarium");
            for (int i = 0; i < IM_ARRAYSIZE(names); i++)
                if (ImGui::Selectable(names[i]))
                    selected_fish = i;
            ImGui::EndPopup();
        }

        // Showing a menu with toggles
        if (ImGui::Button("Toggle.."))
            ImGui::OpenPopup("my_toggle_popup");
        if (ImGui::BeginPopup("my_toggle_popup"))
        {
            for (int i = 0; i < IM_ARRAYSIZE(names); i++)
                ImGui::MenuItem(names[i], "", &toggles[i]);
            if (ImGui::BeginMenu("Sub-menu"))
            {
                ImGui::MenuItem("Click me");
                ImGui::EndMenu();
            }

            ImGui::Separator();
            ImGui::Text("Tooltip here");
            ImGui::SetItemTooltip("I am a tooltip over a popup");

            if (ImGui::Button("Stacked Popup"))
                ImGui::OpenPopup("another popup");
            if (ImGui::BeginPopup("another popup"))
            {
                for (int i = 0; i < IM_ARRAYSIZE(names); i++)
                    ImGui::MenuItem(names[i], "", &toggles[i]);
                if (ImGui::BeginMenu("Sub-menu"))
                {
                    ImGui::MenuItem("Click me");
                    if (ImGui::Button("Stacked Popup"))
                        ImGui::OpenPopup("another popup");
                    if (ImGui::BeginPopup("another popup"))
                    {
                        ImGui::Text("I am the last one here.");
                        ImGui::EndPopup();
                    }
                    ImGui::EndMenu();
                }
                ImGui::EndPopup();
            }
            ImGui::EndPopup();
        }

        // Call the more complete ShowExampleMenuFile which we use in various places of this demo
        if (ImGui::Button("With a menu.."))
            ImGui::OpenPopup("my_file_popup");
        if (ImGui::BeginPopup("my_file_popup", ImGuiWindowFlags_MenuBar))
        {
            if (ImGui::BeginMenuBar())
            {
                if (ImGui::BeginMenu("File"))
                {
                    ShowExampleMenuFile();
                    ImGui::EndMenu();
                }
                if (ImGui::BeginMenu("Edit"))
                {
                    ImGui::MenuItem("Dummy");
                    ImGui::EndMenu();
                }
                ImGui::EndMenuBar();
            }
            ImGui::Text("Hello from popup!");
            ImGui::Button("This is a dummy button..");
            ImGui::EndPopup();
        }

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Popups/Context menus");
    if (ImGui::TreeNode("Context menus"))
    {
        HelpMarker("\"Context\" functions are simple helpers to associate a Popup to a given Item or Window identifier.");

        // BeginPopupContextItem() is a helper to provide common/simple popup behavior of essentially doing:
        //     if (id == 0)
        //         id = GetItemID(); // Use last item id
        //     if (IsItemHovered() && IsMouseReleased(ImGuiMouseButton_Right))
        //         OpenPopup(id);
        //     return BeginPopup(id);
        // For advanced uses you may want to replicate and customize this code.
        // See more details in BeginPopupContextItem().

        // Example 1
        // When used after an item that has an ID (e.g. Button), we can skip providing an ID to BeginPopupContextItem(),
        // and BeginPopupContextItem() will use the last item ID as the popup ID.
        {
            const char* names[5] = { "Label1", "Label2", "Label3", "Label4", "Label5" };
            static int selected = -1;
            for (int n = 0; n < 5; n++)
            {
                if (ImGui::Selectable(names[n], selected == n))
                    selected = n;
                if (ImGui::BeginPopupContextItem()) // <-- use last item id as popup id
                {
                    selected = n;
                    ImGui::Text("This a popup for \"%s\"!", names[n]);
                    if (ImGui::Button("Close"))
                        ImGui::CloseCurrentPopup();
                    ImGui::EndPopup();
                }
                ImGui::SetItemTooltip("Right-click to open popup");
            }
        }

        // Example 2
        // Popup on a Text() element which doesn't have an identifier: we need to provide an identifier to BeginPopupContextItem().
        // Using an explicit identifier is also convenient if you want to activate the popups from different locations.
        {
            HelpMarker("Text() elements don't have stable identifiers so we need to provide one.");
            static float value = 0.5f;
            ImGui::Text("Value = %.3f <-- (1) right-click this text", value);
            if (ImGui::BeginPopupContextItem("my popup"))
            {
                if (ImGui::Selectable("Set to zero")) value = 0.0f;
                if (ImGui::Selectable("Set to PI")) value = 3.1415f;
                ImGui::SetNextItemWidth(-FLT_MIN);
                ImGui::DragFloat("##Value", &value, 0.1f, 0.0f, 0.0f);
                ImGui::EndPopup();
            }

            // We can also use OpenPopupOnItemClick() to toggle the visibility of a given popup.
            // Here we make it that right-clicking this other text element opens the same popup as above.
            // The popup itself will be submitted by the code above.
            ImGui::Text("(2) Or right-click this text");
            ImGui::OpenPopupOnItemClick("my popup", ImGuiPopupFlags_MouseButtonRight);

            // Back to square one: manually open the same popup.
            if (ImGui::Button("(3) Or click this button"))
                ImGui::OpenPopup("my popup");
        }

        // Example 3
        // When using BeginPopupContextItem() with an implicit identifier (NULL == use last item ID),
        // we need to make sure your item identifier is stable.
        // In this example we showcase altering the item label while preserving its identifier, using the ### operator (see FAQ).
        {
            HelpMarker("Showcase using a popup ID linked to item ID, with the item having a changing label + stable ID using the ### operator.");
            static char name[32] = "Label1";
            char buf[64];
            sprintf(buf, "Button: %s###Button", name); // ### operator override ID ignoring the preceding label
            ImGui::Button(buf);
            if (ImGui::BeginPopupContextItem())
            {
                ImGui::Text("Edit name:");
                ImGui::InputText("##edit", name, IM_ARRAYSIZE(name));
                if (ImGui::Button("Close"))
                    ImGui::CloseCurrentPopup();
                ImGui::EndPopup();
            }
            ImGui::SameLine(); ImGui::Text("(<-- right-click here)");
        }

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Popups/Modals");
    if (ImGui::TreeNode("Modals"))
    {
        ImGui::TextWrapped("Modal windows are like popups but the user cannot close them by clicking outside.");

        if (ImGui::Button("Delete.."))
            ImGui::OpenPopup("Delete?");

        // Always center this window when appearing
        ImVec2 center = ImGui::GetMainViewport()->GetCenter();
        ImGui::SetNextWindowPos(center, ImGuiCond_Appearing, ImVec2(0.5f, 0.5f));

        if (ImGui::BeginPopupModal("Delete?", NULL, ImGuiWindowFlags_AlwaysAutoResize))
        {
            ImGui::Text("All those beautiful files will be deleted.\nThis operation cannot be undone!");
            ImGui::Separator();

            //static int unused_i = 0;
            //ImGui::Combo("Combo", &unused_i, "Delete\0Delete harder\0");

            static bool dont_ask_me_next_time = false;
            ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));
            ImGui::Checkbox("Don't ask me next time", &dont_ask_me_next_time);
            ImGui::PopStyleVar();

            if (ImGui::Button("OK", ImVec2(120, 0))) { ImGui::CloseCurrentPopup(); }
            ImGui::SetItemDefaultFocus();
            ImGui::SameLine();
            if (ImGui::Button("Cancel", ImVec2(120, 0))) { ImGui::CloseCurrentPopup(); }
            ImGui::EndPopup();
        }

        if (ImGui::Button("Stacked modals.."))
            ImGui::OpenPopup("Stacked 1");
        if (ImGui::BeginPopupModal("Stacked 1", NULL, ImGuiWindowFlags_MenuBar))
        {
            if (ImGui::BeginMenuBar())
            {
                if (ImGui::BeginMenu("File"))
                {
                    if (ImGui::MenuItem("Some menu item")) {}
                    ImGui::EndMenu();
                }
                ImGui::EndMenuBar();
            }
            ImGui::Text("Hello from Stacked The First\nUsing style.Colors[ImGuiCol_ModalWindowDimBg] behind it.");

            // Testing behavior of widgets stacking their own regular popups over the modal.
            static int item = 1;
            static float color[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
            ImGui::Combo("Combo", &item, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");
            ImGui::ColorEdit4("Color", color);

            if (ImGui::Button("Add another modal.."))
                ImGui::OpenPopup("Stacked 2");

            // Also demonstrate passing a bool* to BeginPopupModal(), this will create a regular close button which
            // will close the popup. Note that the visibility state of popups is owned by imgui, so the input value
            // of the bool actually doesn't matter here.
            bool unused_open = true;
            if (ImGui::BeginPopupModal("Stacked 2", &unused_open))
            {
                ImGui::Text("Hello from Stacked The Second!");
                ImGui::ColorEdit4("Color", color); // Allow opening another nested popup
                if (ImGui::Button("Close"))
                    ImGui::CloseCurrentPopup();
                ImGui::EndPopup();
            }

            if (ImGui::Button("Close"))
                ImGui::CloseCurrentPopup();
            ImGui::EndPopup();
        }

        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Popups/Menus inside a regular window");
    if (ImGui::TreeNode("Menus inside a regular window"))
    {
        ImGui::TextWrapped("Below we are testing adding menu items to a regular window. It's rather unusual but should work!");
        ImGui::Separator();

        ImGui::MenuItem("Menu item", "CTRL+M");
        if (ImGui::BeginMenu("Menu inside a regular window"))
        {
            ShowExampleMenuFile();
            ImGui::EndMenu();
        }
        ImGui::Separator();
        ImGui::TreePop();
    }
}

// Dummy data structure that we use for the Table demo.
// (pre-C++11 doesn't allow us to instantiate ImVector<MyItem> template if this structure is defined inside the demo function)
namespace
{
// We are passing our own identifier to TableSetupColumn() to facilitate identifying columns in the sorting code.
// This identifier will be passed down into ImGuiTableSortSpec::ColumnUserID.
// But it is possible to omit the user id parameter of TableSetupColumn() and just use the column index instead! (ImGuiTableSortSpec::ColumnIndex)
// If you don't use sorting, you will generally never care about giving column an ID!
enum MyItemColumnID
{
    MyItemColumnID_ID,
    MyItemColumnID_Name,
    MyItemColumnID_Action,
    MyItemColumnID_Quantity,
    MyItemColumnID_Description
};

struct MyItem
{
    int         ID;
    const char* Name;
    int         Quantity;

    // We have a problem which is affecting _only this demo_ and should not affect your code:
    // As we don't rely on std:: or other third-party library to compile dear imgui, we only have reliable access to qsort(),
    // however qsort doesn't allow passing user data to comparing function.
    // As a workaround, we are storing the sort specs in a static/global for the comparing function to access.
    // In your own use case you would probably pass the sort specs to your sorting/comparing functions directly and not use a global.
    // We could technically call ImGui::TableGetSortSpecs() in CompareWithSortSpecs(), but considering that this function is called
    // very often by the sorting algorithm it would be a little wasteful.
    static const ImGuiTableSortSpecs* s_current_sort_specs;

    static void SortWithSortSpecs(ImGuiTableSortSpecs* sort_specs, MyItem* items, int items_count)
    {
        s_current_sort_specs = sort_specs; // Store in variable accessible by the sort function.
        if (items_count > 1)
            qsort(items, (size_t)items_count, sizeof(items[0]), MyItem::CompareWithSortSpecs);
        s_current_sort_specs = NULL;
    }

    // Compare function to be used by qsort()
    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)
    {
        const MyItem* a = (const MyItem*)lhs;
        const MyItem* b = (const MyItem*)rhs;
        for (int n = 0; n < s_current_sort_specs->SpecsCount; n++)
        {
            // Here we identify columns using the ColumnUserID value that we ourselves passed to TableSetupColumn()
            // We could also choose to identify columns based on their index (sort_spec->ColumnIndex), which is simpler!
            const ImGuiTableColumnSortSpecs* sort_spec = &s_current_sort_specs->Specs[n];
            int delta = 0;
            switch (sort_spec->ColumnUserID)
            {
            case MyItemColumnID_ID:             delta = (a->ID - b->ID);                break;
            case MyItemColumnID_Name:           delta = (strcmp(a->Name, b->Name));     break;
            case MyItemColumnID_Quantity:       delta = (a->Quantity - b->Quantity);    break;
            case MyItemColumnID_Description:    delta = (strcmp(a->Name, b->Name));     break;
            default: IM_ASSERT(0); break;
            }
            if (delta > 0)
                return (sort_spec->SortDirection == ImGuiSortDirection_Ascending) ? +1 : -1;
            if (delta < 0)
                return (sort_spec->SortDirection == ImGuiSortDirection_Ascending) ? -1 : +1;
        }

        // qsort() is instable so always return a way to differentiate items.
        // Your own compare function may want to avoid fallback on implicit sort specs.
        // e.g. a Name compare if it wasn't already part of the sort specs.
        return (a->ID - b->ID);
    }
};
const ImGuiTableSortSpecs* MyItem::s_current_sort_specs = NULL;
}

// Make the UI compact because there are so many fields
static void PushStyleCompact()
{
    ImGuiStyle& style = ImGui::GetStyle();
    ImGui::PushStyleVarY(ImGuiStyleVar_FramePadding, (float)(int)(style.FramePadding.y * 0.60f));
    ImGui::PushStyleVarY(ImGuiStyleVar_ItemSpacing, (float)(int)(style.ItemSpacing.y * 0.60f));
}

static void PopStyleCompact()
{
    ImGui::PopStyleVar(2);
}

// Show a combo box with a choice of sizing policies
static void EditTableSizingFlags(ImGuiTableFlags* p_flags)
{
    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };
    static const EnumDesc policies[] =
    {
        { ImGuiTableFlags_None,               "Default",                            "Use default sizing policy:\n- ImGuiTableFlags_SizingFixedFit if ScrollX is on or if host window has ImGuiWindowFlags_AlwaysAutoResize.\n- ImGuiTableFlags_SizingStretchSame otherwise." },
        { ImGuiTableFlags_SizingFixedFit,     "ImGuiTableFlags_SizingFixedFit",     "Columns default to _WidthFixed (if resizable) or _WidthAuto (if not resizable), matching contents width." },
        { ImGuiTableFlags_SizingFixedSame,    "ImGuiTableFlags_SizingFixedSame",    "Columns are all the same width, matching the maximum contents width.\nImplicitly disable ImGuiTableFlags_Resizable and enable ImGuiTableFlags_NoKeepColumnsVisible." },
        { ImGuiTableFlags_SizingStretchProp,  "ImGuiTableFlags_SizingStretchProp",  "Columns default to _WidthStretch with weights proportional to their widths." },
        { ImGuiTableFlags_SizingStretchSame,  "ImGuiTableFlags_SizingStretchSame",  "Columns default to _WidthStretch with same weights." }
    };
    int idx;
    for (idx = 0; idx < IM_ARRAYSIZE(policies); idx++)
        if (policies[idx].Value == (*p_flags & ImGuiTableFlags_SizingMask_))
            break;
    const char* preview_text = (idx < IM_ARRAYSIZE(policies)) ? policies[idx].Name + (idx > 0 ? strlen("ImGuiTableFlags") : 0) : "";
    if (ImGui::BeginCombo("Sizing Policy", preview_text))
    {
        for (int n = 0; n < IM_ARRAYSIZE(policies); n++)
            if (ImGui::Selectable(policies[n].Name, idx == n))
                *p_flags = (*p_flags & ~ImGuiTableFlags_SizingMask_) | policies[n].Value;
        ImGui::EndCombo();
    }
    ImGui::SameLine();
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 50.0f);
        for (int m = 0; m < IM_ARRAYSIZE(policies); m++)
        {
            ImGui::Separator();
            ImGui::Text("%s:", policies[m].Name);
            ImGui::Separator();
            ImGui::SetCursorPosX(ImGui::GetCursorPosX() + ImGui::GetStyle().IndentSpacing * 0.5f);
            ImGui::TextUnformatted(policies[m].Tooltip);
        }
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
}

static void EditTableColumnsFlags(ImGuiTableColumnFlags* p_flags)
{
    ImGui::CheckboxFlags("_Disabled", p_flags, ImGuiTableColumnFlags_Disabled); ImGui::SameLine(); HelpMarker("Master disable flag (also hide from context menu)");
    ImGui::CheckboxFlags("_DefaultHide", p_flags, ImGuiTableColumnFlags_DefaultHide);
    ImGui::CheckboxFlags("_DefaultSort", p_flags, ImGuiTableColumnFlags_DefaultSort);
    if (ImGui::CheckboxFlags("_WidthStretch", p_flags, ImGuiTableColumnFlags_WidthStretch))
        *p_flags &= ~(ImGuiTableColumnFlags_WidthMask_ ^ ImGuiTableColumnFlags_WidthStretch);
    if (ImGui::CheckboxFlags("_WidthFixed", p_flags, ImGuiTableColumnFlags_WidthFixed))
        *p_flags &= ~(ImGuiTableColumnFlags_WidthMask_ ^ ImGuiTableColumnFlags_WidthFixed);
    ImGui::CheckboxFlags("_NoResize", p_flags, ImGuiTableColumnFlags_NoResize);
    ImGui::CheckboxFlags("_NoReorder", p_flags, ImGuiTableColumnFlags_NoReorder);
    ImGui::CheckboxFlags("_NoHide", p_flags, ImGuiTableColumnFlags_NoHide);
    ImGui::CheckboxFlags("_NoClip", p_flags, ImGuiTableColumnFlags_NoClip);
    ImGui::CheckboxFlags("_NoSort", p_flags, ImGuiTableColumnFlags_NoSort);
    ImGui::CheckboxFlags("_NoSortAscending", p_flags, ImGuiTableColumnFlags_NoSortAscending);
    ImGui::CheckboxFlags("_NoSortDescending", p_flags, ImGuiTableColumnFlags_NoSortDescending);
    ImGui::CheckboxFlags("_NoHeaderLabel", p_flags, ImGuiTableColumnFlags_NoHeaderLabel);
    ImGui::CheckboxFlags("_NoHeaderWidth", p_flags, ImGuiTableColumnFlags_NoHeaderWidth);
    ImGui::CheckboxFlags("_PreferSortAscending", p_flags, ImGuiTableColumnFlags_PreferSortAscending);
    ImGui::CheckboxFlags("_PreferSortDescending", p_flags, ImGuiTableColumnFlags_PreferSortDescending);
    ImGui::CheckboxFlags("_IndentEnable", p_flags, ImGuiTableColumnFlags_IndentEnable); ImGui::SameLine(); HelpMarker("Default for column 0");
    ImGui::CheckboxFlags("_IndentDisable", p_flags, ImGuiTableColumnFlags_IndentDisable); ImGui::SameLine(); HelpMarker("Default for column >0");
    ImGui::CheckboxFlags("_AngledHeader", p_flags, ImGuiTableColumnFlags_AngledHeader);
}

static void ShowTableColumnsStatusFlags(ImGuiTableColumnFlags flags)
{
    ImGui::CheckboxFlags("_IsEnabled", &flags, ImGuiTableColumnFlags_IsEnabled);
    ImGui::CheckboxFlags("_IsVisible", &flags, ImGuiTableColumnFlags_IsVisible);
    ImGui::CheckboxFlags("_IsSorted", &flags, ImGuiTableColumnFlags_IsSorted);
    ImGui::CheckboxFlags("_IsHovered", &flags, ImGuiTableColumnFlags_IsHovered);
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowTables()
//-----------------------------------------------------------------------------

static void DemoWindowTables()
{
    //ImGui::SetNextItemOpen(true, ImGuiCond_Once);
    IMGUI_DEMO_MARKER("Tables");
    if (!ImGui::CollapsingHeader("Tables & Columns"))
        return;

    // Using those as a base value to create width/height that are factor of the size of our font
    const float TEXT_BASE_WIDTH = ImGui::CalcTextSize("A").x;
    const float TEXT_BASE_HEIGHT = ImGui::GetTextLineHeightWithSpacing();

    ImGui::PushID("Tables");

    int open_action = -1;
    if (ImGui::Button("Expand all"))
        open_action = 1;
    ImGui::SameLine();
    if (ImGui::Button("Collapse all"))
        open_action = 0;
    ImGui::SameLine();

    // Options
    static bool disable_indent = false;
    ImGui::Checkbox("Disable tree indentation", &disable_indent);
    ImGui::SameLine();
    HelpMarker("Disable the indenting of tree nodes so demo tables can use the full window width.");
    ImGui::Separator();
    if (disable_indent)
        ImGui::PushStyleVar(ImGuiStyleVar_IndentSpacing, 0.0f);

    // About Styling of tables
    // Most settings are configured on a per-table basis via the flags passed to BeginTable() and TableSetupColumns APIs.
    // There are however a few settings that a shared and part of the ImGuiStyle structure:
    //   style.CellPadding                          // Padding within each cell
    //   style.Colors[ImGuiCol_TableHeaderBg]       // Table header background
    //   style.Colors[ImGuiCol_TableBorderStrong]   // Table outer and header borders
    //   style.Colors[ImGuiCol_TableBorderLight]    // Table inner borders
    //   style.Colors[ImGuiCol_TableRowBg]          // Table row background when ImGuiTableFlags_RowBg is enabled (even rows)
    //   style.Colors[ImGuiCol_TableRowBgAlt]       // Table row background when ImGuiTableFlags_RowBg is enabled (odds rows)

    // Demos
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Basic");
    if (ImGui::TreeNode("Basic"))
    {
        // Here we will showcase three different ways to output a table.
        // They are very simple variations of a same thing!

        // [Method 1] Using TableNextRow() to create a new row, and TableSetColumnIndex() to select the column.
        // In many situations, this is the most flexible and easy to use pattern.
        HelpMarker("Using TableNextRow() + calling TableSetColumnIndex() _before_ each cell, in a loop.");
        if (ImGui::BeginTable("table1", 3))
        {
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Row %d Column %d", row, column);
                }
            }
            ImGui::EndTable();
        }

        // [Method 2] Using TableNextColumn() called multiple times, instead of using a for loop + TableSetColumnIndex().
        // This is generally more convenient when you have code manually submitting the contents of each column.
        HelpMarker("Using TableNextRow() + calling TableNextColumn() _before_ each cell, manually.");
        if (ImGui::BeginTable("table2", 3))
        {
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                ImGui::TableNextColumn();
                ImGui::Text("Row %d", row);
                ImGui::TableNextColumn();
                ImGui::Text("Some contents");
                ImGui::TableNextColumn();
                ImGui::Text("123.456");
            }
            ImGui::EndTable();
        }

        // [Method 3] We call TableNextColumn() _before_ each cell. We never call TableNextRow(),
        // as TableNextColumn() will automatically wrap around and create new rows as needed.
        // This is generally more convenient when your cells all contains the same type of data.
        HelpMarker(
            "Only using TableNextColumn(), which tends to be convenient for tables where every cell contains "
            "the same type of contents.\n This is also more similar to the old NextColumn() function of the "
            "Columns API, and provided to facilitate the Columns->Tables API transition.");
        if (ImGui::BeginTable("table3", 3))
        {
            for (int item = 0; item < 14; item++)
            {
                ImGui::TableNextColumn();
                ImGui::Text("Item %d", item);
            }
            ImGui::EndTable();
        }

        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Borders, background");
    if (ImGui::TreeNode("Borders, background"))
    {
        // Expose a few Borders related flags interactively
        enum ContentsType { CT_Text, CT_FillButton };
        static ImGuiTableFlags flags = ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg;
        static bool display_headers = false;
        static int contents_type = CT_Text;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags, ImGuiTableFlags_RowBg);
        ImGui::CheckboxFlags("ImGuiTableFlags_Borders", &flags, ImGuiTableFlags_Borders);
        ImGui::SameLine(); HelpMarker("ImGuiTableFlags_Borders\n = ImGuiTableFlags_BordersInnerV\n | ImGuiTableFlags_BordersOuterV\n | ImGuiTableFlags_BordersInnerH\n | ImGuiTableFlags_BordersOuterH");
        ImGui::Indent();

        ImGui::CheckboxFlags("ImGuiTableFlags_BordersH", &flags, ImGuiTableFlags_BordersH);
        ImGui::Indent();
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterH", &flags, ImGuiTableFlags_BordersOuterH);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerH", &flags, ImGuiTableFlags_BordersInnerH);
        ImGui::Unindent();

        ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags, ImGuiTableFlags_BordersV);
        ImGui::Indent();
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags, ImGuiTableFlags_BordersOuterV);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags, ImGuiTableFlags_BordersInnerV);
        ImGui::Unindent();

        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuter", &flags, ImGuiTableFlags_BordersOuter);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInner", &flags, ImGuiTableFlags_BordersInner);
        ImGui::Unindent();

        ImGui::AlignTextToFramePadding(); ImGui::Text("Cell contents:");
        ImGui::SameLine(); ImGui::RadioButton("Text", &contents_type, CT_Text);
        ImGui::SameLine(); ImGui::RadioButton("FillButton", &contents_type, CT_FillButton);
        ImGui::Checkbox("Display headers", &display_headers);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBody", &flags, ImGuiTableFlags_NoBordersInBody); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body (borders will always appear in Headers)");
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 3, flags))
        {
            // Display headers so we can inspect their interaction with borders
            // (Headers are not the main purpose of this section of the demo, so we are not elaborating on them now. See other sections for details)
            if (display_headers)
            {
                ImGui::TableSetupColumn("One");
                ImGui::TableSetupColumn("Two");
                ImGui::TableSetupColumn("Three");
                ImGui::TableHeadersRow();
            }

            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    char buf[32];
                    sprintf(buf, "Hello %d,%d", column, row);
                    if (contents_type == CT_Text)
                        ImGui::TextUnformatted(buf);
                    else if (contents_type == CT_FillButton)
                        ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Resizable, stretch");
    if (ImGui::TreeNode("Resizable, stretch"))
    {
        // By default, if we don't enable ScrollX the sizing policy for each column is "Stretch"
        // All columns maintain a sizing weight, and they will occupy all available width.
        static ImGuiTableFlags flags = ImGuiTableFlags_SizingStretchSame | ImGuiTableFlags_Resizable | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_ContextMenuInBody;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags, ImGuiTableFlags_BordersV);
        ImGui::SameLine(); HelpMarker(
            "Using the _Resizable flag automatically enables the _BordersInnerV flag as well, "
            "this is why the resize borders are still showing when unchecking this.");
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 3, flags))
        {
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Resizable, fixed");
    if (ImGui::TreeNode("Resizable, fixed"))
    {
        // Here we use ImGuiTableFlags_SizingFixedFit (even though _ScrollX is not set)
        // So columns will adopt the "Fixed" policy and will maintain a fixed width regardless of the whole available width (unless table is small)
        // If there is not enough available width to fit all columns, they will however be resized down.
        // FIXME-TABLE: Providing a stretch-on-init would make sense especially for tables which don't have saved settings
        HelpMarker(
            "Using _Resizable + _SizingFixedFit flags.\n"
            "Fixed-width columns generally makes more sense if you want to use horizontal scrolling.\n\n"
            "Double-click a column border to auto-fit the column to its contents.");
        PushStyleCompact();
        static ImGuiTableFlags flags = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_Resizable | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_ContextMenuInBody;
        ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags, ImGuiTableFlags_NoHostExtendX);
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 3, flags))
        {
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Resizable, mixed");
    if (ImGui::TreeNode("Resizable, mixed"))
    {
        HelpMarker(
            "Using TableSetupColumn() to alter resizing policy on a per-column basis.\n\n"
            "When combining Fixed and Stretch columns, generally you only want one, maybe two trailing columns to use _WidthStretch.");
        static ImGuiTableFlags flags = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_RowBg | ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable;

        if (ImGui::BeginTable("table1", 3, flags))
        {
            ImGui::TableSetupColumn("AAA", ImGuiTableColumnFlags_WidthFixed);
            ImGui::TableSetupColumn("BBB", ImGuiTableColumnFlags_WidthFixed);
            ImGui::TableSetupColumn("CCC", ImGuiTableColumnFlags_WidthStretch);
            ImGui::TableHeadersRow();
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("%s %d,%d", (column == 2) ? "Stretch" : "Fixed", column, row);
                }
            }
            ImGui::EndTable();
        }
        if (ImGui::BeginTable("table2", 6, flags))
        {
            ImGui::TableSetupColumn("AAA", ImGuiTableColumnFlags_WidthFixed);
            ImGui::TableSetupColumn("BBB", ImGuiTableColumnFlags_WidthFixed);
            ImGui::TableSetupColumn("CCC", ImGuiTableColumnFlags_WidthFixed | ImGuiTableColumnFlags_DefaultHide);
            ImGui::TableSetupColumn("DDD", ImGuiTableColumnFlags_WidthStretch);
            ImGui::TableSetupColumn("EEE", ImGuiTableColumnFlags_WidthStretch);
            ImGui::TableSetupColumn("FFF", ImGuiTableColumnFlags_WidthStretch | ImGuiTableColumnFlags_DefaultHide);
            ImGui::TableHeadersRow();
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 6; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("%s %d,%d", (column >= 3) ? "Stretch" : "Fixed", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Reorderable, hideable, with headers");
    if (ImGui::TreeNode("Reorderable, hideable, with headers"))
    {
        HelpMarker(
            "Click and drag column headers to reorder columns.\n\n"
            "Right-click on a header to open a context menu.");
        static ImGuiTableFlags flags = ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_Reorderable", &flags, ImGuiTableFlags_Reorderable);
        ImGui::CheckboxFlags("ImGuiTableFlags_Hideable", &flags, ImGuiTableFlags_Hideable);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBody", &flags, ImGuiTableFlags_NoBordersInBody);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBodyUntilResize", &flags, ImGuiTableFlags_NoBordersInBodyUntilResize); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers)");
        ImGui::CheckboxFlags("ImGuiTableFlags_HighlightHoveredColumn", &flags, ImGuiTableFlags_HighlightHoveredColumn);
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 3, flags))
        {
            // Submit columns name with TableSetupColumn() and call TableHeadersRow() to create a row with a header in each column.
            // (Later we will show how TableSetupColumn() has other uses, optional flags, sizing weight etc.)
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");
            ImGui::TableHeadersRow();
            for (int row = 0; row < 6; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        // Use outer_size.x == 0.0f instead of default to make the table as tight as possible
        // (only valid when no scrolling and no stretch column)
        if (ImGui::BeginTable("table2", 3, flags | ImGuiTableFlags_SizingFixedFit, ImVec2(0.0f, 0.0f)))
        {
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");
            ImGui::TableHeadersRow();
            for (int row = 0; row < 6; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Fixed %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Padding");
    if (ImGui::TreeNode("Padding"))
    {
        // First example: showcase use of padding flags and effect of BorderOuterV/BorderInnerV on X padding.
        // We don't expose BorderOuterH/BorderInnerH here because they have no effect on X padding.
        HelpMarker(
            "We often want outer padding activated when any using features which makes the edges of a column visible:\n"
            "e.g.:\n"
            "- BorderOuterV\n"
            "- any form of row selection\n"
            "Because of this, activating BorderOuterV sets the default to PadOuterX. "
            "Using PadOuterX or NoPadOuterX you can override the default.\n\n"
            "Actual padding values are using style.CellPadding.\n\n"
            "In this demo we don't show horizontal borders to emphasize how they don't affect default horizontal padding.");

        static ImGuiTableFlags flags1 = ImGuiTableFlags_BordersV;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_PadOuterX", &flags1, ImGuiTableFlags_PadOuterX);
        ImGui::SameLine(); HelpMarker("Enable outer-most padding (default if ImGuiTableFlags_BordersOuterV is set)");
        ImGui::CheckboxFlags("ImGuiTableFlags_NoPadOuterX", &flags1, ImGuiTableFlags_NoPadOuterX);
        ImGui::SameLine(); HelpMarker("Disable outer-most padding (default if ImGuiTableFlags_BordersOuterV is not set)");
        ImGui::CheckboxFlags("ImGuiTableFlags_NoPadInnerX", &flags1, ImGuiTableFlags_NoPadInnerX);
        ImGui::SameLine(); HelpMarker("Disable inner padding between columns (double inner padding if BordersOuterV is on, single inner padding if BordersOuterV is off)");
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags1, ImGuiTableFlags_BordersOuterV);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags1, ImGuiTableFlags_BordersInnerV);
        static bool show_headers = false;
        ImGui::Checkbox("show_headers", &show_headers);
        PopStyleCompact();

        if (ImGui::BeginTable("table_padding", 3, flags1))
        {
            if (show_headers)
            {
                ImGui::TableSetupColumn("One");
                ImGui::TableSetupColumn("Two");
                ImGui::TableSetupColumn("Three");
                ImGui::TableHeadersRow();
            }

            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    if (row == 0)
                    {
                        ImGui::Text("Avail %.2f", ImGui::GetContentRegionAvail().x);
                    }
                    else
                    {
                        char buf[32];
                        sprintf(buf, "Hello %d,%d", column, row);
                        ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));
                    }
                    //if (ImGui::TableGetColumnFlags() & ImGuiTableColumnFlags_IsHovered)
                    //    ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg, IM_COL32(0, 100, 0, 255));
                }
            }
            ImGui::EndTable();
        }

        // Second example: set style.CellPadding to (0.0) or a custom value.
        // FIXME-TABLE: Vertical border effectively not displayed the same way as horizontal one...
        HelpMarker("Setting style.CellPadding to (0,0) or a custom value.");
        static ImGuiTableFlags flags2 = ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg;
        static ImVec2 cell_padding(0.0f, 0.0f);
        static bool show_widget_frame_bg = true;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Borders", &flags2, ImGuiTableFlags_Borders);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersH", &flags2, ImGuiTableFlags_BordersH);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags2, ImGuiTableFlags_BordersV);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInner", &flags2, ImGuiTableFlags_BordersInner);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuter", &flags2, ImGuiTableFlags_BordersOuter);
        ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags2, ImGuiTableFlags_RowBg);
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags2, ImGuiTableFlags_Resizable);
        ImGui::Checkbox("show_widget_frame_bg", &show_widget_frame_bg);
        ImGui::SliderFloat2("CellPadding", &cell_padding.x, 0.0f, 10.0f, "%.0f");
        PopStyleCompact();

        ImGui::PushStyleVar(ImGuiStyleVar_CellPadding, cell_padding);
        if (ImGui::BeginTable("table_padding_2", 3, flags2))
        {
            static char text_bufs[3 * 5][16]; // Mini text storage for 3x5 cells
            static bool init = true;
            if (!show_widget_frame_bg)
                ImGui::PushStyleColor(ImGuiCol_FrameBg, 0);
            for (int cell = 0; cell < 3 * 5; cell++)
            {
                ImGui::TableNextColumn();
                if (init)
                    strcpy(text_bufs[cell], "edit me");
                ImGui::SetNextItemWidth(-FLT_MIN);
                ImGui::PushID(cell);
                ImGui::InputText("##cell", text_bufs[cell], IM_ARRAYSIZE(text_bufs[cell]));
                ImGui::PopID();
            }
            if (!show_widget_frame_bg)
                ImGui::PopStyleColor();
            init = false;
            ImGui::EndTable();
        }
        ImGui::PopStyleVar();

        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Explicit widths");
    if (ImGui::TreeNode("Sizing policies"))
    {
        static ImGuiTableFlags flags1 = ImGuiTableFlags_BordersV | ImGuiTableFlags_BordersOuterH | ImGuiTableFlags_RowBg | ImGuiTableFlags_ContextMenuInBody;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags1, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags1, ImGuiTableFlags_NoHostExtendX);
        PopStyleCompact();

        static ImGuiTableFlags sizing_policy_flags[4] = { ImGuiTableFlags_SizingFixedFit, ImGuiTableFlags_SizingFixedSame, ImGuiTableFlags_SizingStretchProp, ImGuiTableFlags_SizingStretchSame };
        for (int table_n = 0; table_n < 4; table_n++)
        {
            ImGui::PushID(table_n);
            ImGui::SetNextItemWidth(TEXT_BASE_WIDTH * 30);
            EditTableSizingFlags(&sizing_policy_flags[table_n]);

            // To make it easier to understand the different sizing policy,
            // For each policy: we display one table where the columns have equal contents width,
            // and one where the columns have different contents width.
            if (ImGui::BeginTable("table1", 3, sizing_policy_flags[table_n] | flags1))
            {
                for (int row = 0; row < 3; row++)
                {
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn(); ImGui::Text("Oh dear");
                    ImGui::TableNextColumn(); ImGui::Text("Oh dear");
                    ImGui::TableNextColumn(); ImGui::Text("Oh dear");
                }
                ImGui::EndTable();
            }
            if (ImGui::BeginTable("table2", 3, sizing_policy_flags[table_n] | flags1))
            {
                for (int row = 0; row < 3; row++)
                {
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn(); ImGui::Text("AAAA");
                    ImGui::TableNextColumn(); ImGui::Text("BBBBBBBB");
                    ImGui::TableNextColumn(); ImGui::Text("CCCCCCCCCCCC");
                }
                ImGui::EndTable();
            }
            ImGui::PopID();
        }

        ImGui::Spacing();
        ImGui::TextUnformatted("Advanced");
        ImGui::SameLine();
        HelpMarker(
            "This section allows you to interact and see the effect of various sizing policies "
            "depending on whether Scroll is enabled and the contents of your columns.");

        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, CT_InputText };
        static ImGuiTableFlags flags = ImGuiTableFlags_ScrollY | ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg | ImGuiTableFlags_Resizable;
        static int contents_type = CT_ShowWidth;
        static int column_count = 3;

        PushStyleCompact();
        ImGui::PushID("Advanced");
        ImGui::PushItemWidth(TEXT_BASE_WIDTH * 30);
        EditTableSizingFlags(&flags);
        ImGui::Combo("Contents", &contents_type, "Show width\0Short Text\0Long Text\0Button\0Fill Button\0InputText\0");
        if (contents_type == CT_FillButton)
        {
            ImGui::SameLine();
            HelpMarker(
                "Be mindful that using right-alignment (e.g. size.x = -FLT_MIN) creates a feedback loop "
                "where contents width can feed into auto-column width can feed into contents width.");
        }
        ImGui::DragInt("Columns", &column_count, 0.1f, 1, 64, "%d", ImGuiSliderFlags_AlwaysClamp);
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_PreciseWidths", &flags, ImGuiTableFlags_PreciseWidths);
        ImGui::SameLine(); HelpMarker("Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.");
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags, ImGuiTableFlags_ScrollX);
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoClip", &flags, ImGuiTableFlags_NoClip);
        ImGui::PopItemWidth();
        ImGui::PopID();
        PopStyleCompact();

        if (ImGui::BeginTable("table2", column_count, flags, ImVec2(0.0f, TEXT_BASE_HEIGHT * 7)))
        {
            for (int cell = 0; cell < 10 * column_count; cell++)
            {
                ImGui::TableNextColumn();
                int column = ImGui::TableGetColumnIndex();
                int row = ImGui::TableGetRowIndex();

                ImGui::PushID(cell);
                char label[32];
                static char text_buf[32] = "";
                sprintf(label, "Hello %d,%d", column, row);
                switch (contents_type)
                {
                case CT_ShortText:  ImGui::TextUnformatted(label); break;
                case CT_LongText:   ImGui::Text("Some %s text %d,%d\nOver two lines..", column == 0 ? "long" : "longeeer", column, row); break;
                case CT_ShowWidth:  ImGui::Text("W: %.1f", ImGui::GetContentRegionAvail().x); break;
                case CT_Button:     ImGui::Button(label); break;
                case CT_FillButton: ImGui::Button(label, ImVec2(-FLT_MIN, 0.0f)); break;
                case CT_InputText:  ImGui::SetNextItemWidth(-FLT_MIN); ImGui::InputText("##", text_buf, IM_ARRAYSIZE(text_buf)); break;
                }
                ImGui::PopID();
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Vertical scrolling, with clipping");
    if (ImGui::TreeNode("Vertical scrolling, with clipping"))
    {
        HelpMarker(
            "Here we activate ScrollY, which will create a child window container to allow hosting scrollable contents.\n\n"
            "We also demonstrate using ImGuiListClipper to virtualize the submission of many items.");
        static ImGuiTableFlags flags = ImGuiTableFlags_ScrollY | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);
        PopStyleCompact();

        // When using ScrollX or ScrollY we need to specify a size for our table container!
        // Otherwise by default the table will fit all available space, like a BeginChild() call.
        ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 8);
        if (ImGui::BeginTable("table_scrolly", 3, flags, outer_size))
        {
            ImGui::TableSetupScrollFreeze(0, 1); // Make top row always visible
            ImGui::TableSetupColumn("One", ImGuiTableColumnFlags_None);
            ImGui::TableSetupColumn("Two", ImGuiTableColumnFlags_None);
            ImGui::TableSetupColumn("Three", ImGuiTableColumnFlags_None);
            ImGui::TableHeadersRow();

            // Demonstrate using clipper for large vertical lists
            ImGuiListClipper clipper;
            clipper.Begin(1000);
            while (clipper.Step())
            {
                for (int row = clipper.DisplayStart; row < clipper.DisplayEnd; row++)
                {
                    ImGui::TableNextRow();
                    for (int column = 0; column < 3; column++)
                    {
                        ImGui::TableSetColumnIndex(column);
                        ImGui::Text("Hello %d,%d", column, row);
                    }
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Horizontal scrolling");
    if (ImGui::TreeNode("Horizontal scrolling"))
    {
        HelpMarker(
            "When ScrollX is enabled, the default sizing policy becomes ImGuiTableFlags_SizingFixedFit, "
            "as automatically stretching columns doesn't make much sense with horizontal scrolling.\n\n"
            "Also note that as of the current version, you will almost always want to enable ScrollY along with ScrollX, "
            "because the container window won't automatically extend vertically to fix contents "
            "(this may be improved in future versions).");
        static ImGuiTableFlags flags = ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable;
        static int freeze_cols = 1;
        static int freeze_rows = 1;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags, ImGuiTableFlags_ScrollX);
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);
        ImGui::SetNextItemWidth(ImGui::GetFrameHeight());
        ImGui::DragInt("freeze_cols", &freeze_cols, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);
        ImGui::SetNextItemWidth(ImGui::GetFrameHeight());
        ImGui::DragInt("freeze_rows", &freeze_rows, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);
        PopStyleCompact();

        // When using ScrollX or ScrollY we need to specify a size for our table container!
        // Otherwise by default the table will fit all available space, like a BeginChild() call.
        ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 8);
        if (ImGui::BeginTable("table_scrollx", 7, flags, outer_size))
        {
            ImGui::TableSetupScrollFreeze(freeze_cols, freeze_rows);
            ImGui::TableSetupColumn("Line #", ImGuiTableColumnFlags_NoHide); // Make the first column not hideable to match our use of TableSetupScrollFreeze()
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");
            ImGui::TableSetupColumn("Four");
            ImGui::TableSetupColumn("Five");
            ImGui::TableSetupColumn("Six");
            ImGui::TableHeadersRow();
            for (int row = 0; row < 20; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 7; column++)
                {
                    // Both TableNextColumn() and TableSetColumnIndex() return true when a column is visible or performing width measurement.
                    // Because here we know that:
                    // - A) all our columns are contributing the same to row height
                    // - B) column 0 is always visible,
                    // We only always submit this one column and can skip others.
                    // More advanced per-column clipping behaviors may benefit from polling the status flags via TableGetColumnFlags().
                    if (!ImGui::TableSetColumnIndex(column) && column > 0)
                        continue;
                    if (column == 0)
                        ImGui::Text("Line %d", row);
                    else
                        ImGui::Text("Hello world %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        ImGui::Spacing();
        ImGui::TextUnformatted("Stretch + ScrollX");
        ImGui::SameLine();
        HelpMarker(
            "Showcase using Stretch columns + ScrollX together: "
            "this is rather unusual and only makes sense when specifying an 'inner_width' for the table!\n"
            "Without an explicit value, inner_width is == outer_size.x and therefore using Stretch columns "
            "along with ScrollX doesn't make sense.");
        static ImGuiTableFlags flags2 = ImGuiTableFlags_SizingStretchSame | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_RowBg | ImGuiTableFlags_ContextMenuInBody;
        static float inner_width = 1000.0f;
        PushStyleCompact();
        ImGui::PushID("flags3");
        ImGui::PushItemWidth(TEXT_BASE_WIDTH * 30);
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags2, ImGuiTableFlags_ScrollX);
        ImGui::DragFloat("inner_width", &inner_width, 1.0f, 0.0f, FLT_MAX, "%.1f");
        ImGui::PopItemWidth();
        ImGui::PopID();
        PopStyleCompact();
        if (ImGui::BeginTable("table2", 7, flags2, outer_size, inner_width))
        {
            for (int cell = 0; cell < 20 * 7; cell++)
            {
                ImGui::TableNextColumn();
                ImGui::Text("Hello world %d,%d", ImGui::TableGetColumnIndex(), ImGui::TableGetRowIndex());
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Columns flags");
    if (ImGui::TreeNode("Columns flags"))
    {
        // Create a first table just to show all the options/flags we want to make visible in our example!
        const int column_count = 3;
        const char* column_names[column_count] = { "One", "Two", "Three" };
        static ImGuiTableColumnFlags column_flags[column_count] = { ImGuiTableColumnFlags_DefaultSort, ImGuiTableColumnFlags_None, ImGuiTableColumnFlags_DefaultHide };
        static ImGuiTableColumnFlags column_flags_out[column_count] = { 0, 0, 0 }; // Output from TableGetColumnFlags()

        if (ImGui::BeginTable("table_columns_flags_checkboxes", column_count, ImGuiTableFlags_None))
        {
            PushStyleCompact();
            for (int column = 0; column < column_count; column++)
            {
                ImGui::TableNextColumn();
                ImGui::PushID(column);
                ImGui::AlignTextToFramePadding(); // FIXME-TABLE: Workaround for wrong text baseline propagation across columns
                ImGui::Text("'%s'", column_names[column]);
                ImGui::Spacing();
                ImGui::Text("Input flags:");
                EditTableColumnsFlags(&column_flags[column]);
                ImGui::Spacing();
                ImGui::Text("Output flags:");
                ImGui::BeginDisabled();
                ShowTableColumnsStatusFlags(column_flags_out[column]);
                ImGui::EndDisabled();
                ImGui::PopID();
            }
            PopStyleCompact();
            ImGui::EndTable();
        }

        // Create the real table we care about for the example!
        // We use a scrolling table to be able to showcase the difference between the _IsEnabled and _IsVisible flags above,
        // otherwise in a non-scrolling table columns are always visible (unless using ImGuiTableFlags_NoKeepColumnsVisible
        // + resizing the parent window down).
        const ImGuiTableFlags flags
            = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY
            | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV
            | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Sortable;
        ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 9);
        if (ImGui::BeginTable("table_columns_flags", column_count, flags, outer_size))
        {
            bool has_angled_header = false;
            for (int column = 0; column < column_count; column++)
            {
                has_angled_header |= (column_flags[column] & ImGuiTableColumnFlags_AngledHeader) != 0;
                ImGui::TableSetupColumn(column_names[column], column_flags[column]);
            }
            if (has_angled_header)
                ImGui::TableAngledHeadersRow();
            ImGui::TableHeadersRow();
            for (int column = 0; column < column_count; column++)
                column_flags_out[column] = ImGui::TableGetColumnFlags(column);
            float indent_step = (float)((int)TEXT_BASE_WIDTH / 2);
            for (int row = 0; row < 8; row++)
            {
                // Add some indentation to demonstrate usage of per-column IndentEnable/IndentDisable flags.
                ImGui::Indent(indent_step);
                ImGui::TableNextRow();
                for (int column = 0; column < column_count; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("%s %s", (column == 0) ? "Indented" : "Hello", ImGui::TableGetColumnName(column));
                }
            }
            ImGui::Unindent(indent_step * 8.0f);

            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Columns widths");
    if (ImGui::TreeNode("Columns widths"))
    {
        HelpMarker("Using TableSetupColumn() to setup default width.");

        static ImGuiTableFlags flags1 = ImGuiTableFlags_Borders | ImGuiTableFlags_NoBordersInBodyUntilResize;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags1, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBodyUntilResize", &flags1, ImGuiTableFlags_NoBordersInBodyUntilResize);
        PopStyleCompact();
        if (ImGui::BeginTable("table1", 3, flags1))
        {
            // We could also set ImGuiTableFlags_SizingFixedFit on the table and all columns will default to ImGuiTableColumnFlags_WidthFixed.
            ImGui::TableSetupColumn("one", ImGuiTableColumnFlags_WidthFixed, 100.0f); // Default to 100.0f
            ImGui::TableSetupColumn("two", ImGuiTableColumnFlags_WidthFixed, 200.0f); // Default to 200.0f
            ImGui::TableSetupColumn("three", ImGuiTableColumnFlags_WidthFixed);       // Default to auto
            ImGui::TableHeadersRow();
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    if (row == 0)
                        ImGui::Text("(w: %5.1f)", ImGui::GetContentRegionAvail().x);
                    else
                        ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        HelpMarker(
            "Using TableSetupColumn() to setup explicit width.\n\nUnless _NoKeepColumnsVisible is set, "
            "fixed columns with set width may still be shrunk down if there's not enough space in the host.");

        static ImGuiTableFlags flags2 = ImGuiTableFlags_None;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_NoKeepColumnsVisible", &flags2, ImGuiTableFlags_NoKeepColumnsVisible);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags2, ImGuiTableFlags_BordersInnerV);
        ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags2, ImGuiTableFlags_BordersOuterV);
        PopStyleCompact();
        if (ImGui::BeginTable("table2", 4, flags2))
        {
            // We could also set ImGuiTableFlags_SizingFixedFit on the table and then all columns
            // will default to ImGuiTableColumnFlags_WidthFixed.
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, 100.0f);
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 15.0f);
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 30.0f);
            ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 15.0f);
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 4; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    if (row == 0)
                        ImGui::Text("(w: %5.1f)", ImGui::GetContentRegionAvail().x);
                    else
                        ImGui::Text("Hello %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Nested tables");
    if (ImGui::TreeNode("Nested tables"))
    {
        HelpMarker("This demonstrates embedding a table into another table cell.");

        if (ImGui::BeginTable("table_nested1", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))
        {
            ImGui::TableSetupColumn("A0");
            ImGui::TableSetupColumn("A1");
            ImGui::TableHeadersRow();

            ImGui::TableNextColumn();
            ImGui::Text("A0 Row 0");
            {
                float rows_height = TEXT_BASE_HEIGHT * 2;
                if (ImGui::BeginTable("table_nested2", 2, ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))
                {
                    ImGui::TableSetupColumn("B0");
                    ImGui::TableSetupColumn("B1");
                    ImGui::TableHeadersRow();

                    ImGui::TableNextRow(ImGuiTableRowFlags_None, rows_height);
                    ImGui::TableNextColumn();
                    ImGui::Text("B0 Row 0");
                    ImGui::TableNextColumn();
                    ImGui::Text("B1 Row 0");
                    ImGui::TableNextRow(ImGuiTableRowFlags_None, rows_height);
                    ImGui::TableNextColumn();
                    ImGui::Text("B0 Row 1");
                    ImGui::TableNextColumn();
                    ImGui::Text("B1 Row 1");

                    ImGui::EndTable();
                }
            }
            ImGui::TableNextColumn(); ImGui::Text("A1 Row 0");
            ImGui::TableNextColumn(); ImGui::Text("A0 Row 1");
            ImGui::TableNextColumn(); ImGui::Text("A1 Row 1");
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Row height");
    if (ImGui::TreeNode("Row height"))
    {
        HelpMarker(
            "You can pass a 'min_row_height' to TableNextRow().\n\nRows are padded with 'style.CellPadding.y' on top and bottom, "
            "so effectively the minimum row height will always be >= 'style.CellPadding.y * 2.0f'.\n\n"
            "We cannot honor a _maximum_ row height as that would require a unique clipping rectangle per row.");
        if (ImGui::BeginTable("table_row_height", 1, ImGuiTableFlags_Borders))
        {
            for (int row = 0; row < 8; row++)
            {
                float min_row_height = (float)(int)(TEXT_BASE_HEIGHT * 0.30f * row);
                ImGui::TableNextRow(ImGuiTableRowFlags_None, min_row_height);
                ImGui::TableNextColumn();
                ImGui::Text("min_row_height = %.2f", min_row_height);
            }
            ImGui::EndTable();
        }

        HelpMarker(
            "Showcase using SameLine(0,0) to share Current Line Height between cells.\n\n"
            "Please note that Tables Row Height is not the same thing as Current Line Height, "
            "as a table cell may contains multiple lines.");
        if (ImGui::BeginTable("table_share_lineheight", 2, ImGuiTableFlags_Borders))
        {
            ImGui::TableNextRow();
            ImGui::TableNextColumn();
            ImGui::ColorButton("##1", ImVec4(0.13f, 0.26f, 0.40f, 1.0f), ImGuiColorEditFlags_None, ImVec2(40, 40));
            ImGui::TableNextColumn();
            ImGui::Text("Line 1");
            ImGui::Text("Line 2");

            ImGui::TableNextRow();
            ImGui::TableNextColumn();
            ImGui::ColorButton("##2", ImVec4(0.13f, 0.26f, 0.40f, 1.0f), ImGuiColorEditFlags_None, ImVec2(40, 40));
            ImGui::TableNextColumn();
            ImGui::SameLine(0.0f, 0.0f); // Reuse line height from previous column
            ImGui::Text("Line 1, with SameLine(0,0)");
            ImGui::Text("Line 2");

            ImGui::EndTable();
        }

        HelpMarker("Showcase altering CellPadding.y between rows. Note that CellPadding.x is locked for the entire table.");
        if (ImGui::BeginTable("table_changing_cellpadding_y", 1, ImGuiTableFlags_Borders))
        {
            ImGuiStyle& style = ImGui::GetStyle();
            for (int row = 0; row < 8; row++)
            {
                if ((row % 3) == 2)
                    ImGui::PushStyleVarY(ImGuiStyleVar_CellPadding, 20.0f);
                ImGui::TableNextRow(ImGuiTableRowFlags_None);
                ImGui::TableNextColumn();
                ImGui::Text("CellPadding.y = %.2f", style.CellPadding.y);
                if ((row % 3) == 2)
                    ImGui::PopStyleVar();
            }
            ImGui::EndTable();
        }

        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Outer size");
    if (ImGui::TreeNode("Outer size"))
    {
        // Showcasing use of ImGuiTableFlags_NoHostExtendX and ImGuiTableFlags_NoHostExtendY
        // Important to that note how the two flags have slightly different behaviors!
        ImGui::Text("Using NoHostExtendX and NoHostExtendY:");
        PushStyleCompact();
        static ImGuiTableFlags flags = ImGuiTableFlags_Borders | ImGuiTableFlags_Resizable | ImGuiTableFlags_ContextMenuInBody | ImGuiTableFlags_RowBg | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_NoHostExtendX;
        ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags, ImGuiTableFlags_NoHostExtendX);
        ImGui::SameLine(); HelpMarker("Make outer width auto-fit to columns, overriding outer_size.x value.\n\nOnly available when ScrollX/ScrollY are disabled and Stretch columns are not used.");
        ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendY", &flags, ImGuiTableFlags_NoHostExtendY);
        ImGui::SameLine(); HelpMarker("Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit).\n\nOnly available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.");
        PopStyleCompact();

        ImVec2 outer_size = ImVec2(0.0f, TEXT_BASE_HEIGHT * 5.5f);
        if (ImGui::BeginTable("table1", 3, flags, outer_size))
        {
            for (int row = 0; row < 10; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableNextColumn();
                    ImGui::Text("Cell %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::SameLine();
        ImGui::Text("Hello!");

        ImGui::Spacing();

        ImGui::Text("Using explicit size:");
        if (ImGui::BeginTable("table2", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg, ImVec2(TEXT_BASE_WIDTH * 30, 0.0f)))
        {
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableNextColumn();
                    ImGui::Text("Cell %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }
        ImGui::SameLine();
        if (ImGui::BeginTable("table3", 3, ImGuiTableFlags_Borders | ImGuiTableFlags_RowBg, ImVec2(TEXT_BASE_WIDTH * 30, 0.0f)))
        {
            for (int row = 0; row < 3; row++)
            {
                ImGui::TableNextRow(0, TEXT_BASE_HEIGHT * 1.5f);
                for (int column = 0; column < 3; column++)
                {
                    ImGui::TableNextColumn();
                    ImGui::Text("Cell %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Background color");
    if (ImGui::TreeNode("Background color"))
    {
        static ImGuiTableFlags flags = ImGuiTableFlags_RowBg;
        static int row_bg_type = 1;
        static int row_bg_target = 1;
        static int cell_bg_type = 1;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_Borders", &flags, ImGuiTableFlags_Borders);
        ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags, ImGuiTableFlags_RowBg);
        ImGui::SameLine(); HelpMarker("ImGuiTableFlags_RowBg automatically sets RowBg0 to alternative colors pulled from the Style.");
        ImGui::Combo("row bg type", (int*)&row_bg_type, "None\0Red\0Gradient\0");
        ImGui::Combo("row bg target", (int*)&row_bg_target, "RowBg0\0RowBg1\0"); ImGui::SameLine(); HelpMarker("Target RowBg0 to override the alternating odd/even colors,\nTarget RowBg1 to blend with them.");
        ImGui::Combo("cell bg type", (int*)&cell_bg_type, "None\0Blue\0"); ImGui::SameLine(); HelpMarker("We are colorizing cells to B1->C2 here.");
        IM_ASSERT(row_bg_type >= 0 && row_bg_type <= 2);
        IM_ASSERT(row_bg_target >= 0 && row_bg_target <= 1);
        IM_ASSERT(cell_bg_type >= 0 && cell_bg_type <= 1);
        PopStyleCompact();

        if (ImGui::BeginTable("table1", 5, flags))
        {
            for (int row = 0; row < 6; row++)
            {
                ImGui::TableNextRow();

                // Demonstrate setting a row background color with 'ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBgX, ...)'
                // We use a transparent color so we can see the one behind in case our target is RowBg1 and RowBg0 was already targeted by the ImGuiTableFlags_RowBg flag.
                if (row_bg_type != 0)
                {
                    ImU32 row_bg_color = ImGui::GetColorU32(row_bg_type == 1 ? ImVec4(0.7f, 0.3f, 0.3f, 0.65f) : ImVec4(0.2f + row * 0.1f, 0.2f, 0.2f, 0.65f)); // Flat or Gradient?
                    ImGui::TableSetBgColor(ImGuiTableBgTarget_RowBg0 + row_bg_target, row_bg_color);
                }

                // Fill cells
                for (int column = 0; column < 5; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("%c%c", 'A' + row, '0' + column);

                    // Change background of Cells B1->C2
                    // Demonstrate setting a cell background color with 'ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg, ...)'
                    // (the CellBg color will be blended over the RowBg and ColumnBg colors)
                    // We can also pass a column number as a third parameter to TableSetBgColor() and do this outside the column loop.
                    if (row >= 1 && row <= 2 && column >= 1 && column <= 2 && cell_bg_type == 1)
                    {
                        ImU32 cell_bg_color = ImGui::GetColorU32(ImVec4(0.3f, 0.3f, 0.7f, 0.65f));
                        ImGui::TableSetBgColor(ImGuiTableBgTarget_CellBg, cell_bg_color);
                    }
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Tree view");
    if (ImGui::TreeNode("Tree view"))
    {
        static ImGuiTableFlags table_flags = ImGuiTableFlags_BordersV | ImGuiTableFlags_BordersOuterH | ImGuiTableFlags_Resizable | ImGuiTableFlags_RowBg | ImGuiTableFlags_NoBordersInBody;

        static ImGuiTreeNodeFlags tree_node_flags_base = ImGuiTreeNodeFlags_SpanAllColumns | ImGuiTreeNodeFlags_DefaultOpen | ImGuiTreeNodeFlags_DrawLinesFull;
        ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanFullWidth",  &tree_node_flags_base, ImGuiTreeNodeFlags_SpanFullWidth);
        ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanLabelWidth",  &tree_node_flags_base, ImGuiTreeNodeFlags_SpanLabelWidth);
        ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanAllColumns", &tree_node_flags_base, ImGuiTreeNodeFlags_SpanAllColumns);
        ImGui::CheckboxFlags("ImGuiTreeNodeFlags_LabelSpanAllColumns", &tree_node_flags_base, ImGuiTreeNodeFlags_LabelSpanAllColumns);
        ImGui::SameLine(); HelpMarker("Useful if you know that you aren't displaying contents in other columns");

        HelpMarker("See \"Columns flags\" section to configure how indentation is applied to individual columns.");
        if (ImGui::BeginTable("3ways", 3, table_flags))
        {
            // The first column will use the default _WidthStretch when ScrollX is Off and _WidthFixed when ScrollX is On
            ImGui::TableSetupColumn("Name", ImGuiTableColumnFlags_NoHide);
            ImGui::TableSetupColumn("Size", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 12.0f);
            ImGui::TableSetupColumn("Type", ImGuiTableColumnFlags_WidthFixed, TEXT_BASE_WIDTH * 18.0f);
            ImGui::TableHeadersRow();

            // Simple storage to output a dummy file-system.
            struct MyTreeNode
            {
                const char*     Name;
                const char*     Type;
                int             Size;
                int             ChildIdx;
                int             ChildCount;
                static void DisplayNode(const MyTreeNode* node, const MyTreeNode* all_nodes)
                {
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn();
                    const bool is_folder = (node->ChildCount > 0);

                    ImGuiTreeNodeFlags node_flags = tree_node_flags_base;
                    if (node != &all_nodes[0])
                        node_flags &= ~ImGuiTreeNodeFlags_LabelSpanAllColumns; // Only demonstrate this on the root node.

                    if (is_folder)
                    {
                        bool open = ImGui::TreeNodeEx(node->Name, node_flags);
                        if ((node_flags & ImGuiTreeNodeFlags_LabelSpanAllColumns) == 0)
                        {
                            ImGui::TableNextColumn();
                            ImGui::TextDisabled("--");
                            ImGui::TableNextColumn();
                            ImGui::TextUnformatted(node->Type);
                        }
                        if (open)
                        {
                            for (int child_n = 0; child_n < node->ChildCount; child_n++)
                                DisplayNode(&all_nodes[node->ChildIdx + child_n], all_nodes);
                            ImGui::TreePop();
                        }
                    }
                    else
                    {
                        ImGui::TreeNodeEx(node->Name, node_flags | ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_Bullet | ImGuiTreeNodeFlags_NoTreePushOnOpen);
                        ImGui::TableNextColumn();
                        ImGui::Text("%d", node->Size);
                        ImGui::TableNextColumn();
                        ImGui::TextUnformatted(node->Type);
                    }
                }
            };
            static const MyTreeNode nodes[] =
            {
                { "Root with Long Name",          "Folder",       -1,       1, 3    }, // 0
                { "Music",                        "Folder",       -1,       4, 2    }, // 1
                { "Textures",                     "Folder",       -1,       6, 3    }, // 2
                { "desktop.ini",                  "System file",  1024,    -1,-1    }, // 3
                { "File1_a.wav",                  "Audio file",   123000,  -1,-1    }, // 4
                { "File1_b.wav",                  "Audio file",   456000,  -1,-1    }, // 5
                { "Image001.png",                 "Image file",   203128,  -1,-1    }, // 6
                { "Copy of Image001.png",         "Image file",   203256,  -1,-1    }, // 7
                { "Copy of Image001 (Final2).png","Image file",   203512,  -1,-1    }, // 8
            };

            MyTreeNode::DisplayNode(&nodes[0], nodes);

            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Item width");
    if (ImGui::TreeNode("Item width"))
    {
        HelpMarker(
            "Showcase using PushItemWidth() and how it is preserved on a per-column basis.\n\n"
            "Note that on auto-resizing non-resizable fixed columns, querying the content width for "
            "e.g. right-alignment doesn't make sense.");
        if (ImGui::BeginTable("table_item_width", 3, ImGuiTableFlags_Borders))
        {
            ImGui::TableSetupColumn("small");
            ImGui::TableSetupColumn("half");
            ImGui::TableSetupColumn("right-align");
            ImGui::TableHeadersRow();

            for (int row = 0; row < 3; row++)
            {
                ImGui::TableNextRow();
                if (row == 0)
                {
                    // Setup ItemWidth once (instead of setting up every time, which is also possible but less efficient)
                    ImGui::TableSetColumnIndex(0);
                    ImGui::PushItemWidth(TEXT_BASE_WIDTH * 3.0f); // Small
                    ImGui::TableSetColumnIndex(1);
                    ImGui::PushItemWidth(-ImGui::GetContentRegionAvail().x * 0.5f);
                    ImGui::TableSetColumnIndex(2);
                    ImGui::PushItemWidth(-FLT_MIN); // Right-aligned
                }

                // Draw our contents
                static float dummy_f = 0.0f;
                ImGui::PushID(row);
                ImGui::TableSetColumnIndex(0);
                ImGui::SliderFloat("float0", &dummy_f, 0.0f, 1.0f);
                ImGui::TableSetColumnIndex(1);
                ImGui::SliderFloat("float1", &dummy_f, 0.0f, 1.0f);
                ImGui::TableSetColumnIndex(2);
                ImGui::SliderFloat("##float2", &dummy_f, 0.0f, 1.0f); // No visible label since right-aligned
                ImGui::PopID();
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    // Demonstrate using TableHeader() calls instead of TableHeadersRow()
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Custom headers");
    if (ImGui::TreeNode("Custom headers"))
    {
        const int COLUMNS_COUNT = 3;
        if (ImGui::BeginTable("table_custom_headers", COLUMNS_COUNT, ImGuiTableFlags_Borders | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable))
        {
            ImGui::TableSetupColumn("Apricot");
            ImGui::TableSetupColumn("Banana");
            ImGui::TableSetupColumn("Cherry");

            // Dummy entire-column selection storage
            // FIXME: It would be nice to actually demonstrate full-featured selection using those checkbox.
            static bool column_selected[3] = {};

            // Instead of calling TableHeadersRow() we'll submit custom headers ourselves.
            // (A different approach is also possible:
            //    - Specify ImGuiTableColumnFlags_NoHeaderLabel in some TableSetupColumn() call.
            //    - Call TableHeadersRow() normally. This will submit TableHeader() with no name.
            //    - Then call TableSetColumnIndex() to position yourself in the column and submit your stuff e.g. Checkbox().)
            ImGui::TableNextRow(ImGuiTableRowFlags_Headers);
            for (int column = 0; column < COLUMNS_COUNT; column++)
            {
                ImGui::TableSetColumnIndex(column);
                const char* column_name = ImGui::TableGetColumnName(column); // Retrieve name passed to TableSetupColumn()
                ImGui::PushID(column);
                ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));
                ImGui::Checkbox("##checkall", &column_selected[column]);
                ImGui::PopStyleVar();
                ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
                ImGui::TableHeader(column_name);
                ImGui::PopID();
            }

            // Submit table contents
            for (int row = 0; row < 5; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < 3; column++)
                {
                    char buf[32];
                    sprintf(buf, "Cell %d,%d", column, row);
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Selectable(buf, column_selected[column]);
                }
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    // Demonstrate using ImGuiTableColumnFlags_AngledHeader flag to create angled headers
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Angled headers");
    if (ImGui::TreeNode("Angled headers"))
    {
        const char* column_names[] = { "Track", "cabasa", "ride", "smash", "tom-hi", "tom-mid", "tom-low", "hihat-o", "hihat-c", "snare-s", "snare-c", "clap", "rim", "kick" };
        const int columns_count = IM_ARRAYSIZE(column_names);
        const int rows_count = 12;

        static ImGuiTableFlags table_flags = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersInnerH | ImGuiTableFlags_Hideable | ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_HighlightHoveredColumn;
        static ImGuiTableColumnFlags column_flags = ImGuiTableColumnFlags_AngledHeader | ImGuiTableColumnFlags_WidthFixed;
        static bool bools[columns_count * rows_count] = {}; // Dummy storage selection storage
        static int frozen_cols = 1;
        static int frozen_rows = 2;
        ImGui::CheckboxFlags("_ScrollX", &table_flags, ImGuiTableFlags_ScrollX);
        ImGui::CheckboxFlags("_ScrollY", &table_flags, ImGuiTableFlags_ScrollY);
        ImGui::CheckboxFlags("_Resizable", &table_flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("_Sortable", &table_flags, ImGuiTableFlags_Sortable);
        ImGui::CheckboxFlags("_NoBordersInBody", &table_flags, ImGuiTableFlags_NoBordersInBody);
        ImGui::CheckboxFlags("_HighlightHoveredColumn", &table_flags, ImGuiTableFlags_HighlightHoveredColumn);
        ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
        ImGui::SliderInt("Frozen columns", &frozen_cols, 0, 2);
        ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
        ImGui::SliderInt("Frozen rows", &frozen_rows, 0, 2);
        ImGui::CheckboxFlags("Disable header contributing to column width", &column_flags, ImGuiTableColumnFlags_NoHeaderWidth);

        if (ImGui::TreeNode("Style settings"))
        {
            ImGui::SameLine();
            HelpMarker("Giving access to some ImGuiStyle value in this demo for convenience.");
            ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
            ImGui::SliderAngle("style.TableAngledHeadersAngle", &ImGui::GetStyle().TableAngledHeadersAngle, -50.0f, +50.0f);
            ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
            ImGui::SliderFloat2("style.TableAngledHeadersTextAlign", (float*)&ImGui::GetStyle().TableAngledHeadersTextAlign, 0.0f, 1.0f, "%.2f");
            ImGui::TreePop();
        }

        if (ImGui::BeginTable("table_angled_headers", columns_count, table_flags, ImVec2(0.0f, TEXT_BASE_HEIGHT * 12)))
        {
            ImGui::TableSetupColumn(column_names[0], ImGuiTableColumnFlags_NoHide | ImGuiTableColumnFlags_NoReorder);
            for (int n = 1; n < columns_count; n++)
                ImGui::TableSetupColumn(column_names[n], column_flags);
            ImGui::TableSetupScrollFreeze(frozen_cols, frozen_rows);

            ImGui::TableAngledHeadersRow(); // Draw angled headers for all columns with the ImGuiTableColumnFlags_AngledHeader flag.
            ImGui::TableHeadersRow();       // Draw remaining headers and allow access to context-menu and other functions.
            for (int row = 0; row < rows_count; row++)
            {
                ImGui::PushID(row);
                ImGui::TableNextRow();
                ImGui::TableSetColumnIndex(0);
                ImGui::AlignTextToFramePadding();
                ImGui::Text("Track %d", row);
                for (int column = 1; column < columns_count; column++)
                    if (ImGui::TableSetColumnIndex(column))
                    {
                        ImGui::PushID(column);
                        ImGui::Checkbox("", &bools[row * columns_count + column]);
                        ImGui::PopID();
                    }
                ImGui::PopID();
            }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    // Demonstrate creating custom context menus inside columns,
    // while playing it nice with context menus provided by TableHeadersRow()/TableHeader()
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Context menus");
    if (ImGui::TreeNode("Context menus"))
    {
        HelpMarker(
            "By default, right-clicking over a TableHeadersRow()/TableHeader() line will open the default context-menu.\n"
            "Using ImGuiTableFlags_ContextMenuInBody we also allow right-clicking over columns body.");
        static ImGuiTableFlags flags1 = ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Borders | ImGuiTableFlags_ContextMenuInBody;

        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_ContextMenuInBody", &flags1, ImGuiTableFlags_ContextMenuInBody);
        PopStyleCompact();

        // Context Menus: first example
        // [1.1] Right-click on the TableHeadersRow() line to open the default table context menu.
        // [1.2] Right-click in columns also open the default table context menu (if ImGuiTableFlags_ContextMenuInBody is set)
        const int COLUMNS_COUNT = 3;
        if (ImGui::BeginTable("table_context_menu", COLUMNS_COUNT, flags1))
        {
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");

            // [1.1]] Right-click on the TableHeadersRow() line to open the default table context menu.
            ImGui::TableHeadersRow();

            // Submit dummy contents
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < COLUMNS_COUNT; column++)
                {
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Cell %d,%d", column, row);
                }
            }
            ImGui::EndTable();
        }

        // Context Menus: second example
        // [2.1] Right-click on the TableHeadersRow() line to open the default table context menu.
        // [2.2] Right-click on the ".." to open a custom popup
        // [2.3] Right-click in columns to open another custom popup
        HelpMarker(
            "Demonstrate mixing table context menu (over header), item context button (over button) "
            "and custom per-colunm context menu (over column body).");
        ImGuiTableFlags flags2 = ImGuiTableFlags_Resizable | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Borders;
        if (ImGui::BeginTable("table_context_menu_2", COLUMNS_COUNT, flags2))
        {
            ImGui::TableSetupColumn("One");
            ImGui::TableSetupColumn("Two");
            ImGui::TableSetupColumn("Three");

            // [2.1] Right-click on the TableHeadersRow() line to open the default table context menu.
            ImGui::TableHeadersRow();
            for (int row = 0; row < 4; row++)
            {
                ImGui::TableNextRow();
                for (int column = 0; column < COLUMNS_COUNT; column++)
                {
                    // Submit dummy contents
                    ImGui::TableSetColumnIndex(column);
                    ImGui::Text("Cell %d,%d", column, row);
                    ImGui::SameLine();

                    // [2.2] Right-click on the ".." to open a custom popup
                    ImGui::PushID(row * COLUMNS_COUNT + column);
                    ImGui::SmallButton("..");
                    if (ImGui::BeginPopupContextItem())
                    {
                        ImGui::Text("This is the popup for Button(\"..\") in Cell %d,%d", column, row);
                        if (ImGui::Button("Close"))
                            ImGui::CloseCurrentPopup();
                        ImGui::EndPopup();
                    }
                    ImGui::PopID();
                }
            }

            // [2.3] Right-click anywhere in columns to open another custom popup
            // (instead of testing for !IsAnyItemHovered() we could also call OpenPopup() with ImGuiPopupFlags_NoOpenOverExistingPopup
            // to manage popup priority as the popups triggers, here "are we hovering a column" are overlapping)
            int hovered_column = -1;
            for (int column = 0; column < COLUMNS_COUNT + 1; column++)
            {
                ImGui::PushID(column);
                if (ImGui::TableGetColumnFlags(column) & ImGuiTableColumnFlags_IsHovered)
                    hovered_column = column;
                if (hovered_column == column && !ImGui::IsAnyItemHovered() && ImGui::IsMouseReleased(1))
                    ImGui::OpenPopup("MyPopup");
                if (ImGui::BeginPopup("MyPopup"))
                {
                    if (column == COLUMNS_COUNT)
                        ImGui::Text("This is a custom popup for unused space after the last column.");
                    else
                        ImGui::Text("This is a custom popup for Column %d", column);
                    if (ImGui::Button("Close"))
                        ImGui::CloseCurrentPopup();
                    ImGui::EndPopup();
                }
                ImGui::PopID();
            }

            ImGui::EndTable();
            ImGui::Text("Hovered column: %d", hovered_column);
        }
        ImGui::TreePop();
    }

    // Demonstrate creating multiple tables with the same ID
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Synced instances");
    if (ImGui::TreeNode("Synced instances"))
    {
        HelpMarker("Multiple tables with the same identifier will share their settings, width, visibility, order etc.");

        static ImGuiTableFlags flags = ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Borders | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_NoSavedSettings;
        ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
        ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);
        ImGui::CheckboxFlags("ImGuiTableFlags_SizingFixedFit", &flags, ImGuiTableFlags_SizingFixedFit);
        ImGui::CheckboxFlags("ImGuiTableFlags_HighlightHoveredColumn", &flags, ImGuiTableFlags_HighlightHoveredColumn);
        for (int n = 0; n < 3; n++)
        {
            char buf[32];
            sprintf(buf, "Synced Table %d", n);
            bool open = ImGui::CollapsingHeader(buf, ImGuiTreeNodeFlags_DefaultOpen);
            if (open && ImGui::BeginTable("Table", 3, flags, ImVec2(0.0f, ImGui::GetTextLineHeightWithSpacing() * 5)))
            {
                ImGui::TableSetupColumn("One");
                ImGui::TableSetupColumn("Two");
                ImGui::TableSetupColumn("Three");
                ImGui::TableHeadersRow();
                const int cell_count = (n == 1) ? 27 : 9; // Make second table have a scrollbar to verify that additional decoration is not affecting column positions.
                for (int cell = 0; cell < cell_count; cell++)
                {
                    ImGui::TableNextColumn();
                    ImGui::Text("this cell %d", cell);
                }
                ImGui::EndTable();
            }
        }
        ImGui::TreePop();
    }

    // Demonstrate using Sorting facilities
    // This is a simplified version of the "Advanced" example, where we mostly focus on the code necessary to handle sorting.
    // Note that the "Advanced" example also showcase manually triggering a sort (e.g. if item quantities have been modified)
    static const char* template_items_names[] =
    {
        "Banana", "Apple", "Cherry", "Watermelon", "Grapefruit", "Strawberry", "Mango",
        "Kiwi", "Orange", "Pineapple", "Blueberry", "Plum", "Coconut", "Pear", "Apricot"
    };
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Sorting");
    if (ImGui::TreeNode("Sorting"))
    {
        // Create item list
        static ImVector<MyItem> items;
        if (items.Size == 0)
        {
            items.resize(50, MyItem());
            for (int n = 0; n < items.Size; n++)
            {
                const int template_n = n % IM_ARRAYSIZE(template_items_names);
                MyItem& item = items[n];
                item.ID = n;
                item.Name = template_items_names[template_n];
                item.Quantity = (n * n - n) % 20; // Assign default quantities
            }
        }

        // Options
        static ImGuiTableFlags flags =
            ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable | ImGuiTableFlags_Sortable | ImGuiTableFlags_SortMulti
            | ImGuiTableFlags_RowBg | ImGuiTableFlags_BordersOuter | ImGuiTableFlags_BordersV | ImGuiTableFlags_NoBordersInBody
            | ImGuiTableFlags_ScrollY;
        PushStyleCompact();
        ImGui::CheckboxFlags("ImGuiTableFlags_SortMulti", &flags, ImGuiTableFlags_SortMulti);
        ImGui::SameLine(); HelpMarker("When sorting is enabled: hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).");
        ImGui::CheckboxFlags("ImGuiTableFlags_SortTristate", &flags, ImGuiTableFlags_SortTristate);
        ImGui::SameLine(); HelpMarker("When sorting is enabled: allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).");
        PopStyleCompact();

        if (ImGui::BeginTable("table_sorting", 4, flags, ImVec2(0.0f, TEXT_BASE_HEIGHT * 15), 0.0f))
        {
            // Declare columns
            // We use the "user_id" parameter of TableSetupColumn() to specify a user id that will be stored in the sort specifications.
            // This is so our sort function can identify a column given our own identifier. We could also identify them based on their index!
            // Demonstrate using a mixture of flags among available sort-related flags:
            // - ImGuiTableColumnFlags_DefaultSort
            // - ImGuiTableColumnFlags_NoSort / ImGuiTableColumnFlags_NoSortAscending / ImGuiTableColumnFlags_NoSortDescending
            // - ImGuiTableColumnFlags_PreferSortAscending / ImGuiTableColumnFlags_PreferSortDescending
            ImGui::TableSetupColumn("ID",       ImGuiTableColumnFlags_DefaultSort          | ImGuiTableColumnFlags_WidthFixed,   0.0f, MyItemColumnID_ID);
            ImGui::TableSetupColumn("Name",                                                  ImGuiTableColumnFlags_WidthFixed,   0.0f, MyItemColumnID_Name);
            ImGui::TableSetupColumn("Action",   ImGuiTableColumnFlags_NoSort               | ImGuiTableColumnFlags_WidthFixed,   0.0f, MyItemColumnID_Action);
            ImGui::TableSetupColumn("Quantity", ImGuiTableColumnFlags_PreferSortDescending | ImGuiTableColumnFlags_WidthStretch, 0.0f, MyItemColumnID_Quantity);
            ImGui::TableSetupScrollFreeze(0, 1); // Make row always visible
            ImGui::TableHeadersRow();

            // Sort our data if sort specs have been changed!
            if (ImGuiTableSortSpecs* sort_specs = ImGui::TableGetSortSpecs())
                if (sort_specs->SpecsDirty)
                {
                    MyItem::SortWithSortSpecs(sort_specs, items.Data, items.Size);
                    sort_specs->SpecsDirty = false;
                }

            // Demonstrate using clipper for large vertical lists
            ImGuiListClipper clipper;
            clipper.Begin(items.Size);
            while (clipper.Step())
                for (int row_n = clipper.DisplayStart; row_n < clipper.DisplayEnd; row_n++)
                {
                    // Display a data item
                    MyItem* item = &items[row_n];
                    ImGui::PushID(item->ID);
                    ImGui::TableNextRow();
                    ImGui::TableNextColumn();
                    ImGui::Text("%04d", item->ID);
                    ImGui::TableNextColumn();
                    ImGui::TextUnformatted(item->Name);
                    ImGui::TableNextColumn();
                    ImGui::SmallButton("None");
                    ImGui::TableNextColumn();
                    ImGui::Text("%d", item->Quantity);
                    ImGui::PopID();
                }
            ImGui::EndTable();
        }
        ImGui::TreePop();
    }

    // In this example we'll expose most table flags and settings.
    // For specific flags and settings refer to the corresponding section for more detailed explanation.
    // This section is mostly useful to experiment with combining certain flags or settings with each others.
    //ImGui::SetNextItemOpen(true, ImGuiCond_Once); // [DEBUG]
    if (open_action != -1)
        ImGui::SetNextItemOpen(open_action != 0);
    IMGUI_DEMO_MARKER("Tables/Advanced");
    if (ImGui::TreeNode("Advanced"))
    {
        static ImGuiTableFlags flags =
            ImGuiTableFlags_Resizable | ImGuiTableFlags_Reorderable | ImGuiTableFlags_Hideable
            | ImGuiTableFlags_Sortable | ImGuiTableFlags_SortMulti
            | ImGuiTableFlags_RowBg | ImGuiTableFlags_Borders | ImGuiTableFlags_NoBordersInBody
            | ImGuiTableFlags_ScrollX | ImGuiTableFlags_ScrollY
            | ImGuiTableFlags_SizingFixedFit;
        static ImGuiTableColumnFlags columns_base_flags = ImGuiTableColumnFlags_None;

        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT_SelectableSpanRow };
        static int contents_type = CT_SelectableSpanRow;
        const char* contents_type_names[] = { "Text", "Button", "SmallButton", "FillButton", "Selectable", "Selectable (span row)" };
        static int freeze_cols = 1;
        static int freeze_rows = 1;
        static int items_count = IM_ARRAYSIZE(template_items_names) * 2;
        static ImVec2 outer_size_value = ImVec2(0.0f, TEXT_BASE_HEIGHT * 12);
        static float row_min_height = 0.0f; // Auto
        static float inner_width_with_scroll = 0.0f; // Auto-extend
        static bool outer_size_enabled = true;
        static bool show_headers = true;
        static bool show_wrapped_text = false;
        //static ImGuiTextFilter filter;
        //ImGui::SetNextItemOpen(true, ImGuiCond_Once); // FIXME-TABLE: Enabling this results in initial clipped first pass on table which tend to affect column sizing
        if (ImGui::TreeNode("Options"))
        {
            // Make the UI compact because there are so many fields
            PushStyleCompact();
            ImGui::PushItemWidth(TEXT_BASE_WIDTH * 28.0f);

            if (ImGui::TreeNodeEx("Features:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_Resizable", &flags, ImGuiTableFlags_Resizable);
                ImGui::CheckboxFlags("ImGuiTableFlags_Reorderable", &flags, ImGuiTableFlags_Reorderable);
                ImGui::CheckboxFlags("ImGuiTableFlags_Hideable", &flags, ImGuiTableFlags_Hideable);
                ImGui::CheckboxFlags("ImGuiTableFlags_Sortable", &flags, ImGuiTableFlags_Sortable);
                ImGui::CheckboxFlags("ImGuiTableFlags_NoSavedSettings", &flags, ImGuiTableFlags_NoSavedSettings);
                ImGui::CheckboxFlags("ImGuiTableFlags_ContextMenuInBody", &flags, ImGuiTableFlags_ContextMenuInBody);
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Decorations:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_RowBg", &flags, ImGuiTableFlags_RowBg);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersV", &flags, ImGuiTableFlags_BordersV);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterV", &flags, ImGuiTableFlags_BordersOuterV);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerV", &flags, ImGuiTableFlags_BordersInnerV);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersH", &flags, ImGuiTableFlags_BordersH);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersOuterH", &flags, ImGuiTableFlags_BordersOuterH);
                ImGui::CheckboxFlags("ImGuiTableFlags_BordersInnerH", &flags, ImGuiTableFlags_BordersInnerH);
                ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBody", &flags, ImGuiTableFlags_NoBordersInBody); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body (borders will always appear in Headers)");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoBordersInBodyUntilResize", &flags, ImGuiTableFlags_NoBordersInBodyUntilResize); ImGui::SameLine(); HelpMarker("Disable vertical borders in columns Body until hovered for resize (borders will always appear in Headers)");
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Sizing:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                EditTableSizingFlags(&flags);
                ImGui::SameLine(); HelpMarker("In the Advanced demo we override the policy of each column so those table-wide settings have less effect that typical.");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendX", &flags, ImGuiTableFlags_NoHostExtendX);
                ImGui::SameLine(); HelpMarker("Make outer width auto-fit to columns, overriding outer_size.x value.\n\nOnly available when ScrollX/ScrollY are disabled and Stretch columns are not used.");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoHostExtendY", &flags, ImGuiTableFlags_NoHostExtendY);
                ImGui::SameLine(); HelpMarker("Make outer height stop exactly at outer_size.y (prevent auto-extending table past the limit).\n\nOnly available when ScrollX/ScrollY are disabled. Data below the limit will be clipped and not visible.");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoKeepColumnsVisible", &flags, ImGuiTableFlags_NoKeepColumnsVisible);
                ImGui::SameLine(); HelpMarker("Only available if ScrollX is disabled.");
                ImGui::CheckboxFlags("ImGuiTableFlags_PreciseWidths", &flags, ImGuiTableFlags_PreciseWidths);
                ImGui::SameLine(); HelpMarker("Disable distributing remainder width to stretched columns (width allocation on a 100-wide table with 3 columns: Without this flag: 33,33,34. With this flag: 33,33,33). With larger number of columns, resizing will appear to be less smooth.");
                ImGui::CheckboxFlags("ImGuiTableFlags_NoClip", &flags, ImGuiTableFlags_NoClip);
                ImGui::SameLine(); HelpMarker("Disable clipping rectangle for every individual columns (reduce draw command count, items will be able to overflow into other columns). Generally incompatible with ScrollFreeze options.");
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Padding:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_PadOuterX", &flags, ImGuiTableFlags_PadOuterX);
                ImGui::CheckboxFlags("ImGuiTableFlags_NoPadOuterX", &flags, ImGuiTableFlags_NoPadOuterX);
                ImGui::CheckboxFlags("ImGuiTableFlags_NoPadInnerX", &flags, ImGuiTableFlags_NoPadInnerX);
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Scrolling:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_ScrollX", &flags, ImGuiTableFlags_ScrollX);
                ImGui::SameLine();
                ImGui::SetNextItemWidth(ImGui::GetFrameHeight());
                ImGui::DragInt("freeze_cols", &freeze_cols, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);
                ImGui::CheckboxFlags("ImGuiTableFlags_ScrollY", &flags, ImGuiTableFlags_ScrollY);
                ImGui::SameLine();
                ImGui::SetNextItemWidth(ImGui::GetFrameHeight());
                ImGui::DragInt("freeze_rows", &freeze_rows, 0.2f, 0, 9, NULL, ImGuiSliderFlags_NoInput);
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Sorting:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::CheckboxFlags("ImGuiTableFlags_SortMulti", &flags, ImGuiTableFlags_SortMulti);
                ImGui::SameLine(); HelpMarker("When sorting is enabled: hold shift when clicking headers to sort on multiple column. TableGetSortSpecs() may return specs where (SpecsCount > 1).");
                ImGui::CheckboxFlags("ImGuiTableFlags_SortTristate", &flags, ImGuiTableFlags_SortTristate);
                ImGui::SameLine(); HelpMarker("When sorting is enabled: allow no sorting, disable default sorting. TableGetSortSpecs() may return specs where (SpecsCount == 0).");
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Headers:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::Checkbox("show_headers", &show_headers);
                ImGui::CheckboxFlags("ImGuiTableFlags_HighlightHoveredColumn", &flags, ImGuiTableFlags_HighlightHoveredColumn);
                ImGui::CheckboxFlags("ImGuiTableColumnFlags_AngledHeader", &columns_base_flags, ImGuiTableColumnFlags_AngledHeader);
                ImGui::SameLine(); HelpMarker("Enable AngledHeader on all columns. Best enabled on selected narrow columns (see \"Angled headers\" section of the demo).");
                ImGui::TreePop();
            }

            if (ImGui::TreeNodeEx("Other:", ImGuiTreeNodeFlags_DefaultOpen))
            {
                ImGui::Checkbox("show_wrapped_text", &show_wrapped_text);

                ImGui::DragFloat2("##OuterSize", &outer_size_value.x);
                ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
                ImGui::Checkbox("outer_size", &outer_size_enabled);
                ImGui::SameLine();
                HelpMarker("If scrolling is disabled (ScrollX and ScrollY not set):\n"
                    "- The table is output directly in the parent window.\n"
                    "- OuterSize.x < 0.0f will right-align the table.\n"
                    "- OuterSize.x = 0.0f will narrow fit the table unless there are any Stretch columns.\n"
                    "- OuterSize.y then becomes the minimum size for the table, which will extend vertically if there are more rows (unless NoHostExtendY is set).");

                // From a user point of view we will tend to use 'inner_width' differently depending on whether our table is embedding scrolling.
                // To facilitate toying with this demo we will actually pass 0.0f to the BeginTable() when ScrollX is disabled.
                ImGui::DragFloat("inner_width (when ScrollX active)", &inner_width_with_scroll, 1.0f, 0.0f, FLT_MAX);

                ImGui::DragFloat("row_min_height", &row_min_height, 1.0f, 0.0f, FLT_MAX);
                ImGui::SameLine(); HelpMarker("Specify height of the Selectable item.");

                ImGui::DragInt("items_count", &items_count, 0.1f, 0, 9999);
                ImGui::Combo("items_type (first column)", &contents_type, contents_type_names, IM_ARRAYSIZE(contents_type_names));
                //filter.Draw("filter");
                ImGui::TreePop();
            }

            ImGui::PopItemWidth();
            PopStyleCompact();
            ImGui::Spacing();
            ImGui::TreePop();
        }

        // Update item list if we changed the number of items
        static ImVector<MyItem> items;
        static ImVector<int> selection;
        static bool items_need_sort = false;
        if (items.Size != items_count)
        {
            items.resize(items_count, MyItem());
            for (int n = 0; n < items_count; n++)
            {
                const int template_n = n % IM_ARRAYSIZE(template_items_names);
                MyItem& item = items[n];
                item.ID = n;
                item.Name = template_items_names[template_n];
                item.Quantity = (template_n == 3) ? 10 : (template_n == 4) ? 20 : 0; // Assign default quantities
            }
        }

        const ImDrawList* parent_draw_list = ImGui::GetWindowDrawList();
        const int parent_draw_list_draw_cmd_count = parent_draw_list->CmdBuffer.Size;
        ImVec2 table_scroll_cur, table_scroll_max; // For debug display
        const ImDrawList* table_draw_list = NULL;  // "

        // Submit table
        const float inner_width_to_use = (flags & ImGuiTableFlags_ScrollX) ? inner_width_with_scroll : 0.0f;
        if (ImGui::BeginTable("table_advanced", 6, flags, outer_size_enabled ? outer_size_value : ImVec2(0, 0), inner_width_to_use))
        {
            // Declare columns
            // We use the "user_id" parameter of TableSetupColumn() to specify a user id that will be stored in the sort specifications.
            // This is so our sort function can identify a column given our own identifier. We could also identify them based on their index!
            ImGui::TableSetupColumn("ID",           columns_base_flags | ImGuiTableColumnFlags_DefaultSort | ImGuiTableColumnFlags_WidthFixed | ImGuiTableColumnFlags_NoHide, 0.0f, MyItemColumnID_ID);
            ImGui::TableSetupColumn("Name",         columns_base_flags | ImGuiTableColumnFlags_WidthFixed, 0.0f, MyItemColumnID_Name);
            ImGui::TableSetupColumn("Action",       columns_base_flags | ImGuiTableColumnFlags_NoSort | ImGuiTableColumnFlags_WidthFixed, 0.0f, MyItemColumnID_Action);
            ImGui::TableSetupColumn("Quantity",     columns_base_flags | ImGuiTableColumnFlags_PreferSortDescending, 0.0f, MyItemColumnID_Quantity);
            ImGui::TableSetupColumn("Description",  columns_base_flags | ((flags & ImGuiTableFlags_NoHostExtendX) ? 0 : ImGuiTableColumnFlags_WidthStretch), 0.0f, MyItemColumnID_Description);
            ImGui::TableSetupColumn("Hidden",       columns_base_flags |  ImGuiTableColumnFlags_DefaultHide | ImGuiTableColumnFlags_NoSort);
            ImGui::TableSetupScrollFreeze(freeze_cols, freeze_rows);

            // Sort our data if sort specs have been changed!
            ImGuiTableSortSpecs* sort_specs = ImGui::TableGetSortSpecs();
            if (sort_specs && sort_specs->SpecsDirty)
                items_need_sort = true;
            if (sort_specs && items_need_sort && items.Size > 1)
            {
                MyItem::SortWithSortSpecs(sort_specs, items.Data, items.Size);
                sort_specs->SpecsDirty = false;
            }
            items_need_sort = false;

            // Take note of whether we are currently sorting based on the Quantity field,
            // we will use this to trigger sorting when we know the data of this column has been modified.
            const bool sorts_specs_using_quantity = (ImGui::TableGetColumnFlags(3) & ImGuiTableColumnFlags_IsSorted) != 0;

            // Show headers
            if (show_headers && (columns_base_flags & ImGuiTableColumnFlags_AngledHeader) != 0)
                ImGui::TableAngledHeadersRow();
            if (show_headers)
                ImGui::TableHeadersRow();

            // Show data
            // FIXME-TABLE FIXME-NAV: How we can get decent up/down even though we have the buttons here?
#if 1
            // Demonstrate using clipper for large vertical lists
            ImGuiListClipper clipper;
            clipper.Begin(items.Size);
            while (clipper.Step())
            {
                for (int row_n = clipper.DisplayStart; row_n < clipper.DisplayEnd; row_n++)
#else
            // Without clipper
            {
                for (int row_n = 0; row_n < items.Size; row_n++)
#endif
                {
                    MyItem* item = &items[row_n];
                    //if (!filter.PassFilter(item->Name))
                    //    continue;

                    const bool item_is_selected = selection.contains(item->ID);
                    ImGui::PushID(item->ID);
                    ImGui::TableNextRow(ImGuiTableRowFlags_None, row_min_height);

                    // For the demo purpose we can select among different type of items submitted in the first column
                    ImGui::TableSetColumnIndex(0);
                    char label[32];
                    sprintf(label, "%04d", item->ID);
                    if (contents_type == CT_Text)
                        ImGui::TextUnformatted(label);
                    else if (contents_type == CT_Button)
                        ImGui::Button(label);
                    else if (contents_type == CT_SmallButton)
                        ImGui::SmallButton(label);
                    else if (contents_type == CT_FillButton)
                        ImGui::Button(label, ImVec2(-FLT_MIN, 0.0f));
                    else if (contents_type == CT_Selectable || contents_type == CT_SelectableSpanRow)
                    {
                        ImGuiSelectableFlags selectable_flags = (contents_type == CT_SelectableSpanRow) ? ImGuiSelectableFlags_SpanAllColumns | ImGuiSelectableFlags_AllowOverlap : ImGuiSelectableFlags_None;
                        if (ImGui::Selectable(label, item_is_selected, selectable_flags, ImVec2(0, row_min_height)))
                        {
                            if (ImGui::GetIO().KeyCtrl)
                            {
                                if (item_is_selected)
                                    selection.find_erase_unsorted(item->ID);
                                else
                                    selection.push_back(item->ID);
                            }
                            else
                            {
                                selection.clear();
                                selection.push_back(item->ID);
                            }
                        }
                    }

                    if (ImGui::TableSetColumnIndex(1))
                        ImGui::TextUnformatted(item->Name);

                    // Here we demonstrate marking our data set as needing to be sorted again if we modified a quantity,
                    // and we are currently sorting on the column showing the Quantity.
                    // To avoid triggering a sort while holding the button, we only trigger it when the button has been released.
                    // You will probably need some extra logic if you want to automatically sort when a specific entry changes.
                    if (ImGui::TableSetColumnIndex(2))
                    {
                        if (ImGui::SmallButton("Chop")) { item->Quantity += 1; }
                        if (sorts_specs_using_quantity && ImGui::IsItemDeactivated()) { items_need_sort = true; }
                        ImGui::SameLine();
                        if (ImGui::SmallButton("Eat")) { item->Quantity -= 1; }
                        if (sorts_specs_using_quantity && ImGui::IsItemDeactivated()) { items_need_sort = true; }
                    }

                    if (ImGui::TableSetColumnIndex(3))
                        ImGui::Text("%d", item->Quantity);

                    ImGui::TableSetColumnIndex(4);
                    if (show_wrapped_text)
                        ImGui::TextWrapped("Lorem ipsum dolor sit amet");
                    else
                        ImGui::Text("Lorem ipsum dolor sit amet");

                    if (ImGui::TableSetColumnIndex(5))
                        ImGui::Text("1234");

                    ImGui::PopID();
                }
            }

            // Store some info to display debug details below
            table_scroll_cur = ImVec2(ImGui::GetScrollX(), ImGui::GetScrollY());
            table_scroll_max = ImVec2(ImGui::GetScrollMaxX(), ImGui::GetScrollMaxY());
            table_draw_list = ImGui::GetWindowDrawList();
            ImGui::EndTable();
        }
        static bool show_debug_details = false;
        ImGui::Checkbox("Debug details", &show_debug_details);
        if (show_debug_details && table_draw_list)
        {
            ImGui::SameLine(0.0f, 0.0f);
            const int table_draw_list_draw_cmd_count = table_draw_list->CmdBuffer.Size;
            if (table_draw_list == parent_draw_list)
                ImGui::Text(": DrawCmd: +%d (in same window)",
                    table_draw_list_draw_cmd_count - parent_draw_list_draw_cmd_count);
            else
                ImGui::Text(": DrawCmd: +%d (in child window), Scroll: (%.f/%.f) (%.f/%.f)",
                    table_draw_list_draw_cmd_count - 1, table_scroll_cur.x, table_scroll_max.x, table_scroll_cur.y, table_scroll_max.y);
        }
        ImGui::TreePop();
    }

    ImGui::PopID();

    DemoWindowColumns();

    if (disable_indent)
        ImGui::PopStyleVar();
}

// Demonstrate old/legacy Columns API!
// [2020: Columns are under-featured and not maintained. Prefer using the more flexible and powerful BeginTable() API!]
static void DemoWindowColumns()
{
    IMGUI_DEMO_MARKER("Columns (legacy API)");
    bool open = ImGui::TreeNode("Legacy Columns API");
    ImGui::SameLine();
    HelpMarker("Columns() is an old API! Prefer using the more flexible and powerful BeginTable() API!");
    if (!open)
        return;

    // Basic columns
    IMGUI_DEMO_MARKER("Columns (legacy API)/Basic");
    if (ImGui::TreeNode("Basic"))
    {
        ImGui::Text("Without border:");
        ImGui::Columns(3, "mycolumns3", false);  // 3-ways, no border
        ImGui::Separator();
        for (int n = 0; n < 14; n++)
        {
            char label[32];
            sprintf(label, "Item %d", n);
            if (ImGui::Selectable(label)) {}
            //if (ImGui::Button(label, ImVec2(-FLT_MIN,0.0f))) {}
            ImGui::NextColumn();
        }
        ImGui::Columns(1);
        ImGui::Separator();

        ImGui::Text("With border:");
        ImGui::Columns(4, "mycolumns"); // 4-ways, with border
        ImGui::Separator();
        ImGui::Text("ID"); ImGui::NextColumn();
        ImGui::Text("Name"); ImGui::NextColumn();
        ImGui::Text("Path"); ImGui::NextColumn();
        ImGui::Text("Hovered"); ImGui::NextColumn();
        ImGui::Separator();
        const char* names[3] = { "One", "Two", "Three" };
        const char* paths[3] = { "/path/one", "/path/two", "/path/three" };
        static int selected = -1;
        for (int i = 0; i < 3; i++)
        {
            char label[32];
            sprintf(label, "%04d", i);
            if (ImGui::Selectable(label, selected == i, ImGuiSelectableFlags_SpanAllColumns))
                selected = i;
            bool hovered = ImGui::IsItemHovered();
            ImGui::NextColumn();
            ImGui::Text(names[i]); ImGui::NextColumn();
            ImGui::Text(paths[i]); ImGui::NextColumn();
            ImGui::Text("%d", hovered); ImGui::NextColumn();
        }
        ImGui::Columns(1);
        ImGui::Separator();
        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Columns (legacy API)/Borders");
    if (ImGui::TreeNode("Borders"))
    {
        // NB: Future columns API should allow automatic horizontal borders.
        static bool h_borders = true;
        static bool v_borders = true;
        static int columns_count = 4;
        const int lines_count = 3;
        ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);
        ImGui::DragInt("##columns_count", &columns_count, 0.1f, 2, 10, "%d columns");
        if (columns_count < 2)
            columns_count = 2;
        ImGui::SameLine();
        ImGui::Checkbox("horizontal", &h_borders);
        ImGui::SameLine();
        ImGui::Checkbox("vertical", &v_borders);
        ImGui::Columns(columns_count, NULL, v_borders);
        for (int i = 0; i < columns_count * lines_count; i++)
        {
            if (h_borders && ImGui::GetColumnIndex() == 0)
                ImGui::Separator();
            ImGui::PushID(i);
            ImGui::Text("%c%c%c", 'a' + i, 'a' + i, 'a' + i);
            ImGui::Text("Width %.2f", ImGui::GetColumnWidth());
            ImGui::Text("Avail %.2f", ImGui::GetContentRegionAvail().x);
            ImGui::Text("Offset %.2f", ImGui::GetColumnOffset());
            ImGui::Text("Long text that is likely to clip");
            ImGui::Button("Button", ImVec2(-FLT_MIN, 0.0f));
            ImGui::PopID();
            ImGui::NextColumn();
        }
        ImGui::Columns(1);
        if (h_borders)
            ImGui::Separator();
        ImGui::TreePop();
    }

    // Create multiple items in a same cell before switching to next column
    IMGUI_DEMO_MARKER("Columns (legacy API)/Mixed items");
    if (ImGui::TreeNode("Mixed items"))
    {
        ImGui::Columns(3, "mixed");
        ImGui::Separator();

        ImGui::Text("Hello");
        ImGui::Button("Banana");
        ImGui::NextColumn();

        ImGui::Text("ImGui");
        ImGui::Button("Apple");
        static float foo = 1.0f;
        ImGui::InputFloat("red", &foo, 0.05f, 0, "%.3f");
        ImGui::Text("An extra line here.");
        ImGui::NextColumn();

        ImGui::Text("Sailor");
        ImGui::Button("Corniflower");
        static float bar = 1.0f;
        ImGui::InputFloat("blue", &bar, 0.05f, 0, "%.3f");
        ImGui::NextColumn();

        if (ImGui::CollapsingHeader("Category A")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();
        if (ImGui::CollapsingHeader("Category B")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();
        if (ImGui::CollapsingHeader("Category C")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();
        ImGui::Columns(1);
        ImGui::Separator();
        ImGui::TreePop();
    }

    // Word wrapping
    IMGUI_DEMO_MARKER("Columns (legacy API)/Word-wrapping");
    if (ImGui::TreeNode("Word-wrapping"))
    {
        ImGui::Columns(2, "word-wrapping");
        ImGui::Separator();
        ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");
        ImGui::TextWrapped("Hello Left");
        ImGui::NextColumn();
        ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");
        ImGui::TextWrapped("Hello Right");
        ImGui::Columns(1);
        ImGui::Separator();
        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Columns (legacy API)/Horizontal Scrolling");
    if (ImGui::TreeNode("Horizontal Scrolling"))
    {
        ImGui::SetNextWindowContentSize(ImVec2(1500.0f, 0.0f));
        ImVec2 child_size = ImVec2(0, ImGui::GetFontSize() * 20.0f);
        ImGui::BeginChild("##ScrollingRegion", child_size, ImGuiChildFlags_None, ImGuiWindowFlags_HorizontalScrollbar);
        ImGui::Columns(10);

        // Also demonstrate using clipper for large vertical lists
        int ITEMS_COUNT = 2000;
        ImGuiListClipper clipper;
        clipper.Begin(ITEMS_COUNT);
        while (clipper.Step())
        {
            for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
                for (int j = 0; j < 10; j++)
                {
                    ImGui::Text("Line %d Column %d...", i, j);
                    ImGui::NextColumn();
                }
        }
        ImGui::Columns(1);
        ImGui::EndChild();
        ImGui::TreePop();
    }

    IMGUI_DEMO_MARKER("Columns (legacy API)/Tree");
    if (ImGui::TreeNode("Tree"))
    {
        ImGui::Columns(2, "tree", true);
        for (int x = 0; x < 3; x++)
        {
            bool open1 = ImGui::TreeNode((void*)(intptr_t)x, "Node%d", x);
            ImGui::NextColumn();
            ImGui::Text("Node contents");
            ImGui::NextColumn();
            if (open1)
            {
                for (int y = 0; y < 3; y++)
                {
                    bool open2 = ImGui::TreeNode((void*)(intptr_t)y, "Node%d.%d", x, y);
                    ImGui::NextColumn();
                    ImGui::Text("Node contents");
                    if (open2)
                    {
                        ImGui::Text("Even more contents");
                        if (ImGui::TreeNode("Tree in column"))
                        {
                            ImGui::Text("The quick brown fox jumps over the lazy dog");
                            ImGui::TreePop();
                        }
                    }
                    ImGui::NextColumn();
                    if (open2)
                        ImGui::TreePop();
                }
                ImGui::TreePop();
            }
        }
        ImGui::Columns(1);
        ImGui::TreePop();
    }

    ImGui::TreePop();
}

//-----------------------------------------------------------------------------
// [SECTION] DemoWindowInputs()
//-----------------------------------------------------------------------------

static void DemoWindowInputs()
{
    IMGUI_DEMO_MARKER("Inputs & Focus");
    if (ImGui::CollapsingHeader("Inputs & Focus"))
    {
        ImGuiIO& io = ImGui::GetIO();

        // Display inputs submitted to ImGuiIO
        IMGUI_DEMO_MARKER("Inputs & Focus/Inputs");
        ImGui::SetNextItemOpen(true, ImGuiCond_Once);
        bool inputs_opened = ImGui::TreeNode("Inputs");
        ImGui::SameLine();
        HelpMarker(
            "This is a simplified view. See more detailed input state:\n"
            "- in 'Tools->Metrics/Debugger->Inputs'.\n"
            "- in 'Tools->Debug Log->IO'.");
        if (inputs_opened)
        {
            if (ImGui::IsMousePosValid())
                ImGui::Text("Mouse pos: (%g, %g)", io.MousePos.x, io.MousePos.y);
            else
                ImGui::Text("Mouse pos: <INVALID>");
            ImGui::Text("Mouse delta: (%g, %g)", io.MouseDelta.x, io.MouseDelta.y);
            ImGui::Text("Mouse down:");
            for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseDown(i)) { ImGui::SameLine(); ImGui::Text("b%d (%.02f secs)", i, io.MouseDownDuration[i]); }
            ImGui::Text("Mouse wheel: %.1f", io.MouseWheel);
            ImGui::Text("Mouse clicked count:");
            for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (io.MouseClickedCount[i] > 0) { ImGui::SameLine(); ImGui::Text("b%d: %d", i, io.MouseClickedCount[i]); }

            // We iterate both legacy native range and named ImGuiKey ranges. This is a little unusual/odd but this allows
            // displaying the data for old/new backends.
            // User code should never have to go through such hoops!
            // You can generally iterate between ImGuiKey_NamedKey_BEGIN and ImGuiKey_NamedKey_END.
            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };
            ImGuiKey start_key = ImGuiKey_NamedKey_BEGIN;
            ImGui::Text("Keys down:");         for (ImGuiKey key = start_key; key < ImGuiKey_NamedKey_END; key = (ImGuiKey)(key + 1)) { if (funcs::IsLegacyNativeDupe(key) || !ImGui::IsKeyDown(key)) continue; ImGui::SameLine(); ImGui::Text((key < ImGuiKey_NamedKey_BEGIN) ? "\"%s\"" : "\"%s\" %d", ImGui::GetKeyName(key), key); }
            ImGui::Text("Keys mods: %s%s%s%s", io.KeyCtrl ? "CTRL " : "", io.KeyShift ? "SHIFT " : "", io.KeyAlt ? "ALT " : "", io.KeySuper ? "SUPER " : "");
            ImGui::Text("Chars queue:");       for (int i = 0; i < io.InputQueueCharacters.Size; i++) { ImWchar c = io.InputQueueCharacters[i]; ImGui::SameLine();  ImGui::Text("\'%c\' (0x%04X)", (c > ' ' && c <= 255) ? (char)c : '?', c); } // FIXME: We should convert 'c' to UTF-8 here but the functions are not public.

            ImGui::TreePop();
        }

        // Display ImGuiIO output flags
        IMGUI_DEMO_MARKER("Inputs & Focus/Outputs");
        ImGui::SetNextItemOpen(true, ImGuiCond_Once);
        bool outputs_opened = ImGui::TreeNode("Outputs");
        ImGui::SameLine();
        HelpMarker(
            "The value of io.WantCaptureMouse and io.WantCaptureKeyboard are normally set by Dear ImGui "
            "to instruct your application of how to route inputs. Typically, when a value is true, it means "
            "Dear ImGui wants the corresponding inputs and we expect the underlying application to ignore them.\n\n"
            "The most typical case is: when hovering a window, Dear ImGui set io.WantCaptureMouse to true, "
            "and underlying application should ignore mouse inputs (in practice there are many and more subtle "
            "rules leading to how those flags are set).");
        if (outputs_opened)
        {
            ImGui::Text("io.WantCaptureMouse: %d", io.WantCaptureMouse);
            ImGui::Text("io.WantCaptureMouseUnlessPopupClose: %d", io.WantCaptureMouseUnlessPopupClose);
            ImGui::Text("io.WantCaptureKeyboard: %d", io.WantCaptureKeyboard);
            ImGui::Text("io.WantTextInput: %d", io.WantTextInput);
            ImGui::Text("io.WantSetMousePos: %d", io.WantSetMousePos);
            ImGui::Text("io.NavActive: %d, io.NavVisible: %d", io.NavActive, io.NavVisible);

            IMGUI_DEMO_MARKER("Inputs & Focus/Outputs/WantCapture override");
            if (ImGui::TreeNode("WantCapture override"))
            {
                HelpMarker(
                    "Hovering the colored canvas will override io.WantCaptureXXX fields.\n"
                    "Notice how normally (when set to none), the value of io.WantCaptureKeyboard would be false when hovering "
                    "and true when clicking.");
                static int capture_override_mouse = -1;
                static int capture_override_keyboard = -1;
                const char* capture_override_desc[] = { "None", "Set to false", "Set to true" };
                ImGui::SetNextItemWidth(ImGui::GetFontSize() * 15);
                ImGui::SliderInt("SetNextFrameWantCaptureMouse() on hover", &capture_override_mouse, -1, +1, capture_override_desc[capture_override_mouse + 1], ImGuiSliderFlags_AlwaysClamp);
                ImGui::SetNextItemWidth(ImGui::GetFontSize() * 15);
                ImGui::SliderInt("SetNextFrameWantCaptureKeyboard() on hover", &capture_override_keyboard, -1, +1, capture_override_desc[capture_override_keyboard + 1], ImGuiSliderFlags_AlwaysClamp);

                ImGui::ColorButton("##panel", ImVec4(0.7f, 0.1f, 0.7f, 1.0f), ImGuiColorEditFlags_NoTooltip | ImGuiColorEditFlags_NoDragDrop, ImVec2(128.0f, 96.0f)); // Dummy item
                if (ImGui::IsItemHovered() && capture_override_mouse != -1)
                    ImGui::SetNextFrameWantCaptureMouse(capture_override_mouse == 1);
                if (ImGui::IsItemHovered() && capture_override_keyboard != -1)
                    ImGui::SetNextFrameWantCaptureKeyboard(capture_override_keyboard == 1);

                ImGui::TreePop();
            }
            ImGui::TreePop();
        }

        // Demonstrate using Shortcut() and Routing Policies.
        // The general flow is:
        // - Code interested in a chord (e.g. "Ctrl+A") declares their intent.
        // - Multiple locations may be interested in same chord! Routing helps find a winner.
        // - Every frame, we resolve all claims and assign one owner if the modifiers are matching.
        // - The lower-level function is 'bool SetShortcutRouting()', returns true when caller got the route.
        // - Most of the times, SetShortcutRouting() is not called directly. User mostly calls Shortcut() with routing flags.
        // - If you call Shortcut() WITHOUT any routing option, it uses ImGuiInputFlags_RouteFocused.
        // TL;DR: Most uses will simply be:
        // - Shortcut(ImGuiMod_Ctrl | ImGuiKey_A); // Use ImGuiInputFlags_RouteFocused policy.
        IMGUI_DEMO_MARKER("Inputs & Focus/Shortcuts");
        if (ImGui::TreeNode("Shortcuts"))
        {
            static ImGuiInputFlags route_options = ImGuiInputFlags_Repeat;
            static ImGuiInputFlags route_type = ImGuiInputFlags_RouteFocused;
            ImGui::CheckboxFlags("ImGuiInputFlags_Repeat", &route_options, ImGuiInputFlags_Repeat);
            ImGui::RadioButton("ImGuiInputFlags_RouteActive", &route_type, ImGuiInputFlags_RouteActive);
            ImGui::RadioButton("ImGuiInputFlags_RouteFocused (default)", &route_type, ImGuiInputFlags_RouteFocused);
            ImGui::RadioButton("ImGuiInputFlags_RouteGlobal", &route_type, ImGuiInputFlags_RouteGlobal);
            ImGui::Indent();
            ImGui::BeginDisabled(route_type != ImGuiInputFlags_RouteGlobal);
            ImGui::CheckboxFlags("ImGuiInputFlags_RouteOverFocused", &route_options, ImGuiInputFlags_RouteOverFocused);
            ImGui::CheckboxFlags("ImGuiInputFlags_RouteOverActive", &route_options, ImGuiInputFlags_RouteOverActive);
            ImGui::CheckboxFlags("ImGuiInputFlags_RouteUnlessBgFocused", &route_options, ImGuiInputFlags_RouteUnlessBgFocused);
            ImGui::EndDisabled();
            ImGui::Unindent();
            ImGui::RadioButton("ImGuiInputFlags_RouteAlways", &route_type, ImGuiInputFlags_RouteAlways);
            ImGuiInputFlags flags = route_type | route_options; // Merged flags
            if (route_type != ImGuiInputFlags_RouteGlobal)
                flags &= ~(ImGuiInputFlags_RouteOverFocused | ImGuiInputFlags_RouteOverActive | ImGuiInputFlags_RouteUnlessBgFocused);

            ImGui::SeparatorText("Using SetNextItemShortcut()");
            ImGui::Text("Ctrl+S");
            ImGui::SetNextItemShortcut(ImGuiMod_Ctrl | ImGuiKey_S, flags | ImGuiInputFlags_Tooltip);
            ImGui::Button("Save");
            ImGui::Text("Alt+F");
            ImGui::SetNextItemShortcut(ImGuiMod_Alt | ImGuiKey_F, flags | ImGuiInputFlags_Tooltip);
            static float f = 0.5f;
            ImGui::SliderFloat("Factor", &f, 0.0f, 1.0f);

            ImGui::SeparatorText("Using Shortcut()");
            const float line_height = ImGui::GetTextLineHeightWithSpacing();
            const ImGuiKeyChord key_chord = ImGuiMod_Ctrl | ImGuiKey_A;

            ImGui::Text("Ctrl+A");
            ImGui::Text("IsWindowFocused: %d, Shortcut: %s", ImGui::IsWindowFocused(), ImGui::Shortcut(key_chord, flags) ? "PRESSED" : "...");

            ImGui::PushStyleColor(ImGuiCol_ChildBg, ImVec4(1.0f, 0.0f, 1.0f, 0.1f));

            ImGui::BeginChild("WindowA", ImVec2(-FLT_MIN, line_height * 14), true);
            ImGui::Text("Press CTRL+A and see who receives it!");
            ImGui::Separator();

            // 1: Window polling for CTRL+A
            ImGui::Text("(in WindowA)");
            ImGui::Text("IsWindowFocused: %d, Shortcut: %s", ImGui::IsWindowFocused(), ImGui::Shortcut(key_chord, flags) ? "PRESSED" : "...");

            // 2: InputText also polling for CTRL+A: it always uses _RouteFocused internally (gets priority when active)
            // (Commented because the owner-aware version of Shortcut() is still in imgui_internal.h)
            //char str[16] = "Press CTRL+A";
            //ImGui::Spacing();
            //ImGui::InputText("InputTextB", str, IM_ARRAYSIZE(str), ImGuiInputTextFlags_ReadOnly);
            //ImGuiID item_id = ImGui::GetItemID();
            //ImGui::SameLine(); HelpMarker("Internal widgets always use _RouteFocused");
            //ImGui::Text("IsWindowFocused: %d, Shortcut: %s", ImGui::IsWindowFocused(), ImGui::Shortcut(key_chord, flags, item_id) ? "PRESSED" : "...");

            // 3: Dummy child is not claiming the route: focusing them shouldn't steal route away from WindowA
            ImGui::BeginChild("ChildD", ImVec2(-FLT_MIN, line_height * 4), true);
            ImGui::Text("(in ChildD: not using same Shortcut)");
            ImGui::Text("IsWindowFocused: %d", ImGui::IsWindowFocused());
            ImGui::EndChild();

            // 4: Child window polling for CTRL+A. It is deeper than WindowA and gets priority when focused.
            ImGui::BeginChild("ChildE", ImVec2(-FLT_MIN, line_height * 4), true);
            ImGui::Text("(in ChildE: using same Shortcut)");
            ImGui::Text("IsWindowFocused: %d, Shortcut: %s", ImGui::IsWindowFocused(), ImGui::Shortcut(key_chord, flags) ? "PRESSED" : "...");
            ImGui::EndChild();

            // 5: In a popup
            if (ImGui::Button("Open Popup"))
                ImGui::OpenPopup("PopupF");
            if (ImGui::BeginPopup("PopupF"))
            {
                ImGui::Text("(in PopupF)");
                ImGui::Text("IsWindowFocused: %d, Shortcut: %s", ImGui::IsWindowFocused(), ImGui::Shortcut(key_chord, flags) ? "PRESSED" : "...");
                // (Commented because the owner-aware version of Shortcut() is still in imgui_internal.h)
                //ImGui::InputText("InputTextG", str, IM_ARRAYSIZE(str), ImGuiInputTextFlags_ReadOnly);
                //ImGui::Text("IsWindowFocused: %d, Shortcut: %s", ImGui::IsWindowFocused(), ImGui::Shortcut(key_chord, flags, ImGui::GetItemID()) ? "PRESSED" : "...");
                ImGui::EndPopup();
            }
            ImGui::EndChild();
            ImGui::PopStyleColor();

            ImGui::TreePop();
        }

        // Display mouse cursors
        IMGUI_DEMO_MARKER("Inputs & Focus/Mouse Cursors");
        if (ImGui::TreeNode("Mouse Cursors"))
        {
            const char* mouse_cursors_names[] = { "Arrow", "TextInput", "ResizeAll", "ResizeNS", "ResizeEW", "ResizeNESW", "ResizeNWSE", "Hand", "Wait", "Progress", "NotAllowed" };
            IM_ASSERT(IM_ARRAYSIZE(mouse_cursors_names) == ImGuiMouseCursor_COUNT);

            ImGuiMouseCursor current = ImGui::GetMouseCursor();
            const char* cursor_name = (current >= ImGuiMouseCursor_Arrow) && (current < ImGuiMouseCursor_COUNT) ? mouse_cursors_names[current] : "N/A";
            ImGui::Text("Current mouse cursor = %d: %s", current, cursor_name);
            ImGui::BeginDisabled(true);
            ImGui::CheckboxFlags("io.BackendFlags: HasMouseCursors", &io.BackendFlags, ImGuiBackendFlags_HasMouseCursors);
            ImGui::EndDisabled();

            ImGui::Text("Hover to see mouse cursors:");
            ImGui::SameLine(); HelpMarker(
                "Your application can render a different mouse cursor based on what ImGui::GetMouseCursor() returns. "
                "If software cursor rendering (io.MouseDrawCursor) is set ImGui will draw the right cursor for you, "
                "otherwise your backend needs to handle it.");
            for (int i = 0; i < ImGuiMouseCursor_COUNT; i++)
            {
                char label[32];
                sprintf(label, "Mouse cursor %d: %s", i, mouse_cursors_names[i]);
                ImGui::Bullet(); ImGui::Selectable(label, false);
                if (ImGui::IsItemHovered())
                    ImGui::SetMouseCursor(i);
            }
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Inputs & Focus/Tabbing");
        if (ImGui::TreeNode("Tabbing"))
        {
            ImGui::Text("Use TAB/SHIFT+TAB to cycle through keyboard editable fields.");
            static char buf[32] = "hello";
            ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));
            ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));
            ImGui::InputText("3", buf, IM_ARRAYSIZE(buf));
            ImGui::PushItemFlag(ImGuiItemFlags_NoTabStop, true);
            ImGui::InputText("4 (tab skip)", buf, IM_ARRAYSIZE(buf));
            ImGui::SameLine(); HelpMarker("Item won't be cycled through when using TAB or Shift+Tab.");
            ImGui::PopItemFlag();
            ImGui::InputText("5", buf, IM_ARRAYSIZE(buf));
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Inputs & Focus/Focus from code");
        if (ImGui::TreeNode("Focus from code"))
        {
            bool focus_1 = ImGui::Button("Focus on 1"); ImGui::SameLine();
            bool focus_2 = ImGui::Button("Focus on 2"); ImGui::SameLine();
            bool focus_3 = ImGui::Button("Focus on 3");
            int has_focus = 0;
            static char buf[128] = "click on a button to set focus";

            if (focus_1) ImGui::SetKeyboardFocusHere();
            ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));
            if (ImGui::IsItemActive()) has_focus = 1;

            if (focus_2) ImGui::SetKeyboardFocusHere();
            ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));
            if (ImGui::IsItemActive()) has_focus = 2;

            ImGui::PushItemFlag(ImGuiItemFlags_NoTabStop, true);
            if (focus_3) ImGui::SetKeyboardFocusHere();
            ImGui::InputText("3 (tab skip)", buf, IM_ARRAYSIZE(buf));
            if (ImGui::IsItemActive()) has_focus = 3;
            ImGui::SameLine(); HelpMarker("Item won't be cycled through when using TAB or Shift+Tab.");
            ImGui::PopItemFlag();

            if (has_focus)
                ImGui::Text("Item with focus: %d", has_focus);
            else
                ImGui::Text("Item with focus: <none>");

            // Use >= 0 parameter to SetKeyboardFocusHere() to focus an upcoming item
            static float f3[3] = { 0.0f, 0.0f, 0.0f };
            int focus_ahead = -1;
            if (ImGui::Button("Focus on X")) { focus_ahead = 0; } ImGui::SameLine();
            if (ImGui::Button("Focus on Y")) { focus_ahead = 1; } ImGui::SameLine();
            if (ImGui::Button("Focus on Z")) { focus_ahead = 2; }
            if (focus_ahead != -1) ImGui::SetKeyboardFocusHere(focus_ahead);
            ImGui::SliderFloat3("Float3", &f3[0], 0.0f, 1.0f);

            ImGui::TextWrapped("NB: Cursor & selection are preserved when refocusing last used item in code.");
            ImGui::TreePop();
        }

        IMGUI_DEMO_MARKER("Inputs & Focus/Dragging");
        if (ImGui::TreeNode("Dragging"))
        {
            ImGui::TextWrapped("You can use ImGui::GetMouseDragDelta(0) to query for the dragged amount on any widget.");
            for (int button = 0; button < 3; button++)
            {
                ImGui::Text("IsMouseDragging(%d):", button);
                ImGui::Text("  w/ default threshold: %d,", ImGui::IsMouseDragging(button));
                ImGui::Text("  w/ zero threshold: %d,", ImGui::IsMouseDragging(button, 0.0f));
                ImGui::Text("  w/ large threshold: %d,", ImGui::IsMouseDragging(button, 20.0f));
            }

            ImGui::Button("Drag Me");
            if (ImGui::IsItemActive())
                ImGui::GetForegroundDrawList()->AddLine(io.MouseClickedPos[0], io.MousePos, ImGui::GetColorU32(ImGuiCol_Button), 4.0f); // Draw a line between the button and the mouse cursor

            // Drag operations gets "unlocked" when the mouse has moved past a certain threshold
            // (the default threshold is stored in io.MouseDragThreshold). You can request a lower or higher
            // threshold using the second parameter of IsMouseDragging() and GetMouseDragDelta().
            ImVec2 value_raw = ImGui::GetMouseDragDelta(0, 0.0f);
            ImVec2 value_with_lock_threshold = ImGui::GetMouseDragDelta(0);
            ImVec2 mouse_delta = io.MouseDelta;
            ImGui::Text("GetMouseDragDelta(0):");
            ImGui::Text("  w/ default threshold: (%.1f, %.1f)", value_with_lock_threshold.x, value_with_lock_threshold.y);
            ImGui::Text("  w/ zero threshold: (%.1f, %.1f)", value_raw.x, value_raw.y);
            ImGui::Text("io.MouseDelta: (%.1f, %.1f)", mouse_delta.x, mouse_delta.y);
            ImGui::TreePop();
        }
    }
}

//-----------------------------------------------------------------------------
// [SECTION] About Window / ShowAboutWindow()
// Access from Dear ImGui Demo -> Tools -> About
//-----------------------------------------------------------------------------

void ImGui::ShowAboutWindow(bool* p_open)
{
    if (!ImGui::Begin("About Dear ImGui", p_open, ImGuiWindowFlags_AlwaysAutoResize))
    {
        ImGui::End();
        return;
    }
    IMGUI_DEMO_MARKER("Tools/About Dear ImGui");
    ImGui::Text("Dear ImGui %s (%d)", IMGUI_VERSION, IMGUI_VERSION_NUM);

    ImGui::TextLinkOpenURL("Homepage", "https://github.com/ocornut/imgui");
    ImGui::SameLine();
    ImGui::TextLinkOpenURL("FAQ", "https://github.com/ocornut/imgui/blob/master/docs/FAQ.md");
    ImGui::SameLine();
    ImGui::TextLinkOpenURL("Wiki", "https://github.com/ocornut/imgui/wiki");
    ImGui::SameLine();
    ImGui::TextLinkOpenURL("Extensions", "https://github.com/ocornut/imgui/wiki/Useful-Extensions");
    ImGui::SameLine();
    ImGui::TextLinkOpenURL("Releases", "https://github.com/ocornut/imgui/releases");
    ImGui::SameLine();
    ImGui::TextLinkOpenURL("Funding", "https://github.com/ocornut/imgui/wiki/Funding");

    ImGui::Separator();
    ImGui::Text("(c) 2014-2025 Omar Cornut");
    ImGui::Text("Developed by Omar Cornut and all Dear ImGui contributors.");
    ImGui::Text("Dear ImGui is licensed under the MIT License, see LICENSE for more information.");
    ImGui::Text("If your company uses this, please consider funding the project.");

    static bool show_config_info = false;
    ImGui::Checkbox("Config/Build Information", &show_config_info);
    if (show_config_info)
    {
        ImGuiIO& io = ImGui::GetIO();
        ImGuiStyle& style = ImGui::GetStyle();

        bool copy_to_clipboard = ImGui::Button("Copy to clipboard");
        ImVec2 child_size = ImVec2(0, ImGui::GetTextLineHeightWithSpacing() * 18);
        ImGui::BeginChild(ImGui::GetID("cfg_infos"), child_size, ImGuiChildFlags_FrameStyle);
        if (copy_to_clipboard)
        {
            ImGui::LogToClipboard();
            ImGui::LogText("```cpp\n"); // Back quotes will make text appears without formatting when pasting on GitHub
        }

        ImGui::Text("Dear ImGui %s (%d)", IMGUI_VERSION, IMGUI_VERSION_NUM);
        ImGui::Separator();
        ImGui::Text("sizeof(size_t): %d, sizeof(ImDrawIdx): %d, sizeof(ImDrawVert): %d", (int)sizeof(size_t), (int)sizeof(ImDrawIdx), (int)sizeof(ImDrawVert));
        ImGui::Text("define: __cplusplus=%d", (int)__cplusplus);
#ifdef IMGUI_ENABLE_TEST_ENGINE
        ImGui::Text("define: IMGUI_ENABLE_TEST_ENGINE");
#endif
#ifdef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_OBSOLETE_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_WIN32_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_WIN32_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_DEFAULT_SHELL_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_DEFAULT_SHELL_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_FILE_FUNCTIONS
        ImGui::Text("define: IMGUI_DISABLE_FILE_FUNCTIONS");
#endif
#ifdef IMGUI_DISABLE_DEFAULT_ALLOCATORS
        ImGui::Text("define: IMGUI_DISABLE_DEFAULT_ALLOCATORS");
#endif
#ifdef IMGUI_USE_BGRA_PACKED_COLOR
        ImGui::Text("define: IMGUI_USE_BGRA_PACKED_COLOR");
#endif
#ifdef _WIN32
        ImGui::Text("define: _WIN32");
#endif
#ifdef _WIN64
        ImGui::Text("define: _WIN64");
#endif
#ifdef __linux__
        ImGui::Text("define: __linux__");
#endif
#ifdef __APPLE__
        ImGui::Text("define: __APPLE__");
#endif
#ifdef _MSC_VER
        ImGui::Text("define: _MSC_VER=%d", _MSC_VER);
#endif
#ifdef _MSVC_LANG
        ImGui::Text("define: _MSVC_LANG=%d", (int)_MSVC_LANG);
#endif
#ifdef __MINGW32__
        ImGui::Text("define: __MINGW32__");
#endif
#ifdef __MINGW64__
        ImGui::Text("define: __MINGW64__");
#endif
#ifdef __GNUC__
        ImGui::Text("define: __GNUC__=%d", (int)__GNUC__);
#endif
#ifdef __clang_version__
        ImGui::Text("define: __clang_version__=%s", __clang_version__);
#endif
#ifdef __EMSCRIPTEN__
        ImGui::Text("define: __EMSCRIPTEN__");
        ImGui::Text("Emscripten: %d.%d.%d", __EMSCRIPTEN_major__, __EMSCRIPTEN_minor__, __EMSCRIPTEN_tiny__);
#endif
        ImGui::Separator();
        ImGui::Text("io.BackendPlatformName: %s", io.BackendPlatformName ? io.BackendPlatformName : "NULL");
        ImGui::Text("io.BackendRendererName: %s", io.BackendRendererName ? io.BackendRendererName : "NULL");
        ImGui::Text("io.ConfigFlags: 0x%08X", io.ConfigFlags);
        if (io.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard)        ImGui::Text(" NavEnableKeyboard");
        if (io.ConfigFlags & ImGuiConfigFlags_NavEnableGamepad)         ImGui::Text(" NavEnableGamepad");
        if (io.ConfigFlags & ImGuiConfigFlags_NoMouse)                  ImGui::Text(" NoMouse");
        if (io.ConfigFlags & ImGuiConfigFlags_NoMouseCursorChange)      ImGui::Text(" NoMouseCursorChange");
        if (io.ConfigFlags & ImGuiConfigFlags_NoKeyboard)               ImGui::Text(" NoKeyboard");
        if (io.MouseDrawCursor)                                         ImGui::Text("io.MouseDrawCursor");
        if (io.ConfigMacOSXBehaviors)                                   ImGui::Text("io.ConfigMacOSXBehaviors");
        if (io.ConfigNavMoveSetMousePos)                                ImGui::Text("io.ConfigNavMoveSetMousePos");
        if (io.ConfigNavCaptureKeyboard)                                ImGui::Text("io.ConfigNavCaptureKeyboard");
        if (io.ConfigInputTextCursorBlink)                              ImGui::Text("io.ConfigInputTextCursorBlink");
        if (io.ConfigWindowsResizeFromEdges)                            ImGui::Text("io.ConfigWindowsResizeFromEdges");
        if (io.ConfigWindowsMoveFromTitleBarOnly)                       ImGui::Text("io.ConfigWindowsMoveFromTitleBarOnly");
        if (io.ConfigMemoryCompactTimer >= 0.0f)                        ImGui::Text("io.ConfigMemoryCompactTimer = %.1f", io.ConfigMemoryCompactTimer);
        ImGui::Text("io.BackendFlags: 0x%08X", io.BackendFlags);
        if (io.BackendFlags & ImGuiBackendFlags_HasGamepad)             ImGui::Text(" HasGamepad");
        if (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors)        ImGui::Text(" HasMouseCursors");
        if (io.BackendFlags & ImGuiBackendFlags_HasSetMousePos)         ImGui::Text(" HasSetMousePos");
        if (io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset)   ImGui::Text(" RendererHasVtxOffset");
        if (io.BackendFlags & ImGuiBackendFlags_RendererHasTextures)    ImGui::Text(" RendererHasTextures");
        ImGui::Separator();
        ImGui::Text("io.Fonts: %d fonts, Flags: 0x%08X, TexSize: %d,%d", io.Fonts->Fonts.Size, io.Fonts->Flags, io.Fonts->TexData->Width, io.Fonts->TexData->Height);
        ImGui::Text("io.Fonts->FontLoaderName: %s", io.Fonts->FontLoaderName ? io.Fonts->FontLoaderName : "NULL");
        ImGui::Text("io.DisplaySize: %.2f,%.2f", io.DisplaySize.x, io.DisplaySize.y);
        ImGui::Text("io.DisplayFramebufferScale: %.2f,%.2f", io.DisplayFramebufferScale.x, io.DisplayFramebufferScale.y);
        ImGui::Separator();
        ImGui::Text("style.WindowPadding: %.2f,%.2f", style.WindowPadding.x, style.WindowPadding.y);
        ImGui::Text("style.WindowBorderSize: %.2f", style.WindowBorderSize);
        ImGui::Text("style.FramePadding: %.2f,%.2f", style.FramePadding.x, style.FramePadding.y);
        ImGui::Text("style.FrameRounding: %.2f", style.FrameRounding);
        ImGui::Text("style.FrameBorderSize: %.2f", style.FrameBorderSize);
        ImGui::Text("style.ItemSpacing: %.2f,%.2f", style.ItemSpacing.x, style.ItemSpacing.y);
        ImGui::Text("style.ItemInnerSpacing: %.2f,%.2f", style.ItemInnerSpacing.x, style.ItemInnerSpacing.y);

        if (copy_to_clipboard)
        {
            ImGui::LogText("\n```\n");
            ImGui::LogFinish();
        }
        ImGui::EndChild();
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Style Editor / ShowStyleEditor()
//-----------------------------------------------------------------------------
// - ShowStyleSelector()
// - ShowStyleEditor()
//-----------------------------------------------------------------------------

// Demo helper function to select among default colors. See ShowStyleEditor() for more advanced options.
bool ImGui::ShowStyleSelector(const char* label)
{
    // FIXME: This is a bit tricky to get right as style are functions, they don't register a name nor the fact that one is active.
    // So we keep track of last active one among our limited selection.
    static int style_idx = -1;
    const char* style_names[] = { "Dark", "Light", "Classic" };
    bool ret = false;
    if (ImGui::BeginCombo(label, (style_idx >= 0 && style_idx < IM_ARRAYSIZE(style_names)) ? style_names[style_idx] : ""))
    {
        for (int n = 0; n < IM_ARRAYSIZE(style_names); n++)
        {
            if (ImGui::Selectable(style_names[n], style_idx == n, ImGuiSelectableFlags_SelectOnNav))
            {
                style_idx = n;
                ret = true;
                switch (style_idx)
                {
                case 0: ImGui::StyleColorsDark(); break;
                case 1: ImGui::StyleColorsLight(); break;
                case 2: ImGui::StyleColorsClassic(); break;
                }
            }
            else if (style_idx == n)
                ImGui::SetItemDefaultFocus();
        }
        ImGui::EndCombo();
    }
    return ret;
}

static const char* GetTreeLinesFlagsName(ImGuiTreeNodeFlags flags)
{
    if (flags == ImGuiTreeNodeFlags_DrawLinesNone) return "DrawLinesNone";
    if (flags == ImGuiTreeNodeFlags_DrawLinesFull) return "DrawLinesFull";
    if (flags == ImGuiTreeNodeFlags_DrawLinesToNodes) return "DrawLinesToNodes";
    return "";
}

// We omit the ImGui:: prefix in this function, as we don't expect user to be copy and pasting this code.
void ImGui::ShowStyleEditor(ImGuiStyle* ref)
{
    IMGUI_DEMO_MARKER("Tools/Style Editor");
    // You can pass in a reference ImGuiStyle structure to compare to, revert to and save to
    // (without a reference style pointer, we will use one compared locally as a reference)
    ImGuiStyle& style = GetStyle();
    static ImGuiStyle ref_saved_style;

    // Default to using internal storage as reference
    static bool init = true;
    if (init && ref == NULL)
        ref_saved_style = style;
    init = false;
    if (ref == NULL)
        ref = &ref_saved_style;

    PushItemWidth(GetWindowWidth() * 0.50f);

    {
        // General
        SeparatorText("General");
        if ((GetIO().BackendFlags & ImGuiBackendFlags_RendererHasTextures) == 0)
        {
            BulletText("Warning: Font scaling will NOT be smooth, because\nImGuiBackendFlags_RendererHasTextures is not set!");
            BulletText("For instructions, see:");
            SameLine();
            TextLinkOpenURL("docs/BACKENDS.md", "https://github.com/ocornut/imgui/blob/master/docs/BACKENDS.md");
        }

        if (ShowStyleSelector("Colors##Selector"))
            ref_saved_style = style;
        ShowFontSelector("Fonts##Selector");
        if (DragFloat("FontSizeBase", &style.FontSizeBase, 0.20f, 5.0f, 100.0f, "%.0f"))
            style._NextFrameFontSizeBase = style.FontSizeBase; // FIXME: Temporary hack until we finish remaining work.
        SameLine(0.0f, 0.0f); Text(" (out %.2f)", GetFontSize());
        DragFloat("FontScaleMain", &style.FontScaleMain, 0.02f, 0.5f, 4.0f);
        //BeginDisabled(GetIO().ConfigDpiScaleFonts);
        DragFloat("FontScaleDpi", &style.FontScaleDpi, 0.02f, 0.5f, 4.0f);
        //SetItemTooltip("When io.ConfigDpiScaleFonts is set, this value is automatically overwritten.");
        //EndDisabled();

        // Simplified Settings (expose floating-pointer border sizes as boolean representing 0.0f or 1.0f)
        if (SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f"))
            style.GrabRounding = style.FrameRounding; // Make GrabRounding always the same value as FrameRounding
        { bool border = (style.WindowBorderSize > 0.0f); if (Checkbox("WindowBorder", &border)) { style.WindowBorderSize = border ? 1.0f : 0.0f; } }
        SameLine();
        { bool border = (style.FrameBorderSize > 0.0f);  if (Checkbox("FrameBorder", &border)) { style.FrameBorderSize = border ? 1.0f : 0.0f; } }
        SameLine();
        { bool border = (style.PopupBorderSize > 0.0f);  if (Checkbox("PopupBorder", &border)) { style.PopupBorderSize = border ? 1.0f : 0.0f; } }
    }

    // Save/Revert button
    if (Button("Save Ref"))
        *ref = ref_saved_style = style;
    SameLine();
    if (Button("Revert Ref"))
        style = *ref;
    SameLine();
    HelpMarker(
        "Save/Revert in local non-persistent storage. Default Colors definition are not affected. "
        "Use \"Export\" below to save them somewhere.");

    SeparatorText("Details");
    if (BeginTabBar("##tabs", ImGuiTabBarFlags_None))
    {
        if (BeginTabItem("Sizes"))
        {
            SeparatorText("Main");
            SliderFloat2("WindowPadding", (float*)&style.WindowPadding, 0.0f, 20.0f, "%.0f");
            SliderFloat2("FramePadding", (float*)&style.FramePadding, 0.0f, 20.0f, "%.0f");
            SliderFloat2("ItemSpacing", (float*)&style.ItemSpacing, 0.0f, 20.0f, "%.0f");
            SliderFloat2("ItemInnerSpacing", (float*)&style.ItemInnerSpacing, 0.0f, 20.0f, "%.0f");
            SliderFloat2("TouchExtraPadding", (float*)&style.TouchExtraPadding, 0.0f, 10.0f, "%.0f");
            SliderFloat("IndentSpacing", &style.IndentSpacing, 0.0f, 30.0f, "%.0f");
            SliderFloat("GrabMinSize", &style.GrabMinSize, 1.0f, 20.0f, "%.0f");

            SeparatorText("Borders");
            SliderFloat("WindowBorderSize", &style.WindowBorderSize, 0.0f, 1.0f, "%.0f");
            SliderFloat("ChildBorderSize", &style.ChildBorderSize, 0.0f, 1.0f, "%.0f");
            SliderFloat("PopupBorderSize", &style.PopupBorderSize, 0.0f, 1.0f, "%.0f");
            SliderFloat("FrameBorderSize", &style.FrameBorderSize, 0.0f, 1.0f, "%.0f");

            SeparatorText("Rounding");
            SliderFloat("WindowRounding", &style.WindowRounding, 0.0f, 12.0f, "%.0f");
            SliderFloat("ChildRounding", &style.ChildRounding, 0.0f, 12.0f, "%.0f");
            SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f");
            SliderFloat("PopupRounding", &style.PopupRounding, 0.0f, 12.0f, "%.0f");
            SliderFloat("GrabRounding", &style.GrabRounding, 0.0f, 12.0f, "%.0f");

            SeparatorText("Scrollbar");
            SliderFloat("ScrollbarSize", &style.ScrollbarSize, 1.0f, 20.0f, "%.0f");
            SliderFloat("ScrollbarRounding", &style.ScrollbarRounding, 0.0f, 12.0f, "%.0f");
            SliderFloat("ScrollbarPadding", &style.ScrollbarPadding, 0.0f, 10.0f, "%.0f");

            SeparatorText("Tabs");
            SliderFloat("TabBorderSize", &style.TabBorderSize, 0.0f, 1.0f, "%.0f");
            SliderFloat("TabBarBorderSize", &style.TabBarBorderSize, 0.0f, 2.0f, "%.0f");
            SliderFloat("TabBarOverlineSize", &style.TabBarOverlineSize, 0.0f, 3.0f, "%.0f");
            SameLine(); HelpMarker("Overline is only drawn over the selected tab when ImGuiTabBarFlags_DrawSelectedOverline is set.");
            DragFloat("TabMinWidthBase", &style.TabMinWidthBase, 0.5f, 1.0f, 500.0f, "%.0f");
            DragFloat("TabMinWidthShrink", &style.TabMinWidthShrink, 0.5f, 1.0f, 500.0f, "%0.f");
            DragFloat("TabCloseButtonMinWidthSelected", &style.TabCloseButtonMinWidthSelected, 0.5f, -1.0f, 100.0f, (style.TabCloseButtonMinWidthSelected < 0.0f) ? "%.0f (Always)" : "%.0f");
            DragFloat("TabCloseButtonMinWidthUnselected", &style.TabCloseButtonMinWidthUnselected, 0.5f, -1.0f, 100.0f, (style.TabCloseButtonMinWidthUnselected < 0.0f) ? "%.0f (Always)" : "%.0f");
            SliderFloat("TabRounding", &style.TabRounding, 0.0f, 12.0f, "%.0f");

            SeparatorText("Tables");
            SliderFloat2("CellPadding", (float*)&style.CellPadding, 0.0f, 20.0f, "%.0f");
            SliderAngle("TableAngledHeadersAngle", &style.TableAngledHeadersAngle, -50.0f, +50.0f);
            SliderFloat2("TableAngledHeadersTextAlign", (float*)&style.TableAngledHeadersTextAlign, 0.0f, 1.0f, "%.2f");

            SeparatorText("Trees");
            bool combo_open = BeginCombo("TreeLinesFlags", GetTreeLinesFlagsName(style.TreeLinesFlags));
            SameLine();
            HelpMarker("[Experimental] Tree lines may not work in all situations (e.g. using a clipper) and may incurs slight traversal overhead.\n\nImGuiTreeNodeFlags_DrawLinesFull is faster than ImGuiTreeNodeFlags_DrawLinesToNode.");
            if (combo_open)
            {
                const ImGuiTreeNodeFlags options[] = { ImGuiTreeNodeFlags_DrawLinesNone, ImGuiTreeNodeFlags_DrawLinesFull, ImGuiTreeNodeFlags_DrawLinesToNodes };
                for (ImGuiTreeNodeFlags option : options)
                    if (Selectable(GetTreeLinesFlagsName(option), style.TreeLinesFlags == option))
                        style.TreeLinesFlags = option;
                EndCombo();
            }
            SliderFloat("TreeLinesSize", &style.TreeLinesSize, 0.0f, 2.0f, "%.0f");
            SliderFloat("TreeLinesRounding", &style.TreeLinesRounding, 0.0f, 12.0f, "%.0f");

            SeparatorText("Windows");
            SliderFloat2("WindowTitleAlign", (float*)&style.WindowTitleAlign, 0.0f, 1.0f, "%.2f");
            SliderFloat("WindowBorderHoverPadding", &style.WindowBorderHoverPadding, 1.0f, 20.0f, "%.0f");
            int window_menu_button_position = style.WindowMenuButtonPosition + 1;
            if (Combo("WindowMenuButtonPosition", (int*)&window_menu_button_position, "None\0Left\0Right\0"))
                style.WindowMenuButtonPosition = (ImGuiDir)(window_menu_button_position - 1);

            SeparatorText("Widgets");
            Combo("ColorButtonPosition", (int*)&style.ColorButtonPosition, "Left\0Right\0");
            SliderFloat2("ButtonTextAlign", (float*)&style.ButtonTextAlign, 0.0f, 1.0f, "%.2f");
            SameLine(); HelpMarker("Alignment applies when a button is larger than its text content.");
            SliderFloat2("SelectableTextAlign", (float*)&style.SelectableTextAlign, 0.0f, 1.0f, "%.2f");
            SameLine(); HelpMarker("Alignment applies when a selectable is larger than its text content.");
            SliderFloat("SeparatorTextBorderSize", &style.SeparatorTextBorderSize, 0.0f, 10.0f, "%.0f");
            SliderFloat2("SeparatorTextAlign", (float*)&style.SeparatorTextAlign, 0.0f, 1.0f, "%.2f");
            SliderFloat2("SeparatorTextPadding", (float*)&style.SeparatorTextPadding, 0.0f, 40.0f, "%.0f");
            SliderFloat("LogSliderDeadzone", &style.LogSliderDeadzone, 0.0f, 12.0f, "%.0f");
            SliderFloat("ImageBorderSize", &style.ImageBorderSize, 0.0f, 1.0f, "%.0f");

            SeparatorText("Tooltips");
            for (int n = 0; n < 2; n++)
                if (TreeNodeEx(n == 0 ? "HoverFlagsForTooltipMouse" : "HoverFlagsForTooltipNav"))
                {
                    ImGuiHoveredFlags* p = (n == 0) ? &style.HoverFlagsForTooltipMouse : &style.HoverFlagsForTooltipNav;
                    CheckboxFlags("ImGuiHoveredFlags_DelayNone", p, ImGuiHoveredFlags_DelayNone);
                    CheckboxFlags("ImGuiHoveredFlags_DelayShort", p, ImGuiHoveredFlags_DelayShort);
                    CheckboxFlags("ImGuiHoveredFlags_DelayNormal", p, ImGuiHoveredFlags_DelayNormal);
                    CheckboxFlags("ImGuiHoveredFlags_Stationary", p, ImGuiHoveredFlags_Stationary);
                    CheckboxFlags("ImGuiHoveredFlags_NoSharedDelay", p, ImGuiHoveredFlags_NoSharedDelay);
                    TreePop();
                }

            SeparatorText("Misc");
            SliderFloat2("DisplayWindowPadding", (float*)&style.DisplayWindowPadding, 0.0f, 30.0f, "%.0f"); SameLine(); HelpMarker("Apply to regular windows: amount which we enforce to keep visible when moving near edges of your screen.");
            SliderFloat2("DisplaySafeAreaPadding", (float*)&style.DisplaySafeAreaPadding, 0.0f, 30.0f, "%.0f"); SameLine(); HelpMarker("Apply to every windows, menus, popups, tooltips: amount where we avoid displaying contents. Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured).");

            EndTabItem();
        }

        if (BeginTabItem("Colors"))
        {
            static int output_dest = 0;
            static bool output_only_modified = true;
            if (Button("Export"))
            {
                if (output_dest == 0)
                    LogToClipboard();
                else
                    LogToTTY();
                LogText("ImVec4* colors = GetStyle().Colors;" IM_NEWLINE);
                for (int i = 0; i < ImGuiCol_COUNT; i++)
                {
                    const ImVec4& col = style.Colors[i];
                    const char* name = GetStyleColorName(i);
                    if (!output_only_modified || memcmp(&col, &ref->Colors[i], sizeof(ImVec4)) != 0)
                        LogText("colors[ImGuiCol_%s]%*s= ImVec4(%.2ff, %.2ff, %.2ff, %.2ff);" IM_NEWLINE,
                            name, 23 - (int)strlen(name), "", col.x, col.y, col.z, col.w);
                }
                LogFinish();
            }
            SameLine(); SetNextItemWidth(120); Combo("##output_type", &output_dest, "To Clipboard\0To TTY\0");
            SameLine(); Checkbox("Only Modified Colors", &output_only_modified);

            static ImGuiTextFilter filter;
            filter.Draw("Filter colors", GetFontSize() * 16);

            static ImGuiColorEditFlags alpha_flags = 0;
            if (RadioButton("Opaque", alpha_flags == ImGuiColorEditFlags_AlphaOpaque))       { alpha_flags = ImGuiColorEditFlags_AlphaOpaque; } SameLine();
            if (RadioButton("Alpha",  alpha_flags == ImGuiColorEditFlags_None))              { alpha_flags = ImGuiColorEditFlags_None; } SameLine();
            if (RadioButton("Both",   alpha_flags == ImGuiColorEditFlags_AlphaPreviewHalf))  { alpha_flags = ImGuiColorEditFlags_AlphaPreviewHalf; } SameLine();
            HelpMarker(
                "In the color list:\n"
                "Left-click on color square to open color picker,\n"
                "Right-click to open edit options menu.");

            SetNextWindowSizeConstraints(ImVec2(0.0f, GetTextLineHeightWithSpacing() * 10), ImVec2(FLT_MAX, FLT_MAX));
            BeginChild("##colors", ImVec2(0, 0), ImGuiChildFlags_Borders | ImGuiChildFlags_NavFlattened, ImGuiWindowFlags_AlwaysVerticalScrollbar | ImGuiWindowFlags_AlwaysHorizontalScrollbar);
            PushItemWidth(GetFontSize() * -12);
            for (int i = 0; i < ImGuiCol_COUNT; i++)
            {
                const char* name = GetStyleColorName(i);
                if (!filter.PassFilter(name))
                    continue;
                PushID(i);
#ifndef IMGUI_DISABLE_DEBUG_TOOLS
                if (Button("?"))
                    DebugFlashStyleColor((ImGuiCol)i);
                SetItemTooltip("Flash given color to identify places where it is used.");
                SameLine();
#endif
                ColorEdit4("##color", (float*)&style.Colors[i], ImGuiColorEditFlags_AlphaBar | alpha_flags);
                if (memcmp(&style.Colors[i], &ref->Colors[i], sizeof(ImVec4)) != 0)
                {
                    // Tips: in a real user application, you may want to merge and use an icon font into the main font,
                    // so instead of "Save"/"Revert" you'd use icons!
                    // Read the FAQ and docs/FONTS.md about using icon fonts. It's really easy and super convenient!
                    SameLine(0.0f, style.ItemInnerSpacing.x); if (Button("Save")) { ref->Colors[i] = style.Colors[i]; }
                    SameLine(0.0f, style.ItemInnerSpacing.x); if (Button("Revert")) { style.Colors[i] = ref->Colors[i]; }
                }
                SameLine(0.0f, style.ItemInnerSpacing.x);
                TextUnformatted(name);
                PopID();
            }
            PopItemWidth();
            EndChild();

            EndTabItem();
        }

        if (BeginTabItem("Fonts"))
        {
            ImGuiIO& io = GetIO();
            ImFontAtlas* atlas = io.Fonts;
            ShowFontAtlas(atlas);

            // Post-baking font scaling. Note that this is NOT the nice way of scaling fonts, read below.
            // (we enforce hard clamping manually as by default DragFloat/SliderFloat allows CTRL+Click text to get out of bounds).
            /*
            SeparatorText("Legacy Scaling");
            const float MIN_SCALE = 0.3f;
            const float MAX_SCALE = 2.0f;
            HelpMarker(
                "Those are old settings provided for convenience.\n"
                "However, the _correct_ way of scaling your UI is currently to reload your font at the designed size, "
                "rebuild the font atlas, and call style.ScaleAllSizes() on a reference ImGuiStyle structure.\n"
                "Using those settings here will give you poor quality results.");
            PushItemWidth(GetFontSize() * 8);
            DragFloat("global scale", &io.FontGlobalScale, 0.005f, MIN_SCALE, MAX_SCALE, "%.2f", ImGuiSliderFlags_AlwaysClamp); // Scale everything
            //static float window_scale = 1.0f;
            //if (DragFloat("window scale", &window_scale, 0.005f, MIN_SCALE, MAX_SCALE, "%.2f", ImGuiSliderFlags_AlwaysClamp)) // Scale only this window
            //    SetWindowFontScale(window_scale);
            PopItemWidth();
            */

            EndTabItem();
        }

        if (BeginTabItem("Rendering"))
        {
            Checkbox("Anti-aliased lines", &style.AntiAliasedLines);
            SameLine();
            HelpMarker("When disabling anti-aliasing lines, you'll probably want to disable borders in your style as well.");

            Checkbox("Anti-aliased lines use texture", &style.AntiAliasedLinesUseTex);
            SameLine();
            HelpMarker("Faster lines using texture data. Require backend to render with bilinear filtering (not point/nearest filtering).");

            Checkbox("Anti-aliased fill", &style.AntiAliasedFill);
            PushItemWidth(GetFontSize() * 8);
            DragFloat("Curve Tessellation Tolerance", &style.CurveTessellationTol, 0.02f, 0.10f, 10.0f, "%.2f");
            if (style.CurveTessellationTol < 0.10f) style.CurveTessellationTol = 0.10f;

            // When editing the "Circle Segment Max Error" value, draw a preview of its effect on auto-tessellated circles.
            DragFloat("Circle Tessellation Max Error", &style.CircleTessellationMaxError , 0.005f, 0.10f, 5.0f, "%.2f", ImGuiSliderFlags_AlwaysClamp);
            const bool show_samples = IsItemActive();
            if (show_samples)
                SetNextWindowPos(GetCursorScreenPos());
            if (show_samples && BeginTooltip())
            {
                TextUnformatted("(R = radius, N = approx number of segments)");
                Spacing();
                ImDrawList* draw_list = GetWindowDrawList();
                const float min_widget_width = CalcTextSize("R: MMM\nN: MMM").x;
                for (int n = 0; n < 8; n++)
                {
                    const float RAD_MIN = 5.0f;
                    const float RAD_MAX = 70.0f;
                    const float rad = RAD_MIN + (RAD_MAX - RAD_MIN) * (float)n / (8.0f - 1.0f);

                    BeginGroup();

                    // N is not always exact here due to how PathArcTo() function work internally
                    Text("R: %.f\nN: %d", rad, draw_list->_CalcCircleAutoSegmentCount(rad));

                    const float canvas_width = IM_MAX(min_widget_width, rad * 2.0f);
                    const float offset_x     = floorf(canvas_width * 0.5f);
                    const float offset_y     = floorf(RAD_MAX);

                    const ImVec2 p1 = GetCursorScreenPos();
                    draw_list->AddCircle(ImVec2(p1.x + offset_x, p1.y + offset_y), rad, GetColorU32(ImGuiCol_Text));
                    Dummy(ImVec2(canvas_width, RAD_MAX * 2));

                    /*
                    const ImVec2 p2 = GetCursorScreenPos();
                    draw_list->AddCircleFilled(ImVec2(p2.x + offset_x, p2.y + offset_y), rad, GetColorU32(ImGuiCol_Text));
                    Dummy(ImVec2(canvas_width, RAD_MAX * 2));
                    */

                    EndGroup();
                    SameLine();
                }
                EndTooltip();
            }
            SameLine();
            HelpMarker("When drawing circle primitives with \"num_segments == 0\" tessellation will be calculated automatically.");

            DragFloat("Global Alpha", &style.Alpha, 0.005f, 0.20f, 1.0f, "%.2f"); // Not exposing zero here so user doesn't "lose" the UI (zero alpha clips all widgets). But application code could have a toggle to switch between zero and non-zero.
            DragFloat("Disabled Alpha", &style.DisabledAlpha, 0.005f, 0.0f, 1.0f, "%.2f"); SameLine(); HelpMarker("Additional alpha multiplier for disabled items (multiply over current value of Alpha).");
            PopItemWidth();

            EndTabItem();
        }

        EndTabBar();
    }
    PopItemWidth();
}

//-----------------------------------------------------------------------------
// [SECTION] User Guide / ShowUserGuide()
//-----------------------------------------------------------------------------

// We omit the ImGui:: prefix in this function, as we don't expect user to be copy and pasting this code.
void ImGui::ShowUserGuide()
{
    ImGuiIO& io = GetIO();
    BulletText("Double-click on title bar to collapse window.");
    BulletText(
        "Click and drag on lower corner to resize window\n"
        "(double-click to auto fit window to its contents).");
    BulletText("CTRL+Click on a slider or drag box to input value as text.");
    BulletText("TAB/SHIFT+TAB to cycle through keyboard editable fields.");
    BulletText("CTRL+Tab to select a window.");
    if (io.FontAllowUserScaling)
        BulletText("CTRL+Mouse Wheel to zoom window contents.");
    BulletText("While inputting text:\n");
    Indent();
    BulletText("CTRL+Left/Right to word jump.");
    BulletText("CTRL+A or double-click to select all.");
    BulletText("CTRL+X/C/V to use clipboard cut/copy/paste.");
    BulletText("CTRL+Z to undo, CTRL+Y/CTRL+SHIFT+Z to redo.");
    BulletText("ESCAPE to revert.");
    Unindent();
    BulletText("With keyboard navigation enabled:");
    Indent();
    BulletText("Arrow keys to navigate.");
    BulletText("Space to activate a widget.");
    BulletText("Return to input text into a widget.");
    BulletText("Escape to deactivate a widget, close popup, exit child window.");
    BulletText("Alt to jump to the menu layer of a window.");
    Unindent();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Main Menu Bar / ShowExampleAppMainMenuBar()
//-----------------------------------------------------------------------------
// - ShowExampleAppMainMenuBar()
// - ShowExampleMenuFile()
//-----------------------------------------------------------------------------

// Demonstrate creating a "main" fullscreen menu bar and populating it.
// Note the difference between BeginMainMenuBar() and BeginMenuBar():
// - BeginMenuBar() = menu-bar inside current window (which needs the ImGuiWindowFlags_MenuBar flag!)
// - BeginMainMenuBar() = helper to create menu-bar-sized window at the top of the main viewport + call BeginMenuBar() into it.
static void ShowExampleAppMainMenuBar()
{
    if (ImGui::BeginMainMenuBar())
    {
        if (ImGui::BeginMenu("File"))
        {
            ShowExampleMenuFile();
            ImGui::EndMenu();
        }
        if (ImGui::BeginMenu("Edit"))
        {
            if (ImGui::MenuItem("Undo", "CTRL+Z")) {}
            if (ImGui::MenuItem("Redo", "CTRL+Y", false, false)) {} // Disabled item
            ImGui::Separator();
            if (ImGui::MenuItem("Cut", "CTRL+X")) {}
            if (ImGui::MenuItem("Copy", "CTRL+C")) {}
            if (ImGui::MenuItem("Paste", "CTRL+V")) {}
            ImGui::EndMenu();
        }
        ImGui::EndMainMenuBar();
    }
}

// Note that shortcuts are currently provided for display only
// (future version will add explicit flags to BeginMenu() to request processing shortcuts)
static void ShowExampleMenuFile()
{
    IMGUI_DEMO_MARKER("Examples/Menu");
    ImGui::MenuItem("(demo menu)", NULL, false, false);
    if (ImGui::MenuItem("New")) {}
    if (ImGui::MenuItem("Open", "Ctrl+O")) {}
    if (ImGui::BeginMenu("Open Recent"))
    {
        ImGui::MenuItem("fish_hat.c");
        ImGui::MenuItem("fish_hat.inl");
        ImGui::MenuItem("fish_hat.h");
        if (ImGui::BeginMenu("More.."))
        {
            ImGui::MenuItem("Hello");
            ImGui::MenuItem("Sailor");
            if (ImGui::BeginMenu("Recurse.."))
            {
                ShowExampleMenuFile();
                ImGui::EndMenu();
            }
            ImGui::EndMenu();
        }
        ImGui::EndMenu();
    }
    if (ImGui::MenuItem("Save", "Ctrl+S")) {}
    if (ImGui::MenuItem("Save As..")) {}

    ImGui::Separator();
    IMGUI_DEMO_MARKER("Examples/Menu/Options");
    if (ImGui::BeginMenu("Options"))
    {
        static bool enabled = true;
        ImGui::MenuItem("Enabled", "", &enabled);
        ImGui::BeginChild("child", ImVec2(0, 60), ImGuiChildFlags_Borders);
        for (int i = 0; i < 10; i++)
            ImGui::Text("Scrolling Text %d", i);
        ImGui::EndChild();
        static float f = 0.5f;
        static int n = 0;
        ImGui::SliderFloat("Value", &f, 0.0f, 1.0f);
        ImGui::InputFloat("Input", &f, 0.1f);
        ImGui::Combo("Combo", &n, "Yes\0No\0Maybe\0\0");
        ImGui::EndMenu();
    }

    IMGUI_DEMO_MARKER("Examples/Menu/Colors");
    if (ImGui::BeginMenu("Colors"))
    {
        float sz = ImGui::GetTextLineHeight();
        for (int i = 0; i < ImGuiCol_COUNT; i++)
        {
            const char* name = ImGui::GetStyleColorName((ImGuiCol)i);
            ImVec2 p = ImGui::GetCursorScreenPos();
            ImGui::GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x + sz, p.y + sz), ImGui::GetColorU32((ImGuiCol)i));
            ImGui::Dummy(ImVec2(sz, sz));
            ImGui::SameLine();
            ImGui::MenuItem(name);
        }
        ImGui::EndMenu();
    }

    // Here we demonstrate appending again to the "Options" menu (which we already created above)
    // Of course in this demo it is a little bit silly that this function calls BeginMenu("Options") twice.
    // In a real code-base using it would make senses to use this feature from very different code locations.
    if (ImGui::BeginMenu("Options")) // <-- Append!
    {
        IMGUI_DEMO_MARKER("Examples/Menu/Append to an existing menu");
        static bool b = true;
        ImGui::Checkbox("SomeOption", &b);
        ImGui::EndMenu();
    }

    if (ImGui::BeginMenu("Disabled", false)) // Disabled
    {
        IM_ASSERT(0);
    }
    if (ImGui::MenuItem("Checked", NULL, true)) {}
    ImGui::Separator();
    if (ImGui::MenuItem("Quit", "Alt+F4")) {}
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Debug Console / ShowExampleAppConsole()
//-----------------------------------------------------------------------------

// Demonstrate creating a simple console window, with scrolling, filtering, completion and history.
// For the console example, we are using a more C++ like approach of declaring a class to hold both data and functions.
struct ExampleAppConsole
{
    char                  InputBuf[256];
    ImVector<char*>       Items;
    ImVector<const char*> Commands;
    ImVector<char*>       History;
    int                   HistoryPos;    // -1: new line, 0..History.Size-1 browsing history.
    ImGuiTextFilter       Filter;
    bool                  AutoScroll;
    bool                  ScrollToBottom;

    ExampleAppConsole()
    {
        IMGUI_DEMO_MARKER("Examples/Console");
        ClearLog();
        memset(InputBuf, 0, sizeof(InputBuf));
        HistoryPos = -1;

        // "CLASSIFY" is here to provide the test case where "C"+[tab] completes to "CL" and display multiple matches.
        Commands.push_back("HELP");
        Commands.push_back("HISTORY");
        Commands.push_back("CLEAR");
        Commands.push_back("CLASSIFY");
        AutoScroll = true;
        ScrollToBottom = false;
        AddLog("Welcome to Dear ImGui!");
    }
    ~ExampleAppConsole()
    {
        ClearLog();
        for (int i = 0; i < History.Size; i++)
            ImGui::MemFree(History[i]);
    }

    // Portable helpers
    static int   Stricmp(const char* s1, const char* s2)         { int d; while ((d = toupper(*s2) - toupper(*s1)) == 0 && *s1) { s1++; s2++; } return d; }
    static int   Strnicmp(const char* s1, const char* s2, int n) { int d = 0; while (n > 0 && (d = toupper(*s2) - toupper(*s1)) == 0 && *s1) { s1++; s2++; n--; } return d; }
    static char* Strdup(const char* s)                           { IM_ASSERT(s); size_t len = strlen(s) + 1; void* buf = ImGui::MemAlloc(len); IM_ASSERT(buf); return (char*)memcpy(buf, (const void*)s, len); }
    static void  Strtrim(char* s)                                { char* str_end = s + strlen(s); while (str_end > s && str_end[-1] == ' ') str_end--; *str_end = 0; }

    void    ClearLog()
    {
        for (int i = 0; i < Items.Size; i++)
            ImGui::MemFree(Items[i]);
        Items.clear();
    }

    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)
    {
        // FIXME-OPT
        char buf[1024];
        va_list args;
        va_start(args, fmt);
        vsnprintf(buf, IM_ARRAYSIZE(buf), fmt, args);
        buf[IM_ARRAYSIZE(buf)-1] = 0;
        va_end(args);
        Items.push_back(Strdup(buf));
    }

    void    Draw(const char* title, bool* p_open)
    {
        ImGui::SetNextWindowSize(ImVec2(520, 600), ImGuiCond_FirstUseEver);
        if (!ImGui::Begin(title, p_open))
        {
            ImGui::End();
            return;
        }

        // As a specific feature guaranteed by the library, after calling Begin() the last Item represent the title bar.
        // So e.g. IsItemHovered() will return true when hovering the title bar.
        // Here we create a context menu only available from the title bar.
        if (ImGui::BeginPopupContextItem())
        {
            if (ImGui::MenuItem("Close Console"))
                *p_open = false;
            ImGui::EndPopup();
        }

        ImGui::TextWrapped(
            "This example implements a console with basic coloring, completion (TAB key) and history (Up/Down keys). A more elaborate "
            "implementation may want to store entries along with extra data such as timestamp, emitter, etc.");
        ImGui::TextWrapped("Enter 'HELP' for help.");

        // TODO: display items starting from the bottom

        if (ImGui::SmallButton("Add Debug Text"))  { AddLog("%d some text", Items.Size); AddLog("some more text"); AddLog("display very important message here!"); }
        ImGui::SameLine();
        if (ImGui::SmallButton("Add Debug Error")) { AddLog("[error] something went wrong"); }
        ImGui::SameLine();
        if (ImGui::SmallButton("Clear"))           { ClearLog(); }
        ImGui::SameLine();
        bool copy_to_clipboard = ImGui::SmallButton("Copy");
        //static float t = 0.0f; if (ImGui::GetTime() - t > 0.02f) { t = ImGui::GetTime(); AddLog("Spam %f", t); }

        ImGui::Separator();

        // Options menu
        if (ImGui::BeginPopup("Options"))
        {
            ImGui::Checkbox("Auto-scroll", &AutoScroll);
            ImGui::EndPopup();
        }

        // Options, Filter
        ImGui::SetNextItemShortcut(ImGuiMod_Ctrl | ImGuiKey_O, ImGuiInputFlags_Tooltip);
        if (ImGui::Button("Options"))
            ImGui::OpenPopup("Options");
        ImGui::SameLine();
        Filter.Draw("Filter (\"incl,-excl\") (\"error\")", 180);
        ImGui::Separator();

        // Reserve enough left-over height for 1 separator + 1 input text
        const float footer_height_to_reserve = ImGui::GetStyle().ItemSpacing.y + ImGui::GetFrameHeightWithSpacing();
        if (ImGui::BeginChild("ScrollingRegion", ImVec2(0, -footer_height_to_reserve), ImGuiChildFlags_NavFlattened, ImGuiWindowFlags_HorizontalScrollbar))
        {
            if (ImGui::BeginPopupContextWindow())
            {
                if (ImGui::Selectable("Clear")) ClearLog();
                ImGui::EndPopup();
            }

            // Display every line as a separate entry so we can change their color or add custom widgets.
            // If you only want raw text you can use ImGui::TextUnformatted(log.begin(), log.end());
            // NB- if you have thousands of entries this approach may be too inefficient and may require user-side clipping
            // to only process visible items. The clipper will automatically measure the height of your first item and then
            // "seek" to display only items in the visible area.
            // To use the clipper we can replace your standard loop:
            //      for (int i = 0; i < Items.Size; i++)
            //   With:
            //      ImGuiListClipper clipper;
            //      clipper.Begin(Items.Size);
            //      while (clipper.Step())
            //         for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
            // - That your items are evenly spaced (same height)
            // - That you have cheap random access to your elements (you can access them given their index,
            //   without processing all the ones before)
            // You cannot this code as-is if a filter is active because it breaks the 'cheap random-access' property.
            // We would need random-access on the post-filtered list.
            // A typical application wanting coarse clipping and filtering may want to pre-compute an array of indices
            // or offsets of items that passed the filtering test, recomputing this array when user changes the filter,
            // and appending newly elements as they are inserted. This is left as a task to the user until we can manage
            // to improve this example code!
            // If your items are of variable height:
            // - Split them into same height items would be simpler and facilitate random-seeking into your list.
            // - Consider using manual call to IsRectVisible() and skipping extraneous decoration from your items.
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(4, 1)); // Tighten spacing
            if (copy_to_clipboard)
                ImGui::LogToClipboard();
            for (const char* item : Items)
            {
                if (!Filter.PassFilter(item))
                    continue;

                // Normally you would store more information in your item than just a string.
                // (e.g. make Items[] an array of structure, store color/type etc.)
                ImVec4 color;
                bool has_color = false;
                if (strstr(item, "[error]")) { color = ImVec4(1.0f, 0.4f, 0.4f, 1.0f); has_color = true; }
                else if (strncmp(item, "# ", 2) == 0) { color = ImVec4(1.0f, 0.8f, 0.6f, 1.0f); has_color = true; }
                if (has_color)
                    ImGui::PushStyleColor(ImGuiCol_Text, color);
                ImGui::TextUnformatted(item);
                if (has_color)
                    ImGui::PopStyleColor();
            }
            if (copy_to_clipboard)
                ImGui::LogFinish();

            // Keep up at the bottom of the scroll region if we were already at the bottom at the beginning of the frame.
            // Using a scrollbar or mouse-wheel will take away from the bottom edge.
            if (ScrollToBottom || (AutoScroll && ImGui::GetScrollY() >= ImGui::GetScrollMaxY()))
                ImGui::SetScrollHereY(1.0f);
            ScrollToBottom = false;

            ImGui::PopStyleVar();
        }
        ImGui::EndChild();
        ImGui::Separator();

        // Command-line
        bool reclaim_focus = false;
        ImGuiInputTextFlags input_text_flags = ImGuiInputTextFlags_EnterReturnsTrue | ImGuiInputTextFlags_EscapeClearsAll | ImGuiInputTextFlags_CallbackCompletion | ImGuiInputTextFlags_CallbackHistory;
        if (ImGui::InputText("Input", InputBuf, IM_ARRAYSIZE(InputBuf), input_text_flags, &TextEditCallbackStub, (void*)this))
        {
            char* s = InputBuf;
            Strtrim(s);
            if (s[0])
                ExecCommand(s);
            strcpy(s, "");
            reclaim_focus = true;
        }

        // Auto-focus on window apparition
        ImGui::SetItemDefaultFocus();
        if (reclaim_focus)
            ImGui::SetKeyboardFocusHere(-1); // Auto focus previous widget

        ImGui::End();
    }

    void    ExecCommand(const char* command_line)
    {
        AddLog("# %s\n", command_line);

        // Insert into history. First find match and delete it so it can be pushed to the back.
        // This isn't trying to be smart or optimal.
        HistoryPos = -1;
        for (int i = History.Size - 1; i >= 0; i--)
            if (Stricmp(History[i], command_line) == 0)
            {
                ImGui::MemFree(History[i]);
                History.erase(History.begin() + i);
                break;
            }
        History.push_back(Strdup(command_line));

        // Process command
        if (Stricmp(command_line, "CLEAR") == 0)
        {
            ClearLog();
        }
        else if (Stricmp(command_line, "HELP") == 0)
        {
            AddLog("Commands:");
            for (int i = 0; i < Commands.Size; i++)
                AddLog("- %s", Commands[i]);
        }
        else if (Stricmp(command_line, "HISTORY") == 0)
        {
            int first = History.Size - 10;
            for (int i = first > 0 ? first : 0; i < History.Size; i++)
                AddLog("%3d: %s\n", i, History[i]);
        }
        else
        {
            AddLog("Unknown command: '%s'\n", command_line);
        }

        // On command input, we scroll to bottom even if AutoScroll==false
        ScrollToBottom = true;
    }

    // In C++11 you'd be better off using lambdas for this sort of forwarding callbacks
    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data)
    {
        ExampleAppConsole* console = (ExampleAppConsole*)data->UserData;
        return console->TextEditCallback(data);
    }

    int     TextEditCallback(ImGuiInputTextCallbackData* data)
    {
        //AddLog("cursor: %d, selection: %d-%d", data->CursorPos, data->SelectionStart, data->SelectionEnd);
        switch (data->EventFlag)
        {
        case ImGuiInputTextFlags_CallbackCompletion:
            {
                // Example of TEXT COMPLETION

                // Locate beginning of current word
                const char* word_end = data->Buf + data->CursorPos;
                const char* word_start = word_end;
                while (word_start > data->Buf)
                {
                    const char c = word_start[-1];
                    if (c == ' ' || c == '\t' || c == ',' || c == ';')
                        break;
                    word_start--;
                }

                // Build a list of candidates
                ImVector<const char*> candidates;
                for (int i = 0; i < Commands.Size; i++)
                    if (Strnicmp(Commands[i], word_start, (int)(word_end - word_start)) == 0)
                        candidates.push_back(Commands[i]);

                if (candidates.Size == 0)
                {
                    // No match
                    AddLog("No match for \"%.*s\"!\n", (int)(word_end - word_start), word_start);
                }
                else if (candidates.Size == 1)
                {
                    // Single match. Delete the beginning of the word and replace it entirely so we've got nice casing.
                    data->DeleteChars((int)(word_start - data->Buf), (int)(word_end - word_start));
                    data->InsertChars(data->CursorPos, candidates[0]);
                    data->InsertChars(data->CursorPos, " ");
                }
                else
                {
                    // Multiple matches. Complete as much as we can..
                    // So inputting "C"+Tab will complete to "CL" then display "CLEAR" and "CLASSIFY" as matches.
                    int match_len = (int)(word_end - word_start);
                    for (;;)
                    {
                        int c = 0;
                        bool all_candidates_matches = true;
                        for (int i = 0; i < candidates.Size && all_candidates_matches; i++)
                            if (i == 0)
                                c = toupper(candidates[i][match_len]);
                            else if (c == 0 || c != toupper(candidates[i][match_len]))
                                all_candidates_matches = false;
                        if (!all_candidates_matches)
                            break;
                        match_len++;
                    }

                    if (match_len > 0)
                    {
                        data->DeleteChars((int)(word_start - data->Buf), (int)(word_end - word_start));
                        data->InsertChars(data->CursorPos, candidates[0], candidates[0] + match_len);
                    }

                    // List matches
                    AddLog("Possible matches:\n");
                    for (int i = 0; i < candidates.Size; i++)
                        AddLog("- %s\n", candidates[i]);
                }

                break;
            }
        case ImGuiInputTextFlags_CallbackHistory:
            {
                // Example of HISTORY
                const int prev_history_pos = HistoryPos;
                if (data->EventKey == ImGuiKey_UpArrow)
                {
                    if (HistoryPos == -1)
                        HistoryPos = History.Size - 1;
                    else if (HistoryPos > 0)
                        HistoryPos--;
                }
                else if (data->EventKey == ImGuiKey_DownArrow)
                {
                    if (HistoryPos != -1)
                        if (++HistoryPos >= History.Size)
                            HistoryPos = -1;
                }

                // A better implementation would preserve the data on the current input line along with cursor position.
                if (prev_history_pos != HistoryPos)
                {
                    const char* history_str = (HistoryPos >= 0) ? History[HistoryPos] : "";
                    data->DeleteChars(0, data->BufTextLen);
                    data->InsertChars(0, history_str);
                }
            }
        }
        return 0;
    }
};

static void ShowExampleAppConsole(bool* p_open)
{
    static ExampleAppConsole console;
    console.Draw("Example: Console", p_open);
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Debug Log / ShowExampleAppLog()
//-----------------------------------------------------------------------------

// Usage:
//  static ExampleAppLog my_log;
//  my_log.AddLog("Hello %d world\n", 123);
//  my_log.Draw("title");
struct ExampleAppLog
{
    ImGuiTextBuffer     Buf;
    ImGuiTextFilter     Filter;
    ImVector<int>       LineOffsets; // Index to lines offset. We maintain this with AddLog() calls.
    bool                AutoScroll;  // Keep scrolling if already at the bottom.

    ExampleAppLog()
    {
        AutoScroll = true;
        Clear();
    }

    void    Clear()
    {
        Buf.clear();
        LineOffsets.clear();
        LineOffsets.push_back(0);
    }

    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)
    {
        int old_size = Buf.size();
        va_list args;
        va_start(args, fmt);
        Buf.appendfv(fmt, args);
        va_end(args);
        for (int new_size = Buf.size(); old_size < new_size; old_size++)
            if (Buf[old_size] == '\n')
                LineOffsets.push_back(old_size + 1);
    }

    void    Draw(const char* title, bool* p_open = NULL)
    {
        if (!ImGui::Begin(title, p_open))
        {
            ImGui::End();
            return;
        }

        // Options menu
        if (ImGui::BeginPopup("Options"))
        {
            ImGui::Checkbox("Auto-scroll", &AutoScroll);
            ImGui::EndPopup();
        }

        // Main window
        if (ImGui::Button("Options"))
            ImGui::OpenPopup("Options");
        ImGui::SameLine();
        bool clear = ImGui::Button("Clear");
        ImGui::SameLine();
        bool copy = ImGui::Button("Copy");
        ImGui::SameLine();
        Filter.Draw("Filter", -100.0f);

        ImGui::Separator();

        if (ImGui::BeginChild("scrolling", ImVec2(0, 0), ImGuiChildFlags_None, ImGuiWindowFlags_HorizontalScrollbar))
        {
            if (clear)
                Clear();
            if (copy)
                ImGui::LogToClipboard();

            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
            const char* buf = Buf.begin();
            const char* buf_end = Buf.end();
            if (Filter.IsActive())
            {
                // In this example we don't use the clipper when Filter is enabled.
                // This is because we don't have random access to the result of our filter.
                // A real application processing logs with ten of thousands of entries may want to store the result of
                // search/filter.. especially if the filtering function is not trivial (e.g. reg-exp).
                for (int line_no = 0; line_no < LineOffsets.Size; line_no++)
                {
                    const char* line_start = buf + LineOffsets[line_no];
                    const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;
                    if (Filter.PassFilter(line_start, line_end))
                        ImGui::TextUnformatted(line_start, line_end);
                }
            }
            else
            {
                // The simplest and easy way to display the entire buffer:
                //   ImGui::TextUnformatted(buf_begin, buf_end);
                // And it'll just work. TextUnformatted() has specialization for large blob of text and will fast-forward
                // to skip non-visible lines. Here we instead demonstrate using the clipper to only process lines that are
                // within the visible area.
                // If you have tens of thousands of items and their processing cost is non-negligible, coarse clipping them
                // on your side is recommended. Using ImGuiListClipper requires
                // - A) random access into your data
                // - B) items all being the  same height,
                // both of which we can handle since we have an array pointing to the beginning of each line of text.
                // When using the filter (in the block of code above) we don't have random access into the data to display
                // anymore, which is why we don't use the clipper. Storing or skimming through the search result would make
                // it possible (and would be recommended if you want to search through tens of thousands of entries).
                ImGuiListClipper clipper;
                clipper.Begin(LineOffsets.Size);
                while (clipper.Step())
                {
                    for (int line_no = clipper.DisplayStart; line_no < clipper.DisplayEnd; line_no++)
                    {
                        const char* line_start = buf + LineOffsets[line_no];
                        const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;
                        ImGui::TextUnformatted(line_start, line_end);
                    }
                }
                clipper.End();
            }
            ImGui::PopStyleVar();

            // Keep up at the bottom of the scroll region if we were already at the bottom at the beginning of the frame.
            // Using a scrollbar or mouse-wheel will take away from the bottom edge.
            if (AutoScroll && ImGui::GetScrollY() >= ImGui::GetScrollMaxY())
                ImGui::SetScrollHereY(1.0f);
        }
        ImGui::EndChild();
        ImGui::End();
    }
};

// Demonstrate creating a simple log window with basic filtering.
static void ShowExampleAppLog(bool* p_open)
{
    static ExampleAppLog log;

    // For the demo: add a debug button _BEFORE_ the normal log window contents
    // We take advantage of a rarely used feature: multiple calls to Begin()/End() are appending to the _same_ window.
    // Most of the contents of the window will be added by the log.Draw() call.
    ImGui::SetNextWindowSize(ImVec2(500, 400), ImGuiCond_FirstUseEver);
    ImGui::Begin("Example: Log", p_open);
    IMGUI_DEMO_MARKER("Examples/Log");
    if (ImGui::SmallButton("[Debug] Add 5 entries"))
    {
        static int counter = 0;
        const char* categories[3] = { "info", "warn", "error" };
        const char* words[] = { "Bumfuzzled", "Cattywampus", "Snickersnee", "Abibliophobia", "Absquatulate", "Nincompoop", "Pauciloquent" };
        for (int n = 0; n < 5; n++)
        {
            const char* category = categories[counter % IM_ARRAYSIZE(categories)];
            const char* word = words[counter % IM_ARRAYSIZE(words)];
            log.AddLog("[%05d] [%s] Hello, current time is %.1f, here's a word: '%s'\n",
                ImGui::GetFrameCount(), category, ImGui::GetTime(), word);
            counter++;
        }
    }
    ImGui::End();

    // Actually call in the regular Log helper (which will Begin() into the same window as we just did)
    log.Draw("Example: Log", p_open);
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Simple Layout / ShowExampleAppLayout()
//-----------------------------------------------------------------------------

// Demonstrate create a window with multiple child windows.
static void ShowExampleAppLayout(bool* p_open)
{
    ImGui::SetNextWindowSize(ImVec2(500, 440), ImGuiCond_FirstUseEver);
    if (ImGui::Begin("Example: Simple layout", p_open, ImGuiWindowFlags_MenuBar))
    {
        IMGUI_DEMO_MARKER("Examples/Simple layout");
        if (ImGui::BeginMenuBar())
        {
            if (ImGui::BeginMenu("File"))
            {
                if (ImGui::MenuItem("Close", "Ctrl+W")) { *p_open = false; }
                ImGui::EndMenu();
            }
            ImGui::EndMenuBar();
        }

        // Left
        static int selected = 0;
        {
            ImGui::BeginChild("left pane", ImVec2(150, 0), ImGuiChildFlags_Borders | ImGuiChildFlags_ResizeX);
            for (int i = 0; i < 100; i++)
            {
                char label[128];
                sprintf(label, "MyObject %d", i);
                if (ImGui::Selectable(label, selected == i, ImGuiSelectableFlags_SelectOnNav))
                    selected = i;
            }
            ImGui::EndChild();
        }
        ImGui::SameLine();

        // Right
        {
            ImGui::BeginGroup();
            ImGui::BeginChild("item view", ImVec2(0, -ImGui::GetFrameHeightWithSpacing())); // Leave room for 1 line below us
            ImGui::Text("MyObject: %d", selected);
            ImGui::Separator();
            if (ImGui::BeginTabBar("##Tabs", ImGuiTabBarFlags_None))
            {
                if (ImGui::BeginTabItem("Description"))
                {
                    ImGui::TextWrapped("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ");
                    ImGui::EndTabItem();
                }
                if (ImGui::BeginTabItem("Details"))
                {
                    ImGui::Text("ID: 0123456789");
                    ImGui::EndTabItem();
                }
                ImGui::EndTabBar();
            }
            ImGui::EndChild();
            if (ImGui::Button("Revert")) {}
            ImGui::SameLine();
            if (ImGui::Button("Save")) {}
            ImGui::EndGroup();
        }
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Property Editor / ShowExampleAppPropertyEditor()
//-----------------------------------------------------------------------------
// Some of the interactions are a bit lack-luster:
// - We would want pressing validating or leaving the filter to somehow restore focus.
// - We may want more advanced filtering (child nodes) and clipper support: both will need extra work.
// - We would want to customize some keyboard interactions to easily keyboard navigate between the tree and the properties.
//-----------------------------------------------------------------------------

struct ExampleAppPropertyEditor
{
    ImGuiTextFilter     Filter;
    ExampleTreeNode*    VisibleNode = NULL;

    void Draw(ExampleTreeNode* root_node)
    {
        // Left side: draw tree
        // - Currently using a table to benefit from RowBg feature
        if (ImGui::BeginChild("##tree", ImVec2(300, 0), ImGuiChildFlags_ResizeX | ImGuiChildFlags_Borders | ImGuiChildFlags_NavFlattened))
        {
            ImGui::SetNextItemWidth(-FLT_MIN);
            ImGui::SetNextItemShortcut(ImGuiMod_Ctrl | ImGuiKey_F, ImGuiInputFlags_Tooltip);
            ImGui::PushItemFlag(ImGuiItemFlags_NoNavDefaultFocus, true);
            if (ImGui::InputTextWithHint("##Filter", "incl,-excl", Filter.InputBuf, IM_ARRAYSIZE(Filter.InputBuf), ImGuiInputTextFlags_EscapeClearsAll))
                Filter.Build();
            ImGui::PopItemFlag();

            if (ImGui::BeginTable("##bg", 1, ImGuiTableFlags_RowBg))
            {
                for (ExampleTreeNode* node : root_node->Childs)
                    if (Filter.PassFilter(node->Name)) // Filter root node
                        DrawTreeNode(node);
                ImGui::EndTable();
            }
        }
        ImGui::EndChild();

        // Right side: draw properties
        ImGui::SameLine();

        ImGui::BeginGroup(); // Lock X position
        if (ExampleTreeNode* node = VisibleNode)
        {
            ImGui::Text("%s", node->Name);
            ImGui::TextDisabled("UID: 0x%08X", node->UID);
            ImGui::Separator();
            if (ImGui::BeginTable("##properties", 2, ImGuiTableFlags_Resizable | ImGuiTableFlags_ScrollY))
            {
                // Push object ID after we entered the table, so table is shared for all objects
                ImGui::PushID((int)node->UID);
                ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthFixed);
                ImGui::TableSetupColumn("", ImGuiTableColumnFlags_WidthStretch, 2.0f); // Default twice larger
                if (node->HasData)
                {
                    // In a typical application, the structure description would be derived from a data-driven system.
                    // - We try to mimic this with our ExampleMemberInfo structure and the ExampleTreeNodeMemberInfos[] array.
                    // - Limits and some details are hard-coded to simplify the demo.
                    for (const ExampleMemberInfo& field_desc : ExampleTreeNodeMemberInfos)
                    {
                        ImGui::TableNextRow();
                        ImGui::PushID(field_desc.Name);
                        ImGui::TableNextColumn();
                        ImGui::AlignTextToFramePadding();
                        ImGui::TextUnformatted(field_desc.Name);
                        ImGui::TableNextColumn();
                        void* field_ptr = (void*)(((unsigned char*)node) + field_desc.Offset);
                        switch (field_desc.DataType)
                        {
                        case ImGuiDataType_Bool:
                        {
                            IM_ASSERT(field_desc.DataCount == 1);
                            ImGui::Checkbox("##Editor", (bool*)field_ptr);
                            break;
                        }
                        case ImGuiDataType_S32:
                        {
                            int v_min = INT_MIN, v_max = INT_MAX;
                            ImGui::SetNextItemWidth(-FLT_MIN);
                            ImGui::DragScalarN("##Editor", field_desc.DataType, field_ptr, field_desc.DataCount, 1.0f, &v_min, &v_max);
                            break;
                        }
                        case ImGuiDataType_Float:
                        {
                            float v_min = 0.0f, v_max = 1.0f;
                            ImGui::SetNextItemWidth(-FLT_MIN);
                            ImGui::SliderScalarN("##Editor", field_desc.DataType, field_ptr, field_desc.DataCount, &v_min, &v_max);
                            break;
                        }
                        case ImGuiDataType_String:
                        {
                            ImGui::InputText("##Editor", reinterpret_cast<char*>(field_ptr), 28);
                            break;
                        }
                        }
                        ImGui::PopID();
                    }
                }
                ImGui::PopID();
                ImGui::EndTable();
            }
        }
        ImGui::EndGroup();
    }

    void DrawTreeNode(ExampleTreeNode* node)
    {
        ImGui::TableNextRow();
        ImGui::TableNextColumn();
        ImGui::PushID(node->UID);
        ImGuiTreeNodeFlags tree_flags = ImGuiTreeNodeFlags_None;
        tree_flags |= ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick;// Standard opening mode as we are likely to want to add selection afterwards
        tree_flags |= ImGuiTreeNodeFlags_NavLeftJumpsToParent;  // Left arrow support
        tree_flags |= ImGuiTreeNodeFlags_SpanFullWidth;         // Span full width for easier mouse reach
        tree_flags |= ImGuiTreeNodeFlags_DrawLinesToNodes;      // Always draw hierarchy outlines
        if (node == VisibleNode)
            tree_flags |= ImGuiTreeNodeFlags_Selected;
        if (node->Childs.Size == 0)
            tree_flags |= ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_Bullet;
        if (node->DataMyBool == false)
            ImGui::PushStyleColor(ImGuiCol_Text, ImGui::GetStyle().Colors[ImGuiCol_TextDisabled]);
        bool node_open = ImGui::TreeNodeEx("", tree_flags, "%s", node->Name);
        if (node->DataMyBool == false)
            ImGui::PopStyleColor();
        if (ImGui::IsItemFocused())
            VisibleNode = node;
        if (node_open)
        {
            for (ExampleTreeNode* child : node->Childs)
                DrawTreeNode(child);
            ImGui::TreePop();
        }
        ImGui::PopID();
    }
};

// Demonstrate creating a simple property editor.
static void ShowExampleAppPropertyEditor(bool* p_open, ImGuiDemoWindowData* demo_data)
{
    ImGui::SetNextWindowSize(ImVec2(430, 450), ImGuiCond_FirstUseEver);
    if (!ImGui::Begin("Example: Property editor", p_open))
    {
        ImGui::End();
        return;
    }

    IMGUI_DEMO_MARKER("Examples/Property Editor");
    static ExampleAppPropertyEditor property_editor;
    if (demo_data->DemoTree == NULL)
        demo_data->DemoTree = ExampleTree_CreateDemoTree();
    property_editor.Draw(demo_data->DemoTree);

    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Long Text / ShowExampleAppLongText()
//-----------------------------------------------------------------------------

// Demonstrate/test rendering huge amount of text, and the incidence of clipping.
static void ShowExampleAppLongText(bool* p_open)
{
    ImGui::SetNextWindowSize(ImVec2(520, 600), ImGuiCond_FirstUseEver);
    if (!ImGui::Begin("Example: Long text display", p_open))
    {
        ImGui::End();
        return;
    }
    IMGUI_DEMO_MARKER("Examples/Long text display");

    static int test_type = 0;
    static ImGuiTextBuffer log;
    static int lines = 0;
    ImGui::Text("Printing unusually long amount of text.");
    ImGui::Combo("Test type", &test_type,
        "Single call to TextUnformatted()\0"
        "Multiple calls to Text(), clipped\0"
        "Multiple calls to Text(), not clipped (slow)\0");
    ImGui::Text("Buffer contents: %d lines, %d bytes", lines, log.size());
    if (ImGui::Button("Clear")) { log.clear(); lines = 0; }
    ImGui::SameLine();
    if (ImGui::Button("Add 1000 lines"))
    {
        for (int i = 0; i < 1000; i++)
            log.appendf("%i The quick brown fox jumps over the lazy dog\n", lines + i);
        lines += 1000;
    }
    ImGui::BeginChild("Log");
    switch (test_type)
    {
    case 0:
        // Single call to TextUnformatted() with a big buffer
        ImGui::TextUnformatted(log.begin(), log.end());
        break;
    case 1:
        {
            // Multiple calls to Text(), manually coarsely clipped - demonstrate how to use the ImGuiListClipper helper.
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
            ImGuiListClipper clipper;
            clipper.Begin(lines);
            while (clipper.Step())
                for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
                    ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);
            ImGui::PopStyleVar();
            break;
        }
    case 2:
        // Multiple calls to Text(), not clipped (slow)
        ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
        for (int i = 0; i < lines; i++)
            ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);
        ImGui::PopStyleVar();
        break;
    }
    ImGui::EndChild();
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Auto Resize / ShowExampleAppAutoResize()
//-----------------------------------------------------------------------------

// Demonstrate creating a window which gets auto-resized according to its content.
static void ShowExampleAppAutoResize(bool* p_open)
{
    if (!ImGui::Begin("Example: Auto-resizing window", p_open, ImGuiWindowFlags_AlwaysAutoResize))
    {
        ImGui::End();
        return;
    }
    IMGUI_DEMO_MARKER("Examples/Auto-resizing window");

    static int lines = 10;
    ImGui::TextUnformatted(
        "Window will resize every-frame to the size of its content.\n"
        "Note that you probably don't want to query the window size to\n"
        "output your content because that would create a feedback loop.");
    ImGui::SliderInt("Number of lines", &lines, 1, 20);
    for (int i = 0; i < lines; i++)
        ImGui::Text("%*sThis is line %d", i * 4, "", i); // Pad with space to extend size horizontally
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Constrained Resize / ShowExampleAppConstrainedResize()
//-----------------------------------------------------------------------------

// Demonstrate creating a window with custom resize constraints.
// Note that size constraints currently don't work on a docked window (when in 'docking' branch)
static void ShowExampleAppConstrainedResize(bool* p_open)
{
    struct CustomConstraints
    {
        // Helper functions to demonstrate programmatic constraints
        // FIXME: This doesn't take account of decoration size (e.g. title bar), library should make this easier.
        // FIXME: None of the three demos works consistently when resizing from borders.
        static void AspectRatio(ImGuiSizeCallbackData* data)
        {
            float aspect_ratio = *(float*)data->UserData;
            data->DesiredSize.y = (float)(int)(data->DesiredSize.x / aspect_ratio);
        }
        static void Square(ImGuiSizeCallbackData* data)
        {
            data->DesiredSize.x = data->DesiredSize.y = IM_MAX(data->DesiredSize.x, data->DesiredSize.y);
        }
        static void Step(ImGuiSizeCallbackData* data)
        {
            float step = *(float*)data->UserData;
            data->DesiredSize = ImVec2((int)(data->DesiredSize.x / step + 0.5f) * step, (int)(data->DesiredSize.y / step + 0.5f) * step);
        }
    };

    const char* test_desc[] =
    {
        "Between 100x100 and 500x500",
        "At least 100x100",
        "Resize vertical + lock current width",
        "Resize horizontal + lock current height",
        "Width Between 400 and 500",
        "Height at least 400",
        "Custom: Aspect Ratio 16:9",
        "Custom: Always Square",
        "Custom: Fixed Steps (100)",
    };

    // Options
    static bool auto_resize = false;
    static bool window_padding = true;
    static int type = 6; // Aspect Ratio
    static int display_lines = 10;

    // Submit constraint
    float aspect_ratio = 16.0f / 9.0f;
    float fixed_step = 100.0f;
    if (type == 0) ImGui::SetNextWindowSizeConstraints(ImVec2(100, 100), ImVec2(500, 500));         // Between 100x100 and 500x500
    if (type == 1) ImGui::SetNextWindowSizeConstraints(ImVec2(100, 100), ImVec2(FLT_MAX, FLT_MAX)); // Width > 100, Height > 100
    if (type == 2) ImGui::SetNextWindowSizeConstraints(ImVec2(-1, 0),    ImVec2(-1, FLT_MAX));      // Resize vertical + lock current width
    if (type == 3) ImGui::SetNextWindowSizeConstraints(ImVec2(0, -1),    ImVec2(FLT_MAX, -1));      // Resize horizontal + lock current height
    if (type == 4) ImGui::SetNextWindowSizeConstraints(ImVec2(400, -1),  ImVec2(500, -1));          // Width Between and 400 and 500
    if (type == 5) ImGui::SetNextWindowSizeConstraints(ImVec2(-1, 400),  ImVec2(-1, FLT_MAX));      // Height at least 400
    if (type == 6) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::AspectRatio, (void*)&aspect_ratio);   // Aspect ratio
    if (type == 7) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Square);                              // Always Square
    if (type == 8) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Step, (void*)&fixed_step);            // Fixed Step

    // Submit window
    if (!window_padding)
        ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0.0f, 0.0f));
    const ImGuiWindowFlags window_flags = auto_resize ? ImGuiWindowFlags_AlwaysAutoResize : 0;
    const bool window_open = ImGui::Begin("Example: Constrained Resize", p_open, window_flags);
    if (!window_padding)
        ImGui::PopStyleVar();
    if (window_open)
    {
        IMGUI_DEMO_MARKER("Examples/Constrained Resizing window");
        if (ImGui::GetIO().KeyShift)
        {
            // Display a dummy viewport (in your real app you would likely use ImageButton() to display a texture)
            ImVec2 avail_size = ImGui::GetContentRegionAvail();
            ImVec2 pos = ImGui::GetCursorScreenPos();
            ImGui::ColorButton("viewport", ImVec4(0.5f, 0.2f, 0.5f, 1.0f), ImGuiColorEditFlags_NoTooltip | ImGuiColorEditFlags_NoDragDrop, avail_size);
            ImGui::SetCursorScreenPos(ImVec2(pos.x + 10, pos.y + 10));
            ImGui::Text("%.2f x %.2f", avail_size.x, avail_size.y);
        }
        else
        {
            ImGui::Text("(Hold SHIFT to display a dummy viewport)");
            if (ImGui::Button("Set 200x200")) { ImGui::SetWindowSize(ImVec2(200, 200)); } ImGui::SameLine();
            if (ImGui::Button("Set 500x500")) { ImGui::SetWindowSize(ImVec2(500, 500)); } ImGui::SameLine();
            if (ImGui::Button("Set 800x200")) { ImGui::SetWindowSize(ImVec2(800, 200)); }
            ImGui::SetNextItemWidth(ImGui::GetFontSize() * 20);
            ImGui::Combo("Constraint", &type, test_desc, IM_ARRAYSIZE(test_desc));
            ImGui::SetNextItemWidth(ImGui::GetFontSize() * 20);
            ImGui::DragInt("Lines", &display_lines, 0.2f, 1, 100);
            ImGui::Checkbox("Auto-resize", &auto_resize);
            ImGui::Checkbox("Window padding", &window_padding);
            for (int i = 0; i < display_lines; i++)
                ImGui::Text("%*sHello, sailor! Making this line long enough for the example.", i * 4, "");
        }
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Simple overlay / ShowExampleAppSimpleOverlay()
//-----------------------------------------------------------------------------

// Demonstrate creating a simple static window with no decoration
// + a context-menu to choose which corner of the screen to use.
static void ShowExampleAppSimpleOverlay(bool* p_open)
{
    static int location = 0;
    ImGuiIO& io = ImGui::GetIO();
    ImGuiWindowFlags window_flags = ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoFocusOnAppearing | ImGuiWindowFlags_NoNav;
    if (location >= 0)
    {
        const float PAD = 10.0f;
        const ImGuiViewport* viewport = ImGui::GetMainViewport();
        ImVec2 work_pos = viewport->WorkPos; // Use work area to avoid menu-bar/task-bar, if any!
        ImVec2 work_size = viewport->WorkSize;
        ImVec2 window_pos, window_pos_pivot;
        window_pos.x = (location & 1) ? (work_pos.x + work_size.x - PAD) : (work_pos.x + PAD);
        window_pos.y = (location & 2) ? (work_pos.y + work_size.y - PAD) : (work_pos.y + PAD);
        window_pos_pivot.x = (location & 1) ? 1.0f : 0.0f;
        window_pos_pivot.y = (location & 2) ? 1.0f : 0.0f;
        ImGui::SetNextWindowPos(window_pos, ImGuiCond_Always, window_pos_pivot);
        window_flags |= ImGuiWindowFlags_NoMove;
    }
    else if (location == -2)
    {
        // Center window
        ImGui::SetNextWindowPos(ImGui::GetMainViewport()->GetCenter(), ImGuiCond_Always, ImVec2(0.5f, 0.5f));
        window_flags |= ImGuiWindowFlags_NoMove;
    }
    ImGui::SetNextWindowBgAlpha(0.35f); // Transparent background
    if (ImGui::Begin("Example: Simple overlay", p_open, window_flags))
    {
        IMGUI_DEMO_MARKER("Examples/Simple Overlay");
        ImGui::Text("Simple overlay\n" "(right-click to change position)");
        ImGui::Separator();
        if (ImGui::IsMousePosValid())
            ImGui::Text("Mouse Position: (%.1f,%.1f)", io.MousePos.x, io.MousePos.y);
        else
            ImGui::Text("Mouse Position: <invalid>");
        if (ImGui::BeginPopupContextWindow())
        {
            if (ImGui::MenuItem("Custom",       NULL, location == -1)) location = -1;
            if (ImGui::MenuItem("Center",       NULL, location == -2)) location = -2;
            if (ImGui::MenuItem("Top-left",     NULL, location == 0)) location = 0;
            if (ImGui::MenuItem("Top-right",    NULL, location == 1)) location = 1;
            if (ImGui::MenuItem("Bottom-left",  NULL, location == 2)) location = 2;
            if (ImGui::MenuItem("Bottom-right", NULL, location == 3)) location = 3;
            if (p_open && ImGui::MenuItem("Close")) *p_open = false;
            ImGui::EndPopup();
        }
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Fullscreen window / ShowExampleAppFullscreen()
//-----------------------------------------------------------------------------

// Demonstrate creating a window covering the entire screen/viewport
static void ShowExampleAppFullscreen(bool* p_open)
{
    static bool use_work_area = true;
    static ImGuiWindowFlags flags = ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_NoMove | ImGuiWindowFlags_NoSavedSettings;

    // We demonstrate using the full viewport area or the work area (without menu-bars, task-bars etc.)
    // Based on your use case you may want one or the other.
    const ImGuiViewport* viewport = ImGui::GetMainViewport();
    ImGui::SetNextWindowPos(use_work_area ? viewport->WorkPos : viewport->Pos);
    ImGui::SetNextWindowSize(use_work_area ? viewport->WorkSize : viewport->Size);

    if (ImGui::Begin("Example: Fullscreen window", p_open, flags))
    {
        ImGui::Checkbox("Use work area instead of main area", &use_work_area);
        ImGui::SameLine();
        HelpMarker("Main Area = entire viewport,\nWork Area = entire viewport minus sections used by the main menu bars, task bars etc.\n\nEnable the main-menu bar in Examples menu to see the difference.");

        ImGui::CheckboxFlags("ImGuiWindowFlags_NoBackground", &flags, ImGuiWindowFlags_NoBackground);
        ImGui::CheckboxFlags("ImGuiWindowFlags_NoDecoration", &flags, ImGuiWindowFlags_NoDecoration);
        ImGui::Indent();
        ImGui::CheckboxFlags("ImGuiWindowFlags_NoTitleBar", &flags, ImGuiWindowFlags_NoTitleBar);
        ImGui::CheckboxFlags("ImGuiWindowFlags_NoCollapse", &flags, ImGuiWindowFlags_NoCollapse);
        ImGui::CheckboxFlags("ImGuiWindowFlags_NoScrollbar", &flags, ImGuiWindowFlags_NoScrollbar);
        ImGui::Unindent();

        if (p_open && ImGui::Button("Close this window"))
            *p_open = false;
    }
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Manipulating Window Titles / ShowExampleAppWindowTitles()
//-----------------------------------------------------------------------------

// Demonstrate the use of "##" and "###" in identifiers to manipulate ID generation.
// This applies to all regular items as well.
// Read FAQ section "How can I have multiple widgets with the same label?" for details.
static void ShowExampleAppWindowTitles(bool*)
{
    const ImGuiViewport* viewport = ImGui::GetMainViewport();
    const ImVec2 base_pos = viewport->Pos;

    // By default, Windows are uniquely identified by their title.
    // You can use the "##" and "###" markers to manipulate the display/ID.

    // Using "##" to display same title but have unique identifier.
    ImGui::SetNextWindowPos(ImVec2(base_pos.x + 100, base_pos.y + 100), ImGuiCond_FirstUseEver);
    ImGui::Begin("Same title as another window##1");
    IMGUI_DEMO_MARKER("Examples/Manipulating window titles");
    ImGui::Text("This is window 1.\nMy title is the same as window 2, but my identifier is unique.");
    ImGui::End();

    ImGui::SetNextWindowPos(ImVec2(base_pos.x + 100, base_pos.y + 200), ImGuiCond_FirstUseEver);
    ImGui::Begin("Same title as another window##2");
    ImGui::Text("This is window 2.\nMy title is the same as window 1, but my identifier is unique.");
    ImGui::End();

    // Using "###" to display a changing title but keep a static identifier "AnimatedTitle"
    char buf[128];
    sprintf(buf, "Animated title %c %d###AnimatedTitle", "|/-\\"[(int)(ImGui::GetTime() / 0.25f) & 3], ImGui::GetFrameCount());
    ImGui::SetNextWindowPos(ImVec2(base_pos.x + 100, base_pos.y + 300), ImGuiCond_FirstUseEver);
    ImGui::Begin(buf);
    ImGui::Text("This window has a changing title.");
    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Custom Rendering using ImDrawList API / ShowExampleAppCustomRendering()
//-----------------------------------------------------------------------------

// Add a |_| looking shape
static void PathConcaveShape(ImDrawList* draw_list, float x, float y, float sz)
{
    const ImVec2 pos_norms[] = { { 0.0f, 0.0f }, { 0.3f, 0.0f }, { 0.3f, 0.7f }, { 0.7f, 0.7f }, { 0.7f, 0.0f }, { 1.0f, 0.0f }, { 1.0f, 1.0f }, { 0.0f, 1.0f } };
    for (const ImVec2& p : pos_norms)
        draw_list->PathLineTo(ImVec2(x + 0.5f + (int)(sz * p.x), y + 0.5f + (int)(sz * p.y)));
}

// Demonstrate using the low-level ImDrawList to draw custom shapes.
static void ShowExampleAppCustomRendering(bool* p_open)
{
    if (!ImGui::Begin("Example: Custom rendering", p_open))
    {
        ImGui::End();
        return;
    }
    IMGUI_DEMO_MARKER("Examples/Custom Rendering");

    // Tip: If you do a lot of custom rendering, you probably want to use your own geometrical types and benefit of
    // overloaded operators, etc. Define IM_VEC2_CLASS_EXTRA in imconfig.h to create implicit conversions between your
    // types and ImVec2/ImVec4. Dear ImGui defines overloaded operators but they are internal to imgui.cpp and not
    // exposed outside (to avoid messing with your types) In this example we are not using the maths operators!

    if (ImGui::BeginTabBar("##TabBar"))
    {
        if (ImGui::BeginTabItem("Primitives"))
        {
            ImGui::PushItemWidth(-ImGui::GetFontSize() * 15);
            ImDrawList* draw_list = ImGui::GetWindowDrawList();

            // Draw gradients
            // (note that those are currently exacerbating our sRGB/Linear issues)
            // Calling ImGui::GetColorU32() multiplies the given colors by the current Style Alpha, but you may pass the IM_COL32() directly as well..
            ImGui::Text("Gradients");
            ImVec2 gradient_size = ImVec2(ImGui::CalcItemWidth(), ImGui::GetFrameHeight());
            {
                ImVec2 p0 = ImGui::GetCursorScreenPos();
                ImVec2 p1 = ImVec2(p0.x + gradient_size.x, p0.y + gradient_size.y);
                ImU32 col_a = ImGui::GetColorU32(IM_COL32(0, 0, 0, 255));
                ImU32 col_b = ImGui::GetColorU32(IM_COL32(255, 255, 255, 255));
                draw_list->AddRectFilledMultiColor(p0, p1, col_a, col_b, col_b, col_a);
                ImGui::InvisibleButton("##gradient1", gradient_size);
            }
            {
                ImVec2 p0 = ImGui::GetCursorScreenPos();
                ImVec2 p1 = ImVec2(p0.x + gradient_size.x, p0.y + gradient_size.y);
                ImU32 col_a = ImGui::GetColorU32(IM_COL32(0, 255, 0, 255));
                ImU32 col_b = ImGui::GetColorU32(IM_COL32(255, 0, 0, 255));
                draw_list->AddRectFilledMultiColor(p0, p1, col_a, col_b, col_b, col_a);
                ImGui::InvisibleButton("##gradient2", gradient_size);
            }

            // Draw a bunch of primitives
            ImGui::Text("All primitives");
            static float sz = 36.0f;
            static float thickness = 3.0f;
            static int ngon_sides = 6;
            static bool circle_segments_override = false;
            static int circle_segments_override_v = 12;
            static bool curve_segments_override = false;
            static int curve_segments_override_v = 8;
            static ImVec4 colf = ImVec4(1.0f, 1.0f, 0.4f, 1.0f);
            ImGui::DragFloat("Size", &sz, 0.2f, 2.0f, 100.0f, "%.0f");
            ImGui::DragFloat("Thickness", &thickness, 0.05f, 1.0f, 8.0f, "%.02f");
            ImGui::SliderInt("N-gon sides", &ngon_sides, 3, 12);
            ImGui::Checkbox("##circlesegmentoverride", &circle_segments_override);
            ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
            circle_segments_override |= ImGui::SliderInt("Circle segments override", &circle_segments_override_v, 3, 40);
            ImGui::Checkbox("##curvessegmentoverride", &curve_segments_override);
            ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);
            curve_segments_override |= ImGui::SliderInt("Curves segments override", &curve_segments_override_v, 3, 40);
            ImGui::ColorEdit4("Color", &colf.x);

            const ImVec2 p = ImGui::GetCursorScreenPos();
            const ImU32 col = ImColor(colf);
            const float spacing = 10.0f;
            const ImDrawFlags corners_tl_br = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_RoundCornersBottomRight;
            const float rounding = sz / 5.0f;
            const int circle_segments = circle_segments_override ? circle_segments_override_v : 0;
            const int curve_segments = curve_segments_override ? curve_segments_override_v : 0;
            const ImVec2 cp3[3] = { ImVec2(0.0f, sz * 0.6f), ImVec2(sz * 0.5f, -sz * 0.4f), ImVec2(sz, sz) }; // Control points for curves
            const ImVec2 cp4[4] = { ImVec2(0.0f, 0.0f), ImVec2(sz * 1.3f, sz * 0.3f), ImVec2(sz - sz * 1.3f, sz - sz * 0.3f), ImVec2(sz, sz) };

            float x = p.x + 4.0f;
            float y = p.y + 4.0f;
            for (int n = 0; n < 2; n++)
            {
                // First line uses a thickness of 1.0f, second line uses the configurable thickness
                float th = (n == 0) ? 1.0f : thickness;
                draw_list->AddNgon(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, ngon_sides, th);                 x += sz + spacing;  // N-gon
                draw_list->AddCircle(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, circle_segments, th);          x += sz + spacing;  // Circle
                draw_list->AddEllipse(ImVec2(x + sz*0.5f, y + sz*0.5f), ImVec2(sz*0.5f, sz*0.3f), col, -0.3f, circle_segments, th); x += sz + spacing;  // Ellipse
                draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 0.0f, ImDrawFlags_None, th);          x += sz + spacing;  // Square
                draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, rounding, ImDrawFlags_None, th);      x += sz + spacing;  // Square with all rounded corners
                draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, rounding, corners_tl_br, th);         x += sz + spacing;  // Square with two rounded corners
                draw_list->AddTriangle(ImVec2(x+sz*0.5f,y), ImVec2(x+sz, y+sz-0.5f), ImVec2(x, y+sz-0.5f), col, th);x += sz + spacing;  // Triangle
                //draw_list->AddTriangle(ImVec2(x+sz*0.2f,y), ImVec2(x, y+sz-0.5f), ImVec2(x+sz*0.4f, y+sz-0.5f), col, th);x+= sz*0.4f + spacing; // Thin triangle
                PathConcaveShape(draw_list, x, y, sz); draw_list->PathStroke(col, ImDrawFlags_Closed, th);          x += sz + spacing;  // Concave Shape
                //draw_list->AddPolyline(concave_shape, IM_ARRAYSIZE(concave_shape), col, ImDrawFlags_Closed, th);
                draw_list->AddLine(ImVec2(x, y), ImVec2(x + sz, y), col, th);                                       x += sz + spacing;  // Horizontal line (note: drawing a filled rectangle will be faster!)
                draw_list->AddLine(ImVec2(x, y), ImVec2(x, y + sz), col, th);                                       x += spacing;       // Vertical line (note: drawing a filled rectangle will be faster!)
                draw_list->AddLine(ImVec2(x, y), ImVec2(x + sz, y + sz), col, th);                                  x += sz + spacing;  // Diagonal line

                // Path
                draw_list->PathArcTo(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, 3.141592f, 3.141592f * -0.5f);
                draw_list->PathStroke(col, ImDrawFlags_None, th);
                x += sz + spacing;

                // Quadratic Bezier Curve (3 control points)
                draw_list->AddBezierQuadratic(ImVec2(x + cp3[0].x, y + cp3[0].y), ImVec2(x + cp3[1].x, y + cp3[1].y), ImVec2(x + cp3[2].x, y + cp3[2].y), col, th, curve_segments);
                x += sz + spacing;

                // Cubic Bezier Curve (4 control points)
                draw_list->AddBezierCubic(ImVec2(x + cp4[0].x, y + cp4[0].y), ImVec2(x + cp4[1].x, y + cp4[1].y), ImVec2(x + cp4[2].x, y + cp4[2].y), ImVec2(x + cp4[3].x, y + cp4[3].y), col, th, curve_segments);

                x = p.x + 4;
                y += sz + spacing;
            }

            // Filled shapes
            draw_list->AddNgonFilled(ImVec2(x + sz * 0.5f, y + sz * 0.5f), sz * 0.5f, col, ngon_sides);             x += sz + spacing;  // N-gon
            draw_list->AddCircleFilled(ImVec2(x + sz * 0.5f, y + sz * 0.5f), sz * 0.5f, col, circle_segments);      x += sz + spacing;  // Circle
            draw_list->AddEllipseFilled(ImVec2(x + sz * 0.5f, y + sz * 0.5f), ImVec2(sz * 0.5f, sz * 0.3f), col, -0.3f, circle_segments); x += sz + spacing;// Ellipse
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col);                                    x += sz + spacing;  // Square
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f);                             x += sz + spacing;  // Square with all rounded corners
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f, corners_tl_br);              x += sz + spacing;  // Square with two rounded corners
            draw_list->AddTriangleFilled(ImVec2(x+sz*0.5f,y), ImVec2(x+sz, y+sz-0.5f), ImVec2(x, y+sz-0.5f), col);  x += sz + spacing;  // Triangle
            //draw_list->AddTriangleFilled(ImVec2(x+sz*0.2f,y), ImVec2(x, y+sz-0.5f), ImVec2(x+sz*0.4f, y+sz-0.5f), col); x += sz*0.4f + spacing; // Thin triangle
            PathConcaveShape(draw_list, x, y, sz); draw_list->PathFillConcave(col);                                 x += sz + spacing;  // Concave shape
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + thickness), col);                             x += sz + spacing;  // Horizontal line (faster than AddLine, but only handle integer thickness)
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + thickness, y + sz), col);                             x += spacing * 2.0f;// Vertical line (faster than AddLine, but only handle integer thickness)
            draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + 1, y + 1), col);                                      x += sz;            // Pixel (faster than AddLine)

            // Path
            draw_list->PathArcTo(ImVec2(x + sz * 0.5f, y + sz * 0.5f), sz * 0.5f, 3.141592f * -0.5f, 3.141592f);
            draw_list->PathFillConvex(col);
            x += sz + spacing;

            // Quadratic Bezier Curve (3 control points)
            draw_list->PathLineTo(ImVec2(x + cp3[0].x, y + cp3[0].y));
            draw_list->PathBezierQuadraticCurveTo(ImVec2(x + cp3[1].x, y + cp3[1].y), ImVec2(x + cp3[2].x, y + cp3[2].y), curve_segments);
            draw_list->PathFillConvex(col);
            x += sz + spacing;

            draw_list->AddRectFilledMultiColor(ImVec2(x, y), ImVec2(x + sz, y + sz), IM_COL32(0, 0, 0, 255), IM_COL32(255, 0, 0, 255), IM_COL32(255, 255, 0, 255), IM_COL32(0, 255, 0, 255));
            x += sz + spacing;

            ImGui::Dummy(ImVec2((sz + spacing) * 13.2f, (sz + spacing) * 3.0f));
            ImGui::PopItemWidth();
            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("Canvas"))
        {
            static ImVector<ImVec2> points;
            static ImVec2 scrolling(0.0f, 0.0f);
            static bool opt_enable_grid = true;
            static bool opt_enable_context_menu = true;
            static bool adding_line = false;

            ImGui::Checkbox("Enable grid", &opt_enable_grid);
            ImGui::Checkbox("Enable context menu", &opt_enable_context_menu);
            ImGui::Text("Mouse Left: drag to add lines,\nMouse Right: drag to scroll, click for context menu.");

            // Typically you would use a BeginChild()/EndChild() pair to benefit from a clipping region + own scrolling.
            // Here we demonstrate that this can be replaced by simple offsetting + custom drawing + PushClipRect/PopClipRect() calls.
            // To use a child window instead we could use, e.g:
            //      ImGui::PushStyleVar(ImGuiStyleVar_WindowPadding, ImVec2(0, 0));      // Disable padding
            //      ImGui::PushStyleColor(ImGuiCol_ChildBg, IM_COL32(50, 50, 50, 255));  // Set a background color
            //      ImGui::BeginChild("canvas", ImVec2(0.0f, 0.0f), ImGuiChildFlags_Borders, ImGuiWindowFlags_NoMove);
            //      ImGui::PopStyleColor();
            //      ImGui::PopStyleVar();
            //      [...]
            //      ImGui::EndChild();

            // Using InvisibleButton() as a convenience 1) it will advance the layout cursor and 2) allows us to use IsItemHovered()/IsItemActive()
            ImVec2 canvas_p0 = ImGui::GetCursorScreenPos();      // ImDrawList API uses screen coordinates!
            ImVec2 canvas_sz = ImGui::GetContentRegionAvail();   // Resize canvas to what's available
            if (canvas_sz.x < 50.0f) canvas_sz.x = 50.0f;
            if (canvas_sz.y < 50.0f) canvas_sz.y = 50.0f;
            ImVec2 canvas_p1 = ImVec2(canvas_p0.x + canvas_sz.x, canvas_p0.y + canvas_sz.y);

            // Draw border and background color
            ImGuiIO& io = ImGui::GetIO();
            ImDrawList* draw_list = ImGui::GetWindowDrawList();
            draw_list->AddRectFilled(canvas_p0, canvas_p1, IM_COL32(50, 50, 50, 255));
            draw_list->AddRect(canvas_p0, canvas_p1, IM_COL32(255, 255, 255, 255));

            // This will catch our interactions
            ImGui::InvisibleButton("canvas", canvas_sz, ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlags_MouseButtonRight);
            const bool is_hovered = ImGui::IsItemHovered(); // Hovered
            const bool is_active = ImGui::IsItemActive();   // Held
            const ImVec2 origin(canvas_p0.x + scrolling.x, canvas_p0.y + scrolling.y); // Lock scrolled origin
            const ImVec2 mouse_pos_in_canvas(io.MousePos.x - origin.x, io.MousePos.y - origin.y);

            // Add first and second point
            if (is_hovered && !adding_line && ImGui::IsMouseClicked(ImGuiMouseButton_Left))
            {
                points.push_back(mouse_pos_in_canvas);
                points.push_back(mouse_pos_in_canvas);
                adding_line = true;
            }
            if (adding_line)
            {
                points.back() = mouse_pos_in_canvas;
                if (!ImGui::IsMouseDown(ImGuiMouseButton_Left))
                    adding_line = false;
            }

            // Pan (we use a zero mouse threshold when there's no context menu)
            // You may decide to make that threshold dynamic based on whether the mouse is hovering something etc.
            const float mouse_threshold_for_pan = opt_enable_context_menu ? -1.0f : 0.0f;
            if (is_active && ImGui::IsMouseDragging(ImGuiMouseButton_Right, mouse_threshold_for_pan))
            {
                scrolling.x += io.MouseDelta.x;
                scrolling.y += io.MouseDelta.y;
            }

            // Context menu (under default mouse threshold)
            ImVec2 drag_delta = ImGui::GetMouseDragDelta(ImGuiMouseButton_Right);
            if (opt_enable_context_menu && drag_delta.x == 0.0f && drag_delta.y == 0.0f)
                ImGui::OpenPopupOnItemClick("context", ImGuiPopupFlags_MouseButtonRight);
            if (ImGui::BeginPopup("context"))
            {
                if (adding_line)
                    points.resize(points.size() - 2);
                adding_line = false;
                if (ImGui::MenuItem("Remove one", NULL, false, points.Size > 0)) { points.resize(points.size() - 2); }
                if (ImGui::MenuItem("Remove all", NULL, false, points.Size > 0)) { points.clear(); }
                ImGui::EndPopup();
            }

            // Draw grid + all lines in the canvas
            draw_list->PushClipRect(canvas_p0, canvas_p1, true);
            if (opt_enable_grid)
            {
                const float GRID_STEP = 64.0f;
                for (float x = fmodf(scrolling.x, GRID_STEP); x < canvas_sz.x; x += GRID_STEP)
                    draw_list->AddLine(ImVec2(canvas_p0.x + x, canvas_p0.y), ImVec2(canvas_p0.x + x, canvas_p1.y), IM_COL32(200, 200, 200, 40));
                for (float y = fmodf(scrolling.y, GRID_STEP); y < canvas_sz.y; y += GRID_STEP)
                    draw_list->AddLine(ImVec2(canvas_p0.x, canvas_p0.y + y), ImVec2(canvas_p1.x, canvas_p0.y + y), IM_COL32(200, 200, 200, 40));
            }
            for (int n = 0; n < points.Size; n += 2)
                draw_list->AddLine(ImVec2(origin.x + points[n].x, origin.y + points[n].y), ImVec2(origin.x + points[n + 1].x, origin.y + points[n + 1].y), IM_COL32(255, 255, 0, 255), 2.0f);
            draw_list->PopClipRect();

            ImGui::EndTabItem();
        }

        if (ImGui::BeginTabItem("BG/FG draw lists"))
        {
            static bool draw_bg = true;
            static bool draw_fg = true;
            ImGui::Checkbox("Draw in Background draw list", &draw_bg);
            ImGui::SameLine(); HelpMarker("The Background draw list will be rendered below every Dear ImGui windows.");
            ImGui::Checkbox("Draw in Foreground draw list", &draw_fg);
            ImGui::SameLine(); HelpMarker("The Foreground draw list will be rendered over every Dear ImGui windows.");
            ImVec2 window_pos = ImGui::GetWindowPos();
            ImVec2 window_size = ImGui::GetWindowSize();
            ImVec2 window_center = ImVec2(window_pos.x + window_size.x * 0.5f, window_pos.y + window_size.y * 0.5f);
            if (draw_bg)
                ImGui::GetBackgroundDrawList()->AddCircle(window_center, window_size.x * 0.6f, IM_COL32(255, 0, 0, 200), 0, 10 + 4);
            if (draw_fg)
                ImGui::GetForegroundDrawList()->AddCircle(window_center, window_size.y * 0.6f, IM_COL32(0, 255, 0, 200), 0, 10);
            ImGui::EndTabItem();
        }

        // Demonstrate out-of-order rendering via channels splitting
        // We use functions in ImDrawList as each draw list contains a convenience splitter,
        // but you can also instantiate your own ImDrawListSplitter if you need to nest them.
        if (ImGui::BeginTabItem("Draw Channels"))
        {
            ImDrawList* draw_list = ImGui::GetWindowDrawList();
            {
                ImGui::Text("Blue shape is drawn first: appears in back");
                ImGui::Text("Red shape is drawn after: appears in front");
                ImVec2 p0 = ImGui::GetCursorScreenPos();
                draw_list->AddRectFilled(ImVec2(p0.x, p0.y), ImVec2(p0.x + 50, p0.y + 50), IM_COL32(0, 0, 255, 255)); // Blue
                draw_list->AddRectFilled(ImVec2(p0.x + 25, p0.y + 25), ImVec2(p0.x + 75, p0.y + 75), IM_COL32(255, 0, 0, 255)); // Red
                ImGui::Dummy(ImVec2(75, 75));
            }
            ImGui::Separator();
            {
                ImGui::Text("Blue shape is drawn first, into channel 1: appears in front");
                ImGui::Text("Red shape is drawn after, into channel 0: appears in back");
                ImVec2 p1 = ImGui::GetCursorScreenPos();

                // Create 2 channels and draw a Blue shape THEN a Red shape.
                // You can create any number of channels. Tables API use 1 channel per column in order to better batch draw calls.
                draw_list->ChannelsSplit(2);
                draw_list->ChannelsSetCurrent(1);
                draw_list->AddRectFilled(ImVec2(p1.x, p1.y), ImVec2(p1.x + 50, p1.y + 50), IM_COL32(0, 0, 255, 255)); // Blue
                draw_list->ChannelsSetCurrent(0);
                draw_list->AddRectFilled(ImVec2(p1.x + 25, p1.y + 25), ImVec2(p1.x + 75, p1.y + 75), IM_COL32(255, 0, 0, 255)); // Red

                // Flatten/reorder channels. Red shape is in channel 0 and it appears below the Blue shape in channel 1.
                // This works by copying draw indices only (vertices are not copied).
                draw_list->ChannelsMerge();
                ImGui::Dummy(ImVec2(75, 75));
                ImGui::Text("After reordering, contents of channel 0 appears below channel 1.");
            }
            ImGui::EndTabItem();
        }

        ImGui::EndTabBar();
    }

    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Documents Handling / ShowExampleAppDocuments()
//-----------------------------------------------------------------------------

// Simplified structure to mimic a Document model
struct MyDocument
{
    char        Name[32];   // Document title
    int         UID;        // Unique ID (necessary as we can change title)
    bool        Open;       // Set when open (we keep an array of all available documents to simplify demo code!)
    bool        OpenPrev;   // Copy of Open from last update.
    bool        Dirty;      // Set when the document has been modified
    ImVec4      Color;      // An arbitrary variable associated to the document

    MyDocument(int uid, const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f, 1.0f, 1.0f, 1.0f))
    {
        UID = uid;
        snprintf(Name, sizeof(Name), "%s", name);
        Open = OpenPrev = open;
        Dirty = false;
        Color = color;
    }
    void DoOpen()       { Open = true; }
    void DoForceClose() { Open = false; Dirty = false; }
    void DoSave()       { Dirty = false; }
};

struct ExampleAppDocuments
{
    ImVector<MyDocument>    Documents;
    ImVector<MyDocument*>   CloseQueue;
    MyDocument*             RenamingDoc = NULL;
    bool                    RenamingStarted = false;

    ExampleAppDocuments()
    {
        Documents.push_back(MyDocument(0, "Lettuce",             true,  ImVec4(0.4f, 0.8f, 0.4f, 1.0f)));
        Documents.push_back(MyDocument(1, "Eggplant",            true,  ImVec4(0.8f, 0.5f, 1.0f, 1.0f)));
        Documents.push_back(MyDocument(2, "Carrot",              true,  ImVec4(1.0f, 0.8f, 0.5f, 1.0f)));
        Documents.push_back(MyDocument(3, "Tomato",              false, ImVec4(1.0f, 0.3f, 0.4f, 1.0f)));
        Documents.push_back(MyDocument(4, "A Rather Long Title", false, ImVec4(0.4f, 0.8f, 0.8f, 1.0f)));
        Documents.push_back(MyDocument(5, "Some Document",       false, ImVec4(0.8f, 0.8f, 1.0f, 1.0f)));
    }

    // As we allow to change document name, we append a never-changing document ID so tabs are stable
    void GetTabName(MyDocument* doc, char* out_buf, size_t out_buf_size)
    {
        snprintf(out_buf, out_buf_size, "%s###doc%d", doc->Name, doc->UID);
    }

    // Display placeholder contents for the Document
    void DisplayDocContents(MyDocument* doc)
    {
        ImGui::PushID(doc);
        ImGui::Text("Document \"%s\"", doc->Name);
        ImGui::PushStyleColor(ImGuiCol_Text, doc->Color);
        ImGui::TextWrapped("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");
        ImGui::PopStyleColor();

        ImGui::SetNextItemShortcut(ImGuiMod_Ctrl | ImGuiKey_R, ImGuiInputFlags_Tooltip);
        if (ImGui::Button("Rename.."))
        {
            RenamingDoc = doc;
            RenamingStarted = true;
        }
        ImGui::SameLine();

        ImGui::SetNextItemShortcut(ImGuiMod_Ctrl | ImGuiKey_M, ImGuiInputFlags_Tooltip);
        if (ImGui::Button("Modify"))
            doc->Dirty = true;

        ImGui::SameLine();
        ImGui::SetNextItemShortcut(ImGuiMod_Ctrl | ImGuiKey_S, ImGuiInputFlags_Tooltip);
        if (ImGui::Button("Save"))
            doc->DoSave();

        ImGui::SameLine();
        ImGui::SetNextItemShortcut(ImGuiMod_Ctrl | ImGuiKey_W, ImGuiInputFlags_Tooltip);
        if (ImGui::Button("Close"))
            CloseQueue.push_back(doc);
        ImGui::ColorEdit3("color", &doc->Color.x);  // Useful to test drag and drop and hold-dragged-to-open-tab behavior.
        ImGui::PopID();
    }

    // Display context menu for the Document
    void DisplayDocContextMenu(MyDocument* doc)
    {
        if (!ImGui::BeginPopupContextItem())
            return;

        char buf[256];
        sprintf(buf, "Save %s", doc->Name);
        if (ImGui::MenuItem(buf, "Ctrl+S", false, doc->Open))
            doc->DoSave();
        if (ImGui::MenuItem("Rename...", "Ctrl+R", false, doc->Open))
            RenamingDoc = doc;
        if (ImGui::MenuItem("Close", "Ctrl+W", false, doc->Open))
            CloseQueue.push_back(doc);
        ImGui::EndPopup();
    }

    // [Optional] Notify the system of Tabs/Windows closure that happened outside the regular tab interface.
    // If a tab has been closed programmatically (aka closed from another source such as the Checkbox() in the demo,
    // as opposed to clicking on the regular tab closing button) and stops being submitted, it will take a frame for
    // the tab bar to notice its absence. During this frame there will be a gap in the tab bar, and if the tab that has
    // disappeared was the selected one, the tab bar will report no selected tab during the frame. This will effectively
    // give the impression of a flicker for one frame.
    // We call SetTabItemClosed() to manually notify the Tab Bar or Docking system of removed tabs to avoid this glitch.
    // Note that this completely optional, and only affect tab bars with the ImGuiTabBarFlags_Reorderable flag.
    void NotifyOfDocumentsClosedElsewhere()
    {
        for (MyDocument& doc : Documents)
        {
            if (!doc.Open && doc.OpenPrev)
                ImGui::SetTabItemClosed(doc.Name);
            doc.OpenPrev = doc.Open;
        }
    }
};

void ShowExampleAppDocuments(bool* p_open)
{
    static ExampleAppDocuments app;

    // Options
    static bool opt_reorderable = true;
    static ImGuiTabBarFlags opt_fitting_flags = ImGuiTabBarFlags_FittingPolicyDefault_;

    bool window_contents_visible = ImGui::Begin("Example: Documents", p_open, ImGuiWindowFlags_MenuBar);
    if (!window_contents_visible)
    {
        ImGui::End();
        return;
    }

    // Menu
    if (ImGui::BeginMenuBar())
    {
        if (ImGui::BeginMenu("File"))
        {
            int open_count = 0;
            for (MyDocument& doc : app.Documents)
                open_count += doc.Open ? 1 : 0;

            if (ImGui::BeginMenu("Open", open_count < app.Documents.Size))
            {
                for (MyDocument& doc : app.Documents)
                    if (!doc.Open && ImGui::MenuItem(doc.Name))
                        doc.DoOpen();
                ImGui::EndMenu();
            }
            if (ImGui::MenuItem("Close All Documents", NULL, false, open_count > 0))
                for (MyDocument& doc : app.Documents)
                    app.CloseQueue.push_back(&doc);
            if (ImGui::MenuItem("Exit") && p_open)
                *p_open = false;
            ImGui::EndMenu();
        }
        ImGui::EndMenuBar();
    }

    // [Debug] List documents with one checkbox for each
    for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)
    {
        MyDocument& doc = app.Documents[doc_n];
        if (doc_n > 0)
            ImGui::SameLine();
        ImGui::PushID(&doc);
        if (ImGui::Checkbox(doc.Name, &doc.Open))
            if (!doc.Open)
                doc.DoForceClose();
        ImGui::PopID();
    }

    ImGui::Separator();

    // About the ImGuiWindowFlags_UnsavedDocument / ImGuiTabItemFlags_UnsavedDocument flags.
    // They have multiple effects:
    // - Display a dot next to the title.
    // - Tab is selected when clicking the X close button.
    // - Closure is not assumed (will wait for user to stop submitting the tab).
    //   Otherwise closure is assumed when pressing the X, so if you keep submitting the tab may reappear at end of tab bar.
    //   We need to assume closure by default otherwise waiting for "lack of submission" on the next frame would leave an empty
    //   hole for one-frame, both in the tab-bar and in tab-contents when closing a tab/window.
    //   The rarely used SetTabItemClosed() function is a way to notify of programmatic closure to avoid the one-frame hole.

    // Submit Tab Bar and Tabs
    {
        ImGuiTabBarFlags tab_bar_flags = (opt_fitting_flags) | (opt_reorderable ? ImGuiTabBarFlags_Reorderable : 0);
        tab_bar_flags |= ImGuiTabBarFlags_DrawSelectedOverline;
        if (ImGui::BeginTabBar("##tabs", tab_bar_flags))
        {
            if (opt_reorderable)
                app.NotifyOfDocumentsClosedElsewhere();

            // [DEBUG] Stress tests
            //if ((ImGui::GetFrameCount() % 30) == 0) docs[1].Open ^= 1;            // [DEBUG] Automatically show/hide a tab. Test various interactions e.g. dragging with this on.
            //if (ImGui::GetIO().KeyCtrl) ImGui::SetTabItemSelected(docs[1].Name);  // [DEBUG] Test SetTabItemSelected(), probably not very useful as-is anyway..

            // Submit Tabs
            for (MyDocument& doc : app.Documents)
            {
                if (!doc.Open)
                    continue;

                // As we allow to change document name, we append a never-changing document id so tabs are stable
                char doc_name_buf[64];
                app.GetTabName(&doc, doc_name_buf, sizeof(doc_name_buf));
                ImGuiTabItemFlags tab_flags = (doc.Dirty ? ImGuiTabItemFlags_UnsavedDocument : 0);
                bool visible = ImGui::BeginTabItem(doc_name_buf, &doc.Open, tab_flags);

                // Cancel attempt to close when unsaved add to save queue so we can display a popup.
                if (!doc.Open && doc.Dirty)
                {
                    doc.Open = true;
                    app.CloseQueue.push_back(&doc);
                }

                app.DisplayDocContextMenu(&doc);
                if (visible)
                {
                    app.DisplayDocContents(&doc);
                    ImGui::EndTabItem();
                }
            }

            ImGui::EndTabBar();
        }
    }

    // Display renaming UI
    if (app.RenamingDoc != NULL)
    {
        if (app.RenamingStarted)
            ImGui::OpenPopup("Rename");
        if (ImGui::BeginPopup("Rename"))
        {
            ImGui::SetNextItemWidth(ImGui::GetFontSize() * 30);
            if (ImGui::InputText("###Name", app.RenamingDoc->Name, IM_ARRAYSIZE(app.RenamingDoc->Name), ImGuiInputTextFlags_EnterReturnsTrue))
            {
                ImGui::CloseCurrentPopup();
                app.RenamingDoc = NULL;
            }
            if (app.RenamingStarted)
                ImGui::SetKeyboardFocusHere(-1);
            ImGui::EndPopup();
        }
        else
        {
            app.RenamingDoc = NULL;
        }
        app.RenamingStarted = false;
    }

    // Display closing confirmation UI
    if (!app.CloseQueue.empty())
    {
        int close_queue_unsaved_documents = 0;
        for (int n = 0; n < app.CloseQueue.Size; n++)
            if (app.CloseQueue[n]->Dirty)
                close_queue_unsaved_documents++;

        if (close_queue_unsaved_documents == 0)
        {
            // Close documents when all are unsaved
            for (int n = 0; n < app.CloseQueue.Size; n++)
                app.CloseQueue[n]->DoForceClose();
            app.CloseQueue.clear();
        }
        else
        {
            if (!ImGui::IsPopupOpen("Save?"))
                ImGui::OpenPopup("Save?");
            if (ImGui::BeginPopupModal("Save?", NULL, ImGuiWindowFlags_AlwaysAutoResize))
            {
                ImGui::Text("Save change to the following items?");
                float item_height = ImGui::GetTextLineHeightWithSpacing();
                if (ImGui::BeginChild(ImGui::GetID("frame"), ImVec2(-FLT_MIN, 6.25f * item_height), ImGuiChildFlags_FrameStyle))
                    for (MyDocument* doc : app.CloseQueue)
                        if (doc->Dirty)
                            ImGui::Text("%s", doc->Name);
                ImGui::EndChild();

                ImVec2 button_size(ImGui::GetFontSize() * 7.0f, 0.0f);
                if (ImGui::Button("Yes", button_size))
                {
                    for (MyDocument* doc : app.CloseQueue)
                    {
                        if (doc->Dirty)
                            doc->DoSave();
                        doc->DoForceClose();
                    }
                    app.CloseQueue.clear();
                    ImGui::CloseCurrentPopup();
                }
                ImGui::SameLine();
                if (ImGui::Button("No", button_size))
                {
                    for (MyDocument* doc : app.CloseQueue)
                        doc->DoForceClose();
                    app.CloseQueue.clear();
                    ImGui::CloseCurrentPopup();
                }
                ImGui::SameLine();
                if (ImGui::Button("Cancel", button_size))
                {
                    app.CloseQueue.clear();
                    ImGui::CloseCurrentPopup();
                }
                ImGui::EndPopup();
            }
        }
    }

    ImGui::End();
}

//-----------------------------------------------------------------------------
// [SECTION] Example App: Assets Browser / ShowExampleAppAssetsBrowser()
//-----------------------------------------------------------------------------

//#include "imgui_internal.h" // NavMoveRequestTryWrapping()

struct ExampleAsset
{
    ImGuiID ID;
    int     Type;

    ExampleAsset(ImGuiID id, int type) { ID = id; Type = type; }

    static const ImGuiTableSortSpecs* s_current_sort_specs;

    static void SortWithSortSpecs(ImGuiTableSortSpecs* sort_specs, ExampleAsset* items, int items_count)
    {
        s_current_sort_specs = sort_specs; // Store in variable accessible by the sort function.
        if (items_count > 1)
            qsort(items, (size_t)items_count, sizeof(items[0]), ExampleAsset::CompareWithSortSpecs);
        s_current_sort_specs = NULL;
    }

    // Compare function to be used by qsort()
    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)
    {
        const ExampleAsset* a = (const ExampleAsset*)lhs;
        const ExampleAsset* b = (const ExampleAsset*)rhs;
        for (int n = 0; n < s_current_sort_specs->SpecsCount; n++)
        {
            const ImGuiTableColumnSortSpecs* sort_spec = &s_current_sort_specs->Specs[n];
            int delta = 0;
            if (sort_spec->ColumnIndex == 0)
                delta = ((int)a->ID - (int)b->ID);
            else if (sort_spec->ColumnIndex == 1)
                delta = (a->Type - b->Type);
            if (delta > 0)
                return (sort_spec->SortDirection == ImGuiSortDirection_Ascending) ? +1 : -1;
            if (delta < 0)
                return (sort_spec->SortDirection == ImGuiSortDirection_Ascending) ? -1 : +1;
        }
        return ((int)a->ID - (int)b->ID);
    }
};
const ImGuiTableSortSpecs* ExampleAsset::s_current_sort_specs = NULL;

struct ExampleAssetsBrowser
{
    // Options
    bool            ShowTypeOverlay = true;
    bool            AllowSorting = true;
    bool            AllowDragUnselected = false;
    bool            AllowBoxSelect = true;
    float           IconSize = 32.0f;
    int             IconSpacing = 10;
    int             IconHitSpacing = 4;         // Increase hit-spacing if you want to make it possible to clear or box-select from gaps. Some spacing is required to able to amend with Shift+box-select. Value is small in Explorer.
    bool            StretchSpacing = true;

    // State
    ImVector<ExampleAsset> Items;               // Our items
    ExampleSelectionWithDeletion Selection;     // Our selection (ImGuiSelectionBasicStorage + helper funcs to handle deletion)
    ImGuiID         NextItemId = 0;             // Unique identifier when creating new items
    bool            RequestDelete = false;      // Deferred deletion request
    bool            RequestSort = false;        // Deferred sort request
    float           ZoomWheelAccum = 0.0f;      // Mouse wheel accumulator to handle smooth wheels better

    // Calculated sizes for layout, output of UpdateLayoutSizes(). Could be locals but our code is simpler this way.
    ImVec2          LayoutItemSize;
    ImVec2          LayoutItemStep;             // == LayoutItemSize + LayoutItemSpacing
    float           LayoutItemSpacing = 0.0f;
    float           LayoutSelectableSpacing = 0.0f;
    float           LayoutOuterPadding = 0.0f;
    int             LayoutColumnCount = 0;
    int             LayoutLineCount = 0;

    // Functions
    ExampleAssetsBrowser()
    {
        AddItems(10000);
    }
    void AddItems(int count)
    {
        if (Items.Size == 0)
            NextItemId = 0;
        Items.reserve(Items.Size + count);
        for (int n = 0; n < count; n++, NextItemId++)
            Items.push_back(ExampleAsset(NextItemId, (NextItemId % 20) < 15 ? 0 : (NextItemId % 20) < 18 ? 1 : 2));
        RequestSort = true;
    }
    void ClearItems()
    {
        Items.clear();
        Selection.Clear();
    }

    // Logic would be written in the main code BeginChild() and outputting to local variables.
    // We extracted it into a function so we can call it easily from multiple places.
    void UpdateLayoutSizes(float avail_width)
    {
        // Layout: when not stretching: allow extending into right-most spacing.
        LayoutItemSpacing = (float)IconSpacing;
        if (StretchSpacing == false)
            avail_width += floorf(LayoutItemSpacing * 0.5f);

        // Layout: calculate number of icon per line and number of lines
        LayoutItemSize = ImVec2(floorf(IconSize), floorf(IconSize));
        LayoutColumnCount = IM_MAX((int)(avail_width / (LayoutItemSize.x + LayoutItemSpacing)), 1);
        LayoutLineCount = (Items.Size + LayoutColumnCount - 1) / LayoutColumnCount;

        // Layout: when stretching: allocate remaining space to more spacing. Round before division, so item_spacing may be non-integer.
        if (StretchSpacing && LayoutColumnCount > 1)
            LayoutItemSpacing = floorf(avail_width - LayoutItemSize.x * LayoutColumnCount) / LayoutColumnCount;

        LayoutItemStep = ImVec2(LayoutItemSize.x + LayoutItemSpacing, LayoutItemSize.y + LayoutItemSpacing);
        LayoutSelectableSpacing = IM_MAX(floorf(LayoutItemSpacing) - IconHitSpacing, 0.0f);
        LayoutOuterPadding = floorf(LayoutItemSpacing * 0.5f);
    }

    void Draw(const char* title, bool* p_open)
    {
        ImGui::SetNextWindowSize(ImVec2(IconSize * 25, IconSize * 15), ImGuiCond_FirstUseEver);
        if (!ImGui::Begin(title, p_open, ImGuiWindowFlags_MenuBar))
        {
            ImGui::End();
            return;
        }

        // Menu bar
        if (ImGui::BeginMenuBar())
        {
            if (ImGui::BeginMenu("File"))
            {
                if (ImGui::MenuItem("Add 10000 items"))
                    AddItems(10000);
                if (ImGui::MenuItem("Clear items"))
                    ClearItems();
                ImGui::Separator();
                if (ImGui::MenuItem("Close", NULL, false, p_open != NULL))
                    *p_open = false;
                ImGui::EndMenu();
            }
            if (ImGui::BeginMenu("Edit"))
            {
                if (ImGui::MenuItem("Delete", "Del", false, Selection.Size > 0))
                    RequestDelete = true;
                ImGui::EndMenu();
            }
            if (ImGui::BeginMenu("Options"))
            {
                ImGui::PushItemWidth(ImGui::GetFontSize() * 10);

                ImGui::SeparatorText("Contents");
                ImGui::Checkbox("Show Type Overlay", &ShowTypeOverlay);
                ImGui::Checkbox("Allow Sorting", &AllowSorting);

                ImGui::SeparatorText("Selection Behavior");
                ImGui::Checkbox("Allow dragging unselected item", &AllowDragUnselected);
                ImGui::Checkbox("Allow box-selection", &AllowBoxSelect);

                ImGui::SeparatorText("Layout");
                ImGui::SliderFloat("Icon Size", &IconSize, 16.0f, 128.0f, "%.0f");
                ImGui::SameLine(); HelpMarker("Use CTRL+Wheel to zoom");
                ImGui::SliderInt("Icon Spacing", &IconSpacing, 0, 32);
                ImGui::SliderInt("Icon Hit Spacing", &IconHitSpacing, 0, 32);
                ImGui::Checkbox("Stretch Spacing", &StretchSpacing);
                ImGui::PopItemWidth();
                ImGui::EndMenu();
            }
            ImGui::EndMenuBar();
        }

        // Show a table with ONLY one header row to showcase the idea/possibility of using this to provide a sorting UI
        if (AllowSorting)
        {
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));
            ImGuiTableFlags table_flags_for_sort_specs = ImGuiTableFlags_Sortable | ImGuiTableFlags_SortMulti | ImGuiTableFlags_SizingFixedFit | ImGuiTableFlags_Borders;
            if (ImGui::BeginTable("for_sort_specs_only", 2, table_flags_for_sort_specs, ImVec2(0.0f, ImGui::GetFrameHeight())))
            {
                ImGui::TableSetupColumn("Index");
                ImGui::TableSetupColumn("Type");
                ImGui::TableHeadersRow();
                if (ImGuiTableSortSpecs* sort_specs = ImGui::TableGetSortSpecs())
                    if (sort_specs->SpecsDirty || RequestSort)
                    {
                        ExampleAsset::SortWithSortSpecs(sort_specs, Items.Data, Items.Size);
                        sort_specs->SpecsDirty = RequestSort = false;
                    }
                ImGui::EndTable();
            }
            ImGui::PopStyleVar();
        }

        ImGuiIO& io = ImGui::GetIO();
        ImGui::SetNextWindowContentSize(ImVec2(0.0f, LayoutOuterPadding + LayoutLineCount * (LayoutItemSize.y + LayoutItemSpacing)));
        if (ImGui::BeginChild("Assets", ImVec2(0.0f, -ImGui::GetTextLineHeightWithSpacing()), ImGuiChildFlags_Borders, ImGuiWindowFlags_NoMove))
        {
            ImDrawList* draw_list = ImGui::GetWindowDrawList();

            const float avail_width = ImGui::GetContentRegionAvail().x;
            UpdateLayoutSizes(avail_width);

            // Calculate and store start position.
            ImVec2 start_pos = ImGui::GetCursorScreenPos();
            start_pos = ImVec2(start_pos.x + LayoutOuterPadding, start_pos.y + LayoutOuterPadding);
            ImGui::SetCursorScreenPos(start_pos);

            // Multi-select
            ImGuiMultiSelectFlags ms_flags = ImGuiMultiSelectFlags_ClearOnEscape | ImGuiMultiSelectFlags_ClearOnClickVoid;

            // - Enable box-select (in 2D mode, so that changing box-select rectangle X1/X2 boundaries will affect clipped items)
            if (AllowBoxSelect)
                ms_flags |= ImGuiMultiSelectFlags_BoxSelect2d;

            // - This feature allows dragging an unselected item without selecting it (rarely used)
            if (AllowDragUnselected)
                ms_flags |= ImGuiMultiSelectFlags_SelectOnClickRelease;

            // - Enable keyboard wrapping on X axis
            // (FIXME-MULTISELECT: We haven't designed/exposed a general nav wrapping api yet, so this flag is provided as a courtesy to avoid doing:
            //    ImGui::NavMoveRequestTryWrapping(ImGui::GetCurrentWindow(), ImGuiNavMoveFlags_WrapX);
            // When we finish implementing a more general API for this, we will obsolete this flag in favor of the new system)
            ms_flags |= ImGuiMultiSelectFlags_NavWrapX;

            ImGuiMultiSelectIO* ms_io = ImGui::BeginMultiSelect(ms_flags, Selection.Size, Items.Size);

            // Use custom selection adapter: store ID in selection (recommended)
            Selection.UserData = this;
            Selection.AdapterIndexToStorageId = [](ImGuiSelectionBasicStorage* self_, int idx) { ExampleAssetsBrowser* self = (ExampleAssetsBrowser*)self_->UserData; return self->Items[idx].ID; };
            Selection.ApplyRequests(ms_io);

            const bool want_delete = (ImGui::Shortcut(ImGuiKey_Delete, ImGuiInputFlags_Repeat) && (Selection.Size > 0)) || RequestDelete;
            const int item_curr_idx_to_focus = want_delete ? Selection.ApplyDeletionPreLoop(ms_io, Items.Size) : -1;
            RequestDelete = false;

            // Push LayoutSelectableSpacing (which is LayoutItemSpacing minus hit-spacing, if we decide to have hit gaps between items)
            // Altering style ItemSpacing may seem unnecessary as we position every items using SetCursorScreenPos()...
            // But it is necessary for two reasons:
            // - Selectables uses it by default to visually fill the space between two items.
            // - The vertical spacing would be measured by Clipper to calculate line height if we didn't provide it explicitly (here we do).
            ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(LayoutSelectableSpacing, LayoutSelectableSpacing));

            // Rendering parameters
            const ImU32 icon_type_overlay_colors[3] = { 0, IM_COL32(200, 70, 70, 255), IM_COL32(70, 170, 70, 255) };
            const ImU32 icon_bg_color = ImGui::GetColorU32(IM_COL32(35, 35, 35, 220));
            const ImVec2 icon_type_overlay_size = ImVec2(4.0f, 4.0f);
            const bool display_label = (LayoutItemSize.x >= ImGui::CalcTextSize("999").x);

            const int column_count = LayoutColumnCount;
            ImGuiListClipper clipper;
            clipper.Begin(LayoutLineCount, LayoutItemStep.y);
            if (item_curr_idx_to_focus != -1)
                clipper.IncludeItemByIndex(item_curr_idx_to_focus / column_count); // Ensure focused item line is not clipped.
            if (ms_io->RangeSrcItem != -1)
                clipper.IncludeItemByIndex((int)ms_io->RangeSrcItem / column_count); // Ensure RangeSrc item line is not clipped.
            while (clipper.Step())
            {
                for (int line_idx = clipper.DisplayStart; line_idx < clipper.DisplayEnd; line_idx++)
                {
                    const int item_min_idx_for_current_line = line_idx * column_count;
                    const int item_max_idx_for_current_line = IM_MIN((line_idx + 1) * column_count, Items.Size);
                    for (int item_idx = item_min_idx_for_current_line; item_idx < item_max_idx_for_current_line; ++item_idx)
                    {
                        ExampleAsset* item_data = &Items[item_idx];
                        ImGui::PushID((int)item_data->ID);

                        // Position item
                        ImVec2 pos = ImVec2(start_pos.x + (item_idx % column_count) * LayoutItemStep.x, start_pos.y + line_idx * LayoutItemStep.y);
                        ImGui::SetCursorScreenPos(pos);

                        ImGui::SetNextItemSelectionUserData(item_idx);
                        bool item_is_selected = Selection.Contains((ImGuiID)item_data->ID);
                        bool item_is_visible = ImGui::IsRectVisible(LayoutItemSize);
                        ImGui::Selectable("", item_is_selected, ImGuiSelectableFlags_None, LayoutItemSize);

                        // Update our selection state immediately (without waiting for EndMultiSelect() requests)
                        // because we use this to alter the color of our text/icon.
                        if (ImGui::IsItemToggledSelection())
                            item_is_selected = !item_is_selected;

                        // Focus (for after deletion)
                        if (item_curr_idx_to_focus == item_idx)
                            ImGui::SetKeyboardFocusHere(-1);

                        // Drag and drop
                        if (ImGui::BeginDragDropSource())
                        {
                            // Create payload with full selection OR single unselected item.
                            // (the later is only possible when using ImGuiMultiSelectFlags_SelectOnClickRelease)
                            if (ImGui::GetDragDropPayload() == NULL)
                            {
                                ImVector<ImGuiID> payload_items;
                                void* it = NULL;
                                ImGuiID id = 0;
                                if (!item_is_selected)
                                    payload_items.push_back(item_data->ID);
                                else
                                    while (Selection.GetNextSelectedItem(&it, &id))
                                        payload_items.push_back(id);
                                ImGui::SetDragDropPayload("ASSETS_BROWSER_ITEMS", payload_items.Data, (size_t)payload_items.size_in_bytes());
                            }

                            // Display payload content in tooltip, by extracting it from the payload data
                            // (we could read from selection, but it is more correct and reusable to read from payload)
                            const ImGuiPayload* payload = ImGui::GetDragDropPayload();
                            const int payload_count = (int)payload->DataSize / (int)sizeof(ImGuiID);
                            ImGui::Text("%d assets", payload_count);

                            ImGui::EndDragDropSource();
                        }

                        // Render icon (a real app would likely display an image/thumbnail here)
                        // Because we use ImGuiMultiSelectFlags_BoxSelect2d, clipping vertical may occasionally be larger, so we coarse-clip our rendering as well.
                        if (item_is_visible)
                        {
                            ImVec2 box_min(pos.x - 1, pos.y - 1);
                            ImVec2 box_max(box_min.x + LayoutItemSize.x + 2, box_min.y + LayoutItemSize.y + 2); // Dubious
                            draw_list->AddRectFilled(box_min, box_max, icon_bg_color); // Background color
                            if (ShowTypeOverlay && item_data->Type != 0)
                            {
                                ImU32 type_col = icon_type_overlay_colors[item_data->Type % IM_ARRAYSIZE(icon_type_overlay_colors)];
                                draw_list->AddRectFilled(ImVec2(box_max.x - 2 - icon_type_overlay_size.x, box_min.y + 2), ImVec2(box_max.x - 2, box_min.y + 2 + icon_type_overlay_size.y), type_col);
                            }
                            if (display_label)
                            {
                                ImU32 label_col = ImGui::GetColorU32(item_is_selected ? ImGuiCol_Text : ImGuiCol_TextDisabled);
                                char label[32];
                                sprintf(label, "%d", item_data->ID);
                                draw_list->AddText(ImVec2(box_min.x, box_max.y - ImGui::GetFontSize()), label_col, label);
                            }
                        }

                        ImGui::PopID();
                    }
                }
            }
            clipper.End();
            ImGui::PopStyleVar(); // ImGuiStyleVar_ItemSpacing

            // Context menu
            if (ImGui::BeginPopupContextWindow())
            {
                ImGui::Text("Selection: %d items", Selection.Size);
                ImGui::Separator();
                if (ImGui::MenuItem("Delete", "Del", false, Selection.Size > 0))
                    RequestDelete = true;
                ImGui::EndPopup();
            }

            ms_io = ImGui::EndMultiSelect();
            Selection.ApplyRequests(ms_io);
            if (want_delete)
                Selection.ApplyDeletionPostLoop(ms_io, Items, item_curr_idx_to_focus);

            // Zooming with CTRL+Wheel
            if (ImGui::IsWindowAppearing())
                ZoomWheelAccum = 0.0f;
            if (ImGui::IsWindowHovered() && io.MouseWheel != 0.0f && ImGui::IsKeyDown(ImGuiMod_Ctrl) && ImGui::IsAnyItemActive() == false)
            {
                ZoomWheelAccum += io.MouseWheel;
                if (fabsf(ZoomWheelAccum) >= 1.0f)
                {
                    // Calculate hovered item index from mouse location
                    // FIXME: Locking aiming on 'hovered_item_idx' (with a cool-down timer) would ensure zoom keeps on it.
                    const float hovered_item_nx = (io.MousePos.x - start_pos.x + LayoutItemSpacing * 0.5f) / LayoutItemStep.x;
                    const float hovered_item_ny = (io.MousePos.y - start_pos.y + LayoutItemSpacing * 0.5f) / LayoutItemStep.y;
                    const int hovered_item_idx = ((int)hovered_item_ny * LayoutColumnCount) + (int)hovered_item_nx;
                    //ImGui::SetTooltip("%f,%f -> item %d", hovered_item_nx, hovered_item_ny, hovered_item_idx); // Move those 4 lines in block above for easy debugging

                    // Zoom
                    IconSize *= powf(1.1f, (float)(int)ZoomWheelAccum);
                    IconSize = IM_CLAMP(IconSize, 16.0f, 128.0f);
                    ZoomWheelAccum -= (int)ZoomWheelAccum;
                    UpdateLayoutSizes(avail_width);

                    // Manipulate scroll to that we will land at the same Y location of currently hovered item.
                    // - Calculate next frame position of item under mouse
                    // - Set new scroll position to be used in next ImGui::BeginChild() call.
                    float hovered_item_rel_pos_y = ((float)(hovered_item_idx / LayoutColumnCount) + fmodf(hovered_item_ny, 1.0f)) * LayoutItemStep.y;
                    hovered_item_rel_pos_y += ImGui::GetStyle().WindowPadding.y;
                    float mouse_local_y = io.MousePos.y - ImGui::GetWindowPos().y;
                    ImGui::SetScrollY(hovered_item_rel_pos_y - mouse_local_y);
                }
            }
        }
        ImGui::EndChild();

        ImGui::Text("Selected: %d/%d items", Selection.Size, Items.Size);
        ImGui::End();
    }
};

void ShowExampleAppAssetsBrowser(bool* p_open)
{
    IMGUI_DEMO_MARKER("Examples/Assets Browser");
    static ExampleAssetsBrowser assets_browser;
    assets_browser.Draw("Example: Assets Browser", p_open);
}

// End of Demo code
#else

void ImGui::ShowAboutWindow(bool*) {}
void ImGui::ShowDemoWindow(bool*) {}
void ImGui::ShowUserGuide() {}
void ImGui::ShowStyleEditor(ImGuiStyle*) {}
bool ImGui::ShowStyleSelector(const char*) { return false; }

#endif // #ifndef IMGUI_DISABLE_DEMO_WINDOWS

#endif // #ifndef IMGUI_DISABLE


================================================================================
FILE: imnode_examples\main.cpp
================================================================================


#include "node_editor.h"

#include <imgui.h>
#include <imgui_impl_sdl2.h>
#include <imgui_impl_opengl3.h>
#include <imnodes.h>
#include <SDL2/SDL.h>
#if defined(IMGUI_IMPL_OPENGL_ES2)
#include <SDL2/SDL_opengles2.h>
#else
#include <SDL2/SDL_opengl.h>
#endif

#include <stdio.h>

int main(int, char**)
{
    if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_TIMER | SDL_INIT_GAMECONTROLLER) != 0)
    {
        printf("Error: %s\n", SDL_GetError());
        return -1;
    }

    // Decide GL+GLSL versions
#if defined(IMGUI_IMPL_OPENGL_ES2)
    // GL ES 2.0 + GLSL 100
    const char* glsl_version = "#version 100";
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, 0);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_ES);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
#elif defined(__APPLE__)
    // GL 3.2 Core + GLSL 150
    const char* glsl_version = "#version 150";
    SDL_GL_SetAttribute(
        SDL_GL_CONTEXT_FLAGS, SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG); // Always required on Mac
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 2);
#else
    // GL 3.0 + GLSL 130
    const char* glsl_version = "#version 130";
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_FLAGS, 0);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_PROFILE_MASK, SDL_GL_CONTEXT_PROFILE_CORE);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 3);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 0);
#endif

    // Create window with graphics context
    SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);
    SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);
    SDL_WindowFlags window_flags =
        (SDL_WindowFlags)(SDL_WINDOW_OPENGL | SDL_WINDOW_RESIZABLE | SDL_WINDOW_ALLOW_HIGHDPI);
    SDL_Window* window = SDL_CreateWindow(
        "Dear ImGui SDL2+OpenGL3 example",
        SDL_WINDOWPOS_CENTERED,
        SDL_WINDOWPOS_CENTERED,
        1280,
        720,
        window_flags);
    SDL_GLContext gl_context = SDL_GL_CreateContext(window);
    SDL_GL_MakeCurrent(window, gl_context);
    SDL_GL_SetSwapInterval(1); // Enable vsync

    // Setup Dear ImGui context
    IMGUI_CHECKVERSION();
    ImGui::CreateContext();
    ImGuiIO& io = ImGui::GetIO();
    (void)io;

    ImNodes::CreateContext();
    example::NodeEditorInitialize();

    // Setup Dear ImGui style
    ImGui::StyleColorsDark();
    // ImGui::StyleColorsClassic();
    ImNodes::StyleColorsDark();

    // Setup Platform/Renderer backends
    ImGui_ImplSDL2_InitForOpenGL(window, gl_context);
    ImGui_ImplOpenGL3_Init(glsl_version);

    ImVec4 clear_color = ImVec4(0.45f, 0.55f, 0.60f, 1.00f);

    // Main loop
    bool done = false;
    while (!done)
    {
        SDL_Event event;
        while (SDL_PollEvent(&event))
        {
            ImGui_ImplSDL2_ProcessEvent(&event);
            if (event.type == SDL_QUIT)
                done = true;
            if (event.type == SDL_WINDOWEVENT && event.window.event == SDL_WINDOWEVENT_CLOSE &&
                event.window.windowID == SDL_GetWindowID(window))
                done = true;
        }

        // Start the Dear ImGui frame
        ImGui_ImplOpenGL3_NewFrame();
        ImGui_ImplSDL2_NewFrame();
        ImGui::NewFrame();

        example::NodeEditorShow();

        // Rendering
        ImGui::Render();
        glViewport(0, 0, (int)io.DisplaySize.x, (int)io.DisplaySize.y);
        glClearColor(
            clear_color.x * clear_color.w,
            clear_color.y * clear_color.w,
            clear_color.z * clear_color.w,
            clear_color.w);
        glClear(GL_COLOR_BUFFER_BIT);
        ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
        SDL_GL_SwapWindow(window);
    }

    // Cleanup
    ImGui_ImplOpenGL3_Shutdown();
    ImGui_ImplSDL2_Shutdown();
    example::NodeEditorShutdown();
    ImNodes::DestroyContext();
    ImGui::DestroyContext();

    SDL_GL_DeleteContext(gl_context);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}


================================================================================
FILE: imnode_examples\multi_editor.cpp
================================================================================


#include "node_editor.h"
#include <imnodes.h>
#include <imgui.h>
#include <SDL_scancode.h>

#include <algorithm>
#include <vector>

namespace example
{
namespace
{
struct Node
{
    int   id;
    float value;

    Node(const int i, const float v) : id(i), value(v) {}
};

struct Link
{
    int id;
    int start_attr, end_attr;
};

struct Editor
{
    ImNodesEditorContext* context = nullptr;
    std::vector<Node>     nodes;
    std::vector<Link>     links;
    int                   current_id = 0;
};

void show_editor(const char* editor_name, Editor& editor)
{
    ImNodes::EditorContextSet(editor.context);

    ImGui::Begin(editor_name);
    ImGui::TextUnformatted("A -- add node");

    ImNodes::BeginNodeEditor();

    if (ImGui::IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows) &&
        ImNodes::IsEditorHovered() && ImGui::IsKeyReleased(ImGuiKey_A))
    {
        const int node_id = ++editor.current_id;
        ImNodes::SetNodeScreenSpacePos(node_id, ImGui::GetMousePos());
        ImNodes::SnapNodeToGrid(node_id);
        editor.nodes.push_back(Node(node_id, 0.f));
    }

    for (Node& node : editor.nodes)
    {
        ImNodes::BeginNode(node.id);

        ImNodes::BeginNodeTitleBar();
        ImGui::TextUnformatted("node");
        ImNodes::EndNodeTitleBar();

        ImNodes::BeginInputAttribute(node.id << 8);
        ImGui::TextUnformatted("input");
        ImNodes::EndInputAttribute();

        ImNodes::BeginStaticAttribute(node.id << 16);
        ImGui::PushItemWidth(120.0f);
        ImGui::DragFloat("value", &node.value, 0.01f);
        ImGui::PopItemWidth();
        ImNodes::EndStaticAttribute();

        ImNodes::BeginOutputAttribute(node.id << 24);
        const float text_width = ImGui::CalcTextSize("output").x;
        ImGui::Indent(120.f + ImGui::CalcTextSize("value").x - text_width);
        ImGui::TextUnformatted("output");
        ImNodes::EndOutputAttribute();

        ImNodes::EndNode();
    }

    for (const Link& link : editor.links)
    {
        ImNodes::Link(link.id, link.start_attr, link.end_attr);
    }

    ImNodes::EndNodeEditor();

    {
        Link link;
        if (ImNodes::IsLinkCreated(&link.start_attr, &link.end_attr))
        {
            link.id = ++editor.current_id;
            editor.links.push_back(link);
        }
    }

    {
        int link_id;
        if (ImNodes::IsLinkDestroyed(&link_id))
        {
            auto iter = std::find_if(
                editor.links.begin(), editor.links.end(), [link_id](const Link& link) -> bool {
                    return link.id == link_id;
                });
            assert(iter != editor.links.end());
            editor.links.erase(iter);
        }
    }

    ImGui::End();
}

Editor editor1;
Editor editor2;
} // namespace

void NodeEditorInitialize()
{
    editor1.context = ImNodes::EditorContextCreate();
    editor2.context = ImNodes::EditorContextCreate();
    ImNodes::PushAttributeFlag(ImNodesAttributeFlags_EnableLinkDetachWithDragClick);

    ImNodesIO& io = ImNodes::GetIO();
    io.LinkDetachWithModifierClick.Modifier = &ImGui::GetIO().KeyCtrl;
    io.MultipleSelectModifier.Modifier = &ImGui::GetIO().KeyCtrl;

    ImNodesStyle& style = ImNodes::GetStyle();
    style.Flags |= ImNodesStyleFlags_GridLinesPrimary | ImNodesStyleFlags_GridSnapping;
}

void NodeEditorShow()
{
    show_editor("editor1", editor1);
    show_editor("editor2", editor2);
}

void NodeEditorShutdown()
{
    ImNodes::PopAttributeFlag();
    ImNodes::EditorContextFree(editor1.context);
    ImNodes::EditorContextFree(editor2.context);
}
} // namespace example


================================================================================
FILE: imnode_examples\node_editor.h
================================================================================


#pragma once

namespace example
{
void NodeEditorInitialize();
void NodeEditorShow();
void NodeEditorShutdown();
} // namespace example

================================================================================
FILE: imnode_examples\save_load.cpp
================================================================================


#include "node_editor.h"

#include <imnodes.h>
#include <imgui.h>
#include <SDL_keycode.h>

#include <algorithm>
#include <cassert>
#include <fstream>
#include <ios> // for std::streamsize
#include <stddef.h>
#include <vector>

namespace example
{
namespace
{
struct Node
{
    int   id;
    float value;

    Node() = default;

    Node(const int i, const float v) : id(i), value(v) {}
};

struct Link
{
    int id;
    int start_attr, end_attr;
};

class SaveLoadEditor
{
public:
    SaveLoadEditor() : nodes_(), links_(), current_id_(0) {}

    void show()
    {
        ImGui::Begin("Save & load example");
        ImGui::TextUnformatted("A -- add node");
        ImGui::TextUnformatted(
            "Close the executable and rerun it -- your nodes should be exactly "
            "where you left them!");

        ImNodes::BeginNodeEditor();

        if (ImGui::IsWindowFocused(ImGuiFocusedFlags_RootAndChildWindows) &&
            ImNodes::IsEditorHovered() && ImGui::IsKeyReleased(ImGuiKey_A))
        {
            const int node_id = ++current_id_;
            ImNodes::SetNodeScreenSpacePos(node_id, ImGui::GetMousePos());
            nodes_.push_back(Node(node_id, 0.f));
        }

        for (Node& node : nodes_)
        {
            ImNodes::BeginNode(node.id);

            ImNodes::BeginNodeTitleBar();
            ImGui::TextUnformatted("node");
            ImNodes::EndNodeTitleBar();

            ImNodes::BeginInputAttribute(node.id << 8);
            ImGui::TextUnformatted("input");
            ImNodes::EndInputAttribute();

            ImNodes::BeginStaticAttribute(node.id << 16);
            ImGui::PushItemWidth(120.f);
            ImGui::DragFloat("value", &node.value, 0.01f);
            ImGui::PopItemWidth();
            ImNodes::EndStaticAttribute();

            ImNodes::BeginOutputAttribute(node.id << 24);
            const float text_width = ImGui::CalcTextSize("output").x;
            ImGui::Indent(120.f + ImGui::CalcTextSize("value").x - text_width);
            ImGui::TextUnformatted("output");
            ImNodes::EndOutputAttribute();

            ImNodes::EndNode();
        }

        for (const Link& link : links_)
        {
            ImNodes::Link(link.id, link.start_attr, link.end_attr);
        }

        ImNodes::EndNodeEditor();

        {
            Link link;
            if (ImNodes::IsLinkCreated(&link.start_attr, &link.end_attr))
            {
                link.id = ++current_id_;
                links_.push_back(link);
            }
        }

        {
            int link_id;
            if (ImNodes::IsLinkDestroyed(&link_id))
            {
                auto iter =
                    std::find_if(links_.begin(), links_.end(), [link_id](const Link& link) -> bool {
                        return link.id == link_id;
                    });
                assert(iter != links_.end());
                links_.erase(iter);
            }
        }

        ImGui::End();
    }

    void save()
    {
        // Save the internal imnodes state
        ImNodes::SaveCurrentEditorStateToIniFile("save_load.ini");

        // Dump our editor state as bytes into a file

        std::fstream fout(
            "save_load.bytes", std::ios_base::out | std::ios_base::binary | std::ios_base::trunc);

        // copy the node vector to file
        const size_t num_nodes = nodes_.size();
        fout.write(
            reinterpret_cast<const char*>(&num_nodes),
            static_cast<std::streamsize>(sizeof(size_t)));
        fout.write(
            reinterpret_cast<const char*>(nodes_.data()),
            static_cast<std::streamsize>(sizeof(Node) * num_nodes));

        // copy the link vector to file
        const size_t num_links = links_.size();
        fout.write(
            reinterpret_cast<const char*>(&num_links),
            static_cast<std::streamsize>(sizeof(size_t)));
        fout.write(
            reinterpret_cast<const char*>(links_.data()),
            static_cast<std::streamsize>(sizeof(Link) * num_links));

        // copy the current_id to file
        fout.write(
            reinterpret_cast<const char*>(&current_id_), static_cast<std::streamsize>(sizeof(int)));
    }

    void load()
    {
        // Load the internal imnodes state
        ImNodes::LoadCurrentEditorStateFromIniFile("save_load.ini");

        // Load our editor state into memory

        std::fstream fin("save_load.bytes", std::ios_base::in | std::ios_base::binary);

        if (!fin.is_open())
        {
            return;
        }

        // copy nodes into memory
        size_t num_nodes;
        fin.read(reinterpret_cast<char*>(&num_nodes), static_cast<std::streamsize>(sizeof(size_t)));
        nodes_.resize(num_nodes);
        fin.read(
            reinterpret_cast<char*>(nodes_.data()),
            static_cast<std::streamsize>(sizeof(Node) * num_nodes));

        // copy links into memory
        size_t num_links;
        fin.read(reinterpret_cast<char*>(&num_links), static_cast<std::streamsize>(sizeof(size_t)));
        links_.resize(num_links);
        fin.read(
            reinterpret_cast<char*>(links_.data()),
            static_cast<std::streamsize>(sizeof(Link) * num_links));

        // copy current_id into memory
        fin.read(reinterpret_cast<char*>(&current_id_), static_cast<std::streamsize>(sizeof(int)));
    }

private:
    std::vector<Node> nodes_;
    std::vector<Link> links_;
    int               current_id_;
};

static SaveLoadEditor editor;
} // namespace

void NodeEditorInitialize()
{
    ImNodes::GetIO().LinkDetachWithModifierClick.Modifier = &ImGui::GetIO().KeyCtrl;
    ImNodes::PushAttributeFlag(ImNodesAttributeFlags_EnableLinkDetachWithDragClick);
    editor.load();
}

void NodeEditorShow() { editor.show(); }

void NodeEditorShutdown()
{
    ImNodes::PopAttributeFlag();
    editor.save();
}
} // namespace example


================================================================================
FILE: IMGUI_NODE_DESIGN_GUIDE.md
================================================================================


# 📐 ImGui Node UI Design Guide

**Version**: 2.2  
**Last Updated**: 2025-10-24  
**Based on**: `imgui_demo.cpp` best practices + **official imnodes examples**

---

## 🎯 Purpose

This guide documents proven UI patterns for designing professional, consistent, and user-friendly node interfaces in our modular synth environment. All patterns are derived from `imgui_demo.cpp` and real-world refinement.

**Golden Rule**: *Every UI element must respect node boundaries and provide clear, immediate feedback to the user.*

---

## 📏 1. Node Layout & Structure

### 1.1 Item Width Management

**Rule**: Always respect the `itemWidth` parameter passed to `drawParametersInNode()`.

```cpp
void drawParametersInNode(float itemWidth, ...) override
{
    ImGui::PushItemWidth(itemWidth);
    
    // All controls here...
    
    ImGui::PopItemWidth();
}
```

**Why**: This ensures controls don't overflow node boundaries.

---

### 1.2 Section Separators (CRITICAL!)

**❌ NEVER USE** `ImGui::Separator()` or `ImGui::SeparatorText()` inside nodes!

These functions consume full available width and **extend beyond node boundaries**, creating visual glitches.

**✅ CORRECT APPROACH**:

```cpp
// Option 1: Simple text title + spacing
ImGui::Text("Section Name");
ImGui::Spacing();

// Option 2: Color-coded section title (preferred)
ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Section Name");
ImGui::Spacing();

// Option 3: Custom separator (advanced)
ImDrawList* drawList = ImGui::GetWindowDrawList();
ImVec2 pos = ImGui::GetCursorScreenPos();
ImVec2 lineEnd = ImVec2(pos.x + itemWidth, pos.y);
drawList->AddLine(pos, lineEnd, IM_COL32(100, 100, 100, 255), 1.0f);
ImGui::Dummy(ImVec2(0, 1)); // Reserve space for line
ImGui::Spacing();
```

**Reference**: See `MIDIFadersModuleProcessor.cpp` lines 180-185 for working examples.

---

### 1.3 Vertical Spacing

**Best Practice**: Use `ImGui::Spacing()` liberally for visual breathing room.

```cpp
// Between major sections
ImGui::Spacing();
ImGui::Spacing();

// Between related controls
ImGui::Spacing();
```

**From imgui_demo.cpp**: Consistent spacing improves readability significantly.

---

## 🎨 2. Visual Feedback & Indicators

### 2.1 Color-Coded Modulation States

**Pattern**: Use distinct colors to show when parameters are under CV control.

```cpp
const bool isModulated = isParamModulated(paramId);

if (isModulated)
{
    // Cyan for CV modulation
    ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.4f, 0.8f, 1.0f, 1.0f));
    ImGui::PushStyleColor(ImGuiCol_SliderGrab, ImVec4(0.4f, 0.8f, 1.0f, 1.0f));
    ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.2f, 0.4f, 0.5f, 0.5f));
}

if (isModulated) ImGui::BeginDisabled();
// ... slider/control here ...
if (isModulated) ImGui::EndDisabled();

if (isModulated) ImGui::PopStyleColor(3);
```

**Color Scheme**:
- **Cyan** (0.4, 0.8, 1.0): Frequency/Pitch modulation
- **Orange** (1.0, 0.8, 0.4): Timbre/Waveform modulation
- **Magenta** (1.0, 0.4, 1.0): Amplitude/Level modulation
- **Green** (0.4, 1.0, 0.4): Filter/EQ modulation

**Reference**: `VCOModuleProcessor.h` lines 59-64, 151-155

---

### 2.2 Real-Time Meters & Displays

**Pattern**: Use `ImGui::ProgressBar()` for level meters with color coding.

```cpp
float level = lastOutputValues[0]->load();
float absLevel = std::abs(level);

// Color-coded by level
ImVec4 meterColor;
if (absLevel < 0.7f)
    meterColor = ImVec4(0.2f, 0.8f, 0.2f, 1.0f); // Green (safe)
else if (absLevel < 0.9f)
    meterColor = ImVec4(0.9f, 0.7f, 0.0f, 1.0f); // Yellow (hot)
else
    meterColor = ImVec4(0.9f, 0.2f, 0.2f, 1.0f); // Red (clipping!)

ImGui::PushStyleColor(ImGuiCol_PlotHistogram, meterColor);
ImGui::ProgressBar(absLevel, ImVec2(itemWidth, 0), "");
ImGui::PopStyleColor();

ImGui::SameLine(0, 5);
ImGui::Text("%.3f", level);
```

**Reference**: `VCOModuleProcessor.h` lines 202-213

---

### 2.3 Waveform/Data Visualization

**Pattern**: Use `ImGui::PlotLines()` for waveform previews.

```cpp
float waveformData[128];
// ... populate waveformData ...

ImGui::PlotLines(
    "##wavepreview",           // Hidden label (## prefix)
    waveformData,              // Data array
    128,                       // Array size
    0,                         // Values offset
    nullptr,                   // Overlay text
    -1.2f,                     // Scale min
    1.2f,                      // Scale max
    ImVec2(itemWidth, 80)      // Size
);
```

**From imgui_demo.cpp**: Lines 1982-1985, 2012-2013

**Reference**: `VCOModuleProcessor.h` lines 178-192

---

## 💡 3. Tooltips & Help System

### 3.1 HelpMarker Function (Standard)

**REQUIRED**: Implement this helper in every `drawParametersInNode()`:

```cpp
auto HelpMarker = [](const char* desc)
{
    ImGui::SameLine();
    ImGui::TextDisabled("(?)");
    if (ImGui::BeginItemTooltip())
    {
        ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
        ImGui::TextUnformatted(desc);
        ImGui::PopTextWrapPos();
        ImGui::EndTooltip();
    }
};
```

**From imgui_demo.cpp**: Lines 273-282

**Usage**:
```cpp
ImGui::SliderFloat("Frequency", &freq, 20.0f, 20000.0f);
HelpMarker("Sets the fundamental frequency.\nCan be modulated by CV input.");
```

---

### 3.2 Tooltip Best Practices

**Do**:
- ✅ Explain what the parameter does
- ✅ Mention CV modulation behavior
- ✅ Provide typical ranges or values
- ✅ Use `\n` for multi-line explanations

**Don't**:
- ❌ Write essays (keep under 3 lines)
- ❌ Repeat the obvious
- ❌ Forget to call `HelpMarker()` after EVERY control

**Reference**: `VCOModuleProcessor.h` lines 85, 175, 217

---

## 🎛️ 4. Control Patterns

### 4.1 Slider with Label Pattern

**Standard**:
```cpp
if (ImGui::SliderFloat("##paramId", &value, min, max, "%.1f", flags))
{
    if (!isModulated)
        *apvtsParam = value;
}
if (ImGui::IsItemDeactivatedAfterEdit())
    onModificationEnded();

ImGui::SameLine();
ImGui::Text("Parameter Name");
HelpMarker("Description here");
```

**Why separate label?**: Allows color-coding the text independently of the slider.

---

### 4.2 Quick Preset Buttons

**Pattern**: Provide common values as one-click buttons.

```cpp
ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(4, 4));
float btnWidth = (itemWidth - 12) / 4.0f;  // 4 buttons with spacing

if (ImGui::Button("A4", ImVec2(btnWidth, 0)))
{
    *frequencyParam = 440.0f;
    onModificationEnded();
}
if (ImGui::IsItemHovered())
    ImGui::SetTooltip("440 Hz (Concert A)");

ImGui::SameLine();
// ... more buttons ...

ImGui::PopStyleVar();
```

**Reference**: `VCOModuleProcessor.h` lines 103-140

---

### 4.3 Combo Box (Dropdown) Pattern

```cpp
const char* items[] = { "Option 1", "Option 2", "Option 3" };
int currentItem = 0;

if (ImGui::Combo("##comboId", &currentItem, items, IM_ARRAYSIZE(items)))
{
    *apvtsParam = currentItem;
}
if (ImGui::IsItemDeactivatedAfterEdit())
    onModificationEnded();

ImGui::SameLine();
ImGui::Text("Selector Name");
HelpMarker("Choose from available options");
```

---

## 🔄 5. Tables & Multi-Control Layouts

### 5.1 Table Flags (From MIDI Modules Experience)

**REQUIRED FLAGS**:
```cpp
ImGuiTableFlags flags = 
    ImGuiTableFlags_SizingFixedFit |    // Fixed column widths
    ImGuiTableFlags_NoHostExtendX |     // Don't extend beyond itemWidth
    ImGuiTableFlags_Borders |           // Show cell borders
    ImGuiTableFlags_RowBg;              // Alternating row colors

if (ImGui::BeginTable("##tableId", numColumns, flags))
{
    // Setup columns with FIXED width
    ImGui::TableSetupColumn("Name", ImGuiTableColumnFlags_WidthFixed, 120.0f);
    // ... content ...
    ImGui::EndTable();
}
```

**Critical**: ALL columns must use `ImGuiTableColumnFlags_WidthFixed` when using `NoHostExtendX`.

**Reference**: `MIDIFadersModuleProcessor.cpp` table implementation (lines ~400-500)

---

### 5.2 Button Grids

**Pattern**: Use calculated widths for perfect alignment.

```cpp
float spacing = 4.0f;
float btnWidth = (itemWidth - spacing * (numButtons - 1)) / numButtons;

ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));

for (int i = 0; i < numButtons; ++i)
{
    if (i > 0) ImGui::SameLine();
    
    ImGui::PushID(i);  // CRITICAL for unique IDs!
    if (ImGui::Button("Button", ImVec2(btnWidth, 0)))
    {
        // Action
    }
    ImGui::PopID();
}

ImGui::PopStyleVar();
```

---

## 🆔 6. ID Management

### 6.1 Unique IDs Rule

**Every widget must have a unique ImGui ID!**

**Methods**:

1. **Hidden Label Suffix** (`##`):
```cpp
ImGui::SliderFloat("##freq", &freq, ...);  // ID = "##freq"
ImGui::SameLine();
ImGui::Text("Frequency");  // Visible label separate
```

2. **Push/Pop ID Scope**:
```cpp
for (int i = 0; i < count; ++i)
{
    ImGui::PushID(i);
    ImGui::Button("Learn");  // Unique ID: "Learn/0", "Learn/1", etc.
    ImGui::PopID();
}
```

3. **String ID in Popups/Combos**:
```cpp
ImGui::OpenPopup("SavePreset##nodeId");  // Unique per node
```

**From imgui_demo.cpp**: ID management examples throughout, especially lines 1000-1200 (widgets section)

---

## 🎨 7. Custom Drawing (Advanced)

### 7.1 Circular Indicators (Jog Wheel Pattern)

```cpp
ImDrawList* drawList = ImGui::GetWindowDrawList();
ImVec2 center = ImGui::GetCursorScreenPos();
center.x += itemWidth * 0.5f;
center.y += 80.0f;

float radius = 40.0f;

// Background circle
drawList->AddCircle(center, radius, IM_COL32(100, 100, 100, 255), 32, 2.0f);

// Indicator needle
float angle = value * 2.0f * M_PI;  // Convert value to radians
ImVec2 needleEnd(
    center.x + std::cos(angle - M_PI / 2.0f) * (radius - 5.0f),
    center.y + std::sin(angle - M_PI / 2.0f) * (radius - 5.0f)
);

drawList->AddLine(center, needleEnd, IM_COL32(100, 200, 255, 255), 3.0f);
drawList->AddCircleFilled(center, 4.0f, IM_COL32(100, 200, 255, 255));

ImGui::Dummy(ImVec2(itemWidth, 160));  // Reserve space
```

**Reference**: `MIDIJogWheelModuleProcessor.cpp` lines 310-340

---

### 7.2 Clipping Regions

**Pattern**: Constrain drawing to specific area.

```cpp
ImDrawList* drawList = ImGui::GetWindowDrawList();
ImVec2 pos = ImGui::GetCursorScreenPos();
ImVec2 size(itemWidth, 100);

drawList->PushClipRect(pos, ImVec2(pos.x + size.x, pos.y + size.y), true);
// ... drawing code ...
drawList->PopClipRect();
```

**From imgui_demo.cpp**: Lines 6800-6850 (custom rendering examples)

---

## 📦 8. Complete Node Template

```cpp
#if defined(PRESET_CREATOR_UI)
void drawParametersInNode(float itemWidth,
                          const std::function<bool(const juce::String&)>& isParamModulated,
                          const std::function<void()>& onModificationEnded) override
{
    // 1. HelpMarker helper
    auto HelpMarker = [](const char* desc)
    {
        ImGui::SameLine();
        ImGui::TextDisabled("(?)");
        if (ImGui::BeginItemTooltip())
        {
            ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);
            ImGui::TextUnformatted(desc);
            ImGui::PopTextWrapPos();
            ImGui::EndTooltip();
        }
    };

    ImGui::PushItemWidth(itemWidth);

    // 2. Section 1: Main Controls
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Main Controls");
    ImGui::Spacing();
    
    // 3. Modulation-aware slider
    const bool isModulated = isParamModulated("param1");
    
    if (isModulated)
    {
        ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(0.4f, 0.8f, 1.0f, 1.0f));
        ImGui::PushStyleColor(ImGuiCol_SliderGrab, ImVec4(0.4f, 0.8f, 1.0f, 1.0f));
        ImGui::PushStyleColor(ImGuiCol_FrameBg, ImVec4(0.2f, 0.4f, 0.5f, 0.5f));
    }
    
    if (isModulated) ImGui::BeginDisabled();
    
    float param1 = param1Param->load();
    if (ImGui::SliderFloat("##param1", &param1, 0.0f, 1.0f))
    {
        if (!isModulated)
            *param1Param = param1;
    }
    if (ImGui::IsItemDeactivatedAfterEdit())
        onModificationEnded();
    
    if (isModulated) ImGui::EndDisabled();
    
    ImGui::SameLine();
    if (isModulated)
    {
        ImGui::TextColored(ImVec4(0.4f, 0.8f, 1.0f, 1.0f), "Parameter 1 (CV)");
        ImGui::PopStyleColor(3);
    }
    else
    {
        ImGui::Text("Parameter 1");
    }
    HelpMarker("This parameter does something important.\nRange: 0 to 1");

    ImGui::Spacing();
    ImGui::Spacing();

    // 4. Section 2: Visualization
    ImGui::TextColored(ImVec4(0.7f, 0.7f, 0.7f, 1.0f), "Output");
    ImGui::Spacing();
    
    // 5. Real-time meter
    float level = lastOutputValues[0]->load();
    ImVec4 color = (std::abs(level) < 0.7f) 
        ? ImVec4(0.2f, 0.8f, 0.2f, 1.0f)   // Green
        : ImVec4(0.9f, 0.2f, 0.2f, 1.0f);  // Red
    
    ImGui::PushStyleColor(ImGuiCol_PlotHistogram, color);
    ImGui::ProgressBar(std::abs(level), ImVec2(itemWidth, 0), "");
    ImGui::PopStyleColor();
    
    ImGui::SameLine(0, 5);
    ImGui::Text("%.3f", level);
    HelpMarker("Current output level");

    ImGui::PopItemWidth();
}

void drawIoPins(const NodePinHelpers& helpers) override
{
    helpers.drawAudioInputPin("In", 0);
    helpers.drawAudioOutputPin("Out", 0);
}
#endif
```

---

## 🔌 8. Pin Label Spacing (CRITICAL!)

### 8.1 Output Pin Text Alignment

**Problem**: Default spacing between pin labels and pin circles creates visual disconnection.

**From imgui_demo.cpp**: Line 447 shows `ImGui::SameLine(0, 0)` for minimal spacing between elements.

**Best Practice**: Use `ImGui::Indent()` for right-alignment (IMNODES OFFICIAL PATTERN).

```cpp
// ✅ CORRECT: Use Indent() - this is how ALL imnodes examples do it!
// From: color_node_editor.cpp:353, save_load.cpp:77, multi_editor.cpp:73
auto rightLabelWithinWidth = [&](const char* txt, float nodeContentWidth)
{
    const ImVec2 textSize = ImGui::CalcTextSize(txt);
    
    // Indent by (nodeWidth - textWidth) to right-align
    // ImNodes uses Indent(), NOT Dummy() + SameLine()!
    const float indentAmount = juce::jmax(0.0f, nodeContentWidth - textSize.x);
    ImGui::Indent(indentAmount);
    ImGui::TextUnformatted(txt);
    ImGui::Unindent(indentAmount);  // CRITICAL: Reset indent!
};
```

**⚠️ CRITICAL**: Always call `Unindent()` to match `Indent()`! Indent is **persistent** and will affect all subsequent ImGui elements until reset.

**❌ WRONG**: Using Dummy() + SameLine() (imgui_demo.cpp pattern doesn't work for imnodes!)
```cpp
// BAD: This works in regular ImGui windows but NOT in imnodes!
// Causes layout issues and scrollbars in node contexts
ImGui::Dummy(ImVec2(dummyWidth, 0));
ImGui::SameLine(0, 0);
ImGui::TextUnformatted(txt);  // Wrong for imnodes!
```

**❌ WRONG**: Manual cursor positioning
```cpp
// BAD: SetCursorPosX() fights with ImNodes' internal layout
const float leftEdge = ImGui::GetCursorPosX();
ImGui::SetCursorPosX(leftEdge + nodeContentWidth - textWidth);  // Breaks!
```

**❌ WRONG**: GetContentRegionAvail() causes infinite scrollbars!
```cpp
// BAD: GetContentRegionAvail() changes as you add content!
// Creates feedback loop in fixed-size nodes
const float availWidth = ImGui::GetContentRegionAvail().x;
float x = cursorX + (availWidth - textWidth);  // Infinite scaling!
```

**Why `Indent()` is the Correct Pattern for ImNodes**:
- **Official ImNodes pattern**: Used in ALL official imnodes examples
- **Works with ImNodes layout**: Respects node padding and spacing
- **No side effects**: Doesn't trigger scrollbars or layout recalculation
- **Simple and clean**: Single function call, no SameLine() needed

**Example from Official ImNodes (color_node_editor.cpp:351-356)**:
```cpp
ImNodes::BeginOutputAttribute(node.id);
const float label_width = ImGui::CalcTextSize("result").x;
ImGui::Indent(node_width - label_width);  // ← This is the pattern!
ImGui::TextUnformatted("result");
ImNodes::EndOutputAttribute();
```

**Key Insight**: `Dummy()` is used in imnodes to SET node minimum width (line 425), NOT for text alignment!

**Reference**: `ImGuiNodeEditorComponent.cpp` lines 1976-1985

---

### 8.2 Output Pin Circle Positioning (CRITICAL!)

**Problem**: The pin circle itself can be positioned with an offset from the text, creating additional gap.

**❌ WRONG**: Adding offset to pin position
```cpp
const float PIN_CIRCLE_OFFSET = 8.0f;  // Creates 8px gap!
float x_pos = pinMax.x + PIN_CIRCLE_OFFSET;
attrPositions[attr] = ImVec2(x_pos, y_center);
```

**✅ CORRECT**: Zero offset - pin circle at text edge
```cpp
// Text is right-aligned to nodeContentWidth
// Pin circle positioned RIGHT at the edge
float x_pos = pinMax.x;  // No offset!
attrPositions[attr] = ImVec2(x_pos, y_center);
```

**Complete Flow**:
1. Text is right-aligned using `rightLabelWithinWidth` (0px padding)
2. `pinMax.x` captures the rightmost edge of the text area
3. Pin circle is positioned AT `pinMax.x` with no additional offset
4. Result: Pin circle touches text, which touches node border

**Reference**: `ImGuiNodeEditorComponent.cpp` lines 2175-2181, 2061-2067

---

### 8.3 SameLine Spacing Patterns

**From imgui_demo.cpp**:

```cpp
// Zero spacing (tight alignment)
ImGui::Text("Label");
ImGui::SameLine(0, 0);  // Second param = 0 removes extra spacing
ImGui::Button("Button");

// Small spacing (5px)
ImGui::ProgressBar(0.5f);
ImGui::SameLine(0, 5);  // 5px gap
ImGui::Text("50%%");

// Default spacing
ImGui::Checkbox("Option", &flag);
ImGui::SameLine();  // Uses style.ItemSpacing.x
HelpMarker("Tooltip text");
```

**Rule**: Use `SameLine(0, 0)` when you want elements visually "touching" (like pin labels to pins).

---

## 📦 9. ImNodes-Specific Patterns (FROM OFFICIAL EXAMPLES)

### 9.1 Node Content Width Management

**Pattern**: Use fixed widths, NOT GetContentRegionAvail()

```cpp
// From color_node_editor.cpp:314, 363, 415, 482
const float node_width = 100.0f;  // Fixed width for predictable layout
```

**Use Dummy() to set minimum width**:
```cpp
// From color_node_editor.cpp:425
ImGui::Dummy(ImVec2(node_width, 0.f));  // At START of node content
```

**Why Fixed Width**:
- Nodes don't resize dynamically like windows
- Prevents feedback loops and scrollbars
- All examples use hardcoded values (100.0f, 120.0f)

---

### 9.2 Input Attribute Pattern (Left Side)

**Structure**: Text first, then optional control

```cpp
// From color_node_editor.cpp:321-331
ImNodes::BeginInputAttribute(pin_id);
const float label_width = ImGui::CalcTextSize("left").x;
ImGui::TextUnformatted("left");

// If pin not connected, show input control
if (not_connected)
{
    ImGui::SameLine();
    ImGui::PushItemWidth(node_width - label_width);
    ImGui::DragFloat("##hidelabel", &value, 0.01f);
    ImGui::PopItemWidth();
}
ImNodes::EndInputAttribute();
```

**Key Points**:
- Label first, control after (if shown)
- Use `SameLine()` to put control next to label
- `PushItemWidth(node_width - label_width)` ensures control fits

---

### 9.3 Output Attribute Pattern (Right Side)

**Structure**: Indent first, text, then Unindent (NO SameLine!)

```cpp
// From color_node_editor.cpp:351-356 (with Unindent() added for persistence prevention)
ImNodes::BeginOutputAttribute(pin_id);
const float label_width = ImGui::CalcTextSize("result").x;
ImGui::Indent(node_width - label_width);  // ← Right-align!
ImGui::TextUnformatted("result");
ImGui::Unindent(node_width - label_width);  // ← Reset indent! CRITICAL!
ImNodes::EndOutputAttribute();
```

**Critical**: 
- Use `Indent()` for right-alignment, NOT Dummy() + SameLine()!
- **ALWAYS** call `Unindent()` to match `Indent()` - indent is persistent!

**Why Unindent() is Required**:
The imnodes examples work because they only have ONE output per node, so the indent doesn't affect anything else. In our multi-pin nodes, failing to unindent causes ALL subsequent elements to be indented cumulatively, creating the "red line" alignment bug where all text appears at the same wrong X position.

---

### 9.4 Static Attribute Pattern (No Pin)

**Structure**: For controls that don't connect to anything

```cpp
// From save_load.cpp:69-73, multi_editor.cpp:65-69
ImNodes::BeginStaticAttribute(attr_id);
ImGui::PushItemWidth(120.f);
ImGui::DragFloat("value", &value, 0.01f);
ImGui::PopItemWidth();
ImNodes::EndStaticAttribute();
```

**Use Cases**:
- Node settings/parameters
- Controls that affect node behavior
- UI elements without data flow

---

### 9.5 Node Layout Best Practices

**From ALL imnodes examples**:

1. **Title bar always first**:
```cpp
ImNodes::BeginNode(node_id);
ImNodes::BeginNodeTitleBar();
ImGui::TextUnformatted("node name");
ImNodes::EndNodeTitleBar();
// ... content ...
ImNodes::EndNode();
```

2. **Use Spacing() between sections**:
```cpp
// From color_node_editor.cpp:348, 400, 441, 458, 508
ImGui::Spacing();  // Visual separation
```

3. **Input pins before output pins**:
```cpp
// Input pins (left side)
ImNodes::BeginInputAttribute(...);
// Output pins (right side)  
ImNodes::BeginOutputAttribute(...);
```

4. **Calculate widths based on text**:
```cpp
const float label_width = ImGui::CalcTextSize("label").x;
```

---

### 9.6 Common Mistakes to Avoid

**❌ DON'T**: Forget to call Unindent() (CRITICAL BUG!)
```cpp
// BAD: Indent persists and affects all subsequent elements!
ImGui::Indent(node_width - text_width);
ImGui::Text("out");
// Missing Unindent() causes "red line" alignment bug!
```

**✅ DO**: Always match Indent() with Unindent()
```cpp
ImGui::Indent(node_width - text_width);
ImGui::Text("out");
ImGui::Unindent(node_width - text_width);  // CRITICAL!
```

**❌ DON'T**: Use Dummy() + SameLine() for output text
```cpp
// This is for ImGui windows, NOT imnodes!
ImGui::Dummy(ImVec2(width, 0));
ImGui::SameLine();
ImGui::Text("out");
```

**❌ DON'T**: Use GetContentRegionAvail() or -1 width in nodes
```cpp
float w = ImGui::GetContentRegionAvail().x;  // Causes scrollbars!
ImGui::ProgressBar(progress, ImVec2(-1, 0), "");  // -1 width also causes infinite scaling!
```

**✅ DO**: Use fixed widths from itemWidth parameter
```cpp
const float node_width = 240.0f;
ImGui::ProgressBar(progress, ImVec2(itemWidth, 0), "");  // Fixed width!
```

**Real-world bug**: MIDI Player initially used `ImVec2(-1, 0)` for progress bar, causing infinite right-side scaling. Fixed by using `ImVec2(itemWidth, 0)`.

**❌ DON'T**: Manually position with SetCursorPosX()
```cpp
ImGui::SetCursorPosX(x);  // Fights with ImNodes layout
```

**✅ DO**: Let ImNodes handle positioning with Indent()
```cpp
ImGui::Indent(amount);
```

---

### 9.7 Complete Node Example (From Official Examples)

```cpp
const float node_width = 100.0f;
ImNodes::BeginNode(node_id);

// Title
ImNodes::BeginNodeTitleBar();
ImGui::TextUnformatted("add");
ImNodes::EndNodeTitleBar();

// Input pin with optional control
ImNodes::BeginInputAttribute(input_id);
const float label_width = ImGui::CalcTextSize("left").x;
ImGui::TextUnformatted("left");
if (!is_connected)
{
    ImGui::SameLine();
    ImGui::PushItemWidth(node_width - label_width);
    ImGui::DragFloat("##hide", &value, 0.01f);
    ImGui::PopItemWidth();
}
ImNodes::EndInputAttribute();

ImGui::Spacing();  // Visual separation

// Output pin (right-aligned)
ImNodes::BeginOutputAttribute(output_id);
const float out_label_width = ImGui::CalcTextSize("result").x;
ImGui::Indent(node_width - out_label_width);
ImGui::TextUnformatted("result");
ImNodes::EndOutputAttribute();

ImNodes::EndNode();
```

**Reference**: color_node_editor.cpp:313-359, save_load.cpp:57-82, multi_editor.cpp:54-78

---

## ✅ 10. Pre-Flight Checklist

Before committing any node UI:

- [ ] No `ImGui::Separator()` or `ImGui::SeparatorText()` used
- [ ] All sections use `ImGui::TextColored()` + `ImGui::Spacing()`
- [ ] Every control has a `HelpMarker()` tooltip
- [ ] Modulated parameters have color-coding
- [ ] All tables use `NoHostExtendX` + `WidthFixed` columns
- [ ] Unique IDs for all widgets (check with `##` or `PushID()`)
- [ ] `ImGui::PushItemWidth(itemWidth)` at start
- [ ] `ImGui::PopItemWidth()` at end
- [ ] Real-time feedback where applicable (meters, plots)
- [ ] Output pins use `Indent()` for right-alignment (NOT Dummy() + SameLine!)
- [ ] Fixed node width used (NOT GetContentRegionAvail())
- [ ] Input pins: label first, control after with SameLine()
- [ ] Output pins: Indent() first, then text
- [ ] Tested with modulation connected and disconnected

---

## 📚 11. Reference Examples

**Best Implementations**:
1. **VCOModuleProcessor.h** (lines 28-220): Complete modern node with all patterns
2. **MIDIFadersModuleProcessor.cpp** (lines 180-600): Table layouts, learn modes
3. **MIDIJogWheelModuleProcessor.cpp** (lines 140-340): Custom drawing, circular indicators

**imgui_demo.cpp Sections**:
- Lines 273-282: HelpMarker implementation
- Lines 1982-2032: PlotLines examples
- Lines 3552-3555: TextColored usage
- Lines 6800-7000: Custom drawing with ImDrawList

**imnodes Official Examples** (H:\0000_CODE\01_collider_pyo\imnode_examples\):
- **hello.cpp**: Basic node structure (lines 17-32)
- **color_node_editor.cpp**: Complete node patterns
  - Fixed width pattern (lines 314, 363, 415, 482)
  - Input attribute with control (lines 321-331)
  - Output attribute with Indent() (lines 351-356)
  - Dummy() for minimum width (line 425)
- **save_load.cpp**: Simple node with static attribute (lines 57-82)
- **multi_editor.cpp**: Multi-context management (lines 54-78)

---

## 🔄 12. Update Log

| Date | Version | Changes |
|------|---------|---------|
| 2025-10-24 | **2.2** | **🚨 CRITICAL BUG FIX**: Documented `-1` width issue in ProgressBar!<br>• **Real-world bug**: MIDI Player used `ImVec2(-1, 0)` for progress bar width<br>• **Symptom**: Infinite right-side scaling, unusable node<br>• **Fix**: Use `ImVec2(itemWidth, 0)` with fixed width parameter<br>• Updated Section 9.6 with progress bar example<br>• Added warning about `-1` width alongside `GetContentRegionAvail()` issue |
| 2025-10-24 | **2.1** | **🚨 CRITICAL BUG FIX**: Added `Unindent()` to match every `Indent()` call!<br>• **Root cause**: Indent() is persistent and was affecting all subsequent elements<br>• **Symptom**: All output labels appeared at same X position ("red line" bug)<br>• **Fix**: Always call `ImGui::Unindent(amount)` after `ImGui::Indent(amount)`<br>• Updated Section 9.3 with Unindent() requirement<br>• Added new Common Mistake #1: Forgetting Unindent()<br>**Why imnodes examples didn't show this**: They only have ONE output per node! |
| 2025-10-24 | **2.0** | **🎯 MAJOR UPDATE**: Analyzed ALL official imnodes examples. Discovered `ImGui::Indent()` is the CORRECT pattern (NOT Dummy()!).<br>• Added comprehensive Section 9: ImNodes-Specific Patterns<br>• Documented input/output attribute patterns from official examples<br>• Added complete node example with all best practices<br>• Updated all code to use Indent() for output pin alignment<br>• Expanded reference section with imnodes examples<br>**Breaking insight**: imgui_demo.cpp patterns don't always apply to imnodes! |
| 2025-10-24 | 1.6 | ~~Dummy() + SameLine() approach~~ (WRONG for imnodes, fixed in v2.0) |
| 2025-10-24 | 1.5 | ~~Manual cursor positioning~~ (WRONG, fixed in v2.0) |
| 2025-10-24 | 1.4 | ~~GetContentRegionAvail()~~ (caused scrollbars, fixed in v2.0) |
| 2025-10-24 | 1.3 | **CRITICAL FIX**: Eliminated PIN_CIRCLE_OFFSET (was 8px). Added Section 8.2: Output Pin Circle Positioning. Pin circles now positioned at pinMax.x with zero offset for perfect node border alignment. |
| 2025-10-24 | 1.2 | Further reduced pin padding from 2px to 0px for maximum tightness. Updated all examples and checklist. |
| 2025-10-24 | 1.1 | Added Section 8: Pin Label Spacing (CRITICAL!). Fixed output pin text gap issue by reducing padding from 8px to 2px. Added SameLine spacing patterns from imgui_demo.cpp. |
| 2025-10-24 | 1.0 | Initial guide created. Added separator fix, color-coding patterns, tooltip system. |

---

## 📝 12. Contributing to This Guide

When you discover a new pattern or fix an issue:

1. Document it here with a clear example
2. Reference the source file and line numbers
3. Explain WHY this pattern is better
4. Add to the Pre-Flight Checklist if applicable
5. Update the version number and log

**This guide is a living document!** Update it after every successful node redesign.

---

**End of Guide** | Version 2.2 | 2025-10-24


